/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpErrorResponse, } from '@angular/common/http';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Router } from '@angular/router';
export class AuthErrorInterceptor {
    /**
     * @param {?} router
     */
    constructor(router) {
        this.router = router;
        this.TIBCO_CLOUD_DOMAIN = 'cloud.tibco.com';
        this.TIBCO_TEST_DOMAIN = 'tenant-integration.tcie.pro';
        this.TIBCO_DEV_DOMAIN = 'emea.tibco.com';
        this.TIBCO_CLOUD_LOGIN = 'https://account.cloud.tibco.com/idm/v1/login-saml?relayState=';
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        return next.handle(req).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            if (err instanceof HttpErrorResponse) {
                if (err.status === 419) {
                    // timed out
                    // should only be used if not on tibco cloud (and hence using our login route)
                    // check if we are hosted on tibco.cloud.com
                    /** @type {?} */
                    const host = window.location.hostname.split('.');
                    /** @type {?} */
                    const hostDomain = host[host.length - 3] + '.' + host[host.length - 2] + '.' + host[host.length - 1];
                    if (hostDomain === this.TIBCO_CLOUD_DOMAIN || hostDomain === this.TIBCO_TEST_DOMAIN || hostDomain === this.TIBCO_DEV_DOMAIN) {
                        // redirect to Tibco Cloud Login
                        // supply base64 encoded redirect string
                        /** @type {?} */
                        const reauthUrl = btoa('{ "resumeURL":"' + window.location.href + '", "tenantId":"BPM" }');
                        console.log('redirecting to: ' + this.TIBCO_CLOUD_LOGIN + reauthUrl);
                        window.location.href = this.TIBCO_CLOUD_LOGIN + reauthUrl;
                    }
                    else {
                        this.router.navigate(['/login'], { queryParams: {} });
                    }
                }
                else {
                    throw err;
                }
            }
            return of(err);
        })));
    }
}
AuthErrorInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuthErrorInterceptor.ctorParameters = () => [
    { type: Router }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthErrorInterceptor.prototype.TIBCO_CLOUD_DOMAIN;
    /**
     * @type {?}
     * @private
     */
    AuthErrorInterceptor.prototype.TIBCO_TEST_DOMAIN;
    /**
     * @type {?}
     * @private
     */
    AuthErrorInterceptor.prototype.TIBCO_DEV_DOMAIN;
    /**
     * @type {?}
     * @private
     */
    AuthErrorInterceptor.prototype.TIBCO_CLOUD_LOGIN;
    /**
     * @type {?}
     * @private
     */
    AuthErrorInterceptor.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24tZXJyb3ItaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtY29yZS1saWIvIiwic291cmNlcyI6WyJsaWIvaW50ZXJjZXB0b3JzL2F1dGhlbnRpY2F0aW9uLWVycm9yLWludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFNTCxpQkFBaUIsR0FDbEIsTUFBTSxzQkFBc0IsQ0FBQztBQUU5QixPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxVQUFVLEVBQU0sTUFBTSxnQkFBZ0IsQ0FBQztBQUMvQyxPQUFPLEVBQXlCLE1BQU0sRUFBc0IsTUFBTSxpQkFBaUIsQ0FBQztBQUdwRixNQUFNLE9BQU8sb0JBQW9COzs7O0lBTS9CLFlBQW9CLE1BQWM7UUFBZCxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBTDFCLHVCQUFrQixHQUFHLGlCQUFpQixDQUFDO1FBQ3ZDLHNCQUFpQixHQUFHLDZCQUE2QixDQUFDO1FBQ2xELHFCQUFnQixHQUFHLGdCQUFnQixDQUFDO1FBQ3BDLHNCQUFpQixHQUFHLCtEQUErRCxDQUFDO0lBRXZELENBQUM7Ozs7OztJQUV0QyxTQUFTLENBQUMsR0FBcUIsRUFBRSxJQUFpQjtRQUNoRCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUMxQixVQUFVOzs7O1FBQUMsQ0FBQyxHQUFRLEVBQUUsRUFBRTtZQUNwQixJQUFJLEdBQUcsWUFBWSxpQkFBaUIsRUFBRTtnQkFDcEMsSUFBSSxHQUFHLENBQUMsTUFBTSxLQUFLLEdBQUcsRUFBRTs7Ozs7MEJBSWhCLElBQUksR0FBRyxNQUFNLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDOzswQkFDMUMsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO29CQUNwRyxJQUFJLFVBQVUsS0FBSyxJQUFJLENBQUMsa0JBQWtCLElBQUksVUFBVSxLQUFLLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxVQUFVLEtBQUssSUFBSSxDQUFDLGdCQUFnQixFQUFFOzs7OzhCQUdySCxTQUFTLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsSUFBSSxHQUFHLHVCQUF1QixDQUFDO3dCQUMxRixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxpQkFBaUIsR0FBRyxTQUFTLENBQUMsQ0FBQzt3QkFDckUsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQztxQkFDM0Q7eUJBQU07d0JBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFDLFdBQVcsRUFBRSxFQUFFLEVBQUMsQ0FBQyxDQUFDO3FCQUNyRDtpQkFDRjtxQkFBTTtvQkFDTCxNQUFNLEdBQUcsQ0FBQztpQkFDWDthQUNGO1lBQ0QsT0FBTyxFQUFFLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDakIsQ0FBQyxFQUNGLENBQ0YsQ0FBQztJQUNKLENBQUM7OztZQXBDRixVQUFVOzs7O1lBRnFCLE1BQU07Ozs7Ozs7SUFJcEMsa0RBQStDOzs7OztJQUMvQyxpREFBMEQ7Ozs7O0lBQzFELGdEQUE0Qzs7Ozs7SUFDNUMsaURBQTRGOzs7OztJQUVoRixzQ0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1xuICBIdHRwUmVxdWVzdCxcbiAgSHR0cEhhbmRsZXIsXG4gIEh0dHBFdmVudCxcbiAgSHR0cEludGVyY2VwdG9yLFxuICBIdHRwUmVzcG9uc2UsXG4gIEh0dHBFcnJvclJlc3BvbnNlLFxufSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2NhdGNoRXJyb3IsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSb3V0ZXIsIFJvdXRlclN0YXRlU25hcHNob3R9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBdXRoRXJyb3JJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIHByaXZhdGUgVElCQ09fQ0xPVURfRE9NQUlOID0gJ2Nsb3VkLnRpYmNvLmNvbSc7XG4gIHByaXZhdGUgVElCQ09fVEVTVF9ET01BSU4gPSAndGVuYW50LWludGVncmF0aW9uLnRjaWUucHJvJztcbiAgcHJpdmF0ZSBUSUJDT19ERVZfRE9NQUlOID0gJ2VtZWEudGliY28uY29tJztcbiAgcHJpdmF0ZSBUSUJDT19DTE9VRF9MT0dJTiA9ICdodHRwczovL2FjY291bnQuY2xvdWQudGliY28uY29tL2lkbS92MS9sb2dpbi1zYW1sP3JlbGF5U3RhdGU9JztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7fVxuXG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpLnBpcGUoXG4gICAgICBjYXRjaEVycm9yKChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgIGlmIChlcnIgaW5zdGFuY2VvZiBIdHRwRXJyb3JSZXNwb25zZSkge1xuICAgICAgICAgICAgaWYgKGVyci5zdGF0dXMgPT09IDQxOSkge1xuICAgICAgICAgICAgICAvLyB0aW1lZCBvdXRcbiAgICAgICAgICAgICAgLy8gc2hvdWxkIG9ubHkgYmUgdXNlZCBpZiBub3Qgb24gdGliY28gY2xvdWQgKGFuZCBoZW5jZSB1c2luZyBvdXIgbG9naW4gcm91dGUpXG4gICAgICAgICAgICAgIC8vIGNoZWNrIGlmIHdlIGFyZSBob3N0ZWQgb24gdGliY28uY2xvdWQuY29tXG4gICAgICAgICAgICAgIGNvbnN0IGhvc3QgPSB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUuc3BsaXQoJy4nKTtcbiAgICAgICAgICAgICAgY29uc3QgaG9zdERvbWFpbiA9IGhvc3RbaG9zdC5sZW5ndGggLSAzXSArICcuJyArIGhvc3RbaG9zdC5sZW5ndGggLSAyXSArICcuJyArIGhvc3RbaG9zdC5sZW5ndGggLSAxXTtcbiAgICAgICAgICAgICAgaWYgKGhvc3REb21haW4gPT09IHRoaXMuVElCQ09fQ0xPVURfRE9NQUlOIHx8IGhvc3REb21haW4gPT09IHRoaXMuVElCQ09fVEVTVF9ET01BSU4gfHwgaG9zdERvbWFpbiA9PT0gdGhpcy5USUJDT19ERVZfRE9NQUlOKSB7XG4gICAgICAgICAgICAgICAgLy8gcmVkaXJlY3QgdG8gVGliY28gQ2xvdWQgTG9naW5cbiAgICAgICAgICAgICAgICAvLyBzdXBwbHkgYmFzZTY0IGVuY29kZWQgcmVkaXJlY3Qgc3RyaW5nXG4gICAgICAgICAgICAgICAgY29uc3QgcmVhdXRoVXJsID0gYnRvYSgneyBcInJlc3VtZVVSTFwiOlwiJyArIHdpbmRvdy5sb2NhdGlvbi5ocmVmICsgJ1wiLCBcInRlbmFudElkXCI6XCJCUE1cIiB9Jyk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3JlZGlyZWN0aW5nIHRvOiAnICsgdGhpcy5USUJDT19DTE9VRF9MT0dJTiArIHJlYXV0aFVybCk7XG4gICAgICAgICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB0aGlzLlRJQkNPX0NMT1VEX0xPR0lOICsgcmVhdXRoVXJsO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL2xvZ2luJ10sIHtxdWVyeVBhcmFtczoge319KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhyb3cgZXJyO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gb2YoZXJyKTtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG4gIH1cbn1cbiJdfQ==