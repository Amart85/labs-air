/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @ngdoc component
 * @name mockingInterceptor
 *
 * @description
 * This interceptor attempts to use local json files from the assets directory to mock Tibco Cloud API calls
 *
 * Each mock file can contain either a single response or a "mockedResponses" object that contains specific URLs and responses
 *
 * @usage
 *
 *
 *
 */
import { Injectable } from '@angular/core';
import { HttpRequest, HttpResponse, HttpClient } from '@angular/common/http';
import { throwError } from 'rxjs';
import { map, catchError, delay } from 'rxjs/operators';
export class MockingInterceptor {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
        this.MOCK_BASE_PATH = '/assets/mocks';
        this.sendRequest = (/**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        (req, next) => {
            return next.handle(req);
        });
    }
    /**
     * @param {?} url
     * @return {?}
     */
    readMockJSON(url) {
        return this.http.get(url);
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        // save original request
        /** @type {?} */
        const originalReq = req.clone();
        // dont mock anything from assets folder
        /** @type {?} */
        const urlparts = req.url.split('.');
        /** @type {?} */
        const pathparts = urlparts[0].split('/');
        if (pathparts[1] === 'assets') {
            return this.sendRequest(originalReq, next);
        }
        // try and find a mock response
        /** @type {?} */
        const resource = originalReq.url.split('?')[0];
        /** @type {?} */
        const segments = resource.split('/');
        /** @type {?} */
        const seg2 = resource.split('/');
        /** @type {?} */
        let path = this.MOCK_BASE_PATH;
        // ignore the http/url parts if present
        /** @type {?} */
        let responseType = 'json';
        if (segments[0] === 'http:' || segments[0] === 'https:') {
            segments.splice(0, 3);
            // we are getting a webresource (will only work for text based resources like svg)
            if (segments[0] === 'webresource') {
                responseType = 'text';
            }
        }
        else {
            // just remove the blank part
            segments.splice(0, 1);
        }
        segments.splice(0, segments.length).forEach((/**
         * @param {?} seg
         * @return {?}
         */
        (seg) => {
            path = path + '/' + seg;
        }));
        if (responseType !== 'text') {
            path = path + '.json';
        }
        else {
            path = path + '.txt';
        }
        /** @type {?} */
        let options = {};
        if (responseType === 'text') {
            options = { responseType: 'text' };
        }
        /** @type {?} */
        const httpRequest = new HttpRequest((/** @type {?} */ ('GET')), path, options);
        req = Object.assign(req, httpRequest);
        req = req.clone();
        return next.handle(req).pipe(delay(100), map((/**
         * @param {?} data
         * @return {?}
         */
        data => {
            /** @type {?} */
            let d = (/** @type {?} */ (data));
            if (d.status === 200) {
                // return the body of the cached response loaded from file
                console.log(originalReq.url);
                /** @type {?} */
                let mockedResponse;
                if (data['body']['mockedResponses']) {
                    // multi mocked response file
                    if (data['body']['mockedResponses'][originalReq.url]) {
                        data['body'] = data['body']['mockedResponses'][originalReq.url];
                        d = (/** @type {?} */ (data));
                        mockedResponse = new HttpResponse(d);
                    }
                    else {
                        // no mock for this URL
                        // todo: there is a bug here that this does not trigger the real call
                        throwError('no mock for this url - no response sent');
                    }
                }
                else {
                    // single mocked response file
                    mockedResponse = new HttpResponse(d);
                }
                return mockedResponse;
            }
            else {
                return data;
            }
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            // no mock file so make real request
            return this.sendRequest(originalReq, next);
        })));
    }
}
MockingInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
MockingInterceptor.ctorParameters = () => [
    { type: HttpClient }
];
if (false) {
    /** @type {?} */
    MockingInterceptor.prototype.MOCK_BASE_PATH;
    /** @type {?} */
    MockingInterceptor.prototype.sendRequest;
    /**
     * @type {?}
     * @private
     */
    MockingInterceptor.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,