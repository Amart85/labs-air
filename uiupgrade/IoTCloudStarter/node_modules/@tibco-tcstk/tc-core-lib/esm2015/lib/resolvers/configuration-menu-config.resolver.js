/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* Used to resolve contents of configuration menu config file */
import { Injectable } from '@angular/core';
import { UiAppIdConfig } from '../models/tc-app-config';
import { map, flatMap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { ConfigurationMenuConfig } from '../models/tc-configuration-menu-config';
import { Location } from '@angular/common';
import { TcCoreCommonFunctions } from '../common/tc-core-common-functions';
export class ConfigurationMenuConfigResolver {
    /**
     * @param {?} http
     * @param {?} location
     */
    constructor(http, location) {
        this.http = http;
        this.location = location;
        // DEFAULT_CONFIG_URL = 'assets/config/<uiAppId>/configurationMenuConfig.json';
        // JS: Changed since we will use different GIT repo for different templates from now on
        this.DEFAULT_CONFIG_URL = 'assets/config/configurationMenuConfig.json';
        this.APP_ID_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/uiAppId.json');
        // can be used to load defaultAppConfig from a JSON config
        this.getConfigurationMenuConfig = (/**
         * @param {?} uiAppId
         * @return {?}
         */
        (uiAppId) => {
            return this.http.get(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, this.DEFAULT_CONFIG_URL.replace('<uiAppId>', uiAppId)));
        });
        // loads uiAppId from json file in assets (appId.json)
        this.getAppId = (/**
         * @return {?}
         */
        () => {
            return this.http.get(this.APP_ID_URL).pipe(map((/**
             * @param {?} uiAppId
             * @return {?}
             */
            uiAppId => {
                /** @type {?} */
                const uiAppIdConfig = new UiAppIdConfig().deserialize(uiAppId);
                return uiAppIdConfig;
            })));
        });
    }
    /**
     * @param {?} routeSnapshot
     * @return {?}
     */
    resolve(routeSnapshot) {
        /** @type {?} */
        const configurationMenuConfig$ = this.getAppId().pipe(flatMap((/**
         * @param {?} uiAppId
         * @return {?}
         */
        uiAppId => {
            return this.getConfigurationMenuConfig(uiAppId.uiAppId).pipe(map((/**
             * @param {?} config
             * @return {?}
             */
            config => {
                return new ConfigurationMenuConfig().deserialize(config);
            })));
        })));
        return configurationMenuConfig$;
    }
}
ConfigurationMenuConfigResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ConfigurationMenuConfigResolver.ctorParameters = () => [
    { type: HttpClient },
    { type: Location }
];
if (false) {
    /** @type {?} */
    ConfigurationMenuConfigResolver.prototype.DEFAULT_CONFIG_URL;
    /** @type {?} */
    ConfigurationMenuConfigResolver.prototype.APP_ID_URL;
    /**
     * @type {?}
     * @private
     */
    ConfigurationMenuConfigResolver.prototype.getConfigurationMenuConfig;
    /**
     * @type {?}
     * @private
     */
    ConfigurationMenuConfigResolver.prototype.getAppId;
    /**
     * @type {?}
     * @private
     */
    ConfigurationMenuConfigResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    ConfigurationMenuConfigResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29uZmlndXJhdGlvbi1tZW51LWNvbmZpZy5yZXNvbHZlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9yZXNvbHZlcnMvY29uZmlndXJhdGlvbi1tZW51LWNvbmZpZy5yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ3hELE9BQU8sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDOUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSx1QkFBdUIsRUFBRSxNQUFNLHdDQUF3QyxDQUFDO0FBQ2pGLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUMscUJBQXFCLEVBQUMsTUFBTSxvQ0FBb0MsQ0FBQztBQUd6RSxNQUFNLE9BQU8sK0JBQStCOzs7OztJQU94QyxZQUFvQixJQUFnQixFQUFVLFFBQWtCO1FBQTVDLFNBQUksR0FBSixJQUFJLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVOzs7UUFIaEUsdUJBQWtCLEdBQUcsNENBQTRDLENBQUM7UUFDbEUsZUFBVSxHQUFHLHFCQUFxQixDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsNEJBQTRCLENBQUMsQ0FBQzs7UUFLcEcsK0JBQTBCOzs7O1FBQUcsQ0FBQyxPQUFlLEVBQUUsRUFBRTtZQUNyRCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU8sQ0FBQyxXQUFXLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xKLENBQUMsRUFBQTs7UUFHTyxhQUFROzs7UUFBRyxHQUE4QixFQUFFO1lBQy9DLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLElBQUksQ0FDdEMsR0FBRzs7OztZQUFDLE9BQU8sQ0FBQyxFQUFFOztzQkFDSixhQUFhLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDO2dCQUM5RCxPQUFPLGFBQWEsQ0FBQztZQUN6QixDQUFDLEVBQUMsQ0FDTCxDQUFDO1FBQ04sQ0FBQyxFQUFBO0lBZm1FLENBQUM7Ozs7O0lBaUJyRSxPQUFPLENBQUMsYUFBcUM7O2NBQ25DLHdCQUF3QixHQUMxQixJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsSUFBSSxDQUNoQixPQUFPOzs7O1FBQUMsT0FBTyxDQUFDLEVBQUU7WUFDZCxPQUFPLElBQUksQ0FBQywwQkFBMEIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUN4RCxHQUFHOzs7O1lBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ1QsT0FBTyxJQUFJLHVCQUF1QixFQUFFLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzdELENBQUMsRUFBQyxDQUNMLENBQUM7UUFDTixDQUFDLEVBQUMsQ0FDTDtRQUNMLE9BQU8sd0JBQXdCLENBQUM7SUFDcEMsQ0FBQzs7O1lBckNKLFVBQVU7Ozs7WUFMRixVQUFVO1lBRVYsUUFBUTs7OztJQVFiLDZEQUFrRTs7SUFDbEUscURBQTRHOzs7OztJQUs1RyxxRUFFQzs7Ozs7SUFHRCxtREFPQzs7Ozs7SUFmVywrQ0FBd0I7Ozs7O0lBQUUsbURBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLyogVXNlZCB0byByZXNvbHZlIGNvbnRlbnRzIG9mIGNvbmZpZ3VyYXRpb24gbWVudSBjb25maWcgZmlsZSAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSZXNvbHZlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFVpQXBwSWRDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvdGMtYXBwLWNvbmZpZyc7XG5pbXBvcnQgeyBtYXAsIGZsYXRNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgQ29uZmlndXJhdGlvbk1lbnVDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvdGMtY29uZmlndXJhdGlvbi1tZW51LWNvbmZpZyc7XG5pbXBvcnQgeyBMb2NhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1RjQ29yZUNvbW1vbkZ1bmN0aW9uc30gZnJvbSAnLi4vY29tbW9uL3RjLWNvcmUtY29tbW9uLWZ1bmN0aW9ucyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDb25maWd1cmF0aW9uTWVudUNvbmZpZ1Jlc29sdmVyIGltcGxlbWVudHMgUmVzb2x2ZTxPYnNlcnZhYmxlPENvbmZpZ3VyYXRpb25NZW51Q29uZmlnPj4ge1xuXG4gICAgLy8gREVGQVVMVF9DT05GSUdfVVJMID0gJ2Fzc2V0cy9jb25maWcvPHVpQXBwSWQ+L2NvbmZpZ3VyYXRpb25NZW51Q29uZmlnLmpzb24nO1xuICAgIC8vIEpTOiBDaGFuZ2VkIHNpbmNlIHdlIHdpbGwgdXNlIGRpZmZlcmVudCBHSVQgcmVwbyBmb3IgZGlmZmVyZW50IHRlbXBsYXRlcyBmcm9tIG5vdyBvblxuICAgIERFRkFVTFRfQ09ORklHX1VSTCA9ICdhc3NldHMvY29uZmlnL2NvbmZpZ3VyYXRpb25NZW51Q29uZmlnLmpzb24nO1xuICAgIEFQUF9JRF9VUkwgPSBUY0NvcmVDb21tb25GdW5jdGlvbnMucHJlcGFyZVVybEZvclN0YXRpY1Jlc291cmNlKHRoaXMubG9jYXRpb24sICdhc3NldHMvY29uZmlnL3VpQXBwSWQuanNvbicpO1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LCBwcml2YXRlIGxvY2F0aW9uOiBMb2NhdGlvbikgeyB9XG5cbiAgICAvLyBjYW4gYmUgdXNlZCB0byBsb2FkIGRlZmF1bHRBcHBDb25maWcgZnJvbSBhIEpTT04gY29uZmlnXG4gICAgcHJpdmF0ZSBnZXRDb25maWd1cmF0aW9uTWVudUNvbmZpZyA9ICh1aUFwcElkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQoVGNDb3JlQ29tbW9uRnVuY3Rpb25zLnByZXBhcmVVcmxGb3JTdGF0aWNSZXNvdXJjZSh0aGlzLmxvY2F0aW9uLCB0aGlzLkRFRkFVTFRfQ09ORklHX1VSTC5yZXBsYWNlKCc8dWlBcHBJZD4nLCB1aUFwcElkKSkpO1xuICAgIH1cblxuICAgIC8vIGxvYWRzIHVpQXBwSWQgZnJvbSBqc29uIGZpbGUgaW4gYXNzZXRzIChhcHBJZC5qc29uKVxuICAgIHByaXZhdGUgZ2V0QXBwSWQgPSAoKTogT2JzZXJ2YWJsZTxVaUFwcElkQ29uZmlnPiA9PiB7XG4gICAgICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHRoaXMuQVBQX0lEX1VSTCkucGlwZShcbiAgICAgICAgICAgIG1hcCh1aUFwcElkID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCB1aUFwcElkQ29uZmlnID0gbmV3IFVpQXBwSWRDb25maWcoKS5kZXNlcmlhbGl6ZSh1aUFwcElkKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdWlBcHBJZENvbmZpZztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcmVzb2x2ZShyb3V0ZVNuYXBzaG90OiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogT2JzZXJ2YWJsZTxDb25maWd1cmF0aW9uTWVudUNvbmZpZz4ge1xuICAgICAgICBjb25zdCBjb25maWd1cmF0aW9uTWVudUNvbmZpZyQgPVxuICAgICAgICAgICAgdGhpcy5nZXRBcHBJZCgpLnBpcGUoXG4gICAgICAgICAgICAgICAgZmxhdE1hcCh1aUFwcElkID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0Q29uZmlndXJhdGlvbk1lbnVDb25maWcodWlBcHBJZC51aUFwcElkKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgbWFwKGNvbmZpZyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBDb25maWd1cmF0aW9uTWVudUNvbmZpZygpLmRlc2VyaWFsaXplKGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApXG4gICAgICAgIHJldHVybiBjb25maWd1cmF0aW9uTWVudUNvbmZpZyQ7XG4gICAgfVxuXG59XG4iXX0=