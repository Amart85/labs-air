/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* Used to resolve contents of landing page config file */
/* This resolver will try and read the config from shared state
 * If a shared state entry does NOT exist it will use the defaults from a config file
 * Then update shared state with those contents
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { UiAppIdConfig } from '../models/tc-app-config';
import { flatMap, map, mergeMap, switchMap } from 'rxjs/operators';
import { TcSharedStateService } from '../services/tc-shared-state.service';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { TcCoreCommonFunctions } from '../common/tc-core-common-functions';
import { TcGeneralLandingPageConfigService } from '../services/tc-general-landing-page-config.service';
import { GeneralLandingPageConfig } from '../models/tc-general-landing-page-config';
export class GeneralLandingPageConfigResolver {
    /**
     * @param {?} tcSharedState
     * @param {?} generalLandingPageConfigService
     * @param {?} http
     * @param {?} location
     */
    constructor(tcSharedState, generalLandingPageConfigService, http, location) {
        this.tcSharedState = tcSharedState;
        this.generalLandingPageConfigService = generalLandingPageConfigService;
        this.http = http;
        this.location = location;
        this.DEFAULT_CONFIG_URL = 'assets/config/landingPages.json';
        this.APP_ID_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/uiAppId.json');
        // note appConfigResolver will need sandboxId to create app config state record.
        // So we expect this to have been set by caller (done by tc-liveapps-lib/laConfigResolver).
        this.setSandbox = (/**
         * @param {?} sandboxId
         * @return {?}
         */
        (sandboxId) => {
            this.sandboxId = sandboxId;
        });
        // can be used to load defaultAppConfig from a JSON config
        this.getDefaultAppConfig = (/**
         * @return {?}
         */
        () => {
            return this.http.get(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, this.DEFAULT_CONFIG_URL));
        });
        // loads uiAppId from json file in assets (appId.json)
        this.getAppId = (/**
         * @return {?}
         */
        () => {
            return this.http.get(this.APP_ID_URL).pipe(map((/**
             * @param {?} uiAppId
             * @return {?}
             */
            uiAppId => {
                /** @type {?} */
                const uiAppIdConfig = new UiAppIdConfig().deserialize(uiAppId);
                this.uiAppId = uiAppIdConfig.uiAppId;
                return uiAppIdConfig;
            })));
        });
    }
    /**
     * @return {?}
     */
    resolve() {
        /** @type {?} */
        const appConfig = this.getAppId().pipe(switchMap((/**
         * @param {?} uiAppId
         * @return {?}
         */
        uiAppId => this.generalLandingPageConfigService.getGeneralLandingPageConfig(uiAppId.uiAppId, true, false)
            .pipe(mergeMap((/**
         * @param {?} generalConfig
         * @return {?}
         */
        generalConfig => {
            if (generalConfig === undefined) {
                return this.getDefaultAppConfig().pipe(flatMap((/**
                 * @param {?} config
                 * @return {?}
                 */
                config => {
                    this.defaultLandingPageConfig = new GeneralLandingPageConfig().deserialize(config);
                    this.defaultLandingPageConfig.uiAppId = this.uiAppId;
                    return this.generalLandingPageConfigService.createGeneralLandingPageConfig(this.sandboxId, this.uiAppId, this.defaultLandingPageConfig)
                        .pipe(flatMap((/**
                     * @param {?} result
                     * @return {?}
                     */
                    result => {
                        /** @type {?} */
                        const newAppConfig = this.defaultLandingPageConfig;
                        newAppConfig.id = result;
                        return this.generalLandingPageConfigService.updateGeneralLandingPageConfig(this.sandboxId, this.uiAppId, newAppConfig, result).pipe(flatMap((
                        // trigger a read to flush the cache since we changed it
                        /**
                         * @param {?} updatedConf
                         * @return {?}
                         */
                        updatedConf => {
                            return this.generalLandingPageConfigService.getGeneralLandingPageConfig(this.uiAppId, true, true).pipe(map((/**
                             * @param {?} cachedConfig
                             * @return {?}
                             */
                            cachedConfig => {
                                return cachedConfig;
                            })));
                        })));
                        // return newAppConfig;
                    })));
                })));
            }
            else {
                return of(generalConfig);
            }
        }))))));
        return appConfig;
    }
}
GeneralLandingPageConfigResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GeneralLandingPageConfigResolver.ctorParameters = () => [
    { type: TcSharedStateService },
    { type: TcGeneralLandingPageConfigService },
    { type: HttpClient },
    { type: Location }
];
if (false) {
    /** @type {?} */
    GeneralLandingPageConfigResolver.prototype.DEFAULT_CONFIG_URL;
    /** @type {?} */
    GeneralLandingPageConfigResolver.prototype.APP_ID_URL;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.sandboxId;
    /** @type {?} */
    GeneralLandingPageConfigResolver.prototype.defaultLandingPageConfig;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.uiAppId;
    /** @type {?} */
    GeneralLandingPageConfigResolver.prototype.setSandbox;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.getDefaultAppConfig;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.getAppId;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.tcSharedState;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.generalLandingPageConfigService;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2VuZXJhbC1sYW5kaW5nLXBhZ2UtY29uZmlnLnJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL3Jlc29sdmVycy9nZW5lcmFsLWxhbmRpbmctcGFnZS1jb25maWcucmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBT0EsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsT0FBTyxFQUFFLEdBQUcsRUFBRSxRQUFRLEVBQUUsU0FBUyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkUsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0scUNBQXFDLENBQUM7QUFDM0UsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBRWxELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSxvQ0FBb0MsQ0FBQztBQUMzRSxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSxvREFBb0QsQ0FBQztBQUN2RyxPQUFPLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQztBQUdwRixNQUFNLE9BQU8sZ0NBQWdDOzs7Ozs7O0lBU3pDLFlBQ1ksYUFBbUMsRUFDbkMsK0JBQWtFLEVBQ2xFLElBQWdCLEVBQ2hCLFFBQWtCO1FBSGxCLGtCQUFhLEdBQWIsYUFBYSxDQUFzQjtRQUNuQyxvQ0FBK0IsR0FBL0IsK0JBQStCLENBQW1DO1FBQ2xFLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQVg5Qix1QkFBa0IsR0FBRyxpQ0FBaUMsQ0FBQztRQUN2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YUFDNUI7UUFDTCxDQUFDLEVBQ0osQ0FDSixFQUNKLENBQ0o7UUFDRCxPQUFPLFNBQVMsQ0FBQztJQUNyQixDQUFDOzs7WUE1RkosVUFBVTs7OztZQVJGLG9CQUFvQjtZQUtwQixpQ0FBaUM7WUFKakMsVUFBVTtZQUVWLFFBQVE7Ozs7SUFRYiw4REFBdUQ7O0lBQ3ZELHNEQUE0Rzs7Ozs7SUFFNUcscURBQTBCOztJQUMxQixvRUFBMEQ7Ozs7O0lBQzFELG1EQUF3Qjs7SUFVeEIsc0RBRUM7Ozs7O0lBR0QsK0RBRUM7Ozs7O0lBR0Qsb0RBU0M7Ozs7O0lBMUJHLHlEQUEyQzs7Ozs7SUFDM0MsMkVBQTBFOzs7OztJQUMxRSxnREFBd0I7Ozs7O0lBQ3hCLG9EQUEwQiIsInNvdXJjZXNDb250ZW50IjpbIi8qIFVzZWQgdG8gcmVzb2x2ZSBjb250ZW50cyBvZiBsYW5kaW5nIHBhZ2UgY29uZmlnIGZpbGUgKi9cblxuLyogVGhpcyByZXNvbHZlciB3aWxsIHRyeSBhbmQgcmVhZCB0aGUgY29uZmlnIGZyb20gc2hhcmVkIHN0YXRlXG4gKiBJZiBhIHNoYXJlZCBzdGF0ZSBlbnRyeSBkb2VzIE5PVCBleGlzdCBpdCB3aWxsIHVzZSB0aGUgZGVmYXVsdHMgZnJvbSBhIGNvbmZpZyBmaWxlXG4gKiBUaGVuIHVwZGF0ZSBzaGFyZWQgc3RhdGUgd2l0aCB0aG9zZSBjb250ZW50c1xuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlc29sdmUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IFVpQXBwSWRDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvdGMtYXBwLWNvbmZpZyc7XG5pbXBvcnQgeyBmbGF0TWFwLCBtYXAsIG1lcmdlTWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBUY1NoYXJlZFN0YXRlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3RjLXNoYXJlZC1zdGF0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBHZW5lcmFsQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL3RjLWdlbmVyYWwtY29uZmlnJztcbmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFRjQ29yZUNvbW1vbkZ1bmN0aW9ucyB9IGZyb20gJy4uL2NvbW1vbi90Yy1jb3JlLWNvbW1vbi1mdW5jdGlvbnMnO1xuaW1wb3J0IHsgVGNHZW5lcmFsTGFuZGluZ1BhZ2VDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdGMtZ2VuZXJhbC1sYW5kaW5nLXBhZ2UtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHsgR2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL3RjLWdlbmVyYWwtbGFuZGluZy1wYWdlLWNvbmZpZyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBHZW5lcmFsTGFuZGluZ1BhZ2VDb25maWdSZXNvbHZlciBpbXBsZW1lbnRzIFJlc29sdmU8T2JzZXJ2YWJsZTxHZW5lcmFsTGFuZGluZ1BhZ2VDb25maWc+PiB7XG5cbiAgICBERUZBVUxUX0NPTkZJR19VUkwgPSAnYXNzZXRzL2NvbmZpZy9sYW5kaW5nUGFnZXMuanNvbic7XG4gICAgQVBQX0lEX1VSTCA9IFRjQ29yZUNvbW1vbkZ1bmN0aW9ucy5wcmVwYXJlVXJsRm9yU3RhdGljUmVzb3VyY2UodGhpcy5sb2NhdGlvbiwgJ2Fzc2V0cy9jb25maWcvdWlBcHBJZC5qc29uJyk7XG5cbiAgICBwcml2YXRlIHNhbmRib3hJZDogbnVtYmVyO1xuICAgIHB1YmxpYyBkZWZhdWx0TGFuZGluZ1BhZ2VDb25maWc6IEdlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZztcbiAgICBwcml2YXRlIHVpQXBwSWQ6IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHRjU2hhcmVkU3RhdGU6IFRjU2hhcmVkU3RhdGVTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGdlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZ1NlcnZpY2U6IFRjR2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICAgICAgICBwcml2YXRlIGxvY2F0aW9uOiBMb2NhdGlvbikgeyB9XG4gICAgLy8gbm90ZSBhcHBDb25maWdSZXNvbHZlciB3aWxsIG5lZWQgc2FuZGJveElkIHRvIGNyZWF0ZSBhcHAgY29uZmlnIHN0YXRlIHJlY29yZC5cbiAgICAvLyBTbyB3ZSBleHBlY3QgdGhpcyB0byBoYXZlIGJlZW4gc2V0IGJ5IGNhbGxlciAoZG9uZSBieSB0Yy1saXZlYXBwcy1saWIvbGFDb25maWdSZXNvbHZlcikuXG5cbiAgICBwdWJsaWMgc2V0U2FuZGJveCA9IChzYW5kYm94SWQ6IG51bWJlcikgPT4ge1xuICAgICAgICB0aGlzLnNhbmRib3hJZCA9IHNhbmRib3hJZDtcbiAgICB9XG5cbiAgICAvLyBjYW4gYmUgdXNlZCB0byBsb2FkIGRlZmF1bHRBcHBDb25maWcgZnJvbSBhIEpTT04gY29uZmlnXG4gICAgcHJpdmF0ZSBnZXREZWZhdWx0QXBwQ29uZmlnID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldChUY0NvcmVDb21tb25GdW5jdGlvbnMucHJlcGFyZVVybEZvclN0YXRpY1Jlc291cmNlKHRoaXMubG9jYXRpb24sIHRoaXMuREVGQVVMVF9DT05GSUdfVVJMKSk7XG4gICAgfVxuXG4gICAgLy8gbG9hZHMgdWlBcHBJZCBmcm9tIGpzb24gZmlsZSBpbiBhc3NldHMgKGFwcElkLmpzb24pXG4gICAgcHJpdmF0ZSBnZXRBcHBJZCA9ICgpOiBPYnNlcnZhYmxlPFVpQXBwSWRDb25maWc+ID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy5BUFBfSURfVVJMKS5waXBlKFxuICAgICAgICAgICAgbWFwKHVpQXBwSWQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVpQXBwSWRDb25maWcgPSBuZXcgVWlBcHBJZENvbmZpZygpLmRlc2VyaWFsaXplKHVpQXBwSWQpO1xuICAgICAgICAgICAgICAgIHRoaXMudWlBcHBJZCA9IHVpQXBwSWRDb25maWcudWlBcHBJZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdWlBcHBJZENvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZXNvbHZlKCk6IE9ic2VydmFibGU8R2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnPiB7XG4gICAgICAgIGNvbnN0IGFwcENvbmZpZyA9IHRoaXMuZ2V0QXBwSWQoKS5waXBlKFxuICAgICAgICAgICAgc3dpdGNoTWFwKHVpQXBwSWQgPT4gdGhpcy5nZW5lcmFsTGFuZGluZ1BhZ2VDb25maWdTZXJ2aWNlLmdldEdlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZyh1aUFwcElkLnVpQXBwSWQsIHRydWUsIGZhbHNlKVxuICAgICAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgICAgICBtZXJnZU1hcChcbiAgICAgICAgICAgICAgICAgICAgICAgIGdlbmVyYWxDb25maWcgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChnZW5lcmFsQ29uZmlnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGVmYXVsdEFwcENvbmZpZygpLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGF0TWFwKGNvbmZpZyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0TGFuZGluZ1BhZ2VDb25maWcgPSBuZXcgR2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnKCkuZGVzZXJpYWxpemUoY29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRMYW5kaW5nUGFnZUNvbmZpZy51aUFwcElkID0gdGhpcy51aUFwcElkO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZ1NlcnZpY2UuY3JlYXRlR2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNhbmRib3hJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51aUFwcElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmRlZmF1bHRMYW5kaW5nUGFnZUNvbmZpZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGF0TWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0FwcENvbmZpZyA9IHRoaXMuZGVmYXVsdExhbmRpbmdQYWdlQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdBcHBDb25maWcuaWQgPSByZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmdlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZ1NlcnZpY2UudXBkYXRlR2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYW5kYm94SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnVpQXBwSWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdBcHBDb25maWcsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQpLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmxhdE1hcChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdHJpZ2dlciBhIHJlYWQgdG8gZmx1c2ggdGhlIGNhY2hlIHNpbmNlIHdlIGNoYW5nZWQgaXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZENvbmYgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnU2VydmljZS5nZXRHZW5lcmFsTGFuZGluZ1BhZ2VDb25maWcodGhpcy51aUFwcElkLCB0cnVlLCB0cnVlKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVkQ29uZmlnID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWRDb25maWc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gbmV3QXBwQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvZihnZW5lcmFsQ29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIGFwcENvbmZpZztcbiAgICB9XG5cbn1cbiJdfQ==