/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @ngdoc component
 * @name RequestCacheService
 *
 * @description
 *
 * This service provides the ability to cache http requests
 *
 *
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
// cache for an hour max
/** @type {?} */
const maxAge = 3.6e+6;
export class RequestCacheService {
    constructor() {
        this.cache = new Map();
    }
    /**
     * @param {?} req
     * @return {?}
     */
    get(req) {
        /** @type {?} */
        const url = req.urlWithParams;
        /** @type {?} */
        const cached = this.cache.get(url);
        if (!cached) {
            return undefined;
        }
        /** @type {?} */
        const isExpired = cached.lastRead < (Date.now() - maxAge);
        /** @type {?} */
        const expired = isExpired ? 'expired ' : '';
        return cached.response;
    }
    /**
     * @param {?} req
     * @param {?} response
     * @return {?}
     */
    put(req, response) {
        // console.log(JSON.stringify(response));
        /** @type {?} */
        const url = req.url;
        /** @type {?} */
        const entry = { url, response, lastRead: Date.now() };
        this.cache.set(url, entry);
        /** @type {?} */
        const expired = Date.now() - maxAge;
        this.cache.forEach((/**
         * @param {?} expiredEntry
         * @return {?}
         */
        expiredEntry => {
            if (expiredEntry.lastRead < expired) {
                this.cache.delete(expiredEntry.url);
            }
        }));
    }
}
RequestCacheService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */ RequestCacheService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function RequestCacheService_Factory() { return new RequestCacheService(); }, token: RequestCacheService, providedIn: "root" });
if (false) {
    /** @type {?} */
    RequestCacheService.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVxdWVzdC1jYWNoZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3JlcXVlc3QtY2FjaGUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7OztBQVdBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7Ozs7TUFJckMsTUFBTSxHQUFHLE1BQU07QUFNckIsTUFBTSxPQUFPLG1CQUFtQjtJQUpoQztRQUtFLFVBQUssR0FBRyxJQUFJLEdBQUcsRUFBRSxDQUFDO0tBNEJuQjs7Ozs7SUExQkMsR0FBRyxDQUFDLEdBQXFCOztjQUNqQixHQUFHLEdBQUcsR0FBRyxDQUFDLGFBQWE7O2NBQ3ZCLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7UUFFbEMsSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUNYLE9BQU8sU0FBUyxDQUFDO1NBQ2xCOztjQUVLLFNBQVMsR0FBRyxNQUFNLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQzs7Y0FDbkQsT0FBTyxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxFQUFFO1FBQzNDLE9BQU8sTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUN6QixDQUFDOzs7Ozs7SUFFRCxHQUFHLENBQUMsR0FBcUIsRUFBRSxRQUEyQjs7O2NBRTlDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRzs7Y0FDYixLQUFLLEdBQUcsRUFBRSxHQUFHLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLEVBQUU7UUFDckQsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDOztjQUVyQixPQUFPLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU07UUFDbkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPOzs7O1FBQUMsWUFBWSxDQUFDLEVBQUU7WUFDaEMsSUFBSSxZQUFZLENBQUMsUUFBUSxHQUFHLE9BQU8sRUFBRTtnQkFDbkMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3JDO1FBQ0gsQ0FBQyxFQUFDLENBQUM7SUFDTCxDQUFDOzs7WUFoQ0YsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7OztJQUdDLG9DQUFrQiIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG5nZG9jIGNvbXBvbmVudFxuICogQG5hbWUgUmVxdWVzdENhY2hlU2VydmljZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoaXMgc2VydmljZSBwcm92aWRlcyB0aGUgYWJpbGl0eSB0byBjYWNoZSBodHRwIHJlcXVlc3RzXG4gKlxuICpcbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwUmVxdWVzdCwgSHR0cFJlc3BvbnNlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG4vLyBjYWNoZSBmb3IgYW4gaG91ciBtYXhcbmNvbnN0IG1heEFnZSA9IDMuNmUrNjtcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBSZXF1ZXN0Q2FjaGVTZXJ2aWNlIHtcbiAgY2FjaGUgPSBuZXcgTWFwKCk7XG5cbiAgZ2V0KHJlcTogSHR0cFJlcXVlc3Q8YW55Pik6IEh0dHBSZXNwb25zZTxhbnk+IHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCB1cmwgPSByZXEudXJsV2l0aFBhcmFtcztcbiAgICBjb25zdCBjYWNoZWQgPSB0aGlzLmNhY2hlLmdldCh1cmwpO1xuXG4gICAgaWYgKCFjYWNoZWQpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgY29uc3QgaXNFeHBpcmVkID0gY2FjaGVkLmxhc3RSZWFkIDwgKERhdGUubm93KCkgLSBtYXhBZ2UpO1xuICAgIGNvbnN0IGV4cGlyZWQgPSBpc0V4cGlyZWQgPyAnZXhwaXJlZCAnIDogJyc7XG4gICAgcmV0dXJuIGNhY2hlZC5yZXNwb25zZTtcbiAgfVxuXG4gIHB1dChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIHJlc3BvbnNlOiBIdHRwUmVzcG9uc2U8YW55Pik6IHZvaWQge1xuICAgIC8vIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHJlc3BvbnNlKSk7XG4gICAgY29uc3QgdXJsID0gcmVxLnVybDtcbiAgICBjb25zdCBlbnRyeSA9IHsgdXJsLCByZXNwb25zZSwgbGFzdFJlYWQ6IERhdGUubm93KCkgfTtcbiAgICB0aGlzLmNhY2hlLnNldCh1cmwsIGVudHJ5KTtcblxuICAgIGNvbnN0IGV4cGlyZWQgPSBEYXRlLm5vdygpIC0gbWF4QWdlO1xuICAgIHRoaXMuY2FjaGUuZm9yRWFjaChleHBpcmVkRW50cnkgPT4ge1xuICAgICAgaWYgKGV4cGlyZWRFbnRyeS5sYXN0UmVhZCA8IGV4cGlyZWQpIHtcbiAgICAgICAgdGhpcy5jYWNoZS5kZWxldGUoZXhwaXJlZEVudHJ5LnVybCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn1cblxuXG4iXX0=