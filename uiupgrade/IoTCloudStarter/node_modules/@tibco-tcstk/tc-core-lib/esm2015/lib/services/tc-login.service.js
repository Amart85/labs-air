/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @ngdoc component
 * @name tcLoginService
 *
 * @description
 *
 * tcLoginService provides services for authenticating against Tibco Subscriber cloud and authorizing with the various
 * Tibco Cloud tenants such as liveapps.
 *
 * These services and related components are typically used when the UI is NOT running on Live Apps WRP/Tibco Cloud
 * When deployed to Live Apps WRP authentication is handled by Tibco Cloud when accessing the protected WRP URL
 *
 *
 */
import { Injectable } from '@angular/core';
import { AccessToken, AuthInfo } from '../models/tc-login';
import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';
import { map, tap } from 'rxjs/operators';
import { Location } from '@angular/common';
import { EMAIL_ID_KEY, CLIENT_ID_KEY } from '../resolvers/login-prefill.resolver';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/common";
export class TcLoginService {
    /**
     * @param {?} http
     * @param {?} location
     */
    constructor(http, location) {
        this.http = http;
        this.location = location;
    }
    // Provide ability to login to Tibco Subscriber Cloud
    /**
     * @param {?} username
     * @param {?} password
     * @param {?} clientID
     * @return {?}
     */
    login(username, password, clientID) {
        localStorage.setItem(EMAIL_ID_KEY, username);
        localStorage.setItem(CLIENT_ID_KEY, clientID);
        /** @type {?} */
        const url = '/idm/v3/login-oauth';
        /** @type {?} */
        const body = new HttpParams()
            .set('Email', username)
            .set('Password', password)
            .set('TenantId', 'bpm')
            .set('ClientID', clientID);
        /** @type {?} */
        const headers = new HttpHeaders()
            .set('Content-Type', 'application/x-www-form-urlencoded');
        return this.http.post(url, body.toString(), { headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} authInfo
         * @return {?}
         */
        authInfo => new AuthInfo().deserialize(authInfo))));
    }
    /**
     * @param {?} username
     * @param {?} password
     * @return {?}
     */
    loginV2(username, password) {
        /** @type {?} */
        const url = '/as/token.oauth2';
        /** @type {?} */
        const body = new HttpParams()
            .set('username', username)
            .set('password', password)
            .set('client_id', 'ropc_ipass')
            .set('grant_type', 'password');
        /** @type {?} */
        const headers = new HttpHeaders()
            .set('Content-Type', 'application/x-www-form-urlencoded');
        return this.http.post(url, body.toString(), { headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} accessToken
         * @return {?}
         */
        accessToken => new AccessToken().deserialize(accessToken))));
    }
    // Provide ability to authorize against live apps (note tenantId: bpm)
    /**
     * @param {?} accessToken
     * @param {?} accountId
     * @return {?}
     */
    laAuthorize(accessToken, accountId) {
        /** @type {?} */
        const url = '/idm/v2/login-oauth';
        /** @type {?} */
        const body = new HttpParams()
            .set('AccessToken', accessToken.access_token)
            .set('TenantId', 'bpm')
            .set('AccountId', accountId);
        /** @type {?} */
        const headers = new HttpHeaders()
            .set('Content-Type', 'application/x-www-form-urlencoded');
        return this.http.post(url, body.toString(), { headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} authInfo
         * @return {?}
         */
        authInfo => new AuthInfo().deserialize(authInfo))));
    }
}
TcLoginService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TcLoginService.ctorParameters = () => [
    { type: HttpClient },
    { type: Location }
];
/** @nocollapse */ TcLoginService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcLoginService_Factory() { return new TcLoginService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Location)); }, token: TcLoginService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcLoginService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TcLoginService.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtbG9naW4uc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90Yy1sb2dpbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdCQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxXQUFXLEVBQUUsUUFBUSxFQUFDLE1BQU0sb0JBQW9CLENBQUM7QUFFekQsT0FBTyxFQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUUsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDekUsT0FBTyxFQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFDLFlBQVksRUFBRSxhQUFhLEVBQUMsTUFBTSxxQ0FBcUMsQ0FBQzs7OztBQU9oRixNQUFNLE9BQU8sY0FBYzs7Ozs7SUFDekIsWUFBb0IsSUFBZ0IsRUFBVSxRQUFrQjtRQUE1QyxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUFJLENBQUM7Ozs7Ozs7O0lBRzlELEtBQUssQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLFFBQVE7UUFDdkMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFDN0MsWUFBWSxDQUFDLE9BQU8sQ0FBQyxhQUFhLEVBQUUsUUFBUSxDQUFDLENBQUM7O2NBR3hDLEdBQUcsR0FBRyxxQkFBcUI7O2NBQzNCLElBQUksR0FBRyxJQUFJLFVBQVUsRUFBRTthQUMxQixHQUFHLENBQUMsT0FBTyxFQUFFLFFBQVEsQ0FBQzthQUN0QixHQUFHLENBQUMsVUFBVSxFQUFFLFFBQVEsQ0FBQzthQUN6QixHQUFHLENBQUMsVUFBVSxF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IjpbIi8qKlxuICogQG5nZG9jIGNvbXBvbmVudFxuICogQG5hbWUgdGNMb2dpblNlcnZpY2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiB0Y0xvZ2luU2VydmljZSBwcm92aWRlcyBzZXJ2aWNlcyBmb3IgYXV0aGVudGljYXRpbmcgYWdhaW5zdCBUaWJjbyBTdWJzY3JpYmVyIGNsb3VkIGFuZCBhdXRob3JpemluZyB3aXRoIHRoZSB2YXJpb3VzXG4gKiBUaWJjbyBDbG91ZCB0ZW5hbnRzIHN1Y2ggYXMgbGl2ZWFwcHMuXG4gKlxuICogVGhlc2Ugc2VydmljZXMgYW5kIHJlbGF0ZWQgY29tcG9uZW50cyBhcmUgdHlwaWNhbGx5IHVzZWQgd2hlbiB0aGUgVUkgaXMgTk9UIHJ1bm5pbmcgb24gTGl2ZSBBcHBzIFdSUC9UaWJjbyBDbG91ZFxuICogV2hlbiBkZXBsb3llZCB0byBMaXZlIEFwcHMgV1JQIGF1dGhlbnRpY2F0aW9uIGlzIGhhbmRsZWQgYnkgVGliY28gQ2xvdWQgd2hlbiBhY2Nlc3NpbmcgdGhlIHByb3RlY3RlZCBXUlAgVVJMXG4gKlxuICpcbiAqL1xuXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QWNjZXNzVG9rZW4sIEF1dGhJbmZvfSBmcm9tICcuLi9tb2RlbHMvdGMtbG9naW4nO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7SHR0cENsaWVudCwgSHR0cEhlYWRlcnMsIEh0dHBQYXJhbXN9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7bWFwLCB0YXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7TG9jYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0VNQUlMX0lEX0tFWSwgQ0xJRU5UX0lEX0tFWX0gZnJvbSAnLi4vcmVzb2x2ZXJzL2xvZ2luLXByZWZpbGwucmVzb2x2ZXInO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcblxuXG5leHBvcnQgY2xhc3MgVGNMb2dpblNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgbG9jYXRpb246IExvY2F0aW9uKSB7IH1cblxuICAvLyBQcm92aWRlIGFiaWxpdHkgdG8gbG9naW4gdG8gVGliY28gU3Vic2NyaWJlciBDbG91ZFxuICBwdWJsaWMgbG9naW4odXNlcm5hbWUsIHBhc3N3b3JkLCBjbGllbnRJRCk6IE9ic2VydmFibGU8QXV0aEluZm8+IHtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShFTUFJTF9JRF9LRVksIHVzZXJuYW1lKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShDTElFTlRfSURfS0VZLCBjbGllbnRJRCk7XG5cblxuICAgIGNvbnN0IHVybCA9ICcvaWRtL3YzL2xvZ2luLW9hdXRoJztcbiAgICBjb25zdCBib2R5ID0gbmV3IEh0dHBQYXJhbXMoKVxuICAgICAgLnNldCgnRW1haWwnLCB1c2VybmFtZSlcbiAgICAgIC5zZXQoJ1Bhc3N3b3JkJywgcGFzc3dvcmQpXG4gICAgICAuc2V0KCdUZW5hbnRJZCcsICdicG0nKVxuICAgICAgLnNldCgnQ2xpZW50SUQnLCBjbGllbnRJRCk7XG4gICAgY29uc3QgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpXG4gICAgICAuc2V0KCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodXJsLCBib2R5LnRvU3RyaW5nKCksIHsgaGVhZGVycyB9KVxuICAgICAgLnBpcGUoXG4gICAgICAgIHRhcCggdmFsID0+IHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ3Rjc1RpbWVzdGFtcCcsIERhdGUubm93KCkudG9TdHJpbmcoKSkpLFxuICAgICAgICBtYXAoIGF1dGhJbmZvID0+IG5ldyBBdXRoSW5mbygpLmRlc2VyaWFsaXplKGF1dGhJbmZvKSkpO1xuICB9XG5cbiAgcHVibGljIGxvZ2luVjIodXNlcm5hbWUsIHBhc3N3b3JkKTogT2JzZXJ2YWJsZTxBY2Nlc3NUb2tlbj4ge1xuICAgIGNvbnN0IHVybCA9ICcvYXMvdG9rZW4ub2F1dGgyJztcbiAgICBjb25zdCBib2R5ID0gbmV3IEh0dHBQYXJhbXMoKVxuICAgICAgLnNldCgndXNlcm5hbWUnLCB1c2VybmFtZSlcbiAgICAgIC5zZXQoJ3Bhc3N3b3JkJywgcGFzc3dvcmQpXG4gICAgICAuc2V0KCdjbGllbnRfaWQnLCAncm9wY19pcGFzcycpXG4gICAgICAuc2V0KCdncmFudF90eXBlJywgJ3Bhc3N3b3JkJyk7XG4gICAgY29uc3QgaGVhZGVycyA9IG5ldyBIdHRwSGVhZGVycygpXG4gICAgICAuc2V0KCdDb250ZW50LVR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJyk7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodXJsLCBib2R5LnRvU3RyaW5nKCksIHsgaGVhZGVycyB9KVxuICAgICAgLnBpcGUoXG4gICAgICAgIHRhcCggdmFsID0+IHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ3Rjc1RpbWVzdGFtcCcsIERhdGUubm93KCkudG9TdHJpbmcoKSkpLFxuICAgICAgICBtYXAoIGFjY2Vzc1Rva2VuID0+IG5ldyBBY2Nlc3NUb2tlbigpLmRlc2VyaWFsaXplKGFjY2Vzc1Rva2VuKSkpO1xuICB9XG5cblxuICAvLyBQcm92aWRlIGFiaWxpdHkgdG8gYXV0aG9yaXplIGFnYWluc3QgbGl2ZSBhcHBzIChub3RlIHRlbmFudElkOiBicG0pXG4gIHB1YmxpYyBsYUF1dGhvcml6ZShhY2Nlc3NUb2tlbjogQWNjZXNzVG9rZW4sIGFjY291bnRJZCk6IE9ic2VydmFibGU8QXV0aEluZm8+IHtcbiAgICBjb25zdCB1cmwgPSAnL2lkbS92Mi9sb2dpbi1vYXV0aCc7XG4gICAgY29uc3QgYm9keSA9IG5ldyBIdHRwUGFyYW1zKClcbiAgICAgIC5zZXQoJ0FjY2Vzc1Rva2VuJywgYWNjZXNzVG9rZW4uYWNjZXNzX3Rva2VuKVxuICAgICAgLnNldCgnVGVuYW50SWQnLCAnYnBtJylcbiAgICAgIC5zZXQoJ0FjY291bnRJZCcsIGFjY291bnRJZCk7XG5cbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKClcbiAgICAgIC5zZXQoJ0NvbnRlbnQtVHlwZScsICdhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQnKTtcblxuICAgIHJldHVybiB0aGlzLmh0dHAucG9zdCh1cmwsIGJvZHkudG9TdHJpbmcoKSwgeyBoZWFkZXJzIH0pXG4gICAgICAucGlwZShcbiAgICAgICAgdGFwKCB2YWwgPT4gc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgndGNzVGltZXN0YW1wJywgRGF0ZS5ub3coKS50b1N0cmluZygpKSksXG4gICAgICAgIG1hcCggYXV0aEluZm8gPT4gbmV3IEF1dGhJbmZvKCkuZGVzZXJpYWxpemUoYXV0aEluZm8pKSk7XG4gIH1cbn1cbiJdfQ==