/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ToolbarButton } from '../models/tc-widget-header';
import * as i0 from "@angular/core";
export class TcButtonsHelperService {
    constructor() {
        this.createButton = (/**
         * @param {?} id
         * @param {?} icon
         * @param {?} filled
         * @param {?} tooltip
         * @param {?} visible
         * @param {?} enabled
         * @return {?}
         */
        (id, icon, filled, tooltip, visible, enabled) => {
            /** @type {?} */
            const newButton = new ToolbarButton().deserialize({
                id: id,
                icon: icon,
                filled: filled,
                tooltip: tooltip,
                visible: visible,
                enabled: enabled
            });
            return newButton;
        });
        this.updateButtons = (/**
         * @param {?} updatedToolbarButtons
         * @param {?} toolbarButtons
         * @return {?}
         */
        (updatedToolbarButtons, toolbarButtons) => {
            updatedToolbarButtons.forEach((/**
             * @param {?} updatedButton
             * @return {?}
             */
            updatedButton => {
                /** @type {?} */
                const idx = toolbarButtons.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.id === updatedButton.id));
                if (idx > -1) {
                    toolbarButtons[idx] = updatedButton;
                }
                else {
                    // no existing button so add it
                    toolbarButtons.push(updatedButton);
                }
            }));
            return toolbarButtons;
        });
        this.addButtons = (/**
         * @param {?} buttons
         * @param {?} toolbarButtons
         * @return {?}
         */
        (buttons, toolbarButtons) => {
            buttons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            button => {
                toolbarButtons.push(button);
            }));
            return toolbarButtons;
        });
        this.removeButtons = (/**
         * @param {?} buttons
         * @param {?} toolbarButtons
         * @return {?}
         */
        (buttons, toolbarButtons) => {
            buttons.forEach((/**
             * @param {?} button
             * @return {?}
             */
            button => {
                /** @type {?} */
                const idx = toolbarButtons.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                item => item.id === button.id));
                toolbarButtons.splice(idx, 1);
            }));
            return toolbarButtons;
        });
    }
}
TcButtonsHelperService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TcButtonsHelperService.ctorParameters = () => [];
/** @nocollapse */ TcButtonsHelperService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcButtonsHelperService_Factory() { return new TcButtonsHelperService(); }, token: TcButtonsHelperService, providedIn: "root" });
if (false) {
    /** @type {?} */
    TcButtonsHelperService.prototype.createButton;
    /** @type {?} */
    TcButtonsHelperService.prototype.updateButtons;
    /** @type {?} */
    TcButtonsHelperService.prototype.addButtons;
    /** @type {?} */
    TcButtonsHelperService.prototype.removeButtons;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtYnV0dG9ucy1oZWxwZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90Yy1idXR0b25zLWhlbHBlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSw0QkFBNEIsQ0FBQzs7QUFLekQsTUFBTSxPQUFPLHNCQUFzQjtJQUVqQztRQUVPLGlCQUFZOzs7Ozs7Ozs7UUFBRyxDQUNwQixFQUFVLEVBQUUsSUFBWSxFQUFFLE1BQWUsRUFBRSxPQUFlLEVBQUUsT0FBZ0IsRUFBRSxPQUFnQixFQUFpQixFQUFFOztrQkFDM0csU0FBUyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUMsV0FBVyxDQUMvQztnQkFDRSxFQUFFLEVBQUUsRUFBRTtnQkFDTixJQUFJLEVBQUUsSUFBSTtnQkFDVixNQUFNLEVBQUUsTUFBTTtnQkFDZCxPQUFPLEVBQUUsT0FBTztnQkFDaEIsT0FBTyxFQUFFLE9BQU87Z0JBQ2hCLE9BQU8sRUFBRSxPQUFPO2FBQ2pCLENBQ0Y7WUFDRCxPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDLEVBQUE7UUFFTSxrQkFBYTs7Ozs7UUFBRyxDQUFDLHFCQUFzQyxFQUFFLGNBQStCLEVBQW1CLEVBQUU7WUFDbEgscUJBQXFCLENBQUMsT0FBTzs7OztZQUFFLGFBQWEsQ0FBQyxFQUFFOztzQkFDdkMsR0FBRyxHQUFHLGNBQWMsQ0FBQyxTQUFTOzs7O2dCQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxhQUFhLENBQUMsRUFBRSxFQUFDO2dCQUMxRSxJQUFJLEdBQUcsR0FBRyxDQUFDLENBQUMsRUFBRTtvQkFDWixjQUFjLENBQUMsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDO2lCQUNyQztxQkFBTTtvQkFDTCwrQkFBK0I7b0JBQy9CLGNBQWMsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7aUJBQ3BDO1lBQ0gsQ0FBQyxFQUFDLENBQUM7WUFDSCxPQUFPLGNBQWMsQ0FBQztRQUN4QixDQUFDLEVBQUE7UUFFTSxlQUFVOzs7OztRQUFHLENBQUMsT0FBd0IsRUFBRSxjQUErQixFQUFtQixFQUFFO1lBQ2pHLE9BQU8sQ0FBQyxPQUFPOzs7O1lBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ3ZCLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUIsQ0FBQyxFQUFDLENBQUM7WUFDSCxPQUFPLGNBQWMsQ0FBQztRQUN4QixDQUFDLEVBQUE7UUFFTSxrQkFBYTs7Ozs7UUFBRyxDQUFDLE9BQXdCLEVBQUUsY0FBK0IsRUFBbUIsRUFBRTtZQUNwRyxPQUFPLENBQUMsT0FBTzs7OztZQUFDLE1BQU0sQ0FBQyxFQUFFOztzQkFDakIsR0FBRyxHQUFHLGNBQWMsQ0FBQyxTQUFTOzs7O2dCQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDLEVBQUUsS0FBSyxNQUFNLENBQUMsRUFBRSxFQUFDO2dCQUNuRSxjQUFjLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoQyxDQUFDLEVBQUMsQ0FBQztZQUNILE9BQU8sY0FBYyxDQUFDO1FBQ3hCLENBQUMsRUFBQTtJQTNDZSxDQUFDOzs7WUFMbEIsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7Ozs7O0lBS0MsOENBYUM7O0lBRUQsK0NBV0M7O0lBRUQsNENBS0M7O0lBRUQsK0NBTUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1Rvb2xiYXJCdXR0b259IGZyb20gJy4uL21vZGVscy90Yy13aWRnZXQtaGVhZGVyJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVGNCdXR0b25zSGVscGVyU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBwdWJsaWMgY3JlYXRlQnV0dG9uID0gKFxuICAgIGlkOiBzdHJpbmcsIGljb246IHN0cmluZywgZmlsbGVkOiBib29sZWFuLCB0b29sdGlwOiBzdHJpbmcsIHZpc2libGU6IGJvb2xlYW4sIGVuYWJsZWQ6IGJvb2xlYW4pOiBUb29sYmFyQnV0dG9uID0+IHtcbiAgICBjb25zdCBuZXdCdXR0b24gPSBuZXcgVG9vbGJhckJ1dHRvbigpLmRlc2VyaWFsaXplKFxuICAgICAge1xuICAgICAgICBpZDogaWQsXG4gICAgICAgIGljb246IGljb24sXG4gICAgICAgIGZpbGxlZDogZmlsbGVkLFxuICAgICAgICB0b29sdGlwOiB0b29sdGlwLFxuICAgICAgICB2aXNpYmxlOiB2aXNpYmxlLFxuICAgICAgICBlbmFibGVkOiBlbmFibGVkXG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gbmV3QnV0dG9uO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZUJ1dHRvbnMgPSAodXBkYXRlZFRvb2xiYXJCdXR0b25zOiBUb29sYmFyQnV0dG9uW10sIHRvb2xiYXJCdXR0b25zOiBUb29sYmFyQnV0dG9uW10pOiBUb29sYmFyQnV0dG9uW10gPT4ge1xuICAgIHVwZGF0ZWRUb29sYmFyQnV0dG9ucy5mb3JFYWNoKCB1cGRhdGVkQnV0dG9uID0+IHtcbiAgICAgIGNvbnN0IGlkeCA9IHRvb2xiYXJCdXR0b25zLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IHVwZGF0ZWRCdXR0b24uaWQpO1xuICAgICAgaWYgKGlkeCA+IC0xKSB7XG4gICAgICAgIHRvb2xiYXJCdXR0b25zW2lkeF0gPSB1cGRhdGVkQnV0dG9uO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbm8gZXhpc3RpbmcgYnV0dG9uIHNvIGFkZCBpdFxuICAgICAgICB0b29sYmFyQnV0dG9ucy5wdXNoKHVwZGF0ZWRCdXR0b24pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0b29sYmFyQnV0dG9ucztcbiAgfVxuXG4gIHB1YmxpYyBhZGRCdXR0b25zID0gKGJ1dHRvbnM6IFRvb2xiYXJCdXR0b25bXSwgdG9vbGJhckJ1dHRvbnM6IFRvb2xiYXJCdXR0b25bXSk6IFRvb2xiYXJCdXR0b25bXSA9PiB7XG4gICAgYnV0dG9ucy5mb3JFYWNoKGJ1dHRvbiA9PiB7XG4gICAgICB0b29sYmFyQnV0dG9ucy5wdXNoKGJ1dHRvbik7XG4gICAgfSk7XG4gICAgcmV0dXJuIHRvb2xiYXJCdXR0b25zO1xuICB9XG5cbiAgcHVibGljIHJlbW92ZUJ1dHRvbnMgPSAoYnV0dG9uczogVG9vbGJhckJ1dHRvbltdLCB0b29sYmFyQnV0dG9uczogVG9vbGJhckJ1dHRvbltdKTogVG9vbGJhckJ1dHRvbltdID0+IHtcbiAgICBidXR0b25zLmZvckVhY2goYnV0dG9uID0+IHtcbiAgICAgIGNvbnN0IGlkeCA9IHRvb2xiYXJCdXR0b25zLmZpbmRJbmRleChpdGVtID0+IGl0ZW0uaWQgPT09IGJ1dHRvbi5pZCk7XG4gICAgICB0b29sYmFyQnV0dG9ucy5zcGxpY2UoaWR4LCAxKTtcbiAgICB9KTtcbiAgICByZXR1cm4gdG9vbGJhckJ1dHRvbnM7XG4gIH1cblxufVxuIl19