/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @ngdoc component
 * @name LegacyIframeService
 *
 * @description
 *
 * Used to handle synchronization and loading of legacy form iframe
 *
 * Will emit false until the iFrame has posted it's ready message
 *
 *
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export class LegacyIframeService {
    constructor() {
        this.iWorkitemFrameReady = new BehaviorSubject(false);
        this.iProcessFrameReady = new BehaviorSubject(false);
        this.workitemStatus = this.iWorkitemFrameReady.asObservable();
        this.processStatus = this.iProcessFrameReady.asObservable();
        this.receiveMessage = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (event.data.action === 'workitemAppReady') {
                this.iWorkitemFrameReady.next(true);
                console.log('*** workitems iframe ready');
            }
            else if (event.data.action === 'processAppReady') {
                this.iProcessFrameReady.next(true);
                console.log('*** process iframe ready');
            }
        });
        console.log('*** service waiting for message');
        window.addEventListener('message', this.receiveMessage, false);
    }
}
LegacyIframeService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LegacyIframeService.ctorParameters = () => [];
/** @nocollapse */ LegacyIframeService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LegacyIframeService_Factory() { return new LegacyIframeService(); }, token: LegacyIframeService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    LegacyIframeService.prototype.iWorkitemFrameReady;
    /**
     * @type {?}
     * @private
     */
    LegacyIframeService.prototype.iProcessFrameReady;
    /** @type {?} */
    LegacyIframeService.prototype.workitemStatus;
    /** @type {?} */
    LegacyIframeService.prototype.processStatus;
    /**
     * @type {?}
     * @private
     */
    LegacyIframeService.prototype.receiveMessage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnYWN5LWlmcmFtZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2xlZ2FjeS1pZnJhbWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBYUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sTUFBTSxDQUFDOztBQU1yQyxNQUFNLE9BQU8sbUJBQW1CO0lBTzlCO1FBTFEsd0JBQW1CLEdBQUcsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakQsdUJBQWtCLEdBQUcsSUFBSSxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakQsbUJBQWMsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDekQsa0JBQWEsR0FBRyxJQUFJLENBQUMsa0JBQWtCLENBQUMsWUFBWSxFQUFFLENBQUM7UUFPdEQsbUJBQWM7Ozs7UUFBRyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQ2pDLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLEtBQUssa0JBQWtCLEVBQUU7Z0JBQzVDLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsNEJBQTRCLENBQUMsQ0FBQzthQUMzQztpQkFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLGlCQUFpQixFQUFFO2dCQUNsRCxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLDBCQUEwQixDQUFDLENBQUM7YUFDekM7UUFDSCxDQUFDLEVBQUE7UUFaQyxPQUFPLENBQUMsR0FBRyxDQUFDLGlDQUFpQyxDQUFDLENBQUM7UUFDL0MsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2pFLENBQUM7OztZQWRGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs7Ozs7OztJQUlDLGtEQUF5RDs7Ozs7SUFDekQsaURBQXdEOztJQUN4RCw2Q0FBZ0U7O0lBQ2hFLDRDQUE4RDs7Ozs7SUFPOUQsNkNBUUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBuZ2RvYyBjb21wb25lbnRcbiAqIEBuYW1lIExlZ2FjeUlmcmFtZVNlcnZpY2VcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqXG4gKiBVc2VkIHRvIGhhbmRsZSBzeW5jaHJvbml6YXRpb24gYW5kIGxvYWRpbmcgb2YgbGVnYWN5IGZvcm0gaWZyYW1lXG4gKlxuICogV2lsbCBlbWl0IGZhbHNlIHVudGlsIHRoZSBpRnJhbWUgaGFzIHBvc3RlZCBpdCdzIHJlYWR5IG1lc3NhZ2VcbiAqXG4gKlxuICovXG5cbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5cbmV4cG9ydCBjbGFzcyBMZWdhY3lJZnJhbWVTZXJ2aWNlIHtcblxuICBwcml2YXRlIGlXb3JraXRlbUZyYW1lUmVhZHkgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcbiAgcHJpdmF0ZSBpUHJvY2Vzc0ZyYW1lUmVhZHkgPSBuZXcgQmVoYXZpb3JTdWJqZWN0KGZhbHNlKTtcbiAgcHVibGljIHdvcmtpdGVtU3RhdHVzID0gdGhpcy5pV29ya2l0ZW1GcmFtZVJlYWR5LmFzT2JzZXJ2YWJsZSgpO1xuICBwdWJsaWMgcHJvY2Vzc1N0YXR1cyA9IHRoaXMuaVByb2Nlc3NGcmFtZVJlYWR5LmFzT2JzZXJ2YWJsZSgpO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnNvbGUubG9nKCcqKiogc2VydmljZSB3YWl0aW5nIGZvciBtZXNzYWdlJyk7XG4gICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ21lc3NhZ2UnLCB0aGlzLnJlY2VpdmVNZXNzYWdlLCBmYWxzZSk7XG4gIH1cblxuICBwcml2YXRlIHJlY2VpdmVNZXNzYWdlID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKGV2ZW50LmRhdGEuYWN0aW9uID09PSAnd29ya2l0ZW1BcHBSZWFkeScpIHtcbiAgICAgIHRoaXMuaVdvcmtpdGVtRnJhbWVSZWFkeS5uZXh0KHRydWUpO1xuICAgICAgY29uc29sZS5sb2coJyoqKiB3b3JraXRlbXMgaWZyYW1lIHJlYWR5Jyk7XG4gICAgfSBlbHNlIGlmIChldmVudC5kYXRhLmFjdGlvbiA9PT0gJ3Byb2Nlc3NBcHBSZWFkeScpIHtcbiAgICAgIHRoaXMuaVByb2Nlc3NGcmFtZVJlYWR5Lm5leHQodHJ1ZSk7XG4gICAgICBjb25zb2xlLmxvZygnKioqIHByb2Nlc3MgaWZyYW1lIHJlYWR5Jyk7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==