/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { SharedStateContent, SharedStateEntry, SharedStateList } from '../models/tc-shared-state';
import { map } from 'rxjs/operators';
import { Location } from '@angular/common';
import { TcCoreCommonFunctions } from '../common/tc-core-common-functions';
import { GeneralConfig } from '../models/tc-general-config';
import { TcSharedStateService } from './tc-shared-state.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./tc-shared-state.service";
export class TcGeneralConfigService {
    /**
     * @param {?} location
     * @param {?} sharedStateService
     */
    constructor(location, sharedStateService) {
        this.location = location;
        this.sharedStateService = sharedStateService;
    }
    /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} generalConfig
     * @return {?}
     */
    createGeneralConfig(sandboxId, uiAppId, generalConfig) {
        /** @type {?} */
        const ssName = uiAppId + '.general.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        const content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(generalConfig));
        return this.sharedStateService.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => value)));
    }
    /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    getGeneralConfig(uiAppId, useCache, flushCache) {
        // if useCache is false this will trigger the service to update the cached version with latest
        /** @type {?} */
        const ssName = uiAppId + '.general.config.tibcolabs.client.context.PUBLIC';
        return this.sharedStateService.getSharedState(ssName, 'PUBLIC', useCache, flushCache)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value.sharedStateEntries.length > 0) {
                /** @type {?} */
                const ssresult = new GeneralConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));
                ssresult.id = value.sharedStateEntries[0].id;
                return ssresult;
            }
            else {
                return undefined;
            }
        })));
    }
    /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} generalConfig
     * @param {?} id
     * @return {?}
     */
    updateGeneralConfig(sandboxId, uiAppId, generalConfig, id) {
        /** @type {?} */
        const ssName = uiAppId + '.general.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        const content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(generalConfig));
        /** @type {?} */
        const entry = new SharedStateEntry();
        entry.content = content;
        entry.sandboxId = sandboxId;
        entry.name = ssName;
        entry.type = 'PUBLIC';
        entry.id = id;
        /** @type {?} */
        const ssList = new SharedStateList();
        ssList.sharedStateEntries = [];
        ssList.sharedStateEntries.push(entry);
        return this.sharedStateService.updateSharedState(ssList.sharedStateEntries)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            // flush the cache
            this.getGeneralConfig(uiAppId, true, true).subscribe();
            return new GeneralConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));
        })));
    }
}
TcGeneralConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TcGeneralConfigService.ctorParameters = () => [
    { type: Location },
    { type: TcSharedStateService }
];
/** @nocollapse */ TcGeneralConfigService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcGeneralConfigService_Factory() { return new TcGeneralConfigService(i0.ɵɵinject(i1.Location), i0.ɵɵinject(i2.TcSharedStateService)); }, token: TcGeneralConfigService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcGeneralConfigService.prototype.location;
    /**
     * @type {?}
     * @private
     */
    TcGeneralConfigService.prototype.sharedStateService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtZ2VuZXJhbC1jb25maWcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90Yy1nZW5lcmFsLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUVoRyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkMsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUMxRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQzs7OztBQUsvRCxNQUFNLE9BQU8sc0JBQXNCOzs7OztJQUVqQyxZQUFvQixRQUFrQixFQUFVLGtCQUF3QztRQUFwRSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFzQjtJQUN4RixDQUFDOzs7Ozs7O0lBRU0sbUJBQW1CLENBQUMsU0FBaUIsRUFBRSxPQUFlLEVBQUUsYUFBNEI7O2NBQ25GLE1BQU0sR0FBRyxPQUFPLEdBQUcsaURBQWlEOztjQUNwRSxPQUFPLEdBQXVCLElBQUksa0JBQWtCLEVBQUU7UUFDNUQsT0FBTyxDQUFDLElBQUksR0FBRyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBRWpGLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxRQUFR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YXIvY29yZSc7XG5pbXBvcnQge1NoYXJlZFN0YXRlQ29udGVudCwgU2hhcmVkU3RhdGVFbnRyeSwgU2hhcmVkU3RhdGVMaXN0fSBmcm9tICcuLi9tb2RlbHMvdGMtc2hhcmVkLXN0YXRlJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtMb2NhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7VGNDb3JlQ29tbW9uRnVuY3Rpb25zfSBmcm9tICcuLi9jb21tb24vdGMtY29yZS1jb21tb24tZnVuY3Rpb25zJztcbmltcG9ydCB7R2VuZXJhbENvbmZpZ30gZnJvbSAnLi4vbW9kZWxzL3RjLWdlbmVyYWwtY29uZmlnJztcbmltcG9ydCB7VGNTaGFyZWRTdGF0ZVNlcnZpY2V9IGZyb20gJy4vdGMtc2hhcmVkLXN0YXRlLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUY0dlbmVyYWxDb25maWdTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxvY2F0aW9uOiBMb2NhdGlvbiwgcHJpdmF0ZSBzaGFyZWRTdGF0ZVNlcnZpY2U6IFRjU2hhcmVkU3RhdGVTZXJ2aWNlKSB7XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlR2VuZXJhbENvbmZpZyhzYW5kYm94SWQ6IG51bWJlciwgdWlBcHBJZDogc3RyaW5nLCBnZW5lcmFsQ29uZmlnOiBHZW5lcmFsQ29uZmlnKSB7XG4gICAgY29uc3Qgc3NOYW1lID0gdWlBcHBJZCArICcuZ2VuZXJhbC5jb25maWcudGliY29sYWJzLmNsaWVudC5jb250ZXh0LlBVQkxJQyc7XG4gICAgY29uc3QgY29udGVudDogU2hhcmVkU3RhdGVDb250ZW50ID0gbmV3IFNoYXJlZFN0YXRlQ29udGVudCgpO1xuICAgIGNvbnRlbnQuanNvbiA9IFRjQ29yZUNvbW1vbkZ1bmN0aW9ucy5lc2NhcGVTdHJpbmcoSlNPTi5zdHJpbmdpZnkoZ2VuZXJhbENvbmZpZykpO1xuXG4gICAgcmV0dXJuIHRoaXMuc2hhcmVkU3RhdGVTZXJ2aWNlLmNyZWF0ZVNoYXJlZFN0YXRlKHNzTmFtZSwgJ1BVQkxJQycsICcnLCBzYW5kYm94SWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRlbnQpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKHZhbHVlID0+IHZhbHVlKVxuICAgICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRHZW5lcmFsQ29uZmlnKHVpQXBwSWQ6IHN0cmluZywgdXNlQ2FjaGU6IGJvb2xlYW4sIGZsdXNoQ2FjaGU6IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEdlbmVyYWxDb25maWc+IHtcbiAgICAvLyBpZiB1c2VDYWNoZSBpcyBmYWxzZSB0aGlzIHdpbGwgdHJpZ2dlciB0aGUgc2VydmljZSB0byB1cGRhdGUgdGhlIGNhY2hlZCB2ZXJzaW9uIHdpdGggbGF0ZXN0XG4gICAgY29uc3Qgc3NOYW1lID0gdWlBcHBJZCArICcuZ2VuZXJhbC5jb25maWcudGliY29sYWJzLmNsaWVudC5jb250ZXh0LlBVQkxJQyc7XG5cbiAgICByZXR1cm4gdGhpcy5zaGFyZWRTdGF0ZVNlcnZpY2UuZ2V0U2hhcmVkU3RhdGUoc3NOYW1lLCAnUFVCTElDJywgdXNlQ2FjaGUsIGZsdXNoQ2FjaGUpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKHZhbHVlID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zaGFyZWRTdGF0ZUVudHJpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBjb25zdCBzc3Jlc3VsdCA9IG5ldyBHZW5lcmFsQ29uZmlnKCkuZGVzZXJpYWxpemUoSlNPTi5wYXJzZSh2YWx1ZS5zaGFyZWRTdGF0ZUVudHJpZXNbMF0uY29udGVudC5qc29uKSk7XG4gICAgICAgICAgICAgIHNzcmVzdWx0LmlkID0gdmFsdWUuc2hhcmVkU3RhdGVFbnRyaWVzWzBdLmlkO1xuICAgICAgICAgICAgICByZXR1cm4gc3NyZXN1bHQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVHZW5lcmFsQ29uZmlnKHNhbmRib3hJZDogbnVtYmVyLCB1aUFwcElkOiBzdHJpbmcsIGdlbmVyYWxDb25maWc6IEdlbmVyYWxDb25maWcsIGlkOiBzdHJpbmcpIHtcbiAgICBjb25zdCBzc05hbWUgPSB1aUFwcElkICsgJy5nZW5lcmFsLmNvbmZpZy50aWJjb2xhYnMuY2xpZW50LmNvbnRleHQuUFVCTElDJztcbiAgICBjb25zdCBjb250ZW50OiBTaGFyZWRTdGF0ZUNvbnRlbnQgPSBuZXcgU2hhcmVkU3RhdGVDb250ZW50KCk7XG4gICAgY29udGVudC5qc29uID0gVGNDb3JlQ29tbW9uRnVuY3Rpb25zLmVzY2FwZVN0cmluZyhKU09OLnN0cmluZ2lmeShnZW5lcmFsQ29uZmlnKSk7XG4gICAgY29uc3QgZW50cnk6IFNoYXJlZFN0YXRlRW50cnkgPSBuZXcgU2hhcmVkU3RhdGVFbnRyeSgpO1xuICAgIGVudHJ5LmNvbnRlbnQgPSBjb250ZW50O1xuICAgIGVudHJ5LnNhbmRib3hJZCA9IHNhbmRib3hJZDtcbiAgICBlbnRyeS5uYW1lID0gc3NOYW1lO1xuICAgIGVudHJ5LnR5cGUgPSAnUFVCTElDJztcbiAgICBlbnRyeS5pZCA9IGlkO1xuICAgIGNvbnN0IHNzTGlzdDogU2hhcmVkU3RhdGVMaXN0ID0gbmV3IFNoYXJlZFN0YXRlTGlzdCgpO1xuICAgIHNzTGlzdC5zaGFyZWRTdGF0ZUVudHJpZXMgPSBbXTtcbiAgICBzc0xpc3Quc2hhcmVkU3RhdGVFbnRyaWVzLnB1c2goZW50cnkpO1xuXG4gICAgcmV0dXJuIHRoaXMuc2hhcmVkU3RhdGVTZXJ2aWNlLnVwZGF0ZVNoYXJlZFN0YXRlKHNzTGlzdC5zaGFyZWRTdGF0ZUVudHJpZXMpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKHZhbHVlID0+IHtcbiAgICAgICAgICAvLyBmbHVzaCB0aGUgY2FjaGVcbiAgICAgICAgICB0aGlzLmdldEdlbmVyYWxDb25maWcodWlBcHBJZCwgdHJ1ZSwgdHJ1ZSkuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgcmV0dXJuIG5ldyBHZW5lcmFsQ29uZmlnKCkuZGVzZXJpYWxpemUoKEpTT04ucGFyc2UodmFsdWUuc2hhcmVkU3RhdGVFbnRyaWVzWzBdLmNvbnRlbnQuanNvbikpKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cbn1cbiJdfQ==