/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { TcSharedStateService } from './tc-shared-state.service';
import { GeneralLandingPageConfig } from '../models/tc-general-landing-page-config';
import { SharedStateContent, SharedStateEntry, SharedStateList } from '../models/tc-shared-state';
import { TcCoreCommonFunctions } from '../common/tc-core-common-functions';
import * as i0 from "@angular/core";
import * as i1 from "./tc-shared-state.service";
export class TcGeneralLandingPageConfigService {
    /**
     * @param {?} sharedStateService
     */
    constructor(sharedStateService) {
        this.sharedStateService = sharedStateService;
    }
    /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} generalLandingPageConfig
     * @return {?}
     */
    createGeneralLandingPageConfig(sandboxId, uiAppId, generalLandingPageConfig) {
        /** @type {?} */
        const ssName = uiAppId + '.general.landing.page.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        const content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(generalLandingPageConfig));
        return this.sharedStateService.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => value)));
    }
    /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    getGeneralLandingPageConfig(uiAppId, useCache, flushCache) {
        // if useCache is false this will trigger the service to update the cached version with latest
        /** @type {?} */
        const ssName = uiAppId + '.general.landing.page.config.tibcolabs.client.context.PUBLIC';
        return this.sharedStateService.getSharedState(ssName, 'PUBLIC', useCache, flushCache)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value.sharedStateEntries.length > 0) {
                /** @type {?} */
                const ssresult = new GeneralLandingPageConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));
                ssresult.id = value.sharedStateEntries[0].id;
                return ssresult;
            }
            else {
                return undefined;
            }
        })));
    }
    /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} generalLandingPageConfig
     * @param {?} id
     * @return {?}
     */
    updateGeneralLandingPageConfig(sandboxId, uiAppId, generalLandingPageConfig, id) {
        /** @type {?} */
        const ssName = uiAppId + '.general.landing.page.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        const content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(generalLandingPageConfig));
        /** @type {?} */
        const entry = new SharedStateEntry();
        entry.content = content;
        entry.sandboxId = sandboxId;
        entry.name = ssName;
        entry.type = 'PUBLIC';
        entry.id = id;
        /** @type {?} */
        const ssList = new SharedStateList();
        ssList.sharedStateEntries = [];
        ssList.sharedStateEntries.push(entry);
        return this.sharedStateService.updateSharedState(ssList.sharedStateEntries)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            // flush the cache
            this.getGeneralLandingPageConfig(uiAppId, true, true).subscribe();
            return new GeneralLandingPageConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));
        })));
    }
}
TcGeneralLandingPageConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TcGeneralLandingPageConfigService.ctorParameters = () => [
    { type: TcSharedStateService }
];
/** @nocollapse */ TcGeneralLandingPageConfigService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcGeneralLandingPageConfigService_Factory() { return new TcGeneralLandingPageConfigService(i0.ɵɵinject(i1.TcSharedStateService)); }, token: TcGeneralLandingPageConfigService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcGeneralLandingPageConfigService.prototype.sharedStateService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtZ2VuZXJhbC1sYW5kaW5nLXBhZ2UtY29uZmlnLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtY29yZS1saWIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvdGMtZ2VuZXJhbC1sYW5kaW5nLXBhZ2UtY29uZmlnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2pFLE9BQU8sRUFBRSx3QkFBd0IsRUFBcUIsTUFBTSwwQ0FBMEMsQ0FBQztBQUN2RyxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEcsT0FBTyxFQUFFLHFCQUFxQixFQUFFLE1BQU0sb0NBQW9DLENBQUM7OztBQU0zRSxNQUFNLE9BQU8saUNBQWlDOzs7O0lBRTFDLFlBQ1ksa0JBQXdDO1FBQXhDLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBc0I7SUFFcEQsQ0FBQzs7Ozs7OztJQUVNLDhCQUE4QixDQUFDLFNBQWlCLEVBQUUsT0FBZSxFQUFFLHdCQUFrRDs7Y0FDbEgsTUFBTSxHQUFHLE9BQU8sR0FBRyw4REFBOEQ7O2NBQ2pGLE9BQU8sR0FBdUIsSUFBSSxrQkFBa0IsRUFBRTtRQUM1RCxPQUFPLENBQUMsSUFBSSxHQUFHLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLENBQUMsQ0FBQztRQUU1RixPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsT0FBTyxDQUFDO2FBQ3RILElBQUksQ0FDRCxHQUFHOzs7O1FBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUMsQ0FDdEIsQ0FBQztJQUNWLENBQUM7Ozs7Ozs7SUFFTSwyQkFBMkIsQ0FBQyxPQUFlLEVBQUUsUUFBaUIsRUFBRSxVQUFtQjs7O2NBRWhGLE1BQU0sR0FBRyxPQUFPLEdBQUcsOERBQThEO1FBRXZGLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGNBQWMsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxVQUFVLENBQUM7YUFDaEYsSUFBSSxDQUNELEdBQUc7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTtZQUNSLElBQUksS0FBSyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sR0FBRyxDQUFDLEVBQUU7O3NCQUMvQixRQUFRLEdBQUcsSUFBSSx3QkFBd0IsRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ2pILFFBQVEsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFDN0MsT0FBTyxRQUFRLENBQUM7YUFDbkI7aUJBQU07Z0JBQ0gsT0FBTyxTQUFTLENBQUM7YUFDcEI7UUFDTCxDQUFDLEVBQ0EsQ0FDSixDQUFDO0lBQ1YsQ0FBQzs7Ozs7Ozs7SUFFTSw4QkFBOEIsQ0FBQyxTQUFpQixFQUFFLE9BQWUsRUFBRSx3QkFBa0QsRUFBRSxFQUFVOztjQUM5SCxNQUFNLEdBQUcsT0FBTyxHQUFHLDhEQUE4RDs7Y0FDakYsT0FBTyxHQUF1QixJQUFJLGtCQUFrQixFQUFFO1FBQzVELE9BQU8sQ0FBQyxJQUFJLEdBQUcscUJBQXFCLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsQ0FBQyxDQUFDOztjQUN0RixLQUFLLEdBQXFCLElBQUksZ0JBQWdCLEVBQUU7UUFDdEQsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDeEIsS0FBSyxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7UUFDNUIsS0FBSyxDQUFDLElBQUksR0FBRyxNQUFNLENBQUM7UUFDcEIsS0FBSyxDQUFDLElBQUksR0FBRyxRQUFRLENBQUM7UUFDdEIsS0FBSyxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7O2NBQ1IsTUFBTSxHQUFvQixJQUFJLGVBQWUsRUFBRTtRQUNyRCxNQUFNLENBQUMsa0JBQWtCLEdBQUcsRUFBRSxDQUFDO1FBQy9CLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFFdEMsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDO2FBQ3RFLElBQUksQ0FDRCxHQUFHOzs7O1FBQUMsS0FBSyxDQUFDLEVBQUU7WUFDUixrQkFBa0I7WUFDbEIsSUFBSSxDQUFDLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsU0FBUyxFQUFFLENBQUM7WUFDbEUsT0FBTyxJQUFJLHdCQUF3QixFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUM5RyxDQUFDLEVBQUMsQ0FDTCxDQUFDO0lBQ1YsQ0FBQzs7O1lBL0RKLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQVBRLG9CQUFvQjs7Ozs7Ozs7SUFZckIsK0RBQWdEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IFRjU2hhcmVkU3RhdGVTZXJ2aWNlIH0gZnJvbSAnLi90Yy1zaGFyZWQtc3RhdGUuc2VydmljZSc7XG5pbXBvcnQgeyBHZW5lcmFsTGFuZGluZ1BhZ2VDb25maWcsIExhbmRpbmdQYWdlQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL3RjLWdlbmVyYWwtbGFuZGluZy1wYWdlLWNvbmZpZyc7XG5pbXBvcnQgeyBTaGFyZWRTdGF0ZUNvbnRlbnQsIFNoYXJlZFN0YXRlRW50cnksIFNoYXJlZFN0YXRlTGlzdCB9IGZyb20gJy4uL21vZGVscy90Yy1zaGFyZWQtc3RhdGUnO1xuaW1wb3J0IHsgVGNDb3JlQ29tbW9uRnVuY3Rpb25zIH0gZnJvbSAnLi4vY29tbW9uL3RjLWNvcmUtY29tbW9uLWZ1bmN0aW9ucyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuXG5leHBvcnQgY2xhc3MgVGNHZW5lcmFsTGFuZGluZ1BhZ2VDb25maWdTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIHNoYXJlZFN0YXRlU2VydmljZTogVGNTaGFyZWRTdGF0ZVNlcnZpY2VcbiAgICApIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgY3JlYXRlR2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnKHNhbmRib3hJZDogbnVtYmVyLCB1aUFwcElkOiBzdHJpbmcsIGdlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZzogR2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnKSB7XG4gICAgICAgIGNvbnN0IHNzTmFtZSA9IHVpQXBwSWQgKyAnLmdlbmVyYWwubGFuZGluZy5wYWdlLmNvbmZpZy50aWJjb2xhYnMuY2xpZW50LmNvbnRleHQuUFVCTElDJztcbiAgICAgICAgY29uc3QgY29udGVudDogU2hhcmVkU3RhdGVDb250ZW50ID0gbmV3IFNoYXJlZFN0YXRlQ29udGVudCgpO1xuICAgICAgICBjb250ZW50Lmpzb24gPSBUY0NvcmVDb21tb25GdW5jdGlvbnMuZXNjYXBlU3RyaW5nKEpTT04uc3RyaW5naWZ5KGdlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZykpO1xuXG4gICAgICAgIHJldHVybiB0aGlzLnNoYXJlZFN0YXRlU2VydmljZS5jcmVhdGVTaGFyZWRTdGF0ZShzc05hbWUsICdQVUJMSUMnLCAnJywgc2FuZGJveElkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZW50KVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKHZhbHVlID0+IHZhbHVlKVxuICAgICAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0R2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnKHVpQXBwSWQ6IHN0cmluZywgdXNlQ2FjaGU6IGJvb2xlYW4sIGZsdXNoQ2FjaGU6IGJvb2xlYW4pOiBPYnNlcnZhYmxlPEdlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZz4ge1xuICAgICAgICAvLyBpZiB1c2VDYWNoZSBpcyBmYWxzZSB0aGlzIHdpbGwgdHJpZ2dlciB0aGUgc2VydmljZSB0byB1cGRhdGUgdGhlIGNhY2hlZCB2ZXJzaW9uIHdpdGggbGF0ZXN0XG4gICAgICAgIGNvbnN0IHNzTmFtZSA9IHVpQXBwSWQgKyAnLmdlbmVyYWwubGFuZGluZy5wYWdlLmNvbmZpZy50aWJjb2xhYnMuY2xpZW50LmNvbnRleHQuUFVCTElDJztcblxuICAgICAgICByZXR1cm4gdGhpcy5zaGFyZWRTdGF0ZVNlcnZpY2UuZ2V0U2hhcmVkU3RhdGUoc3NOYW1lLCAnUFVCTElDJywgdXNlQ2FjaGUsIGZsdXNoQ2FjaGUpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUuc2hhcmVkU3RhdGVFbnRyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNzcmVzdWx0ID0gbmV3IEdlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZygpLmRlc2VyaWFsaXplKEpTT04ucGFyc2UodmFsdWUuc2hhcmVkU3RhdGVFbnRyaWVzWzBdLmNvbnRlbnQuanNvbikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc3NyZXN1bHQuaWQgPSB2YWx1ZS5zaGFyZWRTdGF0ZUVudHJpZXNbMF0uaWQ7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3NyZXN1bHQ7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICk7XG4gICAgfVxuXG4gICAgcHVibGljIHVwZGF0ZUdlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZyhzYW5kYm94SWQ6IG51bWJlciwgdWlBcHBJZDogc3RyaW5nLCBnZW5lcmFsTGFuZGluZ1BhZ2VDb25maWc6IEdlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZywgaWQ6IHN0cmluZykge1xuICAgICAgICBjb25zdCBzc05hbWUgPSB1aUFwcElkICsgJy5nZW5lcmFsLmxhbmRpbmcucGFnZS5jb25maWcudGliY29sYWJzLmNsaWVudC5jb250ZXh0LlBVQkxJQyc7XG4gICAgICAgIGNvbnN0IGNvbnRlbnQ6IFNoYXJlZFN0YXRlQ29udGVudCA9IG5ldyBTaGFyZWRTdGF0ZUNvbnRlbnQoKTtcbiAgICAgICAgY29udGVudC5qc29uID0gVGNDb3JlQ29tbW9uRnVuY3Rpb25zLmVzY2FwZVN0cmluZyhKU09OLnN0cmluZ2lmeShnZW5lcmFsTGFuZGluZ1BhZ2VDb25maWcpKTtcbiAgICAgICAgY29uc3QgZW50cnk6IFNoYXJlZFN0YXRlRW50cnkgPSBuZXcgU2hhcmVkU3RhdGVFbnRyeSgpO1xuICAgICAgICBlbnRyeS5jb250ZW50ID0gY29udGVudDtcbiAgICAgICAgZW50cnkuc2FuZGJveElkID0gc2FuZGJveElkO1xuICAgICAgICBlbnRyeS5uYW1lID0gc3NOYW1lO1xuICAgICAgICBlbnRyeS50eXBlID0gJ1BVQkxJQyc7XG4gICAgICAgIGVudHJ5LmlkID0gaWQ7XG4gICAgICAgIGNvbnN0IHNzTGlzdDogU2hhcmVkU3RhdGVMaXN0ID0gbmV3IFNoYXJlZFN0YXRlTGlzdCgpO1xuICAgICAgICBzc0xpc3Quc2hhcmVkU3RhdGVFbnRyaWVzID0gW107XG4gICAgICAgIHNzTGlzdC5zaGFyZWRTdGF0ZUVudHJpZXMucHVzaChlbnRyeSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuc2hhcmVkU3RhdGVTZXJ2aWNlLnVwZGF0ZVNoYXJlZFN0YXRlKHNzTGlzdC5zaGFyZWRTdGF0ZUVudHJpZXMpXG4gICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICBtYXAodmFsdWUgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBmbHVzaCB0aGUgY2FjaGVcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5nZXRHZW5lcmFsTGFuZGluZ1BhZ2VDb25maWcodWlBcHBJZCwgdHJ1ZSwgdHJ1ZSkuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgR2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnKCkuZGVzZXJpYWxpemUoKEpTT04ucGFyc2UodmFsdWUuc2hhcmVkU3RhdGVFbnRyaWVzWzBdLmNvbnRlbnQuanNvbikpKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcbiAgICB9XG59XG5cbiJdfQ==