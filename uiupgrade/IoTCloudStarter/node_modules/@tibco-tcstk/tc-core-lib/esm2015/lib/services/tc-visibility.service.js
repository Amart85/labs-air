/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { Observable, combineLatest, concat, defer, of, fromEvent } from 'rxjs';
import { map, flatMap, distinctUntilChanged } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
export class TcVisibilityService {
    /**
     * @param {?} document
     */
    constructor(document) {
        this.pageVisible$ = concat(defer((/**
         * @return {?}
         */
        () => of(!document.hidden))), fromEvent(document, 'visibilitychange')
            .pipe(map((/**
         * @param {?} e
         * @return {?}
         */
        e => !document.hidden))));
    }
    /**
     * @param {?} element
     * @return {?}
     */
    elementInSight(element) {
        /** @type {?} */
        const elementVisible$ = Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            /** @type {?} */
            const intersectionObserver = new IntersectionObserver((/**
             * @param {?} entries
             * @return {?}
             */
            entries => {
                observer.next(entries);
            }));
            intersectionObserver.observe(element.nativeElement);
            return (/**
             * @return {?}
             */
            () => { intersectionObserver.disconnect(); });
        }))
            .pipe(flatMap((/**
         * @param {?} entries
         * @return {?}
         */
        (entries) => entries)), map((/**
         * @param {?} entry
         * @return {?}
         */
        (entry) => {
            return entry.isIntersecting;
        })), distinctUntilChanged());
        /** @type {?} */
        const elementInSight$ = combineLatest(this.pageVisible$, elementVisible$, (/**
         * @param {?} pageVisible
         * @param {?} elementVisible
         * @return {?}
         */
        (pageVisible, elementVisible) => pageVisible && elementVisible)).pipe(distinctUntilChanged());
        return elementInSight$;
    }
}
TcVisibilityService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
TcVisibilityService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcVisibilityService.prototype.pageVisible$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtdmlzaWJpbGl0eS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3RjLXZpc2liaWxpdHkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFDLFVBQVUsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFZLE1BQU0sTUFBTSxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFNLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEUsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBSXpDLE1BQU0sT0FBTyxtQkFBbUI7Ozs7SUFJOUIsWUFBOEIsUUFBYTtRQUN6QyxJQUFJLENBQUMsWUFBWSxHQUFHLE1BQU0sQ0FDeEIsS0FBSzs7O1FBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxFQUFDLEVBQ2pDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsa0JBQWtCLENBQUM7YUFDcEMsSUFBSSxDQUNILEdBQUc7Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsUUFBUSxDQUFDLE1BQU0sRUFBQyxDQUMzQixDQUNKLENBQUM7SUFDSixDQUFDOzs7OztJQUVELGNBQWMsQ0FBQyxPQUFtQjs7Y0FFMUIsZUFBZSxHQUFHLFVBQVUsQ0FBQyxNQUFNOzs7O1FBQUMsUUFBUSxDQUFDLEVBQUU7O2tCQUM3QyxvQkFBb0IsR0FBRyxJQUFJLG9CQUFvQjs7OztZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUM5RCxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3pCLENBQUMsRUFBQztZQUVGLG9CQUFvQixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUM7WUFFcEQ7OztZQUFPLEdBQUcsRUFBRSxHQUFHLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDO1FBRXRELENBQUMsRUFBQzthQUNDLElBQUksQ0FDSCxPQUFPOzs7O1FBQUMsQ0FBQyxPQUFvQyxFQUFFLEVBQUUsQ0FBQyxPQUFPLEVBQUMsRUFDMUQsR0FBRzs7OztRQUFDLENBQUMsS0FBZ0MsRUFBRSxFQUFFO1lBQ3ZDLE9BQU8sS0FBSyxDQUFDLGNBQWMsQ0FBQztRQUM5QixDQUFDLEVBQUMsRUFDRixvQkFBb0IsRUFBRSxDQUN2Qjs7Y0FFRyxlQUFlLEdBQUcsYUFBYSxDQUNuQyxJQUFJLENBQUMsWUFBWSxFQUNqQixlQUFlOzs7OztRQUNmLENBQUMsV0FBVyxFQUFFLGNBQXVCLEVBQUUsRUFBRSxDQUFDLFdBQVcsSUFBSSxjQUFjLEVBQ3hFLENBQUMsSUFBSSxDQUNKLG9CQUFvQixFQUFFLENBQ3ZCO1FBRUQsT0FBTyxlQUFlLENBQUM7SUFDekIsQ0FBQzs7O1lBNUNGLFVBQVU7Ozs7NENBS0ksTUFBTSxTQUFDLFFBQVE7Ozs7Ozs7SUFGNUIsMkNBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIEVsZW1lbnRSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBjb21iaW5lTGF0ZXN0LCBjb25jYXQsIGRlZmVyLCBvZiwgZnJvbUV2ZW50LCBPYnNlcnZlciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBmbGF0TWFwLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUY1Zpc2liaWxpdHlTZXJ2aWNlIHtcblxuICBwcml2YXRlIHBhZ2VWaXNpYmxlJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KERPQ1VNRU5UKSBkb2N1bWVudDogYW55KSB7XG4gICAgdGhpcy5wYWdlVmlzaWJsZSQgPSBjb25jYXQoXG4gICAgICBkZWZlcigoKSA9PiBvZighZG9jdW1lbnQuaGlkZGVuKSksXG4gICAgICBmcm9tRXZlbnQoZG9jdW1lbnQsICd2aXNpYmlsaXR5Y2hhbmdlJylcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgbWFwKGUgPT4gIWRvY3VtZW50LmhpZGRlbilcbiAgICAgICAgKVxuICAgICk7XG4gIH1cblxuICBlbGVtZW50SW5TaWdodChlbGVtZW50OiBFbGVtZW50UmVmKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICBjb25zdCBlbGVtZW50VmlzaWJsZSQgPSBPYnNlcnZhYmxlLmNyZWF0ZShvYnNlcnZlciA9PiB7XG4gICAgICBjb25zdCBpbnRlcnNlY3Rpb25PYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dChlbnRyaWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICBpbnRlcnNlY3Rpb25PYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7IGludGVyc2VjdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTsgfTtcblxuICAgIH0pXG4gICAgICAucGlwZSAoXG4gICAgICAgIGZsYXRNYXAoKGVudHJpZXM6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnlbXSkgPT4gZW50cmllcyksXG4gICAgICAgIG1hcCgoZW50cnk6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnkpID0+IHtcbiAgICAgICAgICByZXR1cm4gZW50cnkuaXNJbnRlcnNlY3Rpbmc7XG4gICAgICAgIH0pLFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICAgICApO1xuXG4gICAgY29uc3QgZWxlbWVudEluU2lnaHQkID0gY29tYmluZUxhdGVzdChcbiAgICAgIHRoaXMucGFnZVZpc2libGUkLFxuICAgICAgZWxlbWVudFZpc2libGUkLFxuICAgICAgKHBhZ2VWaXNpYmxlLCBlbGVtZW50VmlzaWJsZTogYm9vbGVhbikgPT4gcGFnZVZpc2libGUgJiYgZWxlbWVudFZpc2libGVcbiAgICApLnBpcGUoXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICAgKTtcblxuICAgIHJldHVybiBlbGVtZW50SW5TaWdodCQ7XG4gIH1cblxufVxuIl19