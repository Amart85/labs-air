/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { Observable, combineLatest, concat, defer, of, fromEvent } from 'rxjs';
import { map, flatMap, distinctUntilChanged } from 'rxjs/operators';
import { DOCUMENT } from '@angular/common';
var TcVisibilityService = /** @class */ (function () {
    function TcVisibilityService(document) {
        this.pageVisible$ = concat(defer((/**
         * @return {?}
         */
        function () { return of(!document.hidden); })), fromEvent(document, 'visibilitychange')
            .pipe(map((/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return !document.hidden; }))));
    }
    /**
     * @param {?} element
     * @return {?}
     */
    TcVisibilityService.prototype.elementInSight = /**
     * @param {?} element
     * @return {?}
     */
    function (element) {
        /** @type {?} */
        var elementVisible$ = Observable.create((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            /** @type {?} */
            var intersectionObserver = new IntersectionObserver((/**
             * @param {?} entries
             * @return {?}
             */
            function (entries) {
                observer.next(entries);
            }));
            intersectionObserver.observe(element.nativeElement);
            return (/**
             * @return {?}
             */
            function () { intersectionObserver.disconnect(); });
        }))
            .pipe(flatMap((/**
         * @param {?} entries
         * @return {?}
         */
        function (entries) { return entries; })), map((/**
         * @param {?} entry
         * @return {?}
         */
        function (entry) {
            return entry.isIntersecting;
        })), distinctUntilChanged());
        /** @type {?} */
        var elementInSight$ = combineLatest(this.pageVisible$, elementVisible$, (/**
         * @param {?} pageVisible
         * @param {?} elementVisible
         * @return {?}
         */
        function (pageVisible, elementVisible) { return pageVisible && elementVisible; })).pipe(distinctUntilChanged());
        return elementInSight$;
    };
    TcVisibilityService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    TcVisibilityService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    return TcVisibilityService;
}());
export { TcVisibilityService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcVisibilityService.prototype.pageVisible$;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtdmlzaWJpbGl0eS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3RjLXZpc2liaWxpdHkuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQWEsTUFBTSxlQUFlLENBQUM7QUFDN0QsT0FBTyxFQUFDLFVBQVUsRUFBRSxhQUFhLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFZLE1BQU0sTUFBTSxDQUFDO0FBQ3hGLE9BQU8sRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLG9CQUFvQixFQUFNLE1BQU0sZ0JBQWdCLENBQUM7QUFDeEUsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBR3pDO0lBS0UsNkJBQThCLFFBQWE7UUFDekMsSUFBSSxDQUFDLFlBQVksR0FBRyxNQUFNLENBQ3hCLEtBQUs7OztRQUFDLGNBQU0sT0FBQSxFQUFFLENBQUMsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLEVBQXBCLENBQW9CLEVBQUMsRUFDakMsU0FBUyxDQUFDLFFBQVEsRUFBRSxrQkFBa0IsQ0FBQzthQUNwQyxJQUFJLENBQ0gsR0FBRzs7OztRQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFoQixDQUFnQixFQUFDLENBQzNCLENBQ0osQ0FBQztJQUNKLENBQUM7Ozs7O0lBRUQsNENBQWM7Ozs7SUFBZCxVQUFlLE9BQW1COztZQUUxQixlQUFlLEdBQUcsVUFBVSxDQUFDLE1BQU07Ozs7UUFBQyxVQUFBLFFBQVE7O2dCQUMxQyxvQkFBb0IsR0FBRyxJQUFJLG9CQUFvQjs7OztZQUFDLFVBQUEsT0FBTztnQkFDM0QsUUFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUN6QixDQUFDLEVBQUM7WUFFRixvQkFBb0IsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRXBEOzs7WUFBTyxjQUFRLG9CQUFvQixDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsQ0FBQyxFQUFDO1FBRXRELENBQUMsRUFBQzthQUNDLElBQUksQ0FDSCxPQUFPOzs7O1FBQUMsVUFBQyxPQUFvQyxJQUFLLE9BQUEsT0FBTyxFQUFQLENBQU8sRUFBQyxFQUMxRCxHQUFHOzs7O1FBQUMsVUFBQyxLQUFnQztZQUNuQyxPQUFPLEtBQUssQ0FBQyxjQUFjLENBQUM7UUFDOUIsQ0FBQyxFQUFDLEVBQ0Ysb0JBQW9CLEVBQUUsQ0FDdkI7O1lBRUcsZUFBZSxHQUFHLGFBQWEsQ0FDbkMsSUFBSSxDQUFDLFlBQVksRUFDakIsZUFBZTs7Ozs7UUFDZixVQUFDLFdBQVcsRUFBRSxjQUF1QixJQUFLLE9BQUEsV0FBVyxJQUFJLGNBQWMsRUFBN0IsQ0FBNkIsRUFDeEUsQ0FBQyxJQUFJLENBQ0osb0JBQW9CLEVBQUUsQ0FDdkI7UUFFRCxPQUFPLGVBQWUsQ0FBQztJQUN6QixDQUFDOztnQkE1Q0YsVUFBVTs7OztnREFLSSxNQUFNLFNBQUMsUUFBUTs7SUF5QzlCLDBCQUFDO0NBQUEsQUE5Q0QsSUE4Q0M7U0E3Q1ksbUJBQW1COzs7Ozs7SUFFOUIsMkNBQTBDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIEVsZW1lbnRSZWZ9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBjb21iaW5lTGF0ZXN0LCBjb25jYXQsIGRlZmVyLCBvZiwgZnJvbUV2ZW50LCBPYnNlcnZlciB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwLCBmbGF0TWFwLCBkaXN0aW5jdFVudGlsQ2hhbmdlZCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0RPQ1VNRU5UfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBUY1Zpc2liaWxpdHlTZXJ2aWNlIHtcblxuICBwcml2YXRlIHBhZ2VWaXNpYmxlJDogT2JzZXJ2YWJsZTxib29sZWFuPjtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KERPQ1VNRU5UKSBkb2N1bWVudDogYW55KSB7XG4gICAgdGhpcy5wYWdlVmlzaWJsZSQgPSBjb25jYXQoXG4gICAgICBkZWZlcigoKSA9PiBvZighZG9jdW1lbnQuaGlkZGVuKSksXG4gICAgICBmcm9tRXZlbnQoZG9jdW1lbnQsICd2aXNpYmlsaXR5Y2hhbmdlJylcbiAgICAgICAgLnBpcGUoXG4gICAgICAgICAgbWFwKGUgPT4gIWRvY3VtZW50LmhpZGRlbilcbiAgICAgICAgKVxuICAgICk7XG4gIH1cblxuICBlbGVtZW50SW5TaWdodChlbGVtZW50OiBFbGVtZW50UmVmKTogT2JzZXJ2YWJsZTxib29sZWFuPiB7XG5cbiAgICBjb25zdCBlbGVtZW50VmlzaWJsZSQgPSBPYnNlcnZhYmxlLmNyZWF0ZShvYnNlcnZlciA9PiB7XG4gICAgICBjb25zdCBpbnRlcnNlY3Rpb25PYnNlcnZlciA9IG5ldyBJbnRlcnNlY3Rpb25PYnNlcnZlcihlbnRyaWVzID0+IHtcbiAgICAgICAgb2JzZXJ2ZXIubmV4dChlbnRyaWVzKTtcbiAgICAgIH0pO1xuXG4gICAgICBpbnRlcnNlY3Rpb25PYnNlcnZlci5vYnNlcnZlKGVsZW1lbnQubmF0aXZlRWxlbWVudCk7XG5cbiAgICAgIHJldHVybiAoKSA9PiB7IGludGVyc2VjdGlvbk9ic2VydmVyLmRpc2Nvbm5lY3QoKTsgfTtcblxuICAgIH0pXG4gICAgICAucGlwZSAoXG4gICAgICAgIGZsYXRNYXAoKGVudHJpZXM6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnlbXSkgPT4gZW50cmllcyksXG4gICAgICAgIG1hcCgoZW50cnk6IEludGVyc2VjdGlvbk9ic2VydmVyRW50cnkpID0+IHtcbiAgICAgICAgICByZXR1cm4gZW50cnkuaXNJbnRlcnNlY3Rpbmc7XG4gICAgICAgIH0pLFxuICAgICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICAgICApO1xuXG4gICAgY29uc3QgZWxlbWVudEluU2lnaHQkID0gY29tYmluZUxhdGVzdChcbiAgICAgIHRoaXMucGFnZVZpc2libGUkLFxuICAgICAgZWxlbWVudFZpc2libGUkLFxuICAgICAgKHBhZ2VWaXNpYmxlLCBlbGVtZW50VmlzaWJsZTogYm9vbGVhbikgPT4gcGFnZVZpc2libGUgJiYgZWxlbWVudFZpc2libGVcbiAgICApLnBpcGUoXG4gICAgICBkaXN0aW5jdFVudGlsQ2hhbmdlZCgpXG4gICAgKTtcblxuICAgIHJldHVybiBlbGVtZW50SW5TaWdodCQ7XG4gIH1cblxufVxuIl19