/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { TcSharedStateService } from './tc-shared-state.service';
import { GeneralLandingPageConfig } from '../models/tc-general-landing-page-config';
import { SharedStateContent, SharedStateEntry, SharedStateList } from '../models/tc-shared-state';
import { TcCoreCommonFunctions } from '../common/tc-core-common-functions';
import * as i0 from "@angular/core";
import * as i1 from "./tc-shared-state.service";
var TcGeneralLandingPageConfigService = /** @class */ (function () {
    function TcGeneralLandingPageConfigService(sharedStateService) {
        this.sharedStateService = sharedStateService;
    }
    /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} generalLandingPageConfig
     * @return {?}
     */
    TcGeneralLandingPageConfigService.prototype.createGeneralLandingPageConfig = /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} generalLandingPageConfig
     * @return {?}
     */
    function (sandboxId, uiAppId, generalLandingPageConfig) {
        /** @type {?} */
        var ssName = uiAppId + '.general.landing.page.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        var content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(generalLandingPageConfig));
        return this.sharedStateService.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value; })));
    };
    /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    TcGeneralLandingPageConfigService.prototype.getGeneralLandingPageConfig = /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    function (uiAppId, useCache, flushCache) {
        // if useCache is false this will trigger the service to update the cached version with latest
        /** @type {?} */
        var ssName = uiAppId + '.general.landing.page.config.tibcolabs.client.context.PUBLIC';
        return this.sharedStateService.getSharedState(ssName, 'PUBLIC', useCache, flushCache)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value.sharedStateEntries.length > 0) {
                /** @type {?} */
                var ssresult = new GeneralLandingPageConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));
                ssresult.id = value.sharedStateEntries[0].id;
                return ssresult;
            }
            else {
                return undefined;
            }
        })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} generalLandingPageConfig
     * @param {?} id
     * @return {?}
     */
    TcGeneralLandingPageConfigService.prototype.updateGeneralLandingPageConfig = /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} generalLandingPageConfig
     * @param {?} id
     * @return {?}
     */
    function (sandboxId, uiAppId, generalLandingPageConfig, id) {
        var _this = this;
        /** @type {?} */
        var ssName = uiAppId + '.general.landing.page.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        var content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(generalLandingPageConfig));
        /** @type {?} */
        var entry = new SharedStateEntry();
        entry.content = content;
        entry.sandboxId = sandboxId;
        entry.name = ssName;
        entry.type = 'PUBLIC';
        entry.id = id;
        /** @type {?} */
        var ssList = new SharedStateList();
        ssList.sharedStateEntries = [];
        ssList.sharedStateEntries.push(entry);
        return this.sharedStateService.updateSharedState(ssList.sharedStateEntries)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // flush the cache
            _this.getGeneralLandingPageConfig(uiAppId, true, true).subscribe();
            return new GeneralLandingPageConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));
        })));
    };
    TcGeneralLandingPageConfigService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TcGeneralLandingPageConfigService.ctorParameters = function () { return [
        { type: TcSharedStateService }
    ]; };
    /** @nocollapse */ TcGeneralLandingPageConfigService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcGeneralLandingPageConfigService_Factory() { return new TcGeneralLandingPageConfigService(i0.ɵɵinject(i1.TcSharedStateService)); }, token: TcGeneralLandingPageConfigService, providedIn: "root" });
    return TcGeneralLandingPageConfigService;
}());
export { TcGeneralLandingPageConfigService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcGeneralLandingPageConfigService.prototype.sharedStateService;
}
//# sourceMappingURL=data:application/json;base64,