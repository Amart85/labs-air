/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
/**
 * @ngdoc component
 * @name tcLoggingService
 *
 * @description
 *
 * The logging service provides logging capabilities.
 *
 * A log level can be set:
 *
 *  All = 0,
 *  Debug = 1,
 *  Info = 2,
 *  Warn = 3,
 *  Error = 4,
 *  Fatal = 5,
 *  Off = 6
 *
 *
 */
import { Injectable } from '@angular/core';
var LogService = /** @class */ (function () {
    function LogService() {
        this.level = LogLevel.All;
        this.logWithDate = true;
    }
    /**
     * @private
     * @param {?} msg
     * @param {?} level
     * @param {?} params
     * @return {?}
     */
    LogService.prototype.writeToLog = /**
     * @private
     * @param {?} msg
     * @param {?} level
     * @param {?} params
     * @return {?}
     */
    function (msg, level, params) {
        if (this.shouldLog(level)) {
            /** @type {?} */
            var value = '';
            // Build log string
            if (this.logWithDate) {
                value = new Date() + ' - ';
            }
            value += '[My Cloud Starter] [' + LogLevel[this.level] + '](' + this.getLevelString(level) + ')';
            value += ' - Message: ' + msg;
            if (params.length) {
                value += ' - Extra Info: '
                    + this.formatParams(params);
            }
            // Log the value
            console.log(value);
        }
    };
    /**
     * @private
     * @param {?} level
     * @return {?}
     */
    LogService.prototype.shouldLog = /**
     * @private
     * @param {?} level
     * @return {?}
     */
    function (level) {
        /** @type {?} */
        var ret = false;
        if ((level >= this.level &&
            level !== LogLevel.Off) ||
            this.level === LogLevel.All) {
            ret = true;
        }
        return ret;
    };
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    LogService.prototype.formatParams = /**
     * @private
     * @param {?} params
     * @return {?}
     */
    function (params) {
        var e_1, _a;
        /** @type {?} */
        var ret = params.join(',');
        // Is there at least one object in the array?
        if (params.some((/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return typeof p === 'object'; }))) {
            ret = '';
            try {
                // Build comma-delimited string
                for (var params_1 = tslib_1.__values(params), params_1_1 = params_1.next(); !params_1_1.done; params_1_1 = params_1.next()) {
                    var item = params_1_1.value;
                    ret += JSON.stringify(item) + ',';
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (params_1_1 && !params_1_1.done && (_a = params_1.return)) _a.call(params_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return ret;
    };
    /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    LogService.prototype.debug = /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    function (msg) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        this.writeToLog(msg, LogLevel.Debug, optionalParams);
    };
    /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    LogService.prototype.info = /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    function (msg) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        this.writeToLog(msg, LogLevel.Info, optionalParams);
    };
    /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    LogService.prototype.warn = /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    function (msg) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        this.writeToLog(msg, LogLevel.Warn, optionalParams);
    };
    /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    LogService.prototype.error = /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    function (msg) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        this.writeToLog(msg, LogLevel.Error, optionalParams);
    };
    /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    LogService.prototype.fatal = /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    function (msg) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        this.writeToLog(msg, LogLevel.Fatal, optionalParams);
    };
    /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    LogService.prototype.log = /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    function (msg) {
        var optionalParams = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            optionalParams[_i - 1] = arguments[_i];
        }
        this.writeToLog(msg, LogLevel.All, optionalParams);
    };
    /**
     * @private
     * @param {?} level
     * @return {?}
     */
    LogService.prototype.getLevelString = /**
     * @private
     * @param {?} level
     * @return {?}
     */
    function (level) {
        /** @type {?} */
        var re = '';
        switch (level) {
            case LogLevel.All: {
                re = 'All';
                break;
            }
            case LogLevel.Debug: {
                re = 'Debug';
                break;
            }
            case LogLevel.Error: {
                re = 'Error';
                break;
            }
            case LogLevel.Fatal: {
                re = 'Fatal';
                break;
            }
            case LogLevel.Info: {
                re = 'Info';
                break;
            }
            case LogLevel.Off: {
                re = 'Off';
                break;
            }
            case LogLevel.Warn: {
                re = 'Warn';
                break;
            }
            default: {
                // statements;
                break;
            }
        }
        return re;
    };
    LogService.decorators = [
        { type: Injectable }
    ];
    return LogService;
}());
export { LogService };
if (false) {
    /** @type {?} */
    LogService.prototype.level;
    /** @type {?} */
    LogService.prototype.logWithDate;
}
/** @enum {number} */
var LogLevel = {
    All: 0,
    Debug: 1,
    Info: 2,
    Warn: 3,
    Error: 4,
    Fatal: 5,
    Off: 6,
};
export { LogLevel };
LogLevel[LogLevel.All] = 'All';
LogLevel[LogLevel.Debug] = 'Debug';
LogLevel[LogLevel.Info] = 'Info';
LogLevel[LogLevel.Warn] = 'Warn';
LogLevel[LogLevel.Error] = 'Error';
LogLevel[LogLevel.Fatal] = 'Fatal';
LogLevel[LogLevel.Off] = 'Off';
//# sourceMappingURL=data:application/json;base64,