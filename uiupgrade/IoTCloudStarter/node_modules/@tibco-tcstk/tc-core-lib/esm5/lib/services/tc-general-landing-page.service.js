/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { TcGeneralLandingPageConfigService } from './tc-general-landing-page-config.service';
import * as i0 from "@angular/core";
import * as i1 from "./tc-general-landing-page-config.service";
var TcGeneralLandingPageService = /** @class */ (function () {
    function TcGeneralLandingPageService(generalLandingPageConfigService) {
        var _this = this;
        this.generalLandingPageConfigService = generalLandingPageConfigService;
        this.getLandingPage = (/**
         * @param {?} key
         * @param {?} uiAppId
         * @return {?}
         */
        function (key, uiAppId) {
            /** @type {?} */
            var landingPage = _this.generalLandingPageConfigService.getGeneralLandingPageConfig(uiAppId, true, true).pipe(map((/**
             * @param {?} landingPages
             * @return {?}
             */
            function (landingPages) {
                /** @type {?} */
                var page = landingPages.landingPage.filter((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) { return element.key === key; }))[0];
                return page;
            })));
            return landingPage;
        });
        this.getLandingPageForRole = (/**
         * @param {?} roleId
         * @param {?} uiAppId
         * @return {?}
         */
        function (roleId, uiAppId) {
            return _this.generalLandingPageConfigService.getGeneralLandingPageConfig(uiAppId, true, true).pipe(map((/**
             * @param {?} landingPages
             * @return {?}
             */
            function (landingPages) {
                /** @type {?} */
                var candidatePages = landingPages.landingPage.filter((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) { return element.roles.indexOf(roleId) != -1; }));
                switch (candidatePages.length) {
                    case 0:
                        return undefined;
                    case 1:
                        return candidatePages[0];
                    default:
                        return candidatePages[0];
                }
            })));
        });
    }
    TcGeneralLandingPageService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TcGeneralLandingPageService.ctorParameters = function () { return [
        { type: TcGeneralLandingPageConfigService }
    ]; };
    /** @nocollapse */ TcGeneralLandingPageService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcGeneralLandingPageService_Factory() { return new TcGeneralLandingPageService(i0.ɵɵinject(i1.TcGeneralLandingPageConfigService)); }, token: TcGeneralLandingPageService, providedIn: "root" });
    return TcGeneralLandingPageService;
}());
export { TcGeneralLandingPageService };
if (false) {
    /** @type {?} */
    TcGeneralLandingPageService.prototype.getLandingPage;
    /** @type {?} */
    TcGeneralLandingPageService.prototype.getLandingPageForRole;
    /**
     * @type {?}
     * @private
     */
    TcGeneralLandingPageService.prototype.generalLandingPageConfigService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtZ2VuZXJhbC1sYW5kaW5nLXBhZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90Yy1nZW5lcmFsLWxhbmRpbmctcGFnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQzs7O0FBRTdGO0lBTUkscUNBQ1ksK0JBQWtFO1FBRDlFLGlCQUdDO1FBRlcsb0NBQStCLEdBQS9CLCtCQUErQixDQUFtQztRQUl2RSxtQkFBYzs7Ozs7UUFBRyxVQUFDLEdBQVcsRUFBRSxPQUFlOztnQkFDM0MsV0FBVyxHQUFHLEtBQUksQ0FBQywrQkFBK0IsQ0FBQywyQkFBMkIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLElBQUksQ0FDMUcsR0FBRzs7OztZQUFDLFVBQUEsWUFBWTs7b0JBQ04sSUFBSSxHQUFHLFlBQVksQ0FBQyxXQUFXLENBQUMsTUFBTTs7OztnQkFBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLE9BQU8sQ0FBQyxHQUFHLEtBQUssR0FBRyxFQUFuQixDQUFtQixFQUFFLENBQUMsQ0FBQyxDQUFDO2dCQUNoRixPQUFPLElBQUksQ0FBQztZQUNoQixDQUFDLEVBQUMsQ0FDTDtZQUNELE9BQU8sV0FBVyxDQUFDO1FBQ3ZCLENBQUMsRUFBQTtRQUVNLDBCQUFxQjs7Ozs7UUFBRyxVQUFDLE1BQWMsRUFBRSxPQUFlO1lBQzNELE9BQU8sS0FBSSxDQUFDLCtCQUErQixDQUFDLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUM3RixHQUFHOzs7O1lBQUMsVUFBQSxZQUFZOztvQkFDTixjQUFjLEdBQUcsWUFBWSxDQUFDLFdBQVcsQ0FBQyxNQUFNOzs7O2dCQUFDLFVBQUEsT0FBTyxJQUFJLE9BQUEsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDLEVBQW5DLENBQW1DLEVBQUM7Z0JBQ3RHLFFBQVEsY0FBYyxDQUFDLE1BQU0sRUFBRTtvQkFDM0IsS0FBSyxDQUFDO3dCQUNGLE9BQU8sU0FBUyxDQUFDO29CQUNyQixLQUFLLENBQUM7d0JBQ0YsT0FBTyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBQzdCO3dCQUNJLE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUNoQztZQUNMLENBQUMsRUFBQyxDQUNMLENBQUM7UUFDTixDQUFDLEVBQUE7SUExQkQsQ0FBQzs7Z0JBVEosVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFKUSxpQ0FBaUM7OztzQ0FKMUM7Q0EwQ0MsQUFwQ0QsSUFvQ0M7U0FoQ1ksMkJBQTJCOzs7SUFPcEMscURBUUM7O0lBRUQsNERBY0M7Ozs7O0lBNUJHLHNFQUEwRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBMYW5kaW5nUGFnZUNvbmZpZyB9IGZyb20gJy4uL21vZGVscy90Yy1nZW5lcmFsLWxhbmRpbmctcGFnZS1jb25maWcnO1xuaW1wb3J0IHsgVGNHZW5lcmFsTGFuZGluZ1BhZ2VDb25maWdTZXJ2aWNlIH0gZnJvbSAnLi90Yy1nZW5lcmFsLWxhbmRpbmctcGFnZS1jb25maWcuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuXG5leHBvcnQgY2xhc3MgVGNHZW5lcmFsTGFuZGluZ1BhZ2VTZXJ2aWNlIHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGdlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZ1NlcnZpY2U6IFRjR2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnU2VydmljZVxuICAgICkge1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRMYW5kaW5nUGFnZSA9IChrZXk6IHN0cmluZywgdWlBcHBJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxMYW5kaW5nUGFnZUNvbmZpZz4gPT4ge1xuICAgICAgICBjb25zdCBsYW5kaW5nUGFnZSA9IHRoaXMuZ2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnU2VydmljZS5nZXRHZW5lcmFsTGFuZGluZ1BhZ2VDb25maWcodWlBcHBJZCwgdHJ1ZSwgdHJ1ZSkucGlwZShcbiAgICAgICAgICAgIG1hcChsYW5kaW5nUGFnZXMgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhZ2UgPSBsYW5kaW5nUGFnZXMubGFuZGluZ1BhZ2UuZmlsdGVyKGVsZW1lbnQgPT4gZWxlbWVudC5rZXkgPT09IGtleSApWzBdO1xuICAgICAgICAgICAgICAgIHJldHVybiBwYWdlO1xuICAgICAgICAgICAgfSkgICAgICAgICAgICBcbiAgICAgICAgKSAgIFxuICAgICAgICByZXR1cm4gbGFuZGluZ1BhZ2U7XG4gICAgfVxuXG4gICAgcHVibGljIGdldExhbmRpbmdQYWdlRm9yUm9sZSA9IChyb2xlSWQ6IHN0cmluZywgdWlBcHBJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxMYW5kaW5nUGFnZUNvbmZpZz4gPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5nZW5lcmFsTGFuZGluZ1BhZ2VDb25maWdTZXJ2aWNlLmdldEdlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZyh1aUFwcElkLCB0cnVlLCB0cnVlKS5waXBlKFxuICAgICAgICAgICAgbWFwKGxhbmRpbmdQYWdlcyA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY2FuZGlkYXRlUGFnZXMgPSBsYW5kaW5nUGFnZXMubGFuZGluZ1BhZ2UuZmlsdGVyKGVsZW1lbnQgPT4gZWxlbWVudC5yb2xlcy5pbmRleE9mKHJvbGVJZCkgIT0gLTEpO1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoY2FuZGlkYXRlUGFnZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYW5kaWRhdGVQYWdlc1swXTtcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYW5kaWRhdGVQYWdlc1swXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH0gXG59XG5cbiJdfQ==