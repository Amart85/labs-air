/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @ngdoc component
 * @name LegacyIframeService
 *
 * @description
 *
 * Used to handle synchronization and loading of legacy form iframe
 *
 * Will emit false until the iFrame has posted it's ready message
 *
 *
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
var LegacyIframeService = /** @class */ (function () {
    function LegacyIframeService() {
        var _this = this;
        this.iWorkitemFrameReady = new BehaviorSubject(false);
        this.iProcessFrameReady = new BehaviorSubject(false);
        this.workitemStatus = this.iWorkitemFrameReady.asObservable();
        this.processStatus = this.iProcessFrameReady.asObservable();
        this.receiveMessage = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.data.action === 'workitemAppReady') {
                _this.iWorkitemFrameReady.next(true);
                console.log('*** workitems iframe ready');
            }
            else if (event.data.action === 'processAppReady') {
                _this.iProcessFrameReady.next(true);
                console.log('*** process iframe ready');
            }
        });
        console.log('*** service waiting for message');
        window.addEventListener('message', this.receiveMessage, false);
    }
    LegacyIframeService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LegacyIframeService.ctorParameters = function () { return []; };
    /** @nocollapse */ LegacyIframeService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LegacyIframeService_Factory() { return new LegacyIframeService(); }, token: LegacyIframeService, providedIn: "root" });
    return LegacyIframeService;
}());
export { LegacyIframeService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LegacyIframeService.prototype.iWorkitemFrameReady;
    /**
     * @type {?}
     * @private
     */
    LegacyIframeService.prototype.iProcessFrameReady;
    /** @type {?} */
    LegacyIframeService.prototype.workitemStatus;
    /** @type {?} */
    LegacyIframeService.prototype.processStatus;
    /**
     * @type {?}
     * @private
     */
    LegacyIframeService.prototype.receiveMessage;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGVnYWN5LWlmcmFtZS5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL2xlZ2FjeS1pZnJhbWUuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7O0FBYUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sTUFBTSxDQUFDOztBQUVyQztJQVdFO1FBQUEsaUJBR0M7UUFSTyx3QkFBbUIsR0FBRyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRCx1QkFBa0IsR0FBRyxJQUFJLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNqRCxtQkFBYyxHQUFHLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUN6RCxrQkFBYSxHQUFHLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQU90RCxtQkFBYzs7OztRQUFHLFVBQUMsS0FBSztZQUM3QixJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsTUFBTSxLQUFLLGtCQUFrQixFQUFFO2dCQUM1QyxLQUFJLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2dCQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLENBQUM7YUFDM0M7aUJBQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sS0FBSyxpQkFBaUIsRUFBRTtnQkFDbEQsS0FBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDbkMsT0FBTyxDQUFDLEdBQUcsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDO2FBQ3pDO1FBQ0gsQ0FBQyxFQUFBO1FBWkMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxpQ0FBaUMsQ0FBQyxDQUFDO1FBQy9DLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDLGNBQWMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqRSxDQUFDOztnQkFkRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7Ozs4QkFsQkQ7Q0EwQ0MsQUExQkQsSUEwQkM7U0F0QlksbUJBQW1COzs7Ozs7SUFFOUIsa0RBQXlEOzs7OztJQUN6RCxpREFBd0Q7O0lBQ3hELDZDQUFnRTs7SUFDaEUsNENBQThEOzs7OztJQU85RCw2Q0FRQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG5nZG9jIGNvbXBvbmVudFxuICogQG5hbWUgTGVnYWN5SWZyYW1lU2VydmljZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFVzZWQgdG8gaGFuZGxlIHN5bmNocm9uaXphdGlvbiBhbmQgbG9hZGluZyBvZiBsZWdhY3kgZm9ybSBpZnJhbWVcbiAqXG4gKiBXaWxsIGVtaXQgZmFsc2UgdW50aWwgdGhlIGlGcmFtZSBoYXMgcG9zdGVkIGl0J3MgcmVhZHkgbWVzc2FnZVxuICpcbiAqXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3R9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcblxuZXhwb3J0IGNsYXNzIExlZ2FjeUlmcmFtZVNlcnZpY2Uge1xuXG4gIHByaXZhdGUgaVdvcmtpdGVtRnJhbWVSZWFkeSA9IG5ldyBCZWhhdmlvclN1YmplY3QoZmFsc2UpO1xuICBwcml2YXRlIGlQcm9jZXNzRnJhbWVSZWFkeSA9IG5ldyBCZWhhdmlvclN1YmplY3QoZmFsc2UpO1xuICBwdWJsaWMgd29ya2l0ZW1TdGF0dXMgPSB0aGlzLmlXb3JraXRlbUZyYW1lUmVhZHkuYXNPYnNlcnZhYmxlKCk7XG4gIHB1YmxpYyBwcm9jZXNzU3RhdHVzID0gdGhpcy5pUHJvY2Vzc0ZyYW1lUmVhZHkuYXNPYnNlcnZhYmxlKCk7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgY29uc29sZS5sb2coJyoqKiBzZXJ2aWNlIHdhaXRpbmcgZm9yIG1lc3NhZ2UnKTtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMucmVjZWl2ZU1lc3NhZ2UsIGZhbHNlKTtcbiAgfVxuXG4gIHByaXZhdGUgcmVjZWl2ZU1lc3NhZ2UgPSAoZXZlbnQpID0+IHtcbiAgICBpZiAoZXZlbnQuZGF0YS5hY3Rpb24gPT09ICd3b3JraXRlbUFwcFJlYWR5Jykge1xuICAgICAgdGhpcy5pV29ya2l0ZW1GcmFtZVJlYWR5Lm5leHQodHJ1ZSk7XG4gICAgICBjb25zb2xlLmxvZygnKioqIHdvcmtpdGVtcyBpZnJhbWUgcmVhZHknKTtcbiAgICB9IGVsc2UgaWYgKGV2ZW50LmRhdGEuYWN0aW9uID09PSAncHJvY2Vzc0FwcFJlYWR5Jykge1xuICAgICAgdGhpcy5pUHJvY2Vzc0ZyYW1lUmVhZHkubmV4dCh0cnVlKTtcbiAgICAgIGNvbnNvbGUubG9nKCcqKiogcHJvY2VzcyBpZnJhbWUgcmVhZHknKTtcbiAgICB9XG4gIH1cblxufVxuIl19