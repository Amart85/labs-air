/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
var MessageQueueService = /** @class */ (function () {
    function MessageQueueService() {
        this.queues = [
            { name: 'sample.queue', subject: new Subject() }
        ];
        console.log('Queue Message service Created...');
    }
    /**
     * @param {?} name
     * @param {?} message
     * @return {?}
     */
    MessageQueueService.prototype.sendMessage = /**
     * @param {?} name
     * @param {?} message
     * @return {?}
     */
    function (name, message) {
        this.createQueueIfNotExists(name);
        this.queues.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.name === name; }))[0].subject.next({ text: message });
    };
    /**
     * @param {?} name
     * @return {?}
     */
    MessageQueueService.prototype.clearMessages = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.createQueueIfNotExists(name);
        this.queues.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.name === name; }))[0].subject.next();
    };
    /**
     * @param {?} name
     * @return {?}
     */
    MessageQueueService.prototype.getMessage = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.createQueueIfNotExists(name);
        return this.queues.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.name === name; }))[0].subject.asObservable();
    };
    /**
     * @param {?} name
     * @return {?}
     */
    MessageQueueService.prototype.createQueueIfNotExists = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        var e_1, _a;
        /** @type {?} */
        var queueExist = false;
        try {
            for (var _b = tslib_1.__values(this.queues), _c = _b.next(); !_c.done; _c = _b.next()) {
                var q = _c.value;
                if (q.name === name) {
                    // console.log('Queue Exist: ' + q.name);
                    queueExist = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (!queueExist) {
            console.log('Creating Queue: ' + name);
            /** @type {?} */
            var tempQueue = { name: name, subject: new Subject() };
            this.queues.push(tempQueue);
        }
    };
    MessageQueueService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    MessageQueueService.ctorParameters = function () { return []; };
    /** @nocollapse */ MessageQueueService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MessageQueueService_Factory() { return new MessageQueueService(); }, token: MessageQueueService, providedIn: "root" });
    return MessageQueueService;
}());
export { MessageQueueService };
if (false) {
    /** @type {?} */
    MessageQueueService.prototype.queues;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtY29yZS1xdWV1ZS1jb21tLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi90Yy1jb3JlLXF1ZXVlLWNvbW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBYSxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7O0FBRXpDO0lBT0U7UUFKQSxXQUFNLEdBQW1EO1lBQ3ZELEVBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUUsSUFBSSxPQUFPLEVBQU8sRUFBQztTQUNwRCxDQUFDO1FBR0MsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Ozs7OztJQUVELHlDQUFXOzs7OztJQUFYLFVBQVksSUFBWSxFQUFFLE9BQWU7UUFDdkMsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQWYsQ0FBZSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7Ozs7O0lBRUQsMkNBQWE7Ozs7SUFBYixVQUFjLElBQVk7UUFDeEIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTs7OztRQUFDLFVBQUEsQ0FBQyxJQUFJLE9BQUEsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQWYsQ0FBZSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzdELENBQUM7Ozs7O0lBRUQsd0NBQVU7Ozs7SUFBVixVQUFXLElBQVk7UUFDckIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNOzs7O1FBQUMsVUFBQSxDQUFDLElBQUksT0FBQSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksRUFBZixDQUFlLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDNUUsQ0FBQzs7Ozs7SUFFRCxvREFBc0I7Ozs7SUFBdEIsVUFBdUIsSUFBWTs7O1lBQzdCLFVBQVUsR0FBRyxLQUFLOztZQUN0QixLQUFnQixJQUFBLEtBQUEsaUJBQUEsSUFBSSxDQUFDLE1BQU0sQ0FBQSxnQkFBQSw0QkFBRTtnQkFBeEIsSUFBTSxDQUFDLFdBQUE7Z0JBQ1YsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtvQkFDbkIseUNBQXlDO29CQUN6QyxVQUFVLEdBQUcsSUFBSSxDQUFDO2lCQUNuQjthQUNGOzs7Ozs7Ozs7UUFDRCxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsQ0FBQzs7Z0JBQ2pDLFNBQVMsR0FBRyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksT0FBTyxFQUFPLEVBQUM7WUFDM0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDOztnQkF2Q0YsVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQzs7Ozs7OEJBSGhDO0NBMkNDLEFBeENELElBd0NDO1NBdkNZLG1CQUFtQjs7O0lBRTlCLHFDQUVFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZSwgU3ViamVjdH0gZnJvbSAncnhqcyc7XG5cbkBJbmplY3RhYmxlKHtwcm92aWRlZEluOiAncm9vdCd9KVxuZXhwb3J0IGNsYXNzIE1lc3NhZ2VRdWV1ZVNlcnZpY2Uge1xuXG4gIHF1ZXVlczogQXJyYXk8eyBuYW1lOiBzdHJpbmcsIHN1YmplY3Q6IFN1YmplY3Q8YW55PiB9PiA9IFtcbiAgICB7bmFtZTogJ3NhbXBsZS5xdWV1ZScsIHN1YmplY3Q6IG5ldyBTdWJqZWN0PGFueT4oKX1cbiAgXTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgY29uc29sZS5sb2coJ1F1ZXVlIE1lc3NhZ2Ugc2VydmljZSBDcmVhdGVkLi4uJyk7XG4gIH1cblxuICBzZW5kTWVzc2FnZShuYW1lOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykge1xuICAgIHRoaXMuY3JlYXRlUXVldWVJZk5vdEV4aXN0cyhuYW1lKTtcbiAgICB0aGlzLnF1ZXVlcy5maWx0ZXIoeCA9PiB4Lm5hbWUgPT09IG5hbWUpWzBdLnN1YmplY3QubmV4dCh7dGV4dDogbWVzc2FnZX0pO1xuICB9XG5cbiAgY2xlYXJNZXNzYWdlcyhuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNyZWF0ZVF1ZXVlSWZOb3RFeGlzdHMobmFtZSk7XG4gICAgdGhpcy5xdWV1ZXMuZmlsdGVyKHggPT4geC5uYW1lID09PSBuYW1lKVswXS5zdWJqZWN0Lm5leHQoKTtcbiAgfVxuXG4gIGdldE1lc3NhZ2UobmFtZTogc3RyaW5nKTogT2JzZXJ2YWJsZTxhbnk+IHtcbiAgICB0aGlzLmNyZWF0ZVF1ZXVlSWZOb3RFeGlzdHMobmFtZSk7XG4gICAgcmV0dXJuIHRoaXMucXVldWVzLmZpbHRlcih4ID0+IHgubmFtZSA9PT0gbmFtZSlbMF0uc3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIGNyZWF0ZVF1ZXVlSWZOb3RFeGlzdHMobmFtZTogc3RyaW5nKSB7XG4gICAgbGV0IHF1ZXVlRXhpc3QgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IHEgb2YgdGhpcy5xdWV1ZXMpIHtcbiAgICAgIGlmIChxLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ1F1ZXVlIEV4aXN0OiAnICsgcS5uYW1lKTtcbiAgICAgICAgcXVldWVFeGlzdCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghcXVldWVFeGlzdCkge1xuICAgICAgY29uc29sZS5sb2coJ0NyZWF0aW5nIFF1ZXVlOiAnICsgbmFtZSk7XG4gICAgICBjb25zdCB0ZW1wUXVldWUgPSB7bmFtZTogbmFtZSwgc3ViamVjdDogbmV3IFN1YmplY3Q8YW55PigpfTtcbiAgICAgIHRoaXMucXVldWVzLnB1c2godGVtcFF1ZXVlKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==