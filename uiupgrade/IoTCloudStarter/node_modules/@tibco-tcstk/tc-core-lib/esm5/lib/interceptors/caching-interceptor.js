/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @ngdoc component
 * @name CachingInterceptor
 *
 * @description
 *
 * This interceptor will intercept http calls if it is enabled in the tc-core-lib-module.ts.
 *
 * It will cache requests if the cacheResponse header is specified on the http request.
 * If flush cache header is on the request it will not use the cache and will overwrite the current cached entry.
 *
 *
 */
import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { of } from 'rxjs';
import { tap } from 'rxjs/operators';
import { RequestCacheService } from '../services/request-cache.service';
var CachingInterceptor = /** @class */ (function () {
    function CachingInterceptor(cache) {
        this.cache = cache;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    CachingInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        /** @type {?} */
        var cachedResponse;
        if (req.headers.get('cacheResponse') || (req.urlWithParams.substr(0, 15)) === '../assets/icons') {
            // only cache if the cacheResponse flag is set
            if (!req.headers.get('flushCache')) {
                cachedResponse = this.cache.get(req);
            }
            else {
            }
            // use the cache
        }
        else {
            // dont pass the cache since this should not be cached
            return this.sendRequest(req, next, undefined);
        }
        // return cached response or make request if no cached response
        return cachedResponse ? of(cachedResponse) : this.sendRequest(req, next, this.cache);
    };
    /**
     * @param {?} req
     * @param {?} next
     * @param {?} cache
     * @return {?}
     */
    CachingInterceptor.prototype.sendRequest = /**
     * @param {?} req
     * @param {?} next
     * @param {?} cache
     * @return {?}
     */
    function (req, next, cache) {
        return next.handle(req)
            .pipe(tap((/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event instanceof HttpResponse && cache) {
                cache.put(req, event);
            }
        })));
    };
    CachingInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CachingInterceptor.ctorParameters = function () { return [
        { type: RequestCacheService }
    ]; };
    return CachingInterceptor;
}());
export { CachingInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CachingInterceptor.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZy1pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcmNlcHRvcnMvY2FjaGluZy1pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQWNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUEwQixZQUFZLEVBQWdDLE1BQU0sc0JBQXNCLENBQUM7QUFFMUcsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFFeEU7SUFFRSw0QkFBb0IsS0FBMEI7UUFBMUIsVUFBSyxHQUFMLEtBQUssQ0FBcUI7SUFBRyxDQUFDOzs7Ozs7SUFDbEQsc0NBQVM7Ozs7O0lBQVQsVUFBVSxHQUFxQixFQUFFLElBQWlCOztZQUM1QyxjQUFjO1FBQ2xCLElBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsS0FBSyxpQkFBaUIsRUFBRTtZQUMvRiw4Q0FBOEM7WUFDOUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxFQUFFO2dCQUNsQyxjQUFjLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDdEM7aUJBQU07YUFDTjtZQUNELGdCQUFnQjtTQUNqQjthQUFNO1lBQ0wsc0RBQXNEO1lBQ3RELE9BQU8sSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO1NBQy9DO1FBQ0QsK0RBQStEO1FBQy9ELE9BQU8sY0FBYyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkYsQ0FBQzs7Ozs7OztJQUVELHdDQUFXOzs7Ozs7SUFBWCxVQUNFLEdBQXFCLEVBQ3JCLElBQWlCLEVBQ2pCLEtBQTBCO1FBQzFCLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7YUFDcEIsSUFBSSxDQUNMLEdBQUc7Ozs7UUFBQyxVQUFBLEtBQUs7WUFDUCxJQUFJLEtBQUssWUFBWSxZQUFZLElBQUksS0FBSyxFQUFFO2dCQUMxQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQzthQUN2QjtRQUNILENBQUMsRUFBQyxDQUNILENBQUM7SUFDSixDQUFDOztnQkFoQ0YsVUFBVTs7OztnQkFGRixtQkFBbUI7O0lBbUM1Qix5QkFBQztDQUFBLEFBakNELElBaUNDO1NBaENZLGtCQUFrQjs7Ozs7O0lBQ2pCLG1DQUFrQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQG5nZG9jIGNvbXBvbmVudFxuICogQG5hbWUgQ2FjaGluZ0ludGVyY2VwdG9yXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKlxuICogVGhpcyBpbnRlcmNlcHRvciB3aWxsIGludGVyY2VwdCBodHRwIGNhbGxzIGlmIGl0IGlzIGVuYWJsZWQgaW4gdGhlIHRjLWNvcmUtbGliLW1vZHVsZS50cy5cbiAqXG4gKiBJdCB3aWxsIGNhY2hlIHJlcXVlc3RzIGlmIHRoZSBjYWNoZVJlc3BvbnNlIGhlYWRlciBpcyBzcGVjaWZpZWQgb24gdGhlIGh0dHAgcmVxdWVzdC5cbiAqIElmIGZsdXNoIGNhY2hlIGhlYWRlciBpcyBvbiB0aGUgcmVxdWVzdCBpdCB3aWxsIG5vdCB1c2UgdGhlIGNhY2hlIGFuZCB3aWxsIG92ZXJ3cml0ZSB0aGUgY3VycmVudCBjYWNoZWQgZW50cnkuXG4gKlxuICpcbiAqL1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBIdHRwRXZlbnQsIEh0dHBSZXF1ZXN0LCBIdHRwUmVzcG9uc2UsIEh0dHBJbnRlcmNlcHRvciwgSHR0cEhhbmRsZXIgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5cbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyB0YXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBSZXF1ZXN0Q2FjaGVTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvcmVxdWVzdC1jYWNoZS5zZXJ2aWNlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhY2hpbmdJbnRlcmNlcHRvciBpbXBsZW1lbnRzIEh0dHBJbnRlcmNlcHRvciB7XG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2FjaGU6IFJlcXVlc3RDYWNoZVNlcnZpY2UpIHt9XG4gIGludGVyY2VwdChyZXE6IEh0dHBSZXF1ZXN0PGFueT4sIG5leHQ6IEh0dHBIYW5kbGVyKSB7XG4gICAgbGV0IGNhY2hlZFJlc3BvbnNlO1xuICAgIGlmIChyZXEuaGVhZGVycy5nZXQoJ2NhY2hlUmVzcG9uc2UnKSB8fCAocmVxLnVybFdpdGhQYXJhbXMuc3Vic3RyKDAsIDE1KSkgPT09ICcuLi9hc3NldHMvaWNvbnMnKSB7XG4gICAgICAvLyBvbmx5IGNhY2hlIGlmIHRoZSBjYWNoZVJlc3BvbnNlIGZsYWcgaXMgc2V0XG4gICAgICBpZiAoIXJlcS5oZWFkZXJzLmdldCgnZmx1c2hDYWNoZScpKSB7XG4gICAgICAgIGNhY2hlZFJlc3BvbnNlID0gdGhpcy5jYWNoZS5nZXQocmVxKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICB9XG4gICAgICAvLyB1c2UgdGhlIGNhY2hlXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGRvbnQgcGFzcyB0aGUgY2FjaGUgc2luY2UgdGhpcyBzaG91bGQgbm90IGJlIGNhY2hlZFxuICAgICAgcmV0dXJuIHRoaXMuc2VuZFJlcXVlc3QocmVxLCBuZXh0LCB1bmRlZmluZWQpO1xuICAgIH1cbiAgICAvLyByZXR1cm4gY2FjaGVkIHJlc3BvbnNlIG9yIG1ha2UgcmVxdWVzdCBpZiBubyBjYWNoZWQgcmVzcG9uc2VcbiAgICByZXR1cm4gY2FjaGVkUmVzcG9uc2UgPyBvZihjYWNoZWRSZXNwb25zZSkgOiB0aGlzLnNlbmRSZXF1ZXN0KHJlcSwgbmV4dCwgdGhpcy5jYWNoZSk7XG4gIH1cblxuICBzZW5kUmVxdWVzdChcbiAgICByZXE6IEh0dHBSZXF1ZXN0PGFueT4sXG4gICAgbmV4dDogSHR0cEhhbmRsZXIsXG4gICAgY2FjaGU6IFJlcXVlc3RDYWNoZVNlcnZpY2UpOiBPYnNlcnZhYmxlPEh0dHBFdmVudDxhbnk+PiB7XG4gICAgcmV0dXJuIG5leHQuaGFuZGxlKHJlcSlcbiAgICAgIC5waXBlKFxuICAgICAgdGFwKGV2ZW50ID0+IHtcbiAgICAgICAgaWYgKGV2ZW50IGluc3RhbmNlb2YgSHR0cFJlc3BvbnNlICYmIGNhY2hlKSB7XG4gICAgICAgICAgY2FjaGUucHV0KHJlcSwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICB9KVxuICAgICk7XG4gIH1cbn1cbiJdfQ==