/**
 * @ngdoc component
 * @name tcSharedStateService
 *
 * @description
 *
 * tcSharedStateService provides services for managing stored client config using the Tibco Live Apps shared state service.
 *
 * Although this is a live apps service rather than a Tibco Subscriber Cloud Service it is inside the core project since it will
 * be used for all applications to store configuration information.
 *
 * By hosting this service in the core we can avoid a circular dependency to the live apps library.
 *
 * Note: This service will use the http caching interceptor for 'GET' calls based on passed parameters.
 *
 *
 */
import { SharedStateContent, SharedStateList } from '../models/tc-shared-state';
import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { UiAppConfig } from '../models/tc-app-config';
export declare class TcSharedStateService {
    private http;
    private location;
    constructor(http: HttpClient, location: Location);
    createSharedState(name: string, type: string, description: string, sandboxId: number, attributes: string[], roles: string[], links: string[], content: SharedStateContent): Observable<string>;
    updateSharedState(sharedStateList: any): Observable<SharedStateList>;
    getSharedState(name: string, type: string, useCache: boolean, flushCache: boolean): Observable<SharedStateList>;
    getUiAppConfig(uiAppId: string, useCache: boolean, flushCache: boolean): Observable<UiAppConfig>;
    createUiAppConfig(sandboxId: number, uiAppConfig: UiAppConfig, uiAppId: string): Observable<string>;
    updateUiAppConfig(sandboxId: number, uiAppConfig: UiAppConfig, uiAppId: string, id: string): Observable<UiAppConfig>;
    deleteSharedState(id: number): Observable<string>;
}
