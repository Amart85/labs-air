import { Component, Input, Output, EventEmitter, NgModule, CUSTOM_ELEMENTS_SCHEMA, Injectable } from '@angular/core';
import { MaterialDesignFrameworkModule, Bootstrap4FrameworkModule } from 'angular6-json-schema-form';
import { ActivatedRoute } from '@angular/router';
import { MatButtonModule, MatCardModule, MatCheckboxModule, MatIconModule, MatMenuModule, MatSelectModule, MatToolbarModule, MatListModule, MatFormFieldModule, MatInputModule, MatOptionModule, MatDialogModule, MatTooltipModule } from '@angular/material';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { FlexLayoutModule } from '@angular/flex-layout';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { BrowserModule } from '@angular/platform-browser';
import { HttpHeaders, HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { TcCoreCommonFunctions } from '@tibco-tcstk/tc-core-lib';
import { map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var CustomFormDefs = /** @class */ (function () {
    function CustomFormDefs() {
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    CustomFormDefs.prototype.deserialize = /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    function (input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    };
    return CustomFormDefs;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var RenderedFormComponent = /** @class */ (function () {
    function RenderedFormComponent(route) {
        var _this = this;
        this.route = route;
        this.schema = {};
        this.layout = [];
        this.data = {};
        this.formsFramework = this.formsFramework ? this.formsFramework : 'material-design';
        /**
         * ~event formSubmit : form submitted
         * ~payload any : data submitted from the form on submit (type=any)
         */
        this.formSubmit = new EventEmitter();
        this.formData = {};
        this.submitForm = (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            console.warn('*** Forms: Submitting form with payload: ', data);
            console.warn('*** Forms: JSON: ', JSON.stringify(data));
            _this.formSubmit.emit(data);
        });
        this.handleLayoutOutput = (/**
         * @param {?} layout
         * @return {?}
         */
        function (layout) {
            console.log('Layout:');
            console.log(JSON.stringify(layout));
        });
        this.onChanges = (/**
         * @param {?} $event
         * @return {?}
         */
        function ($event) {
            _this.data = $event;
        });
    }
    /**
     * @return {?}
     */
    RenderedFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    RenderedFormComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // handle input param changes
        if (this.customFormDefs && changes.formRef && changes.formRef.currentValue && (changes.formRef.currentValue !== changes.formRef.previousValue)) {
            // check if this is a custom form
            if (this.customFormDefs && this.customFormDefs.customForms) {
                this.useCustomForm = (this.customFormDefs.customForms.findIndex((/**
                 * @param {?} form
                 * @return {?}
                 */
                function (form) {
                    return (form === changes.formRef.currentValue);
                })) !== -1);
            }
            console.warn('*** Forms: Custom Form configuration (customForm.json): ', this.customFormDefs);
            if (this.useCustomForm) {
                console.warn('*** Forms: > Using custom form (formRef):', this.formRef);
            }
            else {
                console.warn('*** Forms: > Using auto-rendered form (formRef):', this.formRef);
            }
        }
        if (changes.schema && changes.schema.currentValue && (changes.schema.currentValue !== changes.schema.previousValue)) {
            /** @type {?} */
            var tmpSchema = changes.schema.currentValue;
            // json-schema-form doesnt like the $schema and wont parse the schema if it is present. So remove it.
            if (changes.schema.currentValue.$schema) {
                delete tmpSchema.$schema;
            }
            this.formSchema = tmpSchema;
            console.warn('*** Forms: Form Schema: ', JSON.stringify(this.formSchema));
        }
        if (changes.data && changes.data.currentValue && (changes.data.currentValue !== changes.data.previousValue)) {
            this.formData = this.data;
            console.warn('*** Forms: Initial Form Data:', this.formData);
            console.warn('*** Forms: Initial Form Data (JSON):', JSON.stringify(this.formData));
        }
        if (changes.layout && changes.layout.currentValue && (changes.layout.currentValue !== changes.layout.previousValue)) {
            this.formLayout = this.layout;
        }
    };
    RenderedFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcfrm-rendered-form',
                    template: "<div fxFill fxLayout=\"row\" fxLayoutAlign = \"center start\">\n  <div class=\"tcs-rendered-form\">\n    <json-schema-form #renderedForm *ngIf=\"!useCustomForm && formSchema\"\n      loadExternalAssets=\"false\"\n      [framework]=\"formsFramework\"\n      [schema]=\"formSchema\"\n      [layout]=\"formLayout\"\n      [data]=\"formData\"\n      [options]=\"options\"\n      (onChanges)=\"onChanges($event)\"\n      (onSubmit)=\"submitForm($event)\"\n      (formLayout)=\"handleLayoutOutput($event)\"\n    >\n    </json-schema-form>\n\n    <!-- form-app=\"''\" - this is to work around an issue where the element doesnt display the form properly unless we pass in an additional input - angular bug? -->\n    <custom-form *ngIf=\"useCustomForm && formRef && formData && appId\" form-app=\"''\" [formRef]=\"formRef\" [caseRef]=\"caseRef\" [appId]=\"appId\" [data]=\"formData\" (formSubmitted)=\"submitForm($event.detail)\"></custom-form>\n    <span *ngIf=\"!formSchema && !useCustomForm\">A form cannot be generated as no schema is available. Use a supported form or register a custom form app.</span>\n  </div>\n</div>\n",
                    styles: [".tcs-rendered-form{box-shadow:0 2px 8px 0 #dedede;background-color:#fff;width:100%;padding:20px}"]
                }] }
    ];
    /** @nocollapse */
    RenderedFormComponent.ctorParameters = function () { return [
        { type: ActivatedRoute }
    ]; };
    RenderedFormComponent.propDecorators = {
        schema: [{ type: Input }],
        layout: [{ type: Input }],
        data: [{ type: Input }],
        options: [{ type: Input }],
        formRef: [{ type: Input }],
        caseRef: [{ type: Input }],
        appId: [{ type: Input }],
        formsFramework: [{ type: Input }],
        customFormDefs: [{ type: Input }],
        formSubmit: [{ type: Output }]
    };
    return RenderedFormComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var TcFormsLibModule = /** @class */ (function () {
    function TcFormsLibModule() {
    }
    TcFormsLibModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        RenderedFormComponent
                    ],
                    imports: [
                        BrowserModule,
                        BrowserAnimationsModule,
                        FlexLayoutModule,
                        FormsModule,
                        MatButtonModule,
                        MatCardModule,
                        MatCheckboxModule,
                        MatIconModule,
                        MatMenuModule,
                        MatSelectModule,
                        MatToolbarModule,
                        MaterialDesignFrameworkModule,
                        Bootstrap4FrameworkModule,
                        MatButtonModule,
                        MatCardModule,
                        MatCheckboxModule,
                        MatListModule,
                        MatFormFieldModule,
                        MatInputModule,
                        MatIconModule,
                        MatSelectModule,
                        MatOptionModule,
                        MatDialogModule,
                        MatMenuModule,
                        MatCardModule,
                        MatTooltipModule,
                        FormsModule,
                        FlexLayoutModule,
                        ScrollingModule,
                        FormsModule,
                        ReactiveFormsModule
                    ],
                    schemas: [CUSTOM_ELEMENTS_SCHEMA],
                    exports: [
                        RenderedFormComponent
                    ],
                    entryComponents: []
                },] }
    ];
    return TcFormsLibModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var FormResolver = /** @class */ (function () {
    function FormResolver(http, location) {
        this.http = http;
        this.location = location;
        this.CUSTOM_FORMS_CONFIG_URL = 'assets/config/customForms.json';
    }
    /**
     * @return {?}
     */
    FormResolver.prototype.resolve = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, this.CUSTOM_FORMS_CONFIG_URL), { headers: headers }).pipe(map((/**
         * @param {?} formsConfig
         * @return {?}
         */
        function (formsConfig) {
            return new CustomFormDefs().deserialize(formsConfig);
        })));
    };
    FormResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FormResolver.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Location }
    ]; };
    return FormResolver;
}());

export { CustomFormDefs, FormResolver, RenderedFormComponent, TcFormsLibModule };
//# sourceMappingURL=tibco-tcstk-tc-forms-lib.js.map
