{"version":3,"sources":["ng://@tibco-tcstk/tc-forms-lib/lib/models/tc-custom-forms.ts","ng://@tibco-tcstk/tc-forms-lib/lib/components/rendered-form/rendered-form.component.ts","ng://@tibco-tcstk/tc-forms-lib/lib/tc-forms-lib.module.ts","ng://@tibco-tcstk/tc-forms-lib/lib/resolvers/form.resolver.ts"],"names":["CustomFormDefs","prototype","deserialize","input","Object","assign","RenderedFormComponent","route","_this","this","schema","layout","data","formsFramework","formSubmit","EventEmitter","formData","submitForm","console","warn","JSON","stringify","emit","handleLayoutOutput","log","onChanges","$event","ngOnInit","ngOnChanges","changes","customFormDefs","formRef","currentValue","previousValue","customForms","useCustomForm","findIndex","form","tmpSchema","$schema","formSchema","formLayout","Component","args","selector","template","ActivatedRoute","Input","Output","TcFormsLibModule","NgModule","declarations","imports","BrowserModule","BrowserAnimationsModule","FlexLayoutModule","FormsModule","MatButtonModule","MatCardModule","MatCheckboxModule","MatIconModule","MatMenuModule","MatSelectModule","MatToolbarModule","MaterialDesignFrameworkModule","Bootstrap4FrameworkModule","MatListModule","MatFormFieldModule","MatInputModule","MatOptionModule","MatDialogModule","MatTooltipModule","ScrollingModule","ReactiveFormsModule","schemas","CUSTOM_ELEMENTS_SCHEMA","exports","entryComponents","FormResolver","http","location","CUSTOM_FORMS_CONFIG_URL","resolve","headers","HttpHeaders","set","get","TcCoreCommonFunctions","prepareUrlForStaticResource","pipe","map","formsConfig","Injectable","HttpClient","Location"],"mappings":"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","sourcesContent":["import {Deserializable} from '@tibco-tcstk/tc-core-lib';\n\nexport class CustomFormDefs implements Deserializable {\n  customForms: string[];\n  deserialize(input: any): this {\n    Object.assign(this, input);\n    return this;\n  }\n}\n","/**\n * @ngdoc component\n * @name RenderedFormComponent\n *\n * @description\n * `<tcfrm-rendered-form>` is a component providing the ability to reneder a form using the third party angular6-json-form library.\n *\n * @usage\n *\n * This component is used by tc--liveapps-lib to render forms based on a JSON schema that is supplied by the liveapps API\n *\n * It is located into this dedicated library to make it easier to plug in an alternative form rendering library\n *\n */\n\nimport {Component, EventEmitter, Input, OnChanges, OnInit, Output, SimpleChanges} from '@angular/core';\nimport {JsonSchemaFormComponent, MaterialDesignFrameworkModule} from 'angular6-json-schema-form';\nimport {ActivatedRoute} from '@angular/router';\nimport {CustomFormDefs} from '../../models/tc-custom-forms';\n\n@Component({\n  selector: 'tcfrm-rendered-form',\n  templateUrl: './rendered-form.component.html',\n  styleUrls: ['./rendered-form.component.css']\n})\nexport class RenderedFormComponent implements OnInit, OnChanges {\n  @Input() schema: any = {};\n  @Input() layout: any[] = [];\n  @Input() data: any = {};\n  @Input() options: any[];\n  @Input() formRef: string;\n  @Input() caseRef: string;\n  @Input() appId: string;\n  @Input() formsFramework: string = this.formsFramework ? this.formsFramework : 'material-design';\n  @Input() customFormDefs: CustomFormDefs;\n  /**\n   * ~event formSubmit : form submitted\n   * ~payload any : data submitted from the form on submit (type=any)\n   */\n  @Output() formSubmit: EventEmitter<any> = new EventEmitter<any>();\n\n  formSchema: any;\n  formLayout: any[];\n  formData: any = {};\n  test: string;\n  useCustomForm: boolean;\n\n  submitForm = (data: any) => {\n    console.warn('*** Forms: Submitting form with payload: ', data);\n    console.warn('*** Forms: JSON: ', JSON.stringify(data));\n    this.formSubmit.emit(data);\n  }\n\n  handleLayoutOutput = (layout: any) => {\n    console.log('Layout:');\n    console.log(JSON.stringify(layout));\n  }\n\n  constructor(protected route: ActivatedRoute) { }\n\n  ngOnInit() {\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    // handle input param changes\n    if (this.customFormDefs && changes.formRef && changes.formRef.currentValue && (changes.formRef.currentValue !== changes.formRef.previousValue)) {\n      // check if this is a custom form\n      if (this.customFormDefs && this.customFormDefs.customForms) {\n        this.useCustomForm = (this.customFormDefs.customForms.findIndex((form) => {\n          return (form === changes.formRef.currentValue);\n        }) !== -1);\n      }\n      console.warn('*** Forms: Custom Form configuration (customForm.json): ', this.customFormDefs);\n      if (this.useCustomForm) {\n        console.warn('*** Forms: > Using custom form (formRef):', this.formRef);\n      } else {\n        console.warn('*** Forms: > Using auto-rendered form (formRef):', this.formRef);\n      }\n    }\n    if (changes.schema && changes.schema.currentValue && (changes.schema.currentValue !== changes.schema.previousValue)) {\n      const tmpSchema = changes.schema.currentValue;\n      // json-schema-form doesnt like the $schema and wont parse the schema if it is present. So remove it.\n      if (changes.schema.currentValue.$schema) {\n        delete tmpSchema.$schema;\n      }\n      this.formSchema = tmpSchema;\n      console.warn('*** Forms: Form Schema: ', JSON.stringify(this.formSchema));\n    }\n    if (changes.data && changes.data.currentValue && (changes.data.currentValue !== changes.data.previousValue)) {\n      this.formData = this.data;\n      console.warn('*** Forms: Initial Form Data:', this.formData);\n      console.warn('*** Forms: Initial Form Data (JSON):', JSON.stringify(this.formData));\n    }\n    if (changes.layout && changes.layout.currentValue && (changes.layout.currentValue !== changes.layout.previousValue)) {\n      this.formLayout = this.layout;\n    }\n  }\n\n  onChanges = ($event) => {\n    this.data = $event;\n  }\n\n\n}\n","import { NgModule, CUSTOM_ELEMENTS_SCHEMA } from '@angular/core';\nimport { MaterialDesignFrameworkModule } from 'angular6-json-schema-form';\nimport { Bootstrap4FrameworkModule} from 'angular6-json-schema-form';\nimport {RenderedFormComponent} from './components/rendered-form/rendered-form.component';\nimport {\n  MatButtonModule,\n  MatCardModule,\n  MatCheckboxModule, MatDialogModule,\n  MatFormFieldModule,\n  MatIconModule,\n  MatInputModule,\n  MatListModule, MatMenuModule, MatOptionModule, MatSelectModule, MatToolbarModule, MatTooltipModule\n} from '@angular/material';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {BrowserModule} from '@angular/platform-browser';\n\n@NgModule({\n  declarations: [\n    RenderedFormComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    FlexLayoutModule,\n    FormsModule,\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatMenuModule,\n    MatSelectModule,\n    MatToolbarModule,\n    MaterialDesignFrameworkModule,\n    Bootstrap4FrameworkModule,\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatListModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatSelectModule,\n    MatOptionModule,\n    MatDialogModule,\n    MatMenuModule,\n    MatCardModule,\n    MatTooltipModule,\n    FormsModule,\n    FlexLayoutModule,\n    ScrollingModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  schemas: [ CUSTOM_ELEMENTS_SCHEMA],\n  exports: [\n    RenderedFormComponent\n  ],\n  entryComponents: [\n  ]\n})\nexport class TcFormsLibModule { }\n","import {Injectable} from '@angular/core';\nimport {Resolve} from '@angular/router';\nimport {Observable} from 'rxjs';\n\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Location} from '@angular/common';\nimport {TcCoreCommonFunctions} from '@tibco-tcstk/tc-core-lib';\nimport {map} from 'rxjs/operators';\nimport {CustomFormDefs} from '../models/tc-custom-forms';\n\n@Injectable()\nexport class FormResolver implements Resolve<Observable<CustomFormDefs>> {\n\n  CUSTOM_FORMS_CONFIG_URL = 'assets/config/customForms.json';\n\n  constructor(private http: HttpClient, private location: Location) {\n  }\n\n  resolve(): Observable<CustomFormDefs> {\n    const headers = new HttpHeaders().set('cacheResponse', 'true');\n    return this.http.get(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, this.CUSTOM_FORMS_CONFIG_URL), { headers }).pipe(\n      map(formsConfig => {\n        return new CustomFormDefs().deserialize(formsConfig);\n      })\n    );\n  }\n\n}\n"]}