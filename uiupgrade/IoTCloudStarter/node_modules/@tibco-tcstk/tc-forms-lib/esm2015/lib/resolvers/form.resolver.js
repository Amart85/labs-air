/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Location } from '@angular/common';
import { TcCoreCommonFunctions } from '@tibco-tcstk/tc-core-lib';
import { map } from 'rxjs/operators';
import { CustomFormDefs } from '../models/tc-custom-forms';
export class FormResolver {
    /**
     * @param {?} http
     * @param {?} location
     */
    constructor(http, location) {
        this.http = http;
        this.location = location;
        this.CUSTOM_FORMS_CONFIG_URL = 'assets/config/customForms.json';
    }
    /**
     * @return {?}
     */
    resolve() {
        /** @type {?} */
        const headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, this.CUSTOM_FORMS_CONFIG_URL), { headers }).pipe(map((/**
         * @param {?} formsConfig
         * @return {?}
         */
        formsConfig => {
            return new CustomFormDefs().deserialize(formsConfig);
        })));
    }
}
FormResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormResolver.ctorParameters = () => [
    { type: HttpClient },
    { type: Location }
];
if (false) {
    /** @type {?} */
    FormResolver.prototype.CUSTOM_FORMS_CONFIG_URL;
    /**
     * @type {?}
     * @private
     */
    FormResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    FormResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5yZXNvbHZlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1mb3Jtcy1saWIvIiwic291cmNlcyI6WyJsaWIvcmVzb2x2ZXJzL2Zvcm0ucmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFJekMsT0FBTyxFQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUM3RCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ25DLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUd6RCxNQUFNLE9BQU8sWUFBWTs7Ozs7SUFJdkIsWUFBb0IsSUFBZ0IsRUFBVSxRQUFrQjtRQUE1QyxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUZoRSw0QkFBdUIsR0FBRyxnQ0FBZ0MsQ0FBQztJQUczRCxDQUFDOzs7O0lBRUQsT0FBTzs7Y0FDQyxPQUFPLEdBQUcsSUFBSSxXQUFXLEVBQUUsQ0FBQyxHQUFHLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQztRQUM5RCxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLHFCQUFxQixDQUFDLDJCQUEyQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLHVCQUF1QixDQUFDLEVBQUUsRUFBRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDcEksR0FBRzs7OztRQUFDLFdBQVcsQ0FBQyxFQUFFO1lBQ2hCLE9BQU8sSUFBSSxjQUFjLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxFQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7OztZQWZGLFVBQVU7Ozs7WUFOSCxVQUFVO1lBQ1YsUUFBUTs7OztJQVFkLCtDQUEyRDs7Ozs7SUFFL0MsNEJBQXdCOzs7OztJQUFFLGdDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1Jlc29sdmV9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5pbXBvcnQge0h0dHBDbGllbnQsIEh0dHBIZWFkZXJzfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge0xvY2F0aW9ufSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtUY0NvcmVDb21tb25GdW5jdGlvbnN9IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtDdXN0b21Gb3JtRGVmc30gZnJvbSAnLi4vbW9kZWxzL3RjLWN1c3RvbS1mb3Jtcyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBGb3JtUmVzb2x2ZXIgaW1wbGVtZW50cyBSZXNvbHZlPE9ic2VydmFibGU8Q3VzdG9tRm9ybURlZnM+PiB7XG5cbiAgQ1VTVE9NX0ZPUk1TX0NPTkZJR19VUkwgPSAnYXNzZXRzL2NvbmZpZy9jdXN0b21Gb3Jtcy5qc29uJztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgbG9jYXRpb246IExvY2F0aW9uKSB7XG4gIH1cblxuICByZXNvbHZlKCk6IE9ic2VydmFibGU8Q3VzdG9tRm9ybURlZnM+IHtcbiAgICBjb25zdCBoZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCkuc2V0KCdjYWNoZVJlc3BvbnNlJywgJ3RydWUnKTtcbiAgICByZXR1cm4gdGhpcy5odHRwLmdldChUY0NvcmVDb21tb25GdW5jdGlvbnMucHJlcGFyZVVybEZvclN0YXRpY1Jlc291cmNlKHRoaXMubG9jYXRpb24sIHRoaXMuQ1VTVE9NX0ZPUk1TX0NPTkZJR19VUkwpLCB7IGhlYWRlcnMgfSkucGlwZShcbiAgICAgIG1hcChmb3Jtc0NvbmZpZyA9PiB7XG4gICAgICAgIHJldHVybiBuZXcgQ3VzdG9tRm9ybURlZnMoKS5kZXNlcmlhbGl6ZShmb3Jtc0NvbmZpZyk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxufVxuIl19