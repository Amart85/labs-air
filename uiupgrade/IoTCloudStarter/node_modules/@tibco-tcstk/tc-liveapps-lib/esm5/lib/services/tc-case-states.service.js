/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { forkJoin } from 'rxjs';
import { LiveAppsService } from './live-apps.service';
import { TcCaseDataService } from './tc-case-data.service';
import { map, tap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { StateTrackerData, StateTracker, TrackerState, StateAuditEventList } from '../models/tc-case-states';
import { DomSanitizer } from '@angular/platform-browser';
import { Location } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./live-apps.service";
import * as i3 from "./tc-case-data.service";
import * as i4 from "@angular/platform-browser";
import * as i5 from "@angular/common";
/** @type {?} */
var MILESTONE_SVG = {
    END_SECTION_COMPLETED_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z"/>\n' +
        '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>\n',
    END_SECTION_INPROGESS_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z"/>\n' +
        '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>\n',
    END_SECTION_PENDING_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z"/>\n' +
        '    <text class="pending-text" fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>\n',
    FIRST_SECTION_COMPLETED_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
        '<path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z"/>\n' +
        '<text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '    <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '</text>\n' +
        '</svg>\n',
    FIRST_SECTION_INPROGRESS_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z"/>\n' +
        '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>',
    FIRST_SECTION_PENDING_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z"/>\n' +
        '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>\n',
    MIDDLE_SECTION_COMPLETED_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="164" height="36" viewBox="0 0 164 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z"/>\n' +
        '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>\n',
    MIDDLE_SECTION_INPROGRESS_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="164" height="36" viewBox="0 0 164 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z"/>\n' +
        '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>\n',
    MIDDLE_SECTION_PENDING_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="164" height="36" viewBox="0 0 164 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z"/>\n' +
        '    <text class="pending-text" fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>\n'
};
var TcCaseStatesService = /** @class */ (function () {
    function TcCaseStatesService(http, liveAppsService, caseDataService, sanitizer, location) {
        var _this = this;
        this.http = http;
        this.liveAppsService = liveAppsService;
        this.caseDataService = caseDataService;
        this.sanitizer = sanitizer;
        this.location = location;
        this.getTrackerData = (/**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} appId
         * @return {?}
         */
        function (caseRef, sandboxId, appId) {
            // merge the result of these three API calls into one object
            /** @type {?} */
            var caseState$ = _this.caseDataService.getCaseState(caseRef, sandboxId);
            /** @type {?} */
            var possibleStates$ = _this.liveAppsService.getCaseTypeStates(sandboxId, appId, 100);
            /** @type {?} */
            var stateAudit$ = _this.getCaseStateAudit(caseRef, sandboxId);
            return forkJoin([caseState$, possibleStates$, stateAudit$]).pipe(map((/**
             * @param {?} resultArr
             * @return {?}
             */
            function (resultArr) {
                return new StateTrackerData().deserialize({ possibleStates: resultArr[1], currentState: resultArr[0], caseAudit: resultArr[2].auditEvents });
            })));
        });
        this.buildTracker = (/**
         * @param {?} trackerData
         * @return {?}
         */
        function (trackerData) {
            /** @type {?} */
            var tracker = new StateTracker();
            tracker.states = [];
            if (trackerData.caseAudit.length <= 0) {
                // if no audit it has likely been deleted and we cannot create a milestone trailer
                tracker.valid = false;
            }
            else {
                // work out the status of each state
                // possible states: 'pending', 'inprogress', 'completed'
                trackerData.possibleStates.states.forEach((/**
                 * @param {?} state
                 * @return {?}
                 */
                function (state) {
                    /** @type {?} */
                    var stateLabel = state.label;
                    /** @type {?} */
                    var stateName = state.value;
                    /** @type {?} */
                    var trackerState = new TrackerState();
                    trackerState.phase = '';
                    trackerState.previousPhase = '';
                    // no specific name coming from API so use label.
                    trackerState.name = state.label;
                    trackerState.label = state.label;
                    trackerState.isTerminal = state.isTerminal ? state.isTerminal : false;
                    // find last event for this state
                    /** @type {?} */
                    var reversedEvents = [];
                    Object.assign(reversedEvents, trackerData.caseAudit);
                    reversedEvents.reverse();
                    /** @type {?} */
                    var idx = reversedEvents.findIndex((/**
                     * @param {?} auditEvent
                     * @return {?}
                     */
                    function (auditEvent) { return auditEvent.caseState.value === state.value; }));
                    /** @type {?} */
                    var origIdx = (trackerData.caseAudit.length - 1) - idx;
                    /** @type {?} */
                    var thisEvent;
                    if (idx === -1) {
                        // no audit events so we haven't reached this state yet
                        trackerState.status = 'pending';
                    }
                    else {
                        thisEvent = trackerData.caseAudit[origIdx];
                        trackerState.user = thisEvent.principalName ? thisEvent.principalName.value : 'system';
                        trackerState.changed = thisEvent.creationTime ? thisEvent.creationTime.value : '';
                        trackerState.phase = thisEvent.phaseLabel ? thisEvent.phaseLabel.value : undefined;
                        trackerState.previousPhase = thisEvent.previousPhaseLabel ? thisEvent.previousPhaseLabel.value : undefined;
                        if (state.isTerminal) {
                            // if we have audit for this state and it is terminal it must be completed
                            trackerState.status = 'completed';
                        }
                        else if ((trackerData.caseAudit.length - 1) === origIdx) {
                            // if this is the last audit entry then it is in progress
                            trackerState.status = 'inprogress';
                        }
                        else {
                            // otherwise it must be completed
                            trackerState.status = 'completed';
                        }
                    }
                    tracker.states.push(trackerState);
                    tracker.valid = true;
                }));
            }
            return tracker;
        });
        this.getTracker = (/**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} appId
         * @return {?}
         */
        function (caseRef, sandboxId, appId) {
            /** @type {?} */
            var tracker$ = _this.getTrackerData(caseRef, sandboxId, appId).pipe(map((/**
             * @param {?} trackerData
             * @return {?}
             */
            function (trackerData) {
                return _this.buildTracker(trackerData);
            })));
            return tracker$;
        });
    }
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @return {?}
     */
    TcCaseStatesService.prototype.getCaseStateAuditWithTerminal = /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @return {?}
     */
    function (caseRef, sandboxId, appId) {
        /** @type {?} */
        var possibleStates$ = this.liveAppsService.getCaseTypeStates(sandboxId, appId, 100);
        /** @type {?} */
        var caseStateAudit$ = this.getCaseStateAudit(caseRef, sandboxId);
        return forkJoin([possibleStates$, caseStateAudit$]).pipe(map((/**
         * @param {?} resultArr
         * @return {?}
         */
        function (resultArr) {
            /** @type {?} */
            var possibleStates = resultArr[0];
            /** @type {?} */
            var caseStateAudit = resultArr[1];
            // mark if any are terminal states
            caseStateAudit.auditEvents.forEach((/**
             * @param {?} auditEvent
             * @return {?}
             */
            function (auditEvent) {
                /** @type {?} */
                var foundState = possibleStates.states.find((/**
                 * @param {?} state
                 * @return {?}
                 */
                function (state) { return state.value === auditEvent.caseState.value; }));
                auditEvent.isTerminal = foundState.isTerminal ? foundState.isTerminal : false;
            }));
            return caseStateAudit;
        })));
    };
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @return {?}
     */
    TcCaseStatesService.prototype.getCaseStateAudit = /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @return {?}
     */
    function (caseRef, sandboxId) {
        /** @type {?} */
        var url = '/event/v1/auditEvents?$sandbox=' + sandboxId
            + '&$filter=type eq \'casestate\''
            + ' and id eq \'' + caseRef + '\'';
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} caseaudit
         * @return {?}
         */
        function (caseaudit) { return new StateAuditEventList().deserialize(caseaudit); })));
    };
    /**
     * @param {?} stateLabel
     * @param {?} labelClass
     * @param {?} bgClass
     * @param {?} svgFileName
     * @return {?}
     */
    TcCaseStatesService.prototype.getMilestoneSectionSvg = /**
     * @param {?} stateLabel
     * @param {?} labelClass
     * @param {?} bgClass
     * @param {?} svgFileName
     * @return {?}
     */
    function (stateLabel, labelClass, bgClass, svgFileName) {
        /*return this.liveAppsService.getIconSVGText(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/icons/milestones/' + svgFileName)).pipe(
          map(svgcontents => {
            let updatedsvg = svgcontents.replace('{{milestoneLabel}}', stateLabel);
            updatedsvg = updatedsvg.replace('{{milestoneBgClass}}', bgClass);
            updatedsvg = updatedsvg.replace('{{milestoneLabelClass}}', labelClass);
            const newval = this.sanitizer.bypassSecurityTrustHtml(updatedsvg);
            return newval;
          })
        );*/
        // convert svgFileName to the inline property name
        svgFileName = svgFileName.toUpperCase();
        /** @type {?} */
        var regEx = /-|\./gi;
        svgFileName = svgFileName.replace(regEx, '_');
        /** @type {?} */
        var svgcontents = MILESTONE_SVG[svgFileName];
        if (svgcontents) {
            /** @type {?} */
            var updatedsvg = svgcontents.replace('{{milestoneLabel}}', stateLabel);
            updatedsvg = updatedsvg.replace('{{milestoneBgClass}}', bgClass);
            updatedsvg = updatedsvg.replace('{{milestoneLabelClass}}', labelClass);
            /** @type {?} */
            var newval = this.sanitizer.bypassSecurityTrustHtml(updatedsvg);
            return newval;
        }
        else {
            return undefined;
        }
    };
    TcCaseStatesService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TcCaseStatesService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: LiveAppsService },
        { type: TcCaseDataService },
        { type: DomSanitizer },
        { type: Location }
    ]; };
    /** @nocollapse */ TcCaseStatesService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcCaseStatesService_Factory() { return new TcCaseStatesService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LiveAppsService), i0.ɵɵinject(i3.TcCaseDataService), i0.ɵɵinject(i4.DomSanitizer), i0.ɵɵinject(i5.Location)); }, token: TcCaseStatesService, providedIn: "root" });
    return TcCaseStatesService;
}());
export { TcCaseStatesService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcCaseStatesService.prototype.getTrackerData;
    /**
     * @type {?}
     * @private
     */
    TcCaseStatesService.prototype.buildTracker;
    /** @type {?} */
    TcCaseStatesService.prototype.getTracker;
    /**
     * @type {?}
     * @private
     */
    TcCaseStatesService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TcCaseStatesService.prototype.liveAppsService;
    /**
     * @type {?}
     * @private
     */
    TcCaseStatesService.prototype.caseDataService;
    /**
     * @type {?}
     * @private
     */
    TcCaseStatesService.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    TcCaseStatesService.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtY2FzZS1zdGF0ZXMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1saXZlYXBwcy1saWIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvdGMtY2FzZS1zdGF0ZXMuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUMsUUFBUSxFQUFhLE1BQU0sTUFBTSxDQUFDO0FBQzFDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxxQkFBcUIsQ0FBQztBQUNwRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx3QkFBd0IsQ0FBQztBQUN6RCxPQUFPLEVBQUMsR0FBRyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ3hDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUNoRCxPQUFPLEVBQUMsZ0JBQWdCLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxtQkFBbUIsRUFBa0IsTUFBTSwwQkFBMEIsQ0FBQztBQUM1SCxPQUFPLEVBQUMsWUFBWSxFQUFXLE1BQU0sMkJBQTJCLENBQUM7QUFDakUsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7OztJQUduQyxhQUFhLEdBQUc7SUFDcEIseUJBQXlCLEVBQUUsdUZBQXVGO1FBQ2xILG9NQUFvTTtRQUNwTSw4RkFBOEY7UUFDOUYsMkZBQTJGO1FBQzNGLGVBQWU7UUFDZixVQUFVO0lBQ1YseUJBQXlCLEVBQUUsdUZBQXVGO1FBQ2xILG9NQUFvTTtRQUNwTSw4RkFBOEY7UUFDOUYsMkZBQTJGO1FBQzNGLGVBQWU7UUFDZixVQUFVO0lBQ1YsdUJBQXVCLEVBQUUsdUZBQXVGO1FBQ2hILG9NQUFvTTtRQUNwTSxtSEFBbUg7UUFDbkgsMkZBQTJGO1FBQzNGLGVBQWU7UUFDZixVQUFVO0lBQ1YsMkJBQTJCLEVBQUUs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Q25COzs7O2dCQWpFTyxVQUFVO2dCQUhWLGVBQWU7Z0JBQ2YsaUJBQWlCO2dCQUlqQixZQUFZO2dCQUNaLFFBQVE7Ozs4QkFSaEI7Q0FpTkMsQUE3SUQsSUE2SUM7U0ExSVksbUJBQW1COzs7Ozs7SUFROUIsNkNBWUM7Ozs7O0lBRUQsMkNBbURDOztJQUVELHlDQU9DOzs7OztJQWhGVyxtQ0FBd0I7Ozs7O0lBQ3hCLDhDQUF3Qzs7Ozs7SUFDeEMsOENBQTBDOzs7OztJQUMxQyx3Q0FBK0I7Ozs7O0lBQy9CLHVDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Zm9ya0pvaW4sIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtMaXZlQXBwc1NlcnZpY2V9IGZyb20gJy4vbGl2ZS1hcHBzLnNlcnZpY2UnO1xuaW1wb3J0IHtUY0Nhc2VEYXRhU2VydmljZX0gZnJvbSAnLi90Yy1jYXNlLWRhdGEuc2VydmljZSc7XG5pbXBvcnQge21hcCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7U3RhdGVUcmFja2VyRGF0YSwgU3RhdGVUcmFja2VyLCBUcmFja2VyU3RhdGUsIFN0YXRlQXVkaXRFdmVudExpc3QsIFN0YXRlQXVkaXRFdmVudH0gZnJvbSAnLi4vbW9kZWxzL3RjLWNhc2Utc3RhdGVzJztcbmltcG9ydCB7RG9tU2FuaXRpemVyLCBTYWZlSHRtbH0gZnJvbSAnQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3Nlcic7XG5pbXBvcnQge0xvY2F0aW9ufSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtUY0NvcmVDb21tb25GdW5jdGlvbnN9IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5cbmNvbnN0IE1JTEVTVE9ORV9TVkcgPSB7XG4gIEVORF9TRUNUSU9OX0NPTVBMRVRFRF9TVkc6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjk0XCIgaGVpZ2h0PVwiMzZcIiB2aWV3Qm94PVwiMCAwIDk0IDM2XCI+XFxuJyArXG4gICcgICAgPHBhdGggY2xhc3M9XCJ7e21pbGVzdG9uZUJnQ2xhc3N9fVwiIGZpbGw9XCJub25lXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNMCAwaDc2YzkuOTQxIDAgMTggOC4wNTkgMTggMThzLTguMDU5IDE4LTE4IDE4SDBjNi4wOTUtMy42NzUgMTAuMTcyLTEwLjM2MSAxMC4xNzItMThDMTAuMTcyIDEwLjM2MSA2LjA5NSAzLjY3NSAwIDB6XCIvPlxcbicgK1xuICAnICAgIDx0ZXh0IGZpbGw9XCIjRkZGXCIgZm9udC1mYW1pbHk9XCJTb3VyY2VTYW5zUHJvLVJlZ3VsYXIsIFNvdXJjZSBTYW5zIFByb1wiIGZvbnQtc2l6ZT1cIjE0XCI+XFxuJyArXG4gICcgICAgICAgIDx0c3BhbiB4PVwiMTZcIiB5PVwiMjNcIiBjbGFzcz1cInt7bWlsZXN0b25lTGFiZWxDbGFzc319XCI+e3ttaWxlc3RvbmVMYWJlbH19PC90c3Bhbj5cXG4nICtcbiAgJyAgICA8L3RleHQ+XFxuJyArXG4gICc8L3N2Zz5cXG4nLFxuICBFTkRfU0VDVElPTl9JTlBST0dFU1NfU1ZHOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCI5NFwiIGhlaWdodD1cIjM2XCIgdmlld0JveD1cIjAgMCA5NCAzNlwiPlxcbicgK1xuICAnICAgIDxwYXRoIGNsYXNzPVwie3ttaWxlc3RvbmVCZ0NsYXNzfX1cIiBmaWxsPVwibm9uZVwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTAgMGg3NmM5Ljk0MSAwIDE4IDguMDU5IDE4IDE4cy04LjA1OSAxOC0xOCAxOEgwYzYuMDk1LTMuNjc1IDEwLjE3Mi0xMC4zNjEgMTAuMTcyLTE4QzEwLjE3MiAxMC4zNjEgNi4wOTUgMy42NzUgMCAwelwiLz5cXG4nICtcbiAgJyAgICA8dGV4dCBmaWxsPVwiI0ZGRlwiIGZvbnQtZmFtaWx5PVwiU291cmNlU2Fuc1Byby1SZWd1bGFyLCBTb3VyY2UgU2FucyBQcm9cIiBmb250LXNpemU9XCIxNFwiPlxcbicgK1xuICAnICAgICAgICA8dHNwYW4geD1cIjE2XCIgeT1cIjIzXCIgY2xhc3M9XCJ7e21pbGVzdG9uZUxhYmVsQ2xhc3N9fVwiPnt7bWlsZXN0b25lTGFiZWx9fTwvdHNwYW4+XFxuJyArXG4gICcgICAgPC90ZXh0PlxcbicgK1xuICAnPC9zdmc+XFxuJyxcbiAgRU5EX1NFQ1RJT05fUEVORElOR19TVkc6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjk0XCIgaGVpZ2h0PVwiMzZcIiB2aWV3Qm94PVwiMCAwIDk0IDM2XCI+XFxuJyArXG4gICcgICAgPHBhdGggY2xhc3M9XCJ7e21pbGVzdG9uZUJnQ2xhc3N9fVwiIGZpbGw9XCJub25lXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNMCAwaDc2YzkuOTQxIDAgMTggOC4wNTkgMTggMThzLTguMDU5IDE4LTE4IDE4SDBjNi4wOTUtMy42NzUgMTAuMTcyLTEwLjM2MSAxMC4xNzItMThDMTAuMTcyIDEwLjM2MSA2LjA5NSAzLjY3NSAwIDB6XCIvPlxcbicgK1xuICAnICAgIDx0ZXh0IGNsYXNzPVwicGVuZGluZy10ZXh0XCIgZmlsbD1cIiNGRkZcIiBmb250LWZhbWlseT1cIlNvdXJjZVNhbnNQcm8tUmVndWxhciwgU291cmNlIFNhbnMgUHJvXCIgZm9udC1zaXplPVwiMTRcIj5cXG4nICtcbiAgJyAgICAgICAgPHRzcGFuIHg9XCIxNlwiIHk9XCIyM1wiIGNsYXNzPVwie3ttaWxlc3RvbmVMYWJlbENsYXNzfX1cIj57e21pbGVzdG9uZUxhYmVsfX08L3RzcGFuPlxcbicgK1xuICAnICAgIDwvdGV4dD5cXG4nICtcbiAgJzwvc3ZnPlxcbicsXG4gIEZJUlNUX1NFQ1RJT05fQ09NUExFVEVEX1NWRzogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiOTRcIiBoZWlnaHQ9XCIzNlwiIHZpZXdCb3g9XCIwIDAgOTQgMzZcIj5cXG4nICtcbiAgJzxwYXRoIGNsYXNzPVwie3ttaWxlc3RvbmVCZ0NsYXNzfX1cIiBmaWxsPVwibm9uZVwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTkzLjQyIDBDODcuMTc2IDMuNjc1IDgzIDEwLjM2MSA4MyAxOGMwIDcuNjM5IDQuMTc2IDE0LjMyNSAxMC40MiAxOEgwYzYuMzYtMy42NzUgMTAuNjE0LTEwLjM2MSAxMC42MTQtMThDMTAuNjE0IDEwLjM2MSA2LjM2IDMuNjc1IDAgMGg5My40MnpcIi8+XFxuJyArXG4gICc8dGV4dCBmaWxsPVwiI0ZGRlwiIGZvbnQtZmFtaWx5PVwiU291cmNlU2Fuc1Byby1SZWd1bGFyLCBTb3VyY2UgU2FucyBQcm9cIiBmb250LXNpemU9XCIxNFwiPlxcbicgK1xuICAnICAgIDx0c3BhbiB4PVwiMTZcIiB5PVwiMjNcIiBjbGFzcz1cInt7bWlsZXN0b25lTGFiZWxDbGFzc319XCI+e3ttaWxlc3RvbmVMYWJlbH19PC90c3Bhbj5cXG4nICtcbiAgJzwvdGV4dD5cXG4nICtcbiAgJzwvc3ZnPlxcbicsXG4gIEZJUlNUX1NFQ1RJT05fSU5QUk9HUkVTU19TVkc6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjk0XCIgaGVpZ2h0PVwiMzZcIiB2aWV3Qm94PVwiMCAwIDk0IDM2XCI+XFxuJyArXG4gICcgICAgPHBhdGggY2xhc3M9XCJ7e21pbGVzdG9uZUJnQ2xhc3N9fVwiIGZpbGw9XCJub25lXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNOTMuNDIgMEM4Ny4xNzYgMy42NzUgODMgMTAuMzYxIDgzIDE4YzAgNy42MzkgNC4xNzYgMTQuMzI1IDEwLjQyIDE4SDBjNi4zNi0zLjY3NSAxMC42MTQtMTAuMzYxIDEwLjYxNC0xOEMxMC42MTQgMTAuMzYxIDYuMzYgMy42NzUgMCAwaDkzLjQyelwiLz5cXG4nICtcbiAgJyAgICA8dGV4dCBmaWxsPVwiI0ZGRlwiIGZvbnQtZmFtaWx5PVwiU291cmNlU2Fuc1Byby1SZWd1bGFyLCBTb3VyY2UgU2FucyBQcm9cIiBmb250LXNpemU9XCIxNFwiPlxcbicgK1xuICAnICAgICAgICA8dHNwYW4geD1cIjE2XCIgeT1cIjIzXCIgY2xhc3M9XCJ7e21pbGVzdG9uZUxhYmVsQ2xhc3N9fVwiPnt7bWlsZXN0b25lTGFiZWx9fTwvdHNwYW4+XFxuJyArXG4gICcgICAgPC90ZXh0PlxcbicgK1xuICAnPC9zdmc+JyxcbiAgRklSU1RfU0VDVElPTl9QRU5ESU5HX1NWRzogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiOTRcIiBoZWlnaHQ9XCIzNlwiIHZpZXdCb3g9XCIwIDAgOTQgMzZcIj5cXG4nICtcbiAgJyAgICA8cGF0aCBjbGFzcz1cInt7bWlsZXN0b25lQmdDbGFzc319XCIgZmlsbD1cIm5vbmVcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgZD1cIk05My40MiAwQzg3LjE3NiAzLjY3NSA4MyAxMC4zNjEgODMgMThjMCA3LjYzOSA0LjE3NiAxNC4zMjUgMTAuNDIgMThIMGM2LjM2LTMuNjc1IDEwLjYxNC0xMC4zNjEgMTAuNjE0LTE4QzEwLjYxNCAxMC4zNjEgNi4zNiAzLjY3NSAwIDBoOTMuNDJ6XCIvPlxcbicgK1xuICAnICAgIDx0ZXh0IGZpbGw9XCIjRkZGXCIgZm9udC1mYW1pbHk9XCJTb3VyY2VTYW5zUHJvLVJlZ3VsYXIsIFNvdXJjZSBTYW5zIFByb1wiIGZvbnQtc2l6ZT1cIjE0XCI+XFxuJyArXG4gICcgICAgICAgIDx0c3BhbiB4PVwiMTZcIiB5PVwiMjNcIiBjbGFzcz1cInt7bWlsZXN0b25lTGFiZWxDbGFzc319XCI+e3ttaWxlc3RvbmVMYWJlbH19PC90c3Bhbj5cXG4nICtcbiAgJyAgICA8L3RleHQ+XFxuJyArXG4gICc8L3N2Zz5cXG4nLFxuICBNSURETEVfU0VDVElPTl9DT01QTEVURURfU1ZHOiAnPHN2ZyB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCIgd2lkdGg9XCIxNjRcIiBoZWlnaHQ9XCIzNlwiIHZpZXdCb3g9XCIwIDAgMTY0IDM2XCI+XFxuJyArXG4gICcgICAgPHBhdGggY2xhc3M9XCJ7e21pbGVzdG9uZUJnQ2xhc3N9fVwiIGZpbGw9XCJub25lXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiIGQ9XCJNMTY0IDBjLTYuMDkgMy42NzUtMTAuMTYzIDEwLjM2MS0xMC4xNjMgMTggMCA3LjYzOSA0LjA3MyAxNC4zMjUgMTAuMTYzIDE4SDBjNi4wOTUtMy42NzUgMTAuMTcyLTEwLjM2MSAxMC4xNzItMThDMTAuMTcyIDEwLjM2MSA2LjA5NSAzLjY3NSAwIDBoMTY0elwiLz5cXG4nICtcbiAgJyAgICA8dGV4dCBmaWxsPVwiI0ZGRlwiIGZvbnQtZmFtaWx5PVwiU291cmNlU2Fuc1Byby1SZWd1bGFyLCBTb3VyY2UgU2FucyBQcm9cIiBmb250LXNpemU9XCIxNFwiPlxcbicgK1xuICAnICAgICAgICA8dHNwYW4geD1cIjE2XCIgeT1cIjIzXCIgY2xhc3M9XCJ7e21pbGVzdG9uZUxhYmVsQ2xhc3N9fVwiPnt7bWlsZXN0b25lTGFiZWx9fTwvdHNwYW4+XFxuJyArXG4gICcgICAgPC90ZXh0PlxcbicgK1xuICAnPC9zdmc+XFxuJyxcbiAgTUlERExFX1NFQ1RJT05fSU5QUk9HUkVTU19TVkc6ICc8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIiB3aWR0aD1cIjE2NFwiIGhlaWdodD1cIjM2XCIgdmlld0JveD1cIjAgMCAxNjQgMzZcIj5cXG4nICtcbiAgJyAgICA8cGF0aCBjbGFzcz1cInt7bWlsZXN0b25lQmdDbGFzc319XCIgZmlsbD1cIm5vbmVcIiBmaWxsLXJ1bGU9XCJldmVub2RkXCIgZD1cIk0xNjQgMGMtNi4wOSAzLjY3NS0xMC4xNjMgMTAuMzYxLTEwLjE2MyAxOCAwIDcuNjM5IDQuMDczIDE0LjMyNSAxMC4xNjMgMThIMGM2LjA5NS0zLjY3NSAxMC4xNzItMTAuMzYxIDEwLjE3Mi0xOEMxMC4xNzIgMTAuMzYxIDYuMDk1IDMuNjc1IDAgMGgxNjR6XCIvPlxcbicgK1xuICAnICAgIDx0ZXh0IGZpbGw9XCIjRkZGXCIgZm9udC1mYW1pbHk9XCJTb3VyY2VTYW5zUHJvLVJlZ3VsYXIsIFNvdXJjZSBTYW5zIFByb1wiIGZvbnQtc2l6ZT1cIjE0XCI+XFxuJyArXG4gICcgICAgICAgIDx0c3BhbiB4PVwiMTZcIiB5PVwiMjNcIiBjbGFzcz1cInt7bWlsZXN0b25lTGFiZWxDbGFzc319XCI+e3ttaWxlc3RvbmVMYWJlbH19PC90c3Bhbj5cXG4nICtcbiAgJyAgICA8L3RleHQ+XFxuJyArXG4gICc8L3N2Zz5cXG4nLFxuICBNSURETEVfU0VDVElPTl9QRU5ESU5HX1NWRzogJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHdpZHRoPVwiMTY0XCIgaGVpZ2h0PVwiMzZcIiB2aWV3Qm94PVwiMCAwIDE2NCAzNlwiPlxcbicgK1xuICAnICAgIDxwYXRoIGNsYXNzPVwie3ttaWxlc3RvbmVCZ0NsYXNzfX1cIiBmaWxsPVwibm9uZVwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIiBkPVwiTTE2NCAwYy02LjA5IDMuNjc1LTEwLjE2MyAxMC4zNjEtMTAuMTYzIDE4IDAgNy42MzkgNC4wNzMgMTQuMzI1IDEwLjE2MyAxOEgwYzYuMDk1LTMuNjc1IDEwLjE3Mi0xMC4zNjEgMTAuMTcyLTE4QzEwLjE3MiAxMC4zNjEgNi4wOTUgMy42NzUgMCAwaDE2NHpcIi8+XFxuJyArXG4gICcgICAgPHRleHQgY2xhc3M9XCJwZW5kaW5nLXRleHRcIiBmaWxsPVwiI0ZGRlwiIGZvbnQtZmFtaWx5PVwiU291cmNlU2Fuc1Byby1SZWd1bGFyLCBTb3VyY2UgU2FucyBQcm9cIiBmb250LXNpemU9XCIxNFwiPlxcbicgK1xuICAnICAgICAgICA8dHNwYW4geD1cIjE2XCIgeT1cIjIzXCIgY2xhc3M9XCJ7e21pbGVzdG9uZUxhYmVsQ2xhc3N9fVwiPnt7bWlsZXN0b25lTGFiZWx9fTwvdHNwYW4+XFxuJyArXG4gICcgICAgPC90ZXh0PlxcbicgK1xuICAnPC9zdmc+XFxuJ1xufVxuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUY0Nhc2VTdGF0ZXNTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsXG4gICAgICAgICAgICAgIHByaXZhdGUgbGl2ZUFwcHNTZXJ2aWNlOiBMaXZlQXBwc1NlcnZpY2UsXG4gICAgICAgICAgICAgIHByaXZhdGUgY2FzZURhdGFTZXJ2aWNlOiBUY0Nhc2VEYXRhU2VydmljZSxcbiAgICAgICAgICAgICAgcHJpdmF0ZSBzYW5pdGl6ZXI6IERvbVNhbml0aXplcixcbiAgICAgICAgICAgICAgcHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb24pIHsgfVxuXG4gIHByaXZhdGUgZ2V0VHJhY2tlckRhdGEgPSAoY2FzZVJlZjogc3RyaW5nLCBzYW5kYm94SWQ6IG51bWJlciwgYXBwSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8U3RhdGVUcmFja2VyRGF0YT4gPT4ge1xuICAgIC8vIG1lcmdlIHRoZSByZXN1bHQgb2YgdGhlc2UgdGhyZWUgQVBJIGNhbGxzIGludG8gb25lIG9iamVjdFxuICAgIGNvbnN0IGNhc2VTdGF0ZSQgPSB0aGlzLmNhc2VEYXRhU2VydmljZS5nZXRDYXNlU3RhdGUoY2FzZVJlZiwgc2FuZGJveElkKTtcbiAgICBjb25zdCBwb3NzaWJsZVN0YXRlcyQgPSB0aGlzLmxpdmVBcHBzU2VydmljZS5nZXRDYXNlVHlwZVN0YXRlcyhzYW5kYm94SWQsIGFwcElkLCAxMDApO1xuICAgIGNvbnN0IHN0YXRlQXVkaXQkID0gdGhpcy5nZXRDYXNlU3RhdGVBdWRpdChjYXNlUmVmLCBzYW5kYm94SWQpO1xuICAgIHJldHVybiBmb3JrSm9pbihbY2FzZVN0YXRlJCwgcG9zc2libGVTdGF0ZXMkLCBzdGF0ZUF1ZGl0JF0pLnBpcGUoXG4gICAgICBtYXAocmVzdWx0QXJyID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBTdGF0ZVRyYWNrZXJEYXRhKCkuZGVzZXJpYWxpemUoXG4gICAgICAgICAgeyBwb3NzaWJsZVN0YXRlczogcmVzdWx0QXJyWzFdLCBjdXJyZW50U3RhdGU6IHJlc3VsdEFyclswXSwgY2FzZUF1ZGl0OiByZXN1bHRBcnJbMl0uYXVkaXRFdmVudHMgfVxuICAgICAgICAgICk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGJ1aWxkVHJhY2tlciA9ICh0cmFja2VyRGF0YTogU3RhdGVUcmFja2VyRGF0YSk6IFN0YXRlVHJhY2tlciA9PiB7XG4gICAgY29uc3QgdHJhY2tlciA9IG5ldyBTdGF0ZVRyYWNrZXIoKTtcbiAgICB0cmFja2VyLnN0YXRlcyA9IFtdO1xuICAgIGlmICh0cmFja2VyRGF0YS5jYXNlQXVkaXQubGVuZ3RoIDw9IDApIHtcbiAgICAgIC8vIGlmIG5vIGF1ZGl0IGl0IGhhcyBsaWtlbHkgYmVlbiBkZWxldGVkIGFuZCB3ZSBjYW5ub3QgY3JlYXRlIGEgbWlsZXN0b25lIHRyYWlsZXJcbiAgICAgIHRyYWNrZXIudmFsaWQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gd29yayBvdXQgdGhlIHN0YXR1cyBvZiBlYWNoIHN0YXRlXG4gICAgICAvLyBwb3NzaWJsZSBzdGF0ZXM6ICdwZW5kaW5nJywgJ2lucHJvZ3Jlc3MnLCAnY29tcGxldGVkJ1xuICAgICAgdHJhY2tlckRhdGEucG9zc2libGVTdGF0ZXMuc3RhdGVzLmZvckVhY2goc3RhdGUgPT4ge1xuICAgICAgICBjb25zdCBzdGF0ZUxhYmVsID0gc3RhdGUubGFiZWw7XG4gICAgICAgIGNvbnN0IHN0YXRlTmFtZSA9IHN0YXRlLnZhbHVlO1xuICAgICAgICBjb25zdCB0cmFja2VyU3RhdGUgPSBuZXcgVHJhY2tlclN0YXRlKCk7XG4gICAgICAgIHRyYWNrZXJTdGF0ZS5waGFzZSA9ICcnO1xuICAgICAgICB0cmFja2VyU3RhdGUucHJldmlvdXNQaGFzZSA9ICcnO1xuICAgICAgICAvLyBubyBzcGVjaWZpYyBuYW1lIGNvbWluZyBmcm9tIEFQSSBzbyB1c2UgbGFiZWwuXG4gICAgICAgIHRyYWNrZXJTdGF0ZS5uYW1lID0gc3RhdGUubGFiZWw7XG4gICAgICAgIHRyYWNrZXJTdGF0ZS5sYWJlbCA9IHN0YXRlLmxhYmVsO1xuICAgICAgICB0cmFja2VyU3RhdGUuaXNUZXJtaW5hbCA9IHN0YXRlLmlzVGVybWluYWwgPyBzdGF0ZS5pc1Rlcm1pbmFsIDogZmFsc2U7XG4gICAgICAgIC8vIGZpbmQgbGFzdCBldmVudCBmb3IgdGhpcyBzdGF0ZVxuICAgICAgICBjb25zdCByZXZlcnNlZEV2ZW50cyA9IFtdO1xuICAgICAgICBPYmplY3QuYXNzaWduKHJldmVyc2VkRXZlbnRzLCB0cmFja2VyRGF0YS5jYXNlQXVkaXQpO1xuICAgICAgICByZXZlcnNlZEV2ZW50cy5yZXZlcnNlKCk7XG4gICAgICAgIGNvbnN0IGlkeCA9IHJldmVyc2VkRXZlbnRzLmZpbmRJbmRleChhdWRpdEV2ZW50ID0+IGF1ZGl0RXZlbnQuY2FzZVN0YXRlLnZhbHVlID09PSBzdGF0ZS52YWx1ZSk7XG4gICAgICAgIGNvbnN0IG9yaWdJZHggPSAodHJhY2tlckRhdGEuY2FzZUF1ZGl0Lmxlbmd0aCAtIDEpIC0gaWR4O1xuICAgICAgICBsZXQgdGhpc0V2ZW50OiBTdGF0ZUF1ZGl0RXZlbnQ7XG4gICAgICAgIGlmIChpZHggPT09IC0xKSB7XG4gICAgICAgICAgLy8gbm8gYXVkaXQgZXZlbnRzIHNvIHdlIGhhdmVuJ3QgcmVhY2hlZCB0aGlzIHN0YXRlIHlldFxuICAgICAgICAgIHRyYWNrZXJTdGF0ZS5zdGF0dXMgPSAncGVuZGluZyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpc0V2ZW50ID0gdHJhY2tlckRhdGEuY2FzZUF1ZGl0W29yaWdJZHhdO1xuICAgICAgICAgIHRyYWNrZXJTdGF0ZS51c2VyID0gdGhpc0V2ZW50LnByaW5jaXBhbE5hbWUgPyB0aGlzRXZlbnQucHJpbmNpcGFsTmFtZS52YWx1ZSA6ICdzeXN0ZW0nO1xuICAgICAgICAgIHRyYWNrZXJTdGF0ZS5jaGFuZ2VkID0gdGhpc0V2ZW50LmNyZWF0aW9uVGltZSA/IHRoaXNFdmVudC5jcmVhdGlvblRpbWUudmFsdWUgOiAnJztcbiAgICAgICAgICB0cmFja2VyU3RhdGUucGhhc2UgPSB0aGlzRXZlbnQucGhhc2VMYWJlbCA/IHRoaXNFdmVudC5waGFzZUxhYmVsLnZhbHVlIDogdW5kZWZpbmVkO1xuICAgICAgICAgIHRyYWNrZXJTdGF0ZS5wcmV2aW91c1BoYXNlID0gdGhpc0V2ZW50LnByZXZpb3VzUGhhc2VMYWJlbCA/IHRoaXNFdmVudC5wcmV2aW91c1BoYXNlTGFiZWwudmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgaWYgKHN0YXRlLmlzVGVybWluYWwpIHtcbiAgICAgICAgICAgIC8vIGlmIHdlIGhhdmUgYXVkaXQgZm9yIHRoaXMgc3RhdGUgYW5kIGl0IGlzIHRlcm1pbmFsIGl0IG11c3QgYmUgY29tcGxldGVkXG4gICAgICAgICAgICB0cmFja2VyU3RhdGUuc3RhdHVzID0gJ2NvbXBsZXRlZCc7XG4gICAgICAgICAgfSBlbHNlIGlmICgodHJhY2tlckRhdGEuY2FzZUF1ZGl0Lmxlbmd0aCAtIDEpID09PSBvcmlnSWR4KSB7XG4gICAgICAgICAgICAvLyBpZiB0aGlzIGlzIHRoZSBsYXN0IGF1ZGl0IGVudHJ5IHRoZW4gaXQgaXMgaW4gcHJvZ3Jlc3NcbiAgICAgICAgICAgIHRyYWNrZXJTdGF0ZS5zdGF0dXMgPSAnaW5wcm9ncmVzcyc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIG90aGVyd2lzZSBpdCBtdXN0IGJlIGNvbXBsZXRlZFxuICAgICAgICAgICAgdHJhY2tlclN0YXRlLnN0YXR1cyA9ICdjb21wbGV0ZWQnO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmFja2VyLnN0YXRlcy5wdXNoKHRyYWNrZXJTdGF0ZSk7XG4gICAgICAgIHRyYWNrZXIudmFsaWQgPSB0cnVlO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiB0cmFja2VyO1xuICB9XG5cbiAgcHVibGljIGdldFRyYWNrZXIgPSAoY2FzZVJlZjogc3RyaW5nLCBzYW5kYm94SWQ6IG51bWJlciwgYXBwSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8U3RhdGVUcmFja2VyPiA9PiB7XG4gICAgY29uc3QgdHJhY2tlciQgPSB0aGlzLmdldFRyYWNrZXJEYXRhKGNhc2VSZWYsIHNhbmRib3hJZCwgYXBwSWQpLnBpcGUoXG4gICAgICBtYXAodHJhY2tlckRhdGEgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5idWlsZFRyYWNrZXIodHJhY2tlckRhdGEpO1xuICAgICAgfSlcbiAgICApO1xuICAgIHJldHVybiB0cmFja2VyJDtcbiAgfVxuXG4gIHB1YmxpYyBnZXRDYXNlU3RhdGVBdWRpdFdpdGhUZXJtaW5hbChjYXNlUmVmOiBzdHJpbmcsIHNhbmRib3hJZDogbnVtYmVyLCBhcHBJZDogc3RyaW5nKTogT2JzZXJ2YWJsZTxTdGF0ZUF1ZGl0RXZlbnRMaXN0PiB7XG4gICAgY29uc3QgcG9zc2libGVTdGF0ZXMkID0gdGhpcy5saXZlQXBwc1NlcnZpY2UuZ2V0Q2FzZVR5cGVTdGF0ZXMoc2FuZGJveElkLCBhcHBJZCwgMTAwKTtcbiAgICBjb25zdCBjYXNlU3RhdGVBdWRpdCQgPSB0aGlzLmdldENhc2VTdGF0ZUF1ZGl0KGNhc2VSZWYsIHNhbmRib3hJZCk7XG4gICAgcmV0dXJuIGZvcmtKb2luKFtwb3NzaWJsZVN0YXRlcyQsIGNhc2VTdGF0ZUF1ZGl0JF0pLnBpcGUoXG4gICAgICBtYXAocmVzdWx0QXJyID0+IHtcbiAgICAgICAgY29uc3QgcG9zc2libGVTdGF0ZXMgPSByZXN1bHRBcnJbMF07XG4gICAgICAgIGNvbnN0IGNhc2VTdGF0ZUF1ZGl0ID0gcmVzdWx0QXJyWzFdO1xuICAgICAgICAvLyBtYXJrIGlmIGFueSBhcmUgdGVybWluYWwgc3RhdGVzXG4gICAgICAgIGNhc2VTdGF0ZUF1ZGl0LmF1ZGl0RXZlbnRzLmZvckVhY2goYXVkaXRFdmVudCA9PiB7XG4gICAgICAgICAgY29uc3QgZm91bmRTdGF0ZSA9IHBvc3NpYmxlU3RhdGVzLnN0YXRlcy5maW5kKHN0YXRlID0+IHN0YXRlLnZhbHVlID09PSBhdWRpdEV2ZW50LmNhc2VTdGF0ZS52YWx1ZSk7XG4gICAgICAgICAgYXVkaXRFdmVudC5pc1Rlcm1pbmFsID0gZm91bmRTdGF0ZS5pc1Rlcm1pbmFsID8gZm91bmRTdGF0ZS5pc1Rlcm1pbmFsIDogZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gY2FzZVN0YXRlQXVkaXQ7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgZ2V0Q2FzZVN0YXRlQXVkaXQoY2FzZVJlZjogc3RyaW5nLCBzYW5kYm94SWQ6IG51bWJlcik6IE9ic2VydmFibGU8U3RhdGVBdWRpdEV2ZW50TGlzdD4ge1xuXG4gICAgY29uc3QgdXJsID0gJy9ldmVudC92MS9hdWRpdEV2ZW50cz8kc2FuZGJveD0nICsgc2FuZGJveElkXG4gICAgICArICcmJGZpbHRlcj10eXBlIGVxIFxcJ2Nhc2VzdGF0ZVxcJydcbiAgICAgICsgJyBhbmQgaWQgZXEgXFwnJyArIGNhc2VSZWYgKyAnXFwnJztcblxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybClcbiAgICAgIC5waXBlKFxuICAgICAgICB0YXAoIHZhbCA9PiBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCd0Y3NUaW1lc3RhbXAnLCBEYXRlLm5vdygpLnRvU3RyaW5nKCkpKSxcbiAgICAgICAgbWFwKGNhc2VhdWRpdCA9PiBuZXcgU3RhdGVBdWRpdEV2ZW50TGlzdCgpLmRlc2VyaWFsaXplKGNhc2VhdWRpdCkpKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRNaWxlc3RvbmVTZWN0aW9uU3ZnKHN0YXRlTGFiZWw6IHN0cmluZywgbGFiZWxDbGFzczogc3RyaW5nLCBiZ0NsYXNzOiBzdHJpbmcsIHN2Z0ZpbGVOYW1lOiBzdHJpbmcpOiBTYWZlSHRtbCB7XG4gICAgLypyZXR1cm4gdGhpcy5saXZlQXBwc1NlcnZpY2UuZ2V0SWNvblNWR1RleHQoVGNDb3JlQ29tbW9uRnVuY3Rpb25zLnByZXBhcmVVcmxGb3JTdGF0aWNSZXNvdXJjZSh0aGlzLmxvY2F0aW9uLCAnYXNzZXRzL2ljb25zL21pbGVzdG9uZXMvJyArIHN2Z0ZpbGVOYW1lKSkucGlwZShcbiAgICAgIG1hcChzdmdjb250ZW50cyA9PiB7XG4gICAgICAgIGxldCB1cGRhdGVkc3ZnID0gc3ZnY29udGVudHMucmVwbGFjZSgne3ttaWxlc3RvbmVMYWJlbH19Jywgc3RhdGVMYWJlbCk7XG4gICAgICAgIHVwZGF0ZWRzdmcgPSB1cGRhdGVkc3ZnLnJlcGxhY2UoJ3t7bWlsZXN0b25lQmdDbGFzc319JywgYmdDbGFzcyk7XG4gICAgICAgIHVwZGF0ZWRzdmcgPSB1cGRhdGVkc3ZnLnJlcGxhY2UoJ3t7bWlsZXN0b25lTGFiZWxDbGFzc319JywgbGFiZWxDbGFzcyk7XG4gICAgICAgIGNvbnN0IG5ld3ZhbCA9IHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKHVwZGF0ZWRzdmcpO1xuICAgICAgICByZXR1cm4gbmV3dmFsO1xuICAgICAgfSlcbiAgICApOyovXG4gICAgLy8gY29udmVydCBzdmdGaWxlTmFtZSB0byB0aGUgaW5saW5lIHByb3BlcnR5IG5hbWVcbiAgICBzdmdGaWxlTmFtZSA9IHN2Z0ZpbGVOYW1lLnRvVXBwZXJDYXNlKCk7XG4gICAgY29uc3QgcmVnRXggPSAvLXxcXC4vZ2k7XG4gICAgc3ZnRmlsZU5hbWUgPSBzdmdGaWxlTmFtZS5yZXBsYWNlKHJlZ0V4LCAnXycpO1xuICAgIGNvbnN0IHN2Z2NvbnRlbnRzID0gTUlMRVNUT05FX1NWR1tzdmdGaWxlTmFtZV07XG4gICAgaWYgKHN2Z2NvbnRlbnRzKSB7XG4gICAgICBsZXQgdXBkYXRlZHN2ZyA9IHN2Z2NvbnRlbnRzLnJlcGxhY2UoJ3t7bWlsZXN0b25lTGFiZWx9fScsIHN0YXRlTGFiZWwpO1xuICAgICAgdXBkYXRlZHN2ZyA9IHVwZGF0ZWRzdmcucmVwbGFjZSgne3ttaWxlc3RvbmVCZ0NsYXNzfX0nLCBiZ0NsYXNzKTtcbiAgICAgIHVwZGF0ZWRzdmcgPSB1cGRhdGVkc3ZnLnJlcGxhY2UoJ3t7bWlsZXN0b25lTGFiZWxDbGFzc319JywgbGFiZWxDbGFzcyk7XG4gICAgICBjb25zdCBuZXd2YWwgPSB0aGlzLnNhbml0aXplci5ieXBhc3NTZWN1cml0eVRydXN0SHRtbCh1cGRhdGVkc3ZnKTtcbiAgICAgIHJldHVybiBuZXd2YWw7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG59XG4iXX0=