/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
var TcRolesService = /** @class */ (function () {
    function TcRolesService() {
        var _this = this;
        this.currentRole = undefined;
        this.hasRoleAccess = (/**
         * @param {?} roleReq
         * @param {?} roles
         * @return {?}
         */
        function (roleReq, roles) {
            /** @type {?} */
            var reqRole = roles.roles.find((/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                return (role.id === roleReq);
            }));
            return reqRole ? true : false;
        });
        this.hasButtonAccess = (/**
         * @param {?} buttonId
         * @param {?} access
         * @return {?}
         */
        function (buttonId, access) {
            return access.buttonIds.indexOf(buttonId) > -1;
        });
        this.amIConfigurator = (/**
         * @param {?} roles
         * @return {?}
         */
        function (roles) {
            /** @type {?} */
            var reqRole = roles.roles.find((/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                return (role.configuration === true);
            }));
            return reqRole ? true : false;
        });
        this.getCurrentRole = (/**
         * @return {?}
         */
        function () {
            return _this.currentRole;
        });
        this.setCurrentRole = (/**
         * @param {?} role
         * @return {?}
         */
        function (role) {
            _this.currentRole = role;
        });
    }
    /**
     * @param {?} roleId
     * @param {?} roles
     * @return {?}
     */
    TcRolesService.prototype.checkRole = /**
     * @param {?} roleId
     * @param {?} roles
     * @return {?}
     */
    function (roleId, roles) {
        return this.hasRoleAccess(roleId, roles);
    };
    /**
     * @param {?} buttonId
     * @param {?} access
     * @return {?}
     */
    TcRolesService.prototype.checkButton = /**
     * @param {?} buttonId
     * @param {?} access
     * @return {?}
     */
    function (buttonId, access) {
        return this.hasButtonAccess(buttonId, access);
    };
    TcRolesService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TcRolesService.ctorParameters = function () { return []; };
    /** @nocollapse */ TcRolesService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcRolesService_Factory() { return new TcRolesService(); }, token: TcRolesService, providedIn: "root" });
    return TcRolesService;
}());
export { TcRolesService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcRolesService.prototype.currentRole;
    /**
     * @type {?}
     * @private
     */
    TcRolesService.prototype.hasRoleAccess;
    /**
     * @type {?}
     * @private
     */
    TcRolesService.prototype.hasButtonAccess;
    /** @type {?} */
    TcRolesService.prototype.amIConfigurator;
    /** @type {?} */
    TcRolesService.prototype.getCurrentRole;
    /** @type {?} */
    TcRolesService.prototype.setCurrentRole;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtcm9sZXMtc2VydmljZS50cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90Yy1yb2xlcy1zZXJ2aWNlLnRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBSTNDO0lBS0k7UUFBQSxpQkFBaUI7UUFFVCxnQkFBVyxHQUFHLFNBQVMsQ0FBQztRQUV4QixrQkFBYTs7Ozs7UUFBRyxVQUFDLE9BQWUsRUFBRSxLQUFZOztnQkFDNUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSTs7OztZQUFDLFVBQUEsSUFBSTtnQkFDakMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssT0FBTyxDQUFDLENBQUM7WUFDakMsQ0FBQyxFQUFDO1lBQ0YsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ2xDLENBQUMsRUFBQTtRQUVPLG9CQUFlOzs7OztRQUFHLFVBQUMsUUFBZ0IsRUFBRSxNQUE4QztZQUN6RixPQUFPLE1BQU0sQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQ2pELENBQUMsRUFBQTtRQVVELG9CQUFlOzs7O1FBQUcsVUFBQyxLQUFZOztnQkFDckIsT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSTs7OztZQUFDLFVBQUEsSUFBSTtnQkFDakMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLEtBQUssSUFBSSxDQUFDLENBQUM7WUFDekMsQ0FBQyxFQUFDO1lBQ0YsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO1FBQ2xDLENBQUMsRUFBQTtRQUNELG1CQUFjOzs7UUFBRztZQUNiLE9BQU8sS0FBSSxDQUFDLFdBQVcsQ0FBQztRQUM1QixDQUFDLEVBQUE7UUFFRCxtQkFBYzs7OztRQUFHLFVBQUMsSUFBbUI7WUFDakMsS0FBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDNUIsQ0FBQyxFQUFBO0lBbkNlLENBQUM7Ozs7OztJQWVqQixrQ0FBUzs7Ozs7SUFBVCxVQUFVLE1BQWMsRUFBRSxLQUFZO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7Ozs7O0lBRUQsb0NBQVc7Ozs7O0lBQVgsVUFBWSxRQUFnQixFQUFFLE1BQThDO1FBQ3hFLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDbEQsQ0FBQzs7Z0JBMUJKLFVBQVUsU0FBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7Ozs7O3lCQU5EO0NBNkNDLEFBekNELElBeUNDO1NBdENZLGNBQWM7Ozs7OztJQUl2QixxQ0FBZ0M7Ozs7O0lBRWhDLHVDQUtDOzs7OztJQUVELHlDQUVDOztJQVVELHlDQUtDOztJQUNELHdDQUVDOztJQUVELHdDQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtSb2xlcywgUm91dGVBY2Nlc3NDb250cm9sQ29uZmlndXJhdGlvbkVsZW1lbnR9IGZyb20gJy4uL21vZGVscy90Yy1ncm91cHMtZGF0YSc7XG5pbXBvcnQgeyBSb2xlQXR0cmlidXRlIH0gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliJztcblxuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUY1JvbGVzU2VydmljZSB7XG4gICAgXG4gICAgY29uc3RydWN0b3IoKSB7IH1cblxuICAgIHByaXZhdGUgY3VycmVudFJvbGUgPSB1bmRlZmluZWQ7XG5cbiAgICBwcml2YXRlIGhhc1JvbGVBY2Nlc3MgPSAocm9sZVJlcTogc3RyaW5nLCByb2xlczogUm9sZXMpOiBib29sZWFuID0+IHtcbiAgICAgICAgY29uc3QgcmVxUm9sZSA9IHJvbGVzLnJvbGVzLmZpbmQocm9sZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKHJvbGUuaWQgPT09IHJvbGVSZXEpO1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcmVxUm9sZSA/IHRydWUgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhc0J1dHRvbkFjY2VzcyA9IChidXR0b25JZDogc3RyaW5nLCBhY2Nlc3M6IFJvdXRlQWNjZXNzQ29udHJvbENvbmZpZ3VyYXRpb25FbGVtZW50KTogYm9vbGVhbiA9PiB7XG4gICAgICByZXR1cm4gYWNjZXNzLmJ1dHRvbklkcy5pbmRleE9mKGJ1dHRvbklkKSA+IC0xO1xuICAgIH1cblxuICAgIGNoZWNrUm9sZShyb2xlSWQ6IHN0cmluZywgcm9sZXM6IFJvbGVzKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc1JvbGVBY2Nlc3Mocm9sZUlkLCByb2xlcyk7XG4gICAgfVxuXG4gICAgY2hlY2tCdXR0b24oYnV0dG9uSWQ6IHN0cmluZywgYWNjZXNzOiBSb3V0ZUFjY2Vzc0NvbnRyb2xDb25maWd1cmF0aW9uRWxlbWVudCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNCdXR0b25BY2Nlc3MoYnV0dG9uSWQsIGFjY2Vzcyk7XG4gICAgfVxuXG4gICAgYW1JQ29uZmlndXJhdG9yID0gKHJvbGVzOiBSb2xlcyk6IGJvb2xlYW4gPT4ge1xuICAgICAgICBjb25zdCByZXFSb2xlID0gcm9sZXMucm9sZXMuZmluZChyb2xlID0+IHtcbiAgICAgICAgICAgIHJldHVybiAocm9sZS5jb25maWd1cmF0aW9uID09PSB0cnVlKTtcbiAgICAgICAgfSlcbiAgICAgICAgcmV0dXJuIHJlcVJvbGUgPyB0cnVlIDogZmFsc2U7XG4gICAgfVxuICAgIGdldEN1cnJlbnRSb2xlID0gKCk6IFJvbGVBdHRyaWJ1dGUgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50Um9sZTtcbiAgICB9XG5cbiAgICBzZXRDdXJyZW50Um9sZSA9IChyb2xlOiBSb2xlQXR0cmlidXRlKTogdm9pZCA9PiB7XG4gICAgICAgIHRoaXMuY3VycmVudFJvbGUgPSByb2xlO1xuICAgIH1cbn1cbiJdfQ==