/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { TcCoreCommonFunctions, UiAppIdConfig, } from '@tibco-tcstk/tc-core-lib';
import { map, switchMap, mergeMap, flatMap } from 'rxjs/operators';
import { RouteAccessControlConfig } from '../models/tc-groups-data';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { TcAccessControlService } from '../services/tc-access-control.service';
var AccessControlConfigurationResolver = /** @class */ (function () {
    function AccessControlConfigurationResolver(location, http, accessControlService) {
        var _this = this;
        this.location = location;
        this.http = http;
        this.accessControlService = accessControlService;
        this.DEFAULT_CONFIG_URL = 'assets/config/routeAccessControl.json';
        this.APP_ID_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/uiAppId.json');
        // can be used to load defaultAppConfig from a JSON config
        this.getDefaultAppConfig = (/**
         * @return {?}
         */
        function () {
            return _this.http.get(TcCoreCommonFunctions.prepareUrlForStaticResource(_this.location, _this.DEFAULT_CONFIG_URL));
        });
        // loads uiAppId from json file in assets (appId.json)
        this.getAppId = (/**
         * @return {?}
         */
        function () {
            return _this.http.get(_this.APP_ID_URL).pipe(map((/**
             * @param {?} uiAppId
             * @return {?}
             */
            function (uiAppId) {
                /** @type {?} */
                var uiAppIdConfig = new UiAppIdConfig().deserialize(uiAppId);
                _this.uiAppId = uiAppIdConfig.uiAppId;
                return uiAppIdConfig;
            })));
        });
    }
    /**
     * @return {?}
     */
    AccessControlConfigurationResolver.prototype.resolve = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var accessConfig$ = this.getAppId().pipe(switchMap((/**
         * @param {?} uiAppId
         * @return {?}
         */
        function (uiAppId) { return _this.accessControlService.getAccessControlConfig(uiAppId.uiAppId, true, false)
            .pipe(mergeMap((/**
         * @param {?} accessControlConfig
         * @return {?}
         */
        function (accessControlConfig) {
            if (accessControlConfig === undefined) {
                return _this.getDefaultAppConfig().pipe(flatMap((/**
                 * @param {?} config
                 * @return {?}
                 */
                function (config) {
                    _this.defaultAccessControlConfig = new RouteAccessControlConfig().deserialize(config);
                    _this.defaultAccessControlConfig.uiAppId = _this.uiAppId;
                    return _this.accessControlService.createLAccessControlConfig(_this.sandboxId, _this.uiAppId, _this.defaultAccessControlConfig)
                        .pipe(flatMap((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        /** @type {?} */
                        var newAppConfig = _this.defaultAccessControlConfig;
                        newAppConfig.id = result;
                        return _this.accessControlService.updateAccessControlConfig(_this.sandboxId, _this.uiAppId, newAppConfig, result).pipe(flatMap((
                        // trigger a read to flush the cache since we changed it
                        // trigger a read to flush the cache since we changed it
                        /**
                         * @param {?} updatedConf
                         * @return {?}
                         */
                        function (updatedConf) {
                            return _this.accessControlService.getAccessControlConfig(_this.uiAppId, true, true).pipe(map((/**
                             * @param {?} cachedConfig
                             * @return {?}
                             */
                            function (cachedConfig) {
                                return cachedConfig;
                            })));
                        })));
                        // return newAppConfig;
                    })));
                })));
            }
            else {
                return of(accessControlConfig);
            }
        }))); })));
        return accessConfig$;
    };
    AccessControlConfigurationResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AccessControlConfigurationResolver.ctorParameters = function () { return [
        { type: Location },
        { type: HttpClient },
        { type: TcAccessControlService }
    ]; };
    return AccessControlConfigurationResolver;
}());
export { AccessControlConfigurationResolver };
if (false) {
    /** @type {?} */
    AccessControlConfigurationResolver.prototype.DEFAULT_CONFIG_URL;
    /** @type {?} */
    AccessControlConfigurationResolver.prototype.APP_ID_URL;
    /**
     * @type {?}
     * @private
     */
    AccessControlConfigurationResolver.prototype.sandboxId;
    /** @type {?} */
    AccessControlConfigurationResolver.prototype.defaultAccessControlConfig;
    /**
     * @type {?}
     * @private
     */
    AccessControlConfigurationResolver.prototype.uiAppId;
    /**
     * @type {?}
     * @private
     */
    AccessControlConfigurationResolver.prototype.getDefaultAppConfig;
    /**
     * @type {?}
     * @private
     */
    AccessControlConfigurationResolver.prototype.getAppId;
    /**
     * @type {?}
     * @private
     */
    AccessControlConfigurationResolver.prototype.location;
    /**
     * @type {?}
     * @private
     */
    AccessControlConfigurationResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AccessControlConfigurationResolver.prototype.accessControlService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzQ29udHJvbENvbmZpZ3VyYXRpb24ucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL3Jlc29sdmVycy9hY2Nlc3NDb250cm9sQ29uZmlndXJhdGlvbi5yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQXdCLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUNoRCxPQUFPLEVBQzJDLHFCQUFxQixFQUFFLGFBQWEsR0FDckYsTUFBTSwwQkFBMEIsQ0FBQztBQUNsQyxPQUFPLEVBQUUsR0FBRyxFQUFFLFNBQVMsRUFBRSxRQUFRLEVBQUUsT0FBTyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkUsT0FBTyxFQUFFLHdCQUF3QixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDcEUsT0FBTyxFQUFFLFVBQVUsRUFBZSxNQUFNLHNCQUFzQixDQUFDO0FBQy9ELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUUzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUkvRTtJQVVJLDRDQUNZLFFBQWtCLEVBQ2xCLElBQWdCLEVBQ2hCLG9CQUE0QztRQUh4RCxpQkFJSztRQUhPLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQix5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXdCO1FBVnhELHVCQUFrQixHQUFHLHVDQUF1QyxDQUFDO1FBQzdELGVBQVUsR0FBRyxxQkFBcUIsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLDRCQUE0QixDQUFDLENBQUM7O1FBYXBHLHdCQUFtQjs7O1FBQUc7WUFDMUIsT0FBTyxLQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcs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Ozs7O0lBQzVELHFEQUF3Qjs7Ozs7SUFTeEIsaUVBRUM7Ozs7O0lBR0Qsc0RBU0M7Ozs7O0lBcEJHLHNEQUEwQjs7Ozs7SUFDMUIsa0RBQXdCOzs7OztJQUN4QixrRUFBb0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXNvbHZlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZvcmtKb2luLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtcbiAgICBUY1NoYXJlZFN0YXRlU2VydmljZSwgVGNHZW5lcmFsQ29uZmlnU2VydmljZSwgVGNDb3JlQ29tbW9uRnVuY3Rpb25zLCBVaUFwcElkQ29uZmlnLFxufSBmcm9tICdAdGliY28tdGNzdGsvdGMtY29yZS1saWInO1xuaW1wb3J0IHsgbWFwLCBzd2l0Y2hNYXAsIG1lcmdlTWFwLCBmbGF0TWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUm91dGVBY2Nlc3NDb250cm9sQ29uZmlnIH0gZnJvbSAnLi4vbW9kZWxzL3RjLWdyb3Vwcy1kYXRhJztcbmltcG9ydCB7IEh0dHBDbGllbnQsIEh0dHBIZWFkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgUm9sZUFjdGl2ZVJlc29sdmVyIH0gZnJvbSAnLi9yb2xlLWFjdGl2ZS5yZXNvbHZlcic7XG5pbXBvcnQgeyBUY0FjY2Vzc0NvbnRyb2xTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdGMtYWNjZXNzLWNvbnRyb2wuc2VydmljZSc7XG5pbXBvcnQgeyBMaXZlQXBwc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9saXZlLWFwcHMuc2VydmljZSc7XG5pbXBvcnQgeyBUY1JvbGVzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3RjLXJvbGVzLXNlcnZpY2UudHMuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBY2Nlc3NDb250cm9sQ29uZmlndXJhdGlvblJlc29sdmVyIGltcGxlbWVudHMgUmVzb2x2ZTxPYnNlcnZhYmxlPFJvdXRlQWNjZXNzQ29udHJvbENvbmZpZz4+IHtcblxuICAgIERFRkFVTFRfQ09ORklHX1VSTCA9ICdhc3NldHMvY29uZmlnL3JvdXRlQWNjZXNzQ29udHJvbC5qc29uJztcbiAgICBBUFBfSURfVVJMID0gVGNDb3JlQ29tbW9uRnVuY3Rpb25zLnByZXBhcmVVcmxGb3JTdGF0aWNSZXNvdXJjZSh0aGlzLmxvY2F0aW9uLCAnYXNzZXRzL2NvbmZpZy91aUFwcElkLmpzb24nKTtcblxuICAgIHByaXZhdGUgc2FuZGJveElkOiBudW1iZXI7XG4gICAgcHVibGljIGRlZmF1bHRBY2Nlc3NDb250cm9sQ29uZmlnOiBSb3V0ZUFjY2Vzc0NvbnRyb2xDb25maWc7XG4gICAgcHJpdmF0ZSB1aUFwcElkOiBzdHJpbmc7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb24sXG4gICAgICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgICAgICAgcHJpdmF0ZSBhY2Nlc3NDb250cm9sU2VydmljZTogVGNBY2Nlc3NDb250cm9sU2VydmljZVxuICAgICkgeyB9XG5cbiAgICAvLyBjYW4gYmUgdXNlZCB0byBsb2FkIGRlZmF1bHRBcHBDb25maWcgZnJvbSBhIEpTT04gY29uZmlnXG4gICAgcHJpdmF0ZSBnZXREZWZhdWx0QXBwQ29uZmlnID0gKCkgPT4ge1xuICAgICAgICByZXR1cm4gdGhpcy5odHRwLmdldChUY0NvcmVDb21tb25GdW5jdGlvbnMucHJlcGFyZVVybEZvclN0YXRpY1Jlc291cmNlKHRoaXMubG9jYXRpb24sIHRoaXMuREVGQVVMVF9DT05GSUdfVVJMKSk7XG4gICAgfVxuXG4gICAgLy8gbG9hZHMgdWlBcHBJZCBmcm9tIGpzb24gZmlsZSBpbiBhc3NldHMgKGFwcElkLmpzb24pXG4gICAgcHJpdmF0ZSBnZXRBcHBJZCA9ICgpOiBPYnNlcnZhYmxlPFVpQXBwSWRDb25maWc+ID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodGhpcy5BUFBfSURfVVJMKS5waXBlKFxuICAgICAgICAgICAgbWFwKHVpQXBwSWQgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IHVpQXBwSWRDb25maWcgPSBuZXcgVWlBcHBJZENvbmZpZygpLmRlc2VyaWFsaXplKHVpQXBwSWQpO1xuICAgICAgICAgICAgICAgIHRoaXMudWlBcHBJZCA9IHVpQXBwSWRDb25maWcudWlBcHBJZDtcbiAgICAgICAgICAgICAgICByZXR1cm4gdWlBcHBJZENvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICByZXNvbHZlKCk6IE9ic2VydmFibGU8Um91dGVBY2Nlc3NDb250cm9sQ29uZmlnPiB7XG4gICAgICAgIGNvbnN0IGFjY2Vzc0NvbmZpZyQgPSB0aGlzLmdldEFwcElkKCkucGlwZShcbiAgICAgICAgICAgIHN3aXRjaE1hcCh1aUFwcElkID0+IHRoaXMuYWNjZXNzQ29udHJvbFNlcnZpY2UuZ2V0QWNjZXNzQ29udHJvbENvbmZpZyh1aUFwcElkLnVpQXBwSWQsIHRydWUsIGZhbHNlKVxuICAgICAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgICAgICBtZXJnZU1hcChcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjY2Vzc0NvbnRyb2xDb25maWcgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY2Nlc3NDb250cm9sQ29uZmlnID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0RGVmYXVsdEFwcENvbmZpZygpLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGF0TWFwKGNvbmZpZyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0QWNjZXNzQ29udHJvbENvbmZpZyA9IG5ldyBSb3V0ZUFjY2Vzc0NvbnRyb2xDb25maWcoKS5kZXNlcmlhbGl6ZShjb25maWcpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuZGVmYXVsdEFjY2Vzc0NvbnRyb2xDb25maWcudWlBcHBJZCA9IHRoaXMudWlBcHBJZDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5hY2Nlc3NDb250cm9sU2VydmljZS5jcmVhdGVMQWNjZXNzQ29udHJvbENvbmZpZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5zYW5kYm94SWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudWlBcHBJZCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5kZWZhdWx0QWNjZXNzQ29udHJvbENvbmZpZylcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbGF0TWFwKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG5ld0FwcENvbmZpZyA9IHRoaXMuZGVmYXVsdEFjY2Vzc0NvbnRyb2xDb25maWc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld0FwcENvbmZpZy5pZCA9IHJlc3VsdDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWNjZXNzQ29udHJvbFNlcnZpY2UudXBkYXRlQWNjZXNzQ29udHJvbENvbmZpZyhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuc2FuZGJveElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy51aUFwcElkLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QXBwQ29uZmlnLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzdWx0KS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXRNYXAoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRyaWdnZXIgYSByZWFkIHRvIGZsdXNoIHRoZSBjYWNoZSBzaW5jZSB3ZSBjaGFuZ2VkIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRDb25mID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmFjY2Vzc0NvbnRyb2xTZXJ2aWNlLmdldEFjY2Vzc0NvbnRyb2xDb25maWcodGhpcy51aUFwcElkLCB0cnVlLCB0cnVlKS5waXBlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FjaGVkQ29uZmlnID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYWNoZWRDb25maWc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyByZXR1cm4gbmV3QXBwQ29uZmlnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvZihhY2Nlc3NDb250cm9sQ29uZmlnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICApXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuIGFjY2Vzc0NvbmZpZyQ7XG4gICAgfVxuXG59Il19