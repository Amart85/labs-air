/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { of } from 'rxjs';
import { LiveAppsService } from '../services/live-apps.service';
import { TcGeneralConfigService, TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { map } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { TcRolesService } from '../services/tc-roles-service.ts.service';
import { RolesResolver } from './roles.resolver';
var RoleActiveResolver = /** @class */ (function () {
    function RoleActiveResolver(rolesService, liveAppsService, tcSharedStateService, generalConfigService, httpClient, location, router) {
        this.rolesService = rolesService;
        this.liveAppsService = liveAppsService;
        this.tcSharedStateService = tcSharedStateService;
        this.generalConfigService = generalConfigService;
        this.httpClient = httpClient;
        this.location = location;
        this.router = router;
    }
    /**
     * @return {?}
     */
    RoleActiveResolver.prototype.resolve = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var currentRole = this.rolesService.getCurrentRole();
        if (currentRole === undefined) {
            /** @type {?} */
            var roleResolver$ = new RolesResolver(this.tcSharedStateService, this.generalConfigService, this.httpClient, this.liveAppsService, this.location, this.router);
            return roleResolver$.resolve().pipe(map((/**
             * @param {?} roles
             * @return {?}
             */
            function (roles) {
                /** @type {?} */
                var highestRole = roles.roles.reduce((/**
                 * @param {?} prev
                 * @param {?} current
                 * @return {?}
                 */
                function (prev, current) {
                    return (prev.priority > current.priority) ? prev : current;
                }));
                _this.rolesService.setCurrentRole(highestRole);
                return highestRole;
            })));
        }
        else {
            return of(currentRole);
        }
    };
    RoleActiveResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RoleActiveResolver.ctorParameters = function () { return [
        { type: TcRolesService },
        { type: LiveAppsService },
        { type: TcSharedStateService },
        { type: TcGeneralConfigService },
        { type: HttpClient },
        { type: Location },
        { type: Router }
    ]; };
    return RoleActiveResolver;
}());
export { RoleActiveResolver };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.rolesService;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.liveAppsService;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.tcSharedStateService;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.location;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZS1hY3RpdmUucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL3Jlc29sdmVycy9yb2xlLWFjdGl2ZS5yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQVUsTUFBTSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFpQixzQkFBc0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUN6RSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFFL0M7SUFHSSw0QkFDWSxZQUE0QixFQUM1QixlQUFnQyxFQUNoQyxvQkFBMEMsRUFDMUMsb0JBQTRDLEVBQzVDLFVBQXNCLEVBQ3RCLFFBQWtCLEVBQ2xCLE1BQWM7UUFOZCxpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFDNUIsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUF3QjtRQUM1QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUMxQixDQUFDOzs7O0lBRUQsb0NBQU87OztJQUFQO1FBQUEsaUJBa0JDOztZQWhCUyxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLEVBQUU7UUFFdEQsSUFBSSxXQUFXLEtBQUssU0FBUyxFQUFFOztnQkFDdkIsYUFBYSxHQUFHLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUNoSyxPQUFPLGFBQWEsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQzdCLEdBQUc7Ozs7WUFBQyxVQUFBLEtBQUs7O29CQUNELFdBQVcsR0FBRyxLQUFLLENBQUMsS0FBSyxDQUFDLE1BQU07Ozs7O2dCQUFDLFVBQVUsSUFBSSxFQUFFLE9BQU87b0JBQzVELE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUM7Z0JBQzdELENBQUMsRUFBQztnQkFDRixLQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDOUMsT0FBTyxXQUFXLENBQUM7WUFDckIsQ0FBQyxFQUFDLENBQ0gsQ0FBQztTQUNOO2FBQU07WUFDSixPQUFPLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUMxQjtJQUNMLENBQUM7O2dCQS9CSixVQUFVOzs7O2dCQUhGLGNBQWM7Z0JBTGQsZUFBZTtnQkFDd0Isb0JBQW9CO2dCQUE1QyxzQkFBc0I7Z0JBRXJDLFVBQVU7Z0JBQ1YsUUFBUTtnQkFOQSxNQUFNOztJQTBDdkIseUJBQUM7Q0FBQSxBQWhDRCxJQWdDQztTQS9CWSxrQkFBa0I7Ozs7OztJQUd2QiwwQ0FBb0M7Ozs7O0lBQ3BDLDZDQUF3Qzs7Ozs7SUFDeEMsa0RBQWtEOzs7OztJQUNsRCxrREFBb0Q7Ozs7O0lBQ3BELHdDQUE4Qjs7Ozs7SUFDOUIsc0NBQTBCOzs7OztJQUMxQixvQ0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1Jlc29sdmUsIFJvdXRlcn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMaXZlQXBwc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9saXZlLWFwcHMuc2VydmljZSc7XG5pbXBvcnQgeyBSb2xlQXR0cmlidXRlLCBUY0dlbmVyYWxDb25maWdTZXJ2aWNlLCBUY1NoYXJlZFN0YXRlU2VydmljZSB9IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5pbXBvcnQgeyBtYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBMb2NhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBUY1JvbGVzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3RjLXJvbGVzLXNlcnZpY2UudHMuc2VydmljZSc7XG5pbXBvcnQge1JvbGVzUmVzb2x2ZXJ9IGZyb20gJy4vcm9sZXMucmVzb2x2ZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUm9sZUFjdGl2ZVJlc29sdmVyIGltcGxlbWVudHMgUmVzb2x2ZTxPYnNlcnZhYmxlPFJvbGVBdHRyaWJ1dGU+PiB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSByb2xlc1NlcnZpY2U6IFRjUm9sZXNTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIGxpdmVBcHBzU2VydmljZTogTGl2ZUFwcHNTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHRjU2hhcmVkU3RhdGVTZXJ2aWNlOiBUY1NoYXJlZFN0YXRlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBnZW5lcmFsQ29uZmlnU2VydmljZTogVGNHZW5lcmFsQ29uZmlnU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBodHRwQ2xpZW50OiBIdHRwQ2xpZW50LFxuICAgICAgICBwcml2YXRlIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge1xuICAgIH1cblxuICAgIHJlc29sdmUoKTogT2JzZXJ2YWJsZTxSb2xlQXR0cmlidXRlPiB7XG5cbiAgICAgICAgY29uc3QgY3VycmVudFJvbGUgPSB0aGlzLnJvbGVzU2VydmljZS5nZXRDdXJyZW50Um9sZSgpO1xuXG4gICAgICAgIGlmIChjdXJyZW50Um9sZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgY29uc3Qgcm9sZVJlc29sdmVyJCA9IG5ldyBSb2xlc1Jlc29sdmVyKHRoaXMudGNTaGFyZWRTdGF0ZVNlcnZpY2UsIHRoaXMuZ2VuZXJhbENvbmZpZ1NlcnZpY2UsIHRoaXMuaHR0cENsaWVudCwgdGhpcy5saXZlQXBwc1NlcnZpY2UsIHRoaXMubG9jYXRpb24sIHRoaXMucm91dGVyKTtcbiAgICAgICAgICByZXR1cm4gcm9sZVJlc29sdmVyJC5yZXNvbHZlKCkucGlwZShcbiAgICAgICAgICAgICAgICBtYXAocm9sZXMgPT4ge1xuICAgICAgICAgICAgICAgICAgY29uc3QgaGlnaGVzdFJvbGUgPSByb2xlcy5yb2xlcy5yZWR1Y2UoZnVuY3Rpb24gKHByZXYsIGN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChwcmV2LnByaW9yaXR5ID4gY3VycmVudC5wcmlvcml0eSkgPyBwcmV2IDogY3VycmVudDtcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgdGhpcy5yb2xlc1NlcnZpY2Uuc2V0Q3VycmVudFJvbGUoaGlnaGVzdFJvbGUpO1xuICAgICAgICAgICAgICAgICAgcmV0dXJuIGhpZ2hlc3RSb2xlO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9mKGN1cnJlbnRSb2xlKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==