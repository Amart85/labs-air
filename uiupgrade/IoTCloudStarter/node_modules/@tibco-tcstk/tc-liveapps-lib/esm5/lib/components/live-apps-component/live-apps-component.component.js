/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, HostListener, ViewChild, ViewChildren } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/internal/operators/distinctUntilChanged';
import { map } from 'rxjs/operators';
import { TcComponent } from '@tibco-tcstk/tc-core-lib';
/**
 * Generic component extended by others
 *
 * \@example <tcla-live-apps-component></tcla-live-apps-component>
 */
var LiveAppsComponent = /** @class */ (function () {
    function LiveAppsComponent() {
        var _this = this;
        // use the _destroyed$/takeUntil pattern to avoid memory leaks if a response was never received
        this._destroyed$ = new Subject();
        this.resize = (/**
         * @return {?}
         */
        function () {
            // explicit size changes
            if (_this.observer) {
                setTimeout((/**
                 * @param {?} handler
                 * @return {?}
                 */
                function (handler) {
                    _this.observer.next(_this.componentDiv.nativeElement.offsetWidth);
                }));
            }
            _this.componentChildDivs.forEach((/**
             * @param {?} child
             * @return {?}
             */
            function (child) {
                if (child.resize) {
                    child.resize();
                }
            }));
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    LiveAppsComponent.prototype.onResize = /**
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var _this = this;
        // window resize changes
        if (this.observer) {
            setTimeout((/**
             * @param {?} handler
             * @return {?}
             */
            function (handler) {
                _this.observer.next(_this.componentDiv.nativeElement.offsetWidth);
            }));
        }
    };
    /**
     * @return {?}
     */
    LiveAppsComponent.prototype.setupWidthObserver = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.containerChanges$ = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        function (observer) {
            if (!_this.observer) {
                _this.observer = observer;
            }
            // send initial value - need async so any flex items have resized
            setTimeout((/**
             * @param {?} handler
             * @return {?}
             */
            function (handler) {
                observer.next(_this.componentDiv.nativeElement.offsetWidth);
            }));
        })).pipe(distinctUntilChanged(), map((/**
         * @param {?} width
         * @return {?}
         */
        function (width) {
            if (_this.widget && width) {
                _this.widget.width = width;
            }
            return _this.widget;
        })));
    };
    /**
     * @return {?}
     */
    LiveAppsComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        // components that extend this can use the widget.width object to detect size of container by subscribing to containerChanges$
        // we detect div size changes using two methods:
        // 1: if window resizes
        // 2: if a manual resize of the element is triggered - this.resize() - (example - from a button in UI)
        this.setupWidthObserver();
    };
    /**
     * @return {?}
     */
    LiveAppsComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        // on destroy
        this._destroyed$.next();
    };
    /**
     * @return {?}
     */
    LiveAppsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.widget = new TcComponent();
    };
    LiveAppsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-component',
                    template: "<p>\n  New Live Apps Component\n</p>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    LiveAppsComponent.ctorParameters = function () { return []; };
    LiveAppsComponent.propDecorators = {
        componentDiv: [{ type: ViewChild, args: ['componentDiv', { static: false },] }],
        componentChildDivs: [{ type: ViewChildren, args: ['componentChildDiv',] }],
        onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
    };
    return LiveAppsComponent;
}());
export { LiveAppsComponent };
if (false) {
    /** @type {?} */
    LiveAppsComponent.prototype.componentDiv;
    /** @type {?} */
    LiveAppsComponent.prototype.componentChildDivs;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsComponent.prototype._destroyed$;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsComponent.prototype.containerChanges$;
    /** @type {?} */
    LiveAppsComponent.prototype.widget;
    /**
     * @type {?}
     * @private
     */
    LiveAppsComponent.prototype.observer;
    /** @type {?} */
    LiveAppsComponent.prototype.resize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWNvbXBvbmVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbGl2ZS1hcHBzLWNvbXBvbmVudC9saXZlLWFwcHMtY29tcG9uZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUlMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUdaLFNBQVMsRUFBRSxZQUFZLEVBQ3hCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxVQUFVLEVBQUUsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDhDQUE4QyxDQUFDO0FBQ2xGLE9BQU8sRUFBZSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7Ozs7OztBQVFyRDtJQThCRTtRQUFBLGlCQUFpQjs7UUFmUCxnQkFBVyxHQUFHLElBQUksT0FBTyxFQUFFLENBQUM7UUFpQi9CLFdBQU07OztRQUFHO1lBQ2Qsd0JBQXdCO1lBQ3hCLElBQUksS0FBSSxDQUFDLFFBQVEsRUFBRTtnQkFDakIsVUFBVTs7OztnQkFBQyxVQUFBLE9BQU87b0JBQ2hCLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNsRSxDQUFDLEVBQUMsQ0FBQzthQUNKO1lBQ0QsS0FBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLEtBQUs7Z0JBQ25DLElBQUksS0FBSyxDQUFDLE1BQU0sRUFBRTtvQkFDaEIsS0FBSyxDQUFDLE1BQU0sRUFBRSxDQUFDO2lCQUNoQjtZQUNILENBQUMsRUFBQyxDQUFDO1FBQ0wsQ0FBQyxFQUFBO0lBZGUsQ0FBQzs7Ozs7SUFUakIsb0NBQVE7Ozs7SUFEUixVQUNTLEtBQUs7UUFEZCxpQkFRQztRQU5DLHdCQUF3QjtRQUN4QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsVUFBVTs7OztZQUFDLFVBQUEsT0FBTztnQkFDaEIsS0FBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDbEUsQ0FBQyxFQUFDLENBQUM7U0FDSjtJQUNILENBQUM7Ozs7SUFrQkQsOENBQWtCOzs7SUFBbEI7UUFBQSxpQkFtQkM7UUFsQkMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksVUFBVTs7OztRQUFTLFVBQUEsUUFBUTtZQUN0RCxJQUFJLENBQUMsS0FBSSxDQUFDLFFBQVEsRUFBRTtnQkFDbEIsS0FBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7YUFDMUI7WUFDRCxpRUFBaUU7WUFDakUsVUFBVTs7OztZQUFDLFVBQUEsT0FBTztnQkFDaEIsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUM3RCxDQUFDLEVBQUMsQ0FBQztRQUNMLENBQUMsRUFBQyxDQUFDLElBQUksQ0FDTCxvQkFBb0IsRUFBRSxFQUN0QixHQUFHOzs7O1FBQUMsVUFBQSxLQUFLO1lBQ1AsSUFBSSxLQUFJLENBQUMsTUFBTSxJQUFJLEtBQUssRUFBRTtnQkFDeEIsS0FBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2FBQzNCO1lBQ0QsT0FBTyxLQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUMsRUFDRixDQUNBLENBQUM7SUFDSixDQUFDOzs7O0lBRUQsMkNBQWU7OztJQUFmO1FBQ0UsOEhBQThIO1FBQzlILGdEQUFnRDtRQUNoRCx1QkFBdUI7UUFDdkIsc0dBQXNHO1FBQ3RHLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO0lBQzVCLENBQUM7Ozs7SUFFRCx1Q0FBVzs7O0lBQVg7UUFDRSxhQUFhO1FBQ2IsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUMxQixDQUFDOzs7O0lBRUQsb0NBQVE7OztJQUFSO1FBQ0UsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7O2dCQWxGRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDBCQUEwQjtvQkFDcEMsa0RBQW1EOztpQkFFcEQ7Ozs7OytCQU9FLFNBQVMsU0FBQyxjQUFjLEVBQUUsRUFBQyxNQUFNLEVBQUUsS0FBSyxFQUFDO3FDQUN6QyxZQUFZLFNBQUMsbUJBQW1COzJCQVFoQyxZQUFZLFNBQUMsZUFBZSxFQUFFLENBQUMsUUFBUSxDQUFDOztJQWdFM0Msd0JBQUM7Q0FBQSxBQXBGRCxJQW9GQztTQTNFWSxpQkFBaUI7OztJQUU1Qix5Q0FBcUU7O0lBQ3JFLCtDQUEyRTs7Ozs7SUFHM0Usd0NBQXNDOzs7OztJQUN0Qyw4Q0FBcUQ7O0lBQ3JELG1DQUEyQjs7Ozs7SUFDM0IscUNBQWlCOztJQWNqQixtQ0FZQyIsInNvdXJjZXNDb250ZW50IjpbIlxuaW1wb3J0IHtcbiAgQWZ0ZXJWaWV3Q2hlY2tlZCxcbiAgQWZ0ZXJWaWV3SW5pdCxcbiAgQ2hhbmdlRGV0ZWN0b3JSZWYsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgSG9zdExpc3RlbmVyLFxuICBPbkRlc3Ryb3ksXG4gIE9uSW5pdCxcbiAgVmlld0NoaWxkLCBWaWV3Q2hpbGRyZW5cbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGUsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtkaXN0aW5jdFVudGlsQ2hhbmdlZH0gZnJvbSAncnhqcy9pbnRlcm5hbC9vcGVyYXRvcnMvZGlzdGluY3RVbnRpbENoYW5nZWQnO1xuaW1wb3J0IHtkZWJvdW5jZVRpbWUsIG1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtUY0NvbXBvbmVudH0gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliJztcblxuXG4vKipcbiAqIEdlbmVyaWMgY29tcG9uZW50IGV4dGVuZGVkIGJ5IG90aGVyc1xuICpcbiAqQGV4YW1wbGUgPHRjbGEtbGl2ZS1hcHBzLWNvbXBvbmVudD48L3RjbGEtbGl2ZS1hcHBzLWNvbXBvbmVudD5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGNsYS1saXZlLWFwcHMtY29tcG9uZW50JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpdmUtYXBwcy1jb21wb25lbnQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9saXZlLWFwcHMtY29tcG9uZW50LmNvbXBvbmVudC5jc3MnXVxufSlcblxuLyoqXG4gKiBDbGFzcyBEZXNjcmlwdGlvbiBvZiB0aGUgQ29tcG9uZW50XG4gKi9cbmV4cG9ydCBjbGFzcyBMaXZlQXBwc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgQWZ0ZXJWaWV3SW5pdCwgT25Jbml0IHtcblxuICBAVmlld0NoaWxkKCdjb21wb25lbnREaXYnLCB7c3RhdGljOiBmYWxzZX0pIGNvbXBvbmVudERpdjogRWxlbWVudFJlZjtcbiAgQFZpZXdDaGlsZHJlbignY29tcG9uZW50Q2hpbGREaXYnKSBjb21wb25lbnRDaGlsZERpdnM6IExpdmVBcHBzQ29tcG9uZW50W107XG5cbiAgLy8gdXNlIHRoZSBfZGVzdHJveWVkJC90YWtlVW50aWwgcGF0dGVybiB0byBhdm9pZCBtZW1vcnkgbGVha3MgaWYgYSByZXNwb25zZSB3YXMgbmV2ZXIgcmVjZWl2ZWRcbiAgcHJvdGVjdGVkIF9kZXN0cm95ZWQkID0gbmV3IFN1YmplY3QoKTtcbiAgcHJvdGVjdGVkIGNvbnRhaW5lckNoYW5nZXMkOiBPYnNlcnZhYmxlPFRjQ29tcG9uZW50PjtcbiAgcHVibGljIHdpZGdldDogVGNDb21wb25lbnQ7XG4gIHByaXZhdGUgb2JzZXJ2ZXI7XG5cbiAgQEhvc3RMaXN0ZW5lcignd2luZG93OnJlc2l6ZScsIFsnJGV2ZW50J10pXG4gIG9uUmVzaXplKGV2ZW50KSB7XG4gICAgLy8gd2luZG93IHJlc2l6ZSBjaGFuZ2VzXG4gICAgaWYgKHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgIHNldFRpbWVvdXQoaGFuZGxlciA9PiB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIubmV4dCh0aGlzLmNvbXBvbmVudERpdi5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgcHVibGljIHJlc2l6ZSA9ICgpID0+IHtcbiAgICAvLyBleHBsaWNpdCBzaXplIGNoYW5nZXNcbiAgICBpZiAodGhpcy5vYnNlcnZlcikge1xuICAgICAgc2V0VGltZW91dChoYW5kbGVyID0+IHtcbiAgICAgICAgdGhpcy5vYnNlcnZlci5uZXh0KHRoaXMuY29tcG9uZW50RGl2Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGgpO1xuICAgICAgfSk7XG4gICAgfVxuICAgIHRoaXMuY29tcG9uZW50Q2hpbGREaXZzLmZvckVhY2goY2hpbGQgPT4ge1xuICAgICAgaWYgKGNoaWxkLnJlc2l6ZSkge1xuICAgICAgICBjaGlsZC5yZXNpemUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIHNldHVwV2lkdGhPYnNlcnZlcigpIHtcbiAgICB0aGlzLmNvbnRhaW5lckNoYW5nZXMkID0gbmV3IE9ic2VydmFibGU8bnVtYmVyPihvYnNlcnZlciA9PiB7XG4gICAgICBpZiAoIXRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgICAgdGhpcy5vYnNlcnZlciA9IG9ic2VydmVyO1xuICAgICAgfVxuICAgICAgLy8gc2VuZCBpbml0aWFsIHZhbHVlIC0gbmVlZCBhc3luYyBzbyBhbnkgZmxleCBpdGVtcyBoYXZlIHJlc2l6ZWRcbiAgICAgIHNldFRpbWVvdXQoaGFuZGxlciA9PiB7XG4gICAgICAgIG9ic2VydmVyLm5leHQodGhpcy5jb21wb25lbnREaXYubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCk7XG4gICAgICB9KTtcbiAgICB9KS5waXBlKFxuICAgICAgZGlzdGluY3RVbnRpbENoYW5nZWQoKSxcbiAgICAgIG1hcCh3aWR0aCA9PiB7XG4gICAgICAgIGlmICh0aGlzLndpZGdldCAmJiB3aWR0aCkge1xuICAgICAgICAgIHRoaXMud2lkZ2V0LndpZHRoID0gd2lkdGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMud2lkZ2V0O1xuICAgICAgfVxuICAgIClcbiAgICApO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIC8vIGNvbXBvbmVudHMgdGhhdCBleHRlbmQgdGhpcyBjYW4gdXNlIHRoZSB3aWRnZXQud2lkdGggb2JqZWN0IHRvIGRldGVjdCBzaXplIG9mIGNvbnRhaW5lciBieSBzdWJzY3JpYmluZyB0byBjb250YWluZXJDaGFuZ2VzJFxuICAgIC8vIHdlIGRldGVjdCBkaXYgc2l6ZSBjaGFuZ2VzIHVzaW5nIHR3byBtZXRob2RzOlxuICAgIC8vIDE6IGlmIHdpbmRvdyByZXNpemVzXG4gICAgLy8gMjogaWYgYSBtYW51YWwgcmVzaXplIG9mIHRoZSBlbGVtZW50IGlzIHRyaWdnZXJlZCAtIHRoaXMucmVzaXplKCkgLSAoZXhhbXBsZSAtIGZyb20gYSBidXR0b24gaW4gVUkpXG4gICAgdGhpcy5zZXR1cFdpZHRoT2JzZXJ2ZXIoKTtcbiAgfVxuXG4gIG5nT25EZXN0cm95KCkge1xuICAgIC8vIG9uIGRlc3Ryb3lcbiAgICB0aGlzLl9kZXN0cm95ZWQkLm5leHQoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMud2lkZ2V0ID0gbmV3IFRjQ29tcG9uZW50KCk7XG4gIH1cblxufVxuIl19