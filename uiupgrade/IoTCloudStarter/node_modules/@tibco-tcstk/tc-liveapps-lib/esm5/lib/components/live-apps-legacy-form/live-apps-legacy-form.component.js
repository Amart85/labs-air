/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { LegacyIframeService } from '@tibco-tcstk/tc-core-lib';
import { TcVisibilityService } from '@tibco-tcstk/tc-core-lib';
/**
 * Wraps legacy angularjs form renderer
 *
 * \@example <tcla-live-apps-legacy-form></tcla-live-apps-legacy-form>
 */
var LiveAppsLegacyFormComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsLegacyFormComponent, _super);
    function LiveAppsLegacyFormComponent(visibilityService, host, legacyIframeService) {
        var _this = _super.call(this) || this;
        _this.visibilityService = visibilityService;
        _this.host = host;
        _this.legacyIframeService = legacyIframeService;
        _this.legacyIframeId = _this.legacyIframeId ? _this.legacyIframeId : 'legacyWorkitemFrame';
        _this.workitemComplete = new EventEmitter();
        _this.wiActive = false;
        _this.renderWi = (/**
         * @param {?} wiId
         * @return {?}
         */
        function (wiId) {
            if (_this.wiActive && _this.openWiId) {
                // opening a new workitem so cancel old one
                _this.cancelWi(wiId);
            }
            // send message to external form app
            _this.formDiv.contentWindow.postMessage({ 'action': 'openWI', 'wiId': wiId }, window.location.origin);
            // position the form iframe over the workitemDiv placeholder
            _this.wiActive = true;
            _this.openWiId = wiId;
            _this.resizeWi();
        });
        _this.receiveMessage = (/**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            if (event.data.action === 'wiCompleted') {
                _this.wiActive = false;
                /** @type {?} */
                var wiId = _this.openWiId;
                _this.openWiId = undefined;
                _this.hideWi();
                _this.workitemComplete.emit(wiId);
            }
        });
        _this.cancelWi = (/**
         * @param {?} wiId
         * @return {?}
         */
        function (wiId) {
            _this.formDiv.contentWindow.postMessage({ 'action': 'cancelWI', 'wiId': _this.openWiId }, window.location.origin);
            _this.wiActive = false;
            _this.openWiId = undefined;
            _this.hideWi();
        });
        _this.hideWi = (/**
         * @return {?}
         */
        function () {
            // hide the iframe!
            _this.formDiv.style.top = '-1000px';
            _this.formDiv.style.left = '-1000px';
            _this.formDiv.style.zIndex = '1';
        });
        _this.resizeWi = (/**
         * @return {?}
         */
        function () {
            // position the form iframe over the workitemDiv placeholder
            setTimeout((/**
             * @param {?} handler
             * @return {?}
             */
            function (handler) {
                /** @type {?} */
                var rect = _this.target.getBoundingClientRect();
                _this.formDiv.style.top = rect.top.toString() + 'px';
                _this.formDiv.style.left = rect.left.toString() + 'px';
                _this.formDiv.style.height = rect.height.toString() + 'px';
                _this.formDiv.style.width = rect.width.toString() + 'px';
                _this.formDiv.style.position = 'absolute';
                _this.formDiv.style.zIndex = '1000';
            }), 1000);
        });
        _this.initialize = (/**
         * @return {?}
         */
        function () {
            // listen for messages from the iframe
            window.addEventListener('message', _this.receiveMessage, false);
            // we only want to render the workitem when the element is visible
            /** @type {?} */
            var inSight$ = _this.visibilityService.elementInSight(_this.host);
            inSight$.subscribe((/**
             * @param {?} next
             * @return {?}
             */
            function (next) {
                if (!next) {
                    // element not visible so hide the workitem if it is showing
                    if (_this.wiActive && _this.target) {
                        _this.hideWi();
                    }
                }
                else {
                    // element is visible
                    if (!_this.wiActive) {
                        // if workitem not already showing - show it
                        // first get a handle on the target div and the legacy iframe
                        _this.target = document.getElementById('workitemDiv');
                        _this.formDiv = document.getElementById(_this.legacyIframeId);
                        if (_this.workitemId) {
                            // trigger display of the workitem
                            _this.renderWi(_this.workitemId);
                        }
                    }
                    else {
                        _this.resizeWi();
                    }
                }
            }));
        });
        return _this;
    }
    /**
     * @return {?}
     */
    LiveAppsLegacyFormComponent.prototype.isFormActive = /**
     * @return {?}
     */
    function () {
        return this.wiActive;
    };
    /**
     * @return {?}
     */
    LiveAppsLegacyFormComponent.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        _super.prototype.ngAfterViewInit.call(this);
        this.containerChanges$.subscribe((/**
         * @param {?} widget
         * @return {?}
         */
        function (widget) {
            if (_this.wiActive && _this.target) {
                _this.resizeWi();
            }
        }));
        // wait for iframe to load before doing anything else
        // this observable will emit true once the iFrame is loaded
        this.legacyIframeService.workitemStatus.subscribe((/**
         * @param {?} loaded
         * @return {?}
         */
        function (loaded) {
            if (loaded) {
                // iframe is loaded
                _this.initialize();
            }
        }));
    };
    /**
     * @return {?}
     */
    LiveAppsLegacyFormComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.openWiId) {
            this.cancelWi(this.workitemId);
        }
    };
    LiveAppsLegacyFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-legacy-form',
                    template: "<div #componentDiv fxFill id=\"workitemDiv\" style=\"border: none;\"></div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    LiveAppsLegacyFormComponent.ctorParameters = function () { return [
        { type: TcVisibilityService },
        { type: ElementRef },
        { type: LegacyIframeService }
    ]; };
    LiveAppsLegacyFormComponent.propDecorators = {
        legacyIframeId: [{ type: Input }],
        workitemId: [{ type: Input }],
        workitemComplete: [{ type: Output }]
    };
    return LiveAppsLegacyFormComponent;
}(LiveAppsComponent));
export { LiveAppsLegacyFormComponent };
if (false) {
    /** @type {?} */
    LiveAppsLegacyFormComponent.prototype.legacyIframeId;
    /** @type {?} */
    LiveAppsLegacyFormComponent.prototype.workitemId;
    /** @type {?} */
    LiveAppsLegacyFormComponent.prototype.workitemComplete;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.target;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.formDiv;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.wiActive;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.openWiId;
    /** @type {?} */
    LiveAppsLegacyFormComponent.prototype.renderWi;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.receiveMessage;
    /** @type {?} */
    LiveAppsLegacyFormComponent.prototype.cancelWi;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.hideWi;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.resizeWi;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.initialize;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsLegacyFormComponent.prototype.visibilityService;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsLegacyFormComponent.prototype.host;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsLegacyFormComponent.prototype.legacyIframeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWxlZ2FjeS1mb3JtLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1saXZlYXBwcy1saWIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9saXZlLWFwcHMtbGVnYWN5LWZvcm0vbGl2ZS1hcHBzLWxlZ2FjeS1mb3JtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFFTCxTQUFTLEVBQ1QsVUFBVSxFQUNWLFlBQVksRUFDWixLQUFLLEVBR0wsTUFBTSxFQUNQLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHNEQUFzRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBQyxtQkFBbUIsRUFBcUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNqRyxPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQzs7Ozs7O0FBUTdEO0lBS2lELHVEQUFpQjtJQVdoRSxxQ0FBdUIsaUJBQXNDLEVBQVksSUFBZ0IsRUFBWSxtQkFBd0M7UUFBN0ksWUFDRSxpQkFBTyxTQUNSO1FBRnNCLHVCQUFpQixHQUFqQixpQkFBaUIsQ0FBcUI7UUFBWSxVQUFJLEdBQUosSUFBSSxDQUFZO1FBQVkseUJBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQVRwSSxvQkFBYyxHQUFHLEtBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFFLEtBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLHFCQUFxQixDQUFDO1FBRW5GLHNCQUFnQixHQUFHLElBQUksWUFBWSxFQUFFLENBQUM7UUFJeEMsY0FBUSxHQUFHLEtBQUssQ0FBQztRQVdsQixjQUFROzs7O1FBQUcsVUFBQyxJQUFZO1lBQzdCLElBQUksS0FBSSxDQUFDLFFBQVEsSUFBSSxLQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNsQywyQ0FBMkM7Z0JBQzNDLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENB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Q0FBQyxNQUFNLEVBQUU7Z0JBQ2hDLEtBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQzthQUNqQjtRQUNILENBQUMsRUFBQyxDQUFDO1FBRUgscURBQXFEO1FBQ3JELDJEQUEyRDtRQUMzRCxJQUFJLENBQUMsbUJBQW1CLENBQUMsY0FBYyxDQUFDLFNBQVM7Ozs7UUFBQyxVQUFBLE1BQU07WUFDdEQsSUFBSSxNQUFNLEVBQUU7Z0JBQ1YsbUJBQW1CO2dCQUNuQixLQUFJLENBQUMsVUFBVSxFQUFFLENBQUM7YUFDbkI7UUFDSCxDQUFDLEVBQUMsQ0FBQztJQUNMLENBQUM7Ozs7SUFFRCxpREFBVzs7O0lBQVg7UUFDRSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7U0FDaEM7SUFDSCxDQUFDOztnQkEvSEYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSw0QkFBNEI7b0JBQ3RDLHlGQUFxRDs7aUJBRXREOzs7O2dCQVpPLG1CQUFtQjtnQkFUekIsVUFBVTtnQkFRSixtQkFBbUI7OztpQ0FnQnhCLEtBQUs7NkJBQ0wsS0FBSzttQ0FDTCxNQUFNOztJQXVIVCxrQ0FBQztDQUFBLEFBaElELENBS2lELGlCQUFpQixHQTJIakU7U0EzSFksMkJBQTJCOzs7SUFFdEMscURBQTZGOztJQUM3RixpREFBNEI7O0lBQzVCLHVEQUFnRDs7Ozs7SUFFaEQsNkNBQWU7Ozs7O0lBQ2YsOENBQWdCOzs7OztJQUNoQiwrQ0FBeUI7Ozs7O0lBQ3pCLCtDQUFpQjs7SUFVakIsK0NBWUM7Ozs7O0lBRUQscURBUUM7O0lBRUQsK0NBS0M7Ozs7O0lBRUQsNkNBS0M7Ozs7O0lBRUQsK0NBV0M7Ozs7O0lBRUQsaURBNEJDOzs7OztJQXZGWSx3REFBZ0Q7Ozs7O0lBQUUsMkNBQTBCOzs7OztJQUFFLDBEQUFrRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIEFmdGVyVmlld0luaXQsXG4gIENvbXBvbmVudCxcbiAgRWxlbWVudFJlZixcbiAgRXZlbnRFbWl0dGVyLFxuICBJbnB1dCxcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIE91dHB1dFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TGl2ZUFwcHNDb21wb25lbnR9IGZyb20gJy4uL2xpdmUtYXBwcy1jb21wb25lbnQvbGl2ZS1hcHBzLWNvbXBvbmVudC5jb21wb25lbnQnO1xuaW1wb3J0IHtMZWdhY3lJZnJhbWVTZXJ2aWNlLCBUY0NvbXBvbmVudCwgVGNDb3JlQ29tbW9uRnVuY3Rpb25zfSBmcm9tICdAdGliY28tdGNzdGsvdGMtY29yZS1saWInO1xuaW1wb3J0IHtUY1Zpc2liaWxpdHlTZXJ2aWNlfSBmcm9tICdAdGliY28tdGNzdGsvdGMtY29yZS1saWInO1xuXG4vKipcbiAqIFdyYXBzIGxlZ2FjeSBhbmd1bGFyanMgZm9ybSByZW5kZXJlclxuICpcbiAqQGV4YW1wbGUgPHRjbGEtbGl2ZS1hcHBzLWxlZ2FjeS1mb3JtPjwvdGNsYS1saXZlLWFwcHMtbGVnYWN5LWZvcm0+XG4gKi9cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGNsYS1saXZlLWFwcHMtbGVnYWN5LWZvcm0nLFxuICB0ZW1wbGF0ZVVybDogJy4vbGl2ZS1hcHBzLWxlZ2FjeS1mb3JtLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbGl2ZS1hcHBzLWxlZ2FjeS1mb3JtLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBMaXZlQXBwc0xlZ2FjeUZvcm1Db21wb25lbnQgZXh0ZW5kcyBMaXZlQXBwc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcblxuICBASW5wdXQoKSBsZWdhY3lJZnJhbWVJZCA9IHRoaXMubGVnYWN5SWZyYW1lSWQgPyAgdGhpcy5sZWdhY3lJZnJhbWVJZCA6ICdsZWdhY3lXb3JraXRlbUZyYW1lJztcbiAgQElucHV0KCkgd29ya2l0ZW1JZDogbnVtYmVyO1xuICBAT3V0cHV0KCkgd29ya2l0ZW1Db21wbGV0ZSA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwcml2YXRlIHRhcmdldDtcbiAgcHJpdmF0ZSBmb3JtRGl2O1xuICBwcml2YXRlIHdpQWN0aXZlID0gZmFsc2U7XG4gIHByaXZhdGUgb3BlbldpSWQ7XG5cbiAgY29uc3RydWN0b3IgKHByb3RlY3RlZCB2aXNpYmlsaXR5U2VydmljZTogVGNWaXNpYmlsaXR5U2VydmljZSwgcHJvdGVjdGVkIGhvc3Q6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCBsZWdhY3lJZnJhbWVTZXJ2aWNlOiBMZWdhY3lJZnJhbWVTZXJ2aWNlKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBpc0Zvcm1BY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMud2lBY3RpdmU7XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyV2kgPSAod2lJZDogbnVtYmVyKSA9PiB7XG4gICAgaWYgKHRoaXMud2lBY3RpdmUgJiYgdGhpcy5vcGVuV2lJZCkge1xuICAgICAgLy8gb3BlbmluZyBhIG5ldyB3b3JraXRlbSBzbyBjYW5jZWwgb2xkIG9uZVxuICAgICAgdGhpcy5jYW5jZWxXaSh3aUlkKTtcbiAgICB9XG5cbiAgICAvLyBzZW5kIG1lc3NhZ2UgdG8gZXh0ZXJuYWwgZm9ybSBhcHBcbiAgICB0aGlzLmZvcm1EaXYuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZSh7ICdhY3Rpb24nOiAnb3BlbldJJywgJ3dpSWQnOiB3aUlkfSwgd2luZG93LmxvY2F0aW9uLm9yaWdpbik7XG4gICAgLy8gcG9zaXRpb24gdGhlIGZvcm0gaWZyYW1lIG92ZXIgdGhlIHdvcmtpdGVtRGl2IHBsYWNlaG9sZGVyXG4gICAgdGhpcy53aUFjdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5vcGVuV2lJZCA9IHdpSWQ7XG4gICAgdGhpcy5yZXNpemVXaSgpO1xuICB9XG5cbiAgcHJpdmF0ZSByZWNlaXZlTWVzc2FnZSA9IChldmVudCkgPT4ge1xuICAgIGlmIChldmVudC5kYXRhLmFjdGlvbiA9PT0gJ3dpQ29tcGxldGVkJykge1xuICAgICAgdGhpcy53aUFjdGl2ZSA9IGZhbHNlO1xuICAgICAgY29uc3Qgd2lJZCA9IHRoaXMub3BlbldpSWQ7XG4gICAgICB0aGlzLm9wZW5XaUlkID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy5oaWRlV2koKTtcbiAgICAgIHRoaXMud29ya2l0ZW1Db21wbGV0ZS5lbWl0KHdpSWQpO1xuICAgIH1cbiAgfVxuXG4gIHB1YmxpYyBjYW5jZWxXaSA9ICh3aUlkKSA9PiB7XG4gICAgdGhpcy5mb3JtRGl2LmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2UoeyAnYWN0aW9uJzogJ2NhbmNlbFdJJywgJ3dpSWQnOiB0aGlzLm9wZW5XaUlkfSwgd2luZG93LmxvY2F0aW9uLm9yaWdpbik7XG4gICAgdGhpcy53aUFjdGl2ZSA9IGZhbHNlO1xuICAgIHRoaXMub3BlbldpSWQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5oaWRlV2koKTtcbiAgfVxuXG4gIHByaXZhdGUgaGlkZVdpID0gKCkgPT4ge1xuICAvLyBoaWRlIHRoZSBpZnJhbWUhXG4gICAgICB0aGlzLmZvcm1EaXYuc3R5bGUudG9wID0gJy0xMDAwcHgnO1xuICAgICAgdGhpcy5mb3JtRGl2LnN0eWxlLmxlZnQgPSAnLTEwMDBweCc7XG4gICAgICB0aGlzLmZvcm1EaXYuc3R5bGUuekluZGV4ID0gJzEnO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNpemVXaSA9ICgpID0+IHtcbiAgICAvLyBwb3NpdGlvbiB0aGUgZm9ybSBpZnJhbWUgb3ZlciB0aGUgd29ya2l0ZW1EaXYgcGxhY2Vob2xkZXJcbiAgICBzZXRUaW1lb3V0KGhhbmRsZXIgPT4ge1xuICAgICAgY29uc3QgcmVjdCA9IHRoaXMudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgdGhpcy5mb3JtRGl2LnN0eWxlLnRvcCA9IHJlY3QudG9wLnRvU3RyaW5nKCkgKyAncHgnO1xuICAgICAgdGhpcy5mb3JtRGl2LnN0eWxlLmxlZnQgPSByZWN0LmxlZnQudG9TdHJpbmcoKSArICdweCc7XG4gICAgICB0aGlzLmZvcm1EaXYuc3R5bGUuaGVpZ2h0ID0gcmVjdC5oZWlnaHQudG9TdHJpbmcoKSArICdweCc7XG4gICAgICB0aGlzLmZvcm1EaXYuc3R5bGUud2lkdGggPSByZWN0LndpZHRoLnRvU3RyaW5nKCkgKyAncHgnO1xuICAgICAgdGhpcy5mb3JtRGl2LnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcbiAgICAgIHRoaXMuZm9ybURpdi5zdHlsZS56SW5kZXggPSAnMTAwMCc7XG4gICAgfSwgMTAwMCk7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemUgPSAoKSA9PiB7XG4gICAgLy8gbGlzdGVuIGZvciBtZXNzYWdlcyBmcm9tIHRoZSBpZnJhbWVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMucmVjZWl2ZU1lc3NhZ2UsIGZhbHNlKTtcblxuICAgIC8vIHdlIG9ubHkgd2FudCB0byByZW5kZXIgdGhlIHdvcmtpdGVtIHdoZW4gdGhlIGVsZW1lbnQgaXMgdmlzaWJsZVxuICAgIGNvbnN0IGluU2lnaHQkID0gdGhpcy52aXNpYmlsaXR5U2VydmljZS5lbGVtZW50SW5TaWdodCh0aGlzLmhvc3QpO1xuICAgIGluU2lnaHQkLnN1YnNjcmliZShuZXh0ID0+IHtcbiAgICAgIGlmICghbmV4dCkge1xuICAgICAgICAvLyBlbGVtZW50IG5vdCB2aXNpYmxlIHNvIGhpZGUgdGhlIHdvcmtpdGVtIGlmIGl0IGlzIHNob3dpbmdcbiAgICAgICAgaWYgKHRoaXMud2lBY3RpdmUgJiYgdGhpcy50YXJnZXQpIHtcbiAgICAgICAgICB0aGlzLmhpZGVXaSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBlbGVtZW50IGlzIHZpc2libGVcbiAgICAgICAgaWYgKCF0aGlzLndpQWN0aXZlKSB7XG4gICAgICAgICAgLy8gaWYgd29ya2l0ZW0gbm90IGFscmVhZHkgc2hvd2luZyAtIHNob3cgaXRcbiAgICAgICAgICAvLyBmaXJzdCBnZXQgYSBoYW5kbGUgb24gdGhlIHRhcmdldCBkaXYgYW5kIHRoZSBsZWdhY3kgaWZyYW1lXG4gICAgICAgICAgdGhpcy50YXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnd29ya2l0ZW1EaXYnKTtcbiAgICAgICAgICB0aGlzLmZvcm1EaXYgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCh0aGlzLmxlZ2FjeUlmcmFtZUlkKTtcbiAgICAgICAgICBpZiAodGhpcy53b3JraXRlbUlkKSB7XG4gICAgICAgICAgICAvLyB0cmlnZ2VyIGRpc3BsYXkgb2YgdGhlIHdvcmtpdGVtXG4gICAgICAgICAgICB0aGlzLnJlbmRlcldpKHRoaXMud29ya2l0ZW1JZCk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVzaXplV2koKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdBZnRlclZpZXdJbml0KCkge1xuICAgIHN1cGVyLm5nQWZ0ZXJWaWV3SW5pdCgpO1xuICAgIHRoaXMuY29udGFpbmVyQ2hhbmdlcyQuc3Vic2NyaWJlKHdpZGdldCA9PiB7XG4gICAgICBpZiAodGhpcy53aUFjdGl2ZSAmJiB0aGlzLnRhcmdldCkge1xuICAgICAgICB0aGlzLnJlc2l6ZVdpKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyB3YWl0IGZvciBpZnJhbWUgdG8gbG9hZCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxuICAgIC8vIHRoaXMgb2JzZXJ2YWJsZSB3aWxsIGVtaXQgdHJ1ZSBvbmNlIHRoZSBpRnJhbWUgaXMgbG9hZGVkXG4gICAgdGhpcy5sZWdhY3lJZnJhbWVTZXJ2aWNlLndvcmtpdGVtU3RhdHVzLnN1YnNjcmliZShsb2FkZWQgPT4ge1xuICAgICAgaWYgKGxvYWRlZCkge1xuICAgICAgICAvLyBpZnJhbWUgaXMgbG9hZGVkXG4gICAgICAgIHRoaXMuaW5pdGlhbGl6ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgbmdPbkRlc3Ryb3koKSB7XG4gICAgaWYgKHRoaXMub3BlbldpSWQpIHtcbiAgICAgIHRoaXMuY2FuY2VsV2kodGhpcy53b3JraXRlbUlkKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==