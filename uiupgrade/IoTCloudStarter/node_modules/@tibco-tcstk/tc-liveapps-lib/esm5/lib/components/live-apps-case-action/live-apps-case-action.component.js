/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, ViewChild } from '@angular/core';
import { LiveAppsCaseCreatorComponent } from '../live-apps-case-creator/live-apps-case-creator.component';
import { LiveAppsService } from '../../services/live-apps.service';
import { take, takeUntil } from 'rxjs/operators';
import { LiveAppsLegacyProcessComponent } from '../live-apps-legacy-process/live-apps-legacy-process.component';
/**
 * Wraps rendering an execution of an action
 *
 * \@example <tcla-live-apps-case-action></tcla-live-apps-case-action>
 */
var LiveAppsCaseActionComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsCaseActionComponent, _super);
    function LiveAppsCaseActionComponent(lasvc) {
        var _this = _super.call(this, lasvc) || this;
        _this.lasvc = lasvc;
        /**
         * Enable legacy actions
         */
        _this.legacyActions = _this.legacyActions ? _this.legacyActions : false;
        /**
         * Allow override of forms framework
         * Options: bootstrap-4 or material-design
         */
        _this.formsFramework = _this.formsFramework ? _this.formsFramework : 'material-design';
        _this.getCaseData = (/**
         * @param {?} caseRef
         * @return {?}
         */
        function (caseRef) {
            // retrieve the case data for this case reference
            _this.liveapps.getCase(_this.caseRef, _this.sandboxId, _this.applicationId, _this.typeId)
                .pipe(take(1), takeUntil(_this._destroyed$))
                .subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                var _a, _b;
                if (result.metadata.applicationId === _this.applicationId.toString()) {
                    /** @type {?} */
                    var casedata = result.untaggedCasedataObj;
                    _this.caseState = casedata.state;
                    _this.originalData = (_a = {},
                        _a[_this.process.process.name] = casedata,
                        _a);
                    // JS: use name rather than internalObjectName to handle appliction name change
                    /** @type {?} */
                    var caseTypeName = _this.getMainCaseTypeFromSchema(_this.typeId, _this.process).name;
                    _this.data = (_b = {},
                        _b[caseTypeName] = casedata,
                        _b);
                }
                else {
                    console.error('The selected case is not the right case type for this action');
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                // Emit any error retrieving case data to the parent
                console.error('Unable to retrieve case data');
                console.error(error);
            }));
        });
        _this.cancelAction = (/**
         * @return {?}
         */
        function () {
            if (_this.legacyProcessComponent) {
                _this.legacyProcessComponent.cancelProcess();
            }
        });
        return _this;
    }
    /**
     * @private
     * @param {?} typeId
     * @param {?} process
     * @return {?}
     */
    LiveAppsCaseActionComponent.prototype.getMainCaseTypeFromSchema = /**
     * @private
     * @param {?} typeId
     * @param {?} process
     * @return {?}
     */
    function (typeId, process) {
        /** @type {?} */
        var requestedType;
        process.appSchema.casetypes.forEach((/**
         * @param {?} cType
         * @return {?}
         */
        function (cType) {
            if (cType.id === typeId) {
                requestedType = cType;
            }
        }));
        return requestedType;
    };
    /**
     * @return {?}
     */
    LiveAppsCaseActionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // set default layout
        // this.layout = [];
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LiveAppsCaseActionComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // the extended class will detect change in the process and layout passed
        _super.prototype.ngOnChanges.call(this, changes);
        // handle input param changes
        if ((changes.caseRef && changes.caseRef.currentValue && (changes.caseRef.currentValue !== changes.caseRef.previousValue))
            || (changes.process && changes.process.currentValue && (changes.process.currentValue !== changes.process.previousValue))) {
            // get case data if anything changes
            if (changes.process.currentValue) {
                this.getCaseData(this.caseRef);
            }
        }
        // handle process change for legacy action process
        if (changes.process && changes.process.currentValue && (changes.process.currentValue !== changes.process.previousValue)) {
            if (this.legacyProcessComponent) {
                this.legacyProcessComponent.changeProcess(changes.process.currentValue);
            }
        }
    };
    LiveAppsCaseActionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-case-action',
                    template: "<div class=\"tcs-case-action-pane\" fxLayout=\"column\" fxFill>\n  <tc-tibco-cloud-widget-header *ngIf=\"showHeader\" fxFlex=\"nogrow\" [headerText]=\"'Action'\" [icon]=\"'tcs-case-action-item'\"></tc-tibco-cloud-widget-header>\n  <tcfrm-rendered-form *ngIf=\"data && process && (!legacyActions || isCustomForm)\" [schema]=\"schema\" [layout]=\"layout\" [data]=\"data\" [caseRef]=\"caseRef\" [appId]=\"applicationId\" [customFormDefs]=\"customFormDefs\" [formsFramework]=\"formsFramework\" [formRef]=\"process.ref\" (formSubmit)=\"handleSubmit($event, caseRef)\"></tcfrm-rendered-form>\n  <tcla-live-apps-legacy-process *ngIf=\"data && process && legacyActions && !isCustomForm\" [process]=\"process\" [caseState]=\"caseState\" [type]=\"'action'\" [applicationId]=\"applicationId\" [typeId]=\"typeId\" [caseRef]=\"caseRef\" (processCancelled)=\"handleLegacyProcessCancelled()\" (processComplete)=\"handleLegacyProcessComplete()\" class=\"live-apps-widget\" fxFill></tcla-live-apps-legacy-process>\n</div>\n",
                    styles: [".tcs-case-action-pane{border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff}.tcs-case-action-header{height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-case-action-header-text{margin-left:10px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px}"]
                }] }
    ];
    /** @nocollapse */
    LiveAppsCaseActionComponent.ctorParameters = function () { return [
        { type: LiveAppsService }
    ]; };
    LiveAppsCaseActionComponent.propDecorators = {
        caseRef: [{ type: Input }],
        showHeader: [{ type: Input }],
        legacyActions: [{ type: Input }],
        formsFramework: [{ type: Input }],
        legacyProcessComponent: [{ type: ViewChild, args: [LiveAppsLegacyProcessComponent, { static: false },] }]
    };
    return LiveAppsCaseActionComponent;
}(LiveAppsCaseCreatorComponent));
export { LiveAppsCaseActionComponent };
if (false) {
    /**
     * The case reference
     * @type {?}
     */
    LiveAppsCaseActionComponent.prototype.caseRef;
    /**
     * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
     * @type {?}
     */
    LiveAppsCaseActionComponent.prototype.showHeader;
    /**
     * Enable legacy actions
     * @type {?}
     */
    LiveAppsCaseActionComponent.prototype.legacyActions;
    /**
     * Allow override of forms framework
     * Options: bootstrap-4 or material-design
     * @type {?}
     */
    LiveAppsCaseActionComponent.prototype.formsFramework;
    /** @type {?} */
    LiveAppsCaseActionComponent.prototype.legacyProcessComponent;
    /** @type {?} */
    LiveAppsCaseActionComponent.prototype.originalData;
    /** @type {?} */
    LiveAppsCaseActionComponent.prototype.caseState;
    /**
     * @type {?}
     * @private
     */
    LiveAppsCaseActionComponent.prototype.getCaseData;
    /** @type {?} */
    LiveAppsCaseActionComponent.prototype.cancelAction;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsCaseActionComponent.prototype.lasvc;
}
//# sourceMappingURL=data:application/json;base64,