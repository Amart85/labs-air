/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { HttpClient } from '@angular/common/http';
import { take, takeUntil } from 'rxjs/operators';
import { LiveAppsService } from '../../services/live-apps.service';
import { Location } from '@angular/common';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { TcCoreCommonFunctions } from '@tibco-tcstk/tc-core-lib';
import { GENERIC_CASETYPE_ICON_SVG, GENERIC_STATE_ICON_SVG } from '../../services/tc-case-card-config.service';
/**
 * renders a single icon for a state
 *
 * ![alt-text](../live-apps-state-icon.png "")
 *
 * \@example <tcla-live-apps-state-icon></tcla-live-apps-state-icon>
 */
var LiveAppsStateIconComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsStateIconComponent, _super);
    function LiveAppsStateIconComponent(sanitizer, http, liveapps, location) {
        var _this = _super.call(this) || this;
        _this.sanitizer = sanitizer;
        _this.http = http;
        _this.liveapps = liveapps;
        _this.location = location;
        _this.svgcontents = undefined;
        _this.refillSVG = (/**
         * @param {?} fill
         * @return {?}
         */
        function (fill) {
            /** @type {?} */
            var updatedsvg = this.svgcontents.replace('fill="<DYNAMICFILL>"', 'fill="' + fill + '"');
            /** @type {?} */
            var newval = this.sanitizer.bypassSecurityTrustHtml(updatedsvg);
            this.iconSVG = newval;
        });
        _this.refresh = (/**
         * @param {?} icon
         * @param {?} fill
         * @return {?}
         */
        function (icon, fill) {
            /** @type {?} */
            var url;
            if (icon && icon !== 'assets/icons/ic-generic-casetype.svg' && icon !== 'assets/icons/ic-generic-state.svg') {
                if (icon.slice(0, 13) === 'assets/icons/') {
                    // if icon is in assets folder we need to prepare the Url
                    url = TcCoreCommonFunctions.prepareUrlForStaticResource(_this.location, icon);
                }
                else {
                    url = '/' + icon;
                }
                _this.liveapps.getIconSVGText(url)
                    .pipe(take(1), takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    _this.svgcontents = val;
                    val = val.toString().replace('fill="<DYNAMICFILL>"', 'fill="' + fill + '"');
                    /** @type {?} */
                    var newval = _this.sanitizer.bypassSecurityTrustHtml(val);
                    _this.iconSVG = newval;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    console.log('Unable to retrieve icon: ' + error.errorMsg);
                }));
            }
            else {
                // use generic icon
                /** @type {?} */
                var svgcontents = void 0;
                if (icon === 'assets/icons/ic-generic-casetype.svg') {
                    svgcontents = GENERIC_CASETYPE_ICON_SVG;
                }
                else {
                    svgcontents = GENERIC_STATE_ICON_SVG;
                }
                _this.svgcontents = svgcontents;
                svgcontents = svgcontents.replace('fill="<DYNAMICFILL>"', 'fill="' + fill + '"');
                /** @type {?} */
                var newval = _this.sanitizer.bypassSecurityTrustHtml(svgcontents);
                _this.iconSVG = newval;
            }
        });
        return _this;
    }
    /**
     * @return {?}
     */
    LiveAppsStateIconComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.refresh(this.iconPath, this.color);
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LiveAppsStateIconComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if ((changes.iconPath && (changes.iconPath.currentValue !== changes.iconPath.previousValue)) || (changes.color && (changes.color.currentValue !== changes.color.previousValue))) {
            this.refresh(this.iconPath, this.color);
        }
    };
    LiveAppsStateIconComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-state-icon',
                    template: "<div class=\"la-state-icon-svg\" [innerHtml]=\"iconSVG\" fxLayoutAlign=\"start center\"></div>\n",
                    styles: [":host ::ng-deep .la-state-icon-svg svg{height:16px;width:16px}"]
                }] }
    ];
    /** @nocollapse */
    LiveAppsStateIconComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: HttpClient },
        { type: LiveAppsService },
        { type: Location }
    ]; };
    LiveAppsStateIconComponent.propDecorators = {
        id: [{ type: Input }],
        iconPath: [{ type: Input }],
        color: [{ type: Input }],
        iconHostURL: [{ type: Input }],
        appId: [{ type: Input }]
    };
    return LiveAppsStateIconComponent;
}(LiveAppsComponent));
export { LiveAppsStateIconComponent };
if (false) {
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.id;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.iconPath;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.color;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.iconHostURL;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.appId;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.iconSVG;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.svgcontents;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.refillSVG;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.refresh;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsStateIconComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsStateIconComponent.prototype.http;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsStateIconComponent.prototype.liveapps;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsStateIconComponent.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,