import { EventEmitter, OnInit } from '@angular/core';
import { LiveAppsService } from '../../services/live-apps.service';
import { Document, DocumentAction } from '../../models/tc-document';
import { MatDialog, MatDialogRef } from '@angular/material';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { TcDocumentService } from '../../services/tc-document.service';
/**
 * Document List and upload Component
 *
 * This Component allows to list, upload, download, Documents attached to a Case-Instance or a whole Application.
 * In the Upload Dialog the User is able to select a local File and enter a short Description.
 *
 * The Component stores also the following Data
 * - uploading User
 * - Timestamp
 * - File Size
 *
 * Document List<br>
 * ![alt-text](../live-apps-documents.png "Documents Component Image")
 * Document Upload Dialog <br>
 * ![alt-text](../Docs-Upload.png "Documents Component Image")
 *
 *@example <tcla-live-apps-documents></tcla-live-apps-documents>
 */
export declare class LiveAppsDocumentsComponent extends LiveAppsComponent implements OnInit {
    protected liveapps: LiveAppsService;
    protected documentsService: TcDocumentService;
    dialog: MatDialog;
    constructor(liveapps: LiveAppsService, documentsService: TcDocumentService, dialog: MatDialog);
    /**
     * sandboxId - this comes from claims resolver
     */
    sandboxId: number;
    /**
     * orgFolders' or 'caseFolders' - different API calls made according to which one this is
     */
    folderType: string;
    /**
     * The organisation folder to store/retrieve documents
     */
    folderId: string;
    /**
     * NOT used but would allow a search filter on documents
     */
    filter: string;
    /**
     * header text on component (defaults to documents)
     */
    folderDescription: string;
    /**
     * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
     */
    showHeader: boolean;
    /**
     * Custom Document Buttons (array of text)
     */
    customActions: string[];
    /**
     * Custom Document Action Event: fired when a custom action is clicked for a document (outputs the action name and a document (DocumentAction))
     */
    customActionClicked: EventEmitter<DocumentAction>;
    errorMessage: string;
    documents: Document[];
    fileToUpload: File;
    fileDescription: string;
    uploadMessage: string;
    uploadProgress: number;
    refresh: () => void;
    customActionClick: (action: string, document: Document) => void;
    listDocuments: () => void;
    uploadDocument: (doc: any) => void;
    removeDocument: (doc: any) => void;
    viewDocument: (doc: any) => void;
    downloadDocument: (doc: any) => void;
    attachFile(files: FileList): void;
    setFileDescription(description: string): void;
    uploadFile(fileToUpload: any, description: any): void;
    openDialog(): void;
    ngOnInit(): void;
}
export declare class LiveAppsDocumentUploadDialogComponent {
    dialogRef: MatDialogRef<LiveAppsDocumentUploadDialogComponent>;
    fileevent: EventEmitter<any>;
    fileToUpload: File;
    description: string;
    constructor(dialogRef: MatDialogRef<LiveAppsDocumentUploadDialogComponent>);
    uploadFile: () => void;
    setFileDescription(description: string): void;
    attachFile(files: FileList): void;
    onNoClick(): void;
}
export declare class LiveAppsDocumentViewerDialogComponent {
    dialogRef: MatDialogRef<LiveAppsDocumentUploadDialogComponent>;
    data: any;
    doc: Document;
    folderType: string;
    folderId: string;
    sandboxId: number;
    constructor(dialogRef: MatDialogRef<LiveAppsDocumentUploadDialogComponent>, data: any);
    onNoClick(): void;
}
