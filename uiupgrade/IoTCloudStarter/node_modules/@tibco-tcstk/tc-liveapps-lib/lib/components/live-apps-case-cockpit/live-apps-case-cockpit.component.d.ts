import { AfterViewInit, ElementRef, EventEmitter, OnDestroy, OnInit } from '@angular/core';
import { Router } from '@angular/router';
import { Subject } from 'rxjs';
import { LiveAppsCaseActionsComponent } from '../live-apps-case-actions/live-apps-case-actions.component';
import { LiveAppsCaseAuditComponent } from '../live-apps-case-audit/live-apps-case-audit.component';
import { LiveAppsCaseDataComponent } from '../live-apps-case-data/live-apps-case-data.component';
import { LiveAppsCaseStateAuditComponent } from '../live-apps-case-state-audit/live-apps-case-state-audit.component';
import { LiveAppsCaseStatesComponent } from '../live-apps-case-states/live-apps-case-states.component';
import { LiveAppsDocumentsComponent } from '../live-apps-documents/live-apps-documents.component';
import { LiveAppsNotesComponent } from '../live-apps-notes/live-apps-notes.component';
import { LiveAppsCaseSummaryComponent } from '../live-apps-case-summary/live-apps-case-summary.component';
import { LiveAppsService } from '../../services/live-apps.service';
import { ToolbarButton, TcButtonsHelperService } from '@tibco-tcstk/tc-core-lib';
import { LaProcessSelection } from '../../models/tc-case-processes';
import { MatTab, MatTabChangeEvent, MatTabGroup } from '@angular/material';
import { QueryList } from '@angular/core';
import { RouteAction } from '@tibco-tcstk/tc-core-lib';
import { Roles, RouteAccessControlConfigurationElement } from '../../models/tc-groups-data';
import { TcRolesService } from '../../services/tc-roles-service.ts.service';
import { CustomFormDefs } from '@tibco-tcstk/tc-forms-lib';
import { LiveAppsLegacyFormComponent } from '../live-apps-legacy-form/live-apps-legacy-form.component';
import { CaseRoute, FormTab } from '../../models/liveappsdata';
import { FormControl } from '@angular/forms';
import { LiveAppsCaseActionComponent } from '../live-apps-case-action/live-apps-case-action.component';
import { LiveAppsWorkitemsComponent } from '../live-apps-workitems/live-apps-workitems.component';
/**
 * High level component to allow interaction with case.
 *
 *  ![alt-text](../live-apps-case-cockpit.png "Image")
 *
 *@example <tcla-live-apps-case-cockpit></tcla-live-apps-case-cockpit>
 */
export declare class LiveAppsCaseCockpitComponent implements OnInit, OnDestroy, AfterViewInit {
    protected liveapps: LiveAppsService;
    protected buttonsHelper: TcButtonsHelperService;
    protected router: Router;
    protected rolesService: TcRolesService;
    matTabGroup: MatTabGroup;
    inclusiveTabs: QueryList<MatTab>;
    tabsFromNgContent: QueryList<MatTab>;
    DEFAULT_CASE_DATA_LAYOUT: (string | {
        type: string;
        title: string;
        condition: string;
    })[];
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     */
    uiAppId: string;
    /**
     * The LA Application Id
     */
    appId: string;
    /**
     * The LA Application Type Id (generally 1)
     */
    typeId: string;
    /**
     * sandboxId - this comes from claims resolver
     */
    sandboxId: number;
    /**
     * The case reference
     */
    caseRef: string;
    /**
     * The workitem Id
     */
    workitemId: number;
    /**
     * The ID of the logged user
     */
    userId: string;
    /**
     * The list of LA Application Ids you want to mark as recent cases when accessed
     */
    exclRecentAppIds: string[];
    /**
     * Roles - The users current roles
     */
    roles: Roles;
    /**
     * RouteAccessControlConfig - basically the config for access control
     */
    access: RouteAccessControlConfigurationElement;
    /**
     * Custom Form configuration file
     */
    customFormDefs: CustomFormDefs;
    /**
     * Enable legacy workitems
     */
    legacyWorkitems: boolean;
    /**
     * Enable legacy actions
     */
    legacyActions: boolean;
    /**
     * Layout object that can be passed to override default layout of the form renderer
     */
    layout: any[];
    /**
     * Allow override of forms framework
     * Options: bootstrap-4 or material-design
     */
    formsFramework: string;
    /**
     * Whether to show workitems in context panel (default true)
     */
    showWorkitems: boolean;
    /**
     * Whether to show notes in context panel (default true)
     */
    showNotes: boolean;
    /**
     * Whether to show documents in context panel (default true)
     */
    showDocuments: boolean;
    /**
     * Whether to show states in context panel (default true)
     */
    showStates: boolean;
    /**
     * Whether to show audit in context panel (default true)
     */
    showAudit: boolean;
    /**
     * ~event routeAction : Component requests route to another page
     * ~payload RouteAction : RouteAction object to tell caller to navigate somewhere
     */
    routeAction: EventEmitter<RouteAction>;
    caseSummaryComponent: LiveAppsCaseSummaryComponent;
    caseDataComponent: LiveAppsCaseDataComponent;
    caseActionsComponent: LiveAppsCaseActionsComponent;
    caseActionComponent: LiveAppsCaseActionComponent;
    caseAuditComponent: LiveAppsCaseAuditComponent;
    caseDocumentsComponent: LiveAppsDocumentsComponent;
    caseNotesComponent: LiveAppsNotesComponent;
    caseStatesComponent: LiveAppsCaseStatesComponent;
    caseStateAuditComponent: LiveAppsCaseStateAuditComponent;
    workitemComponent: LiveAppsLegacyFormComponent;
    caseWorkitemsComponent: LiveAppsWorkitemsComponent;
    dataTabGroups: MatTabGroup;
    dataTabGroupEl: ElementRef;
    isFavorite: boolean;
    valid: boolean;
    toolbarButtons: ToolbarButton[];
    incConfigButton: boolean;
    incFavButton: boolean;
    incRefreshButton: boolean;
    incHomeButton: boolean;
    formTabs: FormTab[];
    selectedTab: FormTab;
    actionVisible: boolean;
    selected: FormControl;
    protected _destroyed$: Subject<{}>;
    protected errorMessage: string;
    constructor(liveapps: LiveAppsService, buttonsHelper: TcButtonsHelperService, router: Router, rolesService: TcRolesService);
    protected createToolbarButtons: () => ToolbarButton[];
    handleToolbarButtonEvent: (buttonId: string) => void;
    handleActionSelection: (actionSelection: LaProcessSelection) => void;
    handleActionCompleted: (formTab: FormTab) => void;
    handleClickWorkitem: (caseroute: CaseRoute) => void;
    refresh: () => void;
    toggleFavorite: () => void;
    handleWorkitemComplete: (wiId: any) => void;
    handleTabCancel: (formTab: FormTab) => void;
    addWiFormTab: (wiId: any) => void;
    addActionFormTab: (actionSelection: LaProcessSelection) => void;
    handleTabChange: (tabChange: MatTabChangeEvent) => void;
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngAfterViewInit(): void;
}
