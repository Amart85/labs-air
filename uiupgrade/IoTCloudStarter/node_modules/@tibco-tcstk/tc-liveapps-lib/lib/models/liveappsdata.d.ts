import { AccessToken, AuthInfo, Deserializable, DeserializableClass } from '@tibco-tcstk/tc-core-lib';
import { LaProcessSelection } from '../models/tc-case-processes';
export declare class FormTab extends DeserializableClass implements Deserializable {
    type: string;
    title: string;
    workitemId: number;
    action: LaProcessSelection;
}
export declare class NoteThread {
    threadId: string;
    showReplies: boolean;
    showNewReply: boolean;
    editMode: boolean;
    newReply: any;
    thread: Note[];
    note: Note;
    constructor(threadId: string, showReplies: boolean, showNewReply: boolean, editMode: boolean, newReply: any, thread: Note[], note: Note);
}
export declare class CaseRoute {
    caseRef: string;
    appId: string;
    typeId: string;
    workitemId: number;
    deserialize(input: any): this;
}
export declare class NotificationCollection {
    collectionName: string;
    lifecycledWithType: string;
    lifecycledWithId: string;
    constructor(collectionName: string, lifecycledWithType: string, lifecycledWithId: string);
}
export declare class Notification implements Deserializable {
    entityId: string;
    entityName: string;
    entityType: string;
    id: string;
    notifyCollection: NotificationCollection;
    notifyOnAllReplies: boolean;
    notifyOnUpdate: boolean;
    threadId: string;
    topicId: string;
    type: string;
    deserialize(input: any): this;
}
export declare class NotificationList implements Deserializable {
    notifications: Notification[];
    deserialize(input: any): this;
}
export declare class ThreadList implements Deserializable {
    threads: NoteThread[];
    deserialize(input: any): this;
}
export declare class Metadata {
    createdBy: string;
    creationTimestamp: string;
    createdByDetails: UserInfo;
    modifiedBy: string;
    modificationTimestamp: string;
    modifiedByDetails: UserInfo;
    lock: boolean;
    lockType: string;
    lockedBy: string;
    msLockExpiry: string;
    msSystemTime: string;
    markedForPurge: boolean;
    applicationId: string;
    applicationLabel: string;
    typeId: string;
    stateColor: string;
    stateIcon: string;
    caseTypeColor: string;
    caseTypeIcon: string;
    useCaseTypeColor: boolean;
    constructor(createdBy: string, creationTimestamp: string, createdByDetails: UserInfo, modifiedBy: string, modificationTimestamp: string, modifiedByDetails: UserInfo, lock: boolean, lockType: string, lockedBy: string, msLockExpiry: string, msSystemTime: string, markedForPurge: boolean, applicationId: string, applicationLabel: string, typeId: string, stateColor: string, stateIcon: string, caseTypeColor: string, caseTypeIcon: string, useCaseTypeColor: boolean);
}
export declare class CaseTypeState implements Deserializable {
    id: string;
    label: string;
    value: string;
    isTerminal: boolean;
    deserialize(input: any): this;
}
export declare class CaseTypeStatesListList implements Deserializable {
    casetypes: CaseTypeStatesList[];
    deserialize(input: any): this;
}
export declare class CaseTypeStatesList implements Deserializable {
    states: CaseTypeState[];
    deserialize(input: any): this;
}
export declare class CaseInfo implements Deserializable {
    deleted: boolean;
    caseReference: string;
    untaggedCasedata: string;
    untaggedCasedataObj: any;
    casedata: string;
    casedataObj: any;
    summary: string;
    summaryObj: any;
    metadata: Metadata;
    deserialize(input: any): this;
}
export declare class CaseInfoList implements Deserializable {
    caseinfos: CaseInfo[];
    casecount: string;
    deserialize(input: any): this;
}
export declare class CaseAttribute {
    isIdentifier: boolean;
    isMandatory: boolean;
    isStructuredType: true;
    label: string;
    name: string;
    type: string;
    maximum: number;
    minimum: number;
}
export declare class JsonSchema {
    $schema: string;
    definitions: any[];
    properties: any[];
    type: string;
    required: string[];
}
export declare class Process {
    jsonSchema: JsonSchema;
    name: string;
    id: string;
    unsupportedForm: boolean;
    deserialize(input: any): this;
}
export declare class ProcessId {
    caseIdentifier: string;
    caseReference: string;
    deserialize(input: any): this;
}
export declare class CaseType {
    actions: Process[];
    applicationId: string;
    applicationInternalName: string;
    applicationName: any;
    attributes: CaseAttribute[];
    creators: Process[];
    id: string;
    isCase: boolean;
    label: any;
    name: string;
    jsonSchema: JsonSchema;
    deserialize(input: any): this;
}
export declare class CaseTypesList implements Deserializable {
    casetypes: CaseType[];
    deserialize(input: any): this;
}
export declare class CaseAction implements Deserializable {
    activityName: string;
    applicationId: string;
    applicationName: string;
    availableInStates: string[];
    chatBotEnabled: boolean;
    id: string;
    label: string;
    name: string;
    noData: boolean;
    performerPaths: string[];
    roles: string[];
    version: number;
    process: Process;
    deserialize(input: any): this;
}
export declare class CaseActionsList implements Deserializable {
    actions: CaseAction[];
    deserialize(input: any): this;
}
export declare class CaseCreator implements Deserializable {
    activityName: string;
    applicationId: string;
    applicationName: string;
    chatBotEnabled: boolean;
    id: string;
    label: string;
    name: string;
    roles: string[];
    version: number;
    process: Process;
    deserialize(input: any): this;
}
export declare class CaseCreatorsList implements Deserializable {
    creators: CaseCreator[];
    deserialize(input: any): this;
}
export declare class CaseList implements Deserializable {
    uniqueKey: string;
    maxSize: number;
    caseRefs: string[];
    deserialize(input: any): this;
}
export declare class ApiResponseText implements Deserializable {
    message: string;
    deserialize(input: any): this;
}
export declare class ApiResponseError implements Deserializable {
    errorMsg: string;
    errorCode: string;
    contextAttributes: string[];
    deserialize(input: any): this;
}
export declare class UserInfo implements Deserializable {
    externalId: string;
    firstName: string;
    lastName: string;
    username: string;
    email: string;
    type: string;
    id: string;
    deserialize(input: any): this;
}
export declare class NotesRole implements Deserializable {
    entityId: string;
    entityName: string;
    entityType: string;
    id: string;
    role: string;
    threadId: string;
    deserialize(input: any): this;
}
export declare class Thread implements Deserializable {
    acceptedStatusCount: number;
    actionDate: number;
    actionId: string;
    actionType: string;
    answerNoteCount: number;
    answeredStatusCount: number;
    createdById: string;
    createdByName: string;
    createdDate: number;
    id: string;
    informationalNoteCount: number;
    isAbandoned: boolean;
    isLocked: boolean;
    isOrphaned: boolean;
    issueNoteCount: number;
    lifecycledWithId: boolean;
    lifecycledWithType: boolean;
    modifiedById: string;
    modifiedByName: string;
    modifiedDate: number;
    questionNoteCount: number;
    relatedItemCollection: string[];
    relatedItemId: string;
    relatedItemType: string;
    resolutionNoteCount: number;
    resolvedStatusCount: number;
    roles: NotesRole[];
    status: string;
    topLevelNoteId: string;
    topicId: string;
    totalCount: number;
    unacceptedStatusCount: number;
    unansweredStatusCount: number;
    unclassifiedStatusCount: number;
    unresolvedStatusCount: number;
    deserialize(input: any): this;
}
export declare class Note implements Deserializable {
    attributes: string[];
    createdById: string;
    createdByName: string;
    createdDate: number;
    descendantModifiedDate: number;
    id: string;
    isDescendantNewOrModified: boolean;
    isHidden: boolean;
    isModified: boolean;
    isNew: boolean;
    level: number;
    modifiedByName: string;
    modifiedDate: number;
    notificationLabel: string;
    notificationUrl: string;
    parentId: string;
    relatedItemCollection: string[];
    relatedItemId: string;
    relatedItemType: string;
    replyAcceptedId: string;
    replyCount: number;
    replyDate: number;
    status: string;
    text: string;
    thread: Thread;
    threadId: string;
    title: string;
    topicId: string;
    type: string;
    editMode: boolean;
    deserialize(input: any): this;
}
export declare class NotesList implements Deserializable {
    notes: Note[];
    deserialize(input: any): this;
}
export declare class IconMap {
    isCaseType: boolean;
    state: string;
    fill: string;
    icon: string;
    constructor(isCaseType: boolean, state: string, fill: string, icon: string);
}
export declare class CardConfig implements Deserializable {
    id: string;
    useCaseTypeColor: boolean;
    stateMap: IconMap[];
    deserialize(input: any): this;
}
export declare class LoginContext implements Deserializable {
    authInfo: AuthInfo;
    accessToken: AccessToken;
    deserialize(input: any): this;
}
export declare class CaseSearchResults implements Deserializable {
    caserefs: string[];
    searchString: string;
    deserialize(input: any): this;
}
