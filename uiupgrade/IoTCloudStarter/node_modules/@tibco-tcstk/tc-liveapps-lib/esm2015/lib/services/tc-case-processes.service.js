/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { CaseActionsList, CaseCreatorsList, JsonSchema, Process } from '../models/liveappsdata';
import { LaProcessSelection } from '../models/tc-case-processes';
import { LiveAppsService } from './live-apps.service';
import { throwError } from 'rxjs';
import { flatMap, map, tap } from 'rxjs/operators';
import { TcCaseDataService } from './tc-case-data.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./live-apps.service";
import * as i3 from "./tc-case-data.service";
export class TcCaseProcessesService {
    /**
     * @param {?} http
     * @param {?} liveAppsService
     * @param {?} caseDataService
     */
    constructor(http, liveAppsService, caseDataService) {
        this.http = http;
        this.liveAppsService = liveAppsService;
        this.caseDataService = caseDataService;
        this.getCaseIDAttributeName = (/**
         * @param {?} caseType
         * @return {?}
         */
        (caseType) => {
            /** @type {?} */
            let caseIdAttrib;
            caseType.attributes.forEach((/**
             * @param {?} attribute
             * @return {?}
             */
            (attribute) => {
                if (attribute.isIdentifier) {
                    caseIdAttrib = attribute;
                }
            }));
            return caseIdAttrib;
        });
        // this is a helper function that given a case type 'schema' for the whole application will create an LaProcessSelection object
        // containing both the appSchema and particular details for this action
        // this object is required to submit the process later.
        this.createLaProcessSelection = (/**
         * @param {?} schema
         * @param {?} appId
         * @param {?} typeId
         * @param {?} action
         * @param {?} creator
         * @param {?} caseRef
         * @return {?}
         */
        (schema, appId, typeId, action, creator, caseRef) => {
            /** @type {?} */
            let processSelection;
            schema.casetypes.forEach((/**
             * @param {?} casetype
             * @return {?}
             */
            (casetype) => {
                // the schema will contain definitions for both the 'case' and any defined types in that case.
                // We want the schema for this 'case'.
                if (casetype.applicationId === appId && casetype.id === typeId) {
                    // if ( casetype.jsonSchema !== undefined) {
                    if (action) {
                        /** @type {?} */
                        const caseActionList = casetype.actions ? casetype.actions : [];
                        // now find the selected action
                        caseActionList.forEach((/**
                         * @param {?} actionDef
                         * @return {?}
                         */
                        (actionDef) => {
                            if (action.id === actionDef.id) {
                                if (!actionDef.jsonSchema) {
                                    // create blank form schema
                                    actionDef.jsonSchema = new JsonSchema();
                                    actionDef.jsonSchema.type = 'object';
                                    actionDef.jsonSchema.properties = [];
                                }
                                processSelection = new LaProcessSelection('action', schema, this.getCaseIDAttributeName(casetype), actionDef, 
                                // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
                                (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'action' + '.' + actionDef.name), caseRef);
                            }
                        }));
                        if (!processSelection) {
                            // no schema for this process
                            /** @type {?} */
                            const process = new Process().deserialize({ jsonSchema: { $schema: 'NOSCHEMA' }, name: action.name, id: action.id });
                            processSelection = new LaProcessSelection('action', schema, this.getCaseIDAttributeName(casetype), process, 
                            // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
                            (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'action' + '.' + action.name), caseRef);
                        }
                    }
                    else if (creator) {
                        /** @type {?} */
                        const caseCreatorList = casetype.creators ? casetype.creators : [];
                        // now find the selected action
                        caseCreatorList.forEach((/**
                         * @param {?} creatorDef
                         * @return {?}
                         */
                        (creatorDef) => {
                            if (creator.id === creatorDef.id) {
                                if (!creatorDef.jsonSchema) {
                                    // create blank form schema
                                    creatorDef.jsonSchema = new JsonSchema();
                                    creatorDef.jsonSchema.type = 'object';
                                    creatorDef.jsonSchema.properties = [];
                                }
                                processSelection = new LaProcessSelection('creator', schema, this.getCaseIDAttributeName(casetype), creatorDef, 
                                // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
                                (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'creator' + '.' + creatorDef.name), null);
                            }
                        }));
                        if (!processSelection) {
                            // no schema for this process
                            /** @type {?} */
                            const process = new Process().deserialize({ jsonSchema: { $schema: 'NOSCHEMA' }, name: creator.name, id: creator.id });
                            processSelection = new LaProcessSelection('creator', schema, this.getCaseIDAttributeName(casetype), process, 
                            // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
                            (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'creator' + '.' + creator.name), null);
                        }
                    }
                }
                // }
            }));
            return processSelection;
        });
    }
    //  This service gets the case state then uses that and the caseRef to get the available actions.
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @return {?}
     */
    getCaseActionsForCaseRef(caseRef, sandboxId, appId, typeId) {
        /** @type {?} */
        const caseState$ = this.caseDataService.getCaseState(caseRef, sandboxId);
        /** @type {?} */
        const caseActions$ = caseState$.pipe(flatMap((/**
         * @param {?} caseState
         * @return {?}
         */
        caseState => {
            return this.getCaseActions(caseRef, sandboxId, appId, typeId, caseState);
        })));
        return caseActions$;
    }
    // todo: Note this is not a public API - update when Public API available
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} caseState
     * @return {?}
     */
    getCaseActions(caseRef, sandboxId, appId, typeId, caseState) {
        // https://eu.liveapps.cloud.tibco.com/pageflow/caseActions?$sandbox=31&
        // $filter=applicationId%20eq%201742%20and%20caseType%20eq%201%20and%20caseState%20eq%20Responded%20and%20caseRef%20eq%20150491
        /** @type {?} */
        const url = '/pageflow/v1/caseActions?$sandbox=' + sandboxId
            + '&$filter=applicationId eq ' + appId
            + ' and caseType eq ' + typeId
            + ' and caseState eq ' + caseState
            + ' and caseRef eq ' + caseRef;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} caseactions
         * @return {?}
         */
        caseactions => {
            /** @type {?} */
            const caList = new CaseActionsList().deserialize(caseactions);
            // non public API returns action Id as number, switch to string to match other APIs
            caList.actions.forEach((/**
             * @param {?} action
             * @return {?}
             */
            action => {
                if (typeof action.id === 'number') {
                    action.id = String(action.id);
                }
            }));
            return caList;
        })));
    }
    // todo: Note this is not a public API - update when Public API available
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @return {?}
     */
    getCaseCreators(sandboxId, appId, typeId) {
        /** @type {?} */
        const url = '/pageflow/v1/caseCreators?$sandbox=' + sandboxId
            + '&$filter=applicationId eq ' + appId
            + ' and caseType eq ' + typeId;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} casecreators
         * @return {?}
         */
        casecreators => {
            /** @type {?} */
            const ccList = new CaseCreatorsList().deserialize(casecreators);
            // non public API returns creator Id as number, switch to string to match other APIs
            ccList.creators.forEach((/**
             * @param {?} creator
             * @return {?}
             */
            creator => {
                if (typeof creator.id === 'number') {
                    creator.id = String(creator.id);
                }
            }));
            return ccList;
        })));
    }
    /**
     * @param {?} caseRef
     * @param {?} appId
     * @param {?} typeId
     * @param {?} sandboxId
     * @param {?} action
     * @param {?} creator
     * @param {?} top
     * @return {?}
     */
    getProcessDetails(caseRef, appId, typeId, sandboxId, action, creator, top) {
        return this.liveAppsService.getCaseTypeSchema(sandboxId, appId, top).pipe(map((/**
         * @param {?} schema
         * @return {?}
         */
        schema => {
            return this.createLaProcessSelection(schema, appId, typeId, action ? action : null, creator ? creator : null, caseRef);
        })));
    }
    /**
     * @param {?} caseRef
     * @param {?} appId
     * @param {?} typeId
     * @param {?} sandboxId
     * @param {?} updateActionLabel
     * @param {?} data
     * @return {?}
     */
    caseDataFormUpdate(caseRef, appId, typeId, sandboxId, updateActionLabel, data) {
        // get the creator details
        /** @type {?} */
        const creators$ = this.getCaseActionsForCaseRef(caseRef, sandboxId, appId, typeId);
        return creators$.pipe(flatMap((/**
         * @param {?} actions
         * @return {?}
         */
        (actions) => {
            /** @type {?} */
            const updateAction = actions.actions.find((/**
             * @param {?} act
             * @return {?}
             */
            act => {
                return act.label === updateActionLabel;
            }));
            if (updateAction) {
                return this.liveAppsService.runProcess(sandboxId, appId, updateAction.id, caseRef, data);
            }
            else {
                console.error('No update action found with label:', updateActionLabel);
                throwError('No update action found with label: ' + updateActionLabel);
            }
        })));
    }
}
TcCaseProcessesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TcCaseProcessesService.ctorParameters = () => [
    { type: HttpClient },
    { type: LiveAppsService },
    { type: TcCaseDataService }
];
/** @nocollapse */ TcCaseProcessesService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcCaseProcessesService_Factory() { return new TcCaseProcessesService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LiveAppsService), i0.ɵɵinject(i3.TcCaseDataService)); }, token: TcCaseProcessesService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcCaseProcessesService.prototype.getCaseIDAttributeName;
    /**
     * @type {?}
     * @private
     */
    TcCaseProcessesService.prototype.createLaProcessSelection;
    /**
     * @type {?}
     * @private
     */
    TcCaseProcessesService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TcCaseProcessesService.prototype.liveAppsService;
    /**
     * @type {?}
     * @private
     */
    TcCaseProcessesService.prototype.caseDataService;
}
//# sourceMappingURL=data:application/json;base64,