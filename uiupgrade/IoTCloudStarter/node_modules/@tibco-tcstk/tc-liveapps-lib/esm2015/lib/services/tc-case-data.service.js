/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { zip } from 'rxjs';
import { CaseInfo } from '../models/liveappsdata';
import { LiveAppsService } from './live-apps.service';
import { HttpClient } from '@angular/common/http';
import { CaseInfoWithSchema, PurgeResult } from '../models/tc-case-data';
import { map, tap } from 'rxjs/operators';
import { TcCaseCardConfigService } from './tc-case-card-config.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./live-apps.service";
import * as i3 from "./tc-case-card-config.service";
export class TcCaseDataService {
    /**
     * @param {?} http
     * @param {?} liveAppsService
     * @param {?} caseCardConfigService
     */
    constructor(http, liveAppsService, caseCardConfigService) {
        this.http = http;
        this.liveAppsService = liveAppsService;
        this.caseCardConfigService = caseCardConfigService;
    }
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @return {?}
     */
    getCaseState(caseRef, sandboxId) {
        /** @type {?} */
        const url = '/case/v1/cases/' + caseRef + '/' + '?$sandbox=' + sandboxId + '&$select=s';
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} caseinfo
         * @return {?}
         */
        caseinfo => {
            /** @type {?} */
            const caseinf = new CaseInfo().deserialize(caseinfo);
            /** @type {?} */
            const state = caseinf.summaryObj.state;
            return state;
        })));
    }
    /**
     * @param {?} applicationId
     * @param {?} typeId
     * @param {?} sandboxId
     * @return {?}
     */
    purgeAllCases(applicationId, typeId, sandboxId) {
        /** @type {?} */
        const url = '/case/v1/cases/?$sandbox=1930&$filter=applicationId eq 2550 and typeId eq 1 and purgeable eq TRUE';
        return this.http.delete(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} result
         * @return {?}
         */
        result => {
            return new PurgeResult().deserialize(result);
        })));
    }
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} uiAppId
     * @return {?}
     */
    getCaseWithSchema(caseRef, sandboxId, appId, typeId, uiAppId) {
        /** @type {?} */
        const url = '/case/v1/cases/' + caseRef + '/' + '?$sandbox=' + sandboxId + '&$select=uc, m, s';
        // Make the two required API calls
        /** @type {?} */
        const caseSchema = this.liveAppsService.getCaseTypeSchema(sandboxId, appId, 100).pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} typesList
         * @return {?}
         */
        typesList => {
            // get schema for case type
            /** @type {?} */
            let requestedType;
            typesList.casetypes.forEach((/**
             * @param {?} cType
             * @return {?}
             */
            (cType) => {
                if (cType.id === typeId) {
                    requestedType = cType;
                }
            }));
            return requestedType;
        })));
        /** @type {?} */
        const caseData = this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} caseinfo
         * @return {?}
         */
        caseinfo => {
            /** @type {?} */
            const caseinf = new CaseInfo().deserialize(caseinfo);
            this.caseCardConfigService.parseCaseInfo(caseinf, sandboxId, caseinf.metadata.applicationId, caseinf.metadata.typeId, uiAppId);
            return caseinf;
        })));
        // Combine the results of both calls into a single response
        /** @type {?} */
        const test1 = zip(caseSchema, caseData).pipe(map((/**
         * @param {?} caseInfoArray
         * @return {?}
         */
        caseInfoArray => {
            return new CaseInfoWithSchema().deserialize({ caseInfo: caseInfoArray[1], caseSchema: caseInfoArray[0].jsonSchema, applicationName: caseInfoArray[0].applicationName, applicationInternalName: caseInfoArray[0].applicationInternalName, name: caseInfoArray[0].name });
        })));
        return test1;
    }
}
TcCaseDataService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TcCaseDataService.ctorParameters = () => [
    { type: HttpClient },
    { type: LiveAppsService },
    { type: TcCaseCardConfigService }
];
/** @nocollapse */ TcCaseDataService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcCaseDataService_Factory() { return new TcCaseDataService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LiveAppsService), i0.ɵɵinject(i3.TcCaseCardConfigService)); }, token: TcCaseDataService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcCaseDataService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TcCaseDataService.prototype.liveAppsService;
    /**
     * @type {?}
     * @private
     */
    TcCaseDataService.prototype.caseCardConfigService;
}
//# sourceMappingURL=data:application/json;base64,