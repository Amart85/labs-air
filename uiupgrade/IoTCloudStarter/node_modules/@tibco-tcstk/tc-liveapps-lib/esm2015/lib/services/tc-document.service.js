/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { throwError } from 'rxjs';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { ApiResponseError, ApiResponseText } from '../models/liveappsdata';
import { LiveAppsService } from './live-apps.service';
import { DocumentList, OrgFolder } from '../models/tc-document';
import { catchError, flatMap, map, tap } from 'rxjs/operators';
import { TcCoreCommonFunctions } from '@tibco-tcstk/tc-core-lib';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./live-apps.service";
export class TcDocumentService {
    /**
     * @param {?} http
     * @param {?} liveapps
     */
    constructor(http, liveapps) {
        this.http = http;
        this.liveapps = liveapps;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    createOrgFolder(name) {
        /** @type {?} */
        const url = '/webresource/v1/orgFolders/';
        /** @type {?} */
        const body = new OrgFolder().deserialize({ name: name });
        /** @type {?} */
        const bodyStr = JSON.stringify(body);
        /** @type {?} */
        const headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.post(url, bodyStr, { headers }).pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} response
         * @return {?}
         */
        response => new ApiResponseText().deserialize(response))));
    }
    /**
     * @param {?} name
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    getOrgFolder(name, useCache, flushCache) {
        /** @type {?} */
        const url = '/webresource/v1/orgFolders/' + name + '/';
        /** @type {?} */
        let headers = new HttpHeaders();
        if (useCache) {
            headers = headers.set('cacheResponse', 'true');
        }
        if (flushCache) {
            headers = headers.set('flushCache', 'true');
        }
        /** @type {?} */
        const options = { headers: headers };
        return this.http.get(url, options).pipe(map((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            return new OrgFolder().deserialize(response);
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            /** @type {?} */
            const apiError = new ApiResponseError().deserialize(error.error);
            if (apiError.errorCode === 'WR_FOLDER_DOES_NOT_EXIST') {
                return this.createOrgFolder(name).pipe(flatMap((/**
                 * @param {?} newOrgFolder
                 * @return {?}
                 */
                newOrgFolder => {
                    // trigger cache flush
                    return this.getOrgFolder(name, true, true);
                })));
            }
            else {
                throwError(error);
            }
        })));
    }
    /**
     * @param {?} name
     * @return {?}
     */
    initOrgFolder(name) {
        /** @type {?} */
        const orgFolder$ = this.getOrgFolder(name, true, false).pipe(map((/**
         * @param {?} orgFolderResp
         * @return {?}
         */
        orgFolderResp => {
            return new ApiResponseText().deserialize({ message: 'orgFolder ok' });
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        error => {
            /** @type {?} */
            const apiError = new ApiResponseError().deserialize(error.error);
            if (apiError.errorCode === 'WR_FOLDER_DOES_NOT_EXIST') {
                return this.createOrgFolder(name).pipe(map((/**
                 * @param {?} newOrgFolder
                 * @return {?}
                 */
                newOrgFolder => {
                    // trigger cache flush
                    this.getOrgFolder(name, true, true).subscribe();
                    return newOrgFolder;
                })));
            }
            else {
                throwError(error);
            }
        })));
        return orgFolder$;
    }
    /**
     * @param {?} folderType
     * @param {?} folderId
     * @param {?} sandboxId
     * @param {?} filter
     * @return {?}
     */
    listDocuments(folderType, folderId, sandboxId, filter) {
        /** @type {?} */
        let url;
        url = '/webresource/v1/' + folderType + '/' + folderId + '/artifacts/';
        if (sandboxId) {
            url = url + '?$sandbox=' + sandboxId;
        }
        if (filter) {
            url = url + '&$filter=contains(name,\'' + filter + '\')';
        }
        return this.http.get(url)
            .pipe(map((/**
         * @param {?} docs
         * @return {?}
         */
        docs => {
            /** @type {?} */
            const docList = new DocumentList().deserialize(docs);
            for (let x = 0; x < docList.documents.length; x++) {
                docList.documents[x] = this.parseDocument(docList.documents[x]);
            }
            return docList;
        })));
    }
    /**
     * @private
     * @param {?} document
     * @return {?}
     */
    parseDocument(document) {
        /** @type {?} */
        const splitDocName = document.name.split('.');
        if (splitDocName.length > 1) {
            document.extension = splitDocName[splitDocName.length - 1];
        }
        else {
            document.extension = '';
        }
        document.fileIcon = this.getIcon(document.extension);
        document.fileSize = TcCoreCommonFunctions.fileSizeToHuman(Number(document.size));
        this.liveapps.getUserInfo(document.author).subscribe((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            document.authorDetails = val;
            return document;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => { console.log('Unable to retrieve user details for user: ' + error.errorMsg); }));
        this.liveapps.getUserInfo(document.lastModifiedBy).subscribe((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            document.lastModifiedByDetails = val;
            return document;
        }), (/**
         * @param {?} error
         * @return {?}
         */
        error => { console.log('Unable to retrieve user details for user: ' + error.errorMsg); }));
        return document;
    }
    /**
     * @param {?} folderType
     * @param {?} folderId
     * @param {?} documentName
     * @param {?} sandboxId
     * @return {?}
     */
    deleteDocument(folderType, folderId, documentName, sandboxId) {
        /** @type {?} */
        const url = '/webresource/v1/' + folderType + '/' + folderId + '/artifacts/' + documentName + '?$sandbox=' + sandboxId;
        return this.http.delete(url)
            .pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        val => new ApiResponseText().deserialize(val))));
    }
    /**
     * @param {?} folderType
     * @param {?} folderId
     * @param {?} docId
     * @param {?} docVersion
     * @param {?} sandboxId
     * @return {?}
     */
    getUrlForDocument(folderType, folderId, docId, docVersion, sandboxId) {
        /** @type {?} */
        let url = '/webresource/';
        if (folderType === 'orgFolders') {
            url = url + 'orgFolders/' + folderId;
        }
        else {
            url = url + 'folders/' + folderId;
        }
        if (sandboxId && folderType !== 'orgFolders') {
            url = url + '/' + sandboxId;
        }
        url = url + '/' + docId;
        if (docVersion) {
            url = url + '?$version=' + docVersion;
        }
        return url;
    }
    /**
     * @param {?} folderType
     * @param {?} folderId
     * @param {?} docId
     * @param {?} docVersion
     * @param {?} sandboxId
     * @return {?}
     */
    downloadDocument(folderType, folderId, docId, docVersion, sandboxId) {
        /** @type {?} */
        let url = '/webresource/';
        if (folderType === 'orgFolders') {
            url = url + 'orgFolders/' + folderId;
        }
        else {
            url = url + 'folders/' + folderId;
        }
        if (sandboxId && folderType !== 'orgFolders') {
            url = url + '/' + sandboxId;
        }
        url = url + '/' + docId + '?$download=true';
        if (docVersion) {
            url = url + '&$version=' + docVersion;
        }
        // todo: Check whether application/octet-stream is ok or whether we should change it
        /** @type {?} */
        const headers = new HttpHeaders({
            'Content-Type': 'application/octet-stream',
        });
        return this.http.get(url, { headers, responseType: (/** @type {?} */ ('blob')) });
    }
    /**
     * @param {?} folderType
     * @param {?} folderId
     * @param {?} sandboxId
     * @param {?} fileToUpload
     * @param {?} fileName
     * @param {?} description
     * @return {?}
     */
    uploadDocument(folderType, folderId, sandboxId, fileToUpload, fileName, description) {
        /** @type {?} */
        let url = '/webresource/v1/' + folderType
            + '/' + folderId
            + '/artifacts/' + fileName + '/upload/';
        if (sandboxId) {
            url = url + '?$sandbox=' + sandboxId;
        }
        if (description) {
            url = url + '&description=' + description;
        }
        /** @type {?} */
        const headers = new HttpHeaders({
            'accept': 'application/json',
            'Content-Type': 'multipart/form-data',
            'filename': fileName,
            'enctype': 'multipart/form-data'
        });
        /** @type {?} */
        const formData = new FormData();
        formData.append('artifactContents', fileToUpload);
        return this.http.post(url, formData, { headers: headers, reportProgress: true, observe: 'events' });
    }
    /**
     * @private
     * @param {?} extension
     * @return {?}
     */
    getIcon(extension) {
        if (extension === 'txt') {
            return ('doc');
        }
        else if (extension === 'css') {
            return ('doc');
        }
        else if (extension === 'js') {
            return ('doc');
        }
        else if (extension === 'pdf') {
            return ('doc');
        }
        else if (extension === 'xml') {
            return ('doc');
        }
        else if (extension === 'doc') {
            return ('doc');
        }
        else if (extension === 'zip') {
            return ('zip');
        }
        else if (extension === 'ppt') {
            return ('doc');
        }
        else if (extension === 'png') {
            return ('image');
        }
        else {
            return ('doc');
        }
    }
}
TcDocumentService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TcDocumentService.ctorParameters = () => [
    { type: HttpClient },
    { type: LiveAppsService }
];
/** @nocollapse */ TcDocumentService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcDocumentService_Factory() { return new TcDocumentService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LiveAppsService)); }, token: TcDocumentService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcDocumentService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TcDocumentService.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,