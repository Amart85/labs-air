/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { CaseType } from '../../models/liveappsdata';
import { CustomFormDefs } from '@tibco-tcstk/tc-forms-lib';
/**
 * Wraps case creators component (high level component)
 *
 * \@example <tcla-live-apps-case-creator-widget></tcla-live-apps-case-creator-widget>
 */
export class LiveAppsCaseCreatorWidgetComponent {
    constructor() {
        /**
         * ~event caseCreated : Case Creator started (process started)
         * ~payload ProcessId : ProcessId object output on case creation (details of process started)
         */
        this.caseCreated = new EventEmitter();
        // handle case created
        this.handleCaseCreation = (/**
         * @param {?} processId
         * @return {?}
         */
        (processId) => {
            this.caseCreated.emit(processId);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
LiveAppsCaseCreatorWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-case-creator-widget',
                template: "<div>\n  <div fxLayout=\"row\" fxLayout=\"start stretch\">\n    <span style=\"width: 185px\">Select Case Creator: </span>\n    <tcla-live-apps-creators fxFlex [sandboxId]=\"sandboxId\" [applicationId]=\"application.id\" [typeId]=\"application.id\" (caseCreated)=\"handleCaseCreation($event)\"></tcla-live-apps-creators>\n  </div>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
LiveAppsCaseCreatorWidgetComponent.ctorParameters = () => [];
LiveAppsCaseCreatorWidgetComponent.propDecorators = {
    application: [{ type: Input }],
    sandboxId: [{ type: Input }],
    uiAppId: [{ type: Input }],
    initialData: [{ type: Input }],
    customFormDefs: [{ type: Input }],
    caseCreated: [{ type: Output }]
};
if (false) {
    /**
     * CaseType model for the case type you want to run a case creator for (normally comes from an application selector component)
     * @type {?}
     */
    LiveAppsCaseCreatorWidgetComponent.prototype.application;
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsCaseCreatorWidgetComponent.prototype.sandboxId;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     * @type {?}
     */
    LiveAppsCaseCreatorWidgetComponent.prototype.uiAppId;
    /**
     * override the initial data for a case creator
     * @type {?}
     */
    LiveAppsCaseCreatorWidgetComponent.prototype.initialData;
    /**
     * Custom Form configuration file
     * @type {?}
     */
    LiveAppsCaseCreatorWidgetComponent.prototype.customFormDefs;
    /**
     * ~event caseCreated : Case Creator started (process started)
     * ~payload ProcessId : ProcessId object output on case creation (details of process started)
     * @type {?}
     */
    LiveAppsCaseCreatorWidgetComponent.prototype.caseCreated;
    /** @type {?} */
    LiveAppsCaseCreatorWidgetComponent.prototype.handleCaseCreation;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWNhc2UtY3JlYXRvci13aWRnZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2xpdmUtYXBwcy1jYXNlLWNyZWF0b3Itd2lkZ2V0L2xpdmUtYXBwcy1jYXNlLWNyZWF0b3Itd2lkZ2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFDLFFBQVEsRUFBWSxNQUFNLDJCQUEyQixDQUFDO0FBRTlELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQzs7Ozs7O0FBWXpELE1BQU0sT0FBTyxrQ0FBa0M7SUFnQzdDOzs7OztRQURVLGdCQUFXLEdBQTRCLElBQUksWUFBWSxFQUFhLENBQUM7O1FBSXhFLHVCQUFrQjs7OztRQUFHLENBQUMsU0FBb0IsRUFBRSxFQUFFO1lBQ25ELElBQUksQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1FBQ25DLENBQUMsRUFBQTtJQUxlLENBQUM7Ozs7SUFPakIsUUFBUTtJQUNSLENBQUM7OztZQTdDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9DQUFvQztnQkFDOUMsK1ZBQTZEOzthQUU5RDs7Ozs7MEJBS0UsS0FBSzt3QkFLTCxLQUFLO3NCQUtMLEtBQUs7MEJBS0wsS0FBSzs2QkFLTCxLQUFLOzBCQU9MLE1BQU07Ozs7Ozs7SUEzQlAseURBQStCOzs7OztJQUsvQix1REFBMkI7Ozs7O0lBSzNCLHFEQUF5Qjs7Ozs7SUFLekIseURBQTBCOzs7OztJQUsxQiw0REFBd0M7Ozs7OztJQU94Qyx5REFBK0U7O0lBSS9FLGdFQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDYXNlVHlwZSwgUHJvY2Vzc0lkfSBmcm9tICcuLi8uLi9tb2RlbHMvbGl2ZWFwcHNkYXRhJztcbmltcG9ydCB7TGFQcm9jZXNzU2VsZWN0aW9ufSBmcm9tICcuLi8uLi9tb2RlbHMvdGMtY2FzZS1wcm9jZXNzZXMnO1xuaW1wb3J0IHtDdXN0b21Gb3JtRGVmc30gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWZvcm1zLWxpYic7XG5cbi8qKlxuICogV3JhcHMgY2FzZSBjcmVhdG9ycyBjb21wb25lbnQgKGhpZ2ggbGV2ZWwgY29tcG9uZW50KVxuICpcbiAqQGV4YW1wbGUgPHRjbGEtbGl2ZS1hcHBzLWNhc2UtY3JlYXRvci13aWRnZXQ+PC90Y2xhLWxpdmUtYXBwcy1jYXNlLWNyZWF0b3Itd2lkZ2V0PlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0Y2xhLWxpdmUtYXBwcy1jYXNlLWNyZWF0b3Itd2lkZ2V0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpdmUtYXBwcy1jYXNlLWNyZWF0b3Itd2lkZ2V0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbGl2ZS1hcHBzLWNhc2UtY3JlYXRvci13aWRnZXQuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIExpdmVBcHBzQ2FzZUNyZWF0b3JXaWRnZXRDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAvKipcbiAgICogQ2FzZVR5cGUgbW9kZWwgZm9yIHRoZSBjYXNlIHR5cGUgeW91IHdhbnQgdG8gcnVuIGEgY2FzZSBjcmVhdG9yIGZvciAobm9ybWFsbHkgY29tZXMgZnJvbSBhbiBhcHBsaWNhdGlvbiBzZWxlY3RvciBjb21wb25lbnQpXG4gICAqL1xuICBASW5wdXQoKSBhcHBsaWNhdGlvbjogQ2FzZVR5cGU7XG5cbiAgLyoqXG4gICAqIHNhbmRib3hJZCAtIHRoaXMgY29tZXMgZnJvbSBjbGFpbXMgcmVzb2x2ZXJcbiAgICovXG4gIEBJbnB1dCgpIHNhbmRib3hJZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgQXBwbGljYXRpb24gSUQgb2YgdGhlIFVJIChzaG91bGQgaWRlYWxseSBiZSB1bmlxdWUgYXMgaXQgaXMgc2hhcmVkIHN0YXRlIGtleSlcbiAgICovXG4gIEBJbnB1dCgpIHVpQXBwSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogb3ZlcnJpZGUgdGhlIGluaXRpYWwgZGF0YSBmb3IgYSBjYXNlIGNyZWF0b3JcbiAgICovXG4gIEBJbnB1dCgpIGluaXRpYWxEYXRhOiBhbnk7XG5cbiAgLyoqXG4gICAqIEN1c3RvbSBGb3JtIGNvbmZpZ3VyYXRpb24gZmlsZVxuICAgKi9cbiAgQElucHV0KCkgY3VzdG9tRm9ybURlZnM6IEN1c3RvbUZvcm1EZWZzO1xuXG5cbiAgLyoqXG4gICAqIH5ldmVudCBjYXNlQ3JlYXRlZCA6IENhc2UgQ3JlYXRvciBzdGFydGVkIChwcm9jZXNzIHN0YXJ0ZWQpXG4gICAqIH5wYXlsb2FkIFByb2Nlc3NJZCA6IFByb2Nlc3NJZCBvYmplY3Qgb3V0cHV0IG9uIGNhc2UgY3JlYXRpb24gKGRldGFpbHMgb2YgcHJvY2VzcyBzdGFydGVkKVxuICAgKi9cbiAgQE91dHB1dCgpIGNhc2VDcmVhdGVkOiBFdmVudEVtaXR0ZXI8UHJvY2Vzc0lkPiA9IG5ldyBFdmVudEVtaXR0ZXI8UHJvY2Vzc0lkPigpO1xuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIC8vIGhhbmRsZSBjYXNlIGNyZWF0ZWRcbiAgcHVibGljIGhhbmRsZUNhc2VDcmVhdGlvbiA9IChwcm9jZXNzSWQ6IFByb2Nlc3NJZCkgPT4ge1xuICAgIHRoaXMuY2FzZUNyZWF0ZWQuZW1pdChwcm9jZXNzSWQpO1xuICB9XG5cbiAgbmdPbkluaXQoKTogdm9pZCB7XG4gIH1cblxufVxuIl19