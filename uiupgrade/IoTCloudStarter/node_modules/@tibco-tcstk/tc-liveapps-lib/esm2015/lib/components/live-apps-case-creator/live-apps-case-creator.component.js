/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { ProcessId } from '../../models/liveappsdata';
import { LaProcessSelection } from '../../models/tc-case-processes';
import { LiveAppsService } from '../../services/live-apps.service';
import { take, takeUntil } from 'rxjs/operators';
import { CustomFormDefs } from '@tibco-tcstk/tc-forms-lib';
/**
 * Handles rendering of case creator form.
 *
 * \@example <tcla-live-apps-case-creator></tcla-live-apps-case-creator>
 */
export class LiveAppsCaseCreatorComponent extends LiveAppsComponent {
    /**
     * @param {?} liveapps
     */
    constructor(liveapps) {
        super();
        this.liveapps = liveapps;
        /**
         * Enable legacy creators
         */
        this.legacyCreators = this.legacyCreators ? this.legacyCreators : false;
        /**
         * Allow override of forms framework
         * Options: bootstrap-4 or material-design
         */
        this.formsFramework = this.formsFramework ? this.formsFramework : 'material-design';
        /**
         * ~event caseChanged : Case action started (process started)
         * ~payload ProcessId : ProcessId object passed when a case has been updated or created by a process (action/creator)
         */
        this.caseChanged = new EventEmitter();
        this.isCustomForm = false;
        this.handleSubmit = (/**
         * @param {?} data
         * @param {?} caseRef
         * @return {?}
         */
        (data, caseRef) => {
            // if no_process_submit then no need to run process as this was done inside a custom form app
            if (data !== 'NO_PROCESS_SUBMIT') {
                // run the process
                this.liveapps.runProcess(this.sandboxId, this.applicationId, this.process.process.id, caseRef, data)
                    .pipe(take(1), takeUntil(this._destroyed$))
                    .subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                response => {
                    if (response) {
                        if (!response.data.errorMsg) {
                            // parse data to object
                            response.data = JSON.parse(response.data);
                            // case created send back response including caseIdentifier if one is present
                            /** @type {?} */
                            let caseIdentifier;
                            /** @type {?} */
                            let caseReference;
                            if (response.caseIdentifier) {
                                caseIdentifier = response.caseIdentifier;
                            }
                            if (response.caseReference) {
                                caseReference = response.caseReference;
                            }
                            /** @type {?} */
                            const processResponse = new ProcessId().deserialize({ 'caseIdentifier': caseIdentifier, 'caseReference': caseReference });
                            this.caseChanged.emit(processResponse);
                            this.schema = undefined;
                            this.data = undefined;
                            this.layout = undefined;
                        }
                        else {
                            console.error('Unable to run case creator');
                            console.error(response.data.errorMsg);
                        }
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    console.error('Unable to run case creator');
                    console.error(error);
                }));
            }
            else {
                /** @type {?} */
                const processResponse = new ProcessId().deserialize({ 'caseIdentifier': undefined, 'caseReference': undefined });
                this.caseChanged.emit(processResponse);
                this.schema = undefined;
                this.data = undefined;
                this.layout = undefined;
            }
        });
        this.handleLegacyProcessComplete = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const processResponse = new ProcessId().deserialize({ 'caseIdentifier': undefined, 'caseReference': undefined });
            this.caseChanged.emit(processResponse);
        });
        this.handleLegacyProcessCancelled = (/**
         * @return {?}
         */
        () => {
            // -1 for caseReference means cancelled
            /** @type {?} */
            const processResponse = new ProcessId().deserialize({ 'caseIdentifier': undefined, 'caseReference': '-1' });
            this.caseChanged.emit(processResponse);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.options = {
            defaultOptions: {
                'appearance': 'legacy'
            }
        };
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // handle input param changes
        if (changes.process && changes.process.currentValue && (changes.process.currentValue !== changes.process.previousValue)) {
            if (this.customFormDefs && this.customFormDefs.customForms) {
                this.isCustomForm = (this.customFormDefs.customForms.findIndex((/**
                 * @param {?} form
                 * @return {?}
                 */
                (form) => {
                    return (form === this.process.ref);
                })) !== -1);
            }
            else {
                this.isCustomForm = false;
            }
            if (changes.process.currentValue.process.jsonSchema.$schema === 'NOSCHEMA') {
                this.schema = undefined;
            }
            else {
                this.schema = changes.process.currentValue.process.jsonSchema;
            }
        }
        else if (changes.applicationId && (changes.applicationId.currentValue !== changes.applicationId.previousValue)) {
            // appId has changed: make sure no process selected/form displayed
            this.process = undefined;
        }
        if (changes.layout && (changes.layout.currentValue !== changes.layout.previousValue)) {
            this.layout = changes.layout.currentValue;
        }
        if (changes.dataOverride && (changes.dataOverride.currentValue !== changes.dataOverride.previousValue)) {
            this.data = this.dataOverride;
        }
    }
}
LiveAppsCaseCreatorComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-case-creator',
                template: "<div fxFill>\n  <tcfrm-rendered-form *ngIf=\"process && (!legacyCreators || isCustomForm)\" style=\"overflow: auto;\" [formsFramework]=\"formsFramework\" [customFormDefs]=customFormDefs [formRef]=\"process.ref\" [appId]=\"applicationId\" [customFormDefs]=\"customFormDefs\" [schema]=\"schema\" [layout]=\"layout\" [data]=\"data\" [options]=\"options\" (formSubmit)=\"handleSubmit($event, undefined)\"></tcfrm-rendered-form>\n  <tcla-live-apps-legacy-process *ngIf=\"process && legacyCreators && !isCustomForm\" [process]=\"process\" [type]=\"'creator'\" [applicationId]=\"applicationId\" [typeId]=\"typeId\" (processCancelled)=\"handleLegacyProcessCancelled()\" (processComplete)=\"handleLegacyProcessComplete()\" class=\"live-apps-widget\" fxFill></tcla-live-apps-legacy-process>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
LiveAppsCaseCreatorComponent.ctorParameters = () => [
    { type: LiveAppsService }
];
LiveAppsCaseCreatorComponent.propDecorators = {
    sandboxId: [{ type: Input }],
    applicationId: [{ type: Input }],
    typeId: [{ type: Input }],
    process: [{ type: Input }],
    dataOverride: [{ type: Input }],
    customFormDefs: [{ type: Input }],
    legacyCreators: [{ type: Input }],
    formsFramework: [{ type: Input }],
    caseChanged: [{ type: Output }]
};
if (false) {
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.sandboxId;
    /**
     * LA application ID
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.applicationId;
    /**
     * The LA Application Type Id (generally 1)
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.typeId;
    /**
     * The process definition of the action or creator to execute
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.process;
    /**
     * Data object that will be displayed on the form. Allows overriding over form data (eg. when selecting data in spotfire)
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.dataOverride;
    /**
     * Custom Form configuration file
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.customFormDefs;
    /**
     * Enable legacy creators
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.legacyCreators;
    /**
     * Allow override of forms framework
     * Options: bootstrap-4 or material-design
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.formsFramework;
    /**
     * ~event caseChanged : Case action started (process started)
     * ~payload ProcessId : ProcessId object passed when a case has been updated or created by a process (action/creator)
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.caseChanged;
    /** @type {?} */
    LiveAppsCaseCreatorComponent.prototype.data;
    /** @type {?} */
    LiveAppsCaseCreatorComponent.prototype.schema;
    /** @type {?} */
    LiveAppsCaseCreatorComponent.prototype.layout;
    /** @type {?} */
    LiveAppsCaseCreatorComponent.prototype.options;
    /** @type {?} */
    LiveAppsCaseCreatorComponent.prototype.isCustomForm;
    /** @type {?} */
    LiveAppsCaseCreatorComponent.prototype.handleSubmit;
    /** @type {?} */
    LiveAppsCaseCreatorComponent.prototype.handleLegacyProcessComplete;
    /** @type {?} */
    LiveAppsCaseCreatorComponent.prototype.handleLegacyProcessCancelled;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsCaseCreatorComponent.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,