/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BaseChartDirective } from 'ng2-charts';
import { TcLiveAppsReportingService } from '../../services/tc-live-apps-reporting.service';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { take, takeUntil } from 'rxjs/operators';
import { DEFAULT_COLORS, DEFAULT_TYPE_COLOR } from '../../services/tc-case-card-config.service';
/**
 * Home page active cases widget sub component
 *
 * \@example <tcla-live-apps-active-cases-report></tcla-live-apps-active-cases-report>
 */
export class LiveAppsActiveCasesReportComponent extends LiveAppsComponent {
    /**
     * @param {?} reportingService
     */
    constructor(reportingService) {
        super();
        this.reportingService = reportingService;
        /**
         * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
         */
        this.maxLegendItems = this.maxLegendItems ? this.maxLegendItems : 8;
        /**
         * Whether to show percentages or raw case numbers on the doughnut chart
         */
        this.showPercentages = this.showPercentages ? this.showPercentages : false;
        /**
         * ~event selectedCaseType : Case Type selected in vizualization
         * ~payload CaseTypeReportRecord : CaseTypeReportRecord object selected from component
         */
        this.selectedCaseType = new EventEmitter();
        this.renderChart = false;
        this.doughnutChartData = [];
        this.doughnutChartType = 'doughnut';
        this.chartColors = [];
        this.defaultColors = DEFAULT_COLORS.slice().reverse();
        this.getCaseCount = (/**
         * @return {?}
         */
        () => {
            return this.totalActiveCaseCount;
        });
        this.doughnutChartOptions = {
            responsive: true,
            maintainAspectRatio: false,
            legend: {
                display: false,
                position: 'left'
            },
            layout: {
                padding: {
                    left: 0,
                    right: 0,
                    top: 10,
                    bottom: 10
                }
            },
            plugins: {
                doughnutlabel: {
                    labels: [
                        {
                            text: this.getCaseCount,
                            font: {
                                size: '20',
                                family: 'Source Sans Pro',
                                weight: 'bold'
                            },
                            color: '#b6b6b6'
                        },
                        {
                            text: 'cases',
                            font: {
                                size: '16',
                                family: 'Source Sans Pro',
                            },
                            color: '#b6b6b6'
                        }
                    ]
                },
                datalabels: {
                    anchor: 'end',
                    backgroundColor: (/**
                     * @param {?} context
                     * @return {?}
                     */
                    function (context) {
                        return context.dataset.backgroundColor;
                    }),
                    borderColor: 'white',
                    borderRadius: 25,
                    borderWidth: 2,
                    color: 'white',
                    display: (/**
                     * @param {?} context
                     * @return {?}
                     */
                    function (context) {
                        /** @type {?} */
                        const dataset = context.dataset;
                        /** @type {?} */
                        const value = dataset.data[context.dataIndex];
                        return value > 0;
                    }),
                    font: {
                        weight: 'bold'
                    },
                    formatter: (/**
                     * @param {?} value
                     * @param {?} ctx
                     * @return {?}
                     */
                    (value, ctx) => {
                        /** @type {?} */
                        const datasets = ctx.chart.data.datasets;
                        if (datasets.indexOf(ctx.dataset) === datasets.length - 1) {
                            if (this.showPercentages) {
                                /** @type {?} */
                                const sum = datasets[0].data.reduce((/**
                                 * @param {?} a
                                 * @param {?} b
                                 * @return {?}
                                 */
                                (a, b) => a + b), 0);
                                /** @type {?} */
                                const percentage = Math.round((value / sum) * 100) + '%';
                                return percentage;
                            }
                            else {
                                return value;
                            }
                        }
                        else {
                            return 0;
                        }
                    })
                }
            }
        };
        this.initReportDataToChart = (/**
         * @param {?} reportData
         * @return {?}
         */
        (reportData) => {
            this.doughnutChartData = [];
            this.totalActiveCaseCount = 0;
            /** @type {?} */
            const activeCasesArray = [];
            /** @type {?} */
            const labels = [];
            /** @type {?} */
            const colorArray = [];
            // remove any taken colors from the defaultColors
            // we have to do this before parsing the record to avoid getting same colors
            reportData.caseTypes.forEach((/**
             * @param {?} ct
             * @return {?}
             */
            ct => {
                // remove color from defaults
                if (ct.caseTypeInfo.color) {
                    this.defaultColors = this.defaultColors.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item !== ct.caseTypeInfo.color));
                }
            }));
            // parse record
            reportData.caseTypes.forEach((/**
             * @param {?} caseType
             * @return {?}
             */
            caseType => {
                activeCasesArray.push(caseType.activeStateCaseCount);
                this.totalActiveCaseCount = this.totalActiveCaseCount + caseType.activeStateCaseCount;
                this.totalTerminatedCaseCount = this.totalTerminatedCaseCount + caseType.terminalStateCaseCount;
                labels.push(caseType.caseTypeInfo.label);
                // we will re-color anything that has the default color
                /** @type {?} */
                let col;
                if (caseType.caseTypeInfo.color && caseType.caseTypeInfo.color !== DEFAULT_TYPE_COLOR) {
                    // use the set color
                    col = caseType.caseTypeInfo.color;
                }
                else {
                    // try and get a color from the palette
                    /** @type {?} */
                    const palCol = this.defaultColors.pop();
                    if (palCol) {
                        col = palCol;
                    }
                    else {
                        // if no more in palette use a random color!
                        /** @type {?} */
                        const i = Math.random() * 0xffffff;
                        /** @type {?} */
                        const p = parseInt(i.toString(), 0);
                        col = '#' + p.toString(16);
                    }
                }
                colorArray.push(col);
            }));
            // showing more than 8 in the legend will take up too much space
            this.doughnutChartOptions.legend.display = labels.length <= 8;
            this.doughnutChartData = activeCasesArray;
            this.doughnutChartLabels = labels;
            this.chartColors.push({ backgroundColor: colorArray });
            this.renderChart = true;
        });
        this.refresh = (/**
         * @return {?}
         */
        () => {
            this.reportingService.getCaseTypesReport(this.sandboxId, this.appIds, this.uiAppId).pipe(take(1), takeUntil(this._destroyed$))
                .subscribe((/**
             * @param {?} report
             * @return {?}
             */
            report => {
                this.caseTypesReport = report;
                this.initReportDataToChart(report);
                return report;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => { this.errorMessage = 'Error retrieving case types report: ' + error.error.errorMsg; }));
        });
    }
    // events
    /**
     * @param {?} __0
     * @return {?}
     */
    chartClicked({ event, active }) {
        if (active.length > 0) {
            /** @type {?} */
            const chart = active[0]._chart;
            /** @type {?} */
            const activePoints = chart.getElementAtEvent(event);
            if (activePoints.length > 0) {
                // get the internal index of slice in pie chart
                /** @type {?} */
                const clickedElementIndex = activePoints[0]._index;
                /** @type {?} */
                const label = chart.data.labels[clickedElementIndex];
                // get value by index
                /** @type {?} */
                const value = chart.data.datasets[0].data[clickedElementIndex];
                this.caseTypesReport.caseTypes[clickedElementIndex].incTerminal = false;
                this.selectedCaseType.emit(this.caseTypesReport.caseTypes[clickedElementIndex]);
            }
        }
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    chartHovered({ event, active }) {
        // console.log(event, active);
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.componentDiv && this.caseReportChart && this.componentDiv.nativeElement.offsetWidth) {
            if (this.widgetWidth !== this.componentDiv.nativeElement.offsetWidth || this.widgetHeight !== this.componentDiv.nativeElement.offsetHeight) {
                this.widgetWidth = this.componentDiv.nativeElement.offsetWidth;
                this.widgetHeight = this.componentDiv.nativeElement.offsetHeight;
                this.caseReportChart.chart.resize();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.refresh();
    }
}
LiveAppsActiveCasesReportComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-active-cases-report',
                template: "<div #componentDiv fxLayout=\"column\" fxFlex style=\"overflow: auto;\">\n  <div *ngIf=\"renderChart\" style=\"height:100%; width:100%; padding: 20px\" class=\"relative\">\n    <canvas #caseReportChart baseChart\n            [data]=\"doughnutChartData\"\n            [labels]=\"doughnutChartLabels\"\n            [chartType]=\"doughnutChartType\"\n            [options]=\"doughnutChartOptions\"\n            [colors]=\"chartColors\"\n            (chartHover)=\"chartHovered($event)\"\n            (chartClick)=\"chartClicked($event)\"\n    >\n    </canvas>\n  </div>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
LiveAppsActiveCasesReportComponent.ctorParameters = () => [
    { type: TcLiveAppsReportingService }
];
LiveAppsActiveCasesReportComponent.propDecorators = {
    sandboxId: [{ type: Input }],
    appIds: [{ type: Input }],
    showHeader: [{ type: Input }],
    uiAppId: [{ type: Input }],
    maxLegendItems: [{ type: Input }],
    showPercentages: [{ type: Input }],
    selectedCaseType: [{ type: Output }],
    caseReportChart: [{ type: ViewChild, args: [BaseChartDirective, { static: false },] }],
    componentDiv: [{ type: ViewChild, args: ['componentDiv', { static: false },] }]
};
if (false) {
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.sandboxId;
    /**
     * The list of LA Application IDs you want to handle
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.appIds;
    /**
     * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.showHeader;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.uiAppId;
    /**
     * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.maxLegendItems;
    /**
     * Whether to show percentages or raw case numbers on the doughnut chart
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.showPercentages;
    /**
     * ~event selectedCaseType : Case Type selected in vizualization
     * ~payload CaseTypeReportRecord : CaseTypeReportRecord object selected from component
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.selectedCaseType;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.caseReportChart;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.componentDiv;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.errorMessage;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.caseTypesReport;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.totalActiveCaseCount;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.totalTerminatedCaseCount;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.renderChart;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.widgetWidth;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.widgetHeight;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.doughnutChartLabels;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.doughnutChartData;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.doughnutChartType;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.chartColors;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.defaultColors;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.legendData;
    /**
     * @type {?}
     * @private
     */
    LiveAppsActiveCasesReportComponent.prototype.getCaseCount;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.doughnutChartOptions;
    /**
     * @type {?}
     * @private
     */
    LiveAppsActiveCasesReportComponent.prototype.initReportDataToChart;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.refresh;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsActiveCasesReportComponent.prototype.reportingService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWFjdGl2ZS1jYXNlcy1yZXBvcnQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2xpdmUtYXBwcy1hY3RpdmUtY2FzZXMtcmVwb3J0L2xpdmUtYXBwcy1hY3RpdmUtY2FzZXMtcmVwb3J0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFtQixTQUFTLEVBQUUsVUFBVSxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUV0SCxPQUFPLEVBQUMsa0JBQWtCLEVBQW9ELE1BQU0sWUFBWSxDQUFDO0FBRWpHLE9BQU8sRUFBQywwQkFBMEIsRUFBQyxNQUFNLCtDQUErQyxDQUFDO0FBQ3pGLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHNEQUFzRCxDQUFDO0FBQ3ZGLE9BQU8sRUFBTSxJQUFJLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFHcEQsT0FBTyxFQUFDLGNBQWMsRUFBRSxrQkFBa0IsRUFBQyxNQUFNLDRDQUE0QyxDQUFDOzs7Ozs7QUFhOUYsTUFBTSxPQUFPLGtDQUFtQyxTQUFRLGlCQUFpQjs7OztJQUV2RSxZQUFzQixnQkFBNEM7UUFDaEUsS0FBSyxFQUFFLENBQUM7UUFEWSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQTRCOzs7O1FBMkJ6RCxtQkFBYyxHQUFXLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7OztRQUt2RSxvQkFBZSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7Ozs7UUFPckUscUJBQWdCLEdBQXVDLElBQUks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RUFBQzs7Ozs7OztJQW5DMUMsdURBQTJCOzs7OztJQUszQixvREFBMEI7Ozs7O0lBSzFCLHdEQUE2Qjs7Ozs7SUFLN0IscURBQXlCOzs7OztJQUt6Qiw0REFBZ0Y7Ozs7O0lBS2hGLDZEQUErRTs7Ozs7O0lBTy9FLDhEQUEwRzs7SUFFMUcsNkRBQW9GOztJQUNwRiwwREFBcUU7O0lBRXJFLDBEQUE0Qjs7SUFDNUIsNkRBQXdDOztJQUN4QyxrRUFBb0M7O0lBQ3BDLHNFQUF3Qzs7SUFDeEMseURBQTJCOztJQUMzQix5REFBMkI7O0lBQzNCLDBEQUE0Qjs7SUFFNUIsaUVBQW9DOztJQUNwQywrREFBNkM7O0lBQzdDLCtEQUFpRDs7SUFDakQseURBQStCOztJQUMvQiwyREFBa0U7O0lBRWxFLHdEQUF1Qjs7Ozs7SUFFdkIsMERBRUM7O0lBRUQsa0VBd0VFOzs7OztJQUVGLG1FQTZDQzs7SUFFRCxxREFZQzs7Ozs7SUFyTVcsOERBQXNEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtBZnRlclZpZXdDaGVja2VkLCBDb21wb25lbnQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDYXNlVHlwZVJlcG9ydFJlY29yZCwgQ2FzZVR5cGVzUmVwb3J0fSBmcm9tICcuLi8uLi9tb2RlbHMvdGMtbGl2ZS1hcHBzLXJlcG9ydGluZyc7XG5pbXBvcnQge0Jhc2VDaGFydERpcmVjdGl2ZSwgZGVmYXVsdENvbG9ycywgTGFiZWwsIE11bHRpRGF0YVNldCwgU2luZ2xlRGF0YVNldH0gZnJvbSAnbmcyLWNoYXJ0cyc7XG5pbXBvcnQge0NoYXJ0VHlwZX0gZnJvbSAnY2hhcnQuanMnO1xuaW1wb3J0IHtUY0xpdmVBcHBzUmVwb3J0aW5nU2VydmljZX0gZnJvbSAnLi4vLi4vc2VydmljZXMvdGMtbGl2ZS1hcHBzLXJlcG9ydGluZy5zZXJ2aWNlJztcbmltcG9ydCB7TGl2ZUFwcHNDb21wb25lbnR9IGZyb20gJy4uL2xpdmUtYXBwcy1jb21wb25lbnQvbGl2ZS1hcHBzLWNvbXBvbmVudC5jb21wb25lbnQnO1xuaW1wb3J0IHttYXAsIHRha2UsIHRha2VVbnRpbH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuXG5pbXBvcnQge2NvcHl9IGZyb20gJ2FuZ3VsYXI2LWpzb24tc2NoZW1hLWZvcm0nO1xuaW1wb3J0IHtERUZBVUxUX0NPTE9SUywgREVGQVVMVF9UWVBFX0NPTE9SfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy90Yy1jYXNlLWNhcmQtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHtUY0NvcmVDb21tb25GdW5jdGlvbnN9IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5cbi8qKlxuICogSG9tZSBwYWdlIGFjdGl2ZSBjYXNlcyB3aWRnZXQgc3ViIGNvbXBvbmVudFxuICpcbiAqQGV4YW1wbGUgPHRjbGEtbGl2ZS1hcHBzLWFjdGl2ZS1jYXNlcy1yZXBvcnQ+PC90Y2xhLWxpdmUtYXBwcy1hY3RpdmUtY2FzZXMtcmVwb3J0PlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0Y2xhLWxpdmUtYXBwcy1hY3RpdmUtY2FzZXMtcmVwb3J0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpdmUtYXBwcy1hY3RpdmUtY2FzZXMtcmVwb3J0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbGl2ZS1hcHBzLWFjdGl2ZS1jYXNlcy1yZXBvcnQuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIExpdmVBcHBzQWN0aXZlQ2FzZXNSZXBvcnRDb21wb25lbnQgZXh0ZW5kcyBMaXZlQXBwc0NvbXBvbmVudCBpbXBsZW1lbnRzICBPbkluaXQsIEFmdGVyVmlld0NoZWNrZWQge1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCByZXBvcnRpbmdTZXJ2aWNlOiBUY0xpdmVBcHBzUmVwb3J0aW5nU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvKipcbiAgICogc2FuZGJveElkIC0gdGhpcyBjb21lcyBmcm9tIGNsYWltcyByZXNvbHZlclxuICAgKi9cbiAgQElucHV0KCkgc2FuZGJveElkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIExBIEFwcGxpY2F0aW9uIElEcyB5b3Ugd2FudCB0byBoYW5kbGVcbiAgICovXG4gIEBJbnB1dCgpIGFwcElkczogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc2hvdyB0aGUgaGVhZGVyIGJhciBpbiB0aGUgd2lkZ2V0IC0gZWcuIGZhdm9yaXRlcyBvbiBob21lIHBhZ2UgKGNvbnRhaW5zIGljb24gZXRjKSAtIGlmIG9mZiBpY29ucyBzdGlsbCBhcHBlYXIgd2l0aG91dCBiYXJcbiAgICovXG4gIEBJbnB1dCgpIHNob3dIZWFkZXI6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBBcHBsaWNhdGlvbiBJRCBvZiB0aGUgVUkgKHNob3VsZCBpZGVhbGx5IGJlIHVuaXF1ZSBhcyBpdCBpcyBzaGFyZWQgc3RhdGUga2V5KVxuICAgKi9cbiAgQElucHV0KCkgdWlBcHBJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIHJvd3MgdG8gc2hvdyBpbiBsZWdlbmQgYmVmb3JlIGl0IGlzIGhpZGRlbiAob3RoZXJ3aXNlIHdvdWxkIHRha2Ugd2hvbGUgd2lkZ2V0KVxuICAgKi9cbiAgQElucHV0KCkgbWF4TGVnZW5kSXRlbXM6IG51bWJlciA9IHRoaXMubWF4TGVnZW5kSXRlbXMgPyB0aGlzLm1heExlZ2VuZEl0ZW1zIDogODtcblxuICAvKipcbiAgICogV2hldGhlciB0byBzaG93IHBlcmNlbnRhZ2VzIG9yIHJhdyBjYXNlIG51bWJlcnMgb24gdGhlIGRvdWdobnV0IGNoYXJ0XG4gICAqL1xuICBASW5wdXQoKSBzaG93UGVyY2VudGFnZXMgPSB0aGlzLnNob3dQZXJjZW50YWdlcyA/IHRoaXMuc2hvd1BlcmNlbnRhZ2VzIDogZmFsc2U7XG5cblxuICAvKipcbiAgICogfmV2ZW50IHNlbGVjdGVkQ2FzZVR5cGUgOiBDYXNlIFR5cGUgc2VsZWN0ZWQgaW4gdml6dWFsaXphdGlvblxuICAgKiB+cGF5bG9hZCBDYXNlVHlwZVJlcG9ydFJlY29yZCA6IENhc2VUeXBlUmVwb3J0UmVjb3JkIG9iamVjdCBzZWxlY3RlZCBmcm9tIGNvbXBvbmVudFxuICAgKi9cbiAgQE91dHB1dCgpIHNlbGVjdGVkQ2FzZVR5cGU6IEV2ZW50RW1pdHRlcjxDYXNlVHlwZVJlcG9ydFJlY29yZD4gPSBuZXcgRXZlbnRFbWl0dGVyPENhc2VUeXBlUmVwb3J0UmVjb3JkPigpO1xuXG4gIEBWaWV3Q2hpbGQoQmFzZUNoYXJ0RGlyZWN0aXZlLCB7c3RhdGljOiBmYWxzZX0pIGNhc2VSZXBvcnRDaGFydDogQmFzZUNoYXJ0RGlyZWN0aXZlO1xuICBAVmlld0NoaWxkKCdjb21wb25lbnREaXYnLCB7c3RhdGljOiBmYWxzZX0pIGNvbXBvbmVudERpdjogRWxlbWVudFJlZjtcblxuICBwdWJsaWMgZXJyb3JNZXNzYWdlOiBzdHJpbmc7XG4gIHB1YmxpYyBjYXNlVHlwZXNSZXBvcnQ6IENhc2VUeXBlc1JlcG9ydDtcbiAgcHVibGljIHRvdGFsQWN0aXZlQ2FzZUNvdW50OiBudW1iZXI7XG4gIHB1YmxpYyB0b3RhbFRlcm1pbmF0ZWRDYXNlQ291bnQ6IG51bWJlcjtcbiAgcHVibGljIHJlbmRlckNoYXJ0ID0gZmFsc2U7XG4gIHB1YmxpYyB3aWRnZXRXaWR0aDogbnVtYmVyO1xuICBwdWJsaWMgd2lkZ2V0SGVpZ2h0OiBudW1iZXI7XG5cbiAgcHVibGljIGRvdWdobnV0Q2hhcnRMYWJlbHM6IExhYmVsW107XG4gIHB1YmxpYyBkb3VnaG51dENoYXJ0RGF0YTogU2luZ2xlRGF0YVNldCA9IFtdO1xuICBwdWJsaWMgZG91Z2hudXRDaGFydFR5cGU6IENoYXJ0VHlwZSA9ICdkb3VnaG51dCc7XG4gIHB1YmxpYyBjaGFydENvbG9yczogYW55W10gPSBbXTtcbiAgcHVibGljIGRlZmF1bHRDb2xvcnM6IHN0cmluZ1tdID0gREVGQVVMVF9DT0xPUlMuc2xpY2UoKS5yZXZlcnNlKCk7XG5cbiAgcHVibGljIGxlZ2VuZERhdGE6IGFueTtcblxuICBwcml2YXRlIGdldENhc2VDb3VudCA9ICgpID0+IHtcbiAgICByZXR1cm4gdGhpcy50b3RhbEFjdGl2ZUNhc2VDb3VudDtcbiAgfVxuXG4gIHB1YmxpYyBkb3VnaG51dENoYXJ0T3B0aW9uczogYW55ID0ge1xuICAgIHJlc3BvbnNpdmU6IHRydWUsXG4gICAgbWFpbnRhaW5Bc3BlY3RSYXRpbzogZmFsc2UsXG4gICAgbGVnZW5kOiB7XG4gICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgIHBvc2l0aW9uOiAnbGVmdCdcbiAgICB9LFxuICAgIGxheW91dDoge1xuICAgICAgcGFkZGluZzoge1xuICAgICAgICBsZWZ0OiAwLFxuICAgICAgICByaWdodDogMCxcbiAgICAgICAgdG9wOiAxMCxcbiAgICAgICAgYm90dG9tOiAxMFxuICAgICAgfVxuICAgIH0sXG4gICAgcGx1Z2luczoge1xuICAgICAgZG91Z2hudXRsYWJlbDoge1xuICAgICAgICBsYWJlbHM6IFtcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXh0OiB0aGlzLmdldENhc2VDb3VudCxcbiAgICAgICAgICAgIGZvbnQ6IHtcbiAgICAgICAgICAgICAgc2l6ZTogJzIwJyxcbiAgICAgICAgICAgICAgZmFtaWx5OiAnU291cmNlIFNhbnMgUHJvJyxcbiAgICAgICAgICAgICAgd2VpZ2h0OiAnYm9sZCdcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb2xvcjogJyNiNmI2YjYnXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXh0OiAnY2FzZXMnLFxuICAgICAgICAgICAgZm9udDoge1xuICAgICAgICAgICAgICBzaXplOiAnMTYnLFxuICAgICAgICAgICAgICBmYW1pbHk6ICdTb3VyY2UgU2FucyBQcm8nLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNvbG9yOiAnI2I2YjZiNidcbiAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBkYXRhbGFiZWxzOiB7XG4gICAgICAgIGFuY2hvcjogJ2VuZCcsXG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogZnVuY3Rpb24oY29udGV4dCkge1xuICAgICAgICAgIHJldHVybiBjb250ZXh0LmRhdGFzZXQuYmFja2dyb3VuZENvbG9yO1xuICAgICAgICB9LFxuICAgICAgICBib3JkZXJDb2xvcjogJ3doaXRlJyxcbiAgICAgICAgYm9yZGVyUmFkaXVzOiAyNSxcbiAgICAgICAgYm9yZGVyV2lkdGg6IDIsXG4gICAgICAgIGNvbG9yOiAnd2hpdGUnLFxuICAgICAgICBkaXNwbGF5OiBmdW5jdGlvbihjb250ZXh0KSB7XG4gICAgICAgICAgY29uc3QgZGF0YXNldCA9IGNvbnRleHQuZGF0YXNldDtcbiAgICAgICAgICBjb25zdCB2YWx1ZSA9IGRhdGFzZXQuZGF0YVtjb250ZXh0LmRhdGFJbmRleF07XG4gICAgICAgICAgcmV0dXJuIHZhbHVlID4gMDtcbiAgICAgICAgfSxcbiAgICAgICAgZm9udDoge1xuICAgICAgICAgIHdlaWdodDogJ2JvbGQnXG4gICAgICAgIH0sXG4gICAgICAgIGZvcm1hdHRlcjogKHZhbHVlLCBjdHgpID0+IHtcblxuICAgICAgICAgIGNvbnN0IGRhdGFzZXRzID0gY3R4LmNoYXJ0LmRhdGEuZGF0YXNldHM7XG5cbiAgICAgICAgICBpZiAoZGF0YXNldHMuaW5kZXhPZihjdHguZGF0YXNldCkgPT09IGRhdGFzZXRzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnNob3dQZXJjZW50YWdlcykge1xuICAgICAgICAgICAgICBjb25zdCBzdW0gPSBkYXRhc2V0c1swXS5kYXRhLnJlZHVjZSgoYSwgYikgPT4gYSArIGIsIDApO1xuICAgICAgICAgICAgICBjb25zdCBwZXJjZW50YWdlID0gTWF0aC5yb3VuZCgodmFsdWUgLyBzdW0pICogMTAwKSArICclJztcbiAgICAgICAgICAgICAgcmV0dXJuIHBlcmNlbnRhZ2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICBwcml2YXRlIGluaXRSZXBvcnREYXRhVG9DaGFydCA9IChyZXBvcnREYXRhOiBDYXNlVHlwZXNSZXBvcnQpID0+IHtcbiAgICB0aGlzLmRvdWdobnV0Q2hhcnREYXRhID0gW107XG4gICAgdGhpcy50b3RhbEFjdGl2ZUNhc2VDb3VudCA9IDA7XG4gICAgY29uc3QgYWN0aXZlQ2FzZXNBcnJheTogYW55W10gPSBbXTtcbiAgICBjb25zdCBsYWJlbHM6IHN0cmluZ1tdID0gW107XG4gICAgY29uc3QgY29sb3JBcnJheTogc3RyaW5nW10gPSBbXTtcbiAgICAvLyByZW1vdmUgYW55IHRha2VuIGNvbG9ycyBmcm9tIHRoZSBkZWZhdWx0Q29sb3JzXG4gICAgLy8gd2UgaGF2ZSB0byBkbyB0aGlzIGJlZm9yZSBwYXJzaW5nIHRoZSByZWNvcmQgdG8gYXZvaWQgZ2V0dGluZyBzYW1lIGNvbG9yc1xuICAgIHJlcG9ydERhdGEuY2FzZVR5cGVzLmZvckVhY2goY3QgPT4ge1xuICAgICAgLy8gcmVtb3ZlIGNvbG9yIGZyb20gZGVmYXVsdHNcbiAgICAgIGlmIChjdC5jYXNlVHlwZUluZm8uY29sb3IpIHtcbiAgICAgICAgdGhpcy5kZWZhdWx0Q29sb3JzID0gdGhpcy5kZWZhdWx0Q29sb3JzLmZpbHRlcihpdGVtID0+IGl0ZW0gIT09IGN0LmNhc2VUeXBlSW5mby5jb2xvcik7XG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gcGFyc2UgcmVjb3JkXG4gICAgcmVwb3J0RGF0YS5jYXNlVHlwZXMuZm9yRWFjaChjYXNlVHlwZSA9PiB7XG4gICAgICBhY3RpdmVDYXNlc0FycmF5LnB1c2goY2FzZVR5cGUuYWN0aXZlU3RhdGVDYXNlQ291bnQpO1xuICAgICAgdGhpcy50b3RhbEFjdGl2ZUNhc2VDb3VudCA9IHRoaXMudG90YWxBY3RpdmVDYXNlQ291bnQgKyBjYXNlVHlwZS5hY3RpdmVTdGF0ZUNhc2VDb3VudDtcbiAgICAgIHRoaXMudG90YWxUZXJtaW5hdGVkQ2FzZUNvdW50ID0gdGhpcy50b3RhbFRlcm1pbmF0ZWRDYXNlQ291bnQgKyBjYXNlVHlwZS50ZXJtaW5hbFN0YXRlQ2FzZUNvdW50O1xuICAgICAgbGFiZWxzLnB1c2goY2FzZVR5cGUuY2FzZVR5cGVJbmZvLmxhYmVsKTtcbiAgICAgIC8vIHdlIHdpbGwgcmUtY29sb3IgYW55dGhpbmcgdGhhdCBoYXMgdGhlIGRlZmF1bHQgY29sb3JcbiAgICAgIGxldCBjb2w6IHN0cmluZztcbiAgICAgIGlmIChjYXNlVHlwZS5jYXNlVHlwZUluZm8uY29sb3IgJiYgY2FzZVR5cGUuY2FzZVR5cGVJbmZvLmNvbG9yICE9PSBERUZBVUxUX1RZUEVfQ09MT1IpIHtcbiAgICAgICAgLy8gdXNlIHRoZSBzZXQgY29sb3JcbiAgICAgICAgY29sID0gY2FzZVR5cGUuY2FzZVR5cGVJbmZvLmNvbG9yO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdHJ5IGFuZCBnZXQgYSBjb2xvciBmcm9tIHRoZSBwYWxldHRlXG4gICAgICAgIGNvbnN0IHBhbENvbCA9IHRoaXMuZGVmYXVsdENvbG9ycy5wb3AoKTtcbiAgICAgICAgaWYgKHBhbENvbCkge1xuICAgICAgICAgIGNvbCA9IHBhbENvbDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBpZiBubyBtb3JlIGluIHBhbGV0dGUgdXNlIGEgcmFuZG9tIGNvbG9yIVxuICAgICAgICAgIGNvbnN0IGkgPSBNYXRoLnJhbmRvbSgpICogMHhmZmZmZmY7XG4gICAgICAgICAgY29uc3QgcCA9IHBhcnNlSW50KGkudG9TdHJpbmcoKSwgMCk7XG4gICAgICAgICAgY29sID0gJyMnICsgcC50b1N0cmluZygxNik7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGNvbG9yQXJyYXkucHVzaChjb2wpO1xuICAgIH0pO1xuICAgIC8vIHNob3dpbmcgbW9yZSB0aGFuIDggaW4gdGhlIGxlZ2VuZCB3aWxsIHRha2UgdXAgdG9vIG11Y2ggc3BhY2VcbiAgICB0aGlzLmRvdWdobnV0Q2hhcnRPcHRpb25zLmxlZ2VuZC5kaXNwbGF5ID0gbGFiZWxzLmxlbmd0aCA8PSA4O1xuICAgIHRoaXMuZG91Z2hudXRDaGFydERhdGEgPSBhY3RpdmVDYXNlc0FycmF5O1xuICAgIHRoaXMuZG91Z2hudXRDaGFydExhYmVscyA9IGxhYmVscztcbiAgICB0aGlzLmNoYXJ0Q29sb3JzLnB1c2goIHsgYmFja2dyb3VuZENvbG9yOiBjb2xvckFycmF5fSk7XG4gICAgdGhpcy5yZW5kZXJDaGFydCA9IHRydWU7XG4gIH1cblxuICBwdWJsaWMgcmVmcmVzaCA9ICgpID0+IHtcbiAgICB0aGlzLnJlcG9ydGluZ1NlcnZpY2UuZ2V0Q2FzZVR5cGVzUmVwb3J0KHRoaXMuc2FuZGJveElkLCB0aGlzLmFwcElkcywgdGhpcy51aUFwcElkKS5waXBlKFxuICAgICAgdGFrZSgxKSxcbiAgICAgIHRha2VVbnRpbCh0aGlzLl9kZXN0cm95ZWQkKVxuICAgIClcbiAgICAgIC5zdWJzY3JpYmUoXG4gICAgICAgIHJlcG9ydCA9PiB7XG4gICAgICAgICAgdGhpcy5jYXNlVHlwZXNSZXBvcnQgPSByZXBvcnQ7XG4gICAgICAgICAgdGhpcy5pbml0UmVwb3J0RGF0YVRvQ2hhcnQocmVwb3J0KTtcbiAgICAgICAgICByZXR1cm4gcmVwb3J0O1xuICAgICAgICAgIH0sIGVycm9yID0+IHsgdGhpcy5lcnJvck1lc3NhZ2UgPSAnRXJyb3IgcmV0cmlldmluZyBjYXNlIHR5cGVzIHJlcG9ydDogJyArIGVycm9yLmVycm9yLmVycm9yTXNnOyB9XG4gICAgICApO1xuICB9XG5cbiAgLy8gZXZlbnRzXG4gIHB1YmxpYyBjaGFydENsaWNrZWQoeyBldmVudCwgYWN0aXZlIH06IHsgZXZlbnQ6IE1vdXNlRXZlbnQsIGFjdGl2ZTogYW55IH0pOiB2b2lkIHtcbiAgICBpZiAoYWN0aXZlLmxlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGNoYXJ0ID0gYWN0aXZlWzBdLl9jaGFydDtcbiAgICAgIGNvbnN0IGFjdGl2ZVBvaW50czogYW55ID0gY2hhcnQuZ2V0RWxlbWVudEF0RXZlbnQoZXZlbnQpO1xuICAgICAgaWYgKCBhY3RpdmVQb2ludHMubGVuZ3RoID4gMCkge1xuICAgICAgICAvLyBnZXQgdGhlIGludGVybmFsIGluZGV4IG9mIHNsaWNlIGluIHBpZSBjaGFydFxuICAgICAgICBjb25zdCBjbGlja2VkRWxlbWVudEluZGV4ID0gYWN0aXZlUG9pbnRzWzBdLl9pbmRleDtcbiAgICAgICAgY29uc3QgbGFiZWwgPSBjaGFydC5kYXRhLmxhYmVsc1tjbGlja2VkRWxlbWVudEluZGV4XTtcbiAgICAgICAgLy8gZ2V0IHZhbHVlIGJ5IGluZGV4XG4gICAgICAgIGNvbnN0IHZhbHVlID0gY2hhcnQuZGF0YS5kYXRhc2V0c1swXS5kYXRhW2NsaWNrZWRFbGVtZW50SW5kZXhdO1xuICAgICAgICB0aGlzLmNhc2VUeXBlc1JlcG9ydC5jYXNlVHlwZXNbY2xpY2tlZEVsZW1lbnRJbmRleF0uaW5jVGVybWluYWwgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZENhc2VUeXBlLmVtaXQodGhpcy5jYXNlVHlwZXNSZXBvcnQuY2FzZVR5cGVzW2NsaWNrZWRFbGVtZW50SW5kZXhdKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBwdWJsaWMgY2hhcnRIb3ZlcmVkKHsgZXZlbnQsIGFjdGl2ZSB9OiB7IGV2ZW50OiBNb3VzZUV2ZW50LCBhY3RpdmU6IHt9W10gfSk6IHZvaWQge1xuICAgIC8vIGNvbnNvbGUubG9nKGV2ZW50LCBhY3RpdmUpO1xuICB9XG5cbiAgbmdBZnRlclZpZXdDaGVja2VkKCkge1xuICAgIGlmICh0aGlzLmNvbXBvbmVudERpdiAmJiB0aGlzLmNhc2VSZXBvcnRDaGFydCAmJiB0aGlzLmNvbXBvbmVudERpdi5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoKSB7XG4gICAgICBpZiAodGhpcy53aWRnZXRXaWR0aCAhPT0gdGhpcy5jb21wb25lbnREaXYubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCB8fCB0aGlzLndpZGdldEhlaWdodCAhPT0gdGhpcy5jb21wb25lbnREaXYubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQpIHtcbiAgICAgICAgdGhpcy53aWRnZXRXaWR0aCA9IHRoaXMuY29tcG9uZW50RGl2Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGg7XG4gICAgICAgIHRoaXMud2lkZ2V0SGVpZ2h0ID0gdGhpcy5jb21wb25lbnREaXYubmF0aXZlRWxlbWVudC5vZmZzZXRIZWlnaHQ7XG4gICAgICAgIHRoaXMuY2FzZVJlcG9ydENoYXJ0LmNoYXJ0LnJlc2l6ZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMucmVmcmVzaCgpO1xuICB9XG5cbn1cbiJdfQ==