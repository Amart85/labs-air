/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { LegacyIframeService } from '@tibco-tcstk/tc-core-lib';
import { TcVisibilityService } from '@tibco-tcstk/tc-core-lib';
/**
 * Wraps legacy angularjs form renderer
 *
 * \@example <tcla-live-apps-legacy-form></tcla-live-apps-legacy-form>
 */
export class LiveAppsLegacyFormComponent extends LiveAppsComponent {
    /**
     * @param {?} visibilityService
     * @param {?} host
     * @param {?} legacyIframeService
     */
    constructor(visibilityService, host, legacyIframeService) {
        super();
        this.visibilityService = visibilityService;
        this.host = host;
        this.legacyIframeService = legacyIframeService;
        this.legacyIframeId = this.legacyIframeId ? this.legacyIframeId : 'legacyWorkitemFrame';
        this.workitemComplete = new EventEmitter();
        this.wiActive = false;
        this.renderWi = (/**
         * @param {?} wiId
         * @return {?}
         */
        (wiId) => {
            if (this.wiActive && this.openWiId) {
                // opening a new workitem so cancel old one
                this.cancelWi(wiId);
            }
            // send message to external form app
            this.formDiv.contentWindow.postMessage({ 'action': 'openWI', 'wiId': wiId }, window.location.origin);
            // position the form iframe over the workitemDiv placeholder
            this.wiActive = true;
            this.openWiId = wiId;
            this.resizeWi();
        });
        this.receiveMessage = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (event.data.action === 'wiCompleted') {
                this.wiActive = false;
                /** @type {?} */
                const wiId = this.openWiId;
                this.openWiId = undefined;
                this.hideWi();
                this.workitemComplete.emit(wiId);
            }
        });
        this.cancelWi = (/**
         * @param {?} wiId
         * @return {?}
         */
        (wiId) => {
            this.formDiv.contentWindow.postMessage({ 'action': 'cancelWI', 'wiId': this.openWiId }, window.location.origin);
            this.wiActive = false;
            this.openWiId = undefined;
            this.hideWi();
        });
        this.hideWi = (/**
         * @return {?}
         */
        () => {
            // hide the iframe!
            this.formDiv.style.top = '-1000px';
            this.formDiv.style.left = '-1000px';
            this.formDiv.style.zIndex = '1';
        });
        this.resizeWi = (/**
         * @return {?}
         */
        () => {
            // position the form iframe over the workitemDiv placeholder
            setTimeout((/**
             * @param {?} handler
             * @return {?}
             */
            handler => {
                /** @type {?} */
                const rect = this.target.getBoundingClientRect();
                this.formDiv.style.top = rect.top.toString() + 'px';
                this.formDiv.style.left = rect.left.toString() + 'px';
                this.formDiv.style.height = rect.height.toString() + 'px';
                this.formDiv.style.width = rect.width.toString() + 'px';
                this.formDiv.style.position = 'absolute';
                this.formDiv.style.zIndex = '1000';
            }), 1000);
        });
        this.initialize = (/**
         * @return {?}
         */
        () => {
            // listen for messages from the iframe
            window.addEventListener('message', this.receiveMessage, false);
            // we only want to render the workitem when the element is visible
            /** @type {?} */
            const inSight$ = this.visibilityService.elementInSight(this.host);
            inSight$.subscribe((/**
             * @param {?} next
             * @return {?}
             */
            next => {
                if (!next) {
                    // element not visible so hide the workitem if it is showing
                    if (this.wiActive && this.target) {
                        this.hideWi();
                    }
                }
                else {
                    // element is visible
                    if (!this.wiActive) {
                        // if workitem not already showing - show it
                        // first get a handle on the target div and the legacy iframe
                        this.target = document.getElementById('workitemDiv');
                        this.formDiv = document.getElementById(this.legacyIframeId);
                        if (this.workitemId) {
                            // trigger display of the workitem
                            this.renderWi(this.workitemId);
                        }
                    }
                    else {
                        this.resizeWi();
                    }
                }
            }));
        });
    }
    /**
     * @return {?}
     */
    isFormActive() {
        return this.wiActive;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.containerChanges$.subscribe((/**
         * @param {?} widget
         * @return {?}
         */
        widget => {
            if (this.wiActive && this.target) {
                this.resizeWi();
            }
        }));
        // wait for iframe to load before doing anything else
        // this observable will emit true once the iFrame is loaded
        this.legacyIframeService.workitemStatus.subscribe((/**
         * @param {?} loaded
         * @return {?}
         */
        loaded => {
            if (loaded) {
                // iframe is loaded
                this.initialize();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.openWiId) {
            this.cancelWi(this.workitemId);
        }
    }
}
LiveAppsLegacyFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-legacy-form',
                template: "<div #componentDiv fxFill id=\"workitemDiv\" style=\"border: none;\"></div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
LiveAppsLegacyFormComponent.ctorParameters = () => [
    { type: TcVisibilityService },
    { type: ElementRef },
    { type: LegacyIframeService }
];
LiveAppsLegacyFormComponent.propDecorators = {
    legacyIframeId: [{ type: Input }],
    workitemId: [{ type: Input }],
    workitemComplete: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    LiveAppsLegacyFormComponent.prototype.legacyIframeId;
    /** @type {?} */
    LiveAppsLegacyFormComponent.prototype.workitemId;
    /** @type {?} */
    LiveAppsLegacyFormComponent.prototype.workitemComplete;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.target;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.formDiv;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.wiActive;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.openWiId;
    /** @type {?} */
    LiveAppsLegacyFormComponent.prototype.renderWi;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.receiveMessage;
    /** @type {?} */
    LiveAppsLegacyFormComponent.prototype.cancelWi;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.hideWi;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.resizeWi;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyFormComponent.prototype.initialize;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsLegacyFormComponent.prototype.visibilityService;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsLegacyFormComponent.prototype.host;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsLegacyFormComponent.prototype.legacyIframeService;
}
//# sourceMappingURL=data:application/json;base64,