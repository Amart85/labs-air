/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, HostListener, ViewChild, ViewChildren } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { distinctUntilChanged } from 'rxjs/internal/operators/distinctUntilChanged';
import { map } from 'rxjs/operators';
import { TcComponent } from '@tibco-tcstk/tc-core-lib';
/**
 * Generic component extended by others
 *
 * \@example <tcla-live-apps-component></tcla-live-apps-component>
 */
/**
 * Class Description of the Component
 */
export class LiveAppsComponent {
    constructor() {
        // use the _destroyed$/takeUntil pattern to avoid memory leaks if a response was never received
        this._destroyed$ = new Subject();
        this.resize = (/**
         * @return {?}
         */
        () => {
            // explicit size changes
            if (this.observer) {
                setTimeout((/**
                 * @param {?} handler
                 * @return {?}
                 */
                handler => {
                    this.observer.next(this.componentDiv.nativeElement.offsetWidth);
                }));
            }
            this.componentChildDivs.forEach((/**
             * @param {?} child
             * @return {?}
             */
            child => {
                if (child.resize) {
                    child.resize();
                }
            }));
        });
    }
    /**
     * @param {?} event
     * @return {?}
     */
    onResize(event) {
        // window resize changes
        if (this.observer) {
            setTimeout((/**
             * @param {?} handler
             * @return {?}
             */
            handler => {
                this.observer.next(this.componentDiv.nativeElement.offsetWidth);
            }));
        }
    }
    /**
     * @return {?}
     */
    setupWidthObserver() {
        this.containerChanges$ = new Observable((/**
         * @param {?} observer
         * @return {?}
         */
        observer => {
            if (!this.observer) {
                this.observer = observer;
            }
            // send initial value - need async so any flex items have resized
            setTimeout((/**
             * @param {?} handler
             * @return {?}
             */
            handler => {
                observer.next(this.componentDiv.nativeElement.offsetWidth);
            }));
        })).pipe(distinctUntilChanged(), map((/**
         * @param {?} width
         * @return {?}
         */
        width => {
            if (this.widget && width) {
                this.widget.width = width;
            }
            return this.widget;
        })));
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        // components that extend this can use the widget.width object to detect size of container by subscribing to containerChanges$
        // we detect div size changes using two methods:
        // 1: if window resizes
        // 2: if a manual resize of the element is triggered - this.resize() - (example - from a button in UI)
        this.setupWidthObserver();
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        // on destroy
        this._destroyed$.next();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.widget = new TcComponent();
    }
}
LiveAppsComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-component',
                template: "<p>\n  New Live Apps Component\n</p>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
LiveAppsComponent.ctorParameters = () => [];
LiveAppsComponent.propDecorators = {
    componentDiv: [{ type: ViewChild, args: ['componentDiv', { static: false },] }],
    componentChildDivs: [{ type: ViewChildren, args: ['componentChildDiv',] }],
    onResize: [{ type: HostListener, args: ['window:resize', ['$event'],] }]
};
if (false) {
    /** @type {?} */
    LiveAppsComponent.prototype.componentDiv;
    /** @type {?} */
    LiveAppsComponent.prototype.componentChildDivs;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsComponent.prototype._destroyed$;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsComponent.prototype.containerChanges$;
    /** @type {?} */
    LiveAppsComponent.prototype.widget;
    /**
     * @type {?}
     * @private
     */
    LiveAppsComponent.prototype.observer;
    /** @type {?} */
    LiveAppsComponent.prototype.resize;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWNvbXBvbmVudC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbGl2ZS1hcHBzLWNvbXBvbmVudC9saXZlLWFwcHMtY29tcG9uZW50LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUlMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUdaLFNBQVMsRUFBRSxZQUFZLEVBQ3hCLE1BQU0sZUFBZSxDQUFDO0FBQ3ZCLE9BQU8sRUFBQyxVQUFVLEVBQUUsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxvQkFBb0IsRUFBQyxNQUFNLDhDQUE4QyxDQUFDO0FBQ2xGLE9BQU8sRUFBZSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRCxPQUFPLEVBQUMsV0FBVyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7Ozs7OztBQWNyRDs7R0FFRztBQUNILE1BQU0sT0FBTyxpQkFBaUI7SUFxQjVCOztRQWZVLGdCQUFXLEdBQUcsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQWlCL0IsV0FBTTs7O1FBQUcsR0FBRyxFQUFFO1lBQ25CLHdCQUF3QjtZQUN4QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQ2pCLFVBQVU7Ozs7Z0JBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ25CLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUNsRSxDQUFDLEVBQUMsQ0FBQzthQUNKO1lBQ0QsSUFBSSxDQUFDLGtCQUFrQixDQUFDLE9BQU87Ozs7WUFBQyxLQUFLLENBQUMsRUFBRTtnQkFDdEMsSUFBSSxLQUFLLENBQUMsTUFBTSxFQUFFO29CQUNoQixLQUFLLENBQUMsTUFBTSxFQUFFLENBQUM7aUJBQ2hCO1lBQ0gsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUE7SUFkZSxDQUFDOzs7OztJQVRqQixRQUFRLENBQUMsS0FBSztRQUNaLHdCQUF3QjtRQUN4QixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsVUFBVTs7OztZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNuQixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUNsRSxDQUFDLEVBQUMsQ0FBQztTQUNKO0lBQ0gsQ0FBQzs7OztJQWtCRCxrQkFBa0I7UUFDaEIsSUFBSSxDQUFDLGlCQUFpQixHQUFHLElBQUksVUFBVTs7OztRQUFTLFFBQVEsQ0FBQyxFQUFFO1lBQ3pELElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNsQixJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQzthQUMxQjtZQUNELGlFQUFpRTtZQUNqRSxVQUFVOzs7O1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ25CLFFBQVEsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxhQUFhLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDN0QsQ0FBQyxFQUFDLENBQUM7UUFDTCxDQUFDLEVBQUMsQ0FBQyxJQUFJLENBQ0wsb0JBQW9CLEVBQUUsRUFDdEIsR0FBRzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1YsSUFBSSxJQUFJLENBQUMsTUFBTSxJQUFJLEtBQUssRUFBRTtnQkFDeEIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO2FBQzNCO1lBQ0QsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDO1FBQ3JCLENBQUMsRUFDRixDQUNBLENBQUM7SUFDSixDQUFDOzs7O0lBRUQsZUFBZTtRQUNiLDhIQUE4SDtRQUM5SCxnREFBZ0Q7UUFDaEQsdUJBQXVCO1FBQ3ZCLHNHQUFzRztRQUN0RyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsQ0FBQztJQUM1QixDQUFDOzs7O0lBRUQsV0FBVztRQUNULGFBQWE7UUFDYixJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzFCLENBQUM7Ozs7SUFFRCxRQUFRO1FBQ04sSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDO0lBQ2xDLENBQUM7OztZQWxGRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDBCQUEwQjtnQkFDcEMsa0RBQW1EOzthQUVwRDs7Ozs7MkJBT0UsU0FBUyxTQUFDLGNBQWMsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUM7aUNBQ3pDLFlBQVksU0FBQyxtQkFBbUI7dUJBUWhDLFlBQVksU0FBQyxlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUM7Ozs7SUFUekMseUNBQXFFOztJQUNyRSwrQ0FBMkU7Ozs7O0lBRzNFLHdDQUFzQzs7Ozs7SUFDdEMsOENBQXFEOztJQUNyRCxtQ0FBMkI7Ozs7O0lBQzNCLHFDQUFpQjs7SUFjakIsbUNBWUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7XG4gIEFmdGVyVmlld0NoZWNrZWQsXG4gIEFmdGVyVmlld0luaXQsXG4gIENoYW5nZURldGVjdG9yUmVmLFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEhvc3RMaXN0ZW5lcixcbiAgT25EZXN0cm95LFxuICBPbkluaXQsXG4gIFZpZXdDaGlsZCwgVmlld0NoaWxkcmVuXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWR9IGZyb20gJ3J4anMvaW50ZXJuYWwvb3BlcmF0b3JzL2Rpc3RpbmN0VW50aWxDaGFuZ2VkJztcbmltcG9ydCB7ZGVib3VuY2VUaW1lLCBtYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7VGNDb21wb25lbnR9IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5cblxuLyoqXG4gKiBHZW5lcmljIGNvbXBvbmVudCBleHRlbmRlZCBieSBvdGhlcnNcbiAqXG4gKkBleGFtcGxlIDx0Y2xhLWxpdmUtYXBwcy1jb21wb25lbnQ+PC90Y2xhLWxpdmUtYXBwcy1jb21wb25lbnQ+XG4gKi9cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RjbGEtbGl2ZS1hcHBzLWNvbXBvbmVudCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9saXZlLWFwcHMtY29tcG9uZW50LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbGl2ZS1hcHBzLWNvbXBvbmVudC5jb21wb25lbnQuY3NzJ11cbn0pXG5cbi8qKlxuICogQ2xhc3MgRGVzY3JpcHRpb24gb2YgdGhlIENvbXBvbmVudFxuICovXG5leHBvcnQgY2xhc3MgTGl2ZUFwcHNDb21wb25lbnQgaW1wbGVtZW50cyBPbkRlc3Ryb3ksIEFmdGVyVmlld0luaXQsIE9uSW5pdCB7XG5cbiAgQFZpZXdDaGlsZCgnY29tcG9uZW50RGl2Jywge3N0YXRpYzogZmFsc2V9KSBjb21wb25lbnREaXY6IEVsZW1lbnRSZWY7XG4gIEBWaWV3Q2hpbGRyZW4oJ2NvbXBvbmVudENoaWxkRGl2JykgY29tcG9uZW50Q2hpbGREaXZzOiBMaXZlQXBwc0NvbXBvbmVudFtdO1xuXG4gIC8vIHVzZSB0aGUgX2Rlc3Ryb3llZCQvdGFrZVVudGlsIHBhdHRlcm4gdG8gYXZvaWQgbWVtb3J5IGxlYWtzIGlmIGEgcmVzcG9uc2Ugd2FzIG5ldmVyIHJlY2VpdmVkXG4gIHByb3RlY3RlZCBfZGVzdHJveWVkJCA9IG5ldyBTdWJqZWN0KCk7XG4gIHByb3RlY3RlZCBjb250YWluZXJDaGFuZ2VzJDogT2JzZXJ2YWJsZTxUY0NvbXBvbmVudD47XG4gIHB1YmxpYyB3aWRnZXQ6IFRjQ29tcG9uZW50O1xuICBwcml2YXRlIG9ic2VydmVyO1xuXG4gIEBIb3N0TGlzdGVuZXIoJ3dpbmRvdzpyZXNpemUnLCBbJyRldmVudCddKVxuICBvblJlc2l6ZShldmVudCkge1xuICAgIC8vIHdpbmRvdyByZXNpemUgY2hhbmdlc1xuICAgIGlmICh0aGlzLm9ic2VydmVyKSB7XG4gICAgICBzZXRUaW1lb3V0KGhhbmRsZXIgPT4ge1xuICAgICAgICB0aGlzLm9ic2VydmVyLm5leHQodGhpcy5jb21wb25lbnREaXYubmF0aXZlRWxlbWVudC5vZmZzZXRXaWR0aCk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIHB1YmxpYyByZXNpemUgPSAoKSA9PiB7XG4gICAgLy8gZXhwbGljaXQgc2l6ZSBjaGFuZ2VzXG4gICAgaWYgKHRoaXMub2JzZXJ2ZXIpIHtcbiAgICAgIHNldFRpbWVvdXQoaGFuZGxlciA9PiB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIubmV4dCh0aGlzLmNvbXBvbmVudERpdi5uYXRpdmVFbGVtZW50Lm9mZnNldFdpZHRoKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICB0aGlzLmNvbXBvbmVudENoaWxkRGl2cy5mb3JFYWNoKGNoaWxkID0+IHtcbiAgICAgIGlmIChjaGlsZC5yZXNpemUpIHtcbiAgICAgICAgY2hpbGQucmVzaXplKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBzZXR1cFdpZHRoT2JzZXJ2ZXIoKSB7XG4gICAgdGhpcy5jb250YWluZXJDaGFuZ2VzJCA9IG5ldyBPYnNlcnZhYmxlPG51bWJlcj4ob2JzZXJ2ZXIgPT4ge1xuICAgICAgaWYgKCF0aGlzLm9ic2VydmVyKSB7XG4gICAgICAgIHRoaXMub2JzZXJ2ZXIgPSBvYnNlcnZlcjtcbiAgICAgIH1cbiAgICAgIC8vIHNlbmQgaW5pdGlhbCB2YWx1ZSAtIG5lZWQgYXN5bmMgc28gYW55IGZsZXggaXRlbXMgaGF2ZSByZXNpemVkXG4gICAgICBzZXRUaW1lb3V0KGhhbmRsZXIgPT4ge1xuICAgICAgICBvYnNlcnZlci5uZXh0KHRoaXMuY29tcG9uZW50RGl2Lm5hdGl2ZUVsZW1lbnQub2Zmc2V0V2lkdGgpO1xuICAgICAgfSk7XG4gICAgfSkucGlwZShcbiAgICAgIGRpc3RpbmN0VW50aWxDaGFuZ2VkKCksXG4gICAgICBtYXAod2lkdGggPT4ge1xuICAgICAgICBpZiAodGhpcy53aWRnZXQgJiYgd2lkdGgpIHtcbiAgICAgICAgICB0aGlzLndpZGdldC53aWR0aCA9IHdpZHRoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLndpZGdldDtcbiAgICAgIH1cbiAgICApXG4gICAgKTtcbiAgfVxuXG4gIG5nQWZ0ZXJWaWV3SW5pdCgpIHtcbiAgICAvLyBjb21wb25lbnRzIHRoYXQgZXh0ZW5kIHRoaXMgY2FuIHVzZSB0aGUgd2lkZ2V0LndpZHRoIG9iamVjdCB0byBkZXRlY3Qgc2l6ZSBvZiBjb250YWluZXIgYnkgc3Vic2NyaWJpbmcgdG8gY29udGFpbmVyQ2hhbmdlcyRcbiAgICAvLyB3ZSBkZXRlY3QgZGl2IHNpemUgY2hhbmdlcyB1c2luZyB0d28gbWV0aG9kczpcbiAgICAvLyAxOiBpZiB3aW5kb3cgcmVzaXplc1xuICAgIC8vIDI6IGlmIGEgbWFudWFsIHJlc2l6ZSBvZiB0aGUgZWxlbWVudCBpcyB0cmlnZ2VyZWQgLSB0aGlzLnJlc2l6ZSgpIC0gKGV4YW1wbGUgLSBmcm9tIGEgYnV0dG9uIGluIFVJKVxuICAgIHRoaXMuc2V0dXBXaWR0aE9ic2VydmVyKCk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICAvLyBvbiBkZXN0cm95XG4gICAgdGhpcy5fZGVzdHJveWVkJC5uZXh0KCk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICB0aGlzLndpZGdldCA9IG5ldyBUY0NvbXBvbmVudCgpO1xuICB9XG5cbn1cbiJdfQ==