/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/*
*     Case Type icons are stored in an orgFolder specified in liveAppsConfig.json (pushed to shared state)
*     Icon Name will be appId.filename.svg
*     Icon svg should contain <DYNAMICFILL> this will be set according to the color selected in this component
*
*     eg: 1742.ic-created.svg for Partner Portal Live Apps App (appId: 1742) 'Created' state
*
*     <svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14">
*        <path fill="<DYNAMICFILL>" class="svg-content" fill-rule="evenodd" d="M7 14A7 7 0 1 1 7 0a7 7 0 0 1 0 14zm3.474-6.472a.527.527 0 0 0 0-1.053H7.526V3.527a.525.525 0 1 0-1.052 0v2.948H3.526a.527.527 0 0 0 0 1.053h2.948v2.948a.525.525 0 0 0 .898.373.525.525 0 0 0 .154-.373V7.528h2.948z"/>
*      </svg>
*
*
 */
import { Component, EventEmitter, Inject, Input, Output, QueryList, ViewChildren } from '@angular/core';
import { LiveAppsService } from '../../services/live-apps.service';
import { CaseTypeState, IconMap } from '../../models/liveappsdata';
import { take, takeUntil } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { DomSanitizer } from '@angular/platform-browser';
import { LiveAppsCaseSummaryComponent } from '../live-apps-case-summary/live-apps-case-summary.component';
import { MAT_DIALOG_DATA, MatDialog, MatDialogRef } from '@angular/material';
import { Location } from '@angular/common';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { DEFAULT_COLORS, DEFAULT_STATE_COLOR, DEFAULT_TYPE_COLOR, TcCaseCardConfigService } from '../../services/tc-case-card-config.service';
import { TcDocumentService } from '../../services/tc-document.service';
/**
 * Manages summary card configuration
 *
 * \@example <tcla-live-apps-application-configuration></tcla-live-apps-application-configuration>
 */
export class LiveAppsApplicationConfigurationComponent extends LiveAppsComponent {
    /**
     * @param {?} http
     * @param {?} sanitizer
     * @param {?} liveapps
     * @param {?} caseCardConfigService
     * @param {?} documentsService
     * @param {?} dialog
     * @param {?} location
     */
    constructor(http, sanitizer, liveapps, caseCardConfigService, documentsService, dialog, location) {
        super();
        this.http = http;
        this.sanitizer = sanitizer;
        this.liveapps = liveapps;
        this.caseCardConfigService = caseCardConfigService;
        this.documentsService = documentsService;
        this.dialog = dialog;
        this.location = location;
        /**
         * ~event configChanged : Configuration values changed
         * ~payload CaseCardConfig : CaseCardConfig object when configuration is changed (so called can do a save with data)
         */
        this.configChanged = new EventEmitter();
        // prepareExternalUrl will add the base href
        this.DEFAULT_CASE_TYPE_ICON = 'assets/icons/ic-generic-casetype.svg';
        this.DEFAULT_CASE_TYPE_COLOR = DEFAULT_TYPE_COLOR;
        this.DEFAULT_CASE_STATE_ICON = 'assets/icons/ic-generic-state.svg';
        this.DEFAULT_CASE_STATE_COLOR = DEFAULT_STATE_COLOR;
        this.DEFAULT_COLOR_PALETTE = DEFAULT_COLORS;
        this.getConfigForState = (/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            /** @type {?} */
            let reqIconMap;
            if (this.caseCardConfig.cardConfig && this.caseCardConfig.cardConfig.stateMap) {
                this.caseCardConfig.cardConfig.stateMap.forEach((/**
                 * @param {?} stateMap
                 * @return {?}
                 */
                (stateMap) => {
                    if (stateMap.state === state.value) {
                        reqIconMap = stateMap;
                    }
                }));
            }
            return reqIconMap ? reqIconMap : new IconMap(false, state.value, this.DEFAULT_CASE_STATE_COLOR, this.DEFAULT_CASE_STATE_ICON);
        });
        this.getConfigForCaseType = (/**
         * @param {?} caseTypeId
         * @return {?}
         */
        (caseTypeId) => {
            /** @type {?} */
            let reqIconMap;
            if (this.caseCardConfig.cardConfig && this.caseCardConfig.cardConfig.stateMap) {
                this.caseCardConfig.cardConfig.stateMap.forEach((/**
                 * @param {?} stateMap
                 * @return {?}
                 */
                (stateMap) => {
                    if (stateMap.isCaseType) {
                        reqIconMap = stateMap;
                    }
                }));
            }
            return reqIconMap ? reqIconMap : new IconMap(true, caseTypeId, this.DEFAULT_CASE_TYPE_COLOR, this.DEFAULT_CASE_TYPE_ICON);
        });
        this.updateIconMap = (/**
         * @param {?} stateConfig
         * @return {?}
         */
        (stateConfig) => {
            /** @type {?} */
            let foundMap;
            /** @type {?} */
            let updatedMap;
            if (this.caseCardConfig.cardConfig && this.caseCardConfig.cardConfig.stateMap) {
                this.caseCardConfig.cardConfig.stateMap.forEach((/**
                 * @param {?} stateMap
                 * @return {?}
                 */
                function (stateMap) {
                    if (stateMap.state === stateConfig.state) {
                        foundMap = stateConfig;
                        stateMap.state = stateConfig.state;
                        stateMap.icon = stateConfig.icon;
                        stateMap.fill = stateConfig.fill;
                    }
                }));
                if (foundMap) {
                    foundMap = stateConfig;
                }
                else {
                    this.caseCardConfig.cardConfig.stateMap.push(stateConfig);
                }
            }
            else {
                this.caseCardConfig.cardConfig.stateMap = [];
                this.caseCardConfig.cardConfig.stateMap.push(stateConfig);
            }
            this.configChanged.emit(this.caseCardConfig);
        });
        this.handleCaseTypeColorToggleChange = (/**
         * @param {?} changes
         * @return {?}
         */
        (changes) => {
            this.caseCardConfig.cardConfig.useCaseTypeColor = changes.checked ? changes.checked : false;
            if (changes.checked) {
                this.caseSummaryComponent.forEach((/**
                 * @param {?} comp
                 * @return {?}
                 */
                (comp) => {
                    comp.restylePreview(this.selectedStateConfig.icon, this.caseTypeColor);
                }));
            }
            this.configChanged.emit(this.caseCardConfig);
        });
        this.setFill = (/**
         * @param {?} fill
         * @param {?} stateConfig
         * @return {?}
         */
        (fill, stateConfig) => {
            this.caseSummaryComponent.forEach((/**
             * @param {?} comp
             * @return {?}
             */
            (comp) => {
                comp.restylePreview(stateConfig.icon, fill);
            }));
            this.stateIconComponents.find((/**
             * @param {?} comp
             * @return {?}
             */
            function (comp) {
                return comp.id === stateConfig.state;
            })).refillSVG(fill);
            this.configChanged.emit(this.caseCardConfig);
        });
        this.setCaseTypeFill = (/**
         * @param {?} fill
         * @param {?} stateConfig
         * @return {?}
         */
        (fill, stateConfig) => {
            this.caseSummaryComponent.forEach((/**
             * @param {?} comp
             * @return {?}
             */
            (comp) => {
                comp.restylePreviewCaseType(stateConfig.icon, fill);
            }));
            this.stateIconComponents.find((/**
             * @param {?} comp
             * @return {?}
             */
            function (comp) {
                return (comp.id === stateConfig.state && stateConfig.isCaseType);
            })).refillSVG(fill);
            this.configChanged.emit(this.caseCardConfig);
        });
        this.selectState = (/**
         * @param {?} state
         * @return {?}
         */
        (state) => {
            this.selectedStateConfig = this.getConfigForState(state);
            if (!this.caseCardConfig.cardConfig.useCaseTypeColor) {
                this.caseSummaryComponent.forEach((/**
                 * @param {?} comp
                 * @return {?}
                 */
                (comp) => {
                    comp.restylePreview(this.selectedStateConfig.icon, this.selectedStateConfig.fill);
                }));
            }
        });
        this.setNewStateIcon = (/**
         * @param {?} url
         * @return {?}
         */
        (url) => {
            this.selectedStateConfig.icon = url;
            this.stateIconComponents.find((/**
             * @param {?} comp
             * @return {?}
             */
            (comp) => {
                return (comp.id === this.selectedStateConfig.state);
            })).refresh(this.selectedStateConfig.icon, this.selectedStateConfig.fill);
            this.caseSummaryComponent.forEach((/**
             * @param {?} comp
             * @return {?}
             */
            (comp) => {
                comp.restylePreview(this.selectedStateConfig.icon, this.selectedStateConfig.fill);
            }));
            this.updateIconMap(this.selectedStateConfig);
        });
        this.setNewCaseTypeIcon = (/**
         * @param {?} url
         * @return {?}
         */
        (url) => {
            this.caseTypeIcon = url;
            this.stateIconComponents.find((/**
             * @param {?} comp
             * @return {?}
             */
            (comp) => {
                return (comp.id === this.appTypeLabel);
            })).refresh(this.caseTypeIcon, this.caseTypeColor);
            this.caseSummaryComponent.forEach((/**
             * @param {?} comp
             * @return {?}
             */
            (comp) => {
                comp.restylePreviewCaseType(this.caseTypeIcon, this.caseTypeColor);
            }));
            this.updateIconMap(new IconMap(true, this.appTypeLabel, this.caseTypeColor, this.caseTypeIcon));
        });
        this.refresh = (/**
         * @return {?}
         */
        () => {
            // need states & cardConfig
            this.selectedCaseTypeConfig = null;
            this.caseCardConfigService.getCaseCardConfig(this.sandboxId, this.appId, this.uiAppId, this.appTypeLabel, this.DEFAULT_CASE_TYPE_COLOR, this.DEFAULT_CASE_TYPE_ICON, this.DEFAULT_CASE_STATE_COLOR, this.DEFAULT_CASE_STATE_ICON).pipe(take(1), takeUntil(this._destroyed$)).subscribe((/**
             * @param {?} caseCardConfig
             * @return {?}
             */
            caseCardConfig => {
                this.caseCardConfig = caseCardConfig;
                // set default selected to first state for this case type (0 is case type)
                this.selectedStateConfig = this.caseCardConfig.cardConfig.stateMap[1];
                /** @type {?} */
                const caseTypeRec = this.caseCardConfig.cardConfig.stateMap.find((/**
                 * @param {?} stateMap
                 * @return {?}
                 */
                function (stateMap) {
                    return stateMap.isCaseType;
                }));
                this.caseTypeIcon = caseTypeRec.icon;
                this.caseTypeColor = caseTypeRec.fill;
                this.selectedCaseTypeConfig = this.getConfigForCaseType(this.appTypeLabel);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => { this.errorMessage = 'Error retrieving case card config: ' + error.error.errorMsg; }));
        });
    }
    /*public saveConfig = () => {
        this.caseCardConfigService.updateCaseCardConfig(this.sandboxId, this.appId, this.uiAppId, this.caseCardConfig)
          .pipe(
            take(1),
            takeUntil(this._destroyed$),
            map(caseCardConfig => {
              this.caseCardConfig = caseCardConfig;
            })
          ).subscribe(null, error => { console.log('Unable to update case card config: ' + error.errorMsg); }
        );
      }*/
    /**
     * @param {?} state
     * @param {?} isCaseType
     * @return {?}
     */
    openDialog(state, isCaseType) {
        if (!isCaseType) {
            this.selectState(state);
        }
        else {
            state = new CaseTypeState().deserialize({ value: this.appTypeLabel });
        }
        /** @type {?} */
        const dialogRef = this.dialog.open(LiveAppsStateIconUploadDialogComponent, {
            width: '500px',
            data: { state: state, isCaseType: isCaseType }
        });
        dialogRef.componentInstance.fileevent.subscribe((/**
         * @param {?} $e
         * @return {?}
         */
        ($e) => {
            this.uploadFile($e.file, $e.state, $e.isCaseType);
        }));
        dialogRef.afterClosed().subscribe((/**
         * @param {?} result
         * @return {?}
         */
        result => {
        }));
    }
    /**
     * @param {?} file
     * @param {?} state
     * @param {?} isStateIcon
     * @return {?}
     */
    uploadFile(file, state, isStateIcon) {
        if (file) {
            /** @type {?} */
            const url = 'webresource/v1/orgFolders/' + this.folderId + '/' + this.appId + '.' + file.name;
            /** @type {?} */
            const dlUrl = 'webresource/orgFolders/' + this.folderId + '/' + this.appId + '.' + file.name;
            this.liveapps.clearFromIconSVGTextCache(url);
            this.documentsService.uploadDocument('orgFolders', this.folderId, this.sandboxId, file, (this.appId + '.' + file.name), '')
                .subscribe((/**
             * @param {?} val
             * @return {?}
             */
            val => {
                if (!isStateIcon) {
                    this.setNewStateIcon(dlUrl);
                }
                else {
                    this.setNewCaseTypeIcon(dlUrl);
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => { console.log('error'); this.errorMessage = 'Error uploading state icon: ' + error.errorMsg; }));
        }
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.appId && (changes.appId.currentValue !== changes.appId.previousValue)) {
            this.refresh();
        }
    }
}
LiveAppsApplicationConfigurationComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-application-configuration',
                template: "<div *ngIf=\"appId\" class=\"tcs-case-card-customization\" fxLayout=\"column\">\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-around stretch\" fxFlex>\n      <div fxLayout=\"column\" fxLayoutAlign=\"start center\" fxFlex>\n        <div fxLayout=\"column\" fxLayoutAlign=\"start center\">\n          <div class=\"tcs-case-card-customization-section-text\">Preview</div>\n        </div>\n        <div class=\"tcs-case-card-customization-preview\" fxLayout=\"column\" fxLayoutAlign=\"start center\" fxFlex>\n          <div *ngIf=\"selectedStateConfig && caseTypeColor && caseTypeIcon\" style=\"border-radius: 3px; margin: 5px;\" fxLayout=\"column\" fxLayoutAlign=\"space-around center\">\n            <tcla-live-apps-case-summary style=\"margin: 5px;\" [displayType]=\"'card'\" [typeBar]=\"true\" [configMode]=\"true\" [configModeColor]=\"caseCardConfig.cardConfig.useCaseTypeColor ? caseTypeColor : selectedStateConfig.fill\" [configModeIcon]=\"selectedStateConfig.icon\" [configModeCaseTypeColor]=\"caseTypeColor\" [configModeCaseTypeIcon]=\"caseTypeIcon\" [configModeAppTypeLabel]=\"appTypeLabel\"></tcla-live-apps-case-summary>\n            <tcla-live-apps-case-summary style=\"margin: 5px;\" [displayType]=\"'miniCard'\" [typeBar]=\"true\" [configMode]=\"true\" [configModeColor]=\"caseCardConfig.cardConfig.useCaseTypeColor ? caseTypeColor : selectedStateConfig.fill\" [configModeIcon]=\"selectedStateConfig.icon\" [configModeCaseTypeColor]=\"caseTypeColor\" [configModeCaseTypeIcon]=\"caseTypeIcon\" [configModeAppTypeLabel]=\"appTypeLabel\"></tcla-live-apps-case-summary>\n          </div>\n        </div>\n      </div>\n      <div class=\"tcs-case-card-customization-divider\"></div>\n      <div fxLayout=\"column\" fxLayoutAlign=\"start center\" fxFlex>\n        <div fxLayout=\"column\" fxLayoutAlign=\"start center\">\n          <div class=\"tcs-case-card-customization-section-text\">Configure Icons</div>\n        </div>\n        <div fxFlex>\n          <div fxFlex class=\"tcs-case-states-list\" *ngIf=\"caseCardConfig && caseCardConfig.cardConfig && caseCardConfig.states\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\n            <div class=\"tcs-case-states-list-inner\">\n              <div class=\"case-type-color-toggle\">\n                <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                  <mat-slide-toggle\n                  class=\"use-case-type-color\"\n                  [labelPosition]=\"'before'\"\n                  [checked]=\"caseCardConfig.cardConfig.useCaseTypeColor\"\n                  (change)=\"handleCaseTypeColorToggleChange($event)\">\n                  Use Case Type Color for color bar\n                  </mat-slide-toggle>\n                </div>\n              </div>\n              <div class=\"tcs-case-states-list-row\">\n                  <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                    <div fxLayoutAlign=\"start center\" style=\"min-width: 170px;\">Case Type Icon</div>\n                    <tcla-live-apps-state-icon style=\"margin-left: 10px; margin-right: 10px; min-width: 14px;\" #iconcomp [id]=\"appTypeLabel\" [iconPath]=\"selectedCaseTypeConfig.icon\" [color]=\"selectedCaseTypeConfig.fill\"\n                                               [appId]=\"appId\" [(colorPicker)]=\"selectedCaseTypeConfig.fill\" (colorPickerChange)=\"setCaseTypeFill($event, selectedCaseTypeConfig)\" [cpPresetColors]=\"DEFAULT_COLOR_PALETTE\" [cpPositionOffset]=\"'-40%'\"\n                                              matTooltip=\"Click to change color\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\n                    </tcla-live-apps-state-icon>\n                    <mat-icon (click)=\"openDialog(null, true)\" class=\"tcs-icon tcs-icon-active tcs-config-button tcs-document-upload-button\" svgIcon=\"tcs-document-upload\"\n                              matTooltip=\"Click to upload new icon\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\n                    </mat-icon>\n                    <mat-icon class=\"tcs-icon tcs-icon-active tcs-config-button-placeholder\"></mat-icon>\n                  </div>\n              </div>\n              <div class=\"tcs-case-states-icon-divider\"></div>\n              <!-- case state icons -->\n              <div *ngFor=\"let state of caseCardConfig.states\" class=\"tcs-case-states-list-row\" (click)=\"selectState(state)\">\n                <div *ngIf=\"getConfigForState(state); let stateConfig;\">\n                  <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                    <div fxLayoutAlign=\"start center\" style=\"min-width: 170px;\">{{state.label | ellipsis: 25}}</div>\n                    <tcla-live-apps-state-icon style=\"margin-left: 10px; margin-right: 10px; min-width: 14px;\" #iconcomp [id]=\"state.value\" [iconPath]=\"stateConfig.icon\" [color]=\"stateConfig.fill\"\n                                               [appId]=\"appId\" [(colorPicker)]=\"stateConfig.fill\" (colorPickerChange)=\"setFill($event, stateConfig)\" [cpPresetColors]=\"DEFAULT_COLOR_PALETTE\" [cpPositionOffset]=\"'-40%'\"\n                                              matTooltip=\"Click to change color\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\n                    </tcla-live-apps-state-icon>\n                    <mat-icon (click)=\"openDialog(state, false)\" class=\"tcs-icon tcs-icon-active tcs-config-button tcs-document-upload-button\" svgIcon=\"tcs-document-upload\"\n                              matTooltip=\"Click to upload new icon\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\n                    </mat-icon>\n                    <mat-icon class=\"tcs-icon tcs-icon-active tcs-config-button-placeholder\"></mat-icon>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  <!--div class=\"tcs-case-card-customization-footer\" fxLayout=\"column\" fxLayoutAlign=\"end stretch\">\n    <div class=\"tcs-case-card-customization-action-buttons\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n      <button class=\"tcs-save-app-config-button\" mat-button (click)=\"saveConfig()\" type=\"submit\">Save Configuration</button>\n    </div>\n  </div-->\n</div>\n",
                styles: [".tcs-case-card-customization{min-width:775px;min-height:370px;background-color:#fff}.tcs-case-card-customization *{font-family:Source Sans Pro;font-size:12px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;text-align:center;color:#000}.case-type-color-toggle{margin-bottom:10px;margin-top:10px}.tcs-case-card-customization-header{height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-case-card-customization .tcs-case-card-customization-header-text{font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-case-card-customization-action-buttons{margin-top:10px;margin-bottom:10px}.tcs-case-card-customization-divider{padding:0;margin:4px 5px 0;border-left:1.1px solid #f4f4f4}.tcs-case-card-customization .tcs-case-card-customization-section-text{font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#000}.tcs-case-states-list{margin:5px}.tcs-case-card-customization-preview app-live-apps-case-summary,.tcs-case-states-list-inner{overflow-y:auto}.tcs-case-states-list-row{border-radius:3px;padding:3px;margin-left:15px;margin-right:15px}.tcs-case-states-list-row:hover{-webkit-transition:background-color .5s;transition:background-color .5s;background-color:#eef0f7}.tcs-icon-active.tcs-config-button{display:none}.tcs-icon-active.tcs-config-button-placeholder{display:inline-block;width:24px}.tcs-case-states-list-row:hover .tcs-icon-active.tcs-config-button{display:inline-block}.tcs-case-states-list-row:hover .tcs-icon-active.tcs-config-button-placeholder{display:none}.tcs-case-states-icon-divider{padding:0;margin:2px 15px 4px 10px;border-bottom:1.1px solid #f4f4f4}.tcs-save-app-config-button{height:35px}"]
            }] }
];
/** @nocollapse */
LiveAppsApplicationConfigurationComponent.ctorParameters = () => [
    { type: HttpClient },
    { type: DomSanitizer },
    { type: LiveAppsService },
    { type: TcCaseCardConfigService },
    { type: TcDocumentService },
    { type: MatDialog },
    { type: Location }
];
LiveAppsApplicationConfigurationComponent.propDecorators = {
    stateIconComponents: [{ type: ViewChildren, args: ['iconcomp',] }],
    caseSummaryComponent: [{ type: ViewChildren, args: [LiveAppsCaseSummaryComponent,] }],
    appId: [{ type: Input }],
    appTypeLabel: [{ type: Input }],
    sandboxId: [{ type: Input }],
    uiAppId: [{ type: Input }],
    folderId: [{ type: Input }],
    configChanged: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.stateIconComponents;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.caseSummaryComponent;
    /**
     * The LA Application Id
     * @type {?}
     */
    LiveAppsApplicationConfigurationComponent.prototype.appId;
    /**
     * The label shown above the case type in the configuration widget
     * @type {?}
     */
    LiveAppsApplicationConfigurationComponent.prototype.appTypeLabel;
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsApplicationConfigurationComponent.prototype.sandboxId;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     * @type {?}
     */
    LiveAppsApplicationConfigurationComponent.prototype.uiAppId;
    /**
     * The organisation folder to store/retrieve documents
     * @type {?}
     */
    LiveAppsApplicationConfigurationComponent.prototype.folderId;
    /**
     * ~event configChanged : Configuration values changed
     * ~payload CaseCardConfig : CaseCardConfig object when configuration is changed (so called can do a save with data)
     * @type {?}
     */
    LiveAppsApplicationConfigurationComponent.prototype.configChanged;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.errorMessage;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.caseCardConfig;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.selectedStateConfig;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.selectedCaseTypeConfig;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.caseTypeIcon;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.caseTypeColor;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.DEFAULT_CASE_TYPE_ICON;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.DEFAULT_CASE_TYPE_COLOR;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.DEFAULT_CASE_STATE_ICON;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.DEFAULT_CASE_STATE_COLOR;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.DEFAULT_COLOR_PALETTE;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.getConfigForState;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.getConfigForCaseType;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.updateIconMap;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.handleCaseTypeColorToggleChange;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.setFill;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.setCaseTypeFill;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.selectState;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.setNewStateIcon;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.setNewCaseTypeIcon;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.refresh;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsApplicationConfigurationComponent.prototype.http;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsApplicationConfigurationComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsApplicationConfigurationComponent.prototype.liveapps;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.caseCardConfigService;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsApplicationConfigurationComponent.prototype.documentsService;
    /** @type {?} */
    LiveAppsApplicationConfigurationComponent.prototype.dialog;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsApplicationConfigurationComponent.prototype.location;
}
export class LiveAppsStateIconUploadDialogComponent {
    /**
     * @param {?} dialogRef
     * @param {?} data
     */
    constructor(dialogRef, data) {
        this.dialogRef = dialogRef;
        this.data = data;
        this.fileevent = new EventEmitter();
        this.fileToUpload = undefined;
        this.description = undefined;
        this.uploadFile = (/**
         * @return {?}
         */
        () => {
            if (this.fileToUpload) {
                this.fileevent.emit({ file: this.fileToUpload, state: this.data.state, isCaseType: this.data.isCaseType });
                this.dialogRef.close();
            }
        });
    }
    /**
     * @param {?} description
     * @return {?}
     */
    setFileDescription(description) {
        this.description = description;
    }
    /**
     * @param {?} files
     * @return {?}
     */
    attachFile(files) {
        this.fileToUpload = files.item(0);
        /*const myReader: FileReader = new FileReader();
        myReader.readAsText(this.fileToUpload);
        this.fileText = myReader.result.toString();*/
    }
    /**
     * @return {?}
     */
    onNoClick() {
        this.dialogRef.close();
    }
}
LiveAppsStateIconUploadDialogComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-state-icon-upload-dialog',
                template: "  <h1 mat-dialog-title>Upload New Icon (svg) for '{{data.state.value}}'</h1>\n  <div mat-dialog-content class=\"tcs-state-icon-upload-dialog\">\n    <form #fileUploadForm=\"ngForm\" fxFlex fxLayout=\"column\">\n      <div fxLayout=\"row\" fxLayoutAlign=\"start space-between\">\n        <button type=\"button\" mat-raised-button (click)=\"fileInput.click()\">Choose File To Upload</button>\n        <div *ngIf=\"fileToUpload\">{{fileToUpload.name}}</div>\n        <!-- below input is hidden and enabled by above button -->\n        <input class=\"tcs-hidden-input\" (change)=\"attachFile($event.target.files)\" accept=\"image/svg+xml\" #fileInput type=\"file\" id=\"file\">\n      </div>\n    </form>\n  </div>\n  <div mat-dialog-actions>\n    <button mat-button (click)=\"uploadFile()\" type=\"submit\" [disabled]=\"!fileToUpload\">Upload</button>\n    <button mat-button (click)=\"onNoClick()\">Cancel</button>\n  </div>\n",
                styles: [".tcs-hidden-input{display:none}"]
            }] }
];
/** @nocollapse */
LiveAppsStateIconUploadDialogComponent.ctorParameters = () => [
    { type: MatDialogRef },
    { type: undefined, decorators: [{ type: Inject, args: [MAT_DIALOG_DATA,] }] }
];
LiveAppsStateIconUploadDialogComponent.propDecorators = {
    fileevent: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    LiveAppsStateIconUploadDialogComponent.prototype.fileevent;
    /** @type {?} */
    LiveAppsStateIconUploadDialogComponent.prototype.fileToUpload;
    /** @type {?} */
    LiveAppsStateIconUploadDialogComponent.prototype.description;
    /** @type {?} */
    LiveAppsStateIconUploadDialogComponent.prototype.fileText;
    /** @type {?} */
    LiveAppsStateIconUploadDialogComponent.prototype.uploadFile;
    /** @type {?} */
    LiveAppsStateIconUploadDialogComponent.prototype.dialogRef;
    /** @type {?} */
    LiveAppsStateIconUploadDialogComponent.prototype.data;
}
//# sourceMappingURL=data:application/json;base64,