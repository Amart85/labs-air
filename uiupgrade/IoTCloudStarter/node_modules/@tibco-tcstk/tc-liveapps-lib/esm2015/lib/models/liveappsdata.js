/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { DeserializableClass } from '@tibco-tcstk/tc-core-lib';
export class FormTab extends DeserializableClass {
}
if (false) {
    /** @type {?} */
    FormTab.prototype.type;
    /** @type {?} */
    FormTab.prototype.title;
    /** @type {?} */
    FormTab.prototype.workitemId;
    /** @type {?} */
    FormTab.prototype.action;
}
export class NoteThread {
    /**
     * @param {?} threadId
     * @param {?} showReplies
     * @param {?} showNewReply
     * @param {?} editMode
     * @param {?} newReply
     * @param {?} thread
     * @param {?} note
     */
    constructor(threadId, showReplies, showNewReply, editMode, newReply, thread, note) {
        this.threadId = threadId;
        this.showReplies = showReplies;
        this.showNewReply = showNewReply;
        this.editMode = editMode;
        this.newReply = newReply;
        this.thread = thread;
        this.note = note;
    }
}
if (false) {
    /** @type {?} */
    NoteThread.prototype.threadId;
    /** @type {?} */
    NoteThread.prototype.showReplies;
    /** @type {?} */
    NoteThread.prototype.showNewReply;
    /** @type {?} */
    NoteThread.prototype.editMode;
    /** @type {?} */
    NoteThread.prototype.newReply;
    /** @type {?} */
    NoteThread.prototype.thread;
    /** @type {?} */
    NoteThread.prototype.note;
}
export class CaseRoute {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CaseRoute.prototype.caseRef;
    /** @type {?} */
    CaseRoute.prototype.appId;
    /** @type {?} */
    CaseRoute.prototype.typeId;
    /** @type {?} */
    CaseRoute.prototype.workitemId;
}
export class NotificationCollection {
    /**
     * @param {?} collectionName
     * @param {?} lifecycledWithType
     * @param {?} lifecycledWithId
     */
    constructor(collectionName, lifecycledWithType, lifecycledWithId) {
        this.collectionName = collectionName;
        this.lifecycledWithType = lifecycledWithType;
        this.lifecycledWithId = lifecycledWithId;
    }
}
if (false) {
    /** @type {?} */
    NotificationCollection.prototype.collectionName;
    /** @type {?} */
    NotificationCollection.prototype.lifecycledWithType;
    /** @type {?} */
    NotificationCollection.prototype.lifecycledWithId;
}
export class Notification {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    Notification.prototype.entityId;
    /** @type {?} */
    Notification.prototype.entityName;
    /** @type {?} */
    Notification.prototype.entityType;
    /** @type {?} */
    Notification.prototype.id;
    /** @type {?} */
    Notification.prototype.notifyCollection;
    /** @type {?} */
    Notification.prototype.notifyOnAllReplies;
    /** @type {?} */
    Notification.prototype.notifyOnUpdate;
    /** @type {?} */
    Notification.prototype.threadId;
    /** @type {?} */
    Notification.prototype.topicId;
    /** @type {?} */
    Notification.prototype.type;
}
export class NotificationList {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        (/** @type {?} */ (this)).notifications = [];
        Object.assign((/** @type {?} */ (this)).notifications, input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    NotificationList.prototype.notifications;
}
export class ThreadList {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        (/** @type {?} */ (this)).threads = [];
        Object.assign((/** @type {?} */ (this)).threads, input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    ThreadList.prototype.threads;
}
export class Metadata {
    /**
     * @param {?} createdBy
     * @param {?} creationTimestamp
     * @param {?} createdByDetails
     * @param {?} modifiedBy
     * @param {?} modificationTimestamp
     * @param {?} modifiedByDetails
     * @param {?} lock
     * @param {?} lockType
     * @param {?} lockedBy
     * @param {?} msLockExpiry
     * @param {?} msSystemTime
     * @param {?} markedForPurge
     * @param {?} applicationId
     * @param {?} applicationLabel
     * @param {?} typeId
     * @param {?} stateColor
     * @param {?} stateIcon
     * @param {?} caseTypeColor
     * @param {?} caseTypeIcon
     * @param {?} useCaseTypeColor
     */
    constructor(createdBy, creationTimestamp, createdByDetails, modifiedBy, modificationTimestamp, modifiedByDetails, lock, lockType, lockedBy, msLockExpiry, msSystemTime, markedForPurge, applicationId, applicationLabel, typeId, stateColor, stateIcon, caseTypeColor, caseTypeIcon, useCaseTypeColor) {
        this.createdBy = createdBy;
        this.creationTimestamp = creationTimestamp;
        this.createdByDetails = createdByDetails;
        this.modifiedBy = modifiedBy;
        this.modificationTimestamp = modificationTimestamp;
        this.modifiedByDetails = modifiedByDetails;
        this.lock = lock;
        this.lockType = lockType;
        this.lockedBy = lockedBy;
        this.msLockExpiry = msLockExpiry;
        this.msSystemTime = msSystemTime;
        this.markedForPurge = markedForPurge;
        this.applicationId = applicationId;
        this.applicationLabel = applicationLabel;
        this.typeId = typeId;
        this.stateColor = stateColor;
        this.stateIcon = stateIcon;
        this.caseTypeColor = caseTypeColor;
        this.caseTypeIcon = caseTypeIcon;
        this.useCaseTypeColor = useCaseTypeColor;
    }
}
if (false) {
    /** @type {?} */
    Metadata.prototype.createdBy;
    /** @type {?} */
    Metadata.prototype.creationTimestamp;
    /** @type {?} */
    Metadata.prototype.createdByDetails;
    /** @type {?} */
    Metadata.prototype.modifiedBy;
    /** @type {?} */
    Metadata.prototype.modificationTimestamp;
    /** @type {?} */
    Metadata.prototype.modifiedByDetails;
    /** @type {?} */
    Metadata.prototype.lock;
    /** @type {?} */
    Metadata.prototype.lockType;
    /** @type {?} */
    Metadata.prototype.lockedBy;
    /** @type {?} */
    Metadata.prototype.msLockExpiry;
    /** @type {?} */
    Metadata.prototype.msSystemTime;
    /** @type {?} */
    Metadata.prototype.markedForPurge;
    /** @type {?} */
    Metadata.prototype.applicationId;
    /** @type {?} */
    Metadata.prototype.applicationLabel;
    /** @type {?} */
    Metadata.prototype.typeId;
    /** @type {?} */
    Metadata.prototype.stateColor;
    /** @type {?} */
    Metadata.prototype.stateIcon;
    /** @type {?} */
    Metadata.prototype.caseTypeColor;
    /** @type {?} */
    Metadata.prototype.caseTypeIcon;
    /** @type {?} */
    Metadata.prototype.useCaseTypeColor;
}
export class CaseTypeState {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CaseTypeState.prototype.id;
    /** @type {?} */
    CaseTypeState.prototype.label;
    /** @type {?} */
    CaseTypeState.prototype.value;
    /** @type {?} */
    CaseTypeState.prototype.isTerminal;
}
export class CaseTypeStatesListList {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        (/** @type {?} */ (this)).casetypes = [];
        Object.assign((/** @type {?} */ (this)).casetypes, input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CaseTypeStatesListList.prototype.casetypes;
}
export class CaseTypeStatesList {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        (/** @type {?} */ (this)).states = [];
        Object.assign((/** @type {?} */ (this)).states, input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CaseTypeStatesList.prototype.states;
}
export class CaseInfo {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        (/** @type {?} */ (this)).summaryObj = (/** @type {?} */ (this)).summary ? JSON.parse((/** @type {?} */ (this)).summary) : undefined;
        (/** @type {?} */ (this)).casedataObj = (/** @type {?} */ (this)).casedata ? JSON.parse((/** @type {?} */ (this)).casedata) : undefined;
        (/** @type {?} */ (this)).untaggedCasedataObj = (/** @type {?} */ (this)).untaggedCasedata ? JSON.parse((/** @type {?} */ (this)).untaggedCasedata) : undefined;
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CaseInfo.prototype.deleted;
    /** @type {?} */
    CaseInfo.prototype.caseReference;
    /** @type {?} */
    CaseInfo.prototype.untaggedCasedata;
    /** @type {?} */
    CaseInfo.prototype.untaggedCasedataObj;
    /** @type {?} */
    CaseInfo.prototype.casedata;
    /** @type {?} */
    CaseInfo.prototype.casedataObj;
    /** @type {?} */
    CaseInfo.prototype.summary;
    /** @type {?} */
    CaseInfo.prototype.summaryObj;
    /** @type {?} */
    CaseInfo.prototype.metadata;
}
export class CaseInfoList {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        (/** @type {?} */ (this)).caseinfos = [];
        Object.assign((/** @type {?} */ (this)).caseinfos, input);
        (/** @type {?} */ (this)).caseinfos.forEach((/**
         * @param {?} caseinfo
         * @return {?}
         */
        function (caseinfo) {
            if (caseinfo.summary) {
                caseinfo.summaryObj = JSON.parse(caseinfo.summary);
            }
            if (caseinfo.casedata) {
                caseinfo.casedataObj = JSON.parse(caseinfo.casedata);
            }
        }));
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CaseInfoList.prototype.caseinfos;
    /** @type {?} */
    CaseInfoList.prototype.casecount;
}
export class CaseAttribute {
}
if (false) {
    /** @type {?} */
    CaseAttribute.prototype.isIdentifier;
    /** @type {?} */
    CaseAttribute.prototype.isMandatory;
    /** @type {?} */
    CaseAttribute.prototype.isStructuredType;
    /** @type {?} */
    CaseAttribute.prototype.label;
    /** @type {?} */
    CaseAttribute.prototype.name;
    /** @type {?} */
    CaseAttribute.prototype.type;
    /** @type {?} */
    CaseAttribute.prototype.maximum;
    /** @type {?} */
    CaseAttribute.prototype.minimum;
}
export class JsonSchema {
}
if (false) {
    /** @type {?} */
    JsonSchema.prototype.$schema;
    /** @type {?} */
    JsonSchema.prototype.definitions;
    /** @type {?} */
    JsonSchema.prototype.properties;
    /** @type {?} */
    JsonSchema.prototype.type;
    /** @type {?} */
    JsonSchema.prototype.required;
}
export class Process {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    Process.prototype.jsonSchema;
    /** @type {?} */
    Process.prototype.name;
    /** @type {?} */
    Process.prototype.id;
    /** @type {?} */
    Process.prototype.unsupportedForm;
}
export class ProcessId {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    ProcessId.prototype.caseIdentifier;
    /** @type {?} */
    ProcessId.prototype.caseReference;
}
export class CaseType {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CaseType.prototype.actions;
    /** @type {?} */
    CaseType.prototype.applicationId;
    /** @type {?} */
    CaseType.prototype.applicationInternalName;
    /** @type {?} */
    CaseType.prototype.applicationName;
    /** @type {?} */
    CaseType.prototype.attributes;
    /** @type {?} */
    CaseType.prototype.creators;
    /** @type {?} */
    CaseType.prototype.id;
    /** @type {?} */
    CaseType.prototype.isCase;
    /** @type {?} */
    CaseType.prototype.label;
    /** @type {?} */
    CaseType.prototype.name;
    /** @type {?} */
    CaseType.prototype.jsonSchema;
}
export class CaseTypesList {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        (/** @type {?} */ (this)).casetypes = [];
        Object.assign((/** @type {?} */ (this)).casetypes, input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CaseTypesList.prototype.casetypes;
}
export class CaseAction {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CaseAction.prototype.activityName;
    /** @type {?} */
    CaseAction.prototype.applicationId;
    /** @type {?} */
    CaseAction.prototype.applicationName;
    /** @type {?} */
    CaseAction.prototype.availableInStates;
    /** @type {?} */
    CaseAction.prototype.chatBotEnabled;
    /** @type {?} */
    CaseAction.prototype.id;
    /** @type {?} */
    CaseAction.prototype.label;
    /** @type {?} */
    CaseAction.prototype.name;
    /** @type {?} */
    CaseAction.prototype.noData;
    /** @type {?} */
    CaseAction.prototype.performerPaths;
    /** @type {?} */
    CaseAction.prototype.roles;
    /** @type {?} */
    CaseAction.prototype.version;
    /** @type {?} */
    CaseAction.prototype.process;
}
export class CaseActionsList {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        (/** @type {?} */ (this)).actions = [];
        Object.assign((/** @type {?} */ (this)).actions, input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CaseActionsList.prototype.actions;
}
export class CaseCreator {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CaseCreator.prototype.activityName;
    /** @type {?} */
    CaseCreator.prototype.applicationId;
    /** @type {?} */
    CaseCreator.prototype.applicationName;
    /** @type {?} */
    CaseCreator.prototype.chatBotEnabled;
    /** @type {?} */
    CaseCreator.prototype.id;
    /** @type {?} */
    CaseCreator.prototype.label;
    /** @type {?} */
    CaseCreator.prototype.name;
    /** @type {?} */
    CaseCreator.prototype.roles;
    /** @type {?} */
    CaseCreator.prototype.version;
    /** @type {?} */
    CaseCreator.prototype.process;
}
export class CaseCreatorsList {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        (/** @type {?} */ (this)).creators = [];
        Object.assign((/** @type {?} */ (this)).creators, input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CaseCreatorsList.prototype.creators;
}
export class CaseList {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        (/** @type {?} */ (this)).uniqueKey = input.uniqueKey;
        (/** @type {?} */ (this)).maxSize = input.maxSize;
        (/** @type {?} */ (this)).caseRefs = [];
        Object.assign((/** @type {?} */ (this)).caseRefs, input.caseRefs);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CaseList.prototype.uniqueKey;
    /** @type {?} */
    CaseList.prototype.maxSize;
    /** @type {?} */
    CaseList.prototype.caseRefs;
}
export class ApiResponseText {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    ApiResponseText.prototype.message;
}
export class ApiResponseError {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    ApiResponseError.prototype.errorMsg;
    /** @type {?} */
    ApiResponseError.prototype.errorCode;
    /** @type {?} */
    ApiResponseError.prototype.contextAttributes;
}
export class UserInfo {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    UserInfo.prototype.externalId;
    /** @type {?} */
    UserInfo.prototype.firstName;
    /** @type {?} */
    UserInfo.prototype.lastName;
    /** @type {?} */
    UserInfo.prototype.username;
    /** @type {?} */
    UserInfo.prototype.email;
    /** @type {?} */
    UserInfo.prototype.type;
    /** @type {?} */
    UserInfo.prototype.id;
}
export class NotesRole {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    NotesRole.prototype.entityId;
    /** @type {?} */
    NotesRole.prototype.entityName;
    /** @type {?} */
    NotesRole.prototype.entityType;
    /** @type {?} */
    NotesRole.prototype.id;
    /** @type {?} */
    NotesRole.prototype.role;
    /** @type {?} */
    NotesRole.prototype.threadId;
}
export class Thread {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    Thread.prototype.acceptedStatusCount;
    /** @type {?} */
    Thread.prototype.actionDate;
    /** @type {?} */
    Thread.prototype.actionId;
    /** @type {?} */
    Thread.prototype.actionType;
    /** @type {?} */
    Thread.prototype.answerNoteCount;
    /** @type {?} */
    Thread.prototype.answeredStatusCount;
    /** @type {?} */
    Thread.prototype.createdById;
    /** @type {?} */
    Thread.prototype.createdByName;
    /** @type {?} */
    Thread.prototype.createdDate;
    /** @type {?} */
    Thread.prototype.id;
    /** @type {?} */
    Thread.prototype.informationalNoteCount;
    /** @type {?} */
    Thread.prototype.isAbandoned;
    /** @type {?} */
    Thread.prototype.isLocked;
    /** @type {?} */
    Thread.prototype.isOrphaned;
    /** @type {?} */
    Thread.prototype.issueNoteCount;
    /** @type {?} */
    Thread.prototype.lifecycledWithId;
    /** @type {?} */
    Thread.prototype.lifecycledWithType;
    /** @type {?} */
    Thread.prototype.modifiedById;
    /** @type {?} */
    Thread.prototype.modifiedByName;
    /** @type {?} */
    Thread.prototype.modifiedDate;
    /** @type {?} */
    Thread.prototype.questionNoteCount;
    /** @type {?} */
    Thread.prototype.relatedItemCollection;
    /** @type {?} */
    Thread.prototype.relatedItemId;
    /** @type {?} */
    Thread.prototype.relatedItemType;
    /** @type {?} */
    Thread.prototype.resolutionNoteCount;
    /** @type {?} */
    Thread.prototype.resolvedStatusCount;
    /** @type {?} */
    Thread.prototype.roles;
    /** @type {?} */
    Thread.prototype.status;
    /** @type {?} */
    Thread.prototype.topLevelNoteId;
    /** @type {?} */
    Thread.prototype.topicId;
    /** @type {?} */
    Thread.prototype.totalCount;
    /** @type {?} */
    Thread.prototype.unacceptedStatusCount;
    /** @type {?} */
    Thread.prototype.unansweredStatusCount;
    /** @type {?} */
    Thread.prototype.unclassifiedStatusCount;
    /** @type {?} */
    Thread.prototype.unresolvedStatusCount;
}
export class Note {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    Note.prototype.attributes;
    /** @type {?} */
    Note.prototype.createdById;
    /** @type {?} */
    Note.prototype.createdByName;
    /** @type {?} */
    Note.prototype.createdDate;
    /** @type {?} */
    Note.prototype.descendantModifiedDate;
    /** @type {?} */
    Note.prototype.id;
    /** @type {?} */
    Note.prototype.isDescendantNewOrModified;
    /** @type {?} */
    Note.prototype.isHidden;
    /** @type {?} */
    Note.prototype.isModified;
    /** @type {?} */
    Note.prototype.isNew;
    /** @type {?} */
    Note.prototype.level;
    /** @type {?} */
    Note.prototype.modifiedByName;
    /** @type {?} */
    Note.prototype.modifiedDate;
    /** @type {?} */
    Note.prototype.notificationLabel;
    /** @type {?} */
    Note.prototype.notificationUrl;
    /** @type {?} */
    Note.prototype.parentId;
    /** @type {?} */
    Note.prototype.relatedItemCollection;
    /** @type {?} */
    Note.prototype.relatedItemId;
    /** @type {?} */
    Note.prototype.relatedItemType;
    /** @type {?} */
    Note.prototype.replyAcceptedId;
    /** @type {?} */
    Note.prototype.replyCount;
    /** @type {?} */
    Note.prototype.replyDate;
    /** @type {?} */
    Note.prototype.status;
    /** @type {?} */
    Note.prototype.text;
    /** @type {?} */
    Note.prototype.thread;
    /** @type {?} */
    Note.prototype.threadId;
    /** @type {?} */
    Note.prototype.title;
    /** @type {?} */
    Note.prototype.topicId;
    /** @type {?} */
    Note.prototype.type;
    /** @type {?} */
    Note.prototype.editMode;
}
export class NotesList {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        (/** @type {?} */ (this)).notes = [];
        Object.assign((/** @type {?} */ (this)).notes, input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    NotesList.prototype.notes;
}
export class IconMap {
    /**
     * @param {?} isCaseType
     * @param {?} state
     * @param {?} fill
     * @param {?} icon
     */
    constructor(isCaseType, state, fill, icon) {
        this.isCaseType = isCaseType;
        this.state = state;
        this.fill = fill;
        this.icon = icon;
    }
}
if (false) {
    /** @type {?} */
    IconMap.prototype.isCaseType;
    /** @type {?} */
    IconMap.prototype.state;
    /** @type {?} */
    IconMap.prototype.fill;
    /** @type {?} */
    IconMap.prototype.icon;
}
export class CardConfig {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        // this.stateMap = [];
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CardConfig.prototype.id;
    /** @type {?} */
    CardConfig.prototype.useCaseTypeColor;
    /** @type {?} */
    CardConfig.prototype.stateMap;
}
export class LoginContext {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    LoginContext.prototype.authInfo;
    /** @type {?} */
    LoginContext.prototype.accessToken;
}
export class CaseSearchResults {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    CaseSearchResults.prototype.caserefs;
    /** @type {?} */
    CaseSearchResults.prototype.searchString;
}
//# sourceMappingURL=data:application/json;base64,