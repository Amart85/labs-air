/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// This guard is to check whether the user has appropriate role to access a route based on config settings
import { Injectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { LiveAppsService } from '../services/live-apps.service';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { forkJoin } from 'rxjs';
import { TcCoreCommonFunctions, TcGeneralConfigService, TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { Location } from '@angular/common';
import { TcRolesService } from '../services/tc-roles-service.ts.service';
import { TcAccessControlService } from '../services/tc-access-control.service';
import { AccessControlConfigurationResolver } from '../resolvers/accessControlConfiguration.resolver';
import { AccessResolver } from '../resolvers/access.resolver';
export class RoleGuard {
    /**
     * @param {?} liveapps
     * @param {?} rolesService
     * @param {?} http
     * @param {?} location
     * @param {?} route
     * @param {?} sharedStateService
     * @param {?} generalConfigService
     * @param {?} accessControlService
     * @param {?} router
     */
    constructor(liveapps, rolesService, http, location, route, sharedStateService, generalConfigService, accessControlService, router) {
        this.liveapps = liveapps;
        this.rolesService = rolesService;
        this.http = http;
        this.location = location;
        this.route = route;
        this.sharedStateService = sharedStateService;
        this.generalConfigService = generalConfigService;
        this.accessControlService = accessControlService;
        this.router = router;
        this.DEFAULT_CONFIG_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/routeAccessControl.json');
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivate(route, state) {
        /** @type {?} */
        let guardRoute = '';
        route.pathFromRoot.map((/**
         * @param {?} element
         * @return {?}
         */
        element => {
            if (element.url.length === 1) {
                guardRoute += '/' + element.url[0];
            }
        }));
        // we will need the active user role
        /** @type {?} */
        const activeResolver$ = new AccessResolver(this.location, this.http, this.accessControlService, this.rolesService, this.liveapps, this.route, this.sharedStateService, this.generalConfigService, this.router).resolve();
        // access control configuration to check current URL is on allowedRoutes
        /** @type {?} */
        const accessControlConfig$ = new AccessControlConfigurationResolver(this.location, this.http, this.accessControlService).resolve();
        // run both in parallel then check access
        return forkJoin(activeResolver$, accessControlConfig$).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([activeResolver, accessControlConfig]) => {
            // if guardRoute is not in allowedRoutes then OK
            if (accessControlConfig.allowedRoutes.indexOf(guardRoute) === -1) {
                return true;
            }
            // Check guardRoute in active user role routes
            if (activeResolver.routes.indexOf(guardRoute) > -1) {
                return true;
            }
            else {
                return false;
            }
        })));
    }
}
RoleGuard.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RoleGuard.ctorParameters = () => [
    { type: LiveAppsService },
    { type: TcRolesService },
    { type: HttpClient },
    { type: Location },
    { type: ActivatedRoute },
    { type: TcSharedStateService },
    { type: TcGeneralConfigService },
    { type: TcAccessControlService },
    { type: Router }
];
if (false) {
    /** @type {?} */
    RoleGuard.prototype.DEFAULT_CONFIG_URL;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.liveapps;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.rolesService;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.http;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.location;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.route;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.sharedStateService;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.accessControlService;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZS5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1saXZlYXBwcy1saWIvIiwic291cmNlcyI6WyJsaWIvZ3VhcmRzL3JvbGUuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFFQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBMkQsY0FBYyxFQUFFLE1BQU0sRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2pILE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLEdBQUcsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3JDLE9BQU8sRUFBRSxRQUFRLEVBQWMsTUFBTSxNQUFNLENBQUM7QUFDNUMsT0FBTyxFQUFFLHFCQUFxQixFQUFFLHNCQUFzQixFQUFFLG9CQUFvQixFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDL0csT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUN6RSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSxrREFBa0QsQ0FBQztBQUN0RyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFHOUQsTUFBTSxPQUFPLFNBQVM7Ozs7Ozs7Ozs7OztJQUlsQixZQUNZLFFBQXlCLEVBQ3pCLFlBQTRCLEVBQzVCLElBQWdCLEVBQ2hCLFFBQWtCLEVBQ2xCLEtBQXFCLEVBQ3JCLGtCQUF3QyxFQUN4QyxvQkFBNEMsRUFDNUMsb0JBQTRDLEVBQzVDLE1BQWM7UUFSZCxhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUN6QixpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFDNUIsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUNoQixhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBQ3JCLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBc0I7UUFDeEMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUF3QjtRQUM1Qyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXdCO1FBQzVDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFYMUIsdUJBQWtCLEdBQUcscUJBQXFCLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSx1Q0FBdUMsQ0FBQyxDQUFDO0lBWTVILENBQUM7Ozs7OztJQUVKLFdBQVcsQ0FBQyxLQUE2QixFQUFFLEtBQTBCOztZQUU3RCxVQUFVLEdBQUcsRUFBRTtRQUNuQixLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUc7Ozs7UUFBQyxPQUFPLENBQUMsRUFBRTtZQUM3QixJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtnQkFDMUIsVUFBVSxJQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2FBQ3RDO1FBQ0wsQ0FBQyxFQUFDLENBQUE7OztjQUdJLGVBQWUsR0FBRyxJQUFJLGNBQWMsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRTs7O2NBR2xOLG9CQUFvQixHQUFHLElBQUksa0NBQWtDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxDQUFDLE9BQU8sRUFBRTtRQUVsSSx5Q0FBeUM7UUFDekMsT0FBTyxRQUFRLENBQUMsZUFBZSxFQUFFLG9CQUFvQixDQUFDLENBQUMsSUFBSSxDQUN2RCxHQUFHOzs7O1FBQUMsQ0FBQyxDQUFDLGNBQWMsRUFBRSxtQkFBbUIsQ0FBQyxFQUFFLEVBQUU7WUFFMUMsZ0RBQWdEO1lBQ2hELElBQUksbUJBQW1CLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDOUQsT0FBTyxJQUFJLENBQUM7YUFDZjtZQUVELDhDQUE4QztZQUM5QyxJQUFJLGNBQWMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFDO2dCQUMvQyxPQUFPLElBQUksQ0FBQzthQUNmO2lCQUFNO2dCQUNILE9BQU8sS0FBSyxDQUFDO2FBQ2hCO1FBQ0wsQ0FBQyxFQUFDLENBQ0wsQ0FBQztJQUNOLENBQUM7OztZQWpESixVQUFVOzs7O1lBWEYsZUFBZTtZQU1mLGNBQWM7WUFMZCxVQUFVO1lBSVYsUUFBUTtZQU5pRCxjQUFjO1lBS3hCLG9CQUFvQjtZQUE1QyxzQkFBc0I7WUFHN0Msc0JBQXNCO1lBUm1ELE1BQU07Ozs7SUFlcEYsdUNBQStIOzs7OztJQUczSCw2QkFBaUM7Ozs7O0lBQ2pDLGlDQUFvQzs7Ozs7SUFDcEMseUJBQXdCOzs7OztJQUN4Qiw2QkFBMEI7Ozs7O0lBQzFCLDBCQUE2Qjs7Ozs7SUFDN0IsdUNBQWdEOzs7OztJQUNoRCx5Q0FBb0Q7Ozs7O0lBQ3BELHlDQUFvRDs7Ozs7SUFDcEQsMkJBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBndWFyZCBpcyB0byBjaGVjayB3aGV0aGVyIHRoZSB1c2VyIGhhcyBhcHByb3ByaWF0ZSByb2xlIHRvIGFjY2VzcyBhIHJvdXRlIGJhc2VkIG9uIGNvbmZpZyBzZXR0aW5nc1xuXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0NhbkFjdGl2YXRlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSb3V0ZXJTdGF0ZVNuYXBzaG90LCBBY3RpdmF0ZWRSb3V0ZSwgUm91dGVyfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgTGl2ZUFwcHNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbGl2ZS1hcHBzLnNlcnZpY2UnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IG1hcCB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7IGZvcmtKb2luLCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBUY0NvcmVDb21tb25GdW5jdGlvbnMsIFRjR2VuZXJhbENvbmZpZ1NlcnZpY2UsIFRjU2hhcmVkU3RhdGVTZXJ2aWNlIH0gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliJztcbmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IFRjUm9sZXNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdGMtcm9sZXMtc2VydmljZS50cy5zZXJ2aWNlJztcbmltcG9ydCB7IFRjQWNjZXNzQ29udHJvbFNlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy90Yy1hY2Nlc3MtY29udHJvbC5zZXJ2aWNlJztcbmltcG9ydCB7IEFjY2Vzc0NvbnRyb2xDb25maWd1cmF0aW9uUmVzb2x2ZXIgfSBmcm9tICcuLi9yZXNvbHZlcnMvYWNjZXNzQ29udHJvbENvbmZpZ3VyYXRpb24ucmVzb2x2ZXInO1xuaW1wb3J0IHsgQWNjZXNzUmVzb2x2ZXIgfSBmcm9tICcuLi9yZXNvbHZlcnMvYWNjZXNzLnJlc29sdmVyJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJvbGVHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcblxuICAgIERFRkFVTFRfQ09ORklHX1VSTCA9IFRjQ29yZUNvbW1vbkZ1bmN0aW9ucy5wcmVwYXJlVXJsRm9yU3RhdGljUmVzb3VyY2UodGhpcy5sb2NhdGlvbiwgJ2Fzc2V0cy9jb25maWcvcm91dGVBY2Nlc3NDb250cm9sLmpzb24nKTtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGxpdmVhcHBzOiBMaXZlQXBwc1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcm9sZXNTZXJ2aWNlOiBUY1JvbGVzU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICAgICAgICBwcml2YXRlIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICAgICAgcHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgICAgIHByaXZhdGUgc2hhcmVkU3RhdGVTZXJ2aWNlOiBUY1NoYXJlZFN0YXRlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBnZW5lcmFsQ29uZmlnU2VydmljZTogVGNHZW5lcmFsQ29uZmlnU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBhY2Nlc3NDb250cm9sU2VydmljZTogVGNBY2Nlc3NDb250cm9sU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlclxuICAgICkge31cblxuICAgIGNhbkFjdGl2YXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuXG4gICAgICAgIGxldCBndWFyZFJvdXRlID0gJyc7XG4gICAgICAgIHJvdXRlLnBhdGhGcm9tUm9vdC5tYXAoZWxlbWVudCA9PiB7XG4gICAgICAgICAgICBpZiAoZWxlbWVudC51cmwubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgICAgICAgZ3VhcmRSb3V0ZSArPSAnLycgKyBlbGVtZW50LnVybFswXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSlcblxuICAgICAgICAvLyB3ZSB3aWxsIG5lZWQgdGhlIGFjdGl2ZSB1c2VyIHJvbGVcbiAgICAgICAgY29uc3QgYWN0aXZlUmVzb2x2ZXIkID0gbmV3IEFjY2Vzc1Jlc29sdmVyKHRoaXMubG9jYXRpb24sIHRoaXMuaHR0cCwgdGhpcy5hY2Nlc3NDb250cm9sU2VydmljZSwgdGhpcy5yb2xlc1NlcnZpY2UsIHRoaXMubGl2ZWFwcHMsIHRoaXMucm91dGUsIHRoaXMuc2hhcmVkU3RhdGVTZXJ2aWNlLCB0aGlzLmdlbmVyYWxDb25maWdTZXJ2aWNlLCB0aGlzLnJvdXRlcikucmVzb2x2ZSgpO1xuXG4gICAgICAgIC8vIGFjY2VzcyBjb250cm9sIGNvbmZpZ3VyYXRpb24gdG8gY2hlY2sgY3VycmVudCBVUkwgaXMgb24gYWxsb3dlZFJvdXRlc1xuICAgICAgICBjb25zdCBhY2Nlc3NDb250cm9sQ29uZmlnJCA9IG5ldyBBY2Nlc3NDb250cm9sQ29uZmlndXJhdGlvblJlc29sdmVyKHRoaXMubG9jYXRpb24sIHRoaXMuaHR0cCwgdGhpcy5hY2Nlc3NDb250cm9sU2VydmljZSkucmVzb2x2ZSgpO1xuXG4gICAgICAgIC8vIHJ1biBib3RoIGluIHBhcmFsbGVsIHRoZW4gY2hlY2sgYWNjZXNzXG4gICAgICAgIHJldHVybiBmb3JrSm9pbihhY3RpdmVSZXNvbHZlciQsIGFjY2Vzc0NvbnRyb2xDb25maWckKS5waXBlKFxuICAgICAgICAgICAgbWFwKChbYWN0aXZlUmVzb2x2ZXIsIGFjY2Vzc0NvbnRyb2xDb25maWddKSA9PiB7XG5cbiAgICAgICAgICAgICAgICAvLyBpZiBndWFyZFJvdXRlIGlzIG5vdCBpbiBhbGxvd2VkUm91dGVzIHRoZW4gT0tcbiAgICAgICAgICAgICAgICBpZiAoYWNjZXNzQ29udHJvbENvbmZpZy5hbGxvd2VkUm91dGVzLmluZGV4T2YoZ3VhcmRSb3V0ZSkgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgIC8vIENoZWNrIGd1YXJkUm91dGUgaW4gYWN0aXZlIHVzZXIgcm9sZSByb3V0ZXNcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZlUmVzb2x2ZXIucm91dGVzLmluZGV4T2YoZ3VhcmRSb3V0ZSkgPiAtMSl7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxufVxuIl19