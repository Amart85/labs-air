/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { LiveAppsService } from '../services/live-apps.service';
import { map, switchMap } from 'rxjs/operators';
export class CaseDataResolver {
    /**
     * @param {?} liveapps
     */
    constructor(liveapps) {
        this.liveapps = liveapps;
    }
    /**
     * @param {?} routeSnapshot
     * @return {?}
     */
    resolve(routeSnapshot) {
        /** @type {?} */
        const claims$ = this.liveapps.getClaims()
            .pipe(map((/**
         * @param {?} claim
         * @return {?}
         */
        claim => {
            claim.sandboxes.forEach((/**
             * @param {?} sandbox
             * @return {?}
             */
            sandbox => {
                if (sandbox.type === 'Production') {
                    claim.primaryProductionSandbox = sandbox;
                }
            }));
            return claim;
        })));
        return claims$.pipe(switchMap((/**
         * @param {?} claiminfo
         * @return {?}
         */
        claiminfo => {
            return this.liveapps.getCase(routeSnapshot.params.caseRef, +claiminfo.primaryProductionSandbox.id, routeSnapshot.params.appId, routeSnapshot.params.typeId)
                .pipe(map((/**
             * @param {?} caseInfo
             * @return {?}
             */
            caseInfo => {
                return caseInfo;
            })));
        })));
    }
}
CaseDataResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CaseDataResolver.ctorParameters = () => [
    { type: LiveAppsService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CaseDataResolver.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS1kYXRhLnJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9yZXNvbHZlcnMvY2FzZS1kYXRhLnJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUVoRSxPQUFPLEVBQVcsR0FBRyxFQUFZLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBT25FLE1BQU0sT0FBTyxnQkFBZ0I7Ozs7SUFFekIsWUFBb0IsUUFBeUI7UUFBekIsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7SUFDN0MsQ0FBQzs7Ozs7SUFFRCxPQUFPLENBQUMsYUFBcUM7O2NBRW5DLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTthQUNwQyxJQUFJLENBQ0QsR0FBRzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1IsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPOzs7O1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQzlCLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxZQUFZLEVBQUU7b0JBQy9CLEtBQUssQ0FBQyx3QkFBd0IsR0FBRyxPQUFPLENBQUM7aUJBQzVDO1lBQ0wsQ0FBQyxFQUFDLENBQUM7WUFDSCxPQUFPLEtBQUssQ0FBQztRQUNqQixDQUFDLEVBQUMsQ0FDTDtRQUVMLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FDZixTQUFTOzs7O1FBQUMsU0FBUyxDQUFDLEVBQUU7WUFDbEIsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsYUFBYSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUM7aUJBQ3RKLElBQUksQ0FDRCxHQUFHOzs7O1lBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ1gsT0FBTyxRQUFRLENBQUM7WUFDcEIsQ0FBQyxFQUFDLENBQ0wsQ0FBQztRQUNWLENBQUMsRUFBQyxDQUNMLENBQUM7SUFDTixDQUFDOzs7WUE5QkosVUFBVTs7OztZQVJGLGVBQWU7Ozs7Ozs7SUFXUixvQ0FBaUMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlc29sdmUsIEFjdGl2YXRlZFJvdXRlU25hcHNob3QgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgZm9ya0pvaW4sIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMaXZlQXBwc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9saXZlLWFwcHMuc2VydmljZSc7XG5pbXBvcnQgeyBDbGFpbSwgR2VuZXJhbENvbmZpZ1Jlc29sdmVyLCBSb2xlQXR0cmlidXRlLCBUY0dlbmVyYWxDb25maWdTZXJ2aWNlLCBUY1NoYXJlZFN0YXRlU2VydmljZSB9IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5pbXBvcnQgeyBmbGF0TWFwLCBtYXAsIG1lcmdlTWFwLCBzd2l0Y2hNYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgQ2xhaW1zUmVzb2x2ZXIgfSBmcm9tICcuL2NsYWltcy5yZXNvbHZlcic7XG5pbXBvcnQgeyBDYXNlSW5mbyB9IGZyb20gJy4uL21vZGVscy9saXZlYXBwc2RhdGEnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ2FzZURhdGFSZXNvbHZlciBpbXBsZW1lbnRzIFJlc29sdmU8T2JzZXJ2YWJsZTxDYXNlSW5mbz4+IHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbGl2ZWFwcHM6IExpdmVBcHBzU2VydmljZSkge1xuICAgIH1cblxuICAgIHJlc29sdmUocm91dGVTbmFwc2hvdDogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IE9ic2VydmFibGU8Q2FzZUluZm8+IHtcblxuICAgICAgICBjb25zdCBjbGFpbXMkID0gdGhpcy5saXZlYXBwcy5nZXRDbGFpbXMoKVxuICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKGNsYWltID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY2xhaW0uc2FuZGJveGVzLmZvckVhY2goc2FuZGJveCA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2FuZGJveC50eXBlID09PSAnUHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGFpbS5wcmltYXJ5UHJvZHVjdGlvblNhbmRib3ggPSBzYW5kYm94O1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNsYWltO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBjbGFpbXMkLnBpcGUoXG4gICAgICAgICAgICBzd2l0Y2hNYXAoY2xhaW1pbmZvID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5saXZlYXBwcy5nZXRDYXNlKHJvdXRlU25hcHNob3QucGFyYW1zLmNhc2VSZWYsICtjbGFpbWluZm8ucHJpbWFyeVByb2R1Y3Rpb25TYW5kYm94LmlkLCByb3V0ZVNuYXBzaG90LnBhcmFtcy5hcHBJZCwgcm91dGVTbmFwc2hvdC5wYXJhbXMudHlwZUlkKVxuICAgICAgICAgICAgICAgICAgICAucGlwZShcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcChjYXNlSW5mbyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNhc2VJbmZvO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG4gICAgfVxuXG59XG4iXX0=