/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { LiveAppsService } from '../services/live-apps.service';
import { GeneralConfigResolver, TcGeneralConfigService, TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { map, switchMap } from 'rxjs/operators';
import { Roles } from '../models/tc-groups-data';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
export class AllRolesResolver {
    /**
     * @param {?} sharedStateService
     * @param {?} generalConfigService
     * @param {?} http
     * @param {?} liveapps
     * @param {?} location
     * @param {?} router
     */
    constructor(sharedStateService, generalConfigService, http, liveapps, location, router) {
        this.sharedStateService = sharedStateService;
        this.generalConfigService = generalConfigService;
        this.http = http;
        this.liveapps = liveapps;
        this.location = location;
        this.router = router;
    }
    /**
     * @param {?} routeSnapshot
     * @return {?}
     */
    resolve(routeSnapshot) {
        /** @type {?} */
        const claims$ = this.liveapps.getClaims()
            .pipe(map((/**
         * @param {?} claim
         * @return {?}
         */
        claim => {
            claim.sandboxes.forEach((/**
             * @param {?} sandbox
             * @return {?}
             */
            sandbox => {
                if (sandbox.type === 'Production') {
                    claim.primaryProductionSandbox = sandbox;
                }
            }));
            return claim;
        })));
        /** @type {?} */
        const generalConfigResolver = new GeneralConfigResolver(this.sharedStateService, this.generalConfigService, this.http, this.location, this.router);
        return claims$.pipe(switchMap((/**
         * @param {?} claiminfo
         * @return {?}
         */
        claiminfo => {
            generalConfigResolver.setSandbox(Number(claiminfo.primaryProductionSandbox.id));
            /** @type {?} */
            const generalConfig$ = generalConfigResolver.resolve().pipe(map((/**
             * @param {?} generalConfig
             * @return {?}
             */
            generalConfig => {
                return new Roles().deserialize({ roles: generalConfig.roles });
            })));
            return generalConfig$;
        })));
    }
}
AllRolesResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AllRolesResolver.ctorParameters = () => [
    { type: TcSharedStateService },
    { type: TcGeneralConfigService },
    { type: HttpClient },
    { type: LiveAppsService },
    { type: Location },
    { type: Router }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.sharedStateService;
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.liveapps;
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.location;
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsLXJvbGVzLnJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9yZXNvbHZlcnMvYWxsLXJvbGVzLnJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBa0MsTUFBTSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFFeEUsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBQzlELE9BQU8sRUFBUSxxQkFBcUIsRUFBaUIsc0JBQXNCLEVBQUUsb0JBQW9CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNuSSxPQUFPLEVBQVUsR0FBRyxFQUFZLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2pFLE9BQU8sRUFBZ0IsS0FBSyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDOUQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRWhELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUt6QyxNQUFNLE9BQU8sZ0JBQWdCOzs7Ozs7Ozs7SUFFM0IsWUFBb0Isa0JBQXdDLEVBQVUsb0JBQTRDLEVBQVUsSUFBZ0IsRUFBVSxRQUF5QixFQUFVLFFBQWtCLEVBQVUsTUFBYztRQUEvTSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXNCO1FBQVUseUJBQW9CLEdBQXBCLG9CQUFvQixDQUF3QjtRQUFVLFNBQUksR0FBSixJQUFJLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQ25PLENBQUM7Ozs7O0lBRUQsT0FBTyxDQUFDLGFBQXFDOztjQUVyQyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUU7YUFDdEMsSUFBSSxDQUNILEdBQUc7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTtZQUNWLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTzs7OztZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNoQyxJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssWUFBWSxFQUFFO29CQUNqQyxLQUFLLENBQUMsd0JBQXdCLEdBQUcsT0FBTyxDQUFDO2lCQUMxQztZQUNILENBQUMsRUFBQyxDQUFDO1lBQ0gsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLEVBQUMsQ0FDSDs7Y0FFRyxxQkFBcUIsR0FBRyxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUM7UUFFbEosT0FBTyxPQUFPLENBQUMsSUFBSSxDQUNqQixTQUFTOzs7O1FBQUMsU0FBUyxDQUFDLEVBQUU7WUFDbEIscUJBQXFCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzs7a0JBQzFFLGNBQWMsR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQ3pELEdBQUc7Ozs7WUFBQyxhQUFhLENBQUMsRUFBRTtnQkFDbEIsT0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBQyxFQUFFLEtBQUssRUFBRSxhQUFhLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQztZQUNqRSxDQUFDLEVBQUMsQ0FDSDtZQUNELE9BQU8sY0FBYyxDQUFDO1FBQ3hCLENBQUMsRUFDRixDQUNGLENBQUM7SUFFSixDQUFDOzs7WUFuQ0YsVUFBVTs7OztZQVRrRSxvQkFBb0I7WUFBNUMsc0JBQXNCO1lBR25FLFVBQVU7WUFKVixlQUFlO1lBTWYsUUFBUTtZQVJ5QixNQUFNOzs7Ozs7O0lBZWpDLDhDQUFnRDs7Ozs7SUFBRSxnREFBb0Q7Ozs7O0lBQUUsZ0NBQXdCOzs7OztJQUFFLG9DQUFpQzs7Ozs7SUFBRSxvQ0FBMEI7Ozs7O0lBQUUsa0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSZXNvbHZlLCBSb3V0ZXJ9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge2ZvcmtKb2luLCBPYnNlcnZhYmxlLCBvZn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0xpdmVBcHBzU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvbGl2ZS1hcHBzLnNlcnZpY2UnO1xuaW1wb3J0IHtDbGFpbSwgR2VuZXJhbENvbmZpZ1Jlc29sdmVyLCBSb2xlQXR0cmlidXRlLCBUY0dlbmVyYWxDb25maWdTZXJ2aWNlLCBUY1NoYXJlZFN0YXRlU2VydmljZX0gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliJztcbmltcG9ydCB7ZmxhdE1hcCwgbWFwLCBtZXJnZU1hcCwgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0dyb3VwLCBHcm91cHMsIFJvbGVzfSBmcm9tICcuLi9tb2RlbHMvdGMtZ3JvdXBzLWRhdGEnO1xuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge1RjQ2FzZUNhcmRDb25maWdTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy90Yy1jYXNlLWNhcmQtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHtMb2NhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7Q2xhaW1zUmVzb2x2ZXJ9IGZyb20gJy4vY2xhaW1zLnJlc29sdmVyJztcbmltcG9ydCB7Z3JvdXB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWxsUm9sZXNSZXNvbHZlciBpbXBsZW1lbnRzIFJlc29sdmU8T2JzZXJ2YWJsZTxSb2xlcz4+IHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNoYXJlZFN0YXRlU2VydmljZTogVGNTaGFyZWRTdGF0ZVNlcnZpY2UsIHByaXZhdGUgZ2VuZXJhbENvbmZpZ1NlcnZpY2U6IFRjR2VuZXJhbENvbmZpZ1NlcnZpY2UsIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSBsaXZlYXBwczogTGl2ZUFwcHNTZXJ2aWNlLCBwcml2YXRlIGxvY2F0aW9uOiBMb2NhdGlvbiwgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge1xuICB9XG5cbiAgcmVzb2x2ZShyb3V0ZVNuYXBzaG90OiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90KTogT2JzZXJ2YWJsZTxSb2xlcz4ge1xuXG4gICAgY29uc3QgY2xhaW1zJCA9IHRoaXMubGl2ZWFwcHMuZ2V0Q2xhaW1zKClcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAoY2xhaW0gPT4ge1xuICAgICAgICAgIGNsYWltLnNhbmRib3hlcy5mb3JFYWNoKHNhbmRib3ggPT4ge1xuICAgICAgICAgICAgaWYgKHNhbmRib3gudHlwZSA9PT0gJ1Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNsYWltLnByaW1hcnlQcm9kdWN0aW9uU2FuZGJveCA9IHNhbmRib3g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGNsYWltO1xuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgIGNvbnN0IGdlbmVyYWxDb25maWdSZXNvbHZlciA9IG5ldyBHZW5lcmFsQ29uZmlnUmVzb2x2ZXIodGhpcy5zaGFyZWRTdGF0ZVNlcnZpY2UsIHRoaXMuZ2VuZXJhbENvbmZpZ1NlcnZpY2UsIHRoaXMuaHR0cCwgdGhpcy5sb2NhdGlvbiwgdGhpcy5yb3V0ZXIpO1xuXG4gICAgcmV0dXJuIGNsYWltcyQucGlwZShcbiAgICAgIHN3aXRjaE1hcChjbGFpbWluZm8gPT4ge1xuICAgICAgICAgIGdlbmVyYWxDb25maWdSZXNvbHZlci5zZXRTYW5kYm94KE51bWJlcihjbGFpbWluZm8ucHJpbWFyeVByb2R1Y3Rpb25TYW5kYm94LmlkKSk7XG4gICAgICAgICAgY29uc3QgZ2VuZXJhbENvbmZpZyQgPSBnZW5lcmFsQ29uZmlnUmVzb2x2ZXIucmVzb2x2ZSgpLnBpcGUoXG4gICAgICAgICAgICBtYXAoZ2VuZXJhbENvbmZpZyA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgUm9sZXMoKS5kZXNlcmlhbGl6ZSh7IHJvbGVzOiBnZW5lcmFsQ29uZmlnLnJvbGVzIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBnZW5lcmFsQ29uZmlnJDtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG5cbiAgfVxuXG59XG4iXX0=