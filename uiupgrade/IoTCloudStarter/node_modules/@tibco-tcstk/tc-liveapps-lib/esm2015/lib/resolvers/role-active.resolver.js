/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { of } from 'rxjs';
import { LiveAppsService } from '../services/live-apps.service';
import { TcGeneralConfigService, TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { map } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { TcRolesService } from '../services/tc-roles-service.ts.service';
import { RolesResolver } from './roles.resolver';
export class RoleActiveResolver {
    /**
     * @param {?} rolesService
     * @param {?} liveAppsService
     * @param {?} tcSharedStateService
     * @param {?} generalConfigService
     * @param {?} httpClient
     * @param {?} location
     * @param {?} router
     */
    constructor(rolesService, liveAppsService, tcSharedStateService, generalConfigService, httpClient, location, router) {
        this.rolesService = rolesService;
        this.liveAppsService = liveAppsService;
        this.tcSharedStateService = tcSharedStateService;
        this.generalConfigService = generalConfigService;
        this.httpClient = httpClient;
        this.location = location;
        this.router = router;
    }
    /**
     * @return {?}
     */
    resolve() {
        /** @type {?} */
        const currentRole = this.rolesService.getCurrentRole();
        if (currentRole === undefined) {
            /** @type {?} */
            const roleResolver$ = new RolesResolver(this.tcSharedStateService, this.generalConfigService, this.httpClient, this.liveAppsService, this.location, this.router);
            return roleResolver$.resolve().pipe(map((/**
             * @param {?} roles
             * @return {?}
             */
            roles => {
                /** @type {?} */
                const highestRole = roles.roles.reduce((/**
                 * @param {?} prev
                 * @param {?} current
                 * @return {?}
                 */
                function (prev, current) {
                    return (prev.priority > current.priority) ? prev : current;
                }));
                this.rolesService.setCurrentRole(highestRole);
                return highestRole;
            })));
        }
        else {
            return of(currentRole);
        }
    }
}
RoleActiveResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RoleActiveResolver.ctorParameters = () => [
    { type: TcRolesService },
    { type: LiveAppsService },
    { type: TcSharedStateService },
    { type: TcGeneralConfigService },
    { type: HttpClient },
    { type: Location },
    { type: Router }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.rolesService;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.liveAppsService;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.tcSharedStateService;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.location;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZS1hY3RpdmUucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL3Jlc29sdmVycy9yb2xlLWFjdGl2ZS5yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQVUsTUFBTSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFpQixzQkFBc0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3ZHLE9BQU8sRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sc0JBQXNCLENBQUM7QUFDbEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzNDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSx5Q0FBeUMsQ0FBQztBQUN6RSxPQUFPLEVBQUMsYUFBYSxFQUFDLE1BQU0sa0JBQWtCLENBQUM7QUFHL0MsTUFBTSxPQUFPLGtCQUFrQjs7Ozs7Ozs7OztJQUUzQixZQUNZLFlBQTRCLEVBQzVCLGVBQWdDLEVBQ2hDLG9CQUEwQyxFQUMxQyxvQkFBNEMsRUFDNUMsVUFBc0IsRUFDdEIsUUFBa0IsRUFDbEIsTUFBYztRQU5kLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtRQUM1QixvQkFBZSxHQUFmLGVBQWUsQ0FBaUI7UUFDaEMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUFzQjtRQUMxQyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXdCO1FBQzVDLGVBQVUsR0FBVixVQUFVLENBQVk7UUFDdEIsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUNsQixXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQzFCLENBQUM7Ozs7SUFFRCxPQUFPOztjQUVHLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsRUFBRTtRQUV0RCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7O2tCQUN2QixhQUFhLEdBQUcsSUFBSSxhQUFhLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxlQUFlLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDO1lBQ2hLLE9BQU8sYUFBYSxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FDN0IsR0FBRzs7OztZQUFDLEtBQUssQ0FBQyxFQUFFOztzQkFDSixXQUFXLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNOzs7OztnQkFBQyxVQUFVLElBQUksRUFBRSxPQUFPO29CQUM1RCxPQUFPLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDO2dCQUM3RCxDQUFDLEVBQUM7Z0JBQ0YsSUFBSSxDQUFDLFlBQVksQ0FBQyxjQUFjLENBQUMsV0FBVyxDQUFDLENBQUM7Z0JBQzlDLE9BQU8sV0FBVyxDQUFDO1lBQ3JCLENBQUMsRUFBQyxDQUNILENBQUM7U0FDTjthQUFNO1lBQ0osT0FBTyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUM7U0FDMUI7SUFDTCxDQUFDOzs7WUEvQkosVUFBVTs7OztZQUhGLGNBQWM7WUFMZCxlQUFlO1lBQ3dCLG9CQUFvQjtZQUE1QyxzQkFBc0I7WUFFckMsVUFBVTtZQUNWLFFBQVE7WUFOQSxNQUFNOzs7Ozs7O0lBY2YsMENBQW9DOzs7OztJQUNwQyw2Q0FBd0M7Ozs7O0lBQ3hDLGtEQUFrRDs7Ozs7SUFDbEQsa0RBQW9EOzs7OztJQUNwRCx3Q0FBOEI7Ozs7O0lBQzlCLHNDQUEwQjs7Ozs7SUFDMUIsb0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtSZXNvbHZlLCBSb3V0ZXJ9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTGl2ZUFwcHNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbGl2ZS1hcHBzLnNlcnZpY2UnO1xuaW1wb3J0IHsgUm9sZUF0dHJpYnV0ZSwgVGNHZW5lcmFsQ29uZmlnU2VydmljZSwgVGNTaGFyZWRTdGF0ZVNlcnZpY2UgfSBmcm9tICdAdGliY28tdGNzdGsvdGMtY29yZS1saWInO1xuaW1wb3J0IHsgbWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgVGNSb2xlc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy90Yy1yb2xlcy1zZXJ2aWNlLnRzLnNlcnZpY2UnO1xuaW1wb3J0IHtSb2xlc1Jlc29sdmVyfSBmcm9tICcuL3JvbGVzLnJlc29sdmVyJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJvbGVBY3RpdmVSZXNvbHZlciBpbXBsZW1lbnRzIFJlc29sdmU8T2JzZXJ2YWJsZTxSb2xlQXR0cmlidXRlPj4ge1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIHByaXZhdGUgcm9sZXNTZXJ2aWNlOiBUY1JvbGVzU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBsaXZlQXBwc1NlcnZpY2U6IExpdmVBcHBzU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSB0Y1NoYXJlZFN0YXRlU2VydmljZTogVGNTaGFyZWRTdGF0ZVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgZ2VuZXJhbENvbmZpZ1NlcnZpY2U6IFRjR2VuZXJhbENvbmZpZ1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCxcbiAgICAgICAgcHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb24sXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIpIHtcbiAgICB9XG5cbiAgICByZXNvbHZlKCk6IE9ic2VydmFibGU8Um9sZUF0dHJpYnV0ZT4ge1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRSb2xlID0gdGhpcy5yb2xlc1NlcnZpY2UuZ2V0Q3VycmVudFJvbGUoKTtcblxuICAgICAgICBpZiAoY3VycmVudFJvbGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgIGNvbnN0IHJvbGVSZXNvbHZlciQgPSBuZXcgUm9sZXNSZXNvbHZlcih0aGlzLnRjU2hhcmVkU3RhdGVTZXJ2aWNlLCB0aGlzLmdlbmVyYWxDb25maWdTZXJ2aWNlLCB0aGlzLmh0dHBDbGllbnQsIHRoaXMubGl2ZUFwcHNTZXJ2aWNlLCB0aGlzLmxvY2F0aW9uLCB0aGlzLnJvdXRlcik7XG4gICAgICAgICAgcmV0dXJuIHJvbGVSZXNvbHZlciQucmVzb2x2ZSgpLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKHJvbGVzID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGhpZ2hlc3RSb2xlID0gcm9sZXMucm9sZXMucmVkdWNlKGZ1bmN0aW9uIChwcmV2LCBjdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAocHJldi5wcmlvcml0eSA+IGN1cnJlbnQucHJpb3JpdHkpID8gcHJldiA6IGN1cnJlbnQ7XG4gICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgIHRoaXMucm9sZXNTZXJ2aWNlLnNldEN1cnJlbnRSb2xlKGhpZ2hlc3RSb2xlKTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBoaWdoZXN0Um9sZTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBvZihjdXJyZW50Um9sZSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=