import { EventEmitter, ElementRef, OnChanges, SimpleChanges, OnInit } from '@angular/core';
import { Observable } from 'rxjs';
import { SpotfireCustomization, SpotfireFilter } from '../spotfire-customization';
import { DocMetadata, Document, SpotfireParameters } from '../spotfire-webplayer';
import { DocumentService } from '../document.service';
export declare class SpotfireViewerComponent implements OnChanges, OnInit {
    docSvc: DocumentService;
    /**
     * @description
     * print debug logs to JS console. Default to false
     */
    debug: boolean;
    /**
     * @description
     * The URL to the Web Player server
     */
    url: string;
    /**
     * @description
     * The path in the library to the analysis to open.
     */
    path: string;
    /**
     * @description
     * Optional initial page. The page can either be expressed
     * as an integer (0-based page index) or as a string (page name).
     */
    page: string;
    /**
    * @description
    * Optional unique id to read/write settings from local storage
    */
    sid: string;
    /**
    * @description
    * Optional instance of a Customization instance.
    * If set, this will override the customizationInfo instance held by the application.
    */
    customization: SpotfireCustomization | string;
    /**
      * @description
      * Optional. Array of filters that will be applied once page is loaded.
      */
    filters: Array<SpotfireFilter> | string;
    markingOn: {} | string;
    maxRows: number;
    protected spotParams: SpotfireParameters;
    /**
      * @description
      * Optional. Load parameters for the analysis.
      */
    parameters: string;
    private _parameters;
    spot: ElementRef;
    errorMessages: any[];
    metadata: DocMetadata;
    edit: boolean;
    private document;
    private app;
    private filterSubject;
    filter$: Observable<Array<{}>>;
    /**
      * @description
      * Optional. emit filters set by user in dashboard
      */
    filteringEvent: EventEmitter<any>;
    private markerSubject;
    marker$: Observable<{}>;
    /**
     * @description
     * Optional. emit marking set by user in dashboard
     */
    markingEvent: EventEmitter<any>;
    private markedRows;
    view: any;
    longTime: boolean;
    constructor(docSvc: DocumentService);
    ngOnInit(): void;
    doConsole: (...args: any[]) => void;
    /**
     * @description
     * Redraw the dashboard.
     * Depending on nature of change (url/path/page) the dashboard is fully refreshed or adjusted accordingly
     * @param changes The list of changes to apply
     */
    display(changes?: SimpleChanges): void;
    ngOnChanges: (changes: SimpleChanges) => void;
    stopPropagation: (e: Event) => void;
    private isMarkingWiredUp;
    private isFiltingWiredUp;
    private displayErrorMessage;
    private displayInfoMessage;
    /**
     * @description
     * Get Spotfire JavaScript API (webPlayer) from url
     *
     * When a componenet is initiated or url is updated, it lazy loads the library
     * Once loaded it opens the path.
     *
     * @param url the webPlayer server url
     * @param path the path to the page
     * @param custo the initial customization info
     */
    protected openWebPlayer(url: string, path: string, customization: SpotfireCustomization): void;
    /**
     * @description
     * Open the path using JavaScript API (spotfire.webPlayer.createApplication)
     *
     * @param path the absolute analysis path
     */
    protected openPath(path: string): void;
    protected doForm(doc: Document): void;
    /**
     * @description
     * Open the Document page
     *
     * @param page the document page that will be displayed
     */
    openPage(page: string): void;
    private afterDisplay;
    /**
     * @description
     * Callback method played when marking changes are detected.
     *
     * Will gather all marking and emit an event back to caller.
     *
     * @param tName Table name
     * @param mName Maring name
     * @param res marked rows returned by Spotfire
     */
    private updateMarking;
    /**
     * @description
     * Emit to caller the filters
     */
    private loadFilters;
}
