/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Copyright (c) 2018-2018. TIBCO Software Inc. All Rights Reserved. Confidential & Proprietary.
import { Observable, forkJoin, of as observableOf, zip, BehaviorSubject, throwError, TimeoutError } from 'rxjs';
import { mergeMap, tap, pluck, map, filter, timeout, catchError } from 'rxjs/operators';
/** @type {?} */
export const CUSTLABELS = {
    showAbout: 'Show the about menu item',
    showAnalysisInformationTool: 'Show the analysis information tool menu item',
    showAuthor: 'Show the button for enabling authoring',
    showClose: 'Show the analysis close menu item',
    showCustomizableHeader: 'Show the customizable header',
    showDodPanel: 'Show the details on demand panel in the visualization.',
    showExportFile: 'Show the export file menu item',
    showFilterPanel: 'Show the filter panel.',
    showHelp: 'Show the help menu item',
    showLogout: 'Show the logout menu item',
    showPageNavigation: 'Show the page navigation controls in the analysis',
    showStatusBar: 'Show status bar in the Web Player',
    showToolBar: 'Show the analysis toolbar and menu',
    showUndoRedo: 'Show the undo/redo menu item'
};
/**
 * @param {...?} args
 * @return {?}
 */
function doConsole(...args) {
    // console.log('[SPOTFIRE-WEBPLAYER]', ...args);
}
class PageState {
}
if (false) {
    /** @type {?} */
    PageState.prototype.index;
    /** @type {?} */
    PageState.prototype.pageTitle;
}
class DataTable {
}
if (false) {
    /** @type {?} */
    DataTable.prototype.dataTableName;
}
class DataColumn {
}
if (false) {
    /** @type {?} */
    DataColumn.prototype.dataColumnName;
    /** @type {?} */
    DataColumn.prototype.dataTableName;
    /** @type {?} */
    DataColumn.prototype.dataType;
    /** @type {?} */
    DataColumn.prototype.values;
}
class DistinctValues {
}
if (false) {
    /** @type {?} */
    DistinctValues.prototype.count;
    /** @type {?} */
    DistinctValues.prototype.values;
}
export class Marking {
    /**
     * @param {?} _marking
     */
    constructor(_marking) {
        this._marking = _marking;
        this.getMarkingNames$ = (/**
         * @return {?}
         */
        () => doCall(this._marking, 'getMarkingNames'));
        this.onChanged$ = (/**
         * @param {?} m
         * @param {?} t
         * @param {?} c
         * @param {?} n
         * @return {?}
         */
        (m, t, c, n) => doCall(this._marking, 'onChanged', m, t, c, n));
    }
}
if (false) {
    /** @type {?} */
    Marking.prototype.getMarkingNames$;
    /** @type {?} */
    Marking.prototype.onChanged$;
    /** @type {?} */
    Marking.prototype._marking;
}
class Filtering {
    /**
     * @param {?} _filtering
     */
    constructor(_filtering) {
        this._filtering = _filtering;
        this.set = (/**
         * @param {?} flts
         * @return {?}
         */
        (flts) => this._filtering.setFilters(flts, spotfire.webPlayer.filteringOperation.REPLACE));
        this.resetAllFilters = (/**
         * @return {?}
         */
        () => this._filtering.resetAllFilters());
        this.getAllModifiedFilterColumns = (/**
         * @return {?}
         */
        () => doCall(this._filtering, 'getAllModifiedFilterColumns', spotfire.webPlayer.includedFilterSettings.ALL_WITH_CHECKED_HIERARCHY_NODES));
    }
}
if (false) {
    /** @type {?} */
    Filtering.prototype.set;
    /** @type {?} */
    Filtering.prototype.resetAllFilters;
    /** @type {?} */
    Filtering.prototype.getAllModifiedFilterColumns;
    /** @type {?} */
    Filtering.prototype._filtering;
}
export class SpotfireParameters {
    /**
     * @param {?=} vars
     */
    constructor(vars) {
        this.version = '7.14';
        this.debug = false;
        this.reloadAnalysisInstance = false;
        console.log('CONSTR SpotfireParameters', vars, this);
        if (vars) {
            Object.keys(vars).forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => this[key] = vars[key]));
        }
        // Create a Unique ID for this Spotfire dashboard
        //
        this.domid = this.domid ? this.domid : this.sid ? `${this.sid}` : `${new Date().getTime()}`;
    }
}
if (false) {
    /** @type {?} */
    SpotfireParameters.prototype.url;
    /** @type {?} */
    SpotfireParameters.prototype.path;
    /** @type {?} */
    SpotfireParameters.prototype.page;
    /** @type {?} */
    SpotfireParameters.prototype.domid;
    /** @type {?} */
    SpotfireParameters.prototype.sid;
    /** @type {?} */
    SpotfireParameters.prototype.customization;
    /** @type {?} */
    SpotfireParameters.prototype.version;
    /** @type {?} */
    SpotfireParameters.prototype.debug;
    /** @type {?} */
    SpotfireParameters.prototype.reloadAnalysisInstance;
    /** @type {?} */
    SpotfireParameters.prototype.document;
    /** @type {?} */
    SpotfireParameters.prototype.app;
    /** @type {?} */
    SpotfireParameters.prototype._parameters;
}
export class Data {
    /**
     * @param {?} _data
     */
    constructor(_data) {
        this._data = _data;
        this.allTables = {};
        // A Spotfire analysis contains one or more data tables, retrieved by the getDataTable,
        // getActiveDataTable and getDataTables methods.
        this.getDataTables$ = (/**
         * @return {?}
         */
        () => doCall(this._data, 'getDataTables'));
        this.getDataTableColNames$ = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => doCall(this._data, 'getDataTable', t)
            .pipe(mergeMap((/**
         * @param {?} f
         * @return {?}
         */
        f => this.getDataColumns$(f))), map((/**
         * @param {?} d
         * @return {?}
         */
        d => ({ [t]: d })))));
        this.getDataTable$ = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => doCall(this._data, 'getDataTable', t)
            .pipe(mergeMap((/**
         * @param {?} f
         * @return {?}
         */
        f => this.getDataColumns$(f)))));
        // Each data table contains one or more data columns, retrieved by the getDataColumn,
        // getDataColumns and searchDataColumns.
        this.getDataColumns$ = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => doCall(t, 'getDataColumns').pipe(mergeMap((/**
         * @param {?} columns
         * @return {?}
         */
        columns => {
            /** @type {?} */
            const obs = [];
            columns.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => obs.push(zip(...[observableOf(col)], (/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => a.dataColumnName)))));
            return forkJoin(obs);
        }))));
        // From the DataColumn class it is possible to retrieve metadata, such as column name and data type.
        // It is also possible to get a list of the unique values in the data column with the getDistinctValues method.
        this.getDistinctValues$ = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => doCall(t, 'getDistinctValues', 0, 20).pipe(tap((/**
         * @param {?} g
         * @return {?}
         */
        g => doConsole('Data.DistinctValues$', t, g, g.count > 0 && g.count < 25))), 
        // filter(g => g.count > 0 && g.count < 25),
        //  tap(g => doConsole('[OBS]', 'DistinctValues filtres', g)),
        pluck('values')));
        this.getTables$ = (/**
         * @return {?}
         */
        () => this.getDataTables$().pipe(mergeMap((/**
         * @param {?} tables
         * @return {?}
         */
        tables => {
            /** @type {?} */
            const obs = [];
            tables.forEach((/**
             * @param {?} table
             * @return {?}
             */
            table => obs.push(this.getDataTableColNames$(table.dataTableName))));
            return forkJoin(obs);
        })), map((/**
         * @param {?} k
         * @return {?}
         */
        k => {
            /** @type {?} */
            let z = {};
            k.forEach((/**
             * @param {?} p
             * @return {?}
             */
            p => z = Object.assign({}, z, p)));
            return z;
        }))));
        this.getAllTables$ = (/**
         * @return {?}
         */
        () => this.getDataTables$().pipe(mergeMap((/**
         * @param {?} tables
         * @return {?}
         */
        tables => {
            /** @type {?} */
            const obs = [];
            tables.forEach((/**
             * @param {?} table
             * @return {?}
             */
            table => obs.push(this.getDataTable$(table.dataTableName))));
            return forkJoin(obs);
        })), map((/**
         * @param {?} tables
         * @return {?}
         */
        tables => {
            /** @type {?} */
            const dataTables = [];
            ((/** @type {?} */ (tables[0]))).forEach((/**
             * @param {?} columns
             * @return {?}
             */
            columns => {
                /** @type {?} */
                const tname = columns['tabName'];
                if (!dataTables[tname]) {
                    dataTables[tname] = {};
                }
                dataTables[tname][columns['colName']] = columns['vals'];
            }));
            return dataTables;
        }))));
    }
}
if (false) {
    /** @type {?} */
    Data.prototype.allTables;
    /**
     * @type {?}
     * @private
     */
    Data.prototype.getDataTables$;
    /**
     * @type {?}
     * @private
     */
    Data.prototype.getDataTableColNames$;
    /**
     * @type {?}
     * @private
     */
    Data.prototype.getDataTable$;
    /**
     * @type {?}
     * @private
     */
    Data.prototype.getDataColumns$;
    /**
     * @type {?}
     * @private
     */
    Data.prototype.getDistinctValues$;
    /** @type {?} */
    Data.prototype.getTables$;
    /** @type {?} */
    Data.prototype.getAllTables$;
    /**
     * @type {?}
     * @private
     */
    Data.prototype._data;
}
export class DocMetadata {
    /**
     * @param {?=} p
     */
    constructor(p) {
        this.sizeUnit = 'B';
        if (p) {
            this.contentSize = parseInt(p['contentSize'], 10);
            if (this.contentSize > (1024 * 1024)) {
                this.size = this.contentSize / (1024 * 1024);
                this.sizeUnit = 'MB';
            }
            else if (this.contentSize > 1024) {
                this.size = this.contentSize / 1024;
                this.sizeUnit = 'KB';
            }
            this.created = new Date(p.created);
            this.lastModified = new Date(p.lastModified);
            this.description = p.description;
            this.path = p.path;
            this.title = p.title;
        }
    }
}
if (false) {
    /** @type {?} */
    DocMetadata.prototype.size;
    /** @type {?} */
    DocMetadata.prototype.sizeUnit;
    /** @type {?} */
    DocMetadata.prototype.contentSize;
    /** @type {?} */
    DocMetadata.prototype.created;
    /** @type {?} */
    DocMetadata.prototype.description;
    /** @type {?} */
    DocMetadata.prototype.lastModified;
    /** @type {?} */
    DocMetadata.prototype.path;
    /** @type {?} */
    DocMetadata.prototype.title;
}
export class Document {
    /**
     * @param {?} app
     * @param {?} id
     * @param {?} page
     * @param {?} custo
     */
    constructor(app, id, page, custo) {
        this.onActivePageChangedCallback = (/**
         * @param {?} pageState
         * @return {?}
         */
        (pageState) => console.log('onActivePageChangedCallback', pageState));
        this.do = (/**
         * @template T
         * @param {?} m
         * @return {?}
         */
        (m) => doCall(this._doc, m));
        this.getDocumentMetadata$ = (/**
         * @return {?}
         */
        () => this.do('getDocumentMetadata').pipe(map((/**
         * @param {?} g
         * @return {?}
         */
        g => new DocMetadata(g)))));
        this.getPages$ = (/**
         * @return {?}
         */
        () => this.do('getPages').pipe(map((/**
         * @param {?} m
         * @return {?}
         */
        m => Object.keys(m).map((/**
         * @param {?} f
         * @return {?}
         */
        f => m[f].pageTitle))))));
        // getDocumentProperties$ = () => this.do('getDocumentProperties');
        // getBookmarks$ = () => this.do('getBookmarks');
        // getBookmarkNames$ = () => this.do('getBookmarkNames');
        // getReports$ = () => this.do('getReports');
        this.getActivePage$ = (/**
         * @return {?}
         */
        () => this.do('getActivePage'));
        this.setActivePage = (/**
         * @param {?} p
         * @return {?}
         */
        (p) => this._doc.setActivePage(p));
        this.getData = (/**
         * @return {?}
         */
        () => this.data);
        this.getMarking = (/**
         * @return {?}
         */
        () => this.marking);
        this.getFiltering = (/**
         * @return {?}
         */
        () => this.filtering);
        this.onDocumentReady$ = (/**
         * @return {?}
         */
        () => doCall(this._doc, 'onDocumentReady'));
        this.close = (/**
         * @return {?}
         */
        () => this._doc ? this._doc.close() : null);
        this.onActivePageChanged$ = (/**
         * @return {?}
         */
        () => doCall(this._doc, 'onActivePageChanged'));
        this._doc = app.openDocument(id, page, custo);
        app.onOpened$().subscribe((/**
         * @param {?} doc
         * @return {?}
         */
        doc => {
            doConsole(`Document.onOpened$: page is now opened:`, doc);
            this._doc = doc;
            // Register event handler for page change events.
            this.onActivePageChanged$().subscribe(this.onActivePageChangedCallback);
            this.marking = new Marking(this._doc.marking);
            this.filtering = new Filtering(this._doc.filtering);
            this.data = new Data(this._doc.data);
        }));
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    Document.prototype._doc;
    /**
     * @type {?}
     * @private
     */
    Document.prototype.marking;
    /**
     * @type {?}
     * @private
     */
    Document.prototype.filtering;
    /**
     * @type {?}
     * @private
     */
    Document.prototype.data;
    /**
     * @type {?}
     * @private
     */
    Document.prototype.onActivePageChangedCallback;
    /**
     * @type {?}
     * @private
     */
    Document.prototype.do;
    /** @type {?} */
    Document.prototype.getDocumentMetadata$;
    /** @type {?} */
    Document.prototype.getPages$;
    /** @type {?} */
    Document.prototype.getActivePage$;
    /** @type {?} */
    Document.prototype.setActivePage;
    /** @type {?} */
    Document.prototype.getData;
    /** @type {?} */
    Document.prototype.getMarking;
    /** @type {?} */
    Document.prototype.getFiltering;
    /** @type {?} */
    Document.prototype.onDocumentReady$;
    /** @type {?} */
    Document.prototype.close;
    /**
     * @type {?}
     * @private
     */
    Document.prototype.onActivePageChanged$;
}
/**
 * \@description
 * Turn async calls into Observables.
 *
 * For methods which name starts with 'on', the observable continues providing data it's received.
 * Otherwise the observable stops sending data at first buffer received.
 * An error is raised when the 50min timeout expires.
 *
 * @template T
 * @param {?} obj the object against we call method
 * @param {?} m the name of method
 * @param {...?} a
 * @return {?} Observable<T> an observable that corresponds to the original callback
 *
 */
function doCall(obj, m, ...a) {
    return new Observable((/**
     * @param {?} observer
     * @return {?}
     */
    observer => {
        /** @type {?} */
        const oneShot = ['onDocumentReady'];
        // doConsole('[OBS]', 'doCall obj=', obj, ', m=', m, ', arg=', args, typeof obj);
        if (typeof obj[m] !== 'function' || !obj) {
            console.error('[OBS]', `function '${m}' does not exist on `, obj);
            observer.error(`function '${m}' does not exist on objet ${JSON.stringify(obj)}`);
        }
        try {
            // doConsole('[OBS]', `Call ${m}(${a.join(',')})`, a.length);
            /** @type {?} */
            const q = (/**
             * @param {?} g
             * @return {?}
             */
            (g) => observer.next(g));
            /** @type {?} */
            const p = (/**
             * @param {?} g
             * @return {?}
             */
            (g) => { observer.next(g); observer.complete(); });
            return m.startsWith('on') && oneShot.indexOf(m) === -1 ? obj[m](...a, q) : obj[m](...a, p);
        }
        catch (err) {
            console.warn('[OBS]', 'doCall erreur: ', err);
            observer.error(err);
        }
    })).pipe(timeout(3001000), catchError((/**
     * @param {?} e
     * @return {?}
     */
    e => {
        if (e instanceof TimeoutError) {
            console.error(`[SPOTFIRE-WEBPLAYER] The call ${m}(${a.join(',')}) does not answer after 3001sec on ${JSON.stringify(obj)}`);
        }
        else {
            console.error('[SPOTFIRE-WEBPLAYER] ERROR on doCall', e);
        }
        return throwError(e);
    })));
}
export class Application {
    /**
     * @param {?} url
     * @param {?} customization
     * @param {?} path
     * @param {?} parameters
     * @param {?} reloadAnalysisInstance
     * @param {?} version
     * @param {?} onCreateLoginElement
     */
    constructor(url, customization, path, parameters, reloadAnalysisInstance, version, onCreateLoginElement) {
        this.url = url;
        this.customization = customization;
        this.path = path;
        this.parameters = parameters;
        this.reloadAnalysisInstance = reloadAnalysisInstance;
        this.version = version;
        this.onCreateLoginElement = onCreateLoginElement;
        this.readySubject = new BehaviorSubject(false);
        this.onApplicationReady$ = this.readySubject.asObservable().pipe(filter((/**
         * @param {?} d
         * @return {?}
         */
        d => d)));
        this.onReadyCallback = (/**
         * @param {?} response
         * @param {?} newApp
         * @return {?}
         */
        (response, newApp) => {
            doConsole('Application.onReadyCallback', response, newApp);
            this._app = newApp;
            // Register an error handler to catch errors.
            this._app.onError(this.onErrorCallback);
            if (response.status === 'OK') {
                // The application is ready, meaning that the api is loaded and that the analysis path
                // is validated for the current session(anonymous or logg ed in user)
                this.readySubject.next(true);
                this.readySubject.complete();
            }
            else {
                /** @type {?} */
                const errMsg = `Status not OK. ${response.status}: ${response.message}`;
                console.error('[SPOTFIRE-WEBPLAYER] Application.onReadyCallback', errMsg, response);
                this.readySubject.error(errMsg);
            }
        });
        // Displays an error message if something goes wrong in the Web Player.
        this.onErrorCallback = (/**
         * @param {?} errCode
         * @param {?} desc
         * @return {?}
         */
        (errCode, desc) => console.error(`[SPOTFIRE-WEBPLAYER] ${errCode}: ${desc}`));
        this.onOpened$ = (/**
         * @return {?}
         */
        () => doCall(this._app, 'onOpened'));
        this.getDocument = (/**
         * @param {?} id
         * @param {?} page
         * @param {?=} custo
         * @return {?}
         */
        (id, page, custo) => new Document(this, id, page, custo ? custo : this.customization));
        this.openDocument = (/**
         * @param {?} id
         * @param {?} page
         * @param {?} custo
         * @return {?}
         */
        (id, page, custo) => this._app.openDocument(id, page, custo));
        this._app = new spotfire.webPlayer.createApplication(this.url, this.customization, this.path, this.parameters, this.reloadAnalysisInstance, this.version, this.onReadyCallback, this.onCreateLoginElement);
    }
}
if (false) {
    /**
     * @type {?}
     * @private
     */
    Application.prototype._app;
    /**
     * @type {?}
     * @private
     */
    Application.prototype.readySubject;
    /** @type {?} */
    Application.prototype.onApplicationReady$;
    /**
     * @type {?}
     * @private
     */
    Application.prototype.onReadyCallback;
    /**
     * @type {?}
     * @private
     */
    Application.prototype.onErrorCallback;
    /** @type {?} */
    Application.prototype.onOpened$;
    /** @type {?} */
    Application.prototype.getDocument;
    /** @type {?} */
    Application.prototype.openDocument;
    /** @type {?} */
    Application.prototype.url;
    /** @type {?} */
    Application.prototype.customization;
    /** @type {?} */
    Application.prototype.path;
    /** @type {?} */
    Application.prototype.parameters;
    /** @type {?} */
    Application.prototype.reloadAnalysisInstance;
    /** @type {?} */
    Application.prototype.version;
    /** @type {?} */
    Application.prototype.onCreateLoginElement;
}
//# sourceMappingURL=data:application/json;base64,