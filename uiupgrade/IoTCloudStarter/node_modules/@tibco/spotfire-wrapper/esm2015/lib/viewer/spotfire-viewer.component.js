/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Copyright (c) 2018-2018. TIBCO Software Inc. All Rights Reserved. Confidential & Proprietary.
import { Component, Input, EventEmitter, ViewChild, ElementRef, Output, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { tap } from 'rxjs/operators';
import { SpotfireCustomization, SpotfireFilter } from '../spotfire-customization';
import { DocMetadata, SpotfireParameters } from '../spotfire-webplayer';
import { DocumentService } from '../document.service';
export class SpotfireViewerComponent {
    /**
     * @param {?} docSvc
     */
    constructor(docSvc) {
        this.docSvc = docSvc;
        /**
         * \@description
         * print debug logs to JS console. Default to false
         */
        this.debug = false;
        this.maxRows = 10;
        this.spotParams = new SpotfireParameters();
        this.errorMessages = [];
        this.edit = false;
        /* Filtering observables, emitter and subject*/
        this.filterSubject = new BehaviorSubject([]);
        this.filter$ = this.filterSubject.asObservable();
        /**
         * \@description
         * Optional. emit filters set by user in dashboard
         */
        this.filteringEvent = new EventEmitter(false);
        /* Marking observables, emitter and subject*/
        this.markerSubject = new BehaviorSubject({});
        this.marker$ = this.markerSubject.asObservable();
        /**
         * \@description
         * Optional. emit marking set by user in dashboard
         */
        this.markingEvent = new EventEmitter(false);
        this.markedRows = {};
        this.longTime = false;
        this.doConsole = (/**
         * @param {...?} args
         * @return {?}
         */
        (...args) => this.debug && console.log('[SPOTFIRE-VIEWER]', ...args));
        this.ngOnChanges = (/**
         * @param {?} changes
         * @return {?}
         */
        (changes) => {
            if (!!changes) {
                this.display(changes);
            }
        });
        this.stopPropagation = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => e.stopPropagation());
        this.isMarkingWiredUp = (/**
         * @return {?}
         */
        () => this.markingEvent.observers.length > 0);
        this.isFiltingWiredUp = (/**
         * @return {?}
         */
        () => this.filteringEvent.observers.length > 0);
        this.displayErrorMessage = (/**
         * @param {?} message
         * @return {?}
         */
        (message) => {
            console.error('ERROR:', message);
            this.errorMessages.push(message);
            if (!this.spotParams.document) {
                // Do not display the info Message when document is running
                this.spot.nativeElement.style.fontFamily = 'monospace';
                this.spot.nativeElement.style.color = '#e82127';
                this.spot.nativeElement.style.textAlign = 'center';
                this.spot.nativeElement.style.padding = '30px';
                this.spot.nativeElement.textContent = this.errorMessages.join('<br>');
            }
        });
        this.displayInfoMessage = (/**
         * @param {?} message
         * @return {?}
         */
        (message) => {
            console.log(message);
            if (!this.spotParams.document && this.debug) {
                // Do not display the info Message when document is running
                this.spot.nativeElement.style.fontFamily = 'monospace';
                this.spot.nativeElement.style.color = 'black';
                this.spot.nativeElement.style.textAlign = 'center';
                this.spot.nativeElement.textContent = message;
            }
        });
        this.afterDisplay = (/**
         * @param {?} doc
         * @return {?}
         */
        (doc) => {
            this.doConsole(`SpotfireViewerComponent openPage(${this.spotParams.page}) returns`, doc);
            this.document = doc;
            if (this.filters && this.document.getFiltering()) {
                /** @type {?} */
                const flt = this.document.getFiltering();
                flt.resetAllFilters();
                /*
                this.doConsole(`SpotfireViewerComponent set Filter(avant)`, this.filters);
                (this.filters as Array<SpotfireFilter>).forEach(t => t.setFilterType(spotfire));
                this.doConsole(`SpotfireViewerComponent set Filter(apres)`, this.filters);
              */
                flt.set(this.filters);
                this.loadFilters();
                this.doConsole('FILTER', this.filters);
            }
            this.doForm(this.document);
            if (this.markingOn) {
                // Clear marking
                this.markerSubject.next({});
                this.document.getData().getTables$()
                    .pipe(tap((/**
                 * @param {?} allTableNames
                 * @return {?}
                 */
                allTableNames => this.doConsole(`All tables and column names:`, allTableNames))))
                    .subscribe((/**
                 * @param {?} allTableNames
                 * @return {?}
                 */
                allTableNames => this.document.getMarking().getMarkingNames$()
                    .pipe(tap((/**
                 * @param {?} markingNames
                 * @return {?}
                 */
                markingNames => this.doConsole(`All marking names:`, markingNames))))
                    .subscribe((/**
                 * @param {?} markingNames
                 * @return {?}
                 */
                markingNames => markingNames.forEach((/**
                 * @param {?} markingName
                 * @return {?}
                 */
                markingName => {
                    /** @type {?} */
                    const tableNames = this.markingOn === '*' ? allTableNames : this.markingOn;
                    Object.keys(tableNames).forEach((/**
                     * @param {?} tName
                     * @return {?}
                     */
                    tName => {
                        /** @type {?} */
                        let columnNames = this.markingOn === '*' ? allTableNames[tName] : tableNames[tName];
                        if (columnNames.length === 1 && columnNames[0] === '*') {
                            columnNames = allTableNames[tName];
                        }
                        this.doConsole(`marking.onChanged(${markingName}, ${tName}, ${JSON.stringify(columnNames)}, ${this.maxRows})`);
                        this.document.getMarking().onChanged$(markingName, tName, columnNames, this.maxRows)
                            .subscribe((/**
                         * @param {?} f
                         * @return {?}
                         */
                        f => this.updateMarking(tName, markingName, f)));
                    }));
                }))))));
            }
            if (this.isFiltingWiredUp()) {
                this.doConsole('we have observers for filtering');
                // Subscribe to filteringEvent and emit the result to the Output if filter panel is displayed
                //
                this.filter$.pipe(tap((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => this.doConsole('Emit filter', f))))
                    .subscribe((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => this.filteringEvent.emit(f)));
            }
            if (this.isMarkingWiredUp()) {
                this.doConsole('we have observers for marking');
                // Subscribe to markingEvent and emit the result to the Output
                //
                this.marker$.pipe(tap((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => this.doConsole('Emit marking', f))))
                    .subscribe((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => this.markingEvent.emit(f)));
            }
            // console.log('YES loadFilters');
            // setInterval(() => this.loadFilters(), 3000);
        });
        /**
         * \@description
         * Callback method played when marking changes are detected.
         *
         * Will gather all marking and emit an event back to caller.
         *
         * @param tName Table name
         * @param mName Maring name
         * @param res marked rows returned by Spotfire
         */
        this.updateMarking = (/**
         * @param {?} tName
         * @param {?} mName
         * @param {?} res
         * @return {?}
         */
        (tName, mName, res) => {
            if (Object.keys(res).length > 0) {
                this.doConsole(`We have marked rows on marking '${mName}' for table '${tName}':`, res);
                // update the marked row if partial selection
                //
                if (!this.markedRows[mName]) {
                    this.markedRows[mName] = {};
                }
                if (!this.markedRows[mName][tName]) {
                    this.markedRows[mName][tName] = res;
                }
                else {
                    this.markedRows[mName][tName] = Object.assign(this.markedRows[mName][tName], res);
                }
                //   this.doConsole('[MARKING] on publie', this.markedRows);
                this.markerSubject.next(this.markedRows);
            }
            else if (this.markedRows[mName] && this.markedRows[mName][tName]) {
                // remove the marked row if no marking
                //
                delete this.markedRows[mName][tName];
                if (Object.keys(this.markedRows[mName]).length === 0) {
                    delete this.markedRows[mName];
                }
                this.markerSubject.next(this.markedRows);
            }
            else {
                //  this.doConsole(`No rows are marked on marking '${mName}' for table '${tName}'`);
            }
            this.loadFilters();
        });
        console.log('SPOTFIRE WRAPPER - 10 juillet - Angular 8');
        this.doConsole('Welcome !');
        setTimeout((/**
         * @return {?}
         */
        () => this.longTime = true), 6000);
    }
    /**
     * \@description
     * Optional. Load parameters for the analysis.
     * @param {?} value
     * @return {?}
     */
    set parameters(value) {
        this._parameters = value;
        this.spotParams._parameters = value;
        if (this.app) {
            this.openPath(this.path);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.doConsole('OnInit', this.url, this.path);
        this.display();
    }
    /**
     * \@description
     * Redraw the dashboard.
     * Depending on nature of change (url/path/page) the dashboard is fully refreshed or adjusted accordingly
     * @param {?=} changes The list of changes to apply
     * @return {?}
     */
    display(changes) {
        this.doConsole('Display', changes);
        if (typeof this.customization === 'string') {
            this.customization = new SpotfireCustomization(JSON.parse(this.customization));
        }
        else {
            this.customization = new SpotfireCustomization(this.customization);
        }
        if (typeof this.filters === 'string') {
            /** @type {?} */
            const allFilters = [];
            JSON.parse(this.filters).forEach((/**
             * @param {?} m
             * @return {?}
             */
            (m) => allFilters.push(new SpotfireFilter(m))));
            this.filters = allFilters;
        }
        if (typeof this.markingOn === 'string' && this.markingOn !== '*') {
            this.markingOn = JSON.parse(this.markingOn);
        }
        this.doConsole('display', changes, this.url, this.path, 'PAGE=', this.page, this.customization, this.maxRows, this.app, this.markingOn);
        if (!changes || changes.url) {
            this.openWebPlayer(this.url, this.path, this.customization);
        }
        else if (this.app && changes.page) {
            this.openPage(this.page);
        }
        else {
            this.doConsole(`The Url attribute is not provided, flip the dashboard and display form!`);
            this.edit = true;
            this.metadata = new DocMetadata();
        }
    }
    /**
     * \@description
     * Get Spotfire JavaScript API (webPlayer) from url
     *
     * When a componenet is initiated or url is updated, it lazy loads the library
     * Once loaded it opens the path.
     *
     * @protected
     * @param {?} url the webPlayer server url
     * @param {?} path the path to the page
     * @param {?} customization
     * @return {?}
     */
    openWebPlayer(url, path, customization) {
        this.edit = false;
        this.url = url;
        this.path = path;
        this.customization = customization;
        this.doConsole(`SpotfireViewerComponent openWebPlayer(${url})`);
        this.displayInfoMessage(`${this.url}...`);
        // Create a Unique ID for this Spotfire dashboard
        //
        this.spot.nativeElement.id = this.sid ? this.sid : new Date().getTime();
        this.spotParams = Object.assign({}, this.spotParams, { path, url, customization, domid: this.spot.nativeElement.id, page: this.page });
        this.docSvc.openWebPlayer$(this.spotParams).subscribe((/**
         * @param {?} doc
         * @return {?}
         */
        doc => this.afterDisplay(doc)), (/**
         * @param {?} err
         * @return {?}
         */
        err => this.displayErrorMessage(err)));
    }
    /**
     * \@description
     * Open the path using JavaScript API (spotfire.webPlayer.createApplication)
     *
     * @protected
     * @param {?} path the absolute analysis path
     * @return {?}
     */
    openPath(path) {
        this.path = path;
        this.displayInfoMessage(`${this.url}/${path}...`);
        this.doConsole(`SpotfireViewerComponent openPath(${path})`, this.sid);
        this.spotParams = Object.assign({}, this.spotParams, { path, domid: this.spot.nativeElement.id });
        this.docSvc.openPath$(this.spotParams).subscribe((/**
         * @param {?} doc
         * @return {?}
         */
        doc => this.afterDisplay(doc)), (/**
         * @param {?} err
         * @return {?}
         */
        err => this.displayErrorMessage(err)));
    }
    /**
     * @protected
     * @param {?} doc
     * @return {?}
     */
    doForm(doc) { }
    /**
     * \@description
     * Open the Document page
     *
     * @param {?} page the document page that will be displayed
     * @return {?}
     */
    openPage(page) {
        this.displayInfoMessage(`${this.url}/${this.path}/${page ? page : ''}...`);
        this.doConsole(`SpotfireViewerComponent openPage(${page})`);
        this.page = page;
        this.spotParams = Object.assign({}, this.spotParams, { page });
        /** @type {?} */
        const p = this.spotParams;
        this.docSvc.openPage$(p).subscribe((/**
         * @param {?} doc
         * @return {?}
         */
        doc => this.afterDisplay(doc)));
    }
    /**
     * \@description
     * Emit to caller the filters
     * @private
     * @return {?}
     */
    loadFilters() {
        //  console.log('AA Nicolas loadFilters BLOUP ! (19 juin 2019)');
        if (this.isFiltingWiredUp()) {
            this.document.getFiltering().getAllModifiedFilterColumns()
                .subscribe((/**
             * @param {?} fs
             * @return {?}
             */
            fs => this.filterSubject.next(fs)));
        }
        //    this.document.getFiltering().getAllModifiedFilterColumns()
        //      .subscribe(fs => console.log('les FILTERS:', fs));
    }
}
SpotfireViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'spotfire-viewer',
                exportAs: 'spotfireViewer',
                template: "<div style='height:100%; border:2px dashed green; border-radius:8px' #spot></div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SpotfireViewerComponent.ctorParameters = () => [
    { type: DocumentService }
];
SpotfireViewerComponent.propDecorators = {
    debug: [{ type: Input }],
    url: [{ type: Input }],
    path: [{ type: Input }],
    page: [{ type: Input }],
    sid: [{ type: Input }],
    customization: [{ type: Input }],
    filters: [{ type: Input }],
    markingOn: [{ type: Input }],
    maxRows: [{ type: Input }],
    parameters: [{ type: Input }],
    spot: [{ type: ViewChild, args: ['spot', { static: true, read: ElementRef },] }],
    filteringEvent: [{ type: Output }],
    markingEvent: [{ type: Output }]
};
if (false) {
    /**
     * \@description
     * print debug logs to JS console. Default to false
     * @type {?}
     */
    SpotfireViewerComponent.prototype.debug;
    /**
     * \@description
     * The URL to the Web Player server
     * @type {?}
     */
    SpotfireViewerComponent.prototype.url;
    /**
     * \@description
     * The path in the library to the analysis to open.
     * @type {?}
     */
    SpotfireViewerComponent.prototype.path;
    /**
     * \@description
     * Optional initial page. The page can either be expressed
     * as an integer (0-based page index) or as a string (page name).
     * @type {?}
     */
    SpotfireViewerComponent.prototype.page;
    /**
     * \@description
     * Optional unique id to read/write settings from local storage
     * @type {?}
     */
    SpotfireViewerComponent.prototype.sid;
    /**
     * \@description
     * Optional instance of a Customization instance.
     * If set, this will override the customizationInfo instance held by the application.
     * @type {?}
     */
    SpotfireViewerComponent.prototype.customization;
    /**
     * \@description
     * Optional. Array of filters that will be applied once page is loaded.
     * @type {?}
     */
    SpotfireViewerComponent.prototype.filters;
    /** @type {?} */
    SpotfireViewerComponent.prototype.markingOn;
    /** @type {?} */
    SpotfireViewerComponent.prototype.maxRows;
    /**
     * @type {?}
     * @protected
     */
    SpotfireViewerComponent.prototype.spotParams;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype._parameters;
    /** @type {?} */
    SpotfireViewerComponent.prototype.spot;
    /** @type {?} */
    SpotfireViewerComponent.prototype.errorMessages;
    /** @type {?} */
    SpotfireViewerComponent.prototype.metadata;
    /** @type {?} */
    SpotfireViewerComponent.prototype.edit;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.document;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.app;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.filterSubject;
    /** @type {?} */
    SpotfireViewerComponent.prototype.filter$;
    /**
     * \@description
     * Optional. emit filters set by user in dashboard
     * @type {?}
     */
    SpotfireViewerComponent.prototype.filteringEvent;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.markerSubject;
    /** @type {?} */
    SpotfireViewerComponent.prototype.marker$;
    /**
     * \@description
     * Optional. emit marking set by user in dashboard
     * @type {?}
     */
    SpotfireViewerComponent.prototype.markingEvent;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.markedRows;
    /** @type {?} */
    SpotfireViewerComponent.prototype.view;
    /** @type {?} */
    SpotfireViewerComponent.prototype.longTime;
    /** @type {?} */
    SpotfireViewerComponent.prototype.doConsole;
    /** @type {?} */
    SpotfireViewerComponent.prototype.ngOnChanges;
    /** @type {?} */
    SpotfireViewerComponent.prototype.stopPropagation;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.isMarkingWiredUp;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.isFiltingWiredUp;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.displayErrorMessage;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.displayInfoMessage;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.afterDisplay;
    /**
     * \@description
     * Callback method played when marking changes are detected.
     *
     * Will gather all marking and emit an event back to caller.
     *
     * \@param tName Table name
     * \@param mName Maring name
     * \@param res marked rows returned by Spotfire
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.updateMarking;
    /** @type {?} */
    SpotfireViewerComponent.prototype.docSvc;
}
//# sourceMappingURL=data:application/json;base64,