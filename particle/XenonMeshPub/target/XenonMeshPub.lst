
/Users/gallardo/TIBProjects/iot/particle/projects/XenonMeshPub/target/XenonMeshPub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003d18  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  000d7d30  000d7d30  00007d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000000  2003f400  2003f400  00017e5c  2**0
                  CONTENTS
  4 .data         000000f8  2003e100  000d7d38  0000e100  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000005fc  2003e1f8  2003e1f8  0001e1f8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d7e30  000d7e30  00017e30  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d7e58  000d7e58  00017e58  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b4aca  00000000  00000000  00017e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f4f0  00000000  00000000  000cc926  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00016c67  00000000  00000000  000dbe16  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002000  00000000  00000000  000f2a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003658  00000000  00000000  000f4a7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  0003005d  00000000  00000000  000f80d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   000246f5  00000000  00000000  00128132  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e0916  00000000  00000000  0014c827  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000bc98  00000000  00000000  0022d140  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	f8 78 0d 00                                         .x..

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f003 fbe7 	bl	d7800 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f003 fbec 	bl	d7816 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e100 	.word	0x2003e100
   d4048:	000d7d38 	.word	0x000d7d38
   d404c:	2003e1f8 	.word	0x2003e1f8
   d4050:	2003e1f8 	.word	0x2003e1f8
   d4054:	2003e7f4 	.word	0x2003e7f4

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f002 fbdd 	bl	d6818 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d7d2c 	.word	0x000d7d2c
   d4080:	000d7cf8 	.word	0x000d7cf8

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b85e 	b.w	d4144 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fda1 	bl	d4bd0 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f002 bb8f 	b.w	d67b4 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f000 bffd 	b.w	d5094 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f000 bffb 	b.w	d5094 <malloc>

000d409e <_ZdlPv>:
   d409e:	f001 b801 	b.w	d50a4 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f000 bfff 	b.w	d50a4 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr
	...

000d40b8 <_Z7handlerPKcS0_>:



// -------------------------------------------- Get ClientName
// triggered by the Particle.subscribe and Particle.publish run in setup()
void handler(const char *topic, const char *data) {
   d40b8:	b510      	push	{r4, lr}
    strncpy(deviceName, data, strlen(data));
   d40ba:	4608      	mov	r0, r1



// -------------------------------------------- Get ClientName
// triggered by the Particle.subscribe and Particle.publish run in setup()
void handler(const char *topic, const char *data) {
   d40bc:	460c      	mov	r4, r1
    strncpy(deviceName, data, strlen(data));
   d40be:	f003 fc00 	bl	d78c2 <strlen>
   d40c2:	4621      	mov	r1, r4
   d40c4:	4602      	mov	r2, r0
   d40c6:	4803      	ldr	r0, [pc, #12]	; (d40d4 <_Z7handlerPKcS0_+0x1c>)
   d40c8:	f003 fc03 	bl	d78d2 <strncpy>
    
    nameReceived = true;
   d40cc:	4b02      	ldr	r3, [pc, #8]	; (d40d8 <_Z7handlerPKcS0_+0x20>)
   d40ce:	2201      	movs	r2, #1
   d40d0:	701a      	strb	r2, [r3, #0]
   d40d2:	bd10      	pop	{r4, pc}
   d40d4:	2003e258 	.word	0x2003e258
   d40d8:	2003e299 	.word	0x2003e299

000d40dc <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.6>:
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
   d40dc:	7803      	ldrb	r3, [r0, #0]
   d40de:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d40e2:	4319      	orrs	r1, r3
   d40e4:	7001      	strb	r1, [r0, #0]
   d40e6:	4770      	bx	lr

000d40e8 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>:
  if (!var) return false;
  var->setSignedInteger(value);
  return true;
}

inline bool variantSetLinkedString(VariantData *var, const char *value) {
   d40e8:	b510      	push	{r4, lr}
  if (!var) return false;
   d40ea:	4602      	mov	r2, r0
  if (!var) return false;
  var->setSignedInteger(value);
  return true;
}

inline bool variantSetLinkedString(VariantData *var, const char *value) {
   d40ec:	460c      	mov	r4, r1
  if (!var) return false;
   d40ee:	b150      	cbz	r0, d4106 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc+0x1e>
   d40f0:	3008      	adds	r0, #8
    setType(VALUE_IS_NEGATIVE_INTEGER);
    _content.asInteger = value;
  }

  void setLinkedString(const char *value) {
    if (value) {
   d40f2:	b121      	cbz	r1, d40fe <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc+0x16>
      setType(VALUE_IS_LINKED_STRING);
   d40f4:	2103      	movs	r1, #3
   d40f6:	f7ff fff1 	bl	d40dc <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.6>
      _content.asString = value;
   d40fa:	6014      	str	r4, [r2, #0]
   d40fc:	e001      	b.n	d4102 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc+0x1a>
    } else {
      setType(VALUE_IS_NULL);
   d40fe:	f7ff ffed 	bl	d40dc <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.6>
  var->setLinkedString(value);
  return true;
   d4102:	2001      	movs	r0, #1
   d4104:	bd10      	pop	{r4, pc}
}
   d4106:	bd10      	pop	{r4, pc}

000d4108 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj>:
    *p++ = static_cast<char>(c);
    *p = '\0';
    return 1;
  }

  size_t write(const uint8_t *s, size_t n) {
   d4108:	b530      	push	{r4, r5, lr}
    char *begin = p;
   d410a:	6844      	ldr	r4, [r0, #4]
   d410c:	440a      	add	r2, r1
    while (p < end && n > 0) {
   d410e:	6843      	ldr	r3, [r0, #4]
   d4110:	6805      	ldr	r5, [r0, #0]
   d4112:	42ab      	cmp	r3, r5
   d4114:	d207      	bcs.n	d4126 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj+0x1e>
   d4116:	4291      	cmp	r1, r2
   d4118:	d005      	beq.n	d4126 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj+0x1e>
      *p++ = static_cast<char>(*s++);
   d411a:	1c5d      	adds	r5, r3, #1
   d411c:	6045      	str	r5, [r0, #4]
   d411e:	f811 5b01 	ldrb.w	r5, [r1], #1
   d4122:	701d      	strb	r5, [r3, #0]
    return 1;
  }

  size_t write(const uint8_t *s, size_t n) {
    char *begin = p;
    while (p < end && n > 0) {
   d4124:	e7f3      	b.n	d410e <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj+0x6>
      *p++ = static_cast<char>(*s++);
      n--;
    }
    *p = '\0';
   d4126:	2200      	movs	r2, #0
   d4128:	701a      	strb	r2, [r3, #0]
    return size_t(p - begin);
   d412a:	6840      	ldr	r0, [r0, #4]
  }
   d412c:	1b00      	subs	r0, r0, r4
   d412e:	bd30      	pop	{r4, r5, pc}

000d4130 <_Z11SetPubTopic6String>:
		    PublishButton();
        }
    }
}

int SetPubTopic(String s) {
   d4130:	b508      	push	{r3, lr}
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d4132:	2210      	movs	r2, #16
   d4134:	2300      	movs	r3, #0
   d4136:	4902      	ldr	r1, [pc, #8]	; (d4140 <_Z11SetPubTopic6String+0x10>)
   d4138:	f001 fec9 	bl	d5ece <_ZNK6String8getBytesEPhjj>
	s.toCharArray(pubTopic, sizeof(s));
	return 0;
}
   d413c:	2000      	movs	r0, #0
   d413e:	bd08      	pop	{r3, pc}
   d4140:	2003e399 	.word	0x2003e399

000d4144 <setup>:
char buffer[255] = ""; 

bool nameReceived = false;      // true: device name received from particle subscribe in handler

// setup() runs once, when the device is first turned on.
void setup() {
   d4144:	b510      	push	{r4, lr}
   d4146:	b086      	sub	sp, #24
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d4148:	2400      	movs	r4, #0
   d414a:	4622      	mov	r2, r4
   d414c:	9401      	str	r4, [sp, #4]
   d414e:	9400      	str	r4, [sp, #0]
   d4150:	2301      	movs	r3, #1
   d4152:	4916      	ldr	r1, [pc, #88]	; (d41ac <setup+0x68>)
   d4154:	4816      	ldr	r0, [pc, #88]	; (d41b0 <setup+0x6c>)
   d4156:	f000 ff3d 	bl	d4fd4 <spark_subscribe>
   d415a:	4b16      	ldr	r3, [pc, #88]	; (d41b4 <setup+0x70>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d415c:	4914      	ldr	r1, [pc, #80]	; (d41b0 <setup+0x6c>)
   d415e:	781b      	ldrb	r3, [r3, #0]
   d4160:	f88d 3000 	strb.w	r3, [sp]
   d4164:	4622      	mov	r2, r4
   d4166:	233c      	movs	r3, #60	; 0x3c
   d4168:	a802      	add	r0, sp, #8
   d416a:	f001 f923 	bl	d53b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d416e:	9c03      	ldr	r4, [sp, #12]
   d4170:	b17c      	cbz	r4, d4192 <setup+0x4e>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d4172:	6863      	ldr	r3, [r4, #4]
   d4174:	3b01      	subs	r3, #1
   d4176:	6063      	str	r3, [r4, #4]
   d4178:	b95b      	cbnz	r3, d4192 <setup+0x4e>
        {
          _M_dispose();
   d417a:	6823      	ldr	r3, [r4, #0]
   d417c:	4620      	mov	r0, r4
   d417e:	689b      	ldr	r3, [r3, #8]
   d4180:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d4182:	68a3      	ldr	r3, [r4, #8]
   d4184:	3b01      	subs	r3, #1
   d4186:	60a3      	str	r3, [r4, #8]
   d4188:	b91b      	cbnz	r3, d4192 <setup+0x4e>
            _M_destroy();
   d418a:	6823      	ldr	r3, [r4, #0]
   d418c:	4620      	mov	r0, r4
   d418e:	68db      	ldr	r3, [r3, #12]
   d4190:	4798      	blx	r3

  // Get device name in handler and save it in deviceName
    Particle.subscribe("particle/device/name", handler);
    Particle.publish("particle/device/name", NULL, 60, PRIVATE);
    
    SetPubTopic("MeshDataTopic");
   d4192:	4909      	ldr	r1, [pc, #36]	; (d41b8 <setup+0x74>)
   d4194:	a802      	add	r0, sp, #8
   d4196:	f001 fe87 	bl	d5ea8 <_ZN6StringC1EPK19__FlashStringHelper>
   d419a:	a802      	add	r0, sp, #8
   d419c:	f7ff ffc8 	bl	d4130 <_Z11SetPubTopic6String>
   d41a0:	a802      	add	r0, sp, #8
   d41a2:	f001 fe3a 	bl	d5e1a <_ZN6StringD1Ev>
}
   d41a6:	b006      	add	sp, #24
   d41a8:	bd10      	pop	{r4, pc}
   d41aa:	bf00      	nop
   d41ac:	000d40b9 	.word	0x000d40b9
   d41b0:	000d790c 	.word	0x000d790c
   d41b4:	2003e298 	.word	0x2003e298
   d41b8:	000d7921 	.word	0x000d7921

000d41bc <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj255EEC1Ev>:
class StaticJsonDocument : public JsonDocument {
  static const size_t _capacity =
      AddPadding<Max<1, desiredCapacity>::value>::value;

 public:
  StaticJsonDocument() : JsonDocument(_buffer, _capacity) {}
   d41bc:	b508      	push	{r3, lr}
   d41be:	f100 0320 	add.w	r3, r0, #32
   d41c2:	4602      	mov	r2, r0
 public:
  MemoryPool(char* buf, size_t capa)
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
        _end(buf ? buf + capa : 0) {
   d41c4:	6003      	str	r3, [r0, #0]
   d41c6:	6043      	str	r3, [r0, #4]
   d41c8:	b113      	cbz	r3, d41d0 <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj255EEC1Ev+0x14>
   d41ca:	f500 7190 	add.w	r1, r0, #288	; 0x120
   d41ce:	e000      	b.n	d41d2 <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj255EEC1Ev+0x16>
   d41d0:	4619      	mov	r1, r3
   d41d2:	6091      	str	r1, [r2, #8]
   d41d4:	b10b      	cbz	r3, d41da <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj255EEC1Ev+0x1e>
   d41d6:	f502 7390 	add.w	r3, r2, #288	; 0x120
    }
  }

  void setNull() {
    setType(VALUE_IS_NULL);
   d41da:	f102 0018 	add.w	r0, r2, #24
   d41de:	60d3      	str	r3, [r2, #12]
   d41e0:	2100      	movs	r1, #0
   d41e2:	f7ff ff7b 	bl	d40dc <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.6>
   d41e6:	4610      	mov	r0, r2
   d41e8:	bd08      	pop	{r3, pc}

000d41ea <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>:
  var->setOwnedString(value);
  return true;
}

template <typename T>
inline bool variantSetOwnedString(VariantData *var, T value, MemoryPool *pool) {
   d41ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d41ee:	460e      	mov	r6, r1
   d41f0:	4617      	mov	r7, r2
  return var != 0 && var->setOwnedString(value, pool);
   d41f2:	4604      	mov	r4, r0
   d41f4:	b1c8      	cbz	r0, d422a <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE+0x40>
   d41f6:	f100 0808 	add.w	r8, r0, #8
class RamStringAdapter : public ConstRamStringAdapter {
 public:
  RamStringAdapter(const char* str) : ConstRamStringAdapter(str) {}

  char* save(MemoryPool* pool) const {
    if (!_str) return NULL;
   d41fa:	b1c1      	cbz	r1, d422e <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE+0x44>
    return 0;
  }

  size_t size() const {
    if (!_str) return 0;
    return strlen(_str);
   d41fc:	4608      	mov	r0, r1
   d41fe:	f003 fb60 	bl	d78c2 <strlen>
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
   d4202:	687d      	ldr	r5, [r7, #4]
  VariantSlot* allocVariant() {
    return allocRight<VariantSlot>();
  }

  char* allocFrozenString(size_t n) {
    if (!canAlloc(n)) return 0;
   d4204:	68b9      	ldr	r1, [r7, #8]
    size_t n = size() + 1;
   d4206:	1c42      	adds	r2, r0, #1
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
   d4208:	18ab      	adds	r3, r5, r2
  VariantSlot* allocVariant() {
    return allocRight<VariantSlot>();
  }

  char* allocFrozenString(size_t n) {
    if (!canAlloc(n)) return 0;
   d420a:	428b      	cmp	r3, r1
   d420c:	d80f      	bhi.n	d422e <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE+0x44>
    char* s = _left;
    _left += n;
   d420e:	607b      	str	r3, [r7, #4]
    char* dup = pool->allocFrozenString(n);
    if (dup) memcpy(dup, _str, n);
   d4210:	b16d      	cbz	r5, d422e <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE+0x44>
   d4212:	4631      	mov	r1, r6
   d4214:	4628      	mov	r0, r5
   d4216:	f003 faf3 	bl	d7800 <memcpy>
  }

  void setOwnedString(not_null<const char *> s) {
    setType(VALUE_IS_OWNED_STRING);
   d421a:	4640      	mov	r0, r8
   d421c:	2104      	movs	r1, #4
   d421e:	f7ff ff5d 	bl	d40dc <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.6>
    _content.asString = s.get();
   d4222:	6025      	str	r5, [r4, #0]
   d4224:	2001      	movs	r0, #1
   d4226:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d422a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool setOwnedString(const char *s) {
    if (s) {
      setOwnedString(make_not_null(s));
      return true;
    } else {
      setType(VALUE_IS_NULL);
   d422e:	4640      	mov	r0, r8
   d4230:	2100      	movs	r1, #0
   d4232:	f7ff ff53 	bl	d40dc <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.6>
   d4236:	2000      	movs	r0, #0
}
   d4238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d423c <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>:
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.get(key) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
   d423c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (isNull()) toObject();
   d423e:	7a04      	ldrb	r4, [r0, #8]
   d4240:	f014 047f 	ands.w	r4, r4, #127	; 0x7f
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.get(key) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
   d4244:	4605      	mov	r5, r0
   d4246:	460e      	mov	r6, r1
   d4248:	4617      	mov	r7, r2
    if (isNull()) toObject();
   d424a:	d105      	bne.n	d4258 <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x1c>
    _content.asCollection.clear();
    return _content.asCollection;
  }

  CollectionData &toObject() {
    setType(VALUE_IS_OBJECT);
   d424c:	2120      	movs	r1, #32
   d424e:	3008      	adds	r0, #8
   d4250:	f7ff ff44 	bl	d40dc <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.6>
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
   d4254:	602c      	str	r4, [r5, #0]
  _tail = 0;
   d4256:	606c      	str	r4, [r5, #4]
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
    if (isNull()) toObject();
    if (!isObject()) return 0;
   d4258:	7a2b      	ldrb	r3, [r5, #8]
   d425a:	f003 0320 	and.w	r3, r3, #32
   d425e:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d4262:	b37b      	cbz	r3, d42c4 <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x88>
   d4264:	682c      	ldr	r4, [r5, #0]
}

template <typename TAdaptedString>
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
  VariantSlot* slot = _head;
  while (slot) {
   d4266:	b194      	cbz	r4, d428e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x52>
   d4268:	68e1      	ldr	r1, [r4, #12]
#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline int8_t safe_strcmp(const char* a, const char* b) {
  if (a == b) return 0;
   d426a:	42b1      	cmp	r1, r6
   d426c:	d00d      	beq.n	d428a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x4e>
  if (!a) return -1;
   d426e:	b136      	cbz	r6, d427e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x42>
  if (!b) return 1;
   d4270:	b129      	cbz	r1, d427e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x42>
  return static_cast<int8_t>(strcmp(a, b));
   d4272:	4630      	mov	r0, r6
   d4274:	f003 fb00 	bl	d7878 <strcmp>
    if (key.equals(slot->key())) break;
   d4278:	f010 0fff 	tst.w	r0, #255	; 0xff
   d427c:	d005      	beq.n	d428a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x4e>
  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
    return _next ? this + _next : 0;
   d427e:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d4282:	b123      	cbz	r3, d428e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x52>
   d4284:	eb04 1403 	add.w	r4, r4, r3, lsl #4
   d4288:	e7ed      	b.n	d4266 <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x2a>
  // - no destructor
  // - no virtual
  // - no inheritance

  VariantData* data() {
    return reinterpret_cast<VariantData*>(&_content);
   d428a:	4620      	mov	r0, r4
   d428c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
    if (!canAlloc(bytes)) return 0;
   d428e:	687a      	ldr	r2, [r7, #4]
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
   d4290:	68bb      	ldr	r3, [r7, #8]
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
    if (!canAlloc(bytes)) return 0;
   d4292:	3210      	adds	r2, #16
   d4294:	4293      	cmp	r3, r2
   d4296:	d201      	bcs.n	d429c <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x60>
}

template <typename TAdaptedString>
inline VariantData* CollectionData::add(TAdaptedString key, MemoryPool* pool) {
  VariantSlot* slot = addSlot(pool);
  if (!slotSetKey(slot, key, pool)) return 0;
   d4298:	2000      	movs	r0, #0
   d429a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    _right -= bytes;
   d429c:	f1a3 0010 	sub.w	r0, r3, #16
   d42a0:	60b8      	str	r0, [r7, #8]

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
  VariantSlot* slot = pool->allocVariant();
  if (!slot) return 0;
   d42a2:	2800      	cmp	r0, #0
   d42a4:	d0f8      	beq.n	d4298 <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x5c>

  if (_tail) {
   d42a6:	686a      	ldr	r2, [r5, #4]
   d42a8:	b11a      	cbz	r2, d42b2 <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x76>
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
   d42aa:	1a81      	subs	r1, r0, r2
   d42ac:	1109      	asrs	r1, r1, #4
   d42ae:	8151      	strh	r1, [r2, #10]
   d42b0:	e000      	b.n	d42b4 <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x78>
    _tail->setNextNotNull(slot);
    _tail = slot;
  } else {
    _head = slot;
   d42b2:	6028      	str	r0, [r5, #0]
  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
    _next = 0;
   d42b4:	2200      	movs	r2, #0
    _tail = slot;
   d42b6:	6068      	str	r0, [r5, #4]
   d42b8:	f823 2c06 	strh.w	r2, [r3, #-6]
    _flags |= KEY_IS_OWNED;
    _key = k.get();
  }

  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
   d42bc:	f803 2c08 	strb.w	r2, [r3, #-8]
    _key = k.get();
   d42c0:	f843 6c04 	str.w	r6, [r3, #-4]
    VariantData *var = _content.asCollection.get(key);
    if (var) return var;
    return _content.asCollection.add(key, pool);
  }
   d42c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d42c6 <_ZN21ArduinoJson6110_1100011VariantData16setSignedIntegerIiEEvT_>:
    setSignedInteger(value);
  }

  template <typename T>
  void setSignedInteger(T value) {
    if (value >= 0) {
   d42c6:	2900      	cmp	r1, #0
  typename enable_if<is_signed<T>::value>::type setInteger(T value) {
    setSignedInteger(value);
  }

  template <typename T>
  void setSignedInteger(T value) {
   d42c8:	b538      	push	{r3, r4, r5, lr}
   d42ca:	4602      	mov	r2, r0
   d42cc:	460c      	mov	r4, r1
   d42ce:	f100 0008 	add.w	r0, r0, #8
   d42d2:	ea4f 75e1 	mov.w	r5, r1, asr #31
    if (value >= 0) {
   d42d6:	db03      	blt.n	d42e0 <_ZN21ArduinoJson6110_1100011VariantData16setSignedIntegerIiEEvT_+0x1a>
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
   d42d8:	2106      	movs	r1, #6
   d42da:	f7ff feff 	bl	d40dc <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.6>
   d42de:	e005      	b.n	d42ec <_ZN21ArduinoJson6110_1100011VariantData16setSignedIntegerIiEEvT_+0x26>
    _content.asInteger = value;
  }

  void setNegativeInteger(UInt value) {
    setType(VALUE_IS_NEGATIVE_INTEGER);
   d42e0:	2107      	movs	r1, #7
   d42e2:	f7ff fefb 	bl	d40dc <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.6>
    _content.asInteger = value;
   d42e6:	4264      	negs	r4, r4
   d42e8:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   d42ec:	e9c2 4500 	strd	r4, r5, [r2]
   d42f0:	bd38      	pop	{r3, r4, r5, pc}

000d42f2 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char *s) {
   d42f2:	b538      	push	{r3, r4, r5, lr}
   d42f4:	4604      	mov	r4, r0
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
   d42f6:	4608      	mov	r0, r1

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char *s) {
   d42f8:	460d      	mov	r5, r1
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
   d42fa:	f003 fae2 	bl	d78c2 <strlen>
   d42fe:	4629      	mov	r1, r5
   d4300:	4602      	mov	r2, r0
   d4302:	6820      	ldr	r0, [r4, #0]
   d4304:	f7ff ff00 	bl	d4108 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj>
   d4308:	6863      	ldr	r3, [r4, #4]
   d430a:	4418      	add	r0, r3
   d430c:	6060      	str	r0, [r4, #4]
   d430e:	bd38      	pop	{r3, r4, r5, pc}

000d4310 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
   d4310:	b510      	push	{r4, lr}
    _length += _writer.write(static_cast<uint8_t>(c));
   d4312:	6803      	ldr	r3, [r0, #0]
  StaticStringWriter(char *buf, size_t size) : end(buf + size - 1), p(buf) {
    *p = '\0';
  }

  size_t write(uint8_t c) {
    if (p >= end) return 0;
   d4314:	685a      	ldr	r2, [r3, #4]
   d4316:	681c      	ldr	r4, [r3, #0]
   d4318:	42a2      	cmp	r2, r4
    *p++ = static_cast<char>(c);
   d431a:	bf3f      	itttt	cc
   d431c:	1c54      	addcc	r4, r2, #1
   d431e:	605c      	strcc	r4, [r3, #4]
   d4320:	7011      	strbcc	r1, [r2, #0]
    *p = '\0';
   d4322:	685b      	ldrcc	r3, [r3, #4]
   d4324:	bf3c      	itt	cc
   d4326:	2200      	movcc	r2, #0
   d4328:	701a      	strbcc	r2, [r3, #0]
   d432a:	6842      	ldr	r2, [r0, #4]
    return 1;
   d432c:	bf34      	ite	cc
   d432e:	2301      	movcc	r3, #1
  StaticStringWriter(char *buf, size_t size) : end(buf + size - 1), p(buf) {
    *p = '\0';
  }

  size_t write(uint8_t c) {
    if (p >= end) return 0;
   d4330:	2300      	movcs	r3, #0
   d4332:	4413      	add	r3, r2
   d4334:	6043      	str	r3, [r0, #4]
   d4336:	bd10      	pop	{r4, pc}

000d4338 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc>:
      writeRaw("true");
    else
      writeRaw("false");
  }

  void writeString(const char *value) {
   d4338:	b570      	push	{r4, r5, r6, lr}
   d433a:	4605      	mov	r5, r0
    if (!value) {
   d433c:	460c      	mov	r4, r1
   d433e:	b919      	cbnz	r1, d4348 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x10>
      writeRaw("null");
   d4340:	4911      	ldr	r1, [pc, #68]	; (d4388 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x50>)
   d4342:	f7ff ffd6 	bl	d42f2 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
   d4346:	bd70      	pop	{r4, r5, r6, pc}
    } else {
      writeRaw('\"');
   d4348:	2122      	movs	r1, #34	; 0x22
   d434a:	f7ff ffe1 	bl	d4310 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
   d434e:	3c01      	subs	r4, #1
      while (*value) writeChar(*value++);
   d4350:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   d4354:	b171      	cbz	r1, d4374 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x3c>
   d4356:	4b0d      	ldr	r3, [pc, #52]	; (d438c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x54>)
class EscapeSequence {
 public:
  // Optimized for code size on a 8-bit AVR
  static char escapeChar(char c) {
    const char *p = escapeTable(false);
    while (p[0] && p[1] != c) {
   d4358:	f813 6c02 	ldrb.w	r6, [r3, #-2]
   d435c:	b17e      	cbz	r6, d437e <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x46>
   d435e:	3302      	adds	r3, #2
   d4360:	f813 2c03 	ldrb.w	r2, [r3, #-3]
   d4364:	428a      	cmp	r2, r1
   d4366:	d1f7      	bne.n	d4358 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x20>
  }

  void writeChar(char c) {
    char specialChar = EscapeSequence::escapeChar(c);
    if (specialChar) {
      writeRaw('\\');
   d4368:	215c      	movs	r1, #92	; 0x5c
   d436a:	4628      	mov	r0, r5
   d436c:	f7ff ffd0 	bl	d4310 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
      writeRaw(specialChar);
   d4370:	4631      	mov	r1, r6
   d4372:	e004      	b.n	d437e <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x46>
    if (!value) {
      writeRaw("null");
    } else {
      writeRaw('\"');
      while (*value) writeChar(*value++);
      writeRaw('\"');
   d4374:	2122      	movs	r1, #34	; 0x22
   d4376:	4628      	mov	r0, r5
   d4378:	f7ff ffca 	bl	d4310 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
    }
  }
   d437c:	bd70      	pop	{r4, r5, r6, pc}
    char specialChar = EscapeSequence::escapeChar(c);
    if (specialChar) {
      writeRaw('\\');
      writeRaw(specialChar);
    } else {
      writeRaw(c);
   d437e:	4628      	mov	r0, r5
   d4380:	f7ff ffc6 	bl	d4310 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
   d4384:	e7e4      	b.n	d4350 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x18>
   d4386:	bf00      	nop
   d4388:	000d792f 	.word	0x000d792f
   d438c:	000d7936 	.word	0x000d7936

000d4390 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>:

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
   d4390:	b510      	push	{r4, lr}
    _length += _writer.write(reinterpret_cast<const uint8_t *>(begin),
   d4392:	1a52      	subs	r2, r2, r1

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
   d4394:	4604      	mov	r4, r0
    _length += _writer.write(reinterpret_cast<const uint8_t *>(begin),
   d4396:	6800      	ldr	r0, [r0, #0]
   d4398:	f7ff feb6 	bl	d4108 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj>
   d439c:	6863      	ldr	r3, [r4, #4]
   d439e:	4418      	add	r0, r3
   d43a0:	6060      	str	r0, [r4, #4]
   d43a2:	bd10      	pop	{r4, pc}

000d43a4 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE20writePositiveIntegerIyEEvT_>:
    writeRaw('-');
    writePositiveInteger(value);
  }

  template <typename T>
  void writePositiveInteger(T value) {
   d43a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d43a8:	b086      	sub	sp, #24
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
   d43aa:	f10d 0416 	add.w	r4, sp, #22
    writeRaw('-');
    writePositiveInteger(value);
  }

  template <typename T>
  void writePositiveInteger(T value) {
   d43ae:	4605      	mov	r5, r0
   d43b0:	4616      	mov	r6, r2
   d43b2:	461f      	mov	r7, r3
   d43b4:	46a0      	mov	r8, r4
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
   d43b6:	4630      	mov	r0, r6
   d43b8:	4639      	mov	r1, r7
   d43ba:	220a      	movs	r2, #10
   d43bc:	2300      	movs	r3, #0
   d43be:	f003 f885 	bl	d74cc <__aeabi_uldivmod>
   d43c2:	3230      	adds	r2, #48	; 0x30
   d43c4:	f804 2d01 	strb.w	r2, [r4, #-1]!
      value = T(value / 10);
   d43c8:	2300      	movs	r3, #0
   d43ca:	4630      	mov	r0, r6
   d43cc:	4639      	mov	r1, r7
   d43ce:	220a      	movs	r2, #10
   d43d0:	f003 f87c 	bl	d74cc <__aeabi_uldivmod>
   d43d4:	4606      	mov	r6, r0
   d43d6:	460f      	mov	r7, r1
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
   d43d8:	ea56 0307 	orrs.w	r3, r6, r7
   d43dc:	d1eb      	bne.n	d43b6 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE20writePositiveIntegerIyEEvT_+0x12>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
   d43de:	4642      	mov	r2, r8
   d43e0:	4621      	mov	r1, r4
   d43e2:	4628      	mov	r0, r5
   d43e4:	f7ff ffd4 	bl	d4390 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>
  }
   d43e8:	b006      	add	sp, #24
   d43ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d43f0 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
      }
    }
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
   d43f0:	b570      	push	{r4, r5, r6, lr}
        1e16,
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
        forge(0x5A827748, 0xF9301D32),  // 1e128
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
    };
   d43f2:	4d1b      	ldr	r5, [pc, #108]	; (d4460 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x70>)
   d43f4:	4c1b      	ldr	r4, [pc, #108]	; (d4464 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x74>)
   d43f6:	682b      	ldr	r3, [r5, #0]
   d43f8:	f013 0f01 	tst.w	r3, #1
      }
    }
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
   d43fc:	4606      	mov	r6, r0
        1e16,
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
        forge(0x5A827748, 0xF9301D32),  // 1e128
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
    };
   d43fe:	d11a      	bne.n	d4436 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x46>
   d4400:	4628      	mov	r0, r5
   d4402:	f7ff fe50 	bl	d40a6 <__cxa_guard_acquire>
   d4406:	b1b0      	cbz	r0, d4436 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x46>
   d4408:	a30d      	add	r3, pc, #52	; (adr r3, d4440 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x50>)
   d440a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d440e:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
   d4412:	a30d      	add	r3, pc, #52	; (adr r3, d4448 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x58>)
   d4414:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4418:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   d441c:	a30c      	add	r3, pc, #48	; (adr r3, d4450 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x60>)
   d441e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4422:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
   d4426:	a30c      	add	r3, pc, #48	; (adr r3, d4458 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x68>)
   d4428:	e9d3 2300 	ldrd	r2, r3, [r3]
   d442c:	4628      	mov	r0, r5
   d442e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
   d4432:	f7ff fe3d 	bl	d40b0 <__cxa_guard_release>
    return factors[index];
   d4436:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  }
   d443a:	ed94 0b00 	vldr	d0, [r4]
   d443e:	bd70      	pop	{r4, r5, r6, pc}
   d4440:	b5056e17 	.word	0xb5056e17
   d4444:	4693b8b5 	.word	0x4693b8b5
   d4448:	e93ff9f5 	.word	0xe93ff9f5
   d444c:	4d384f03 	.word	0x4d384f03
   d4450:	f9301d32 	.word	0xf9301d32
   d4454:	5a827748 	.word	0x5a827748
   d4458:	7f73bf3c 	.word	0x7f73bf3c
   d445c:	75154fdd 	.word	0x75154fdd
   d4460:	2003e250 	.word	0x2003e250
   d4464:	2003e148 	.word	0x2003e148

000d4468 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd>:
      decimal /= 10;
      decimalPlaces--;
    }
  }

  static int16_t normalize(TFloat& value) {
   d4468:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d446c:	ed2d 8b06 	vpush	{d8-d10}
   d4470:	4606      	mov	r6, r0
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
   d4472:	a38e      	add	r3, pc, #568	; (adr r3, d46ac <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x244>)
   d4474:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4478:	e9d0 0100 	ldrd	r0, r1, [r0]
   d447c:	f002 fff2 	bl	d7464 <__aeabi_dcmpge>
   d4480:	2800      	cmp	r0, #0
   d4482:	d05d      	beq.n	d4540 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0xd8>
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
    };
   d4484:	ed9f 8b66 	vldr	d8, [pc, #408]	; d4620 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1b8>
   d4488:	ed9f 9b67 	vldr	d9, [pc, #412]	; d4628 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1c0>
   d448c:	ed9f ab68 	vldr	d10, [pc, #416]	; d4630 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1c8>
   d4490:	f04f 0a08 	mov.w	sl, #8
   d4494:	f44f 7780 	mov.w	r7, #256	; 0x100
   d4498:	2500      	movs	r5, #0
      for (; index >= 0; index--) {
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
   d449a:	4650      	mov	r0, sl
   d449c:	e9d6 8900 	ldrd	r8, r9, [r6]
   d44a0:	f7ff ffa6 	bl	d43f0 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
   d44a4:	4640      	mov	r0, r8
   d44a6:	ec53 2b10 	vmov	r2, r3, d0
   d44aa:	4649      	mov	r1, r9
   d44ac:	f002 ffda 	bl	d7464 <__aeabi_dcmpge>
   d44b0:	2800      	cmp	r0, #0
   d44b2:	d03e      	beq.n	d4532 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0xca>
   d44b4:	f8df 81fc 	ldr.w	r8, [pc, #508]	; d46b4 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x24c>
   d44b8:	4c7b      	ldr	r4, [pc, #492]	; (d46a8 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x240>)
   d44ba:	f8d8 3000 	ldr.w	r3, [r8]
   d44be:	f013 0f01 	tst.w	r3, #1
   d44c2:	d12a      	bne.n	d451a <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0xb2>
   d44c4:	4640      	mov	r0, r8
   d44c6:	f7ff fdee 	bl	d40a6 <__cxa_guard_acquire>
   d44ca:	b330      	cbz	r0, d451a <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0xb2>
   d44cc:	a35a      	add	r3, pc, #360	; (adr r3, d4638 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1d0>)
   d44ce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44d2:	e9c4 2306 	strd	r2, r3, [r4, #24]
   d44d6:	a35a      	add	r3, pc, #360	; (adr r3, d4640 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1d8>)
   d44d8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44dc:	e9c4 2308 	strd	r2, r3, [r4, #32]
   d44e0:	a359      	add	r3, pc, #356	; (adr r3, d4648 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1e0>)
   d44e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44e6:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
   d44ea:	a359      	add	r3, pc, #356	; (adr r3, d4650 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1e8>)
   d44ec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44f0:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   d44f4:	a358      	add	r3, pc, #352	; (adr r3, d4658 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1f0>)
   d44f6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d44fa:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
   d44fe:	a358      	add	r3, pc, #352	; (adr r3, d4660 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1f8>)
   d4500:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4504:	4640      	mov	r0, r8
   d4506:	ed84 8b00 	vstr	d8, [r4]
   d450a:	ed84 9b02 	vstr	d9, [r4, #8]
   d450e:	ed84 ab04 	vstr	d10, [r4, #16]
   d4512:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
   d4516:	f7ff fdcb 	bl	d40b0 <__cxa_guard_release>
    return factors[index];
   d451a:	eb04 03ca 	add.w	r3, r4, sl, lsl #3
          value *= traits::negativeBinaryPowerOfTen(index);
   d451e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4522:	e9d6 0100 	ldrd	r0, r1, [r6]
   d4526:	f002 fd17 	bl	d6f58 <__aeabi_dmul>
   d452a:	e9c6 0100 	strd	r0, r1, [r6]
          powersOf10 = int16_t(powersOf10 + bit);
   d452e:	443d      	add	r5, r7
   d4530:	b22d      	sxth	r5, r5

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
   d4532:	f11a 3aff 	adds.w	sl, sl, #4294967295	; 0xffffffff
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
          value *= traits::negativeBinaryPowerOfTen(index);
          powersOf10 = int16_t(powersOf10 + bit);
        }
        bit >>= 1;
   d4536:	ea4f 0767 	mov.w	r7, r7, asr #1

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
   d453a:	d2ae      	bcs.n	d449a <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x32>
   d453c:	4654      	mov	r4, sl
   d453e:	e003      	b.n	d4548 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0xe0>
  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;
   d4540:	f44f 7780 	mov.w	r7, #256	; 0x100

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
   d4544:	2408      	movs	r4, #8
    }
  }

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;
   d4546:	4605      	mov	r5, r0
        }
        bit >>= 1;
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
   d4548:	e9d6 8900 	ldrd	r8, r9, [r6]
   d454c:	2200      	movs	r2, #0
   d454e:	2300      	movs	r3, #0
   d4550:	4640      	mov	r0, r8
   d4552:	4649      	mov	r1, r9
   d4554:	f002 ff90 	bl	d7478 <__aeabi_dcmpgt>
   d4558:	2800      	cmp	r0, #0
   d455a:	d05b      	beq.n	d4614 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1ac>
   d455c:	a342      	add	r3, pc, #264	; (adr r3, d4668 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x200>)
   d455e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4562:	4640      	mov	r0, r8
   d4564:	4649      	mov	r1, r9
   d4566:	f002 ff73 	bl	d7450 <__aeabi_dcmple>
   d456a:	2800      	cmp	r0, #0
   d456c:	d052      	beq.n	d4614 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1ac>
        forge(0x3CD203AF, 0x9EE75616),  // 1e-15
        forge(0x398039D6, 0x65896880),  // 1e-31
        forge(0x32DA53FC, 0x9631D10D),  // 1e-63
        forge(0x25915445, 0x81B7DEC2),  // 1e-127
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
   d456e:	ed9f 8b2c 	vldr	d8, [pc, #176]	; d4620 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1b8>
   d4572:	ed9f 9b3f 	vldr	d9, [pc, #252]	; d4670 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x208>
   d4576:	ed9f ab40 	vldr	d10, [pc, #256]	; d4678 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x210>
      for (; index >= 0; index--) {
   d457a:	1c63      	adds	r3, r4, #1
   d457c:	d04a      	beq.n	d4614 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1ac>
   d457e:	f8df b138 	ldr.w	fp, [pc, #312]	; d46b8 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x250>
   d4582:	f8df a138 	ldr.w	sl, [pc, #312]	; d46bc <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x254>
   d4586:	f8db 3000 	ldr.w	r3, [fp]
   d458a:	f013 0f01 	tst.w	r3, #1
        if (value < traits::negativeBinaryPowerOfTenPlusOne(index)) {
   d458e:	e9d6 8900 	ldrd	r8, r9, [r6]
   d4592:	d125      	bne.n	d45e0 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x178>
   d4594:	4658      	mov	r0, fp
   d4596:	f7ff fd86 	bl	d40a6 <__cxa_guard_acquire>
   d459a:	b308      	cbz	r0, d45e0 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x178>
   d459c:	a338      	add	r3, pc, #224	; (adr r3, d4680 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x218>)
   d459e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45a2:	e9ca 2308 	strd	r2, r3, [sl, #32]
   d45a6:	a338      	add	r3, pc, #224	; (adr r3, d4688 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x220>)
   d45a8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45ac:	e9ca 230a 	strd	r2, r3, [sl, #40]	; 0x28
   d45b0:	a337      	add	r3, pc, #220	; (adr r3, d4690 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x228>)
   d45b2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45b6:	e9ca 230c 	strd	r2, r3, [sl, #48]	; 0x30
   d45ba:	a337      	add	r3, pc, #220	; (adr r3, d4698 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x230>)
   d45bc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45c0:	e9ca 230e 	strd	r2, r3, [sl, #56]	; 0x38
   d45c4:	a336      	add	r3, pc, #216	; (adr r3, d46a0 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x238>)
   d45c6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d45ca:	4658      	mov	r0, fp
   d45cc:	ed8a 8b02 	vstr	d8, [sl, #8]
   d45d0:	ed8a 9b04 	vstr	d9, [sl, #16]
   d45d4:	ed8a ab06 	vstr	d10, [sl, #24]
   d45d8:	e9ca 2310 	strd	r2, r3, [sl, #64]	; 0x40
   d45dc:	f7ff fd68 	bl	d40b0 <__cxa_guard_release>
    return factors[index];
   d45e0:	eb0a 0ac4 	add.w	sl, sl, r4, lsl #3
   d45e4:	e9da 2300 	ldrd	r2, r3, [sl]
   d45e8:	4640      	mov	r0, r8
   d45ea:	4649      	mov	r1, r9
   d45ec:	f002 ff26 	bl	d743c <__aeabi_dcmplt>
   d45f0:	b160      	cbz	r0, d460c <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1a4>
          value *= traits::positiveBinaryPowerOfTen(index);
   d45f2:	4620      	mov	r0, r4
   d45f4:	f7ff fefc 	bl	d43f0 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
   d45f8:	e9d6 0100 	ldrd	r0, r1, [r6]
   d45fc:	ec53 2b10 	vmov	r2, r3, d0
   d4600:	f002 fcaa 	bl	d6f58 <__aeabi_dmul>
   d4604:	e9c6 0100 	strd	r0, r1, [r6]
          powersOf10 = int16_t(powersOf10 - bit);
   d4608:	1bed      	subs	r5, r5, r7
   d460a:	b22d      	sxth	r5, r5
   d460c:	3c01      	subs	r4, #1
        }
        bit >>= 1;
   d460e:	107f      	asrs	r7, r7, #1
   d4610:	b264      	sxtb	r4, r4
        bit >>= 1;
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
   d4612:	e7b2      	b.n	d457a <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x112>
        bit >>= 1;
      }
    }

    return powersOf10;
  }
   d4614:	ecbd 8b06 	vpop	{d8-d10}
   d4618:	4628      	mov	r0, r5
   d461a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d461e:	bf00      	nop
   d4620:	9999999a 	.word	0x9999999a
   d4624:	3fb99999 	.word	0x3fb99999
   d4628:	47ae147b 	.word	0x47ae147b
   d462c:	3f847ae1 	.word	0x3f847ae1
   d4630:	eb1c432d 	.word	0xeb1c432d
   d4634:	3f1a36e2 	.word	0x3f1a36e2
   d4638:	e2308c3a 	.word	0xe2308c3a
   d463c:	3e45798e 	.word	0x3e45798e
   d4640:	97d889bc 	.word	0x97d889bc
   d4644:	3c9cd2b2 	.word	0x3c9cd2b2
   d4648:	d5a8a733 	.word	0xd5a8a733
   d464c:	3949f623 	.word	0x3949f623
   d4650:	44f4a73d 	.word	0x44f4a73d
   d4654:	32a50ffd 	.word	0x32a50ffd
   d4658:	cf8c979d 	.word	0xcf8c979d
   d465c:	255bba08 	.word	0x255bba08
   d4660:	64ac6f43 	.word	0x64ac6f43
   d4664:	0ac80628 	.word	0x0ac80628
   d4668:	88e368f1 	.word	0x88e368f1
   d466c:	3ee4f8b5 	.word	0x3ee4f8b5
   d4670:	d2f1a9fc 	.word	0xd2f1a9fc
   d4674:	3f50624d 	.word	0x3f50624d
   d4678:	9abcaf48 	.word	0x9abcaf48
   d467c:	3e7ad7f2 	.word	0x3e7ad7f2
   d4680:	9ee75616 	.word	0x9ee75616
   d4684:	3cd203af 	.word	0x3cd203af
   d4688:	65896880 	.word	0x65896880
   d468c:	398039d6 	.word	0x398039d6
   d4690:	9631d10d 	.word	0x9631d10d
   d4694:	32da53fc 	.word	0x32da53fc
   d4698:	81b7dec2 	.word	0x81b7dec2
   d469c:	25915445 	.word	0x25915445
   d46a0:	7dd78b14 	.word	0x7dd78b14
   d46a4:	0afe07b2 	.word	0x0afe07b2
   d46a8:	2003e208 	.word	0x2003e208
   d46ac:	00000000 	.word	0x00000000
   d46b0:	416312d0 	.word	0x416312d0
   d46b4:	2003e200 	.word	0x2003e200
   d46b8:	2003e1fc 	.word	0x2003e1fc
   d46bc:	2003e100 	.word	0x2003e100

000d46c0 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_>:
      writeRaw(c);
    }
  }

  template <typename T>
  void writeFloat(T value) {
   d46c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d46c4:	ec55 4b10 	vmov	r4, r5, d0
   d46c8:	b089      	sub	sp, #36	; 0x24
   d46ca:	4607      	mov	r7, r0
    if (isnan(value)) return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
   d46cc:	ee10 2a10 	vmov	r2, s0
   d46d0:	462b      	mov	r3, r5
   d46d2:	ee10 0a10 	vmov	r0, s0
   d46d6:	4629      	mov	r1, r5
   d46d8:	f002 fea6 	bl	d7428 <__aeabi_dcmpeq>
   d46dc:	b920      	cbnz	r0, d46e8 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x28>
   d46de:	4973      	ldr	r1, [pc, #460]	; (d48ac <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1ec>)
   d46e0:	4638      	mov	r0, r7
   d46e2:	f7ff fe06 	bl	d42f2 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
   d46e6:	e0de      	b.n	d48a6 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1e6>
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
  return x != 0.0 && x * 2 == x;
   d46e8:	2200      	movs	r2, #0
   d46ea:	2300      	movs	r3, #0
   d46ec:	4620      	mov	r0, r4
   d46ee:	4629      	mov	r1, r5
   d46f0:	f002 fe9a 	bl	d7428 <__aeabi_dcmpeq>
   d46f4:	b968      	cbnz	r0, d4712 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x52>
   d46f6:	4622      	mov	r2, r4
   d46f8:	462b      	mov	r3, r5
   d46fa:	4620      	mov	r0, r4
   d46fc:	4629      	mov	r1, r5
   d46fe:	f002 fa79 	bl	d6bf4 <__adddf3>
   d4702:	4602      	mov	r2, r0
   d4704:	460b      	mov	r3, r1
   d4706:	4620      	mov	r0, r4
   d4708:	4629      	mov	r1, r5
   d470a:	f002 fe8d 	bl	d7428 <__aeabi_dcmpeq>
   d470e:	2800      	cmp	r0, #0
   d4710:	d1e5      	bne.n	d46de <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1e>

    if (isinf(value)) return writeRaw("Infinity");
#else
    if (isinf(value)) return writeRaw("null");

    if (value < 0.0) {
   d4712:	2200      	movs	r2, #0
   d4714:	2300      	movs	r3, #0
   d4716:	4620      	mov	r0, r4
   d4718:	4629      	mov	r1, r5
   d471a:	f002 fe8f 	bl	d743c <__aeabi_dcmplt>
   d471e:	b130      	cbz	r0, d472e <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x6e>
      writeRaw('-');
   d4720:	212d      	movs	r1, #45	; 0x2d
   d4722:	4638      	mov	r0, r7
   d4724:	f7ff fdf4 	bl	d4310 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
      value = -value;
   d4728:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   d472c:	461d      	mov	r5, r3
   d472e:	a808      	add	r0, sp, #32
   d4730:	e960 4508 	strd	r4, r5, [r0, #-32]!

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);
   d4734:	f7ff fe98 	bl	d4468 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd>

    integral = uint32_t(value);
   d4738:	e9dd 8900 	ldrd	r8, r9, [sp]

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);
   d473c:	4604      	mov	r4, r0

    integral = uint32_t(value);
   d473e:	4649      	mov	r1, r9
   d4740:	4640      	mov	r0, r8
   d4742:	f002 fea3 	bl	d748c <__aeabi_d2uiz>
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
   d4746:	f8df a16c 	ldr.w	sl, [pc, #364]	; d48b4 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1f4>
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);

    integral = uint32_t(value);
   d474a:	4606      	mov	r6, r0
   d474c:	4602      	mov	r2, r0
   d474e:	2309      	movs	r3, #9
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
      maxDecimalPart /= 10;
   d4750:	210a      	movs	r1, #10
   d4752:	b25d      	sxtb	r5, r3

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
   d4754:	2a09      	cmp	r2, #9
   d4756:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d475a:	b2db      	uxtb	r3, r3
   d475c:	d904      	bls.n	d4768 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0xa8>
      maxDecimalPart /= 10;
   d475e:	fbba faf1 	udiv	sl, sl, r1

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
   d4762:	fbb2 f2f1 	udiv	r2, r2, r1
   d4766:	e7f4      	b.n	d4752 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x92>
      maxDecimalPart /= 10;
      decimalPlaces--;
    }

    TFloat remainder = (value - TFloat(integral)) * TFloat(maxDecimalPart);
   d4768:	4630      	mov	r0, r6
   d476a:	f002 fb7f 	bl	d6e6c <__aeabi_ui2d>
   d476e:	4602      	mov	r2, r0
   d4770:	460b      	mov	r3, r1
   d4772:	4640      	mov	r0, r8
   d4774:	4649      	mov	r1, r9
   d4776:	f002 fa3b 	bl	d6bf0 <__aeabi_dsub>
   d477a:	4680      	mov	r8, r0
   d477c:	4650      	mov	r0, sl
   d477e:	4689      	mov	r9, r1
   d4780:	f002 fb74 	bl	d6e6c <__aeabi_ui2d>
   d4784:	4602      	mov	r2, r0
   d4786:	460b      	mov	r3, r1
   d4788:	4640      	mov	r0, r8
   d478a:	4649      	mov	r1, r9
   d478c:	f002 fbe4 	bl	d6f58 <__aeabi_dmul>
   d4790:	4680      	mov	r8, r0
   d4792:	4689      	mov	r9, r1

    decimal = uint32_t(remainder);
   d4794:	f002 fe7a 	bl	d748c <__aeabi_d2uiz>
   d4798:	4683      	mov	fp, r0
    remainder = remainder - TFloat(decimal);

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
   d479a:	f002 fb67 	bl	d6e6c <__aeabi_ui2d>
   d479e:	4602      	mov	r2, r0
   d47a0:	460b      	mov	r3, r1
   d47a2:	4640      	mov	r0, r8
   d47a4:	4649      	mov	r1, r9
   d47a6:	f002 fa23 	bl	d6bf0 <__aeabi_dsub>
   d47aa:	4602      	mov	r2, r0
   d47ac:	460b      	mov	r3, r1
   d47ae:	f002 fa21 	bl	d6bf4 <__adddf3>
   d47b2:	f002 fe6b 	bl	d748c <__aeabi_d2uiz>
   d47b6:	eb00 080b 	add.w	r8, r0, fp
    if (decimal >= maxDecimalPart) {
   d47ba:	45c2      	cmp	sl, r8
   d47bc:	d80d      	bhi.n	d47da <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x11a>
      decimal = 0;
      integral++;
   d47be:	3601      	adds	r6, #1
      if (exponent && integral >= 10) {
   d47c0:	b13c      	cbz	r4, d47d2 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x112>
   d47c2:	2e09      	cmp	r6, #9
   d47c4:	d907      	bls.n	d47d6 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x116>
        exponent++;
   d47c6:	3401      	adds	r4, #1
   d47c8:	b224      	sxth	r4, r4

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
   d47ca:	f04f 0800 	mov.w	r8, #0
      integral++;
      if (exponent && integral >= 10) {
        exponent++;
        integral = 1;
   d47ce:	2601      	movs	r6, #1
   d47d0:	e003      	b.n	d47da <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x11a>

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
   d47d2:	46a0      	mov	r8, r4
   d47d4:	e001      	b.n	d47da <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x11a>
   d47d6:	f04f 0800 	mov.w	r8, #0
        integral = 1;
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
   d47da:	220a      	movs	r2, #10
   d47dc:	fbb8 f3f2 	udiv	r3, r8, r2
   d47e0:	fb02 8113 	mls	r1, r2, r3, r8
   d47e4:	b929      	cbnz	r1, d47f2 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x132>
   d47e6:	2d00      	cmp	r5, #0
   d47e8:	dd03      	ble.n	d47f2 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x132>
   d47ea:	3d01      	subs	r5, #1
      decimal /= 10;
   d47ec:	4698      	mov	r8, r3
   d47ee:	b26d      	sxtb	r5, r5
   d47f0:	e7f4      	b.n	d47dc <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x11c>
        integral = 1;
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
   d47f2:	f10d 011e 	add.w	r1, sp, #30
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
   d47f6:	220a      	movs	r2, #10
   d47f8:	fbb6 f3f2 	udiv	r3, r6, r2
   d47fc:	fb02 6613 	mls	r6, r2, r3, r6
   d4800:	3630      	adds	r6, #48	; 0x30
   d4802:	f801 6d01 	strb.w	r6, [r1, #-1]!
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
   d4806:	461e      	mov	r6, r3
   d4808:	2b00      	cmp	r3, #0
   d480a:	d1f5      	bne.n	d47f8 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x138>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
   d480c:	f10d 021e 	add.w	r2, sp, #30
   d4810:	4638      	mov	r0, r7
   d4812:	f7ff fdbd 	bl	d4390 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>
#endif

    FloatParts<T> parts(value);

    writePositiveInteger(parts.integral);
    if (parts.decimalPlaces) writeDecimals(parts.decimal, parts.decimalPlaces);
   d4816:	b1d5      	cbz	r5, d484e <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x18e>
   d4818:	b2e9      	uxtb	r1, r5
   d481a:	ab02      	add	r3, sp, #8
   d481c:	f1c1 0010 	rsb	r0, r1, #16
   d4820:	4418      	add	r0, r3
   d4822:	ab06      	add	r3, sp, #24
   d4824:	461a      	mov	r2, r3
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    while (width--) {
      *--begin = char(value % 10 + '0');
   d4826:	260a      	movs	r6, #10
    char buffer[16];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    while (width--) {
   d4828:	4283      	cmp	r3, r0
   d482a:	d009      	beq.n	d4840 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x180>
      *--begin = char(value % 10 + '0');
   d482c:	fbb8 f5f6 	udiv	r5, r8, r6
   d4830:	fb06 8815 	mls	r8, r6, r5, r8
   d4834:	f108 0830 	add.w	r8, r8, #48	; 0x30
   d4838:	f803 8d01 	strb.w	r8, [r3, #-1]!
      value /= 10;
   d483c:	46a8      	mov	r8, r5
   d483e:	e7f3      	b.n	d4828 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x168>
    }
    *--begin = '.';
   d4840:	1a51      	subs	r1, r2, r1
   d4842:	232e      	movs	r3, #46	; 0x2e
   d4844:	f801 3d01 	strb.w	r3, [r1, #-1]!

    // and dump it in the right order
    writeRaw(begin, end);
   d4848:	4638      	mov	r0, r7
   d484a:	f7ff fda1 	bl	d4390 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>
    FloatParts<T> parts(value);

    writePositiveInteger(parts.integral);
    if (parts.decimalPlaces) writeDecimals(parts.decimal, parts.decimalPlaces);

    if (parts.exponent < 0) {
   d484e:	2c00      	cmp	r4, #0
   d4850:	da12      	bge.n	d4878 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1b8>
      writeRaw("e-");
   d4852:	4917      	ldr	r1, [pc, #92]	; (d48b0 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1f0>)
   d4854:	4638      	mov	r0, r7
   d4856:	f7ff fd4c 	bl	d42f2 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
      writePositiveInteger(-parts.exponent);
   d485a:	4264      	negs	r4, r4

  template <typename T>
  void writePositiveInteger(T value) {
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
   d485c:	f10d 011e 	add.w	r1, sp, #30

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
   d4860:	220a      	movs	r2, #10
   d4862:	fb94 f3f2 	sdiv	r3, r4, r2
   d4866:	fb02 4413 	mls	r4, r2, r3, r4
   d486a:	3430      	adds	r4, #48	; 0x30
   d486c:	f801 4d01 	strb.w	r4, [r1, #-1]!
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
   d4870:	461c      	mov	r4, r3
   d4872:	2b00      	cmp	r3, #0
   d4874:	d1f5      	bne.n	d4862 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1a2>
   d4876:	e011      	b.n	d489c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1dc>
    if (parts.exponent < 0) {
      writeRaw("e-");
      writePositiveInteger(-parts.exponent);
    }

    if (parts.exponent > 0) {
   d4878:	d015      	beq.n	d48a6 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1e6>
      writeRaw('e');
   d487a:	2165      	movs	r1, #101	; 0x65
   d487c:	4638      	mov	r0, r7
   d487e:	f7ff fd47 	bl	d4310 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>

  template <typename T>
  void writePositiveInteger(T value) {
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
   d4882:	f10d 011e 	add.w	r1, sp, #30

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
   d4886:	220a      	movs	r2, #10
   d4888:	fb94 f3f2 	sdiv	r3, r4, r2
   d488c:	fb02 4413 	mls	r4, r2, r3, r4
   d4890:	3430      	adds	r4, #48	; 0x30
   d4892:	f801 4d01 	strb.w	r4, [r1, #-1]!
      value = T(value / 10);
   d4896:	b21c      	sxth	r4, r3
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
   d4898:	2c00      	cmp	r4, #0
   d489a:	d1f5      	bne.n	d4888 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1c8>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
   d489c:	f10d 021e 	add.w	r2, sp, #30
   d48a0:	4638      	mov	r0, r7
   d48a2:	f7ff fd75 	bl	d4390 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>

    if (parts.exponent > 0) {
      writeRaw('e');
      writePositiveInteger(parts.exponent);
    }
  }
   d48a6:	b009      	add	sp, #36	; 0x24
   d48a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d48ac:	000d792f 	.word	0x000d792f
   d48b0:	000d7943 	.word	0x000d7943
   d48b4:	3b9aca00 	.word	0x3b9aca00

000d48b8 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_>:
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
   d48b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (type()) {
   d48ba:	7a03      	ldrb	r3, [r0, #8]
   d48bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d48c0:	2b05      	cmp	r3, #5
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
   d48c2:	4605      	mov	r5, r0
   d48c4:	460c      	mov	r4, r1
    switch (type()) {
   d48c6:	d06c      	beq.n	d49a2 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xea>
   d48c8:	d808      	bhi.n	d48dc <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x24>
   d48ca:	2b00      	cmp	r3, #0
   d48cc:	d070      	beq.n	d49b0 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xf8>
   d48ce:	2b02      	cmp	r3, #2
   d48d0:	d958      	bls.n	d4984 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xcc>
  void visitFloat(Float value) {
    _formatter.writeFloat(value);
  }

  void visitString(const char *value) {
    _formatter.writeString(value);
   d48d2:	6801      	ldr	r1, [r0, #0]
   d48d4:	4620      	mov	r0, r4
   d48d6:	f7ff fd2f 	bl	d4338 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc>
   d48da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d48dc:	2b08      	cmp	r3, #8
   d48de:	d017      	beq.n	d4910 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x58>
   d48e0:	d80c      	bhi.n	d48fc <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x44>
   d48e2:	2b06      	cmp	r3, #6
   d48e4:	d057      	beq.n	d4996 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xde>
   d48e6:	2b07      	cmp	r3, #7
   d48e8:	d162      	bne.n	d49b0 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xf8>
      case VALUE_IS_OWNED_RAW:
      case VALUE_IS_LINKED_RAW:
        return visitor.visitRawJson(_content.asRaw.data, _content.asRaw.size);

      case VALUE_IS_NEGATIVE_INTEGER:
        return visitor.visitNegativeInteger(_content.asInteger);
   d48ea:	e9d0 6700 	ldrd	r6, r7, [r0]

  void writeNegativeInteger(UInt value) {
    writeRaw('-');
   d48ee:	212d      	movs	r1, #45	; 0x2d
   d48f0:	4620      	mov	r0, r4
   d48f2:	f7ff fd0d 	bl	d4310 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
    writePositiveInteger(value);
   d48f6:	4632      	mov	r2, r6
   d48f8:	463b      	mov	r3, r7
   d48fa:	e04e      	b.n	d499a <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xe2>
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
    switch (type()) {
   d48fc:	2b20      	cmp	r3, #32
   d48fe:	d01f      	beq.n	d4940 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x88>
   d4900:	2b40      	cmp	r3, #64	; 0x40
   d4902:	d155      	bne.n	d49b0 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xf8>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d4904:	215b      	movs	r1, #91	; 0x5b
   d4906:	4620      	mov	r0, r4
   d4908:	f7ff fd02 	bl	d4310 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
   d490c:	682d      	ldr	r5, [r5, #0]
   d490e:	e013      	b.n	d4938 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x80>

    write('}');
  }

  void visitFloat(Float value) {
    _formatter.writeFloat(value);
   d4910:	ed90 0b00 	vldr	d0, [r0]
   d4914:	4608      	mov	r0, r1
   d4916:	f7ff fed3 	bl	d46c0 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_>
   d491a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    write('[');

    VariantSlot *slot = array.head();

    while (slot != 0) {
      slot->data()->accept(*this);
   d491c:	4621      	mov	r1, r4
   d491e:	4628      	mov	r0, r5
   d4920:	f7ff ffca 	bl	d48b8 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_>
  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
    return _next ? this + _next : 0;
   d4924:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   d4928:	b143      	cbz	r3, d493c <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x84>

      slot = slot->next();
      if (slot == 0) break;
   d492a:	eb15 1503 	adds.w	r5, r5, r3, lsl #4
   d492e:	d005      	beq.n	d493c <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x84>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d4930:	212c      	movs	r1, #44	; 0x2c
   d4932:	4620      	mov	r0, r4
   d4934:	f7ff fcec 	bl	d4310 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
  FORCE_INLINE void visitArray(const CollectionData &array) {
    write('[');

    VariantSlot *slot = array.head();

    while (slot != 0) {
   d4938:	2d00      	cmp	r5, #0
   d493a:	d1ef      	bne.n	d491c <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x64>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d493c:	215d      	movs	r1, #93	; 0x5d
   d493e:	e01d      	b.n	d497c <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xc4>
   d4940:	217b      	movs	r1, #123	; 0x7b
   d4942:	4620      	mov	r0, r4
   d4944:	f7ff fce4 	bl	d4310 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
   d4948:	682d      	ldr	r5, [r5, #0]
  void visitObject(const CollectionData &object) {
    write('{');

    VariantSlot *slot = object.head();

    while (slot != 0) {
   d494a:	b1b5      	cbz	r5, d497a <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xc2>
      _formatter.writeString(slot->key());
   d494c:	68e9      	ldr	r1, [r5, #12]
   d494e:	4620      	mov	r0, r4
   d4950:	f7ff fcf2 	bl	d4338 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d4954:	213a      	movs	r1, #58	; 0x3a
   d4956:	4620      	mov	r0, r4
   d4958:	f7ff fcda 	bl	d4310 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
    VariantSlot *slot = object.head();

    while (slot != 0) {
      _formatter.writeString(slot->key());
      write(':');
      slot->data()->accept(*this);
   d495c:	4621      	mov	r1, r4
   d495e:	4628      	mov	r0, r5
   d4960:	f7ff ffaa 	bl	d48b8 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_>
   d4964:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   d4968:	b13b      	cbz	r3, d497a <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xc2>

      slot = slot->next();
      if (slot == 0) break;
   d496a:	eb15 1503 	adds.w	r5, r5, r3, lsl #4
   d496e:	d004      	beq.n	d497a <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xc2>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d4970:	212c      	movs	r1, #44	; 0x2c
   d4972:	4620      	mov	r0, r4
   d4974:	f7ff fccc 	bl	d4310 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
   d4978:	e7e7      	b.n	d494a <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x92>
   d497a:	217d      	movs	r1, #125	; 0x7d
   d497c:	4620      	mov	r0, r4
   d497e:	f7ff fcc7 	bl	d4310 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
   d4982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  void writeRaw(const char *s) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
  }

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
   d4984:	e890 0006 	ldmia.w	r0, {r1, r2}
   d4988:	6820      	ldr	r0, [r4, #0]
   d498a:	f7ff fbbd 	bl	d4108 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj>
   d498e:	6863      	ldr	r3, [r4, #4]
   d4990:	4418      	add	r0, r3
   d4992:	6060      	str	r0, [r4, #4]
   d4994:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  void visitNegativeInteger(UInt value) {
    _formatter.writeNegativeInteger(value);
  }

  void visitPositiveInteger(UInt value) {
    _formatter.writePositiveInteger(value);
   d4996:	e9d0 2300 	ldrd	r2, r3, [r0]
   d499a:	4620      	mov	r0, r4
   d499c:	f7ff fd02 	bl	d43a4 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE20writePositiveIntegerIyEEvT_>
   d49a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  size_t bytesWritten() const {
    return _length;
  }

  void writeBoolean(bool value) {
    if (value)
   d49a2:	e9d0 2300 	ldrd	r2, r3, [r0]
   d49a6:	4313      	orrs	r3, r2
      writeRaw("true");
   d49a8:	bf14      	ite	ne
   d49aa:	4904      	ldrne	r1, [pc, #16]	; (d49bc <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x104>)
    else
      writeRaw("false");
   d49ac:	4904      	ldreq	r1, [pc, #16]	; (d49c0 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x108>)
   d49ae:	e000      	b.n	d49b2 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xfa>
  void visitBoolean(bool value) {
    _formatter.writeBoolean(value);
  }

  void visitNull() {
    _formatter.writeRaw("null");
   d49b0:	4904      	ldr	r1, [pc, #16]	; (d49c4 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x10c>)
   d49b2:	4620      	mov	r0, r4
   d49b4:	f7ff fc9d 	bl	d42f2 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
   d49b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d49ba:	bf00      	nop
   d49bc:	000d7946 	.word	0x000d7946
   d49c0:	000d794b 	.word	0x000d794b
   d49c4:	000d792f 	.word	0x000d792f

000d49c8 <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj255EEEA255_cEEjRKT_RT0_>:
 private:
  TextFormatter<TWriter> _formatter;
};

template <typename TSource, typename TDestination>
size_t serializeJson(const TSource &source, TDestination &destination) {
   d49c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
namespace ARDUINOJSON_NAMESPACE {

// A Print implementation that allows to write in a char[]
class StaticStringWriter {
 public:
  StaticStringWriter(char *buf, size_t size) : end(buf + size - 1), p(buf) {
   d49ca:	f101 03fe 	add.w	r3, r1, #254	; 0xfe
   d49ce:	9300      	str	r3, [sp, #0]

namespace ARDUINOJSON_NAMESPACE {

template <typename Visitor>
inline void variantAccept(const VariantData *var, Visitor &visitor) {
  if (var != 0)
   d49d0:	3010      	adds	r0, #16
    *p = '\0';
   d49d2:	f04f 0300 	mov.w	r3, #0
namespace ARDUINOJSON_NAMESPACE {

// A Print implementation that allows to write in a char[]
class StaticStringWriter {
 public:
  StaticStringWriter(char *buf, size_t size) : end(buf + size - 1), p(buf) {
   d49d6:	9101      	str	r1, [sp, #4]
    *p = '\0';
   d49d8:	700b      	strb	r3, [r1, #0]
namespace ARDUINOJSON_NAMESPACE {

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter &writer) : _writer(writer), _length(0) {}
   d49da:	f8cd d008 	str.w	sp, [sp, #8]
   d49de:	9303      	str	r3, [sp, #12]
   d49e0:	d003      	beq.n	d49ea <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj255EEEA255_cEEjRKT_RT0_+0x22>
    var->accept(visitor);
   d49e2:	a902      	add	r1, sp, #8
   d49e4:	f7ff ff68 	bl	d48b8 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_>
   d49e8:	e003      	b.n	d49f2 <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj255EEEA255_cEEjRKT_RT0_+0x2a>
  void visitBoolean(bool value) {
    _formatter.writeBoolean(value);
  }

  void visitNull() {
    _formatter.writeRaw("null");
   d49ea:	4904      	ldr	r1, [pc, #16]	; (d49fc <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj255EEEA255_cEEjRKT_RT0_+0x34>)
   d49ec:	a802      	add	r0, sp, #8
   d49ee:	f7ff fc80 	bl	d42f2 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
};

template <typename TSource, typename TDestination>
size_t serializeJson(const TSource &source, TDestination &destination) {
  return serialize<JsonSerializer>(source, destination);
}
   d49f2:	9803      	ldr	r0, [sp, #12]
   d49f4:	b005      	add	sp, #20
   d49f6:	f85d fb04 	ldr.w	pc, [sp], #4
   d49fa:	bf00      	nop
   d49fc:	000d792f 	.word	0x000d792f

000d4a00 <_Z18PublishLightSensorv>:
	return 0;
}



int PublishLightSensor() {
   d4a00:	b510      	push	{r4, lr}
    
    int value = analogRead(LIGHTPIN);
   d4a02:	2013      	movs	r0, #19
	return 0;
}



int PublishLightSensor() {
   d4a04:	b0c8      	sub	sp, #288	; 0x120
    
    int value = analogRead(LIGHTPIN);
   d4a06:	f001 ff45 	bl	d6894 <analogRead>
   d4a0a:	4604      	mov	r4, r0
    
    StaticJsonDocument<255> jsonDoc;
   d4a0c:	4668      	mov	r0, sp
   d4a0e:	f7ff fbd5 	bl	d41bc <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj255EEC1Ev>
  // getOrAddMember(char*)
  // getOrAddMember(const char*)
  // getOrAddMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getOrAddMember(TChar* key) {
    return VariantRef(&_pool, _data.getOrAddMember(adaptString(key), &_pool));
   d4a12:	466a      	mov	r2, sp
   d4a14:	4916      	ldr	r1, [pc, #88]	; (d4a70 <_Z18PublishLightSensorv+0x70>)
   d4a16:	a804      	add	r0, sp, #16
   d4a18:	f7ff fc10 	bl	d423c <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
   d4a1c:	466a      	mov	r2, sp
   d4a1e:	4915      	ldr	r1, [pc, #84]	; (d4a74 <_Z18PublishLightSensorv+0x74>)
   d4a20:	f7ff fbe3 	bl	d41ea <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
   d4a24:	466a      	mov	r2, sp
   d4a26:	4914      	ldr	r1, [pc, #80]	; (d4a78 <_Z18PublishLightSensorv+0x78>)
   d4a28:	a804      	add	r0, sp, #16
   d4a2a:	f7ff fc07 	bl	d423c <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
   d4a2e:	4913      	ldr	r1, [pc, #76]	; (d4a7c <_Z18PublishLightSensorv+0x7c>)
   d4a30:	f7ff fb5a 	bl	d40e8 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d4a34:	466a      	mov	r2, sp
   d4a36:	4912      	ldr	r1, [pc, #72]	; (d4a80 <_Z18PublishLightSensorv+0x80>)
   d4a38:	a804      	add	r0, sp, #16
   d4a3a:	f7ff fbff 	bl	d423c <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
   d4a3e:	4911      	ldr	r1, [pc, #68]	; (d4a84 <_Z18PublishLightSensorv+0x84>)
   d4a40:	f7ff fb52 	bl	d40e8 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d4a44:	466a      	mov	r2, sp
   d4a46:	490d      	ldr	r1, [pc, #52]	; (d4a7c <_Z18PublishLightSensorv+0x7c>)
   d4a48:	a804      	add	r0, sp, #16
   d4a4a:	f7ff fbf7 	bl	d423c <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  return var != 0 && var->setOwnedRaw(value, pool);
}

template <typename T>
inline bool variantSetSignedInteger(VariantData *var, T value) {
  if (!var) return false;
   d4a4e:	b110      	cbz	r0, d4a56 <_Z18PublishLightSensorv+0x56>
  var->setSignedInteger(value);
   d4a50:	4621      	mov	r1, r4
   d4a52:	f7ff fc38 	bl	d42c6 <_ZN21ArduinoJson6110_1100011VariantData16setSignedIntegerIiEEvT_>
    jsonDoc["name"] = deviceName;
    jsonDoc["cmd"] = "LightSensor";
    jsonDoc["method"] = "get";
    jsonDoc["LightSensor"] = value;
    
    serializeJson(jsonDoc, buffer);
   d4a56:	490c      	ldr	r1, [pc, #48]	; (d4a88 <_Z18PublishLightSensorv+0x88>)
   d4a58:	4668      	mov	r0, sp
   d4a5a:	f7ff ffb5 	bl	d49c8 <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj255EEEA255_cEEjRKT_RT0_>
    
    Mesh.publish(pubTopic, buffer);
   d4a5e:	4a0a      	ldr	r2, [pc, #40]	; (d4a88 <_Z18PublishLightSensorv+0x88>)
   d4a60:	490a      	ldr	r1, [pc, #40]	; (d4a8c <_Z18PublishLightSensorv+0x8c>)
   d4a62:	480b      	ldr	r0, [pc, #44]	; (d4a90 <_Z18PublishLightSensorv+0x90>)
   d4a64:	f001 f80c 	bl	d5a80 <_ZN5spark11MeshPublish7publishEPKcS2_>
    
    return 0;
}
   d4a68:	2000      	movs	r0, #0
   d4a6a:	b048      	add	sp, #288	; 0x120
   d4a6c:	bd10      	pop	{r4, pc}
   d4a6e:	bf00      	nop
   d4a70:	000d791c 	.word	0x000d791c
   d4a74:	2003e258 	.word	0x2003e258
   d4a78:	000d7951 	.word	0x000d7951
   d4a7c:	000d7955 	.word	0x000d7955
   d4a80:	000d7961 	.word	0x000d7961
   d4a84:	000d7968 	.word	0x000d7968
   d4a88:	2003e29a 	.word	0x2003e29a
   d4a8c:	2003e399 	.word	0x2003e399
   d4a90:	2003e3f0 	.word	0x2003e3f0

000d4a94 <_Z18PublishAngleSensorv>:

int PublishAngleSensor() {
   d4a94:	b510      	push	{r4, lr}
    
    int value = analogRead(ANGLEPIN);
   d4a96:	200f      	movs	r0, #15
    Mesh.publish(pubTopic, buffer);
    
    return 0;
}

int PublishAngleSensor() {
   d4a98:	b0c8      	sub	sp, #288	; 0x120
    
    int value = analogRead(ANGLEPIN);
   d4a9a:	f001 fefb 	bl	d6894 <analogRead>
   d4a9e:	4604      	mov	r4, r0
    
    StaticJsonDocument<255> jsonDoc;
   d4aa0:	4668      	mov	r0, sp
   d4aa2:	f7ff fb8b 	bl	d41bc <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj255EEC1Ev>
   d4aa6:	466a      	mov	r2, sp
   d4aa8:	4916      	ldr	r1, [pc, #88]	; (d4b04 <_Z18PublishAngleSensorv+0x70>)
   d4aaa:	a804      	add	r0, sp, #16
   d4aac:	f7ff fbc6 	bl	d423c <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
   d4ab0:	466a      	mov	r2, sp
   d4ab2:	4915      	ldr	r1, [pc, #84]	; (d4b08 <_Z18PublishAngleSensorv+0x74>)
   d4ab4:	f7ff fb99 	bl	d41ea <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
   d4ab8:	466a      	mov	r2, sp
   d4aba:	4914      	ldr	r1, [pc, #80]	; (d4b0c <_Z18PublishAngleSensorv+0x78>)
   d4abc:	a804      	add	r0, sp, #16
   d4abe:	f7ff fbbd 	bl	d423c <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
   d4ac2:	4913      	ldr	r1, [pc, #76]	; (d4b10 <_Z18PublishAngleSensorv+0x7c>)
   d4ac4:	f7ff fb10 	bl	d40e8 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d4ac8:	466a      	mov	r2, sp
   d4aca:	4912      	ldr	r1, [pc, #72]	; (d4b14 <_Z18PublishAngleSensorv+0x80>)
   d4acc:	a804      	add	r0, sp, #16
   d4ace:	f7ff fbb5 	bl	d423c <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
   d4ad2:	4911      	ldr	r1, [pc, #68]	; (d4b18 <_Z18PublishAngleSensorv+0x84>)
   d4ad4:	f7ff fb08 	bl	d40e8 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d4ad8:	466a      	mov	r2, sp
   d4ada:	490d      	ldr	r1, [pc, #52]	; (d4b10 <_Z18PublishAngleSensorv+0x7c>)
   d4adc:	a804      	add	r0, sp, #16
   d4ade:	f7ff fbad 	bl	d423c <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  return var != 0 && var->setOwnedRaw(value, pool);
}

template <typename T>
inline bool variantSetSignedInteger(VariantData *var, T value) {
  if (!var) return false;
   d4ae2:	b110      	cbz	r0, d4aea <_Z18PublishAngleSensorv+0x56>
  var->setSignedInteger(value);
   d4ae4:	4621      	mov	r1, r4
   d4ae6:	f7ff fbee 	bl	d42c6 <_ZN21ArduinoJson6110_1100011VariantData16setSignedIntegerIiEEvT_>
    jsonDoc["name"] = deviceName;
    jsonDoc["cmd"] = "RotaryAngleSensor";
    jsonDoc["method"] = "get";
    jsonDoc["RotaryAngleSensor"] = value;
    
    serializeJson(jsonDoc, buffer);
   d4aea:	490c      	ldr	r1, [pc, #48]	; (d4b1c <_Z18PublishAngleSensorv+0x88>)
   d4aec:	4668      	mov	r0, sp
   d4aee:	f7ff ff6b 	bl	d49c8 <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj255EEEA255_cEEjRKT_RT0_>
    
    Mesh.publish(pubTopic, buffer);
   d4af2:	4a0a      	ldr	r2, [pc, #40]	; (d4b1c <_Z18PublishAngleSensorv+0x88>)
   d4af4:	490a      	ldr	r1, [pc, #40]	; (d4b20 <_Z18PublishAngleSensorv+0x8c>)
   d4af6:	480b      	ldr	r0, [pc, #44]	; (d4b24 <_Z18PublishAngleSensorv+0x90>)
   d4af8:	f000 ffc2 	bl	d5a80 <_ZN5spark11MeshPublish7publishEPKcS2_>
    
    return 0;
}
   d4afc:	2000      	movs	r0, #0
   d4afe:	b048      	add	sp, #288	; 0x120
   d4b00:	bd10      	pop	{r4, pc}
   d4b02:	bf00      	nop
   d4b04:	000d791c 	.word	0x000d791c
   d4b08:	2003e258 	.word	0x2003e258
   d4b0c:	000d7951 	.word	0x000d7951
   d4b10:	000d796c 	.word	0x000d796c
   d4b14:	000d7961 	.word	0x000d7961
   d4b18:	000d7968 	.word	0x000d7968
   d4b1c:	2003e29a 	.word	0x2003e29a
   d4b20:	2003e399 	.word	0x2003e399
   d4b24:	2003e3f0 	.word	0x2003e3f0

000d4b28 <_Z13PublishButtonv>:

int PublishButton() {
   d4b28:	b510      	push	{r4, lr}
    
    int ivalue = analogRead(BUTTONPIN);
   d4b2a:	2011      	movs	r0, #17
    Mesh.publish(pubTopic, buffer);
    
    return 0;
}

int PublishButton() {
   d4b2c:	b0c8      	sub	sp, #288	; 0x120
    
    int ivalue = analogRead(BUTTONPIN);
   d4b2e:	f001 feb1 	bl	d6894 <analogRead>
   d4b32:	4604      	mov	r4, r0
    bool value = false;
    
    StaticJsonDocument<255> jsonDoc;
   d4b34:	4668      	mov	r0, sp
   d4b36:	f7ff fb41 	bl	d41bc <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj255EEC1Ev>

    if (ivalue > 0) value = true;
   d4b3a:	2c00      	cmp	r4, #0
   d4b3c:	466a      	mov	r2, sp
   d4b3e:	491b      	ldr	r1, [pc, #108]	; (d4bac <_Z13PublishButtonv+0x84>)
   d4b40:	a804      	add	r0, sp, #16
   d4b42:	bfd4      	ite	le
   d4b44:	2400      	movle	r4, #0
   d4b46:	2401      	movgt	r4, #1
   d4b48:	f7ff fb78 	bl	d423c <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
   d4b4c:	466a      	mov	r2, sp
   d4b4e:	4918      	ldr	r1, [pc, #96]	; (d4bb0 <_Z13PublishButtonv+0x88>)
   d4b50:	f7ff fb4b 	bl	d41ea <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
   d4b54:	466a      	mov	r2, sp
   d4b56:	4917      	ldr	r1, [pc, #92]	; (d4bb4 <_Z13PublishButtonv+0x8c>)
   d4b58:	a804      	add	r0, sp, #16
   d4b5a:	f7ff fb6f 	bl	d423c <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
   d4b5e:	4916      	ldr	r1, [pc, #88]	; (d4bb8 <_Z13PublishButtonv+0x90>)
   d4b60:	f7ff fac2 	bl	d40e8 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d4b64:	466a      	mov	r2, sp
   d4b66:	4915      	ldr	r1, [pc, #84]	; (d4bbc <_Z13PublishButtonv+0x94>)
   d4b68:	a804      	add	r0, sp, #16
   d4b6a:	f7ff fb67 	bl	d423c <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
   d4b6e:	4914      	ldr	r1, [pc, #80]	; (d4bc0 <_Z13PublishButtonv+0x98>)
   d4b70:	f7ff faba 	bl	d40e8 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d4b74:	466a      	mov	r2, sp
   d4b76:	4910      	ldr	r1, [pc, #64]	; (d4bb8 <_Z13PublishButtonv+0x90>)
   d4b78:	a804      	add	r0, sp, #16
   d4b7a:	f7ff fb5f 	bl	d423c <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
inline bool variantIsNull(const VariantData *var) {
  return var == 0 || var->isNull();
}

inline bool variantSetBoolean(VariantData *var, bool value) {
  if (!var) return false;
   d4b7e:	4602      	mov	r2, r0
   d4b80:	b138      	cbz	r0, d4b92 <_Z13PublishButtonv+0x6a>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
   d4b82:	2105      	movs	r1, #5
   d4b84:	3008      	adds	r0, #8
   d4b86:	f7ff faa9 	bl	d40dc <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.6>
    _content.asInteger = static_cast<UInt>(value);
   d4b8a:	b2e0      	uxtb	r0, r4
   d4b8c:	2100      	movs	r1, #0
   d4b8e:	e9c2 0100 	strd	r0, r1, [r2]
    jsonDoc["name"] = deviceName;
    jsonDoc["cmd"] = "Button";
    jsonDoc["method"] = "get";
    jsonDoc["Button"] = value;
    
    serializeJson(jsonDoc, buffer);
   d4b92:	490c      	ldr	r1, [pc, #48]	; (d4bc4 <_Z13PublishButtonv+0x9c>)
   d4b94:	4668      	mov	r0, sp
   d4b96:	f7ff ff17 	bl	d49c8 <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj255EEEA255_cEEjRKT_RT0_>
    
    Mesh.publish(pubTopic, buffer);
   d4b9a:	4a0a      	ldr	r2, [pc, #40]	; (d4bc4 <_Z13PublishButtonv+0x9c>)
   d4b9c:	490a      	ldr	r1, [pc, #40]	; (d4bc8 <_Z13PublishButtonv+0xa0>)
   d4b9e:	480b      	ldr	r0, [pc, #44]	; (d4bcc <_Z13PublishButtonv+0xa4>)
   d4ba0:	f000 ff6e 	bl	d5a80 <_ZN5spark11MeshPublish7publishEPKcS2_>
    
    return 0;
}
   d4ba4:	2000      	movs	r0, #0
   d4ba6:	b048      	add	sp, #288	; 0x120
   d4ba8:	bd10      	pop	{r4, pc}
   d4baa:	bf00      	nop
   d4bac:	000d791c 	.word	0x000d791c
   d4bb0:	2003e258 	.word	0x2003e258
   d4bb4:	000d7951 	.word	0x000d7951
   d4bb8:	000d797e 	.word	0x000d797e
   d4bbc:	000d7961 	.word	0x000d7961
   d4bc0:	000d7968 	.word	0x000d7968
   d4bc4:	2003e29a 	.word	0x2003e29a
   d4bc8:	2003e399 	.word	0x2003e399
   d4bcc:	2003e3f0 	.word	0x2003e3f0

000d4bd0 <loop>:
    
    SetPubTopic("MeshDataTopic");
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d4bd0:	b510      	push	{r4, lr}
  // The core of your code will likely live here.

  if (nameReceived) {
   d4bd2:	4b0c      	ldr	r3, [pc, #48]	; (d4c04 <loop+0x34>)
   d4bd4:	781b      	ldrb	r3, [r3, #0]
   d4bd6:	b19b      	cbz	r3, d4c00 <loop+0x30>
        if (millis() - lastPublish >= PUBLISH_INTERVAL_MS) {
   d4bd8:	4c0b      	ldr	r4, [pc, #44]	; (d4c08 <loop+0x38>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d4bda:	f000 f85f 	bl	d4c9c <HAL_Timer_Get_Milli_Seconds>
   d4bde:	6823      	ldr	r3, [r4, #0]
   d4be0:	1ac0      	subs	r0, r0, r3
   d4be2:	f241 3387 	movw	r3, #4999	; 0x1387
   d4be6:	4298      	cmp	r0, r3
   d4be8:	d90a      	bls.n	d4c00 <loop+0x30>
   d4bea:	f000 f857 	bl	d4c9c <HAL_Timer_Get_Milli_Seconds>
	    	lastPublish = millis();
   d4bee:	6020      	str	r0, [r4, #0]
		
		    PublishLightSensor();
   d4bf0:	f7ff ff06 	bl	d4a00 <_Z18PublishLightSensorv>
		    PublishAngleSensor();
   d4bf4:	f7ff ff4e 	bl	d4a94 <_Z18PublishAngleSensorv>
		    PublishButton();
        }
    }
}
   d4bf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        if (millis() - lastPublish >= PUBLISH_INTERVAL_MS) {
	    	lastPublish = millis();
		
		    PublishLightSensor();
		    PublishAngleSensor();
		    PublishButton();
   d4bfc:	f7ff bf94 	b.w	d4b28 <_Z13PublishButtonv>
   d4c00:	bd10      	pop	{r4, pc}
   d4c02:	bf00      	nop
   d4c04:	2003e299 	.word	0x2003e299
   d4c08:	2003e254 	.word	0x2003e254

000d4c0c <_GLOBAL__sub_I_lastPublish>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d4c0c:	4b02      	ldr	r3, [pc, #8]	; (d4c18 <_GLOBAL__sub_I_lastPublish+0xc>)
   d4c0e:	2201      	movs	r2, #1
   d4c10:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4c12:	f000 b84b 	b.w	d4cac <HAL_Pin_Map>
   d4c16:	bf00      	nop
   d4c18:	2003e298 	.word	0x2003e298

000d4c1c <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4c1c:	b508      	push	{r3, lr}
   d4c1e:	4b02      	ldr	r3, [pc, #8]	; (d4c28 <os_thread_is_current+0xc>)
   d4c20:	681b      	ldr	r3, [r3, #0]
   d4c22:	689b      	ldr	r3, [r3, #8]
   d4c24:	9301      	str	r3, [sp, #4]
   d4c26:	bd08      	pop	{r3, pc}
   d4c28:	00030248 	.word	0x00030248

000d4c2c <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4c2c:	b508      	push	{r3, lr}
   d4c2e:	4b02      	ldr	r3, [pc, #8]	; (d4c38 <os_thread_join+0xc>)
   d4c30:	681b      	ldr	r3, [r3, #0]
   d4c32:	691b      	ldr	r3, [r3, #16]
   d4c34:	9301      	str	r3, [sp, #4]
   d4c36:	bd08      	pop	{r3, pc}
   d4c38:	00030248 	.word	0x00030248

000d4c3c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4c3c:	b508      	push	{r3, lr}
   d4c3e:	4b02      	ldr	r3, [pc, #8]	; (d4c48 <os_thread_cleanup+0xc>)
   d4c40:	681b      	ldr	r3, [r3, #0]
   d4c42:	695b      	ldr	r3, [r3, #20]
   d4c44:	9301      	str	r3, [sp, #4]
   d4c46:	bd08      	pop	{r3, pc}
   d4c48:	00030248 	.word	0x00030248

000d4c4c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d4c4c:	b508      	push	{r3, lr}
   d4c4e:	4b02      	ldr	r3, [pc, #8]	; (d4c58 <os_mutex_create+0xc>)
   d4c50:	681b      	ldr	r3, [r3, #0]
   d4c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4c54:	9301      	str	r3, [sp, #4]
   d4c56:	bd08      	pop	{r3, pc}
   d4c58:	00030248 	.word	0x00030248

000d4c5c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <os_mutex_recursive_create+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030248 	.word	0x00030248

000d4c6c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <os_mutex_recursive_lock+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030248 	.word	0x00030248

000d4c7c <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <os_mutex_recursive_unlock+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030248 	.word	0x00030248

000d4c8c <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <HAL_RNG_GetRandomNumber+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	685b      	ldr	r3, [r3, #4]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030218 	.word	0x00030218

000d4c9c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	695b      	ldr	r3, [r3, #20]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030218 	.word	0x00030218

000d4cac <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <HAL_Pin_Map+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	681b      	ldr	r3, [r3, #0]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	0003022c 	.word	0x0003022c

000d4cbc <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <HAL_Validate_Pin_Function+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	685b      	ldr	r3, [r3, #4]
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	0003022c 	.word	0x0003022c

000d4ccc <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <HAL_ADC_Read+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	0003022c 	.word	0x0003022c

000d4cdc <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <HAL_I2C_Write_Data+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	6a1b      	ldr	r3, [r3, #32]
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030228 	.word	0x00030228

000d4cec <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <HAL_I2C_Available_Data+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030228 	.word	0x00030228

000d4cfc <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <HAL_I2C_Read_Data+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030228 	.word	0x00030228

000d4d0c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <HAL_I2C_Peek_Data+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	00030228 	.word	0x00030228

000d4d1c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <HAL_I2C_Flush_Data+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	00030228 	.word	0x00030228

000d4d2c <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <HAL_I2C_Is_Enabled+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	00030228 	.word	0x00030228

000d4d3c <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <HAL_I2C_Init+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	00030228 	.word	0x00030228

000d4d4c <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d4d4c:	b508      	push	{r3, lr}
   d4d4e:	4b02      	ldr	r3, [pc, #8]	; (d4d58 <if_name_to_index+0xc>)
   d4d50:	681b      	ldr	r3, [r3, #0]
   d4d52:	691b      	ldr	r3, [r3, #16]
   d4d54:	9301      	str	r3, [sp, #4]
   d4d56:	bd08      	pop	{r3, pc}
   d4d58:	0003026c 	.word	0x0003026c

000d4d5c <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d4d5c:	b508      	push	{r3, lr}
   d4d5e:	4b02      	ldr	r3, [pc, #8]	; (d4d68 <if_index_to_name+0xc>)
   d4d60:	681b      	ldr	r3, [r3, #0]
   d4d62:	695b      	ldr	r3, [r3, #20]
   d4d64:	9301      	str	r3, [sp, #4]
   d4d66:	bd08      	pop	{r3, pc}
   d4d68:	0003026c 	.word	0x0003026c

000d4d6c <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d4d6c:	b508      	push	{r3, lr}
   d4d6e:	4b02      	ldr	r3, [pc, #8]	; (d4d78 <if_get_by_index+0xc>)
   d4d70:	681b      	ldr	r3, [r3, #0]
   d4d72:	699b      	ldr	r3, [r3, #24]
   d4d74:	9301      	str	r3, [sp, #4]
   d4d76:	bd08      	pop	{r3, pc}
   d4d78:	0003026c 	.word	0x0003026c

000d4d7c <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d4d7c:	b508      	push	{r3, lr}
   d4d7e:	4b02      	ldr	r3, [pc, #8]	; (d4d88 <if_get_addrs+0xc>)
   d4d80:	681b      	ldr	r3, [r3, #0]
   d4d82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4d84:	9301      	str	r3, [sp, #4]
   d4d86:	bd08      	pop	{r3, pc}
   d4d88:	0003026c 	.word	0x0003026c

000d4d8c <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d4d8c:	b508      	push	{r3, lr}
   d4d8e:	4b02      	ldr	r3, [pc, #8]	; (d4d98 <if_free_if_addrs+0xc>)
   d4d90:	681b      	ldr	r3, [r3, #0]
   d4d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d4d94:	9301      	str	r3, [sp, #4]
   d4d96:	bd08      	pop	{r3, pc}
   d4d98:	0003026c 	.word	0x0003026c

000d4d9c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4d9c:	b508      	push	{r3, lr}
   d4d9e:	4b02      	ldr	r3, [pc, #8]	; (d4da8 <inet_inet_ntop+0xc>)
   d4da0:	681b      	ldr	r3, [r3, #0]
   d4da2:	695b      	ldr	r3, [r3, #20]
   d4da4:	9301      	str	r3, [sp, #4]
   d4da6:	bd08      	pop	{r3, pc}
   d4da8:	00030264 	.word	0x00030264

000d4dac <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d4dac:	b508      	push	{r3, lr}
   d4dae:	4b02      	ldr	r3, [pc, #8]	; (d4db8 <inet_inet_pton+0xc>)
   d4db0:	681b      	ldr	r3, [r3, #0]
   d4db2:	699b      	ldr	r3, [r3, #24]
   d4db4:	9301      	str	r3, [sp, #4]
   d4db6:	bd08      	pop	{r3, pc}
   d4db8:	00030264 	.word	0x00030264

000d4dbc <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d4dbc:	b508      	push	{r3, lr}
   d4dbe:	4b02      	ldr	r3, [pc, #8]	; (d4dc8 <inet_htonl+0xc>)
   d4dc0:	681b      	ldr	r3, [r3, #0]
   d4dc2:	6a1b      	ldr	r3, [r3, #32]
   d4dc4:	9301      	str	r3, [sp, #4]
   d4dc6:	bd08      	pop	{r3, pc}
   d4dc8:	00030264 	.word	0x00030264

000d4dcc <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d4dcc:	b508      	push	{r3, lr}
   d4dce:	4b02      	ldr	r3, [pc, #8]	; (d4dd8 <inet_ntohs+0xc>)
   d4dd0:	681b      	ldr	r3, [r3, #0]
   d4dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4dd4:	9301      	str	r3, [sp, #4]
   d4dd6:	bd08      	pop	{r3, pc}
   d4dd8:	00030264 	.word	0x00030264

000d4ddc <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d4ddc:	b508      	push	{r3, lr}
   d4dde:	4b02      	ldr	r3, [pc, #8]	; (d4de8 <inet_htons+0xc>)
   d4de0:	681b      	ldr	r3, [r3, #0]
   d4de2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4de4:	9301      	str	r3, [sp, #4]
   d4de6:	bd08      	pop	{r3, pc}
   d4de8:	00030264 	.word	0x00030264

000d4dec <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4dec:	b508      	push	{r3, lr}
   d4dee:	4b02      	ldr	r3, [pc, #8]	; (d4df8 <netdb_freeaddrinfo+0xc>)
   d4df0:	681b      	ldr	r3, [r3, #0]
   d4df2:	689b      	ldr	r3, [r3, #8]
   d4df4:	9301      	str	r3, [sp, #4]
   d4df6:	bd08      	pop	{r3, pc}
   d4df8:	00030268 	.word	0x00030268

000d4dfc <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4dfc:	b508      	push	{r3, lr}
   d4dfe:	4b02      	ldr	r3, [pc, #8]	; (d4e08 <netdb_getaddrinfo+0xc>)
   d4e00:	681b      	ldr	r3, [r3, #0]
   d4e02:	68db      	ldr	r3, [r3, #12]
   d4e04:	9301      	str	r3, [sp, #4]
   d4e06:	bd08      	pop	{r3, pc}
   d4e08:	00030268 	.word	0x00030268

000d4e0c <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d4e0c:	b508      	push	{r3, lr}
   d4e0e:	4b02      	ldr	r3, [pc, #8]	; (d4e18 <sock_bind+0xc>)
   d4e10:	681b      	ldr	r3, [r3, #0]
   d4e12:	685b      	ldr	r3, [r3, #4]
   d4e14:	9301      	str	r3, [sp, #4]
   d4e16:	bd08      	pop	{r3, pc}
   d4e18:	00030238 	.word	0x00030238

000d4e1c <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d4e1c:	b508      	push	{r3, lr}
   d4e1e:	4b02      	ldr	r3, [pc, #8]	; (d4e28 <sock_setsockopt+0xc>)
   d4e20:	681b      	ldr	r3, [r3, #0]
   d4e22:	699b      	ldr	r3, [r3, #24]
   d4e24:	9301      	str	r3, [sp, #4]
   d4e26:	bd08      	pop	{r3, pc}
   d4e28:	00030238 	.word	0x00030238

000d4e2c <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d4e2c:	b508      	push	{r3, lr}
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <sock_close+0xc>)
   d4e30:	681b      	ldr	r3, [r3, #0]
   d4e32:	69db      	ldr	r3, [r3, #28]
   d4e34:	9301      	str	r3, [sp, #4]
   d4e36:	bd08      	pop	{r3, pc}
   d4e38:	00030238 	.word	0x00030238

000d4e3c <sock_recvfrom>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d4e3c:	b508      	push	{r3, lr}
   d4e3e:	4b02      	ldr	r3, [pc, #8]	; (d4e48 <sock_recvfrom+0xc>)
   d4e40:	681b      	ldr	r3, [r3, #0]
   d4e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4e44:	9301      	str	r3, [sp, #4]
   d4e46:	bd08      	pop	{r3, pc}
   d4e48:	00030238 	.word	0x00030238

000d4e4c <sock_sendto>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d4e4c:	b508      	push	{r3, lr}
   d4e4e:	4b02      	ldr	r3, [pc, #8]	; (d4e58 <sock_sendto+0xc>)
   d4e50:	681b      	ldr	r3, [r3, #0]
   d4e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4e54:	9301      	str	r3, [sp, #4]
   d4e56:	bd08      	pop	{r3, pc}
   d4e58:	00030238 	.word	0x00030238

000d4e5c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d4e5c:	b508      	push	{r3, lr}
   d4e5e:	4b02      	ldr	r3, [pc, #8]	; (d4e68 <sock_socket+0xc>)
   d4e60:	681b      	ldr	r3, [r3, #0]
   d4e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d4e64:	9301      	str	r3, [sp, #4]
   d4e66:	bd08      	pop	{r3, pc}
   d4e68:	00030238 	.word	0x00030238

000d4e6c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4e6c:	b508      	push	{r3, lr}
   d4e6e:	4b02      	ldr	r3, [pc, #8]	; (d4e78 <HAL_SPI_Init+0xc>)
   d4e70:	681b      	ldr	r3, [r3, #0]
   d4e72:	69db      	ldr	r3, [r3, #28]
   d4e74:	9301      	str	r3, [sp, #4]
   d4e76:	bd08      	pop	{r3, pc}
   d4e78:	00030230 	.word	0x00030230

000d4e7c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d4e7c:	b508      	push	{r3, lr}
   d4e7e:	4b02      	ldr	r3, [pc, #8]	; (d4e88 <HAL_SPI_Is_Enabled+0xc>)
   d4e80:	681b      	ldr	r3, [r3, #0]
   d4e82:	6a1b      	ldr	r3, [r3, #32]
   d4e84:	9301      	str	r3, [sp, #4]
   d4e86:	bd08      	pop	{r3, pc}
   d4e88:	00030230 	.word	0x00030230

000d4e8c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4e8c:	b508      	push	{r3, lr}
   d4e8e:	4b02      	ldr	r3, [pc, #8]	; (d4e98 <HAL_USART_Init+0xc>)
   d4e90:	681b      	ldr	r3, [r3, #0]
   d4e92:	681b      	ldr	r3, [r3, #0]
   d4e94:	9301      	str	r3, [sp, #4]
   d4e96:	bd08      	pop	{r3, pc}
   d4e98:	0003023c 	.word	0x0003023c

000d4e9c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4e9c:	b508      	push	{r3, lr}
   d4e9e:	4b02      	ldr	r3, [pc, #8]	; (d4ea8 <HAL_USART_Write_Data+0xc>)
   d4ea0:	681b      	ldr	r3, [r3, #0]
   d4ea2:	68db      	ldr	r3, [r3, #12]
   d4ea4:	9301      	str	r3, [sp, #4]
   d4ea6:	bd08      	pop	{r3, pc}
   d4ea8:	0003023c 	.word	0x0003023c

000d4eac <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4eac:	b508      	push	{r3, lr}
   d4eae:	4b02      	ldr	r3, [pc, #8]	; (d4eb8 <HAL_USART_Available_Data+0xc>)
   d4eb0:	681b      	ldr	r3, [r3, #0]
   d4eb2:	691b      	ldr	r3, [r3, #16]
   d4eb4:	9301      	str	r3, [sp, #4]
   d4eb6:	bd08      	pop	{r3, pc}
   d4eb8:	0003023c 	.word	0x0003023c

000d4ebc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4ebc:	b508      	push	{r3, lr}
   d4ebe:	4b02      	ldr	r3, [pc, #8]	; (d4ec8 <HAL_USART_Read_Data+0xc>)
   d4ec0:	681b      	ldr	r3, [r3, #0]
   d4ec2:	695b      	ldr	r3, [r3, #20]
   d4ec4:	9301      	str	r3, [sp, #4]
   d4ec6:	bd08      	pop	{r3, pc}
   d4ec8:	0003023c 	.word	0x0003023c

000d4ecc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4ecc:	b508      	push	{r3, lr}
   d4ece:	4b02      	ldr	r3, [pc, #8]	; (d4ed8 <HAL_USART_Peek_Data+0xc>)
   d4ed0:	681b      	ldr	r3, [r3, #0]
   d4ed2:	699b      	ldr	r3, [r3, #24]
   d4ed4:	9301      	str	r3, [sp, #4]
   d4ed6:	bd08      	pop	{r3, pc}
   d4ed8:	0003023c 	.word	0x0003023c

000d4edc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4edc:	b508      	push	{r3, lr}
   d4ede:	4b02      	ldr	r3, [pc, #8]	; (d4ee8 <HAL_USART_Flush_Data+0xc>)
   d4ee0:	681b      	ldr	r3, [r3, #0]
   d4ee2:	69db      	ldr	r3, [r3, #28]
   d4ee4:	9301      	str	r3, [sp, #4]
   d4ee6:	bd08      	pop	{r3, pc}
   d4ee8:	0003023c 	.word	0x0003023c

000d4eec <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4eec:	b508      	push	{r3, lr}
   d4eee:	4b02      	ldr	r3, [pc, #8]	; (d4ef8 <HAL_USART_Is_Enabled+0xc>)
   d4ef0:	681b      	ldr	r3, [r3, #0]
   d4ef2:	6a1b      	ldr	r3, [r3, #32]
   d4ef4:	9301      	str	r3, [sp, #4]
   d4ef6:	bd08      	pop	{r3, pc}
   d4ef8:	0003023c 	.word	0x0003023c

000d4efc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4efc:	b508      	push	{r3, lr}
   d4efe:	4b02      	ldr	r3, [pc, #8]	; (d4f08 <HAL_USART_Available_Data_For_Write+0xc>)
   d4f00:	681b      	ldr	r3, [r3, #0]
   d4f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4f04:	9301      	str	r3, [sp, #4]
   d4f06:	bd08      	pop	{r3, pc}
   d4f08:	0003023c 	.word	0x0003023c

000d4f0c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4f0c:	b508      	push	{r3, lr}
   d4f0e:	4b02      	ldr	r3, [pc, #8]	; (d4f18 <HAL_USB_USART_Init+0xc>)
   d4f10:	681b      	ldr	r3, [r3, #0]
   d4f12:	681b      	ldr	r3, [r3, #0]
   d4f14:	9301      	str	r3, [sp, #4]
   d4f16:	bd08      	pop	{r3, pc}
   d4f18:	0003024c 	.word	0x0003024c

000d4f1c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4f1c:	b508      	push	{r3, lr}
   d4f1e:	4b02      	ldr	r3, [pc, #8]	; (d4f28 <HAL_USB_USART_Available_Data+0xc>)
   d4f20:	681b      	ldr	r3, [r3, #0]
   d4f22:	691b      	ldr	r3, [r3, #16]
   d4f24:	9301      	str	r3, [sp, #4]
   d4f26:	bd08      	pop	{r3, pc}
   d4f28:	0003024c 	.word	0x0003024c

000d4f2c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4f2c:	b508      	push	{r3, lr}
   d4f2e:	4b02      	ldr	r3, [pc, #8]	; (d4f38 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4f30:	681b      	ldr	r3, [r3, #0]
   d4f32:	695b      	ldr	r3, [r3, #20]
   d4f34:	9301      	str	r3, [sp, #4]
   d4f36:	bd08      	pop	{r3, pc}
   d4f38:	0003024c 	.word	0x0003024c

000d4f3c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f3c:	b508      	push	{r3, lr}
   d4f3e:	4b02      	ldr	r3, [pc, #8]	; (d4f48 <HAL_USB_USART_Receive_Data+0xc>)
   d4f40:	681b      	ldr	r3, [r3, #0]
   d4f42:	699b      	ldr	r3, [r3, #24]
   d4f44:	9301      	str	r3, [sp, #4]
   d4f46:	bd08      	pop	{r3, pc}
   d4f48:	0003024c 	.word	0x0003024c

000d4f4c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4f4c:	b508      	push	{r3, lr}
   d4f4e:	4b02      	ldr	r3, [pc, #8]	; (d4f58 <HAL_USB_USART_Send_Data+0xc>)
   d4f50:	681b      	ldr	r3, [r3, #0]
   d4f52:	69db      	ldr	r3, [r3, #28]
   d4f54:	9301      	str	r3, [sp, #4]
   d4f56:	bd08      	pop	{r3, pc}
   d4f58:	0003024c 	.word	0x0003024c

000d4f5c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4f5c:	b508      	push	{r3, lr}
   d4f5e:	4b02      	ldr	r3, [pc, #8]	; (d4f68 <HAL_USB_USART_Flush_Data+0xc>)
   d4f60:	681b      	ldr	r3, [r3, #0]
   d4f62:	6a1b      	ldr	r3, [r3, #32]
   d4f64:	9301      	str	r3, [sp, #4]
   d4f66:	bd08      	pop	{r3, pc}
   d4f68:	0003024c 	.word	0x0003024c

000d4f6c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4f6c:	b508      	push	{r3, lr}
   d4f6e:	4b02      	ldr	r3, [pc, #8]	; (d4f78 <set_system_mode+0xc>)
   d4f70:	681b      	ldr	r3, [r3, #0]
   d4f72:	685b      	ldr	r3, [r3, #4]
   d4f74:	9301      	str	r3, [sp, #4]
   d4f76:	bd08      	pop	{r3, pc}
   d4f78:	00030220 	.word	0x00030220

000d4f7c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d4f7c:	b508      	push	{r3, lr}
   d4f7e:	4b02      	ldr	r3, [pc, #8]	; (d4f88 <application_thread_current+0xc>)
   d4f80:	681b      	ldr	r3, [r3, #0]
   d4f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d4f84:	9301      	str	r3, [sp, #4]
   d4f86:	bd08      	pop	{r3, pc}
   d4f88:	00030220 	.word	0x00030220

000d4f8c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d4f8c:	b508      	push	{r3, lr}
   d4f8e:	4b02      	ldr	r3, [pc, #8]	; (d4f98 <application_thread_invoke+0xc>)
   d4f90:	681b      	ldr	r3, [r3, #0]
   d4f92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d4f94:	9301      	str	r3, [sp, #4]
   d4f96:	bd08      	pop	{r3, pc}
   d4f98:	00030220 	.word	0x00030220

000d4f9c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4f9c:	b508      	push	{r3, lr}
   d4f9e:	4b03      	ldr	r3, [pc, #12]	; (d4fac <system_ctrl_set_app_request_handler+0x10>)
   d4fa0:	681b      	ldr	r3, [r3, #0]
   d4fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4fa6:	9301      	str	r3, [sp, #4]
   d4fa8:	bd08      	pop	{r3, pc}
   d4faa:	0000      	.short	0x0000
   d4fac:	00030220 	.word	0x00030220

000d4fb0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4fb0:	b508      	push	{r3, lr}
   d4fb2:	4b03      	ldr	r3, [pc, #12]	; (d4fc0 <system_ctrl_set_result+0x10>)
   d4fb4:	681b      	ldr	r3, [r3, #0]
   d4fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4fba:	9301      	str	r3, [sp, #4]
   d4fbc:	bd08      	pop	{r3, pc}
   d4fbe:	0000      	.short	0x0000
   d4fc0:	00030220 	.word	0x00030220

000d4fc4 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d4fc4:	b508      	push	{r3, lr}
   d4fc6:	4b02      	ldr	r3, [pc, #8]	; (d4fd0 <spark_send_event+0xc>)
   d4fc8:	681b      	ldr	r3, [r3, #0]
   d4fca:	6a1b      	ldr	r3, [r3, #32]
   d4fcc:	9301      	str	r3, [sp, #4]
   d4fce:	bd08      	pop	{r3, pc}
   d4fd0:	00030244 	.word	0x00030244

000d4fd4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d4fd4:	b508      	push	{r3, lr}
   d4fd6:	4b02      	ldr	r3, [pc, #8]	; (d4fe0 <spark_subscribe+0xc>)
   d4fd8:	681b      	ldr	r3, [r3, #0]
   d4fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4fdc:	9301      	str	r3, [sp, #4]
   d4fde:	bd08      	pop	{r3, pc}
   d4fe0:	00030244 	.word	0x00030244

000d4fe4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4fe4:	b508      	push	{r3, lr}
   d4fe6:	4b02      	ldr	r3, [pc, #8]	; (d4ff0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4fe8:	681b      	ldr	r3, [r3, #0]
   d4fea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4fec:	9301      	str	r3, [sp, #4]
   d4fee:	bd08      	pop	{r3, pc}
   d4ff0:	00030244 	.word	0x00030244

000d4ff4 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4ff4:	b508      	push	{r3, lr}
   d4ff6:	4b02      	ldr	r3, [pc, #8]	; (d5000 <network_connect+0xc>)
   d4ff8:	681b      	ldr	r3, [r3, #0]
   d4ffa:	685b      	ldr	r3, [r3, #4]
   d4ffc:	9301      	str	r3, [sp, #4]
   d4ffe:	bd08      	pop	{r3, pc}
   d5000:	00030240 	.word	0x00030240

000d5004 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d5004:	b508      	push	{r3, lr}
   d5006:	4b02      	ldr	r3, [pc, #8]	; (d5010 <network_connecting+0xc>)
   d5008:	681b      	ldr	r3, [r3, #0]
   d500a:	689b      	ldr	r3, [r3, #8]
   d500c:	9301      	str	r3, [sp, #4]
   d500e:	bd08      	pop	{r3, pc}
   d5010:	00030240 	.word	0x00030240

000d5014 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d5014:	b508      	push	{r3, lr}
   d5016:	4b02      	ldr	r3, [pc, #8]	; (d5020 <network_disconnect+0xc>)
   d5018:	681b      	ldr	r3, [r3, #0]
   d501a:	68db      	ldr	r3, [r3, #12]
   d501c:	9301      	str	r3, [sp, #4]
   d501e:	bd08      	pop	{r3, pc}
   d5020:	00030240 	.word	0x00030240

000d5024 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d5024:	b508      	push	{r3, lr}
   d5026:	4b02      	ldr	r3, [pc, #8]	; (d5030 <network_ready+0xc>)
   d5028:	681b      	ldr	r3, [r3, #0]
   d502a:	691b      	ldr	r3, [r3, #16]
   d502c:	9301      	str	r3, [sp, #4]
   d502e:	bd08      	pop	{r3, pc}
   d5030:	00030240 	.word	0x00030240

000d5034 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d5034:	b508      	push	{r3, lr}
   d5036:	4b02      	ldr	r3, [pc, #8]	; (d5040 <network_on+0xc>)
   d5038:	681b      	ldr	r3, [r3, #0]
   d503a:	695b      	ldr	r3, [r3, #20]
   d503c:	9301      	str	r3, [sp, #4]
   d503e:	bd08      	pop	{r3, pc}
   d5040:	00030240 	.word	0x00030240

000d5044 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d5044:	b508      	push	{r3, lr}
   d5046:	4b02      	ldr	r3, [pc, #8]	; (d5050 <network_off+0xc>)
   d5048:	681b      	ldr	r3, [r3, #0]
   d504a:	699b      	ldr	r3, [r3, #24]
   d504c:	9301      	str	r3, [sp, #4]
   d504e:	bd08      	pop	{r3, pc}
   d5050:	00030240 	.word	0x00030240

000d5054 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d5054:	b508      	push	{r3, lr}
   d5056:	4b02      	ldr	r3, [pc, #8]	; (d5060 <network_listen+0xc>)
   d5058:	681b      	ldr	r3, [r3, #0]
   d505a:	69db      	ldr	r3, [r3, #28]
   d505c:	9301      	str	r3, [sp, #4]
   d505e:	bd08      	pop	{r3, pc}
   d5060:	00030240 	.word	0x00030240

000d5064 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d5064:	b508      	push	{r3, lr}
   d5066:	4b02      	ldr	r3, [pc, #8]	; (d5070 <network_listening+0xc>)
   d5068:	681b      	ldr	r3, [r3, #0]
   d506a:	6a1b      	ldr	r3, [r3, #32]
   d506c:	9301      	str	r3, [sp, #4]
   d506e:	bd08      	pop	{r3, pc}
   d5070:	00030240 	.word	0x00030240

000d5074 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d5074:	b508      	push	{r3, lr}
   d5076:	4b02      	ldr	r3, [pc, #8]	; (d5080 <network_set_listen_timeout+0xc>)
   d5078:	681b      	ldr	r3, [r3, #0]
   d507a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d507c:	9301      	str	r3, [sp, #4]
   d507e:	bd08      	pop	{r3, pc}
   d5080:	00030240 	.word	0x00030240

000d5084 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d5084:	b508      	push	{r3, lr}
   d5086:	4b02      	ldr	r3, [pc, #8]	; (d5090 <network_get_listen_timeout+0xc>)
   d5088:	681b      	ldr	r3, [r3, #0]
   d508a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d508c:	9301      	str	r3, [sp, #4]
   d508e:	bd08      	pop	{r3, pc}
   d5090:	00030240 	.word	0x00030240

000d5094 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d5094:	b508      	push	{r3, lr}
   d5096:	4b02      	ldr	r3, [pc, #8]	; (d50a0 <malloc+0xc>)
   d5098:	681b      	ldr	r3, [r3, #0]
   d509a:	681b      	ldr	r3, [r3, #0]
   d509c:	9301      	str	r3, [sp, #4]
   d509e:	bd08      	pop	{r3, pc}
   d50a0:	0003021c 	.word	0x0003021c

000d50a4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d50a4:	b508      	push	{r3, lr}
   d50a6:	4b02      	ldr	r3, [pc, #8]	; (d50b0 <free+0xc>)
   d50a8:	681b      	ldr	r3, [r3, #0]
   d50aa:	685b      	ldr	r3, [r3, #4]
   d50ac:	9301      	str	r3, [sp, #4]
   d50ae:	bd08      	pop	{r3, pc}
   d50b0:	0003021c 	.word	0x0003021c

000d50b4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d50b4:	b508      	push	{r3, lr}
   d50b6:	4b02      	ldr	r3, [pc, #8]	; (d50c0 <realloc+0xc>)
   d50b8:	681b      	ldr	r3, [r3, #0]
   d50ba:	689b      	ldr	r3, [r3, #8]
   d50bc:	9301      	str	r3, [sp, #4]
   d50be:	bd08      	pop	{r3, pc}
   d50c0:	0003021c 	.word	0x0003021c

000d50c4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d50c4:	b508      	push	{r3, lr}
   d50c6:	4b02      	ldr	r3, [pc, #8]	; (d50d0 <abort+0xc>)
   d50c8:	681b      	ldr	r3, [r3, #0]
   d50ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d50cc:	9301      	str	r3, [sp, #4]
   d50ce:	bd08      	pop	{r3, pc}
   d50d0:	0003021c 	.word	0x0003021c

000d50d4 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d50d4:	b508      	push	{r3, lr}
   d50d6:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <_malloc_r+0xc>)
   d50d8:	681b      	ldr	r3, [r3, #0]
   d50da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d50dc:	9301      	str	r3, [sp, #4]
   d50de:	bd08      	pop	{r3, pc}
   d50e0:	0003021c 	.word	0x0003021c

000d50e4 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d50e4:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d50e6:	6883      	ldr	r3, [r0, #8]
   d50e8:	4604      	mov	r4, r0
   d50ea:	b90b      	cbnz	r3, d50f0 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d50ec:	f001 fc31 	bl	d6952 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d50f0:	68c3      	ldr	r3, [r0, #12]
   d50f2:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d50f4:	68a3      	ldr	r3, [r4, #8]
   d50f6:	b11b      	cbz	r3, d5100 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d50f8:	2203      	movs	r2, #3
   d50fa:	4621      	mov	r1, r4
   d50fc:	4620      	mov	r0, r4
   d50fe:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5100:	4620      	mov	r0, r4
}
   d5102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d5106:	f7fe bfca 	b.w	d409e <_ZdlPv>

000d510a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d510a:	4770      	bx	lr

000d510c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d510c:	2000      	movs	r0, #0
   d510e:	4770      	bx	lr

000d5110 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d5110:	b510      	push	{r4, lr}
   d5112:	4604      	mov	r4, r0
   d5114:	f7fe ffc3 	bl	d409e <_ZdlPv>
   d5118:	4620      	mov	r0, r4
   d511a:	bd10      	pop	{r4, pc}

000d511c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d511c:	b508      	push	{r3, lr}
      { delete this; }
   d511e:	b108      	cbz	r0, d5124 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d5120:	f7ff fff6 	bl	d5110 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d5124:	bd08      	pop	{r3, pc}

000d5126 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d5126:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d5128:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d512a:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d512c:	b113      	cbz	r3, d5134 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d512e:	2203      	movs	r2, #3
   d5130:	4601      	mov	r1, r0
   d5132:	4798      	blx	r3
    }
   d5134:	4620      	mov	r0, r4
   d5136:	bd10      	pop	{r4, pc}

000d5138 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d5138:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d513a:	68c4      	ldr	r4, [r0, #12]
   d513c:	b1d4      	cbz	r4, d5174 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d513e:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d5140:	2b02      	cmp	r3, #2
   d5142:	d102      	bne.n	d514a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5144:	68e0      	ldr	r0, [r4, #12]
   d5146:	f7ff ffad 	bl	d50a4 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d514a:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d514c:	b12d      	cbz	r5, d515a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d514e:	4628      	mov	r0, r5
   d5150:	f7ff ffe9 	bl	d5126 <_ZNSt14_Function_baseD1Ev>
   d5154:	4628      	mov	r0, r5
   d5156:	f7fe ffa2 	bl	d409e <_ZdlPv>
   d515a:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d515c:	b12d      	cbz	r5, d516a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d515e:	4628      	mov	r0, r5
   d5160:	f7ff ffe1 	bl	d5126 <_ZNSt14_Function_baseD1Ev>
   d5164:	4628      	mov	r0, r5
   d5166:	f7fe ff9a 	bl	d409e <_ZdlPv>
   d516a:	4620      	mov	r0, r4
   d516c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d5170:	f7fe bf95 	b.w	d409e <_ZdlPv>
   d5174:	bd38      	pop	{r3, r4, r5, pc}

000d5176 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d5176:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d5178:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d517a:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d517c:	b17c      	cbz	r4, d519e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d517e:	6863      	ldr	r3, [r4, #4]
   d5180:	3b01      	subs	r3, #1
   d5182:	6063      	str	r3, [r4, #4]
   d5184:	b95b      	cbnz	r3, d519e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d5186:	6823      	ldr	r3, [r4, #0]
   d5188:	4620      	mov	r0, r4
   d518a:	689b      	ldr	r3, [r3, #8]
   d518c:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d518e:	68a3      	ldr	r3, [r4, #8]
   d5190:	3b01      	subs	r3, #1
   d5192:	60a3      	str	r3, [r4, #8]
   d5194:	b91b      	cbnz	r3, d519e <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d5196:	6823      	ldr	r3, [r4, #0]
   d5198:	4620      	mov	r0, r4
   d519a:	68db      	ldr	r3, [r3, #12]
   d519c:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d519e:	4628      	mov	r0, r5
   d51a0:	bd38      	pop	{r3, r4, r5, pc}

000d51a2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d51a2:	b513      	push	{r0, r1, r4, lr}
   d51a4:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d51a6:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d51aa:	2300      	movs	r3, #0
   d51ac:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d51ae:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d51b0:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d51b2:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d51b4:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d51b6:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d51b8:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d51ba:	f7ff ffdc 	bl	d5176 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51be:	4620      	mov	r0, r4
   d51c0:	b002      	add	sp, #8
   d51c2:	bd10      	pop	{r4, pc}

000d51c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d51c4:	680b      	ldr	r3, [r1, #0]
   d51c6:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d51c8:	b113      	cbz	r3, d51d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d51ca:	685a      	ldr	r2, [r3, #4]
   d51cc:	3201      	adds	r2, #1
   d51ce:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d51d0:	4770      	bx	lr

000d51d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d51d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d51d4:	460c      	mov	r4, r1
   d51d6:	ad02      	add	r5, sp, #8
   d51d8:	f854 3b04 	ldr.w	r3, [r4], #4
   d51dc:	f845 3d08 	str.w	r3, [r5, #-8]!
   d51e0:	4606      	mov	r6, r0
   d51e2:	460f      	mov	r7, r1
   d51e4:	a801      	add	r0, sp, #4
   d51e6:	4621      	mov	r1, r4
   d51e8:	f7ff ffec 	bl	d51c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d51ec:	4629      	mov	r1, r5
   d51ee:	4630      	mov	r0, r6
   d51f0:	f7ff ffd7 	bl	d51a2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d51f4:	a801      	add	r0, sp, #4
   d51f6:	f7ff ffbe 	bl	d5176 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d51fa:	4620      	mov	r0, r4
   d51fc:	f7ff ffbb 	bl	d5176 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d5200:	4638      	mov	r0, r7
   d5202:	f7fe ff4c 	bl	d409e <_ZdlPv>
        return p;
    }
   d5206:	4630      	mov	r0, r6
   d5208:	b003      	add	sp, #12
   d520a:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d520c <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d520c:	b513      	push	{r0, r1, r4, lr}
   d520e:	460b      	mov	r3, r1
   d5210:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5212:	c803      	ldmia	r0, {r0, r1}
   d5214:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d5218:	e893 0003 	ldmia.w	r3, {r0, r1}
   d521c:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d5220:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d5224:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d5228:	b002      	add	sp, #8
   d522a:	bd10      	pop	{r4, pc}

000d522c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d522c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d522e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5230:	b90a      	cbnz	r2, d5236 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d5232:	f001 fb8e 	bl	d6952 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5236:	68c3      	ldr	r3, [r0, #12]
    }
   d5238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d523c:	4718      	bx	r3

000d523e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d523e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5240:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5242:	f100 0110 	add.w	r1, r0, #16
   d5246:	f7ff fff1 	bl	d522c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d524a:	bd08      	pop	{r3, pc}

000d524c <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d524c:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d524e:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d5250:	b90a      	cbnz	r2, d5256 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d5252:	f001 fb7e 	bl	d6952 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d5256:	68c3      	ldr	r3, [r0, #12]
    }
   d5258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d525c:	4718      	bx	r3

000d525e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d525e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5260:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d5262:	f100 0110 	add.w	r1, r0, #16
   d5266:	f7ff fff1 	bl	d524c <_ZNKSt8functionIFvRKbEEclES1_>
   d526a:	bd08      	pop	{r3, pc}

000d526c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d526c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d526e:	2300      	movs	r3, #0
   d5270:	6083      	str	r3, [r0, #8]
   d5272:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d5274:	4604      	mov	r4, r0
   d5276:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d5278:	b12b      	cbz	r3, d5286 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d527a:	2202      	movs	r2, #2
   d527c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d527e:	68eb      	ldr	r3, [r5, #12]
   d5280:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5282:	68ab      	ldr	r3, [r5, #8]
   d5284:	60a3      	str	r3, [r4, #8]
	}
    }
   d5286:	4620      	mov	r0, r4
   d5288:	bd38      	pop	{r3, r4, r5, pc}
	...

000d528c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d528c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d5290:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5294:	b086      	sub	sp, #24
   d5296:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5298:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d529c:	808b      	strh	r3, [r1, #4]
   d529e:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d52a0:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d52a2:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d52a6:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d52a8:	f04f 0002 	mov.w	r0, #2
   d52ac:	e8d4 1f4f 	ldrexb	r1, [r4]
   d52b0:	4299      	cmp	r1, r3
   d52b2:	d103      	bne.n	d52bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d52b4:	e8c4 0f45 	strexb	r5, r0, [r4]
   d52b8:	2d00      	cmp	r5, #0
   d52ba:	d1f7      	bne.n	d52ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d52bc:	d002      	beq.n	d52c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d52be:	f88d 1000 	strb.w	r1, [sp]
   d52c2:	e06a      	b.n	d539a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d52c4:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d52c8:	bf1e      	ittt	ne
   d52ca:	60e7      	strne	r7, [r4, #12]
   d52cc:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d52ce:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d52d0:	2301      	movs	r3, #1
   d52d2:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d52d6:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d52d8:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d52da:	f104 0308 	add.w	r3, r4, #8
   d52de:	f3bf 8f5f 	dmb	sy
   d52e2:	e853 6f00 	ldrex	r6, [r3]
   d52e6:	e843 0200 	strex	r2, r0, [r3]
   d52ea:	2a00      	cmp	r2, #0
   d52ec:	d1f9      	bne.n	d52e2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d52ee:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d52f2:	2e00      	cmp	r6, #0
   d52f4:	d051      	beq.n	d539a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d52f6:	f7ff fe41 	bl	d4f7c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d52fa:	b120      	cbz	r0, d5306 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d52fc:	4629      	mov	r1, r5
   d52fe:	4630      	mov	r0, r6
   d5300:	f7ff ff94 	bl	d522c <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d5304:	e043      	b.n	d538e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5306:	4631      	mov	r1, r6
   d5308:	4668      	mov	r0, sp
   d530a:	f7ff ffaf 	bl	d526c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d530e:	68e0      	ldr	r0, [r4, #12]
   d5310:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5314:	b108      	cbz	r0, d531a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d5316:	f002 fab9 	bl	d788c <strdup>
   d531a:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d531c:	2010      	movs	r0, #16
   d531e:	f8ad 5014 	strh.w	r5, [sp, #20]
   d5322:	f7fe feb8 	bl	d4096 <_Znwj>
   d5326:	4605      	mov	r5, r0
   d5328:	b330      	cbz	r0, d5378 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d532a:	f04f 0800 	mov.w	r8, #0
   d532e:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5332:	2018      	movs	r0, #24
   d5334:	f7fe feaf 	bl	d4096 <_Znwj>
   d5338:	4604      	mov	r4, r0
   d533a:	b1c0      	cbz	r0, d536e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d533c:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d5340:	4601      	mov	r1, r0
   d5342:	4668      	mov	r0, sp
   d5344:	f7ff ff62 	bl	d520c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5348:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d534a:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d534c:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d534e:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d5350:	9202      	str	r2, [sp, #8]
   d5352:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d5354:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5356:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d535a:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d535c:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d5360:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d5364:	9b04      	ldr	r3, [sp, #16]
   d5366:	9203      	str	r2, [sp, #12]
   d5368:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d536a:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d536e:	4b0e      	ldr	r3, [pc, #56]	; (d53a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d5370:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d5372:	4b0e      	ldr	r3, [pc, #56]	; (d53ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d5374:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d5376:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5378:	9804      	ldr	r0, [sp, #16]
   d537a:	f7ff fe93 	bl	d50a4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d537e:	4668      	mov	r0, sp
   d5380:	f7ff fed1 	bl	d5126 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d5384:	2200      	movs	r2, #0
   d5386:	4629      	mov	r1, r5
   d5388:	4809      	ldr	r0, [pc, #36]	; (d53b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d538a:	f7ff fdff 	bl	d4f8c <application_thread_invoke>
   d538e:	4630      	mov	r0, r6
   d5390:	f7ff fec9 	bl	d5126 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d5394:	4630      	mov	r0, r6
   d5396:	f7fe fe82 	bl	d409e <_ZdlPv>
   d539a:	4638      	mov	r0, r7
   d539c:	f7ff fe82 	bl	d50a4 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d53a0:	b006      	add	sp, #24
   d53a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d53a6:	bf00      	nop
   d53a8:	000d523f 	.word	0x000d523f
   d53ac:	000d549d 	.word	0x000d549d
   d53b0:	000d50e5 	.word	0x000d50e5

000d53b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d53b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d53b8:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d53ba:	ad07      	add	r5, sp, #28
   d53bc:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d53c0:	4606      	mov	r6, r0
   d53c2:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d53c4:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d53c6:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d53c8:	460f      	mov	r7, r1
   d53ca:	4690      	mov	r8, r2
   d53cc:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d53d0:	f8c5 b004 	str.w	fp, [r5, #4]
   d53d4:	f8c5 b008 	str.w	fp, [r5, #8]
   d53d8:	9307      	str	r3, [sp, #28]
   d53da:	f7fe fe5c 	bl	d4096 <_Znwj>
   d53de:	4604      	mov	r4, r0
   d53e0:	b138      	cbz	r0, d53f2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d53e2:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d53e6:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d53ea:	f8c0 b004 	str.w	fp, [r0, #4]
   d53ee:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d53f2:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d53f4:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d53f6:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d53f8:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d53fa:	f7fe fe4c 	bl	d4096 <_Znwj>
   d53fe:	b128      	cbz	r0, d540c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d5400:	2301      	movs	r3, #1
   d5402:	6043      	str	r3, [r0, #4]
   d5404:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d5406:	4b23      	ldr	r3, [pc, #140]	; (d5494 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d5408:	6003      	str	r3, [r0, #0]
   d540a:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d540c:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d540e:	4b22      	ldr	r3, [pc, #136]	; (d5498 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d5410:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d5412:	2008      	movs	r0, #8
   d5414:	f7fe fe3f 	bl	d4096 <_Znwj>
   d5418:	4604      	mov	r4, r0
   d541a:	b128      	cbz	r0, d5428 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d541c:	9b03      	ldr	r3, [sp, #12]
   d541e:	f840 3b04 	str.w	r3, [r0], #4
   d5422:	a904      	add	r1, sp, #16
   d5424:	f7ff fece 	bl	d51c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5428:	9500      	str	r5, [sp, #0]
   d542a:	fa5f f38a 	uxtb.w	r3, sl
   d542e:	464a      	mov	r2, r9
   d5430:	4641      	mov	r1, r8
   d5432:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d5434:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d5436:	f7ff fdc5 	bl	d4fc4 <spark_send_event>
   d543a:	b9b8      	cbnz	r0, d546c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d543c:	9b03      	ldr	r3, [sp, #12]
   d543e:	785b      	ldrb	r3, [r3, #1]
   d5440:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d5444:	b993      	cbnz	r3, d546c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d5446:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d544a:	a905      	add	r1, sp, #20
   d544c:	a803      	add	r0, sp, #12
   d544e:	9205      	str	r2, [sp, #20]
   d5450:	f8ad 3018 	strh.w	r3, [sp, #24]
   d5454:	f7ff ff1a 	bl	d528c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d5458:	9805      	ldr	r0, [sp, #20]
   d545a:	f7ff fe23 	bl	d50a4 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d545e:	a805      	add	r0, sp, #20
   d5460:	9909      	ldr	r1, [sp, #36]	; 0x24
   d5462:	f7ff feb6 	bl	d51d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5466:	a806      	add	r0, sp, #24
   d5468:	f7ff fe85 	bl	d5176 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d546c:	9b03      	ldr	r3, [sp, #12]
   d546e:	9305      	str	r3, [sp, #20]
   d5470:	a904      	add	r1, sp, #16
   d5472:	a806      	add	r0, sp, #24
   d5474:	f7ff fea6 	bl	d51c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d5478:	a905      	add	r1, sp, #20
   d547a:	4630      	mov	r0, r6
   d547c:	f7ff fe91 	bl	d51a2 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d5480:	a806      	add	r0, sp, #24
   d5482:	f7ff fe78 	bl	d5176 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d5486:	a804      	add	r0, sp, #16
   d5488:	f7ff fe75 	bl	d5176 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d548c:	4630      	mov	r0, r6
   d548e:	b00b      	add	sp, #44	; 0x2c
   d5490:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5494:	000d7990 	.word	0x000d7990
   d5498:	000d5605 	.word	0x000d5605

000d549c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d549c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d549e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d54a0:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d54a2:	d006      	beq.n	d54b2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d54a4:	2a03      	cmp	r2, #3
   d54a6:	d017      	beq.n	d54d8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d54a8:	2a01      	cmp	r2, #1
   d54aa:	d120      	bne.n	d54ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d54ac:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d54ae:	6003      	str	r3, [r0, #0]
	      break;
   d54b0:	e01d      	b.n	d54ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d54b2:	2018      	movs	r0, #24
   d54b4:	680e      	ldr	r6, [r1, #0]
   d54b6:	f7fe fdee 	bl	d4096 <_Znwj>
   d54ba:	4605      	mov	r5, r0
   d54bc:	b150      	cbz	r0, d54d4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d54be:	4631      	mov	r1, r6
   d54c0:	f7ff fed4 	bl	d526c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d54c4:	6930      	ldr	r0, [r6, #16]
   d54c6:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d54ca:	b108      	cbz	r0, d54d0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d54cc:	f002 f9de 	bl	d788c <strdup>
   d54d0:	6128      	str	r0, [r5, #16]
   d54d2:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d54d4:	6025      	str	r5, [r4, #0]
   d54d6:	e00a      	b.n	d54ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d54d8:	6804      	ldr	r4, [r0, #0]
   d54da:	b144      	cbz	r4, d54ee <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d54dc:	6920      	ldr	r0, [r4, #16]
   d54de:	f7ff fde1 	bl	d50a4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d54e2:	4620      	mov	r0, r4
   d54e4:	f7ff fe1f 	bl	d5126 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d54e8:	4620      	mov	r0, r4
   d54ea:	f7fe fdd8 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d54ee:	2000      	movs	r0, #0
   d54f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d54f2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54f2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d54f4:	2300      	movs	r3, #0
   d54f6:	6083      	str	r3, [r0, #8]
   d54f8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d54fa:	4604      	mov	r4, r0
   d54fc:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d54fe:	b12b      	cbz	r3, d550c <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d5500:	2202      	movs	r2, #2
   d5502:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d5504:	68eb      	ldr	r3, [r5, #12]
   d5506:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d5508:	68ab      	ldr	r3, [r5, #8]
   d550a:	60a3      	str	r3, [r4, #8]
	}
    }
   d550c:	4620      	mov	r0, r4
   d550e:	bd38      	pop	{r3, r4, r5, pc}

000d5510 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d5510:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d5512:	b570      	push	{r4, r5, r6, lr}
   d5514:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d5516:	d006      	beq.n	d5526 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d5518:	2a03      	cmp	r2, #3
   d551a:	d011      	beq.n	d5540 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d551c:	2a01      	cmp	r2, #1
   d551e:	d117      	bne.n	d5550 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d5520:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d5522:	6003      	str	r3, [r0, #0]
	      break;
   d5524:	e014      	b.n	d5550 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d5526:	2014      	movs	r0, #20
   d5528:	680e      	ldr	r6, [r1, #0]
   d552a:	f7fe fdb4 	bl	d4096 <_Znwj>
   d552e:	4605      	mov	r5, r0
   d5530:	b120      	cbz	r0, d553c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d5532:	4631      	mov	r1, r6
   d5534:	f7ff ffdd 	bl	d54f2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d5538:	7c33      	ldrb	r3, [r6, #16]
   d553a:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d553c:	6025      	str	r5, [r4, #0]
   d553e:	e007      	b.n	d5550 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d5540:	6804      	ldr	r4, [r0, #0]
   d5542:	b12c      	cbz	r4, d5550 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5544:	4620      	mov	r0, r4
   d5546:	f7ff fdee 	bl	d5126 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d554a:	4620      	mov	r0, r4
   d554c:	f7fe fda7 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d5550:	2000      	movs	r0, #0
   d5552:	bd70      	pop	{r4, r5, r6, pc}

000d5554 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d5554:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d5556:	2300      	movs	r3, #0
   d5558:	b087      	sub	sp, #28
   d555a:	460c      	mov	r4, r1
   d555c:	f3bf 8f5f 	dmb	sy
   d5560:	e850 6f00 	ldrex	r6, [r0]
   d5564:	e840 3200 	strex	r2, r3, [r0]
   d5568:	2a00      	cmp	r2, #0
   d556a:	d1f9      	bne.n	d5560 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d556c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d5570:	2e00      	cmp	r6, #0
   d5572:	d03e      	beq.n	d55f2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d5574:	4618      	mov	r0, r3
   d5576:	f7ff fd01 	bl	d4f7c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d557a:	4607      	mov	r7, r0
   d557c:	b120      	cbz	r0, d5588 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d557e:	4621      	mov	r1, r4
   d5580:	4630      	mov	r0, r6
   d5582:	f7ff fe63 	bl	d524c <_ZNKSt8functionIFvRKbEEclES1_>
   d5586:	e02e      	b.n	d55e6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d5588:	4631      	mov	r1, r6
   d558a:	a801      	add	r0, sp, #4
   d558c:	f7ff ffb1 	bl	d54f2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d5590:	7823      	ldrb	r3, [r4, #0]
   d5592:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d5596:	2010      	movs	r0, #16
   d5598:	f7fe fd7d 	bl	d4096 <_Znwj>
   d559c:	4605      	mov	r5, r0
   d559e:	b1d0      	cbz	r0, d55d6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d55a0:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d55a2:	2014      	movs	r0, #20
   d55a4:	f7fe fd77 	bl	d4096 <_Znwj>
   d55a8:	4604      	mov	r4, r0
   d55aa:	b178      	cbz	r0, d55cc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d55ac:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d55ae:	4601      	mov	r1, r0
   d55b0:	a801      	add	r0, sp, #4
   d55b2:	f7ff fe2b 	bl	d520c <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55b6:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d55b8:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d55ba:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d55bc:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d55be:	9203      	str	r2, [sp, #12]
   d55c0:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d55c2:	60e3      	str	r3, [r4, #12]
   d55c4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d55c8:	9204      	str	r2, [sp, #16]
   d55ca:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d55cc:	4b0a      	ldr	r3, [pc, #40]	; (d55f8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d55ce:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d55d0:	4b0a      	ldr	r3, [pc, #40]	; (d55fc <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d55d2:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d55d4:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d55d6:	a801      	add	r0, sp, #4
   d55d8:	f7ff fda5 	bl	d5126 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d55dc:	2200      	movs	r2, #0
   d55de:	4629      	mov	r1, r5
   d55e0:	4807      	ldr	r0, [pc, #28]	; (d5600 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d55e2:	f7ff fcd3 	bl	d4f8c <application_thread_invoke>
   d55e6:	4630      	mov	r0, r6
   d55e8:	f7ff fd9d 	bl	d5126 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d55ec:	4630      	mov	r0, r6
   d55ee:	f7fe fd56 	bl	d409e <_ZdlPv>
        }
    }
   d55f2:	b007      	add	sp, #28
   d55f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d55f6:	bf00      	nop
   d55f8:	000d525f 	.word	0x000d525f
   d55fc:	000d5511 	.word	0x000d5511
   d5600:	000d50e5 	.word	0x000d50e5

000d5604 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d5604:	b530      	push	{r4, r5, lr}
   d5606:	b085      	sub	sp, #20
   d5608:	4604      	mov	r4, r0
   d560a:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d560c:	4668      	mov	r0, sp
   d560e:	4611      	mov	r1, r2
   d5610:	f7ff fddf 	bl	d51d2 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d5614:	b17c      	cbz	r4, d5636 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d5616:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d5618:	4628      	mov	r0, r5
   d561a:	b10d      	cbz	r5, d5620 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d561c:	f002 f936 	bl	d788c <strdup>
   d5620:	9002      	str	r0, [sp, #8]
   d5622:	a902      	add	r1, sp, #8
   d5624:	4668      	mov	r0, sp
   d5626:	f8ad 400c 	strh.w	r4, [sp, #12]
   d562a:	f7ff fe2f 	bl	d528c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d562e:	9802      	ldr	r0, [sp, #8]
   d5630:	f7ff fd38 	bl	d50a4 <free>
   d5634:	e01d      	b.n	d5672 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d5636:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d5638:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d563c:	f04f 0201 	mov.w	r2, #1
   d5640:	e8d0 3f4f 	ldrexb	r3, [r0]
   d5644:	42a3      	cmp	r3, r4
   d5646:	d103      	bne.n	d5650 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d5648:	e8c0 2f41 	strexb	r1, r2, [r0]
   d564c:	2900      	cmp	r1, #0
   d564e:	d1f7      	bne.n	d5640 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d5650:	d002      	beq.n	d5658 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d5652:	f88d 3008 	strb.w	r3, [sp, #8]
   d5656:	e00c      	b.n	d5672 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d5658:	f110 010c 	adds.w	r1, r0, #12
   d565c:	f04f 0301 	mov.w	r3, #1
   d5660:	bf18      	it	ne
   d5662:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d5664:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d5668:	3004      	adds	r0, #4
   d566a:	f800 3c03 	strb.w	r3, [r0, #-3]
   d566e:	f7ff ff71 	bl	d5554 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d5672:	a801      	add	r0, sp, #4
   d5674:	f7ff fd7f 	bl	d5176 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d5678:	b005      	add	sp, #20
   d567a:	bd30      	pop	{r4, r5, pc}

000d567c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d567c:	2200      	movs	r2, #0
   d567e:	4611      	mov	r1, r2
   d5680:	6840      	ldr	r0, [r0, #4]
   d5682:	f7ff bcef 	b.w	d5064 <network_listening>

000d5686 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5686:	2200      	movs	r2, #0
   d5688:	4611      	mov	r1, r2
   d568a:	6840      	ldr	r0, [r0, #4]
   d568c:	f7ff bcfa 	b.w	d5084 <network_get_listen_timeout>

000d5690 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5690:	2200      	movs	r2, #0
   d5692:	6840      	ldr	r0, [r0, #4]
   d5694:	f7ff bcee 	b.w	d5074 <network_set_listen_timeout>

000d5698 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d5698:	2200      	movs	r2, #0
   d569a:	f081 0101 	eor.w	r1, r1, #1
   d569e:	6840      	ldr	r0, [r0, #4]
   d56a0:	f7ff bcd8 	b.w	d5054 <network_listen>

000d56a4 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d56a4:	2300      	movs	r3, #0
   d56a6:	461a      	mov	r2, r3
   d56a8:	4619      	mov	r1, r3
   d56aa:	6840      	ldr	r0, [r0, #4]
   d56ac:	f7ff bcca 	b.w	d5044 <network_off>

000d56b0 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d56b0:	2300      	movs	r3, #0
   d56b2:	461a      	mov	r2, r3
   d56b4:	4619      	mov	r1, r3
   d56b6:	6840      	ldr	r0, [r0, #4]
   d56b8:	f7ff bcbc 	b.w	d5034 <network_on>

000d56bc <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d56bc:	2200      	movs	r2, #0
   d56be:	4611      	mov	r1, r2
   d56c0:	6840      	ldr	r0, [r0, #4]
   d56c2:	f7ff bcaf 	b.w	d5024 <network_ready>

000d56c6 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d56c6:	2200      	movs	r2, #0
   d56c8:	4611      	mov	r1, r2
   d56ca:	6840      	ldr	r0, [r0, #4]
   d56cc:	f7ff bc9a 	b.w	d5004 <network_connecting>

000d56d0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d56d0:	2200      	movs	r2, #0
   d56d2:	2102      	movs	r1, #2
   d56d4:	6840      	ldr	r0, [r0, #4]
   d56d6:	f7ff bc9d 	b.w	d5014 <network_disconnect>

000d56da <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d56da:	2300      	movs	r3, #0
   d56dc:	461a      	mov	r2, r3
   d56de:	6840      	ldr	r0, [r0, #4]
   d56e0:	f7ff bc88 	b.w	d4ff4 <network_connect>

000d56e4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d56e4:	4b02      	ldr	r3, [pc, #8]	; (d56f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d56e6:	2203      	movs	r2, #3
   d56e8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d56ea:	4a02      	ldr	r2, [pc, #8]	; (d56f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d56ec:	601a      	str	r2, [r3, #0]
   d56ee:	4770      	bx	lr
   d56f0:	2003e3dc 	.word	0x2003e3dc
   d56f4:	000d79ac 	.word	0x000d79ac

000d56f8 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d56f8:	4770      	bx	lr

000d56fa <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d56fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d56fc:	4606      	mov	r6, r0
   d56fe:	4615      	mov	r5, r2
   d5700:	460c      	mov	r4, r1
   d5702:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5704:	42bc      	cmp	r4, r7
   d5706:	d006      	beq.n	d5716 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5708:	6833      	ldr	r3, [r6, #0]
   d570a:	f814 1b01 	ldrb.w	r1, [r4], #1
   d570e:	689b      	ldr	r3, [r3, #8]
   d5710:	4630      	mov	r0, r6
   d5712:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d5714:	e7f6      	b.n	d5704 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d5716:	4628      	mov	r0, r5
   d5718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d571a <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d571a:	2200      	movs	r2, #0
   d571c:	7c00      	ldrb	r0, [r0, #16]
   d571e:	f7ff badd 	b.w	d4cdc <HAL_I2C_Write_Data>

000d5722 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d5722:	2100      	movs	r1, #0
   d5724:	7c00      	ldrb	r0, [r0, #16]
   d5726:	f7ff bae1 	b.w	d4cec <HAL_I2C_Available_Data>

000d572a <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d572a:	2100      	movs	r1, #0
   d572c:	7c00      	ldrb	r0, [r0, #16]
   d572e:	f7ff bae5 	b.w	d4cfc <HAL_I2C_Read_Data>

000d5732 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d5732:	2100      	movs	r1, #0
   d5734:	7c00      	ldrb	r0, [r0, #16]
   d5736:	f7ff bae9 	b.w	d4d0c <HAL_I2C_Peek_Data>

000d573a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d573a:	2100      	movs	r1, #0
   d573c:	7c00      	ldrb	r0, [r0, #16]
   d573e:	f7ff baed 	b.w	d4d1c <HAL_I2C_Flush_Data>

000d5742 <_ZN7TwoWireD0Ev>:
   d5742:	b510      	push	{r4, lr}
   d5744:	4604      	mov	r4, r0
   d5746:	f7fe fcaa 	bl	d409e <_ZdlPv>
   d574a:	4620      	mov	r0, r4
   d574c:	bd10      	pop	{r4, pc}
	...

000d5750 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5750:	b510      	push	{r4, lr}
   d5752:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d5754:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5758:	4608      	mov	r0, r1
   d575a:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d575c:	2100      	movs	r1, #0
   d575e:	4b04      	ldr	r3, [pc, #16]	; (d5770 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d5760:	7420      	strb	r0, [r4, #16]
   d5762:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d5764:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d5766:	f7ff fae9 	bl	d4d3c <HAL_I2C_Init>

}
   d576a:	4620      	mov	r0, r4
   d576c:	bd10      	pop	{r4, pc}
   d576e:	bf00      	nop
   d5770:	000d79e0 	.word	0x000d79e0

000d5774 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5774:	2100      	movs	r1, #0
   d5776:	7c00      	ldrb	r0, [r0, #16]
   d5778:	f7ff bad8 	b.w	d4d2c <HAL_I2C_Is_Enabled>

000d577c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d577c:	4770      	bx	lr

000d577e <_ZN9IPAddressD0Ev>:
   d577e:	b510      	push	{r4, lr}
   d5780:	4604      	mov	r4, r0
   d5782:	f7fe fc8c 	bl	d409e <_ZdlPv>
   d5786:	4620      	mov	r0, r4
   d5788:	bd10      	pop	{r4, pc}

000d578a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d578a:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d578c:	7d03      	ldrb	r3, [r0, #20]
   d578e:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5790:	b08d      	sub	sp, #52	; 0x34
   d5792:	460e      	mov	r6, r1
   d5794:	f100 0704 	add.w	r7, r0, #4
   d5798:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d579c:	d002      	beq.n	d57a4 <_ZNK9IPAddress7printToER5Print+0x1a>
   d579e:	f100 0508 	add.w	r5, r0, #8
   d57a2:	e018      	b.n	d57d6 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d57a4:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d57a6:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d57a8:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d57ac:	232f      	movs	r3, #47	; 0x2f
   d57ae:	462a      	mov	r2, r5
   d57b0:	200a      	movs	r0, #10
   d57b2:	f7ff faf3 	bl	d4d9c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d57b6:	4628      	mov	r0, r5
   d57b8:	f002 f883 	bl	d78c2 <strlen>
   d57bc:	6833      	ldr	r3, [r6, #0]
   d57be:	4602      	mov	r2, r0
   d57c0:	68db      	ldr	r3, [r3, #12]
   d57c2:	4629      	mov	r1, r5
   d57c4:	4630      	mov	r0, r6
   d57c6:	4798      	blx	r3
   d57c8:	e00f      	b.n	d57ea <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d57ca:	b124      	cbz	r4, d57d6 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d57cc:	212e      	movs	r1, #46	; 0x2e
   d57ce:	4630      	mov	r0, r6
   d57d0:	f000 fabe 	bl	d5d50 <_ZN5Print5printEc>
   d57d4:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d57d6:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d57da:	220a      	movs	r2, #10
   d57dc:	4630      	mov	r0, r6
   d57de:	f000 fae7 	bl	d5db0 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d57e2:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d57e4:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d57e6:	d1f0      	bne.n	d57ca <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d57e8:	4620      	mov	r0, r4
    }
    return n;
}
   d57ea:	b00d      	add	sp, #52	; 0x34
   d57ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d57f0 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d57f0:	b510      	push	{r4, lr}
   d57f2:	4b05      	ldr	r3, [pc, #20]	; (d5808 <_ZN9IPAddressC1Ev+0x18>)
   d57f4:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d57f6:	2211      	movs	r2, #17
   d57f8:	f840 3b04 	str.w	r3, [r0], #4
   d57fc:	2100      	movs	r1, #0
   d57fe:	f002 f80a 	bl	d7816 <memset>
{
    clear();
}
   d5802:	4620      	mov	r0, r4
   d5804:	bd10      	pop	{r4, pc}
   d5806:	bf00      	nop
   d5808:	000d7a08 	.word	0x000d7a08

000d580c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d580c:	4603      	mov	r3, r0
   d580e:	4a07      	ldr	r2, [pc, #28]	; (d582c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d5810:	b510      	push	{r4, lr}
   d5812:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d5816:	f101 0210 	add.w	r2, r1, #16
   d581a:	f851 4b04 	ldr.w	r4, [r1], #4
   d581e:	f843 4b04 	str.w	r4, [r3], #4
   d5822:	4291      	cmp	r1, r2
   d5824:	d1f9      	bne.n	d581a <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d5826:	780a      	ldrb	r2, [r1, #0]
   d5828:	701a      	strb	r2, [r3, #0]
}
   d582a:	bd10      	pop	{r4, pc}
   d582c:	000d7a08 	.word	0x000d7a08

000d5830 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d5830:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d5832:	2b04      	cmp	r3, #4
   d5834:	d101      	bne.n	d583a <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d5836:	6840      	ldr	r0, [r0, #4]
   d5838:	e008      	b.n	d584c <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d583a:	2b06      	cmp	r3, #6
   d583c:	d10a      	bne.n	d5854 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d583e:	6843      	ldr	r3, [r0, #4]
   d5840:	b153      	cbz	r3, d5858 <_ZNK9IPAddresscvbEv+0x28>
   d5842:	6883      	ldr	r3, [r0, #8]
   d5844:	b143      	cbz	r3, d5858 <_ZNK9IPAddresscvbEv+0x28>
   d5846:	68c3      	ldr	r3, [r0, #12]
   d5848:	b133      	cbz	r3, d5858 <_ZNK9IPAddresscvbEv+0x28>
   d584a:	6900      	ldr	r0, [r0, #16]
   d584c:	3000      	adds	r0, #0
   d584e:	bf18      	it	ne
   d5850:	2001      	movne	r0, #1
   d5852:	4770      	bx	lr
   d5854:	2000      	movs	r0, #0
   d5856:	4770      	bx	lr
   d5858:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d585a:	4770      	bx	lr

000d585c <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d585c:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d585e:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d5862:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d5866:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d586a:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d586e:	2304      	movs	r3, #4
   d5870:	6041      	str	r1, [r0, #4]
   d5872:	7503      	strb	r3, [r0, #20]
   d5874:	bd10      	pop	{r4, pc}

000d5876 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5876:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5878:	780d      	ldrb	r5, [r1, #0]
   d587a:	788b      	ldrb	r3, [r1, #2]
   d587c:	784a      	ldrb	r2, [r1, #1]
   d587e:	78c9      	ldrb	r1, [r1, #3]
   d5880:	9100      	str	r1, [sp, #0]
   d5882:	4629      	mov	r1, r5
   d5884:	f7ff ffea 	bl	d585c <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5888:	b003      	add	sp, #12
   d588a:	bd30      	pop	{r4, r5, pc}

000d588c <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d588c:	6800      	ldr	r0, [r0, #0]
   d588e:	f7ff b9ed 	b.w	d4c6c <os_mutex_recursive_lock>
	...

000d5894 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d5894:	4b01      	ldr	r3, [pc, #4]	; (d589c <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d5896:	4a02      	ldr	r2, [pc, #8]	; (d58a0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d5898:	601a      	str	r2, [r3, #0]
   d589a:	4770      	bx	lr
   d589c:	2003e3e4 	.word	0x2003e3e4
   d58a0:	000d7ac5 	.word	0x000d7ac5

000d58a4 <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d58a4:	2200      	movs	r2, #0
   d58a6:	4611      	mov	r1, r2
   d58a8:	6840      	ldr	r0, [r0, #4]
   d58aa:	f7ff bbdb 	b.w	d5064 <network_listening>

000d58ae <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d58ae:	2200      	movs	r2, #0
   d58b0:	4611      	mov	r1, r2
   d58b2:	6840      	ldr	r0, [r0, #4]
   d58b4:	f7ff bbe6 	b.w	d5084 <network_get_listen_timeout>

000d58b8 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d58b8:	2200      	movs	r2, #0
   d58ba:	6840      	ldr	r0, [r0, #4]
   d58bc:	f7ff bbda 	b.w	d5074 <network_set_listen_timeout>

000d58c0 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d58c0:	2200      	movs	r2, #0
   d58c2:	f081 0101 	eor.w	r1, r1, #1
   d58c6:	6840      	ldr	r0, [r0, #4]
   d58c8:	f7ff bbc4 	b.w	d5054 <network_listen>

000d58cc <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d58cc:	2300      	movs	r3, #0
   d58ce:	461a      	mov	r2, r3
   d58d0:	4619      	mov	r1, r3
   d58d2:	6840      	ldr	r0, [r0, #4]
   d58d4:	f7ff bbb6 	b.w	d5044 <network_off>

000d58d8 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d58d8:	2300      	movs	r3, #0
   d58da:	461a      	mov	r2, r3
   d58dc:	4619      	mov	r1, r3
   d58de:	6840      	ldr	r0, [r0, #4]
   d58e0:	f7ff bba8 	b.w	d5034 <network_on>

000d58e4 <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d58e4:	2200      	movs	r2, #0
   d58e6:	4611      	mov	r1, r2
   d58e8:	6840      	ldr	r0, [r0, #4]
   d58ea:	f7ff bb9b 	b.w	d5024 <network_ready>

000d58ee <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d58ee:	2200      	movs	r2, #0
   d58f0:	4611      	mov	r1, r2
   d58f2:	6840      	ldr	r0, [r0, #4]
   d58f4:	f7ff bb86 	b.w	d5004 <network_connecting>

000d58f8 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d58f8:	2200      	movs	r2, #0
   d58fa:	2102      	movs	r1, #2
   d58fc:	6840      	ldr	r0, [r0, #4]
   d58fe:	f7ff bb89 	b.w	d5014 <network_disconnect>

000d5902 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5902:	2300      	movs	r3, #0
   d5904:	461a      	mov	r2, r3
   d5906:	6840      	ldr	r0, [r0, #4]
   d5908:	f7ff bb74 	b.w	d4ff4 <network_connect>

000d590c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d590c:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d590e:	4605      	mov	r5, r0
   d5910:	b178      	cbz	r0, d5932 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5912:	6804      	ldr	r4, [r0, #0]
   d5914:	b144      	cbz	r4, d5928 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d5916:	68a3      	ldr	r3, [r4, #8]
   d5918:	b11b      	cbz	r3, d5922 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d591a:	2203      	movs	r2, #3
   d591c:	4621      	mov	r1, r4
   d591e:	4620      	mov	r0, r4
   d5920:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5922:	4620      	mov	r0, r4
   d5924:	f7fe fbbb 	bl	d409e <_ZdlPv>
   d5928:	4628      	mov	r0, r5
      }
   d592a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d592e:	f7fe bbb6 	b.w	d409e <_ZdlPv>
   d5932:	bd38      	pop	{r3, r4, r5, pc}

000d5934 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d5934:	b110      	cbz	r0, d593c <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d5936:	6803      	ldr	r3, [r0, #0]
   d5938:	685b      	ldr	r3, [r3, #4]
   d593a:	4718      	bx	r3
   d593c:	4770      	bx	lr

000d593e <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d593e:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5940:	6803      	ldr	r3, [r0, #0]
   d5942:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d5944:	b1bb      	cbz	r3, d5976 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d5946:	6858      	ldr	r0, [r3, #4]
   d5948:	f7ff f968 	bl	d4c1c <os_thread_is_current>
   d594c:	b978      	cbnz	r0, d596e <_ZN6ThreadD1Ev+0x30>
   d594e:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d5950:	7c5a      	ldrb	r2, [r3, #17]
   d5952:	b912      	cbnz	r2, d595a <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d5954:	6858      	ldr	r0, [r3, #4]
   d5956:	f7ff f969 	bl	d4c2c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d595a:	6823      	ldr	r3, [r4, #0]
   d595c:	6858      	ldr	r0, [r3, #4]
   d595e:	f7ff f96d 	bl	d4c3c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5962:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5964:	2300      	movs	r3, #0
   d5966:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5968:	b128      	cbz	r0, d5976 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d596a:	f7ff ffcf 	bl	d590c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d596e:	6820      	ldr	r0, [r4, #0]
   d5970:	b108      	cbz	r0, d5976 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5972:	f7ff ffcb 	bl	d590c <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d5976:	4620      	mov	r0, r4
   d5978:	bd10      	pop	{r4, pc}
	...

000d597c <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d597c:	b538      	push	{r3, r4, r5, lr}
   d597e:	4b0b      	ldr	r3, [pc, #44]	; (d59ac <_ZN5spark9MeshClassD1Ev+0x30>)
   d5980:	6003      	str	r3, [r0, #0]
   d5982:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5984:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d5988:	b108      	cbz	r0, d598e <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d598a:	f7fe fb8a 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d598e:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d5992:	b12d      	cbz	r5, d59a0 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5994:	4628      	mov	r0, r5
   d5996:	f7ff ffd2 	bl	d593e <_ZN6ThreadD1Ev>
   d599a:	4628      	mov	r0, r5
   d599c:	f7fe fb7f 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d59a0:	68a0      	ldr	r0, [r4, #8]
   d59a2:	b108      	cbz	r0, d59a8 <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d59a4:	f7ff ffc6 	bl	d5934 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d59a8:	4620      	mov	r0, r4
   d59aa:	bd38      	pop	{r3, r4, r5, pc}
   d59ac:	000d7af8 	.word	0x000d7af8

000d59b0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:
        }
        // else continue the for loop to try the next handler
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d59b0:	b530      	push	{r4, r5, lr}
   d59b2:	b08d      	sub	sp, #52	; 0x34
   d59b4:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d59b6:	2211      	movs	r2, #17
   d59b8:	2100      	movs	r1, #0
   d59ba:	a801      	add	r0, sp, #4
   d59bc:	f001 ff2b 	bl	d7816 <memset>
    addr.v = 6;
   d59c0:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d59c2:	aa01      	add	r2, sp, #4
   d59c4:	4909      	ldr	r1, [pc, #36]	; (d59ec <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d59c6:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d59ca:	200a      	movs	r0, #10
   d59cc:	f7ff f9ee 	bl	d4dac <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d59d0:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d59d2:	a901      	add	r1, sp, #4
   d59d4:	a806      	add	r0, sp, #24
   d59d6:	f7ff ff19 	bl	d580c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d59da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d59dc:	3404      	adds	r4, #4
   d59de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d59e0:	682b      	ldr	r3, [r5, #0]
   d59e2:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d59e4:	2000      	movs	r0, #0
   d59e6:	b00d      	add	sp, #52	; 0x34
   d59e8:	bd30      	pop	{r4, r5, pc}
   d59ea:	bf00      	nop
   d59ec:	000d7b24 	.word	0x000d7b24

000d59f0 <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d59f0:	b530      	push	{r4, r5, lr}
   d59f2:	4604      	mov	r4, r0
   d59f4:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d59f6:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d59fa:	f7ff ff47 	bl	d588c <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d59fe:	6823      	ldr	r3, [r4, #0]
   d5a00:	bb83      	cbnz	r3, d5a64 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d5a02:	204c      	movs	r0, #76	; 0x4c
   d5a04:	f7fe fb47 	bl	d4096 <_Znwj>
   d5a08:	4605      	mov	r5, r0
   d5a0a:	b108      	cbz	r0, d5a10 <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d5a0c:	f000 fd30 	bl	d6470 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5a10:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5a12:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5a14:	b108      	cbz	r0, d5a1a <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d5a16:	f7ff ff8d 	bl	d5934 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d5a1a:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d5a1c:	b320      	cbz	r0, d5a68 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d5a1e:	2200      	movs	r2, #0
   d5a20:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d5a24:	f000 fd53 	bl	d64ce <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d5a28:	a908      	add	r1, sp, #32
   d5a2a:	2500      	movs	r5, #0
   d5a2c:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d5a30:	4811      	ldr	r0, [pc, #68]	; (d5a78 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d5a32:	f7ff f98b 	bl	d4d4c <if_name_to_index>
   d5a36:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d5a38:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d5a3c:	6803      	ldr	r3, [r0, #0]
   d5a3e:	f249 0169 	movw	r1, #36969	; 0x9069
   d5a42:	6a1b      	ldr	r3, [r3, #32]
   d5a44:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d5a46:	a802      	add	r0, sp, #8
   d5a48:	f7ff fed2 	bl	d57f0 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d5a4c:	a802      	add	r0, sp, #8
   d5a4e:	f7ff ffaf 	bl	d59b0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d5a52:	2800      	cmp	r0, #0
   d5a54:	db04      	blt.n	d5a60 <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d5a56:	a902      	add	r1, sp, #8
   d5a58:	6820      	ldr	r0, [r4, #0]
   d5a5a:	f000 fda2 	bl	d65a2 <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d5a5e:	e004      	b.n	d5a6a <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d5a60:	4605      	mov	r5, r0
   d5a62:	e002      	b.n	d5a6a <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d5a64:	2500      	movs	r5, #0
   d5a66:	e000      	b.n	d5a6a <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d5a68:	4d04      	ldr	r5, [pc, #16]	; (d5a7c <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d5a6a:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d5a6e:	f7ff f905 	bl	d4c7c <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d5a72:	4628      	mov	r0, r5
   d5a74:	b009      	add	sp, #36	; 0x24
   d5a76:	bd30      	pop	{r4, r5, pc}
   d5a78:	000d7b31 	.word	0x000d7b31
   d5a7c:	fffffefc 	.word	0xfffffefc

000d5a80 <_ZN5spark11MeshPublish7publishEPKcS2_>:
        udp.reset();
    }
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::publish(const char* topic, const char* data) {
   d5a80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5a84:	4605      	mov	r5, r0
   d5a86:	b08c      	sub	sp, #48	; 0x30
   d5a88:	4616      	mov	r6, r2
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);
   d5a8a:	460f      	mov	r7, r1
   d5a8c:	b109      	cbz	r1, d5a92 <_ZN5spark11MeshPublish7publishEPKcS2_+0x12>
   d5a8e:	780b      	ldrb	r3, [r1, #0]
   d5a90:	b90b      	cbnz	r3, d5a96 <_ZN5spark11MeshPublish7publishEPKcS2_+0x16>
   d5a92:	4c35      	ldr	r4, [pc, #212]	; (d5b68 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe8>)
   d5a94:	e064      	b.n	d5b60 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
   d5a96:	4608      	mov	r0, r1
   d5a98:	f001 ff13 	bl	d78c2 <strlen>
   d5a9c:	4680      	mov	r8, r0
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d5a9e:	2e00      	cmp	r6, #0
   d5aa0:	d05c      	beq.n	d5b5c <_ZN5spark11MeshPublish7publishEPKcS2_+0xdc>
   d5aa2:	4630      	mov	r0, r6
   d5aa4:	f001 ff0d 	bl	d78c2 <strlen>
   d5aa8:	1c44      	adds	r4, r0, #1

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d5aaa:	f108 0302 	add.w	r3, r8, #2
   d5aae:	4423      	add	r3, r4
   d5ab0:	f5b3 6f9a 	cmp.w	r3, #1232	; 0x4d0
   d5ab4:	d84f      	bhi.n	d5b56 <_ZN5spark11MeshPublish7publishEPKcS2_+0xd6>
   d5ab6:	f505 70e0 	add.w	r0, r5, #448	; 0x1c0
   d5aba:	f7ff fee7 	bl	d588c <_ZN14RecursiveMutex4lockEv>
            SYSTEM_ERROR_TOO_LARGE);

    std::lock_guard<RecursiveMutex> lk(mutex_);
    CHECK(initialize_udp());
   d5abe:	4628      	mov	r0, r5
   d5ac0:	f7ff ff96 	bl	d59f0 <_ZN5spark11MeshPublish14initialize_udpEv>
   d5ac4:	2800      	cmp	r0, #0
   d5ac6:	db40      	blt.n	d5b4a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    IPAddress mcastAddr;
   d5ac8:	4668      	mov	r0, sp
   d5aca:	f7ff fe91 	bl	d57f0 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d5ace:	4668      	mov	r0, sp
   d5ad0:	f7ff ff6e 	bl	d59b0 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d5ad4:	2800      	cmp	r0, #0
   d5ad6:	db38      	blt.n	d5b4a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
   d5ad8:	f8d5 a000 	ldr.w	sl, [r5]

    CHECK(udp->beginPacket(mcastAddr, PORT));
   d5adc:	f8da 3000 	ldr.w	r3, [sl]
   d5ae0:	f10d 0c04 	add.w	ip, sp, #4
   d5ae4:	f8d3 9038 	ldr.w	r9, [r3, #56]	; 0x38
   d5ae8:	4b20      	ldr	r3, [pc, #128]	; (d5b6c <_ZN5spark11MeshPublish7publishEPKcS2_+0xec>)
   d5aea:	9306      	str	r3, [sp, #24]
   d5aec:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d5af0:	f10d 0e1c 	add.w	lr, sp, #28
   d5af4:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   d5af8:	f8dc 3000 	ldr.w	r3, [ip]
   d5afc:	f88e 3000 	strb.w	r3, [lr]
   d5b00:	f249 0269 	movw	r2, #36969	; 0x9069
   d5b04:	a906      	add	r1, sp, #24
   d5b06:	4650      	mov	r0, sl
   d5b08:	47c8      	blx	r9
   d5b0a:	2800      	cmp	r0, #0
   d5b0c:	db1d      	blt.n	d5b4a <_ZN5spark11MeshPublish7publishEPKcS2_+0xca>
    uint8_t version = 0;
   d5b0e:	2300      	movs	r3, #0
   d5b10:	6828      	ldr	r0, [r5, #0]
   d5b12:	f88d 3018 	strb.w	r3, [sp, #24]
    udp->write(&version, 1);
   d5b16:	6803      	ldr	r3, [r0, #0]
   d5b18:	2201      	movs	r2, #1
   d5b1a:	68db      	ldr	r3, [r3, #12]
   d5b1c:	a906      	add	r1, sp, #24
   d5b1e:	4798      	blx	r3
   d5b20:	6828      	ldr	r0, [r5, #0]
    udp->write((const uint8_t*)topic, topicLen);
   d5b22:	6803      	ldr	r3, [r0, #0]
   d5b24:	f108 0201 	add.w	r2, r8, #1
   d5b28:	68db      	ldr	r3, [r3, #12]
   d5b2a:	4639      	mov	r1, r7
   d5b2c:	4798      	blx	r3
    if (dataLen > 0) {
   d5b2e:	b12c      	cbz	r4, d5b3c <_ZN5spark11MeshPublish7publishEPKcS2_+0xbc>
   d5b30:	6828      	ldr	r0, [r5, #0]
        udp->write((const uint8_t*)data, dataLen);
   d5b32:	6803      	ldr	r3, [r0, #0]
   d5b34:	4622      	mov	r2, r4
   d5b36:	68db      	ldr	r3, [r3, #12]
   d5b38:	4631      	mov	r1, r6
   d5b3a:	4798      	blx	r3
   d5b3c:	6828      	ldr	r0, [r5, #0]
    }
    CHECK(udp->endPacket());
   d5b3e:	6803      	ldr	r3, [r0, #0]
   d5b40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d5b42:	4798      	blx	r3
   d5b44:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   d5b48:	e000      	b.n	d5b4c <_ZN5spark11MeshPublish7publishEPKcS2_+0xcc>
   d5b4a:	4604      	mov	r4, r0
   d5b4c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d5b50:	f7ff f894 	bl	d4c7c <os_mutex_recursive_unlock>
   d5b54:	e004      	b.n	d5b60 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;

    // topic + data + version should fit within MAX_PACKET_LEN
    CHECK_TRUE(topicLen + dataLen + sizeof(uint8_t) <= MAX_PACKET_LEN,
   d5b56:	f06f 04bd 	mvn.w	r4, #189	; 0xbd
   d5b5a:	e001      	b.n	d5b60 <_ZN5spark11MeshPublish7publishEPKcS2_+0xe0>
    // Topic should be defined
    CHECK_TRUE(topic && (strlen(topic) > 0), SYSTEM_ERROR_INVALID_ARGUMENT);

    // Including null-terminator
    const size_t topicLen = strlen(topic) + 1;
    const size_t dataLen = data ? strlen(data) + 1 : 0;
   d5b5c:	4634      	mov	r4, r6
   d5b5e:	e7a4      	b.n	d5aaa <_ZN5spark11MeshPublish7publishEPKcS2_+0x2a>
    if (dataLen > 0) {
        udp->write((const uint8_t*)data, dataLen);
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}
   d5b60:	4620      	mov	r0, r4
   d5b62:	b00c      	add	sp, #48	; 0x30
   d5b64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d5b68:	fffffef2 	.word	0xfffffef2
   d5b6c:	000d7a08 	.word	0x000d7a08

000d5b70 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5b70:	b538      	push	{r3, r4, r5, lr}
   d5b72:	4c0d      	ldr	r4, [pc, #52]	; (d5ba8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d5b74:	4b0d      	ldr	r3, [pc, #52]	; (d5bac <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d5b76:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5b78:	2500      	movs	r5, #0
   d5b7a:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5b7c:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5b80:	6063      	str	r3, [r4, #4]
   d5b82:	60a5      	str	r5, [r4, #8]
   d5b84:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5b88:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5b8c:	f7ff f866 	bl	d4c5c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5b90:	4b07      	ldr	r3, [pc, #28]	; (d5bb0 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d5b92:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d5b96:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5b98:	4620      	mov	r0, r4
   d5b9a:	4a06      	ldr	r2, [pc, #24]	; (d5bb4 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d5b9c:	4906      	ldr	r1, [pc, #24]	; (d5bb8 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d5b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d5ba2:	f000 bed1 	b.w	d6948 <__aeabi_atexit>
   d5ba6:	bf00      	nop
   d5ba8:	2003e3e8 	.word	0x2003e3e8
   d5bac:	000d7b5c 	.word	0x000d7b5c
   d5bb0:	000d7af8 	.word	0x000d7af8
   d5bb4:	2003e1f8 	.word	0x2003e1f8
   d5bb8:	000d597d 	.word	0x000d597d

000d5bbc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5bbc:	2300      	movs	r3, #0
   d5bbe:	461a      	mov	r2, r3
   d5bc0:	6840      	ldr	r0, [r0, #4]
   d5bc2:	f7ff ba17 	b.w	d4ff4 <network_connect>

000d5bc6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d5bc6:	2200      	movs	r2, #0
   d5bc8:	2102      	movs	r1, #2
   d5bca:	6840      	ldr	r0, [r0, #4]
   d5bcc:	f7ff ba22 	b.w	d5014 <network_disconnect>

000d5bd0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5bd0:	2200      	movs	r2, #0
   d5bd2:	4611      	mov	r1, r2
   d5bd4:	6840      	ldr	r0, [r0, #4]
   d5bd6:	f7ff ba15 	b.w	d5004 <network_connecting>

000d5bda <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5bda:	2200      	movs	r2, #0
   d5bdc:	4611      	mov	r1, r2
   d5bde:	6840      	ldr	r0, [r0, #4]
   d5be0:	f7ff ba20 	b.w	d5024 <network_ready>

000d5be4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d5be4:	2300      	movs	r3, #0
   d5be6:	461a      	mov	r2, r3
   d5be8:	4619      	mov	r1, r3
   d5bea:	6840      	ldr	r0, [r0, #4]
   d5bec:	f7ff ba22 	b.w	d5034 <network_on>

000d5bf0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5bf0:	2300      	movs	r3, #0
   d5bf2:	461a      	mov	r2, r3
   d5bf4:	4619      	mov	r1, r3
   d5bf6:	6840      	ldr	r0, [r0, #4]
   d5bf8:	f7ff ba24 	b.w	d5044 <network_off>

000d5bfc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5bfc:	2200      	movs	r2, #0
   d5bfe:	f081 0101 	eor.w	r1, r1, #1
   d5c02:	6840      	ldr	r0, [r0, #4]
   d5c04:	f7ff ba26 	b.w	d5054 <network_listen>

000d5c08 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5c08:	2200      	movs	r2, #0
   d5c0a:	6840      	ldr	r0, [r0, #4]
   d5c0c:	f7ff ba32 	b.w	d5074 <network_set_listen_timeout>

000d5c10 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5c10:	2200      	movs	r2, #0
   d5c12:	4611      	mov	r1, r2
   d5c14:	6840      	ldr	r0, [r0, #4]
   d5c16:	f7ff ba35 	b.w	d5084 <network_get_listen_timeout>

000d5c1a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5c1a:	2200      	movs	r2, #0
   d5c1c:	4611      	mov	r1, r2
   d5c1e:	6840      	ldr	r0, [r0, #4]
   d5c20:	f7ff ba20 	b.w	d5064 <network_listening>

000d5c24 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d5c24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5c28:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d5c2a:	b095      	sub	sp, #84	; 0x54
   d5c2c:	4616      	mov	r6, r2
   d5c2e:	460d      	mov	r5, r1
   d5c30:	4607      	mov	r7, r0
    IPAddress addr;
   d5c32:	f7ff fddd 	bl	d57f0 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d5c36:	4621      	mov	r1, r4
   d5c38:	2220      	movs	r2, #32
   d5c3a:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d5c3c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d5c3e:	f001 fdea 	bl	d7816 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d5c42:	2340      	movs	r3, #64	; 0x40
   d5c44:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d5c46:	4621      	mov	r1, r4
   d5c48:	466b      	mov	r3, sp
   d5c4a:	aa0c      	add	r2, sp, #48	; 0x30
   d5c4c:	4630      	mov	r0, r6
   d5c4e:	f7ff f8d5 	bl	d4dfc <netdb_getaddrinfo>
    if (!r) {
   d5c52:	4604      	mov	r4, r0
   d5c54:	2800      	cmp	r0, #0
   d5c56:	d144      	bne.n	d5ce2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5c58:	4602      	mov	r2, r0
   d5c5a:	2101      	movs	r1, #1
   d5c5c:	6868      	ldr	r0, [r5, #4]
   d5c5e:	f7ff f9e1 	bl	d5024 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c62:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d5c64:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c66:	4622      	mov	r2, r4
   d5c68:	6868      	ldr	r0, [r5, #4]
   d5c6a:	f7ff f9db 	bl	d5024 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c6e:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d5c70:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d5c72:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5c74:	2e00      	cmp	r6, #0
   d5c76:	d034      	beq.n	d5ce2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d5c78:	2900      	cmp	r1, #0
   d5c7a:	d132      	bne.n	d5ce2 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d5c7c:	6873      	ldr	r3, [r6, #4]
   d5c7e:	2b02      	cmp	r3, #2
   d5c80:	d002      	beq.n	d5c88 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d5c82:	2b0a      	cmp	r3, #10
   d5c84:	d009      	beq.n	d5c9a <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d5c86:	e02a      	b.n	d5cde <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5c88:	f1b8 0f00 	cmp.w	r8, #0
   d5c8c:	d027      	beq.n	d5cde <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5c8e:	6971      	ldr	r1, [r6, #20]
   d5c90:	4638      	mov	r0, r7
   d5c92:	3104      	adds	r1, #4
   d5c94:	f7ff fdef 	bl	d5876 <_ZN9IPAddressaSEPKh>
   d5c98:	e020      	b.n	d5cdc <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5c9a:	f1b9 0f00 	cmp.w	r9, #0
   d5c9e:	d01e      	beq.n	d5cde <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5ca0:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d5ca2:	2211      	movs	r2, #17
   d5ca4:	a801      	add	r0, sp, #4
   d5ca6:	f001 fdb6 	bl	d7816 <memset>
                    a.v = 6;
   d5caa:	2306      	movs	r3, #6
   d5cac:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5cb0:	ad01      	add	r5, sp, #4
   d5cb2:	f104 0308 	add.w	r3, r4, #8
   d5cb6:	3418      	adds	r4, #24
   d5cb8:	6818      	ldr	r0, [r3, #0]
   d5cba:	6859      	ldr	r1, [r3, #4]
   d5cbc:	462a      	mov	r2, r5
   d5cbe:	c203      	stmia	r2!, {r0, r1}
   d5cc0:	3308      	adds	r3, #8
   d5cc2:	42a3      	cmp	r3, r4
   d5cc4:	4615      	mov	r5, r2
   d5cc6:	d1f7      	bne.n	d5cb8 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5cc8:	a901      	add	r1, sp, #4
   d5cca:	a806      	add	r0, sp, #24
   d5ccc:	ad07      	add	r5, sp, #28
   d5cce:	f7ff fd9d 	bl	d580c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d5cd2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d5cd4:	1d3c      	adds	r4, r7, #4
   d5cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5cd8:	682b      	ldr	r3, [r5, #0]
   d5cda:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5cdc:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5cde:	69f6      	ldr	r6, [r6, #28]
   d5ce0:	e7c8      	b.n	d5c74 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d5ce2:	9800      	ldr	r0, [sp, #0]
   d5ce4:	f7ff f882 	bl	d4dec <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5ce8:	4638      	mov	r0, r7
   d5cea:	b015      	add	sp, #84	; 0x54
   d5cec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5cf0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5cf0:	4b02      	ldr	r3, [pc, #8]	; (d5cfc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d5cf2:	4a03      	ldr	r2, [pc, #12]	; (d5d00 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d5cf4:	601a      	str	r2, [r3, #0]
   d5cf6:	2200      	movs	r2, #0
   d5cf8:	605a      	str	r2, [r3, #4]
   d5cfa:	4770      	bx	lr
   d5cfc:	2003e5b8 	.word	0x2003e5b8
   d5d00:	000d7b5c 	.word	0x000d7b5c

000d5d04 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d5d04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5d06:	4606      	mov	r6, r0
   d5d08:	460d      	mov	r5, r1
   d5d0a:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d5d0c:	2400      	movs	r4, #0
  while (size--) {
   d5d0e:	42bd      	cmp	r5, r7
   d5d10:	d00c      	beq.n	d5d2c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d5d12:	6833      	ldr	r3, [r6, #0]
   d5d14:	f815 1b01 	ldrb.w	r1, [r5], #1
   d5d18:	689b      	ldr	r3, [r3, #8]
   d5d1a:	4630      	mov	r0, r6
   d5d1c:	4798      	blx	r3
     if (chunk>=0)
   d5d1e:	2800      	cmp	r0, #0
   d5d20:	db01      	blt.n	d5d26 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d5d22:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d5d24:	e7f3      	b.n	d5d0e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d5d26:	2c00      	cmp	r4, #0
   d5d28:	bf08      	it	eq
   d5d2a:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d5d2c:	4620      	mov	r0, r4
   d5d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5d30 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d5d30:	b570      	push	{r4, r5, r6, lr}
   d5d32:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d5d34:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d5d36:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d5d38:	b149      	cbz	r1, d5d4e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d5d3a:	f001 fdc2 	bl	d78c2 <strlen>
   d5d3e:	682b      	ldr	r3, [r5, #0]
   d5d40:	4602      	mov	r2, r0
   d5d42:	4621      	mov	r1, r4
   d5d44:	4628      	mov	r0, r5
   d5d46:	68db      	ldr	r3, [r3, #12]
    }
   d5d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5d4c:	4718      	bx	r3
    }
   d5d4e:	bd70      	pop	{r4, r5, r6, pc}

000d5d50 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d5d50:	6803      	ldr	r3, [r0, #0]
   d5d52:	689b      	ldr	r3, [r3, #8]
   d5d54:	4718      	bx	r3

000d5d56 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d5d56:	b530      	push	{r4, r5, lr}
   d5d58:	b08b      	sub	sp, #44	; 0x2c
   d5d5a:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5d5c:	2100      	movs	r1, #0
   d5d5e:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d5d62:	2a01      	cmp	r2, #1
   d5d64:	bf98      	it	ls
   d5d66:	220a      	movls	r2, #10
   d5d68:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d5d6c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d5d70:	fb05 3312 	mls	r3, r5, r2, r3
   d5d74:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5d78:	2b09      	cmp	r3, #9
   d5d7a:	bf94      	ite	ls
   d5d7c:	3330      	addls	r3, #48	; 0x30
   d5d7e:	3337      	addhi	r3, #55	; 0x37
   d5d80:	b2db      	uxtb	r3, r3
   d5d82:	4621      	mov	r1, r4
   d5d84:	f804 3901 	strb.w	r3, [r4], #-1
   d5d88:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5d8a:	2d00      	cmp	r5, #0
   d5d8c:	d1ee      	bne.n	d5d6c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5d8e:	f7ff ffcf 	bl	d5d30 <_ZN5Print5writeEPKc>
}
   d5d92:	b00b      	add	sp, #44	; 0x2c
   d5d94:	bd30      	pop	{r4, r5, pc}

000d5d96 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d5d96:	b410      	push	{r4}
  if (base == 0) return write(n);
   d5d98:	b92a      	cbnz	r2, d5da6 <_ZN5Print5printEmi+0x10>
   d5d9a:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d5d9c:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d5da0:	689b      	ldr	r3, [r3, #8]
   d5da2:	b2c9      	uxtb	r1, r1
   d5da4:	4718      	bx	r3
  else return printNumber(n, base);
   d5da6:	b2d2      	uxtb	r2, r2
}
   d5da8:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d5dac:	f7ff bfd3 	b.w	d5d56 <_ZN5Print11printNumberEmh>

000d5db0 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d5db0:	f7ff bff1 	b.w	d5d96 <_ZN5Print5printEmi>

000d5db4 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5db4:	b510      	push	{r4, lr}
   d5db6:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5db8:	f7ff f9b5 	bl	d5126 <_ZNSt14_Function_baseD1Ev>
   d5dbc:	4620      	mov	r0, r4
   d5dbe:	bd10      	pop	{r4, pc}

000d5dc0 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d5dc0:	4803      	ldr	r0, [pc, #12]	; (d5dd0 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d5dc2:	4a04      	ldr	r2, [pc, #16]	; (d5dd4 <_GLOBAL__sub_I_RGB+0x14>)
   d5dc4:	4904      	ldr	r1, [pc, #16]	; (d5dd8 <_GLOBAL__sub_I_RGB+0x18>)
   d5dc6:	2300      	movs	r3, #0
   d5dc8:	6083      	str	r3, [r0, #8]
   d5dca:	f000 bdbd 	b.w	d6948 <__aeabi_atexit>
   d5dce:	bf00      	nop
   d5dd0:	2003e5c0 	.word	0x2003e5c0
   d5dd4:	2003e1f8 	.word	0x2003e1f8
   d5dd8:	000d5db5 	.word	0x000d5db5

000d5ddc <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d5ddc:	4770      	bx	lr

000d5dde <_ZN8SPIClassD0Ev>:
   d5dde:	b510      	push	{r4, lr}
   d5de0:	4604      	mov	r4, r0
   d5de2:	f7fe f95c 	bl	d409e <_ZdlPv>
   d5de6:	4620      	mov	r0, r4
   d5de8:	bd10      	pop	{r4, pc}
	...

000d5dec <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d5dec:	b570      	push	{r4, r5, r6, lr}
   d5dee:	4b08      	ldr	r3, [pc, #32]	; (d5e10 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d5df0:	6003      	str	r3, [r0, #0]
   d5df2:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d5df4:	2500      	movs	r5, #0
   d5df6:	460e      	mov	r6, r1
   d5df8:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d5dfc:	f7fe ff26 	bl	d4c4c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d5e00:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d5e02:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d5e04:	f7ff f832 	bl	d4e6c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d5e08:	60a5      	str	r5, [r4, #8]
}
   d5e0a:	4620      	mov	r0, r4
   d5e0c:	bd70      	pop	{r4, r5, r6, pc}
   d5e0e:	bf00      	nop
   d5e10:	000d7b90 	.word	0x000d7b90

000d5e14 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d5e14:	7900      	ldrb	r0, [r0, #4]
   d5e16:	f7ff b831 	b.w	d4e7c <HAL_SPI_Is_Enabled>

000d5e1a <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d5e1a:	b510      	push	{r4, lr}
   d5e1c:	4604      	mov	r4, r0
{
	free(buffer);
   d5e1e:	6800      	ldr	r0, [r0, #0]
   d5e20:	f7ff f940 	bl	d50a4 <free>
}
   d5e24:	4620      	mov	r0, r4
   d5e26:	bd10      	pop	{r4, pc}

000d5e28 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d5e28:	b510      	push	{r4, lr}
   d5e2a:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d5e2c:	6800      	ldr	r0, [r0, #0]
   d5e2e:	b108      	cbz	r0, d5e34 <_ZN6String10invalidateEv+0xc>
   d5e30:	f7ff f938 	bl	d50a4 <free>
	buffer = NULL;
   d5e34:	2300      	movs	r3, #0
   d5e36:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d5e38:	60a3      	str	r3, [r4, #8]
   d5e3a:	6063      	str	r3, [r4, #4]
   d5e3c:	bd10      	pop	{r4, pc}

000d5e3e <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d5e3e:	b538      	push	{r3, r4, r5, lr}
   d5e40:	4604      	mov	r4, r0
   d5e42:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d5e44:	6800      	ldr	r0, [r0, #0]
   d5e46:	3101      	adds	r1, #1
   d5e48:	f7ff f934 	bl	d50b4 <realloc>
	if (newbuffer) {
   d5e4c:	b110      	cbz	r0, d5e54 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d5e4e:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d5e52:	2001      	movs	r0, #1
	}
	return 0;
}
   d5e54:	bd38      	pop	{r3, r4, r5, pc}

000d5e56 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5e56:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d5e58:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d5e5a:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d5e5c:	b113      	cbz	r3, d5e64 <_ZN6String7reserveEj+0xe>
   d5e5e:	6843      	ldr	r3, [r0, #4]
   d5e60:	428b      	cmp	r3, r1
   d5e62:	d207      	bcs.n	d5e74 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d5e64:	4620      	mov	r0, r4
   d5e66:	f7ff ffea 	bl	d5e3e <_ZN6String12changeBufferEj>
   d5e6a:	b120      	cbz	r0, d5e76 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d5e6c:	68a3      	ldr	r3, [r4, #8]
   d5e6e:	b90b      	cbnz	r3, d5e74 <_ZN6String7reserveEj+0x1e>
   d5e70:	6822      	ldr	r2, [r4, #0]
   d5e72:	7013      	strb	r3, [r2, #0]
   d5e74:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d5e76:	bd10      	pop	{r4, pc}

000d5e78 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5e78:	b570      	push	{r4, r5, r6, lr}
   d5e7a:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d5e7c:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d5e7e:	4604      	mov	r4, r0
   d5e80:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d5e82:	f7ff ffe8 	bl	d5e56 <_ZN6String7reserveEj>
   d5e86:	b918      	cbnz	r0, d5e90 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d5e88:	4620      	mov	r0, r4
   d5e8a:	f7ff ffcd 	bl	d5e28 <_ZN6String10invalidateEv>
		return *this;
   d5e8e:	e009      	b.n	d5ea4 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d5e90:	462a      	mov	r2, r5
   d5e92:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d5e94:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d5e96:	6820      	ldr	r0, [r4, #0]
   d5e98:	f001 fcb2 	bl	d7800 <memcpy>
	buffer[len] = 0;
   d5e9c:	6822      	ldr	r2, [r4, #0]
   d5e9e:	68a3      	ldr	r3, [r4, #8]
   d5ea0:	2100      	movs	r1, #0
   d5ea2:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d5ea4:	4620      	mov	r0, r4
   d5ea6:	bd70      	pop	{r4, r5, r6, pc}

000d5ea8 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5ea8:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5eaa:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d5eac:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d5eae:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d5eb0:	6043      	str	r3, [r0, #4]
	len = 0;
   d5eb2:	6083      	str	r3, [r0, #8]
	flags = 0;
   d5eb4:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d5eb6:	460d      	mov	r5, r1
   d5eb8:	b139      	cbz	r1, d5eca <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d5eba:	4608      	mov	r0, r1
   d5ebc:	f001 fd01 	bl	d78c2 <strlen>
   d5ec0:	4629      	mov	r1, r5
   d5ec2:	4602      	mov	r2, r0
   d5ec4:	4620      	mov	r0, r4
   d5ec6:	f7ff ffd7 	bl	d5e78 <_ZN6String4copyEPKcj>
}
   d5eca:	4620      	mov	r0, r4
   d5ecc:	bd38      	pop	{r3, r4, r5, pc}

000d5ece <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d5ece:	b570      	push	{r4, r5, r6, lr}
   d5ed0:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d5ed2:	b19a      	cbz	r2, d5efc <_ZNK6String8getBytesEPhjj+0x2e>
   d5ed4:	b191      	cbz	r1, d5efc <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d5ed6:	6885      	ldr	r5, [r0, #8]
   d5ed8:	429d      	cmp	r5, r3
   d5eda:	d802      	bhi.n	d5ee2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d5edc:	2300      	movs	r3, #0
   d5ede:	700b      	strb	r3, [r1, #0]
		return;
   d5ee0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d5ee2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d5ee4:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d5ee6:	6801      	ldr	r1, [r0, #0]
   d5ee8:	42ac      	cmp	r4, r5
   d5eea:	bf28      	it	cs
   d5eec:	462c      	movcs	r4, r5
   d5eee:	4419      	add	r1, r3
   d5ef0:	4622      	mov	r2, r4
   d5ef2:	4630      	mov	r0, r6
   d5ef4:	f001 fced 	bl	d78d2 <strncpy>
	buf[n] = 0;
   d5ef8:	2300      	movs	r3, #0
   d5efa:	5533      	strb	r3, [r6, r4]
   d5efc:	bd70      	pop	{r4, r5, r6, pc}
	...

000d5f00 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d5f00:	4b04      	ldr	r3, [pc, #16]	; (d5f14 <_GLOBAL__sub_I_System+0x14>)
   d5f02:	2000      	movs	r0, #0
   d5f04:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d5f08:	7018      	strb	r0, [r3, #0]
   d5f0a:	8058      	strh	r0, [r3, #2]
   d5f0c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d5f0e:	f7ff b82d 	b.w	d4f6c <set_system_mode>
   d5f12:	bf00      	nop
   d5f14:	2003e5d0 	.word	0x2003e5d0

000d5f18 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d5f18:	4b02      	ldr	r3, [pc, #8]	; (d5f24 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d5f1a:	681a      	ldr	r2, [r3, #0]
   d5f1c:	4b02      	ldr	r3, [pc, #8]	; (d5f28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d5f1e:	601a      	str	r2, [r3, #0]
   d5f20:	4770      	bx	lr
   d5f22:	bf00      	nop
   d5f24:	2003e190 	.word	0x2003e190
   d5f28:	2003e5d8 	.word	0x2003e5d8

000d5f2c <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d5f2c:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5f2e:	6804      	ldr	r4, [r0, #0]
   d5f30:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d5f32:	46a4      	mov	ip, r4
    }
   d5f34:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d5f38:	4760      	bx	ip

000d5f3a <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d5f3a:	6803      	ldr	r3, [r0, #0]
   d5f3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d5f3e:	4718      	bx	r3

000d5f40 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d5f40:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d5f42:	4770      	bx	lr

000d5f44 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d5f44:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d5f46:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d5f48:	1a10      	subs	r0, r2, r0
   d5f4a:	4770      	bx	lr

000d5f4c <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5f4c:	b513      	push	{r0, r1, r4, lr}
   d5f4e:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d5f50:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d5f52:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d5f56:	68d4      	ldr	r4, [r2, #12]
   d5f58:	4619      	mov	r1, r3
   d5f5a:	2201      	movs	r2, #1
   d5f5c:	47a0      	blx	r4
}
   d5f5e:	b002      	add	sp, #8
   d5f60:	bd10      	pop	{r4, pc}

000d5f62 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d5f62:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d5f64:	6803      	ldr	r3, [r0, #0]
   d5f66:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d5f68:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d5f6a:	4798      	blx	r3
   d5f6c:	b128      	cbz	r0, d5f7a <_ZN3UDP4readEv+0x18>
   d5f6e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5f70:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5f72:	1c59      	adds	r1, r3, #1
   d5f74:	86e1      	strh	r1, [r4, #54]	; 0x36
   d5f76:	5cd0      	ldrb	r0, [r2, r3]
   d5f78:	bd10      	pop	{r4, pc}
   d5f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5f7e:	bd10      	pop	{r4, pc}

000d5f80 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5f80:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d5f82:	6803      	ldr	r3, [r0, #0]
   d5f84:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d5f86:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d5f88:	4798      	blx	r3
   d5f8a:	b118      	cbz	r0, d5f94 <_ZN3UDP4peekEv+0x14>
   d5f8c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d5f8e:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d5f90:	5cd0      	ldrb	r0, [r2, r3]
   d5f92:	bd10      	pop	{r4, pc}
   d5f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d5f98:	bd10      	pop	{r4, pc}

000d5f9a <_ZN3UDP5flushEv>:

void UDP::flush() {
   d5f9a:	4770      	bx	lr

000d5f9c <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d5f9c:	b410      	push	{r4}
   d5f9e:	4603      	mov	r3, r0
   d5fa0:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5fa2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d5fa4:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d5fa6:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d5fa8:	6803      	ldr	r3, [r0, #0]
   d5faa:	1a52      	subs	r2, r2, r1
   d5fac:	68db      	ldr	r3, [r3, #12]
   d5fae:	4421      	add	r1, r4
}
   d5fb0:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d5fb4:	4718      	bx	r3

000d5fb6 <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d5fb6:	f1a0 0010 	sub.w	r0, r0, #16
   d5fba:	f7ff bfef 	b.w	d5f9c <_ZNK3UDP7printToER5Print>

000d5fbe <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5fbe:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d5fc0:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5fc2:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5fc4:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d5fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d5fc8:	4604      	mov	r4, r0
   d5fca:	460f      	mov	r7, r1
   d5fcc:	4615      	mov	r5, r2
    stop();
   d5fce:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d5fd0:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5fd2:	4632      	mov	r2, r6
   d5fd4:	2100      	movs	r1, #0
   d5fd6:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d5fd8:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d5fda:	f001 fc1c 	bl	d7816 <memset>
    saddr.sin6_len = sizeof(saddr);
   d5fde:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5fe2:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d5fe4:	260a      	movs	r6, #10
   d5fe6:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d5fea:	f7fe fef7 	bl	d4ddc <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5fee:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d5ff0:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5ff4:	2102      	movs	r1, #2
   d5ff6:	4630      	mov	r0, r6
   d5ff8:	f7fe ff30 	bl	d4e5c <sock_socket>

    if (_sock < 0) {
   d5ffc:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d5ffe:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d6000:	db24      	blt.n	d604c <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d6002:	2204      	movs	r2, #4
   d6004:	9200      	str	r2, [sp, #0]
   d6006:	ab02      	add	r3, sp, #8
   d6008:	f640 71ff 	movw	r1, #4095	; 0xfff
   d600c:	f7fe ff06 	bl	d4e1c <sock_setsockopt>
   d6010:	b9e0      	cbnz	r0, d604c <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d6012:	b195      	cbz	r5, d603a <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d6014:	9003      	str	r0, [sp, #12]
   d6016:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d601a:	a903      	add	r1, sp, #12
   d601c:	b2e8      	uxtb	r0, r5
   d601e:	f7fe fe9d 	bl	d4d5c <if_index_to_name>
   d6022:	b998      	cbnz	r0, d604c <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d6024:	2306      	movs	r3, #6
   d6026:	9300      	str	r3, [sp, #0]
   d6028:	f241 020b 	movw	r2, #4107	; 0x100b
   d602c:	ab03      	add	r3, sp, #12
   d602e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d6032:	6960      	ldr	r0, [r4, #20]
   d6034:	f7fe fef2 	bl	d4e1c <sock_setsockopt>
   d6038:	b940      	cbnz	r0, d604c <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d603a:	221c      	movs	r2, #28
   d603c:	a905      	add	r1, sp, #20
   d603e:	6960      	ldr	r0, [r4, #20]
   d6040:	f7fe fee4 	bl	d4e0c <sock_bind>
   d6044:	b910      	cbnz	r0, d604c <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d6046:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d6048:	2001      	movs	r0, #1
   d604a:	e004      	b.n	d6056 <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d604c:	6823      	ldr	r3, [r4, #0]
   d604e:	4620      	mov	r0, r4
   d6050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6052:	4798      	blx	r3
   d6054:	2000      	movs	r0, #0
    }
    return bound;
}
   d6056:	b00d      	add	sp, #52	; 0x34
   d6058:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d605a <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d605a:	b510      	push	{r4, lr}
   d605c:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d605e:	6940      	ldr	r0, [r0, #20]
   d6060:	2800      	cmp	r0, #0
   d6062:	db01      	blt.n	d6068 <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d6064:	f7fe fee2 	bl	d4e2c <sock_close>
    }

    _sock = -1;
   d6068:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d606c:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d606e:	2300      	movs	r3, #0
   d6070:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d6072:	8723      	strh	r3, [r4, #56]	; 0x38
   d6074:	bd10      	pop	{r4, pc}

000d6076 <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d6076:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d6078:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d607a:	4605      	mov	r5, r0
   d607c:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d607e:	b113      	cbz	r3, d6086 <_ZN3UDP5writeEPKhj+0x10>
   d6080:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d6082:	1a24      	subs	r4, r4, r0
   d6084:	e000      	b.n	d6088 <_ZN3UDP5writeEPKhj+0x12>
   d6086:	461c      	mov	r4, r3
   d6088:	4294      	cmp	r4, r2
   d608a:	bf28      	it	cs
   d608c:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d608e:	4622      	mov	r2, r4
   d6090:	4418      	add	r0, r3
   d6092:	f001 fbb5 	bl	d7800 <memcpy>
    _offset += size;
   d6096:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d6098:	4423      	add	r3, r4
   d609a:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d609c:	4620      	mov	r0, r4
   d609e:	bd38      	pop	{r3, r4, r5, pc}

000d60a0 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d60a0:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d60a2:	6803      	ldr	r3, [r0, #0]
   d60a4:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d60a6:	4604      	mov	r4, r0
   d60a8:	460e      	mov	r6, r1
   d60aa:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d60ac:	4798      	blx	r3
   d60ae:	b188      	cbz	r0, d60d4 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d60b0:	6823      	ldr	r3, [r4, #0]
   d60b2:	4620      	mov	r0, r4
   d60b4:	691b      	ldr	r3, [r3, #16]
   d60b6:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d60b8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d60ba:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d60bc:	4285      	cmp	r5, r0
   d60be:	bfa8      	it	ge
   d60c0:	4605      	movge	r5, r0
   d60c2:	4419      	add	r1, r3
   d60c4:	462a      	mov	r2, r5
   d60c6:	4630      	mov	r0, r6
   d60c8:	f001 fb9a 	bl	d7800 <memcpy>
        _offset += read;
   d60cc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d60ce:	442b      	add	r3, r5
   d60d0:	86e3      	strh	r3, [r4, #54]	; 0x36
   d60d2:	e001      	b.n	d60d8 <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d60d4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d60d8:	4628      	mov	r0, r5
   d60da:	bd70      	pop	{r4, r5, r6, pc}

000d60dc <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d60dc:	b570      	push	{r4, r5, r6, lr}
   d60de:	4604      	mov	r4, r0
   d60e0:	4b05      	ldr	r3, [pc, #20]	; (d60f8 <_ZN3UDP8remoteIPEv+0x1c>)
   d60e2:	f844 3b04 	str.w	r3, [r4], #4
   d60e6:	f101 0520 	add.w	r5, r1, #32
   d60ea:	4606      	mov	r6, r0
   d60ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d60ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d60f0:	682b      	ldr	r3, [r5, #0]
   d60f2:	7023      	strb	r3, [r4, #0]
   d60f4:	4630      	mov	r0, r6
   d60f6:	bd70      	pop	{r4, r5, r6, pc}
   d60f8:	000d7a08 	.word	0x000d7a08

000d60fc <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d60fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   d60fe:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6100:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d6102:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d6104:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d6106:	4a0a      	ldr	r2, [pc, #40]	; (d6130 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d6108:	9202      	str	r2, [sp, #8]
   d610a:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d610c:	468e      	mov	lr, r1
   d610e:	4606      	mov	r6, r0
   d6110:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6112:	ac03      	add	r4, sp, #12
   d6114:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6116:	682b      	ldr	r3, [r5, #0]
   d6118:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d611a:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d611e:	9300      	str	r3, [sp, #0]
   d6120:	4662      	mov	r2, ip
   d6122:	ab02      	add	r3, sp, #8
   d6124:	4671      	mov	r1, lr
   d6126:	4630      	mov	r0, r6
   d6128:	47b8      	blx	r7
    }
   d612a:	b009      	add	sp, #36	; 0x24
   d612c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d612e:	bf00      	nop
   d6130:	000d7a08 	.word	0x000d7a08

000d6134 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6134:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6136:	6803      	ldr	r3, [r0, #0]
   d6138:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d613c:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d613e:	4b0d      	ldr	r3, [pc, #52]	; (d6174 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d6140:	b089      	sub	sp, #36	; 0x24
   d6142:	f100 0620 	add.w	r6, r0, #32
   d6146:	4604      	mov	r4, r0
   d6148:	9302      	str	r3, [sp, #8]
   d614a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d614c:	ad03      	add	r5, sp, #12
   d614e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d6150:	6833      	ldr	r3, [r6, #0]
   d6152:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6154:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d6156:	9300      	str	r3, [sp, #0]
   d6158:	4672      	mov	r2, lr
   d615a:	ab02      	add	r3, sp, #8
   d615c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d615e:	4620      	mov	r0, r4
   d6160:	47b8      	blx	r7
    flush(); // wait for send to complete
   d6162:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d6164:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d6166:	69db      	ldr	r3, [r3, #28]
   d6168:	4620      	mov	r0, r4
   d616a:	4798      	blx	r3
    return result;
}
   d616c:	4628      	mov	r0, r5
   d616e:	b009      	add	sp, #36	; 0x24
   d6170:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6172:	bf00      	nop
   d6174:	000d7a08 	.word	0x000d7a08

000d6178 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d6178:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d617a:	7843      	ldrb	r3, [r0, #1]
   d617c:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d617e:	b08d      	sub	sp, #52	; 0x34
   d6180:	4605      	mov	r5, r0
   d6182:	460c      	mov	r4, r1
   d6184:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d6186:	d101      	bne.n	d618c <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d6188:	1d01      	adds	r1, r0, #4
   d618a:	e033      	b.n	d61f4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d618c:	2b0a      	cmp	r3, #10
   d618e:	d135      	bne.n	d61fc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d6190:	2211      	movs	r2, #17
   d6192:	2100      	movs	r1, #0
   d6194:	a801      	add	r0, sp, #4
   d6196:	f001 fb3e 	bl	d7816 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d619a:	68ab      	ldr	r3, [r5, #8]
   d619c:	b943      	cbnz	r3, d61b0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d619e:	68eb      	ldr	r3, [r5, #12]
   d61a0:	b933      	cbnz	r3, d61b0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d61a2:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d61a6:	692e      	ldr	r6, [r5, #16]
   d61a8:	f7fe fe08 	bl	d4dbc <inet_htonl>
   d61ac:	4286      	cmp	r6, r0
   d61ae:	d01f      	beq.n	d61f0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d61b0:	f105 0308 	add.w	r3, r5, #8
   d61b4:	ae01      	add	r6, sp, #4
   d61b6:	f105 0e18 	add.w	lr, r5, #24
   d61ba:	6818      	ldr	r0, [r3, #0]
   d61bc:	6859      	ldr	r1, [r3, #4]
   d61be:	4632      	mov	r2, r6
   d61c0:	c203      	stmia	r2!, {r0, r1}
   d61c2:	3308      	adds	r3, #8
   d61c4:	4573      	cmp	r3, lr
   d61c6:	4616      	mov	r6, r2
   d61c8:	d1f7      	bne.n	d61ba <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d61ca:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d61cc:	a901      	add	r1, sp, #4
   d61ce:	a806      	add	r0, sp, #24
   d61d0:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d61d2:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d61d6:	f7ff fb19 	bl	d580c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d61da:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d61dc:	3404      	adds	r4, #4
   d61de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d61e0:	6833      	ldr	r3, [r6, #0]
   d61e2:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d61e4:	b157      	cbz	r7, d61fc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d61e6:	8868      	ldrh	r0, [r5, #2]
   d61e8:	f7fe fdf0 	bl	d4dcc <inet_ntohs>
   d61ec:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d61ee:	e005      	b.n	d61fc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d61f0:	f105 0114 	add.w	r1, r5, #20
   d61f4:	4620      	mov	r0, r4
   d61f6:	f7ff fb3e 	bl	d5876 <_ZN9IPAddressaSEPKh>
   d61fa:	e7f3      	b.n	d61e4 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d61fc:	b00d      	add	sp, #52	; 0x34
   d61fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6200 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d6200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6204:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d6206:	ab0e      	add	r3, sp, #56	; 0x38
   d6208:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d620a:	4606      	mov	r6, r0
   d620c:	4617      	mov	r7, r2
   d620e:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d6210:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d6214:	462a      	mov	r2, r5
   d6216:	4629      	mov	r1, r5
   d6218:	f7fe fdf0 	bl	d4dfc <netdb_getaddrinfo>
   d621c:	2800      	cmp	r0, #0
   d621e:	db1f      	blt.n	d6260 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d6220:	9b01      	ldr	r3, [sp, #4]
   d6222:	b1fb      	cbz	r3, d6264 <_ZN3UDP11beginPacketEPKct+0x64>
   d6224:	695b      	ldr	r3, [r3, #20]
   d6226:	b1eb      	cbz	r3, d6264 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d6228:	a802      	add	r0, sp, #8
   d622a:	f7ff fae1 	bl	d57f0 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d622e:	9b01      	ldr	r3, [sp, #4]
   d6230:	462a      	mov	r2, r5
   d6232:	6958      	ldr	r0, [r3, #20]
   d6234:	a902      	add	r1, sp, #8
   d6236:	f7ff ff9f 	bl	d6178 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d623a:	a802      	add	r0, sp, #8
   d623c:	f7ff faf8 	bl	d5830 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d6240:	b180      	cbz	r0, d6264 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d6242:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d6244:	ad03      	add	r5, sp, #12
   d6246:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d624a:	4b0b      	ldr	r3, [pc, #44]	; (d6278 <_ZN3UDP11beginPacketEPKct+0x78>)
   d624c:	9308      	str	r3, [sp, #32]
   d624e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d6250:	ac09      	add	r4, sp, #36	; 0x24
   d6252:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d6254:	682b      	ldr	r3, [r5, #0]
   d6256:	7023      	strb	r3, [r4, #0]
   d6258:	463a      	mov	r2, r7
   d625a:	a908      	add	r1, sp, #32
   d625c:	4630      	mov	r0, r6
   d625e:	47c0      	blx	r8
   d6260:	4604      	mov	r4, r0
   d6262:	e001      	b.n	d6268 <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d6264:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d6268:	9801      	ldr	r0, [sp, #4]
   d626a:	f7fe fdbf 	bl	d4dec <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d626e:	4620      	mov	r0, r4
   d6270:	b00e      	add	sp, #56	; 0x38
   d6272:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6276:	bf00      	nop
   d6278:	000d7a08 	.word	0x000d7a08

000d627c <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6280:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d6284:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d6288:	b08c      	sub	sp, #48	; 0x30
   d628a:	4605      	mov	r5, r0
   d628c:	460c      	mov	r4, r1
   d628e:	4617      	mov	r7, r2
   d6290:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d6292:	db00      	blt.n	d6296 <_ZN3UDP13receivePacketEPhjm+0x1a>
   d6294:	b911      	cbnz	r1, d629c <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d6296:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d629a:	e035      	b.n	d6308 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d629c:	f04f 0a1c 	mov.w	sl, #28
   d62a0:	ae05      	add	r6, sp, #20
   d62a2:	4652      	mov	r2, sl
   d62a4:	2100      	movs	r1, #0
   d62a6:	4630      	mov	r0, r6
   d62a8:	f001 fab5 	bl	d7816 <memset>
        socklen_t slen = sizeof(saddr);
   d62ac:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d62b0:	f1b9 0f00 	cmp.w	r9, #0
   d62b4:	d014      	beq.n	d62e0 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d62b6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d62ba:	fbb9 f1f2 	udiv	r1, r9, r2
   d62be:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d62c0:	fb02 9111 	mls	r1, r2, r1, r9
   d62c4:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d62c6:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d62c8:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d62ca:	9300      	str	r3, [sp, #0]
   d62cc:	f241 0206 	movw	r2, #4102	; 0x1006
   d62d0:	ab03      	add	r3, sp, #12
   d62d2:	f640 71ff 	movw	r1, #4095	; 0xfff
   d62d6:	4640      	mov	r0, r8
   d62d8:	f7fe fda0 	bl	d4e1c <sock_setsockopt>
            if (ret) {
   d62dc:	b108      	cbz	r0, d62e2 <_ZN3UDP13receivePacketEPhjm+0x66>
   d62de:	e013      	b.n	d6308 <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d62e0:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d62e2:	ab02      	add	r3, sp, #8
   d62e4:	9301      	str	r3, [sp, #4]
   d62e6:	4621      	mov	r1, r4
   d62e8:	4603      	mov	r3, r0
   d62ea:	9600      	str	r6, [sp, #0]
   d62ec:	463a      	mov	r2, r7
   d62ee:	6968      	ldr	r0, [r5, #20]
   d62f0:	f7fe fda4 	bl	d4e3c <sock_recvfrom>
        if (ret >= 0) {
   d62f4:	1e04      	subs	r4, r0, #0
   d62f6:	db06      	blt.n	d6306 <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d62f8:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d62fc:	f105 011c 	add.w	r1, r5, #28
   d6300:	4630      	mov	r0, r6
   d6302:	f7ff ff39 	bl	d6178 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d6306:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d6308:	b00c      	add	sp, #48	; 0x30
   d630a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d630e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d630e:	b538      	push	{r3, r4, r5, lr}
   d6310:	4605      	mov	r5, r0
   d6312:	4614      	mov	r4, r2
   d6314:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d6316:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d6318:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d631a:	d111      	bne.n	d6340 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d631c:	231c      	movs	r3, #28
   d631e:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d6320:	230a      	movs	r3, #10
   d6322:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d6324:	f7fe fd5a 	bl	d4ddc <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d6328:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d632a:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d632e:	1d2b      	adds	r3, r5, #4
   d6330:	3514      	adds	r5, #20
   d6332:	f853 2b04 	ldr.w	r2, [r3], #4
   d6336:	f844 2b04 	str.w	r2, [r4], #4
   d633a:	42ab      	cmp	r3, r5
   d633c:	d1f9      	bne.n	d6332 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d633e:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d6340:	2b04      	cmp	r3, #4
   d6342:	d10a      	bne.n	d635a <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d6344:	2310      	movs	r3, #16
   d6346:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d6348:	2302      	movs	r3, #2
   d634a:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d634c:	f7fe fd46 	bl	d4ddc <inet_htons>
   d6350:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d6352:	6868      	ldr	r0, [r5, #4]
   d6354:	f7fe fd32 	bl	d4dbc <inet_htonl>
   d6358:	6060      	str	r0, [r4, #4]
   d635a:	bd38      	pop	{r3, r4, r5, pc}

000d635c <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d635c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6360:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d6362:	ac03      	add	r4, sp, #12
   d6364:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d6366:	4699      	mov	r9, r3
   d6368:	4606      	mov	r6, r0
   d636a:	460f      	mov	r7, r1
   d636c:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d636e:	2100      	movs	r1, #0
   d6370:	462a      	mov	r2, r5
   d6372:	4620      	mov	r0, r4
   d6374:	f001 fa4f 	bl	d7816 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d6378:	4622      	mov	r2, r4
   d637a:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d637e:	4648      	mov	r0, r9
   d6380:	f7ff ffc5 	bl	d630e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d6384:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d6388:	b143      	cbz	r3, d639c <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d638a:	e88d 0030 	stmia.w	sp, {r4, r5}
   d638e:	2300      	movs	r3, #0
   d6390:	4642      	mov	r2, r8
   d6392:	4639      	mov	r1, r7
   d6394:	6970      	ldr	r0, [r6, #20]
   d6396:	f7fe fd59 	bl	d4e4c <sock_sendto>
   d639a:	e001      	b.n	d63a0 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d639c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d63a0:	b00b      	add	sp, #44	; 0x2c
   d63a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d63a6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d63a6:	b5f0      	push	{r4, r5, r6, r7, lr}
   d63a8:	b091      	sub	sp, #68	; 0x44
   d63aa:	460c      	mov	r4, r1
   d63ac:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d63ae:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d63b0:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d63b2:	a809      	add	r0, sp, #36	; 0x24
   d63b4:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d63b6:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d63b8:	f001 fa2d 	bl	d7816 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d63bc:	aa09      	add	r2, sp, #36	; 0x24
   d63be:	2100      	movs	r1, #0
   d63c0:	4620      	mov	r0, r4
   d63c2:	f7ff ffa4 	bl	d630e <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d63c6:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d63ca:	2b02      	cmp	r3, #2
   d63cc:	d12e      	bne.n	d642c <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d63ce:	2300      	movs	r3, #0
   d63d0:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d63d2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d63d4:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d63d6:	b1dd      	cbz	r5, d6410 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d63d8:	a902      	add	r1, sp, #8
   d63da:	4628      	mov	r0, r5
   d63dc:	f7fe fcc6 	bl	d4d6c <if_get_by_index>
   d63e0:	b9b0      	cbnz	r0, d6410 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d63e2:	a910      	add	r1, sp, #64	; 0x40
   d63e4:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d63e8:	9802      	ldr	r0, [sp, #8]
   d63ea:	f7fe fcc7 	bl	d4d7c <if_get_addrs>
   d63ee:	b960      	cbnz	r0, d640a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d63f0:	9b03      	ldr	r3, [sp, #12]
   d63f2:	b153      	cbz	r3, d640a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d63f4:	68da      	ldr	r2, [r3, #12]
   d63f6:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d63f8:	7851      	ldrb	r1, [r2, #1]
   d63fa:	2902      	cmp	r1, #2
   d63fc:	d103      	bne.n	d6406 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d63fe:	6852      	ldr	r2, [r2, #4]
   d6400:	b10a      	cbz	r2, d6406 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d6402:	9205      	str	r2, [sp, #20]
   d6404:	e001      	b.n	d640a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d6406:	681b      	ldr	r3, [r3, #0]
   d6408:	e7f3      	b.n	d63f2 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d640a:	9803      	ldr	r0, [sp, #12]
   d640c:	f7fe fcbe 	bl	d4d8c <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d6410:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d6412:	f04f 0308 	mov.w	r3, #8
   d6416:	9300      	str	r3, [sp, #0]
   d6418:	bf18      	it	ne
   d641a:	2203      	movne	r2, #3
   d641c:	ab04      	add	r3, sp, #16
   d641e:	bf08      	it	eq
   d6420:	2204      	moveq	r2, #4
   d6422:	2100      	movs	r1, #0
   d6424:	4630      	mov	r0, r6
   d6426:	f7fe fcf9 	bl	d4e1c <sock_setsockopt>
   d642a:	e01e      	b.n	d646a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d642c:	2b0a      	cmp	r3, #10
   d642e:	d11a      	bne.n	d6466 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d6430:	ac04      	add	r4, sp, #16
   d6432:	2214      	movs	r2, #20
   d6434:	2100      	movs	r1, #0
   d6436:	4620      	mov	r0, r4
   d6438:	f001 f9ed 	bl	d7816 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d643c:	ab0b      	add	r3, sp, #44	; 0x2c
   d643e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d6440:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d6442:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d6446:	f04f 0314 	mov.w	r3, #20
   d644a:	9300      	str	r3, [sp, #0]
   d644c:	bf18      	it	ne
   d644e:	220c      	movne	r2, #12
   d6450:	4623      	mov	r3, r4
   d6452:	bf08      	it	eq
   d6454:	220d      	moveq	r2, #13
   d6456:	2129      	movs	r1, #41	; 0x29
   d6458:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d645a:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d645c:	f7fe fcde 	bl	d4e1c <sock_setsockopt>
   d6460:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d6464:	e001      	b.n	d646a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d6466:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d646a:	b011      	add	sp, #68	; 0x44
   d646c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6470 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d6470:	b538      	push	{r3, r4, r5, lr}
   d6472:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6476:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d6478:	4b0b      	ldr	r3, [pc, #44]	; (d64a8 <_ZN3UDPC1Ev+0x38>)
   d647a:	f103 0208 	add.w	r2, r3, #8
   d647e:	336c      	adds	r3, #108	; 0x6c
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6480:	2500      	movs	r5, #0
   d6482:	6103      	str	r3, [r0, #16]
   d6484:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d6488:	4604      	mov	r4, r0
   d648a:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d648c:	6002      	str	r2, [r0, #0]
   d648e:	6143      	str	r3, [r0, #20]
   d6490:	301c      	adds	r0, #28
   d6492:	f7ff f9ad 	bl	d57f0 <_ZN9IPAddressC1Ev>
   d6496:	f44f 7300 	mov.w	r3, #512	; 0x200
   d649a:	86e5      	strh	r5, [r4, #54]	; 0x36
   d649c:	8725      	strh	r5, [r4, #56]	; 0x38
   d649e:	63e5      	str	r5, [r4, #60]	; 0x3c
   d64a0:	6423      	str	r3, [r4, #64]	; 0x40
   d64a2:	6465      	str	r5, [r4, #68]	; 0x44
}
   d64a4:	4620      	mov	r0, r4
   d64a6:	bd38      	pop	{r3, r4, r5, pc}
   d64a8:	000d7bc4 	.word	0x000d7bc4

000d64ac <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d64ac:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d64ae:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d64b2:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d64b4:	b11b      	cbz	r3, d64be <_ZN3UDP13releaseBufferEv+0x12>
   d64b6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d64b8:	b108      	cbz	r0, d64be <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d64ba:	f7fd fdf0 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d64be:	2300      	movs	r3, #0
   d64c0:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d64c2:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d64c6:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d64c8:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d64ca:	8723      	strh	r3, [r4, #56]	; 0x38
   d64cc:	bd10      	pop	{r4, pc}

000d64ce <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d64ce:	b570      	push	{r4, r5, r6, lr}
   d64d0:	4604      	mov	r4, r0
   d64d2:	4616      	mov	r6, r2
   d64d4:	460d      	mov	r5, r1
    releaseBuffer();
   d64d6:	f7ff ffe9 	bl	d64ac <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d64da:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d64dc:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d64de:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d64e0:	b93e      	cbnz	r6, d64f2 <_ZN3UDP9setBufferEjPh+0x24>
   d64e2:	b135      	cbz	r5, d64f2 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d64e4:	4628      	mov	r0, r5
   d64e6:	f7fd fdd8 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d64ea:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d64ec:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d64ee:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d64f2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d64f4:	b103      	cbz	r3, d64f8 <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d64f6:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d64f8:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d64fa:	3000      	adds	r0, #0
   d64fc:	bf18      	it	ne
   d64fe:	2001      	movne	r0, #1
   d6500:	bd70      	pop	{r4, r5, r6, pc}

000d6502 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6502:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6504:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d6506:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d6508:	4605      	mov	r5, r0
   d650a:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d650c:	b91a      	cbnz	r2, d6516 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d650e:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d6510:	b109      	cbz	r1, d6516 <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d6512:	f7ff ffdc 	bl	d64ce <_ZN3UDP9setBufferEjPh>
   d6516:	3404      	adds	r4, #4
   d6518:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d651a:	f105 0620 	add.w	r6, r5, #32
   d651e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d6520:	6823      	ldr	r3, [r4, #0]
   d6522:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6524:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d6526:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6528:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d652a:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d652c:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d652e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6530 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d6530:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d6532:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d6534:	4604      	mov	r4, r0
   d6536:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d6538:	b91a      	cbnz	r2, d6542 <_ZN3UDP11parsePacketEm+0x12>
   d653a:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d653c:	b109      	cbz	r1, d6542 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d653e:	f7ff ffc6 	bl	d64ce <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d6542:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d6544:	2200      	movs	r2, #0
   d6546:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d6548:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d654a:	b149      	cbz	r1, d6560 <_ZN3UDP11parsePacketEm+0x30>
   d654c:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d654e:	b13a      	cbz	r2, d6560 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d6550:	6823      	ldr	r3, [r4, #0]
   d6552:	4620      	mov	r0, r4
   d6554:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d6556:	4633      	mov	r3, r6
   d6558:	47a8      	blx	r5
        if (result > 0) {
   d655a:	2800      	cmp	r0, #0
            _total = result;
   d655c:	bfc8      	it	gt
   d655e:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d6560:	6823      	ldr	r3, [r4, #0]
   d6562:	4620      	mov	r0, r4
   d6564:	691b      	ldr	r3, [r3, #16]
}
   d6566:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d656a:	4718      	bx	r3

000d656c <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d656c:	b510      	push	{r4, lr}
   d656e:	4b07      	ldr	r3, [pc, #28]	; (d658c <_ZN3UDPD1Ev+0x20>)
   d6570:	f103 0208 	add.w	r2, r3, #8
   d6574:	336c      	adds	r3, #108	; 0x6c
   d6576:	4604      	mov	r4, r0
   d6578:	6002      	str	r2, [r0, #0]
   d657a:	6103      	str	r3, [r0, #16]
   d657c:	f7ff fd6d 	bl	d605a <_ZN3UDP4stopEv>
   d6580:	4620      	mov	r0, r4
   d6582:	f7ff ff93 	bl	d64ac <_ZN3UDP13releaseBufferEv>
   d6586:	4620      	mov	r0, r4
   d6588:	bd10      	pop	{r4, pc}
   d658a:	bf00      	nop
   d658c:	000d7bc4 	.word	0x000d7bc4

000d6590 <_ZN3UDPD0Ev>:
   d6590:	b510      	push	{r4, lr}
   d6592:	4604      	mov	r4, r0
   d6594:	f7ff ffea 	bl	d656c <_ZN3UDPD1Ev>
   d6598:	4620      	mov	r0, r4
   d659a:	f7fd fd80 	bl	d409e <_ZdlPv>
   d659e:	4620      	mov	r0, r4
   d65a0:	bd10      	pop	{r4, pc}

000d65a2 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d65a2:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d65a4:	6940      	ldr	r0, [r0, #20]
   d65a6:	2800      	cmp	r0, #0
   d65a8:	db04      	blt.n	d65b4 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d65aa:	2301      	movs	r3, #1
   d65ac:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d65b0:	f7ff bef9 	b.w	d63a6 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d65b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d65b8:	4770      	bx	lr

000d65ba <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d65ba:	4770      	bx	lr

000d65bc <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d65bc:	7441      	strb	r1, [r0, #17]
   d65be:	4770      	bx	lr

000d65c0 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d65c0:	7c00      	ldrb	r0, [r0, #16]
   d65c2:	f7fe bc9b 	b.w	d4efc <HAL_USART_Available_Data_For_Write>

000d65c6 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d65c6:	7c00      	ldrb	r0, [r0, #16]
   d65c8:	f7fe bc70 	b.w	d4eac <HAL_USART_Available_Data>

000d65cc <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d65cc:	7c00      	ldrb	r0, [r0, #16]
   d65ce:	f7fe bc7d 	b.w	d4ecc <HAL_USART_Peek_Data>

000d65d2 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d65d2:	7c00      	ldrb	r0, [r0, #16]
   d65d4:	f7fe bc72 	b.w	d4ebc <HAL_USART_Read_Data>

000d65d8 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d65d8:	7c00      	ldrb	r0, [r0, #16]
   d65da:	f7fe bc7f 	b.w	d4edc <HAL_USART_Flush_Data>

000d65de <_ZN11USARTSerialD0Ev>:
   d65de:	b510      	push	{r4, lr}
   d65e0:	4604      	mov	r4, r0
   d65e2:	f7fd fd5c 	bl	d409e <_ZdlPv>
   d65e6:	4620      	mov	r0, r4
   d65e8:	bd10      	pop	{r4, pc}

000d65ea <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d65ea:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d65ec:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d65ee:	4604      	mov	r4, r0
   d65f0:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d65f2:	b925      	cbnz	r5, d65fe <_ZN11USARTSerial5writeEh+0x14>
   d65f4:	7c00      	ldrb	r0, [r0, #16]
   d65f6:	f7fe fc81 	bl	d4efc <HAL_USART_Available_Data_For_Write>
   d65fa:	2800      	cmp	r0, #0
   d65fc:	dd05      	ble.n	d660a <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d65fe:	4631      	mov	r1, r6
   d6600:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d6602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d6606:	f7fe bc49 	b.w	d4e9c <HAL_USART_Write_Data>
  }
  return 0;
}
   d660a:	4628      	mov	r0, r5
   d660c:	bd70      	pop	{r4, r5, r6, pc}
	...

000d6610 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d6610:	b510      	push	{r4, lr}
   d6612:	4604      	mov	r4, r0
   d6614:	4608      	mov	r0, r1
   d6616:	4611      	mov	r1, r2
   d6618:	2200      	movs	r2, #0
   d661a:	6062      	str	r2, [r4, #4]
   d661c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d6620:	60a2      	str	r2, [r4, #8]
   d6622:	4a05      	ldr	r2, [pc, #20]	; (d6638 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d6624:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d6626:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d6628:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d662a:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d662c:	461a      	mov	r2, r3
   d662e:	f7fe fc2d 	bl	d4e8c <HAL_USART_Init>
}
   d6632:	4620      	mov	r0, r4
   d6634:	bd10      	pop	{r4, pc}
   d6636:	bf00      	nop
   d6638:	000d7c3c 	.word	0x000d7c3c

000d663c <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d663c:	7c00      	ldrb	r0, [r0, #16]
   d663e:	f7fe bc55 	b.w	d4eec <HAL_USART_Is_Enabled>
	...

000d6644 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d6644:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d6646:	4d0c      	ldr	r5, [pc, #48]	; (d6678 <_Z22__fetch_global_Serial1v+0x34>)
   d6648:	6829      	ldr	r1, [r5, #0]
   d664a:	f011 0401 	ands.w	r4, r1, #1
   d664e:	d111      	bne.n	d6674 <_Z22__fetch_global_Serial1v+0x30>
   d6650:	4628      	mov	r0, r5
   d6652:	f7fd fd28 	bl	d40a6 <__cxa_guard_acquire>
   d6656:	b168      	cbz	r0, d6674 <_Z22__fetch_global_Serial1v+0x30>
   d6658:	4a08      	ldr	r2, [pc, #32]	; (d667c <_Z22__fetch_global_Serial1v+0x38>)
   d665a:	4b09      	ldr	r3, [pc, #36]	; (d6680 <_Z22__fetch_global_Serial1v+0x3c>)
   d665c:	4809      	ldr	r0, [pc, #36]	; (d6684 <_Z22__fetch_global_Serial1v+0x40>)
   d665e:	4621      	mov	r1, r4
   d6660:	f7ff ffd6 	bl	d6610 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d6664:	4628      	mov	r0, r5
   d6666:	f7fd fd23 	bl	d40b0 <__cxa_guard_release>
   d666a:	4a07      	ldr	r2, [pc, #28]	; (d6688 <_Z22__fetch_global_Serial1v+0x44>)
   d666c:	4907      	ldr	r1, [pc, #28]	; (d668c <_Z22__fetch_global_Serial1v+0x48>)
   d666e:	4805      	ldr	r0, [pc, #20]	; (d6684 <_Z22__fetch_global_Serial1v+0x40>)
   d6670:	f000 f96a 	bl	d6948 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d6674:	4803      	ldr	r0, [pc, #12]	; (d6684 <_Z22__fetch_global_Serial1v+0x40>)
   d6676:	bd38      	pop	{r3, r4, r5, pc}
   d6678:	2003e674 	.word	0x2003e674
   d667c:	2003e678 	.word	0x2003e678
   d6680:	2003e5f0 	.word	0x2003e5f0
   d6684:	2003e5dc 	.word	0x2003e5dc
   d6688:	2003e1f8 	.word	0x2003e1f8
   d668c:	000d65bb 	.word	0x000d65bb

000d6690 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6690:	7441      	strb	r1, [r0, #17]
   d6692:	4770      	bx	lr

000d6694 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6694:	4770      	bx	lr

000d6696 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d6696:	2100      	movs	r1, #0
   d6698:	7c00      	ldrb	r0, [r0, #16]
   d669a:	f7fe bc4f 	b.w	d4f3c <HAL_USB_USART_Receive_Data>

000d669e <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d669e:	2101      	movs	r1, #1
   d66a0:	7c00      	ldrb	r0, [r0, #16]
   d66a2:	f7fe bc4b 	b.w	d4f3c <HAL_USB_USART_Receive_Data>

000d66a6 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d66a6:	7c00      	ldrb	r0, [r0, #16]
   d66a8:	f7fe bc40 	b.w	d4f2c <HAL_USB_USART_Available_Data_For_Write>

000d66ac <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d66ac:	7c00      	ldrb	r0, [r0, #16]
   d66ae:	f7fe bc35 	b.w	d4f1c <HAL_USB_USART_Available_Data>

000d66b2 <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d66b2:	b538      	push	{r3, r4, r5, lr}
   d66b4:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d66b6:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d66b8:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d66ba:	f7fe fc37 	bl	d4f2c <HAL_USB_USART_Available_Data_For_Write>
   d66be:	2800      	cmp	r0, #0
   d66c0:	dc01      	bgt.n	d66c6 <_ZN9USBSerial5writeEh+0x14>
   d66c2:	7c60      	ldrb	r0, [r4, #17]
   d66c4:	b120      	cbz	r0, d66d0 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d66c6:	4629      	mov	r1, r5
   d66c8:	7c20      	ldrb	r0, [r4, #16]
   d66ca:	f7fe fc3f 	bl	d4f4c <HAL_USB_USART_Send_Data>
    return 1;
   d66ce:	2001      	movs	r0, #1
  }
  return 0;
}
   d66d0:	bd38      	pop	{r3, r4, r5, pc}

000d66d2 <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d66d2:	7c00      	ldrb	r0, [r0, #16]
   d66d4:	f7fe bc42 	b.w	d4f5c <HAL_USB_USART_Flush_Data>

000d66d8 <_ZN9USBSerialD0Ev>:
   d66d8:	b510      	push	{r4, lr}
   d66da:	4604      	mov	r4, r0
   d66dc:	f7fd fcdf 	bl	d409e <_ZdlPv>
   d66e0:	4620      	mov	r0, r4
   d66e2:	bd10      	pop	{r4, pc}

000d66e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d66e4:	b510      	push	{r4, lr}
   d66e6:	4604      	mov	r4, r0
   d66e8:	2300      	movs	r3, #0
   d66ea:	6063      	str	r3, [r4, #4]
   d66ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d66f0:	60a3      	str	r3, [r4, #8]
   d66f2:	4b05      	ldr	r3, [pc, #20]	; (d6708 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d66f4:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d66f6:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d66f8:	4608      	mov	r0, r1
{
  _serial = serial;
   d66fa:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d66fc:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d66fe:	4611      	mov	r1, r2
   d6700:	f7fe fc04 	bl	d4f0c <HAL_USB_USART_Init>
}
   d6704:	4620      	mov	r0, r4
   d6706:	bd10      	pop	{r4, pc}
   d6708:	000d7c6c 	.word	0x000d7c6c

000d670c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d670c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d670e:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d6710:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d6712:	2100      	movs	r1, #0
   d6714:	f001 f87f 	bl	d7816 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d6718:	4620      	mov	r0, r4
   d671a:	bd10      	pop	{r4, pc}

000d671c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d671c:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d671e:	4d0e      	ldr	r5, [pc, #56]	; (d6758 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d6720:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d6722:	a801      	add	r0, sp, #4
   d6724:	f7ff fff2 	bl	d670c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d6728:	6829      	ldr	r1, [r5, #0]
   d672a:	f011 0401 	ands.w	r4, r1, #1
   d672e:	d110      	bne.n	d6752 <_Z16_fetch_usbserialv+0x36>
   d6730:	4628      	mov	r0, r5
   d6732:	f7fd fcb8 	bl	d40a6 <__cxa_guard_acquire>
   d6736:	b160      	cbz	r0, d6752 <_Z16_fetch_usbserialv+0x36>
   d6738:	aa01      	add	r2, sp, #4
   d673a:	4621      	mov	r1, r4
   d673c:	4807      	ldr	r0, [pc, #28]	; (d675c <_Z16_fetch_usbserialv+0x40>)
   d673e:	f7ff ffd1 	bl	d66e4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d6742:	4628      	mov	r0, r5
   d6744:	f7fd fcb4 	bl	d40b0 <__cxa_guard_release>
   d6748:	4a05      	ldr	r2, [pc, #20]	; (d6760 <_Z16_fetch_usbserialv+0x44>)
   d674a:	4906      	ldr	r1, [pc, #24]	; (d6764 <_Z16_fetch_usbserialv+0x48>)
   d674c:	4803      	ldr	r0, [pc, #12]	; (d675c <_Z16_fetch_usbserialv+0x40>)
   d674e:	f000 f8fb 	bl	d6948 <__aeabi_atexit>
	return _usbserial;
}
   d6752:	4802      	ldr	r0, [pc, #8]	; (d675c <_Z16_fetch_usbserialv+0x40>)
   d6754:	b007      	add	sp, #28
   d6756:	bd30      	pop	{r4, r5, pc}
   d6758:	2003e6fc 	.word	0x2003e6fc
   d675c:	2003e700 	.word	0x2003e700
   d6760:	2003e1f8 	.word	0x2003e1f8
   d6764:	000d6695 	.word	0x000d6695

000d6768 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d6768:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d676a:	4b0f      	ldr	r3, [pc, #60]	; (d67a8 <serialEventRun+0x40>)
   d676c:	b133      	cbz	r3, d677c <serialEventRun+0x14>
   d676e:	f7ff ffd5 	bl	d671c <_Z16_fetch_usbserialv>
   d6772:	6803      	ldr	r3, [r0, #0]
   d6774:	691b      	ldr	r3, [r3, #16]
   d6776:	4798      	blx	r3
   d6778:	2800      	cmp	r0, #0
   d677a:	dc0d      	bgt.n	d6798 <serialEventRun+0x30>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d677c:	4b0b      	ldr	r3, [pc, #44]	; (d67ac <serialEventRun+0x44>)
   d677e:	b133      	cbz	r3, d678e <serialEventRun+0x26>
   d6780:	f7ff ff60 	bl	d6644 <_Z22__fetch_global_Serial1v>
   d6784:	6803      	ldr	r3, [r0, #0]
   d6786:	691b      	ldr	r3, [r3, #16]
   d6788:	4798      	blx	r3
   d678a:	2800      	cmp	r0, #0
   d678c:	dc07      	bgt.n	d679e <serialEventRun+0x36>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
   d678e:	4b08      	ldr	r3, [pc, #32]	; (d67b0 <serialEventRun+0x48>)
   d6790:	b143      	cbz	r3, d67a4 <serialEventRun+0x3c>
   d6792:	f3af 8000 	nop.w

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
#endif
}
   d6796:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d6798:	f3af 8000 	nop.w
   d679c:	e7ee      	b.n	d677c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d679e:	f3af 8000 	nop.w
   d67a2:	e7f4      	b.n	d678e <serialEventRun+0x26>
   d67a4:	bd08      	pop	{r3, pc}
   d67a6:	bf00      	nop
	...

000d67b4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d67b4:	b508      	push	{r3, lr}
	serialEventRun();
   d67b6:	f7ff ffd7 	bl	d6768 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d67ba:	f7fe fa6f 	bl	d4c9c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d67be:	4b01      	ldr	r3, [pc, #4]	; (d67c4 <_post_loop+0x10>)
   d67c0:	6018      	str	r0, [r3, #0]
   d67c2:	bd08      	pop	{r3, pc}
   d67c4:	2003e718 	.word	0x2003e718

000d67c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d67c8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d67ca:	2300      	movs	r3, #0
   d67cc:	9300      	str	r3, [sp, #0]
   d67ce:	461a      	mov	r2, r3
   d67d0:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d67d4:	f7fe fbec 	bl	d4fb0 <system_ctrl_set_result>
}
   d67d8:	b003      	add	sp, #12
   d67da:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d67e0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d67e0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d67e2:	8843      	ldrh	r3, [r0, #2]
   d67e4:	2b0a      	cmp	r3, #10
   d67e6:	d008      	beq.n	d67fa <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d67e8:	2b50      	cmp	r3, #80	; 0x50
   d67ea:	d109      	bne.n	d6800 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d67ec:	4b09      	ldr	r3, [pc, #36]	; (d6814 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d67ee:	681b      	ldr	r3, [r3, #0]
   d67f0:	b13b      	cbz	r3, d6802 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d67f2:	b003      	add	sp, #12
   d67f4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d67f8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d67fa:	f7ff ffe5 	bl	d67c8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d67fe:	e006      	b.n	d680e <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6800:	2300      	movs	r3, #0
   d6802:	9300      	str	r3, [sp, #0]
   d6804:	461a      	mov	r2, r3
   d6806:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d680a:	f7fe fbd1 	bl	d4fb0 <system_ctrl_set_result>
        break;
    }
}
   d680e:	b003      	add	sp, #12
   d6810:	f85d fb04 	ldr.w	pc, [sp], #4
   d6814:	2003e714 	.word	0x2003e714

000d6818 <module_user_init_hook>:

void module_user_init_hook()
{
   d6818:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d681a:	f7fe fa37 	bl	d4c8c <HAL_RNG_GetRandomNumber>
   d681e:	4604      	mov	r4, r0
    srand(seed);
   d6820:	f001 f802 	bl	d7828 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6824:	4b07      	ldr	r3, [pc, #28]	; (d6844 <module_user_init_hook+0x2c>)
   d6826:	b113      	cbz	r3, d682e <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d6828:	4620      	mov	r0, r4
   d682a:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d682e:	2100      	movs	r1, #0
   d6830:	4804      	ldr	r0, [pc, #16]	; (d6844 <module_user_init_hook+0x2c>)
   d6832:	f7fe fbd7 	bl	d4fe4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6836:	2100      	movs	r1, #0
   d6838:	4803      	ldr	r0, [pc, #12]	; (d6848 <module_user_init_hook+0x30>)
}
   d683a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d683e:	f7fe bbad 	b.w	d4f9c <system_ctrl_set_app_request_handler>
   d6842:	bf00      	nop
   d6844:	00000000 	.word	0x00000000
   d6848:	000d67e1 	.word	0x000d67e1

000d684c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d684c:	b510      	push	{r4, lr}
   d684e:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d6850:	480f      	ldr	r0, [pc, #60]	; (d6890 <pinAvailable+0x44>)
   d6852:	f7ff fadf 	bl	d5e14 <_ZN8SPIClass9isEnabledEv>
   d6856:	b128      	cbz	r0, d6864 <pinAvailable+0x18>
   d6858:	f1a4 030b 	sub.w	r3, r4, #11
   d685c:	2b02      	cmp	r3, #2
   d685e:	d801      	bhi.n	d6864 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d6860:	2000      	movs	r0, #0
   d6862:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d6864:	f000 f82e 	bl	d68c4 <_Z19__fetch_global_Wirev>
   d6868:	f7fe ff84 	bl	d5774 <_ZN7TwoWire9isEnabledEv>
   d686c:	b108      	cbz	r0, d6872 <pinAvailable+0x26>
   d686e:	2c01      	cmp	r4, #1
   d6870:	d9f6      	bls.n	d6860 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d6872:	f7ff fee7 	bl	d6644 <_Z22__fetch_global_Serial1v>
   d6876:	f7ff fee1 	bl	d663c <_ZN11USARTSerial9isEnabledEv>
   d687a:	b118      	cbz	r0, d6884 <pinAvailable+0x38>
   d687c:	f1a4 0309 	sub.w	r3, r4, #9
   d6880:	2b01      	cmp	r3, #1
   d6882:	d9ed      	bls.n	d6860 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d6884:	2c1e      	cmp	r4, #30
   d6886:	bf8c      	ite	hi
   d6888:	2000      	movhi	r0, #0
   d688a:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d688c:	bd10      	pop	{r4, pc}
   d688e:	bf00      	nop
   d6890:	2003e734 	.word	0x2003e734

000d6894 <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d6894:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d6896:	b510      	push	{r4, lr}
   d6898:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d689a:	bf9c      	itt	ls
   d689c:	340e      	addls	r4, #14
   d689e:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d68a0:	4620      	mov	r0, r4
   d68a2:	f7ff ffd3 	bl	d684c <pinAvailable>
   d68a6:	b150      	cbz	r0, d68be <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d68a8:	2103      	movs	r1, #3
   d68aa:	4620      	mov	r0, r4
   d68ac:	f7fe fa06 	bl	d4cbc <HAL_Validate_Pin_Function>
   d68b0:	2803      	cmp	r0, #3
   d68b2:	d104      	bne.n	d68be <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d68b4:	4620      	mov	r0, r4
}
   d68b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d68ba:	f7fe ba07 	b.w	d4ccc <HAL_ADC_Read>
}
   d68be:	2000      	movs	r0, #0
   d68c0:	bd10      	pop	{r4, pc}
	...

000d68c4 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d68c4:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d68c6:	4d0b      	ldr	r5, [pc, #44]	; (d68f4 <_Z19__fetch_global_Wirev+0x30>)
   d68c8:	6829      	ldr	r1, [r5, #0]
   d68ca:	f011 0401 	ands.w	r4, r1, #1
   d68ce:	d10f      	bne.n	d68f0 <_Z19__fetch_global_Wirev+0x2c>
   d68d0:	4628      	mov	r0, r5
   d68d2:	f7fd fbe8 	bl	d40a6 <__cxa_guard_acquire>
   d68d6:	b158      	cbz	r0, d68f0 <_Z19__fetch_global_Wirev+0x2c>
   d68d8:	4621      	mov	r1, r4
   d68da:	4807      	ldr	r0, [pc, #28]	; (d68f8 <_Z19__fetch_global_Wirev+0x34>)
   d68dc:	f7fe ff38 	bl	d5750 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d68e0:	4628      	mov	r0, r5
   d68e2:	f7fd fbe5 	bl	d40b0 <__cxa_guard_release>
   d68e6:	4a05      	ldr	r2, [pc, #20]	; (d68fc <_Z19__fetch_global_Wirev+0x38>)
   d68e8:	4905      	ldr	r1, [pc, #20]	; (d6900 <_Z19__fetch_global_Wirev+0x3c>)
   d68ea:	4803      	ldr	r0, [pc, #12]	; (d68f8 <_Z19__fetch_global_Wirev+0x34>)
   d68ec:	f000 f82c 	bl	d6948 <__aeabi_atexit>
	return wire;
}
   d68f0:	4801      	ldr	r0, [pc, #4]	; (d68f8 <_Z19__fetch_global_Wirev+0x34>)
   d68f2:	bd38      	pop	{r3, r4, r5, pc}
   d68f4:	2003e71c 	.word	0x2003e71c
   d68f8:	2003e720 	.word	0x2003e720
   d68fc:	2003e1f8 	.word	0x2003e1f8
   d6900:	000d56f9 	.word	0x000d56f9

000d6904 <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6904:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6906:	4c0c      	ldr	r4, [pc, #48]	; (d6938 <_GLOBAL__sub_I_SPI+0x34>)
   d6908:	4e0c      	ldr	r6, [pc, #48]	; (d693c <_GLOBAL__sub_I_SPI+0x38>)
   d690a:	4d0d      	ldr	r5, [pc, #52]	; (d6940 <_GLOBAL__sub_I_SPI+0x3c>)
   d690c:	2100      	movs	r1, #0
   d690e:	4620      	mov	r0, r4
   d6910:	f7ff fa6c 	bl	d5dec <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6914:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6916:	4c0b      	ldr	r4, [pc, #44]	; (d6944 <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d6918:	4632      	mov	r2, r6
   d691a:	4629      	mov	r1, r5
   d691c:	f000 f814 	bl	d6948 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d6920:	2101      	movs	r1, #1
   d6922:	4620      	mov	r0, r4
   d6924:	f7ff fa62 	bl	d5dec <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d6928:	4632      	mov	r2, r6
   d692a:	4629      	mov	r1, r5
   d692c:	4620      	mov	r0, r4
   d692e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d6932:	f000 b809 	b.w	d6948 <__aeabi_atexit>
   d6936:	bf00      	nop
   d6938:	2003e734 	.word	0x2003e734
   d693c:	2003e1f8 	.word	0x2003e1f8
   d6940:	000d5ddd 	.word	0x000d5ddd
   d6944:	2003e744 	.word	0x2003e744

000d6948 <__aeabi_atexit>:
   d6948:	460b      	mov	r3, r1
   d694a:	4601      	mov	r1, r0
   d694c:	4618      	mov	r0, r3
   d694e:	f000 bf49 	b.w	d77e4 <__cxa_atexit>

000d6952 <_ZSt25__throw_bad_function_callv>:
   d6952:	b508      	push	{r3, lr}
   d6954:	f7fe fbb6 	bl	d50c4 <abort>

000d6958 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d6958:	4b24      	ldr	r3, [pc, #144]	; (d69ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d695a:	681a      	ldr	r2, [r3, #0]
   d695c:	07d0      	lsls	r0, r2, #31
   d695e:	bf5c      	itt	pl
   d6960:	2201      	movpl	r2, #1
   d6962:	601a      	strpl	r2, [r3, #0]
   d6964:	4b22      	ldr	r3, [pc, #136]	; (d69f0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d6966:	681a      	ldr	r2, [r3, #0]
   d6968:	07d1      	lsls	r1, r2, #31
   d696a:	bf5c      	itt	pl
   d696c:	2201      	movpl	r2, #1
   d696e:	601a      	strpl	r2, [r3, #0]
   d6970:	4b20      	ldr	r3, [pc, #128]	; (d69f4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d6972:	681a      	ldr	r2, [r3, #0]
   d6974:	07d2      	lsls	r2, r2, #31
   d6976:	bf5c      	itt	pl
   d6978:	2201      	movpl	r2, #1
   d697a:	601a      	strpl	r2, [r3, #0]
   d697c:	4b1e      	ldr	r3, [pc, #120]	; (d69f8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d697e:	681a      	ldr	r2, [r3, #0]
   d6980:	07d0      	lsls	r0, r2, #31
   d6982:	bf5c      	itt	pl
   d6984:	2201      	movpl	r2, #1
   d6986:	601a      	strpl	r2, [r3, #0]
   d6988:	4b1c      	ldr	r3, [pc, #112]	; (d69fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d698a:	681a      	ldr	r2, [r3, #0]
   d698c:	07d1      	lsls	r1, r2, #31
   d698e:	bf5c      	itt	pl
   d6990:	2201      	movpl	r2, #1
   d6992:	601a      	strpl	r2, [r3, #0]
   d6994:	4b1a      	ldr	r3, [pc, #104]	; (d6a00 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d6996:	681a      	ldr	r2, [r3, #0]
   d6998:	07d2      	lsls	r2, r2, #31
   d699a:	bf5c      	itt	pl
   d699c:	2201      	movpl	r2, #1
   d699e:	601a      	strpl	r2, [r3, #0]
   d69a0:	4b18      	ldr	r3, [pc, #96]	; (d6a04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d69a2:	681a      	ldr	r2, [r3, #0]
   d69a4:	07d0      	lsls	r0, r2, #31
   d69a6:	bf5c      	itt	pl
   d69a8:	2201      	movpl	r2, #1
   d69aa:	601a      	strpl	r2, [r3, #0]
   d69ac:	4b16      	ldr	r3, [pc, #88]	; (d6a08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d69ae:	681a      	ldr	r2, [r3, #0]
   d69b0:	07d1      	lsls	r1, r2, #31
   d69b2:	bf5c      	itt	pl
   d69b4:	2201      	movpl	r2, #1
   d69b6:	601a      	strpl	r2, [r3, #0]
   d69b8:	4b14      	ldr	r3, [pc, #80]	; (d6a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d69ba:	681a      	ldr	r2, [r3, #0]
   d69bc:	07d2      	lsls	r2, r2, #31
   d69be:	bf5c      	itt	pl
   d69c0:	2201      	movpl	r2, #1
   d69c2:	601a      	strpl	r2, [r3, #0]
   d69c4:	4b12      	ldr	r3, [pc, #72]	; (d6a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d69c6:	681a      	ldr	r2, [r3, #0]
   d69c8:	07d0      	lsls	r0, r2, #31
   d69ca:	bf5c      	itt	pl
   d69cc:	2201      	movpl	r2, #1
   d69ce:	601a      	strpl	r2, [r3, #0]
   d69d0:	4b10      	ldr	r3, [pc, #64]	; (d6a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d69d2:	681a      	ldr	r2, [r3, #0]
   d69d4:	07d1      	lsls	r1, r2, #31
   d69d6:	bf5c      	itt	pl
   d69d8:	2201      	movpl	r2, #1
   d69da:	601a      	strpl	r2, [r3, #0]
   d69dc:	4b0e      	ldr	r3, [pc, #56]	; (d6a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d69de:	681a      	ldr	r2, [r3, #0]
   d69e0:	07d2      	lsls	r2, r2, #31
   d69e2:	bf5c      	itt	pl
   d69e4:	2201      	movpl	r2, #1
   d69e6:	601a      	strpl	r2, [r3, #0]
   d69e8:	4770      	bx	lr
   d69ea:	bf00      	nop
   d69ec:	2003e780 	.word	0x2003e780
   d69f0:	2003e77c 	.word	0x2003e77c
   d69f4:	2003e778 	.word	0x2003e778
   d69f8:	2003e774 	.word	0x2003e774
   d69fc:	2003e770 	.word	0x2003e770
   d6a00:	2003e76c 	.word	0x2003e76c
   d6a04:	2003e768 	.word	0x2003e768
   d6a08:	2003e764 	.word	0x2003e764
   d6a0c:	2003e760 	.word	0x2003e760
   d6a10:	2003e75c 	.word	0x2003e75c
   d6a14:	2003e758 	.word	0x2003e758
   d6a18:	2003e754 	.word	0x2003e754

000d6a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6a1c:	4b18      	ldr	r3, [pc, #96]	; (d6a80 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6a1e:	681a      	ldr	r2, [r3, #0]
   d6a20:	07d1      	lsls	r1, r2, #31
   d6a22:	bf5c      	itt	pl
   d6a24:	2201      	movpl	r2, #1
   d6a26:	601a      	strpl	r2, [r3, #0]
   d6a28:	4b16      	ldr	r3, [pc, #88]	; (d6a84 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6a2a:	681a      	ldr	r2, [r3, #0]
   d6a2c:	07d2      	lsls	r2, r2, #31
   d6a2e:	bf5c      	itt	pl
   d6a30:	2201      	movpl	r2, #1
   d6a32:	601a      	strpl	r2, [r3, #0]
   d6a34:	4b14      	ldr	r3, [pc, #80]	; (d6a88 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6a36:	681a      	ldr	r2, [r3, #0]
   d6a38:	07d0      	lsls	r0, r2, #31
   d6a3a:	bf5c      	itt	pl
   d6a3c:	2201      	movpl	r2, #1
   d6a3e:	601a      	strpl	r2, [r3, #0]
   d6a40:	4b12      	ldr	r3, [pc, #72]	; (d6a8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6a42:	681a      	ldr	r2, [r3, #0]
   d6a44:	07d1      	lsls	r1, r2, #31
   d6a46:	bf5c      	itt	pl
   d6a48:	2201      	movpl	r2, #1
   d6a4a:	601a      	strpl	r2, [r3, #0]
   d6a4c:	4b10      	ldr	r3, [pc, #64]	; (d6a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6a4e:	681a      	ldr	r2, [r3, #0]
   d6a50:	07d2      	lsls	r2, r2, #31
   d6a52:	bf5c      	itt	pl
   d6a54:	2201      	movpl	r2, #1
   d6a56:	601a      	strpl	r2, [r3, #0]
   d6a58:	4b0e      	ldr	r3, [pc, #56]	; (d6a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6a5a:	681a      	ldr	r2, [r3, #0]
   d6a5c:	07d0      	lsls	r0, r2, #31
   d6a5e:	bf5c      	itt	pl
   d6a60:	2201      	movpl	r2, #1
   d6a62:	601a      	strpl	r2, [r3, #0]
   d6a64:	4b0c      	ldr	r3, [pc, #48]	; (d6a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6a66:	681a      	ldr	r2, [r3, #0]
   d6a68:	07d1      	lsls	r1, r2, #31
   d6a6a:	bf5c      	itt	pl
   d6a6c:	2201      	movpl	r2, #1
   d6a6e:	601a      	strpl	r2, [r3, #0]
   d6a70:	4b0a      	ldr	r3, [pc, #40]	; (d6a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6a72:	681a      	ldr	r2, [r3, #0]
   d6a74:	07d2      	lsls	r2, r2, #31
   d6a76:	bf5c      	itt	pl
   d6a78:	2201      	movpl	r2, #1
   d6a7a:	601a      	strpl	r2, [r3, #0]
   d6a7c:	4770      	bx	lr
   d6a7e:	bf00      	nop
   d6a80:	2003e7a0 	.word	0x2003e7a0
   d6a84:	2003e79c 	.word	0x2003e79c
   d6a88:	2003e798 	.word	0x2003e798
   d6a8c:	2003e794 	.word	0x2003e794
   d6a90:	2003e790 	.word	0x2003e790
   d6a94:	2003e78c 	.word	0x2003e78c
   d6a98:	2003e788 	.word	0x2003e788
   d6a9c:	2003e784 	.word	0x2003e784

000d6aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d6aa0:	4b18      	ldr	r3, [pc, #96]	; (d6b04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d6aa2:	681a      	ldr	r2, [r3, #0]
   d6aa4:	07d1      	lsls	r1, r2, #31
   d6aa6:	bf5c      	itt	pl
   d6aa8:	2201      	movpl	r2, #1
   d6aaa:	601a      	strpl	r2, [r3, #0]
   d6aac:	4b16      	ldr	r3, [pc, #88]	; (d6b08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d6aae:	681a      	ldr	r2, [r3, #0]
   d6ab0:	07d2      	lsls	r2, r2, #31
   d6ab2:	bf5c      	itt	pl
   d6ab4:	2201      	movpl	r2, #1
   d6ab6:	601a      	strpl	r2, [r3, #0]
   d6ab8:	4b14      	ldr	r3, [pc, #80]	; (d6b0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d6aba:	681a      	ldr	r2, [r3, #0]
   d6abc:	07d0      	lsls	r0, r2, #31
   d6abe:	bf5c      	itt	pl
   d6ac0:	2201      	movpl	r2, #1
   d6ac2:	601a      	strpl	r2, [r3, #0]
   d6ac4:	4b12      	ldr	r3, [pc, #72]	; (d6b10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d6ac6:	681a      	ldr	r2, [r3, #0]
   d6ac8:	07d1      	lsls	r1, r2, #31
   d6aca:	bf5c      	itt	pl
   d6acc:	2201      	movpl	r2, #1
   d6ace:	601a      	strpl	r2, [r3, #0]
   d6ad0:	4b10      	ldr	r3, [pc, #64]	; (d6b14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d6ad2:	681a      	ldr	r2, [r3, #0]
   d6ad4:	07d2      	lsls	r2, r2, #31
   d6ad6:	bf5c      	itt	pl
   d6ad8:	2201      	movpl	r2, #1
   d6ada:	601a      	strpl	r2, [r3, #0]
   d6adc:	4b0e      	ldr	r3, [pc, #56]	; (d6b18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d6ade:	681a      	ldr	r2, [r3, #0]
   d6ae0:	07d0      	lsls	r0, r2, #31
   d6ae2:	bf5c      	itt	pl
   d6ae4:	2201      	movpl	r2, #1
   d6ae6:	601a      	strpl	r2, [r3, #0]
   d6ae8:	4b0c      	ldr	r3, [pc, #48]	; (d6b1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d6aea:	681a      	ldr	r2, [r3, #0]
   d6aec:	07d1      	lsls	r1, r2, #31
   d6aee:	bf5c      	itt	pl
   d6af0:	2201      	movpl	r2, #1
   d6af2:	601a      	strpl	r2, [r3, #0]
   d6af4:	4b0a      	ldr	r3, [pc, #40]	; (d6b20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d6af6:	681a      	ldr	r2, [r3, #0]
   d6af8:	07d2      	lsls	r2, r2, #31
   d6afa:	bf5c      	itt	pl
   d6afc:	2201      	movpl	r2, #1
   d6afe:	601a      	strpl	r2, [r3, #0]
   d6b00:	4770      	bx	lr
   d6b02:	bf00      	nop
   d6b04:	2003e7c0 	.word	0x2003e7c0
   d6b08:	2003e7bc 	.word	0x2003e7bc
   d6b0c:	2003e7b8 	.word	0x2003e7b8
   d6b10:	2003e7b4 	.word	0x2003e7b4
   d6b14:	2003e7b0 	.word	0x2003e7b0
   d6b18:	2003e7ac 	.word	0x2003e7ac
   d6b1c:	2003e7a8 	.word	0x2003e7a8
   d6b20:	2003e7a4 	.word	0x2003e7a4

000d6b24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d6b24:	4b24      	ldr	r3, [pc, #144]	; (d6bb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d6b26:	681a      	ldr	r2, [r3, #0]
   d6b28:	07d0      	lsls	r0, r2, #31
   d6b2a:	bf5c      	itt	pl
   d6b2c:	2201      	movpl	r2, #1
   d6b2e:	601a      	strpl	r2, [r3, #0]
   d6b30:	4b22      	ldr	r3, [pc, #136]	; (d6bbc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d6b32:	681a      	ldr	r2, [r3, #0]
   d6b34:	07d1      	lsls	r1, r2, #31
   d6b36:	bf5c      	itt	pl
   d6b38:	2201      	movpl	r2, #1
   d6b3a:	601a      	strpl	r2, [r3, #0]
   d6b3c:	4b20      	ldr	r3, [pc, #128]	; (d6bc0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d6b3e:	681a      	ldr	r2, [r3, #0]
   d6b40:	07d2      	lsls	r2, r2, #31
   d6b42:	bf5c      	itt	pl
   d6b44:	2201      	movpl	r2, #1
   d6b46:	601a      	strpl	r2, [r3, #0]
   d6b48:	4b1e      	ldr	r3, [pc, #120]	; (d6bc4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d6b4a:	681a      	ldr	r2, [r3, #0]
   d6b4c:	07d0      	lsls	r0, r2, #31
   d6b4e:	bf5c      	itt	pl
   d6b50:	2201      	movpl	r2, #1
   d6b52:	601a      	strpl	r2, [r3, #0]
   d6b54:	4b1c      	ldr	r3, [pc, #112]	; (d6bc8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d6b56:	681a      	ldr	r2, [r3, #0]
   d6b58:	07d1      	lsls	r1, r2, #31
   d6b5a:	bf5c      	itt	pl
   d6b5c:	2201      	movpl	r2, #1
   d6b5e:	601a      	strpl	r2, [r3, #0]
   d6b60:	4b1a      	ldr	r3, [pc, #104]	; (d6bcc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d6b62:	681a      	ldr	r2, [r3, #0]
   d6b64:	07d2      	lsls	r2, r2, #31
   d6b66:	bf5c      	itt	pl
   d6b68:	2201      	movpl	r2, #1
   d6b6a:	601a      	strpl	r2, [r3, #0]
   d6b6c:	4b18      	ldr	r3, [pc, #96]	; (d6bd0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d6b6e:	681a      	ldr	r2, [r3, #0]
   d6b70:	07d0      	lsls	r0, r2, #31
   d6b72:	bf5c      	itt	pl
   d6b74:	2201      	movpl	r2, #1
   d6b76:	601a      	strpl	r2, [r3, #0]
   d6b78:	4b16      	ldr	r3, [pc, #88]	; (d6bd4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d6b7a:	681a      	ldr	r2, [r3, #0]
   d6b7c:	07d1      	lsls	r1, r2, #31
   d6b7e:	bf5c      	itt	pl
   d6b80:	2201      	movpl	r2, #1
   d6b82:	601a      	strpl	r2, [r3, #0]
   d6b84:	4b14      	ldr	r3, [pc, #80]	; (d6bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d6b86:	681a      	ldr	r2, [r3, #0]
   d6b88:	07d2      	lsls	r2, r2, #31
   d6b8a:	bf5c      	itt	pl
   d6b8c:	2201      	movpl	r2, #1
   d6b8e:	601a      	strpl	r2, [r3, #0]
   d6b90:	4b12      	ldr	r3, [pc, #72]	; (d6bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d6b92:	681a      	ldr	r2, [r3, #0]
   d6b94:	07d0      	lsls	r0, r2, #31
   d6b96:	bf5c      	itt	pl
   d6b98:	2201      	movpl	r2, #1
   d6b9a:	601a      	strpl	r2, [r3, #0]
   d6b9c:	4b10      	ldr	r3, [pc, #64]	; (d6be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d6b9e:	681a      	ldr	r2, [r3, #0]
   d6ba0:	07d1      	lsls	r1, r2, #31
   d6ba2:	bf5c      	itt	pl
   d6ba4:	2201      	movpl	r2, #1
   d6ba6:	601a      	strpl	r2, [r3, #0]
   d6ba8:	4b0e      	ldr	r3, [pc, #56]	; (d6be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d6baa:	681a      	ldr	r2, [r3, #0]
   d6bac:	07d2      	lsls	r2, r2, #31
   d6bae:	bf5c      	itt	pl
   d6bb0:	2201      	movpl	r2, #1
   d6bb2:	601a      	strpl	r2, [r3, #0]
   d6bb4:	4770      	bx	lr
   d6bb6:	bf00      	nop
   d6bb8:	2003e7f0 	.word	0x2003e7f0
   d6bbc:	2003e7ec 	.word	0x2003e7ec
   d6bc0:	2003e7e8 	.word	0x2003e7e8
   d6bc4:	2003e7e4 	.word	0x2003e7e4
   d6bc8:	2003e7e0 	.word	0x2003e7e0
   d6bcc:	2003e7dc 	.word	0x2003e7dc
   d6bd0:	2003e7d8 	.word	0x2003e7d8
   d6bd4:	2003e7d4 	.word	0x2003e7d4
   d6bd8:	2003e7d0 	.word	0x2003e7d0
   d6bdc:	2003e7cc 	.word	0x2003e7cc
   d6be0:	2003e7c8 	.word	0x2003e7c8
   d6be4:	2003e7c4 	.word	0x2003e7c4

000d6be8 <__aeabi_drsub>:
   d6be8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6bec:	e002      	b.n	d6bf4 <__adddf3>
   d6bee:	bf00      	nop

000d6bf0 <__aeabi_dsub>:
   d6bf0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6bf4 <__adddf3>:
   d6bf4:	b530      	push	{r4, r5, lr}
   d6bf6:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d6bfa:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6bfe:	ea94 0f05 	teq	r4, r5
   d6c02:	bf08      	it	eq
   d6c04:	ea90 0f02 	teqeq	r0, r2
   d6c08:	bf1f      	itttt	ne
   d6c0a:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6c0e:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6c12:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d6c16:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6c1a:	f000 80e2 	beq.w	d6de2 <__adddf3+0x1ee>
   d6c1e:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6c22:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d6c26:	bfb8      	it	lt
   d6c28:	426d      	neglt	r5, r5
   d6c2a:	dd0c      	ble.n	d6c46 <__adddf3+0x52>
   d6c2c:	442c      	add	r4, r5
   d6c2e:	ea80 0202 	eor.w	r2, r0, r2
   d6c32:	ea81 0303 	eor.w	r3, r1, r3
   d6c36:	ea82 0000 	eor.w	r0, r2, r0
   d6c3a:	ea83 0101 	eor.w	r1, r3, r1
   d6c3e:	ea80 0202 	eor.w	r2, r0, r2
   d6c42:	ea81 0303 	eor.w	r3, r1, r3
   d6c46:	2d36      	cmp	r5, #54	; 0x36
   d6c48:	bf88      	it	hi
   d6c4a:	bd30      	pophi	{r4, r5, pc}
   d6c4c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6c50:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6c54:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d6c58:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6c5c:	d002      	beq.n	d6c64 <__adddf3+0x70>
   d6c5e:	4240      	negs	r0, r0
   d6c60:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6c64:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d6c68:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6c6c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d6c70:	d002      	beq.n	d6c78 <__adddf3+0x84>
   d6c72:	4252      	negs	r2, r2
   d6c74:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d6c78:	ea94 0f05 	teq	r4, r5
   d6c7c:	f000 80a7 	beq.w	d6dce <__adddf3+0x1da>
   d6c80:	f1a4 0401 	sub.w	r4, r4, #1
   d6c84:	f1d5 0e20 	rsbs	lr, r5, #32
   d6c88:	db0d      	blt.n	d6ca6 <__adddf3+0xb2>
   d6c8a:	fa02 fc0e 	lsl.w	ip, r2, lr
   d6c8e:	fa22 f205 	lsr.w	r2, r2, r5
   d6c92:	1880      	adds	r0, r0, r2
   d6c94:	f141 0100 	adc.w	r1, r1, #0
   d6c98:	fa03 f20e 	lsl.w	r2, r3, lr
   d6c9c:	1880      	adds	r0, r0, r2
   d6c9e:	fa43 f305 	asr.w	r3, r3, r5
   d6ca2:	4159      	adcs	r1, r3
   d6ca4:	e00e      	b.n	d6cc4 <__adddf3+0xd0>
   d6ca6:	f1a5 0520 	sub.w	r5, r5, #32
   d6caa:	f10e 0e20 	add.w	lr, lr, #32
   d6cae:	2a01      	cmp	r2, #1
   d6cb0:	fa03 fc0e 	lsl.w	ip, r3, lr
   d6cb4:	bf28      	it	cs
   d6cb6:	f04c 0c02 	orrcs.w	ip, ip, #2
   d6cba:	fa43 f305 	asr.w	r3, r3, r5
   d6cbe:	18c0      	adds	r0, r0, r3
   d6cc0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d6cc4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6cc8:	d507      	bpl.n	d6cda <__adddf3+0xe6>
   d6cca:	f04f 0e00 	mov.w	lr, #0
   d6cce:	f1dc 0c00 	rsbs	ip, ip, #0
   d6cd2:	eb7e 0000 	sbcs.w	r0, lr, r0
   d6cd6:	eb6e 0101 	sbc.w	r1, lr, r1
   d6cda:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6cde:	d31b      	bcc.n	d6d18 <__adddf3+0x124>
   d6ce0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6ce4:	d30c      	bcc.n	d6d00 <__adddf3+0x10c>
   d6ce6:	0849      	lsrs	r1, r1, #1
   d6ce8:	ea5f 0030 	movs.w	r0, r0, rrx
   d6cec:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6cf0:	f104 0401 	add.w	r4, r4, #1
   d6cf4:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d6cf8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6cfc:	f080 809a 	bcs.w	d6e34 <__adddf3+0x240>
   d6d00:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6d04:	bf08      	it	eq
   d6d06:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d6d0a:	f150 0000 	adcs.w	r0, r0, #0
   d6d0e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6d12:	ea41 0105 	orr.w	r1, r1, r5
   d6d16:	bd30      	pop	{r4, r5, pc}
   d6d18:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6d1c:	4140      	adcs	r0, r0
   d6d1e:	eb41 0101 	adc.w	r1, r1, r1
   d6d22:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d6d26:	f1a4 0401 	sub.w	r4, r4, #1
   d6d2a:	d1e9      	bne.n	d6d00 <__adddf3+0x10c>
   d6d2c:	f091 0f00 	teq	r1, #0
   d6d30:	bf04      	itt	eq
   d6d32:	4601      	moveq	r1, r0
   d6d34:	2000      	moveq	r0, #0
   d6d36:	fab1 f381 	clz	r3, r1
   d6d3a:	bf08      	it	eq
   d6d3c:	3320      	addeq	r3, #32
   d6d3e:	f1a3 030b 	sub.w	r3, r3, #11
   d6d42:	f1b3 0220 	subs.w	r2, r3, #32
   d6d46:	da0c      	bge.n	d6d62 <__adddf3+0x16e>
   d6d48:	320c      	adds	r2, #12
   d6d4a:	dd08      	ble.n	d6d5e <__adddf3+0x16a>
   d6d4c:	f102 0c14 	add.w	ip, r2, #20
   d6d50:	f1c2 020c 	rsb	r2, r2, #12
   d6d54:	fa01 f00c 	lsl.w	r0, r1, ip
   d6d58:	fa21 f102 	lsr.w	r1, r1, r2
   d6d5c:	e00c      	b.n	d6d78 <__adddf3+0x184>
   d6d5e:	f102 0214 	add.w	r2, r2, #20
   d6d62:	bfd8      	it	le
   d6d64:	f1c2 0c20 	rsble	ip, r2, #32
   d6d68:	fa01 f102 	lsl.w	r1, r1, r2
   d6d6c:	fa20 fc0c 	lsr.w	ip, r0, ip
   d6d70:	bfdc      	itt	le
   d6d72:	ea41 010c 	orrle.w	r1, r1, ip
   d6d76:	4090      	lslle	r0, r2
   d6d78:	1ae4      	subs	r4, r4, r3
   d6d7a:	bfa2      	ittt	ge
   d6d7c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d6d80:	4329      	orrge	r1, r5
   d6d82:	bd30      	popge	{r4, r5, pc}
   d6d84:	ea6f 0404 	mvn.w	r4, r4
   d6d88:	3c1f      	subs	r4, #31
   d6d8a:	da1c      	bge.n	d6dc6 <__adddf3+0x1d2>
   d6d8c:	340c      	adds	r4, #12
   d6d8e:	dc0e      	bgt.n	d6dae <__adddf3+0x1ba>
   d6d90:	f104 0414 	add.w	r4, r4, #20
   d6d94:	f1c4 0220 	rsb	r2, r4, #32
   d6d98:	fa20 f004 	lsr.w	r0, r0, r4
   d6d9c:	fa01 f302 	lsl.w	r3, r1, r2
   d6da0:	ea40 0003 	orr.w	r0, r0, r3
   d6da4:	fa21 f304 	lsr.w	r3, r1, r4
   d6da8:	ea45 0103 	orr.w	r1, r5, r3
   d6dac:	bd30      	pop	{r4, r5, pc}
   d6dae:	f1c4 040c 	rsb	r4, r4, #12
   d6db2:	f1c4 0220 	rsb	r2, r4, #32
   d6db6:	fa20 f002 	lsr.w	r0, r0, r2
   d6dba:	fa01 f304 	lsl.w	r3, r1, r4
   d6dbe:	ea40 0003 	orr.w	r0, r0, r3
   d6dc2:	4629      	mov	r1, r5
   d6dc4:	bd30      	pop	{r4, r5, pc}
   d6dc6:	fa21 f004 	lsr.w	r0, r1, r4
   d6dca:	4629      	mov	r1, r5
   d6dcc:	bd30      	pop	{r4, r5, pc}
   d6dce:	f094 0f00 	teq	r4, #0
   d6dd2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d6dd6:	bf06      	itte	eq
   d6dd8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6ddc:	3401      	addeq	r4, #1
   d6dde:	3d01      	subne	r5, #1
   d6de0:	e74e      	b.n	d6c80 <__adddf3+0x8c>
   d6de2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6de6:	bf18      	it	ne
   d6de8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6dec:	d029      	beq.n	d6e42 <__adddf3+0x24e>
   d6dee:	ea94 0f05 	teq	r4, r5
   d6df2:	bf08      	it	eq
   d6df4:	ea90 0f02 	teqeq	r0, r2
   d6df8:	d005      	beq.n	d6e06 <__adddf3+0x212>
   d6dfa:	ea54 0c00 	orrs.w	ip, r4, r0
   d6dfe:	bf04      	itt	eq
   d6e00:	4619      	moveq	r1, r3
   d6e02:	4610      	moveq	r0, r2
   d6e04:	bd30      	pop	{r4, r5, pc}
   d6e06:	ea91 0f03 	teq	r1, r3
   d6e0a:	bf1e      	ittt	ne
   d6e0c:	2100      	movne	r1, #0
   d6e0e:	2000      	movne	r0, #0
   d6e10:	bd30      	popne	{r4, r5, pc}
   d6e12:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d6e16:	d105      	bne.n	d6e24 <__adddf3+0x230>
   d6e18:	0040      	lsls	r0, r0, #1
   d6e1a:	4149      	adcs	r1, r1
   d6e1c:	bf28      	it	cs
   d6e1e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6e22:	bd30      	pop	{r4, r5, pc}
   d6e24:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d6e28:	bf3c      	itt	cc
   d6e2a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6e2e:	bd30      	popcc	{r4, r5, pc}
   d6e30:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6e34:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d6e38:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6e3c:	f04f 0000 	mov.w	r0, #0
   d6e40:	bd30      	pop	{r4, r5, pc}
   d6e42:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d6e46:	bf1a      	itte	ne
   d6e48:	4619      	movne	r1, r3
   d6e4a:	4610      	movne	r0, r2
   d6e4c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6e50:	bf1c      	itt	ne
   d6e52:	460b      	movne	r3, r1
   d6e54:	4602      	movne	r2, r0
   d6e56:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d6e5a:	bf06      	itte	eq
   d6e5c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6e60:	ea91 0f03 	teqeq	r1, r3
   d6e64:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d6e68:	bd30      	pop	{r4, r5, pc}
   d6e6a:	bf00      	nop

000d6e6c <__aeabi_ui2d>:
   d6e6c:	f090 0f00 	teq	r0, #0
   d6e70:	bf04      	itt	eq
   d6e72:	2100      	moveq	r1, #0
   d6e74:	4770      	bxeq	lr
   d6e76:	b530      	push	{r4, r5, lr}
   d6e78:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e7c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6e80:	f04f 0500 	mov.w	r5, #0
   d6e84:	f04f 0100 	mov.w	r1, #0
   d6e88:	e750      	b.n	d6d2c <__adddf3+0x138>
   d6e8a:	bf00      	nop

000d6e8c <__aeabi_i2d>:
   d6e8c:	f090 0f00 	teq	r0, #0
   d6e90:	bf04      	itt	eq
   d6e92:	2100      	moveq	r1, #0
   d6e94:	4770      	bxeq	lr
   d6e96:	b530      	push	{r4, r5, lr}
   d6e98:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6e9c:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6ea0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d6ea4:	bf48      	it	mi
   d6ea6:	4240      	negmi	r0, r0
   d6ea8:	f04f 0100 	mov.w	r1, #0
   d6eac:	e73e      	b.n	d6d2c <__adddf3+0x138>
   d6eae:	bf00      	nop

000d6eb0 <__aeabi_f2d>:
   d6eb0:	0042      	lsls	r2, r0, #1
   d6eb2:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d6eb6:	ea4f 0131 	mov.w	r1, r1, rrx
   d6eba:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d6ebe:	bf1f      	itttt	ne
   d6ec0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d6ec4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6ec8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6ecc:	4770      	bxne	lr
   d6ece:	f092 0f00 	teq	r2, #0
   d6ed2:	bf14      	ite	ne
   d6ed4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d6ed8:	4770      	bxeq	lr
   d6eda:	b530      	push	{r4, r5, lr}
   d6edc:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6ee0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6ee4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d6ee8:	e720      	b.n	d6d2c <__adddf3+0x138>
   d6eea:	bf00      	nop

000d6eec <__aeabi_ul2d>:
   d6eec:	ea50 0201 	orrs.w	r2, r0, r1
   d6ef0:	bf08      	it	eq
   d6ef2:	4770      	bxeq	lr
   d6ef4:	b530      	push	{r4, r5, lr}
   d6ef6:	f04f 0500 	mov.w	r5, #0
   d6efa:	e00a      	b.n	d6f12 <__aeabi_l2d+0x16>

000d6efc <__aeabi_l2d>:
   d6efc:	ea50 0201 	orrs.w	r2, r0, r1
   d6f00:	bf08      	it	eq
   d6f02:	4770      	bxeq	lr
   d6f04:	b530      	push	{r4, r5, lr}
   d6f06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d6f0a:	d502      	bpl.n	d6f12 <__aeabi_l2d+0x16>
   d6f0c:	4240      	negs	r0, r0
   d6f0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6f12:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d6f16:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d6f1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6f1e:	f43f aedc 	beq.w	d6cda <__adddf3+0xe6>
   d6f22:	f04f 0203 	mov.w	r2, #3
   d6f26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f2a:	bf18      	it	ne
   d6f2c:	3203      	addne	r2, #3
   d6f2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6f32:	bf18      	it	ne
   d6f34:	3203      	addne	r2, #3
   d6f36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d6f3a:	f1c2 0320 	rsb	r3, r2, #32
   d6f3e:	fa00 fc03 	lsl.w	ip, r0, r3
   d6f42:	fa20 f002 	lsr.w	r0, r0, r2
   d6f46:	fa01 fe03 	lsl.w	lr, r1, r3
   d6f4a:	ea40 000e 	orr.w	r0, r0, lr
   d6f4e:	fa21 f102 	lsr.w	r1, r1, r2
   d6f52:	4414      	add	r4, r2
   d6f54:	e6c1      	b.n	d6cda <__adddf3+0xe6>
   d6f56:	bf00      	nop

000d6f58 <__aeabi_dmul>:
   d6f58:	b570      	push	{r4, r5, r6, lr}
   d6f5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6f5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6f62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d6f66:	bf1d      	ittte	ne
   d6f68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d6f6c:	ea94 0f0c 	teqne	r4, ip
   d6f70:	ea95 0f0c 	teqne	r5, ip
   d6f74:	f000 f8de 	bleq	d7134 <__aeabi_dmul+0x1dc>
   d6f78:	442c      	add	r4, r5
   d6f7a:	ea81 0603 	eor.w	r6, r1, r3
   d6f7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d6f82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d6f86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d6f8a:	bf18      	it	ne
   d6f8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d6f90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6f94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d6f98:	d038      	beq.n	d700c <__aeabi_dmul+0xb4>
   d6f9a:	fba0 ce02 	umull	ip, lr, r0, r2
   d6f9e:	f04f 0500 	mov.w	r5, #0
   d6fa2:	fbe1 e502 	umlal	lr, r5, r1, r2
   d6fa6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d6faa:	fbe0 e503 	umlal	lr, r5, r0, r3
   d6fae:	f04f 0600 	mov.w	r6, #0
   d6fb2:	fbe1 5603 	umlal	r5, r6, r1, r3
   d6fb6:	f09c 0f00 	teq	ip, #0
   d6fba:	bf18      	it	ne
   d6fbc:	f04e 0e01 	orrne.w	lr, lr, #1
   d6fc0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d6fc4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d6fc8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6fcc:	d204      	bcs.n	d6fd8 <__aeabi_dmul+0x80>
   d6fce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6fd2:	416d      	adcs	r5, r5
   d6fd4:	eb46 0606 	adc.w	r6, r6, r6
   d6fd8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6fdc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6fe0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6fe4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d6fe8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6fec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6ff0:	bf88      	it	hi
   d6ff2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6ff6:	d81e      	bhi.n	d7036 <__aeabi_dmul+0xde>
   d6ff8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6ffc:	bf08      	it	eq
   d6ffe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d7002:	f150 0000 	adcs.w	r0, r0, #0
   d7006:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d700a:	bd70      	pop	{r4, r5, r6, pc}
   d700c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d7010:	ea46 0101 	orr.w	r1, r6, r1
   d7014:	ea40 0002 	orr.w	r0, r0, r2
   d7018:	ea81 0103 	eor.w	r1, r1, r3
   d701c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d7020:	bfc2      	ittt	gt
   d7022:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7026:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d702a:	bd70      	popgt	{r4, r5, r6, pc}
   d702c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d7030:	f04f 0e00 	mov.w	lr, #0
   d7034:	3c01      	subs	r4, #1
   d7036:	f300 80ab 	bgt.w	d7190 <__aeabi_dmul+0x238>
   d703a:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d703e:	bfde      	ittt	le
   d7040:	2000      	movle	r0, #0
   d7042:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d7046:	bd70      	pople	{r4, r5, r6, pc}
   d7048:	f1c4 0400 	rsb	r4, r4, #0
   d704c:	3c20      	subs	r4, #32
   d704e:	da35      	bge.n	d70bc <__aeabi_dmul+0x164>
   d7050:	340c      	adds	r4, #12
   d7052:	dc1b      	bgt.n	d708c <__aeabi_dmul+0x134>
   d7054:	f104 0414 	add.w	r4, r4, #20
   d7058:	f1c4 0520 	rsb	r5, r4, #32
   d705c:	fa00 f305 	lsl.w	r3, r0, r5
   d7060:	fa20 f004 	lsr.w	r0, r0, r4
   d7064:	fa01 f205 	lsl.w	r2, r1, r5
   d7068:	ea40 0002 	orr.w	r0, r0, r2
   d706c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d7070:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d7074:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d7078:	fa21 f604 	lsr.w	r6, r1, r4
   d707c:	eb42 0106 	adc.w	r1, r2, r6
   d7080:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d7084:	bf08      	it	eq
   d7086:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d708a:	bd70      	pop	{r4, r5, r6, pc}
   d708c:	f1c4 040c 	rsb	r4, r4, #12
   d7090:	f1c4 0520 	rsb	r5, r4, #32
   d7094:	fa00 f304 	lsl.w	r3, r0, r4
   d7098:	fa20 f005 	lsr.w	r0, r0, r5
   d709c:	fa01 f204 	lsl.w	r2, r1, r4
   d70a0:	ea40 0002 	orr.w	r0, r0, r2
   d70a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d70ac:	f141 0100 	adc.w	r1, r1, #0
   d70b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d70b4:	bf08      	it	eq
   d70b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70ba:	bd70      	pop	{r4, r5, r6, pc}
   d70bc:	f1c4 0520 	rsb	r5, r4, #32
   d70c0:	fa00 f205 	lsl.w	r2, r0, r5
   d70c4:	ea4e 0e02 	orr.w	lr, lr, r2
   d70c8:	fa20 f304 	lsr.w	r3, r0, r4
   d70cc:	fa01 f205 	lsl.w	r2, r1, r5
   d70d0:	ea43 0302 	orr.w	r3, r3, r2
   d70d4:	fa21 f004 	lsr.w	r0, r1, r4
   d70d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d70dc:	fa21 f204 	lsr.w	r2, r1, r4
   d70e0:	ea20 0002 	bic.w	r0, r0, r2
   d70e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d70e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d70ec:	bf08      	it	eq
   d70ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d70f2:	bd70      	pop	{r4, r5, r6, pc}
   d70f4:	f094 0f00 	teq	r4, #0
   d70f8:	d10f      	bne.n	d711a <__aeabi_dmul+0x1c2>
   d70fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d70fe:	0040      	lsls	r0, r0, #1
   d7100:	eb41 0101 	adc.w	r1, r1, r1
   d7104:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d7108:	bf08      	it	eq
   d710a:	3c01      	subeq	r4, #1
   d710c:	d0f7      	beq.n	d70fe <__aeabi_dmul+0x1a6>
   d710e:	ea41 0106 	orr.w	r1, r1, r6
   d7112:	f095 0f00 	teq	r5, #0
   d7116:	bf18      	it	ne
   d7118:	4770      	bxne	lr
   d711a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d711e:	0052      	lsls	r2, r2, #1
   d7120:	eb43 0303 	adc.w	r3, r3, r3
   d7124:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d7128:	bf08      	it	eq
   d712a:	3d01      	subeq	r5, #1
   d712c:	d0f7      	beq.n	d711e <__aeabi_dmul+0x1c6>
   d712e:	ea43 0306 	orr.w	r3, r3, r6
   d7132:	4770      	bx	lr
   d7134:	ea94 0f0c 	teq	r4, ip
   d7138:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d713c:	bf18      	it	ne
   d713e:	ea95 0f0c 	teqne	r5, ip
   d7142:	d00c      	beq.n	d715e <__aeabi_dmul+0x206>
   d7144:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7148:	bf18      	it	ne
   d714a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d714e:	d1d1      	bne.n	d70f4 <__aeabi_dmul+0x19c>
   d7150:	ea81 0103 	eor.w	r1, r1, r3
   d7154:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7158:	f04f 0000 	mov.w	r0, #0
   d715c:	bd70      	pop	{r4, r5, r6, pc}
   d715e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7162:	bf06      	itte	eq
   d7164:	4610      	moveq	r0, r2
   d7166:	4619      	moveq	r1, r3
   d7168:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d716c:	d019      	beq.n	d71a2 <__aeabi_dmul+0x24a>
   d716e:	ea94 0f0c 	teq	r4, ip
   d7172:	d102      	bne.n	d717a <__aeabi_dmul+0x222>
   d7174:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d7178:	d113      	bne.n	d71a2 <__aeabi_dmul+0x24a>
   d717a:	ea95 0f0c 	teq	r5, ip
   d717e:	d105      	bne.n	d718c <__aeabi_dmul+0x234>
   d7180:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d7184:	bf1c      	itt	ne
   d7186:	4610      	movne	r0, r2
   d7188:	4619      	movne	r1, r3
   d718a:	d10a      	bne.n	d71a2 <__aeabi_dmul+0x24a>
   d718c:	ea81 0103 	eor.w	r1, r1, r3
   d7190:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d7194:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d7198:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d719c:	f04f 0000 	mov.w	r0, #0
   d71a0:	bd70      	pop	{r4, r5, r6, pc}
   d71a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d71a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d71aa:	bd70      	pop	{r4, r5, r6, pc}

000d71ac <__aeabi_ddiv>:
   d71ac:	b570      	push	{r4, r5, r6, lr}
   d71ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d71b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d71b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d71ba:	bf1d      	ittte	ne
   d71bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d71c0:	ea94 0f0c 	teqne	r4, ip
   d71c4:	ea95 0f0c 	teqne	r5, ip
   d71c8:	f000 f8a7 	bleq	d731a <__aeabi_ddiv+0x16e>
   d71cc:	eba4 0405 	sub.w	r4, r4, r5
   d71d0:	ea81 0e03 	eor.w	lr, r1, r3
   d71d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d71d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d71dc:	f000 8088 	beq.w	d72f0 <__aeabi_ddiv+0x144>
   d71e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d71e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d71e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d71ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d71f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d71f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d71f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d71fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d7200:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d7204:	429d      	cmp	r5, r3
   d7206:	bf08      	it	eq
   d7208:	4296      	cmpeq	r6, r2
   d720a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d720e:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d7212:	d202      	bcs.n	d721a <__aeabi_ddiv+0x6e>
   d7214:	085b      	lsrs	r3, r3, #1
   d7216:	ea4f 0232 	mov.w	r2, r2, rrx
   d721a:	1ab6      	subs	r6, r6, r2
   d721c:	eb65 0503 	sbc.w	r5, r5, r3
   d7220:	085b      	lsrs	r3, r3, #1
   d7222:	ea4f 0232 	mov.w	r2, r2, rrx
   d7226:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d722a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d722e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7232:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7236:	bf22      	ittt	cs
   d7238:	1ab6      	subcs	r6, r6, r2
   d723a:	4675      	movcs	r5, lr
   d723c:	ea40 000c 	orrcs.w	r0, r0, ip
   d7240:	085b      	lsrs	r3, r3, #1
   d7242:	ea4f 0232 	mov.w	r2, r2, rrx
   d7246:	ebb6 0e02 	subs.w	lr, r6, r2
   d724a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d724e:	bf22      	ittt	cs
   d7250:	1ab6      	subcs	r6, r6, r2
   d7252:	4675      	movcs	r5, lr
   d7254:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d7258:	085b      	lsrs	r3, r3, #1
   d725a:	ea4f 0232 	mov.w	r2, r2, rrx
   d725e:	ebb6 0e02 	subs.w	lr, r6, r2
   d7262:	eb75 0e03 	sbcs.w	lr, r5, r3
   d7266:	bf22      	ittt	cs
   d7268:	1ab6      	subcs	r6, r6, r2
   d726a:	4675      	movcs	r5, lr
   d726c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d7270:	085b      	lsrs	r3, r3, #1
   d7272:	ea4f 0232 	mov.w	r2, r2, rrx
   d7276:	ebb6 0e02 	subs.w	lr, r6, r2
   d727a:	eb75 0e03 	sbcs.w	lr, r5, r3
   d727e:	bf22      	ittt	cs
   d7280:	1ab6      	subcs	r6, r6, r2
   d7282:	4675      	movcs	r5, lr
   d7284:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d7288:	ea55 0e06 	orrs.w	lr, r5, r6
   d728c:	d018      	beq.n	d72c0 <__aeabi_ddiv+0x114>
   d728e:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d7292:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d7296:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d729a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d729e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d72a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d72a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d72aa:	d1c0      	bne.n	d722e <__aeabi_ddiv+0x82>
   d72ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72b0:	d10b      	bne.n	d72ca <__aeabi_ddiv+0x11e>
   d72b2:	ea41 0100 	orr.w	r1, r1, r0
   d72b6:	f04f 0000 	mov.w	r0, #0
   d72ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d72be:	e7b6      	b.n	d722e <__aeabi_ddiv+0x82>
   d72c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d72c4:	bf04      	itt	eq
   d72c6:	4301      	orreq	r1, r0
   d72c8:	2000      	moveq	r0, #0
   d72ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d72ce:	bf88      	it	hi
   d72d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d72d4:	f63f aeaf 	bhi.w	d7036 <__aeabi_dmul+0xde>
   d72d8:	ebb5 0c03 	subs.w	ip, r5, r3
   d72dc:	bf04      	itt	eq
   d72de:	ebb6 0c02 	subseq.w	ip, r6, r2
   d72e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d72e6:	f150 0000 	adcs.w	r0, r0, #0
   d72ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d72ee:	bd70      	pop	{r4, r5, r6, pc}
   d72f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d72f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d72f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d72fc:	bfc2      	ittt	gt
   d72fe:	ebd4 050c 	rsbsgt	r5, r4, ip
   d7302:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d7306:	bd70      	popgt	{r4, r5, r6, pc}
   d7308:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d730c:	f04f 0e00 	mov.w	lr, #0
   d7310:	3c01      	subs	r4, #1
   d7312:	e690      	b.n	d7036 <__aeabi_dmul+0xde>
   d7314:	ea45 0e06 	orr.w	lr, r5, r6
   d7318:	e68d      	b.n	d7036 <__aeabi_dmul+0xde>
   d731a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d731e:	ea94 0f0c 	teq	r4, ip
   d7322:	bf08      	it	eq
   d7324:	ea95 0f0c 	teqeq	r5, ip
   d7328:	f43f af3b 	beq.w	d71a2 <__aeabi_dmul+0x24a>
   d732c:	ea94 0f0c 	teq	r4, ip
   d7330:	d10a      	bne.n	d7348 <__aeabi_ddiv+0x19c>
   d7332:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d7336:	f47f af34 	bne.w	d71a2 <__aeabi_dmul+0x24a>
   d733a:	ea95 0f0c 	teq	r5, ip
   d733e:	f47f af25 	bne.w	d718c <__aeabi_dmul+0x234>
   d7342:	4610      	mov	r0, r2
   d7344:	4619      	mov	r1, r3
   d7346:	e72c      	b.n	d71a2 <__aeabi_dmul+0x24a>
   d7348:	ea95 0f0c 	teq	r5, ip
   d734c:	d106      	bne.n	d735c <__aeabi_ddiv+0x1b0>
   d734e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d7352:	f43f aefd 	beq.w	d7150 <__aeabi_dmul+0x1f8>
   d7356:	4610      	mov	r0, r2
   d7358:	4619      	mov	r1, r3
   d735a:	e722      	b.n	d71a2 <__aeabi_dmul+0x24a>
   d735c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d7360:	bf18      	it	ne
   d7362:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d7366:	f47f aec5 	bne.w	d70f4 <__aeabi_dmul+0x19c>
   d736a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d736e:	f47f af0d 	bne.w	d718c <__aeabi_dmul+0x234>
   d7372:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d7376:	f47f aeeb 	bne.w	d7150 <__aeabi_dmul+0x1f8>
   d737a:	e712      	b.n	d71a2 <__aeabi_dmul+0x24a>

000d737c <__gedf2>:
   d737c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d7380:	e006      	b.n	d7390 <__cmpdf2+0x4>
   d7382:	bf00      	nop

000d7384 <__ledf2>:
   d7384:	f04f 0c01 	mov.w	ip, #1
   d7388:	e002      	b.n	d7390 <__cmpdf2+0x4>
   d738a:	bf00      	nop

000d738c <__cmpdf2>:
   d738c:	f04f 0c01 	mov.w	ip, #1
   d7390:	f84d cd04 	str.w	ip, [sp, #-4]!
   d7394:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d7398:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d739c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d73a0:	bf18      	it	ne
   d73a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d73a6:	d01b      	beq.n	d73e0 <__cmpdf2+0x54>
   d73a8:	b001      	add	sp, #4
   d73aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d73ae:	bf0c      	ite	eq
   d73b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d73b4:	ea91 0f03 	teqne	r1, r3
   d73b8:	bf02      	ittt	eq
   d73ba:	ea90 0f02 	teqeq	r0, r2
   d73be:	2000      	moveq	r0, #0
   d73c0:	4770      	bxeq	lr
   d73c2:	f110 0f00 	cmn.w	r0, #0
   d73c6:	ea91 0f03 	teq	r1, r3
   d73ca:	bf58      	it	pl
   d73cc:	4299      	cmppl	r1, r3
   d73ce:	bf08      	it	eq
   d73d0:	4290      	cmpeq	r0, r2
   d73d2:	bf2c      	ite	cs
   d73d4:	17d8      	asrcs	r0, r3, #31
   d73d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d73da:	f040 0001 	orr.w	r0, r0, #1
   d73de:	4770      	bx	lr
   d73e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d73e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d73e8:	d102      	bne.n	d73f0 <__cmpdf2+0x64>
   d73ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d73ee:	d107      	bne.n	d7400 <__cmpdf2+0x74>
   d73f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d73f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d73f8:	d1d6      	bne.n	d73a8 <__cmpdf2+0x1c>
   d73fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d73fe:	d0d3      	beq.n	d73a8 <__cmpdf2+0x1c>
   d7400:	f85d 0b04 	ldr.w	r0, [sp], #4
   d7404:	4770      	bx	lr
   d7406:	bf00      	nop

000d7408 <__aeabi_cdrcmple>:
   d7408:	4684      	mov	ip, r0
   d740a:	4610      	mov	r0, r2
   d740c:	4662      	mov	r2, ip
   d740e:	468c      	mov	ip, r1
   d7410:	4619      	mov	r1, r3
   d7412:	4663      	mov	r3, ip
   d7414:	e000      	b.n	d7418 <__aeabi_cdcmpeq>
   d7416:	bf00      	nop

000d7418 <__aeabi_cdcmpeq>:
   d7418:	b501      	push	{r0, lr}
   d741a:	f7ff ffb7 	bl	d738c <__cmpdf2>
   d741e:	2800      	cmp	r0, #0
   d7420:	bf48      	it	mi
   d7422:	f110 0f00 	cmnmi.w	r0, #0
   d7426:	bd01      	pop	{r0, pc}

000d7428 <__aeabi_dcmpeq>:
   d7428:	f84d ed08 	str.w	lr, [sp, #-8]!
   d742c:	f7ff fff4 	bl	d7418 <__aeabi_cdcmpeq>
   d7430:	bf0c      	ite	eq
   d7432:	2001      	moveq	r0, #1
   d7434:	2000      	movne	r0, #0
   d7436:	f85d fb08 	ldr.w	pc, [sp], #8
   d743a:	bf00      	nop

000d743c <__aeabi_dcmplt>:
   d743c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7440:	f7ff ffea 	bl	d7418 <__aeabi_cdcmpeq>
   d7444:	bf34      	ite	cc
   d7446:	2001      	movcc	r0, #1
   d7448:	2000      	movcs	r0, #0
   d744a:	f85d fb08 	ldr.w	pc, [sp], #8
   d744e:	bf00      	nop

000d7450 <__aeabi_dcmple>:
   d7450:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7454:	f7ff ffe0 	bl	d7418 <__aeabi_cdcmpeq>
   d7458:	bf94      	ite	ls
   d745a:	2001      	movls	r0, #1
   d745c:	2000      	movhi	r0, #0
   d745e:	f85d fb08 	ldr.w	pc, [sp], #8
   d7462:	bf00      	nop

000d7464 <__aeabi_dcmpge>:
   d7464:	f84d ed08 	str.w	lr, [sp, #-8]!
   d7468:	f7ff ffce 	bl	d7408 <__aeabi_cdrcmple>
   d746c:	bf94      	ite	ls
   d746e:	2001      	movls	r0, #1
   d7470:	2000      	movhi	r0, #0
   d7472:	f85d fb08 	ldr.w	pc, [sp], #8
   d7476:	bf00      	nop

000d7478 <__aeabi_dcmpgt>:
   d7478:	f84d ed08 	str.w	lr, [sp, #-8]!
   d747c:	f7ff ffc4 	bl	d7408 <__aeabi_cdrcmple>
   d7480:	bf34      	ite	cc
   d7482:	2001      	movcc	r0, #1
   d7484:	2000      	movcs	r0, #0
   d7486:	f85d fb08 	ldr.w	pc, [sp], #8
   d748a:	bf00      	nop

000d748c <__aeabi_d2uiz>:
   d748c:	004a      	lsls	r2, r1, #1
   d748e:	d211      	bcs.n	d74b4 <__aeabi_d2uiz+0x28>
   d7490:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d7494:	d211      	bcs.n	d74ba <__aeabi_d2uiz+0x2e>
   d7496:	d50d      	bpl.n	d74b4 <__aeabi_d2uiz+0x28>
   d7498:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d749c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d74a0:	d40e      	bmi.n	d74c0 <__aeabi_d2uiz+0x34>
   d74a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d74a6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d74aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d74ae:	fa23 f002 	lsr.w	r0, r3, r2
   d74b2:	4770      	bx	lr
   d74b4:	f04f 0000 	mov.w	r0, #0
   d74b8:	4770      	bx	lr
   d74ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d74be:	d102      	bne.n	d74c6 <__aeabi_d2uiz+0x3a>
   d74c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d74c4:	4770      	bx	lr
   d74c6:	f04f 0000 	mov.w	r0, #0
   d74ca:	4770      	bx	lr

000d74cc <__aeabi_uldivmod>:
   d74cc:	b953      	cbnz	r3, d74e4 <__aeabi_uldivmod+0x18>
   d74ce:	b94a      	cbnz	r2, d74e4 <__aeabi_uldivmod+0x18>
   d74d0:	2900      	cmp	r1, #0
   d74d2:	bf08      	it	eq
   d74d4:	2800      	cmpeq	r0, #0
   d74d6:	bf1c      	itt	ne
   d74d8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d74dc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d74e0:	f000 b97e 	b.w	d77e0 <__aeabi_idiv0>
   d74e4:	f1ad 0c08 	sub.w	ip, sp, #8
   d74e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d74ec:	f000 f806 	bl	d74fc <__udivmoddi4>
   d74f0:	f8dd e004 	ldr.w	lr, [sp, #4]
   d74f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d74f8:	b004      	add	sp, #16
   d74fa:	4770      	bx	lr

000d74fc <__udivmoddi4>:
   d74fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d7500:	468c      	mov	ip, r1
   d7502:	460e      	mov	r6, r1
   d7504:	4604      	mov	r4, r0
   d7506:	9d08      	ldr	r5, [sp, #32]
   d7508:	2b00      	cmp	r3, #0
   d750a:	d150      	bne.n	d75ae <__udivmoddi4+0xb2>
   d750c:	428a      	cmp	r2, r1
   d750e:	4617      	mov	r7, r2
   d7510:	d96c      	bls.n	d75ec <__udivmoddi4+0xf0>
   d7512:	fab2 fe82 	clz	lr, r2
   d7516:	f1be 0f00 	cmp.w	lr, #0
   d751a:	d00b      	beq.n	d7534 <__udivmoddi4+0x38>
   d751c:	f1ce 0420 	rsb	r4, lr, #32
   d7520:	fa20 f404 	lsr.w	r4, r0, r4
   d7524:	fa01 f60e 	lsl.w	r6, r1, lr
   d7528:	ea44 0c06 	orr.w	ip, r4, r6
   d752c:	fa02 f70e 	lsl.w	r7, r2, lr
   d7530:	fa00 f40e 	lsl.w	r4, r0, lr
   d7534:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d7538:	0c22      	lsrs	r2, r4, #16
   d753a:	fbbc f0f9 	udiv	r0, ip, r9
   d753e:	fa1f f887 	uxth.w	r8, r7
   d7542:	fb09 c610 	mls	r6, r9, r0, ip
   d7546:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d754a:	fb00 f308 	mul.w	r3, r0, r8
   d754e:	42b3      	cmp	r3, r6
   d7550:	d909      	bls.n	d7566 <__udivmoddi4+0x6a>
   d7552:	19f6      	adds	r6, r6, r7
   d7554:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d7558:	f080 8122 	bcs.w	d77a0 <__udivmoddi4+0x2a4>
   d755c:	42b3      	cmp	r3, r6
   d755e:	f240 811f 	bls.w	d77a0 <__udivmoddi4+0x2a4>
   d7562:	3802      	subs	r0, #2
   d7564:	443e      	add	r6, r7
   d7566:	1af6      	subs	r6, r6, r3
   d7568:	b2a2      	uxth	r2, r4
   d756a:	fbb6 f3f9 	udiv	r3, r6, r9
   d756e:	fb09 6613 	mls	r6, r9, r3, r6
   d7572:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d7576:	fb03 f808 	mul.w	r8, r3, r8
   d757a:	45a0      	cmp	r8, r4
   d757c:	d909      	bls.n	d7592 <__udivmoddi4+0x96>
   d757e:	19e4      	adds	r4, r4, r7
   d7580:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d7584:	f080 810a 	bcs.w	d779c <__udivmoddi4+0x2a0>
   d7588:	45a0      	cmp	r8, r4
   d758a:	f240 8107 	bls.w	d779c <__udivmoddi4+0x2a0>
   d758e:	3b02      	subs	r3, #2
   d7590:	443c      	add	r4, r7
   d7592:	ebc8 0404 	rsb	r4, r8, r4
   d7596:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d759a:	2100      	movs	r1, #0
   d759c:	2d00      	cmp	r5, #0
   d759e:	d062      	beq.n	d7666 <__udivmoddi4+0x16a>
   d75a0:	fa24 f40e 	lsr.w	r4, r4, lr
   d75a4:	2300      	movs	r3, #0
   d75a6:	602c      	str	r4, [r5, #0]
   d75a8:	606b      	str	r3, [r5, #4]
   d75aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d75ae:	428b      	cmp	r3, r1
   d75b0:	d907      	bls.n	d75c2 <__udivmoddi4+0xc6>
   d75b2:	2d00      	cmp	r5, #0
   d75b4:	d055      	beq.n	d7662 <__udivmoddi4+0x166>
   d75b6:	2100      	movs	r1, #0
   d75b8:	e885 0041 	stmia.w	r5, {r0, r6}
   d75bc:	4608      	mov	r0, r1
   d75be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d75c2:	fab3 f183 	clz	r1, r3
   d75c6:	2900      	cmp	r1, #0
   d75c8:	f040 8090 	bne.w	d76ec <__udivmoddi4+0x1f0>
   d75cc:	42b3      	cmp	r3, r6
   d75ce:	d302      	bcc.n	d75d6 <__udivmoddi4+0xda>
   d75d0:	4282      	cmp	r2, r0
   d75d2:	f200 80f8 	bhi.w	d77c6 <__udivmoddi4+0x2ca>
   d75d6:	1a84      	subs	r4, r0, r2
   d75d8:	eb66 0603 	sbc.w	r6, r6, r3
   d75dc:	2001      	movs	r0, #1
   d75de:	46b4      	mov	ip, r6
   d75e0:	2d00      	cmp	r5, #0
   d75e2:	d040      	beq.n	d7666 <__udivmoddi4+0x16a>
   d75e4:	e885 1010 	stmia.w	r5, {r4, ip}
   d75e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d75ec:	b912      	cbnz	r2, d75f4 <__udivmoddi4+0xf8>
   d75ee:	2701      	movs	r7, #1
   d75f0:	fbb7 f7f2 	udiv	r7, r7, r2
   d75f4:	fab7 fe87 	clz	lr, r7
   d75f8:	f1be 0f00 	cmp.w	lr, #0
   d75fc:	d135      	bne.n	d766a <__udivmoddi4+0x16e>
   d75fe:	1bf3      	subs	r3, r6, r7
   d7600:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d7604:	fa1f fc87 	uxth.w	ip, r7
   d7608:	2101      	movs	r1, #1
   d760a:	fbb3 f0f8 	udiv	r0, r3, r8
   d760e:	0c22      	lsrs	r2, r4, #16
   d7610:	fb08 3610 	mls	r6, r8, r0, r3
   d7614:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d7618:	fb0c f300 	mul.w	r3, ip, r0
   d761c:	42b3      	cmp	r3, r6
   d761e:	d907      	bls.n	d7630 <__udivmoddi4+0x134>
   d7620:	19f6      	adds	r6, r6, r7
   d7622:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d7626:	d202      	bcs.n	d762e <__udivmoddi4+0x132>
   d7628:	42b3      	cmp	r3, r6
   d762a:	f200 80ce 	bhi.w	d77ca <__udivmoddi4+0x2ce>
   d762e:	4610      	mov	r0, r2
   d7630:	1af6      	subs	r6, r6, r3
   d7632:	b2a2      	uxth	r2, r4
   d7634:	fbb6 f3f8 	udiv	r3, r6, r8
   d7638:	fb08 6613 	mls	r6, r8, r3, r6
   d763c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d7640:	fb0c fc03 	mul.w	ip, ip, r3
   d7644:	45a4      	cmp	ip, r4
   d7646:	d907      	bls.n	d7658 <__udivmoddi4+0x15c>
   d7648:	19e4      	adds	r4, r4, r7
   d764a:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d764e:	d202      	bcs.n	d7656 <__udivmoddi4+0x15a>
   d7650:	45a4      	cmp	ip, r4
   d7652:	f200 80b5 	bhi.w	d77c0 <__udivmoddi4+0x2c4>
   d7656:	4613      	mov	r3, r2
   d7658:	ebcc 0404 	rsb	r4, ip, r4
   d765c:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d7660:	e79c      	b.n	d759c <__udivmoddi4+0xa0>
   d7662:	4629      	mov	r1, r5
   d7664:	4628      	mov	r0, r5
   d7666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d766a:	f1ce 0120 	rsb	r1, lr, #32
   d766e:	fa06 f30e 	lsl.w	r3, r6, lr
   d7672:	fa07 f70e 	lsl.w	r7, r7, lr
   d7676:	fa20 f901 	lsr.w	r9, r0, r1
   d767a:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d767e:	40ce      	lsrs	r6, r1
   d7680:	ea49 0903 	orr.w	r9, r9, r3
   d7684:	fbb6 faf8 	udiv	sl, r6, r8
   d7688:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d768c:	fb08 661a 	mls	r6, r8, sl, r6
   d7690:	fa1f fc87 	uxth.w	ip, r7
   d7694:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d7698:	fb0a f20c 	mul.w	r2, sl, ip
   d769c:	429a      	cmp	r2, r3
   d769e:	fa00 f40e 	lsl.w	r4, r0, lr
   d76a2:	d90a      	bls.n	d76ba <__udivmoddi4+0x1be>
   d76a4:	19db      	adds	r3, r3, r7
   d76a6:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d76aa:	f080 8087 	bcs.w	d77bc <__udivmoddi4+0x2c0>
   d76ae:	429a      	cmp	r2, r3
   d76b0:	f240 8084 	bls.w	d77bc <__udivmoddi4+0x2c0>
   d76b4:	f1aa 0a02 	sub.w	sl, sl, #2
   d76b8:	443b      	add	r3, r7
   d76ba:	1a9b      	subs	r3, r3, r2
   d76bc:	fa1f f989 	uxth.w	r9, r9
   d76c0:	fbb3 f1f8 	udiv	r1, r3, r8
   d76c4:	fb08 3311 	mls	r3, r8, r1, r3
   d76c8:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d76cc:	fb01 f60c 	mul.w	r6, r1, ip
   d76d0:	429e      	cmp	r6, r3
   d76d2:	d907      	bls.n	d76e4 <__udivmoddi4+0x1e8>
   d76d4:	19db      	adds	r3, r3, r7
   d76d6:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d76da:	d26b      	bcs.n	d77b4 <__udivmoddi4+0x2b8>
   d76dc:	429e      	cmp	r6, r3
   d76de:	d969      	bls.n	d77b4 <__udivmoddi4+0x2b8>
   d76e0:	3902      	subs	r1, #2
   d76e2:	443b      	add	r3, r7
   d76e4:	1b9b      	subs	r3, r3, r6
   d76e6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d76ea:	e78e      	b.n	d760a <__udivmoddi4+0x10e>
   d76ec:	f1c1 0e20 	rsb	lr, r1, #32
   d76f0:	fa22 f40e 	lsr.w	r4, r2, lr
   d76f4:	408b      	lsls	r3, r1
   d76f6:	4323      	orrs	r3, r4
   d76f8:	fa20 f70e 	lsr.w	r7, r0, lr
   d76fc:	fa06 f401 	lsl.w	r4, r6, r1
   d7700:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d7704:	fa26 f60e 	lsr.w	r6, r6, lr
   d7708:	433c      	orrs	r4, r7
   d770a:	fbb6 f9fc 	udiv	r9, r6, ip
   d770e:	0c27      	lsrs	r7, r4, #16
   d7710:	fb0c 6619 	mls	r6, ip, r9, r6
   d7714:	fa1f f883 	uxth.w	r8, r3
   d7718:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d771c:	fb09 f708 	mul.w	r7, r9, r8
   d7720:	42b7      	cmp	r7, r6
   d7722:	fa02 f201 	lsl.w	r2, r2, r1
   d7726:	fa00 fa01 	lsl.w	sl, r0, r1
   d772a:	d908      	bls.n	d773e <__udivmoddi4+0x242>
   d772c:	18f6      	adds	r6, r6, r3
   d772e:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d7732:	d241      	bcs.n	d77b8 <__udivmoddi4+0x2bc>
   d7734:	42b7      	cmp	r7, r6
   d7736:	d93f      	bls.n	d77b8 <__udivmoddi4+0x2bc>
   d7738:	f1a9 0902 	sub.w	r9, r9, #2
   d773c:	441e      	add	r6, r3
   d773e:	1bf6      	subs	r6, r6, r7
   d7740:	b2a0      	uxth	r0, r4
   d7742:	fbb6 f4fc 	udiv	r4, r6, ip
   d7746:	fb0c 6614 	mls	r6, ip, r4, r6
   d774a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d774e:	fb04 f808 	mul.w	r8, r4, r8
   d7752:	45b8      	cmp	r8, r7
   d7754:	d907      	bls.n	d7766 <__udivmoddi4+0x26a>
   d7756:	18ff      	adds	r7, r7, r3
   d7758:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d775c:	d228      	bcs.n	d77b0 <__udivmoddi4+0x2b4>
   d775e:	45b8      	cmp	r8, r7
   d7760:	d926      	bls.n	d77b0 <__udivmoddi4+0x2b4>
   d7762:	3c02      	subs	r4, #2
   d7764:	441f      	add	r7, r3
   d7766:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d776a:	ebc8 0707 	rsb	r7, r8, r7
   d776e:	fba0 8902 	umull	r8, r9, r0, r2
   d7772:	454f      	cmp	r7, r9
   d7774:	4644      	mov	r4, r8
   d7776:	464e      	mov	r6, r9
   d7778:	d314      	bcc.n	d77a4 <__udivmoddi4+0x2a8>
   d777a:	d029      	beq.n	d77d0 <__udivmoddi4+0x2d4>
   d777c:	b365      	cbz	r5, d77d8 <__udivmoddi4+0x2dc>
   d777e:	ebba 0304 	subs.w	r3, sl, r4
   d7782:	eb67 0706 	sbc.w	r7, r7, r6
   d7786:	fa07 fe0e 	lsl.w	lr, r7, lr
   d778a:	40cb      	lsrs	r3, r1
   d778c:	40cf      	lsrs	r7, r1
   d778e:	ea4e 0303 	orr.w	r3, lr, r3
   d7792:	e885 0088 	stmia.w	r5, {r3, r7}
   d7796:	2100      	movs	r1, #0
   d7798:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d779c:	4613      	mov	r3, r2
   d779e:	e6f8      	b.n	d7592 <__udivmoddi4+0x96>
   d77a0:	4610      	mov	r0, r2
   d77a2:	e6e0      	b.n	d7566 <__udivmoddi4+0x6a>
   d77a4:	ebb8 0402 	subs.w	r4, r8, r2
   d77a8:	eb69 0603 	sbc.w	r6, r9, r3
   d77ac:	3801      	subs	r0, #1
   d77ae:	e7e5      	b.n	d777c <__udivmoddi4+0x280>
   d77b0:	4604      	mov	r4, r0
   d77b2:	e7d8      	b.n	d7766 <__udivmoddi4+0x26a>
   d77b4:	4611      	mov	r1, r2
   d77b6:	e795      	b.n	d76e4 <__udivmoddi4+0x1e8>
   d77b8:	4681      	mov	r9, r0
   d77ba:	e7c0      	b.n	d773e <__udivmoddi4+0x242>
   d77bc:	468a      	mov	sl, r1
   d77be:	e77c      	b.n	d76ba <__udivmoddi4+0x1be>
   d77c0:	3b02      	subs	r3, #2
   d77c2:	443c      	add	r4, r7
   d77c4:	e748      	b.n	d7658 <__udivmoddi4+0x15c>
   d77c6:	4608      	mov	r0, r1
   d77c8:	e70a      	b.n	d75e0 <__udivmoddi4+0xe4>
   d77ca:	3802      	subs	r0, #2
   d77cc:	443e      	add	r6, r7
   d77ce:	e72f      	b.n	d7630 <__udivmoddi4+0x134>
   d77d0:	45c2      	cmp	sl, r8
   d77d2:	d3e7      	bcc.n	d77a4 <__udivmoddi4+0x2a8>
   d77d4:	463e      	mov	r6, r7
   d77d6:	e7d1      	b.n	d777c <__udivmoddi4+0x280>
   d77d8:	4629      	mov	r1, r5
   d77da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d77de:	bf00      	nop

000d77e0 <__aeabi_idiv0>:
   d77e0:	4770      	bx	lr
   d77e2:	bf00      	nop

000d77e4 <__cxa_atexit>:
   d77e4:	b510      	push	{r4, lr}
   d77e6:	4c05      	ldr	r4, [pc, #20]	; (d77fc <__cxa_atexit+0x18>)
   d77e8:	4613      	mov	r3, r2
   d77ea:	b12c      	cbz	r4, d77f8 <__cxa_atexit+0x14>
   d77ec:	460a      	mov	r2, r1
   d77ee:	4601      	mov	r1, r0
   d77f0:	2002      	movs	r0, #2
   d77f2:	f3af 8000 	nop.w
   d77f6:	bd10      	pop	{r4, pc}
   d77f8:	4620      	mov	r0, r4
   d77fa:	bd10      	pop	{r4, pc}
   d77fc:	00000000 	.word	0x00000000

000d7800 <memcpy>:
   d7800:	b510      	push	{r4, lr}
   d7802:	1e43      	subs	r3, r0, #1
   d7804:	440a      	add	r2, r1
   d7806:	4291      	cmp	r1, r2
   d7808:	d004      	beq.n	d7814 <memcpy+0x14>
   d780a:	f811 4b01 	ldrb.w	r4, [r1], #1
   d780e:	f803 4f01 	strb.w	r4, [r3, #1]!
   d7812:	e7f8      	b.n	d7806 <memcpy+0x6>
   d7814:	bd10      	pop	{r4, pc}

000d7816 <memset>:
   d7816:	4402      	add	r2, r0
   d7818:	4603      	mov	r3, r0
   d781a:	4293      	cmp	r3, r2
   d781c:	d002      	beq.n	d7824 <memset+0xe>
   d781e:	f803 1b01 	strb.w	r1, [r3], #1
   d7822:	e7fa      	b.n	d781a <memset+0x4>
   d7824:	4770      	bx	lr
	...

000d7828 <srand>:
   d7828:	b538      	push	{r3, r4, r5, lr}
   d782a:	4b12      	ldr	r3, [pc, #72]	; (d7874 <srand+0x4c>)
   d782c:	681c      	ldr	r4, [r3, #0]
   d782e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d7830:	4605      	mov	r5, r0
   d7832:	b9d3      	cbnz	r3, d786a <srand+0x42>
   d7834:	2018      	movs	r0, #24
   d7836:	f7fd fc2d 	bl	d5094 <malloc>
   d783a:	f243 330e 	movw	r3, #13070	; 0x330e
   d783e:	63a0      	str	r0, [r4, #56]	; 0x38
   d7840:	8003      	strh	r3, [r0, #0]
   d7842:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d7846:	8043      	strh	r3, [r0, #2]
   d7848:	f241 2334 	movw	r3, #4660	; 0x1234
   d784c:	8083      	strh	r3, [r0, #4]
   d784e:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d7852:	80c3      	strh	r3, [r0, #6]
   d7854:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d7858:	8103      	strh	r3, [r0, #8]
   d785a:	2305      	movs	r3, #5
   d785c:	8143      	strh	r3, [r0, #10]
   d785e:	230b      	movs	r3, #11
   d7860:	8183      	strh	r3, [r0, #12]
   d7862:	2201      	movs	r2, #1
   d7864:	2300      	movs	r3, #0
   d7866:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d786a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d786c:	2200      	movs	r2, #0
   d786e:	611d      	str	r5, [r3, #16]
   d7870:	615a      	str	r2, [r3, #20]
   d7872:	bd38      	pop	{r3, r4, r5, pc}
   d7874:	2003e1f4 	.word	0x2003e1f4

000d7878 <strcmp>:
   d7878:	f810 2b01 	ldrb.w	r2, [r0], #1
   d787c:	f811 3b01 	ldrb.w	r3, [r1], #1
   d7880:	2a01      	cmp	r2, #1
   d7882:	bf28      	it	cs
   d7884:	429a      	cmpcs	r2, r3
   d7886:	d0f7      	beq.n	d7878 <strcmp>
   d7888:	1ad0      	subs	r0, r2, r3
   d788a:	4770      	bx	lr

000d788c <strdup>:
   d788c:	4b02      	ldr	r3, [pc, #8]	; (d7898 <strdup+0xc>)
   d788e:	4601      	mov	r1, r0
   d7890:	6818      	ldr	r0, [r3, #0]
   d7892:	f000 b803 	b.w	d789c <_strdup_r>
   d7896:	bf00      	nop
   d7898:	2003e1f4 	.word	0x2003e1f4

000d789c <_strdup_r>:
   d789c:	b570      	push	{r4, r5, r6, lr}
   d789e:	4606      	mov	r6, r0
   d78a0:	4608      	mov	r0, r1
   d78a2:	460c      	mov	r4, r1
   d78a4:	f000 f80d 	bl	d78c2 <strlen>
   d78a8:	1c45      	adds	r5, r0, #1
   d78aa:	4629      	mov	r1, r5
   d78ac:	4630      	mov	r0, r6
   d78ae:	f7fd fc11 	bl	d50d4 <_malloc_r>
   d78b2:	4606      	mov	r6, r0
   d78b4:	b118      	cbz	r0, d78be <_strdup_r+0x22>
   d78b6:	462a      	mov	r2, r5
   d78b8:	4621      	mov	r1, r4
   d78ba:	f7ff ffa1 	bl	d7800 <memcpy>
   d78be:	4630      	mov	r0, r6
   d78c0:	bd70      	pop	{r4, r5, r6, pc}

000d78c2 <strlen>:
   d78c2:	4603      	mov	r3, r0
   d78c4:	f813 2b01 	ldrb.w	r2, [r3], #1
   d78c8:	2a00      	cmp	r2, #0
   d78ca:	d1fb      	bne.n	d78c4 <strlen+0x2>
   d78cc:	1a18      	subs	r0, r3, r0
   d78ce:	3801      	subs	r0, #1
   d78d0:	4770      	bx	lr

000d78d2 <strncpy>:
   d78d2:	b510      	push	{r4, lr}
   d78d4:	4603      	mov	r3, r0
   d78d6:	b142      	cbz	r2, d78ea <strncpy+0x18>
   d78d8:	f811 4b01 	ldrb.w	r4, [r1], #1
   d78dc:	f803 4b01 	strb.w	r4, [r3], #1
   d78e0:	3a01      	subs	r2, #1
   d78e2:	2c00      	cmp	r4, #0
   d78e4:	d1f7      	bne.n	d78d6 <strncpy+0x4>
   d78e6:	441a      	add	r2, r3
   d78e8:	e000      	b.n	d78ec <strncpy+0x1a>
   d78ea:	bd10      	pop	{r4, pc}
   d78ec:	4293      	cmp	r3, r2
   d78ee:	d002      	beq.n	d78f6 <strncpy+0x24>
   d78f0:	f803 4b01 	strb.w	r4, [r3], #1
   d78f4:	e7fa      	b.n	d78ec <strncpy+0x1a>
   d78f6:	bd10      	pop	{r4, pc}

000d78f8 <dynalib_user>:
   d78f8:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d7908:	0000 0000 6170 7472 6369 656c 642f 7665     ....particle/dev
   d7918:	6369 2f65 616e 656d 4d00 7365 4468 7461     ice/name.MeshDat
   d7928:	5461 706f 6369 6e00 6c75 006c 2222 5c5c     aTopic.null.""\\
   d7938:	0862 0c66 0a6e 0d72 0974 6500 002d 7274     b.f.n.r.t..e-.tr
   d7948:	6575 6600 6c61 6573 6300 646d 4c00 6769     ue.false.cmd.Lig
   d7958:	7468 6553 736e 726f 6d00 7465 6f68 0064     htSensor.method.
   d7968:	6567 0074 6f52 6174 7972 6e41 6c67 5365     get.RotaryAngleS
   d7978:	6e65 6f73 0072 7542 7474 6e6f 0000 0000     ensor.Button....

000d7988 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d7990:	510b 000d 5111 000d 5139 000d 511d 000d     .Q...Q..9Q...Q..
   d79a0:	510d 000d                                   .Q..

000d79a4 <_ZTVN5spark13EthernetClassE>:
	...
   d79ac:	56db 000d 56d1 000d 56c7 000d 56bd 000d     .V...V...V...V..
   d79bc:	56b1 000d 56a5 000d 5699 000d 5691 000d     .V...V...V...V..
   d79cc:	5687 000d 567d 000d 5c25 000d               .V..}V..%\..

000d79d8 <_ZTV7TwoWire>:
	...
   d79e0:	56f9 000d 5743 000d 571b 000d 56fb 000d     .V..CW...W...V..
   d79f0:	5723 000d 572b 000d 5733 000d 573b 000d     #W..+W..3W..;W..

000d7a00 <_ZTV9IPAddress>:
	...
   d7a08:	578b 000d 577d 000d 577f 000d 0066 6e6c     .W..}W...W..f.ln
   d7a18:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d7a28:	0a0d 2500 3130 7530 0020 205d 2c00 0020     ...%010u .] ., .
   d7a38:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d7a48:	6925 6400 7465 6961 736c 3d20 0020 6162     %i.details = .ba
   d7a58:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d7a68:	0031 7974 6570 7000 7261 6d61 6900 0064     1.type.param.id.
   d7a78:	6e68 0064 7473 6d72 6600 6c69 0074 766c     hnd.strm.filt.lv
   d7a88:	006c 6461 4864 6e61 6c64 7265 7200 6d65     l.addHandler.rem
   d7a98:	766f 4865 6e61 6c64 7265 6500 756e 486d     oveHandler.enumH
   d7aa8:	6e61 6c64 7265 0073 534a 4e4f 7453 6572     andlers.JSONStre
   d7ab8:	6d61 6f4c 4867 6e61 6c64 7265 6100 7070     amLogHandler.app
   d7ac8:	6e00 6e6f 0065 7274 6361 0065 6e69 6f66     .none.trace.info
   d7ad8:	7700 7261 006e 7265 6f72 0072 6170 696e     .warn.error.pani
   d7ae8:	0063 6c61 006c 0000                         c.all...

000d7af0 <_ZTVN5spark9MeshClassE>:
	...
   d7af8:	5903 000d 58f9 000d 58ef 000d 58e5 000d     .Y...X...X...X..
   d7b08:	58d9 000d 58cd 000d 58c1 000d 58b9 000d     .X...X...X...X..
   d7b18:	58af 000d 58a5 000d 5c25 000d 6666 3330     .X...X..%\..ff03
   d7b28:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   d7b38:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   d7b48:	2065 6170 6b63 7465 2520 0064               e packet %d.

000d7b54 <_ZTVN5spark12NetworkClassE>:
	...
   d7b5c:	5bbd 000d 5bc7 000d 5bd1 000d 5bdb 000d     .[...[...[...[..
   d7b6c:	5be5 000d 5bf1 000d 5bfd 000d 5c09 000d     .[...[...[...\..
   d7b7c:	5c11 000d 5c1b 000d 5c25 000d               .\...\..%\..

000d7b88 <_ZTV8SPIClass>:
	...
   d7b90:	5ddd 000d 5ddf 000d 005a 2b25 3330 3a64     .]...]..Z.%+03d:
   d7ba0:	3025 7532 2500 2d59 6d25 252d 5464 4825     %02u.%Y-%m-%dT%H
   d7bb0:	253a 3a4d 5325 7a25 6100 6373 6974 656d     :%M:%S%z.asctime
   d7bc0:	0000 0000                                   ....

000d7bc4 <_ZTV3UDP>:
	...
   d7bcc:	656d 000d 6591 000d 5f4d 000d 6077 000d     me...e..M_..w`..
   d7bdc:	5f45 000d 5f63 000d 5f81 000d 5f9b 000d     E_..c_..._..._..
   d7bec:	5fbf 000d 605b 000d 635d 000d 60fd 000d     ._..[`..]c...`..
   d7bfc:	627d 000d 5f2d 000d 6503 000d 6201 000d     }b..-_...e...b..
   d7c0c:	6135 000d 6531 000d 60a1 000d 5f3b 000d     5a..1e...`..;_..
   d7c1c:	60dd 000d 5f41 000d 5f9d 000d fff0 ffff     .`..A_..._......
   d7c2c:	0000 0000 5fb7 000d                         ....._..

000d7c34 <_ZTV11USARTSerial>:
	...
   d7c3c:	65bb 000d 65df 000d 65eb 000d 5d05 000d     .e...e...e...]..
   d7c4c:	65c7 000d 65d3 000d 65cd 000d 65d9 000d     .e...e...e...e..
   d7c5c:	65bd 000d 65c1 000d                         .e...e..

000d7c64 <_ZTV9USBSerial>:
	...
   d7c6c:	6695 000d 66d9 000d 66b3 000d 5d05 000d     .f...f...f...]..
   d7c7c:	66ad 000d 6697 000d 669f 000d 66d3 000d     .f...f...f...f..
   d7c8c:	66a7 000d 6691 000d                         .f...f..

000d7c94 <__sf_fake_stdin>:
	...

000d7cb4 <__sf_fake_stdout>:
	...

000d7cd4 <__sf_fake_stderr>:
	...
   d7cf4:	0043                                        C.

000d7cf6 <link_const_variable_data_end>:
	...

000d7cf8 <link_constructors_location>:
   d7cf8:	000d4c0d 	.word	0x000d4c0d
   d7cfc:	000d56e5 	.word	0x000d56e5
   d7d00:	000d5895 	.word	0x000d5895
   d7d04:	000d5b71 	.word	0x000d5b71
   d7d08:	000d5cf1 	.word	0x000d5cf1
   d7d0c:	000d5dc1 	.word	0x000d5dc1
   d7d10:	000d5f01 	.word	0x000d5f01
   d7d14:	000d5f19 	.word	0x000d5f19
   d7d18:	000d6905 	.word	0x000d6905
   d7d1c:	000d6959 	.word	0x000d6959
   d7d20:	000d6a1d 	.word	0x000d6a1d
   d7d24:	000d6aa1 	.word	0x000d6aa1
   d7d28:	000d6b25 	.word	0x000d6b25

000d7d2c <link_constructors_end>:
   d7d2c:	00000000 	.word	0x00000000
