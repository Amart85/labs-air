
/Users/gallardo/TIBProjects/iot/particle/projects/ArgonMeshMQTTPub/target/ArgonMeshMQTTPub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e48  000d4018  000d4018  00004018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  000d9e60  000d9e60  00009e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000000  2003f400  2003f400  00019f8c  2**0
                  CONTENTS
  4 .data         000000f8  2003dbe0  000d9e68  0000dbe0  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          00000b18  2003dcd8  2003dcd8  0001dcd8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  000d9f60  000d9f60  00019f60  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d9f88  000d9f88  00019f88  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d7a14  00000000  00000000  00019f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00011a6e  00000000  00000000  000f19a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001ce22  00000000  00000000  0010340e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002568  00000000  00000000  00120230  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004310  00000000  00000000  00122798  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  000338b9  00000000  00000000  00126aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002a6ca  00000000  00000000  0015a361  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000e8b10  00000000  00000000  00184a2b  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000cd1c  00000000  00000000  0026d53c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4018 <user_part_module>:
   d4018:	14 99 0d 00                                         ....

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <module_user_pre_init+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <module_user_pre_init+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <module_user_pre_init+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f005 fbbc 	bl	d97aa <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <module_user_pre_init+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <module_user_pre_init+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f005 fbc1 	bl	d97c0 <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <module_user_pre_init+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003dbe0 	.word	0x2003dbe0
   d4048:	000d9e68 	.word	0x000d9e68
   d404c:	2003dcd8 	.word	0x2003dcd8
   d4050:	2003dcd8 	.word	0x2003dcd8
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f004 fb5f 	bl	d871c <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d9e5c 	.word	0x000d9e5c
   d4080:	000d9e20 	.word	0x000d9e20

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b914 	b.w	d42b0 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f001 fa7b 	bl	d5584 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f004 bb11 	b.w	d86b8 <_post_loop>

000d4096 <_Znwj>:
   d4096:	f002 bae7 	b.w	d6668 <malloc>

000d409a <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
   d409a:	f002 bae5 	b.w	d6668 <malloc>

000d409e <_ZdlPv>:
   d409e:	f002 baeb 	b.w	d6678 <free>

000d40a2 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d40a2:	f002 bae9 	b.w	d6678 <free>

000d40a6 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a6:	7800      	ldrb	r0, [r0, #0]
   d40a8:	fab0 f080 	clz	r0, r0
   d40ac:	0940      	lsrs	r0, r0, #5
   d40ae:	4770      	bx	lr

000d40b0 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40b0:	2301      	movs	r3, #1
   d40b2:	7003      	strb	r3, [r0, #0]
   d40b4:	4770      	bx	lr

000d40b6 <_ZNK21ArduinoJson6110_1100020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
   d40b6:	4770      	bx	lr

000d40b8 <_Z12meshReceiverPKcS0_>:
    nameReceived = true;
}

void meshReceiver(const char *event, const char *data) {
  
    mqtt->publish(pubTopic, data);
   d40b8:	4b02      	ldr	r3, [pc, #8]	; (d40c4 <_Z12meshReceiverPKcS0_+0xc>)
   d40ba:	460a      	mov	r2, r1
   d40bc:	6818      	ldr	r0, [r3, #0]
   d40be:	4902      	ldr	r1, [pc, #8]	; (d40c8 <_Z12meshReceiverPKcS0_+0x10>)
   d40c0:	f001 bebc 	b.w	d5e3c <_ZN4MQTT7publishEPKcS1_>
   d40c4:	2003dd38 	.word	0x2003dd38
   d40c8:	2003dfc3 	.word	0x2003dfc3

000d40cc <_Z7handlerPKcS0_>:
	PublishResponse();
}

// -------------------------------------------- Get ClientName
// triggered by the Particle.subscribe and Particle.publish run in setup()
void handler(const char *topic, const char *data) {
   d40cc:	b510      	push	{r4, lr}
    strncpy(deviceName, data, strlen(data));
   d40ce:	4608      	mov	r0, r1
	PublishResponse();
}

// -------------------------------------------- Get ClientName
// triggered by the Particle.subscribe and Particle.publish run in setup()
void handler(const char *topic, const char *data) {
   d40d0:	460c      	mov	r4, r1
    strncpy(deviceName, data, strlen(data));
   d40d2:	f005 fbe2 	bl	d989a <strlen>
   d40d6:	4621      	mov	r1, r4
   d40d8:	4602      	mov	r2, r0
   d40da:	4803      	ldr	r0, [pc, #12]	; (d40e8 <_Z7handlerPKcS0_+0x1c>)
   d40dc:	f005 fbfa 	bl	d98d4 <strncpy>
    
    nameReceived = true;
   d40e0:	4b02      	ldr	r3, [pc, #8]	; (d40ec <_Z7handlerPKcS0_+0x20>)
   d40e2:	2201      	movs	r2, #1
   d40e4:	701a      	strb	r2, [r3, #0]
   d40e6:	bd10      	pop	{r4, pc}
   d40e8:	2003dd3c 	.word	0x2003dd3c
   d40ec:	2003ddc0 	.word	0x2003ddc0

000d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>:
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
   d40f0:	7803      	ldrb	r3, [r0, #0]
   d40f2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   d40f6:	4319      	orrs	r1, r3
   d40f8:	7001      	strb	r1, [r0, #0]
   d40fa:	4770      	bx	lr

000d40fc <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13>:
    s2 = s2->next();
  }
}

template <typename TAdaptedString>
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
   d40fc:	b538      	push	{r3, r4, r5, lr}
   d40fe:	4604      	mov	r4, r0
   d4100:	460d      	mov	r5, r1
  VariantSlot* slot = _head;
  while (slot) {
   d4102:	b18c      	cbz	r4, d4128 <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x2c>
   d4104:	68e1      	ldr	r1, [r4, #12]
#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline int8_t safe_strcmp(const char* a, const char* b) {
  if (a == b) return 0;
   d4106:	42a9      	cmp	r1, r5
   d4108:	d00e      	beq.n	d4128 <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x2c>
  if (!a) return -1;
   d410a:	b135      	cbz	r5, d411a <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x1e>
  if (!b) return 1;
   d410c:	b129      	cbz	r1, d411a <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x1e>
  return static_cast<int8_t>(strcmp(a, b));
   d410e:	4628      	mov	r0, r5
   d4110:	f005 fb95 	bl	d983e <strcmp>
    if (key.equals(slot->key())) break;
   d4114:	f010 0fff 	tst.w	r0, #255	; 0xff
   d4118:	d006      	beq.n	d4128 <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x2c>
  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
    return _next ? this + _next : 0;
   d411a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
   d411e:	b113      	cbz	r3, d4126 <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x2a>
   d4120:	eb04 1403 	add.w	r4, r4, r3, lsl #4
   d4124:	e7ed      	b.n	d4102 <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x6>
   d4126:	461c      	mov	r4, r3
    slot = slot->next();
  }
  return slot;
}
   d4128:	4620      	mov	r0, r4
   d412a:	bd38      	pop	{r3, r4, r5, pc}

000d412c <_ZN21ArduinoJson6110_1100017variantSetBooleanEPNS_11VariantDataEb>:

inline bool variantIsNull(const VariantData *var) {
  return var == 0 || var->isNull();
}

inline bool variantSetBoolean(VariantData *var, bool value) {
   d412c:	b510      	push	{r4, lr}
  if (!var) return false;
   d412e:	4602      	mov	r2, r0

inline bool variantIsNull(const VariantData *var) {
  return var == 0 || var->isNull();
}

inline bool variantSetBoolean(VariantData *var, bool value) {
   d4130:	460c      	mov	r4, r1
  if (!var) return false;
   d4132:	b148      	cbz	r0, d4148 <_ZN21ArduinoJson6110_1100017variantSetBooleanEPNS_11VariantDataEb+0x1c>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
   d4134:	2105      	movs	r1, #5
   d4136:	3008      	adds	r0, #8
   d4138:	f7ff ffda 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asInteger = static_cast<UInt>(value);
   d413c:	b2e0      	uxtb	r0, r4
   d413e:	2100      	movs	r1, #0
   d4140:	e9c2 0100 	strd	r0, r1, [r2]
  var->setBoolean(value);
  return true;
   d4144:	2001      	movs	r0, #1
   d4146:	bd10      	pop	{r4, pc}
}
   d4148:	bd10      	pop	{r4, pc}

000d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>:
  if (!var) return false;
  var->setSignedInteger(value);
  return true;
}

inline bool variantSetLinkedString(VariantData *var, const char *value) {
   d414a:	b510      	push	{r4, lr}
  if (!var) return false;
   d414c:	4602      	mov	r2, r0
  if (!var) return false;
  var->setSignedInteger(value);
  return true;
}

inline bool variantSetLinkedString(VariantData *var, const char *value) {
   d414e:	460c      	mov	r4, r1
  if (!var) return false;
   d4150:	b150      	cbz	r0, d4168 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc+0x1e>
   d4152:	3008      	adds	r0, #8
    setType(VALUE_IS_NEGATIVE_INTEGER);
    _content.asInteger = value;
  }

  void setLinkedString(const char *value) {
    if (value) {
   d4154:	b121      	cbz	r1, d4160 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc+0x16>
      setType(VALUE_IS_LINKED_STRING);
   d4156:	2103      	movs	r1, #3
   d4158:	f7ff ffca 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
      _content.asString = value;
   d415c:	6014      	str	r4, [r2, #0]
   d415e:	e001      	b.n	d4164 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc+0x1a>
    } else {
      setType(VALUE_IS_NULL);
   d4160:	f7ff ffc6 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
  var->setLinkedString(value);
  return true;
   d4164:	2001      	movs	r0, #1
   d4166:	bd10      	pop	{r4, pc}
}
   d4168:	bd10      	pop	{r4, pc}

000d416a <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
   d416a:	b510      	push	{r4, lr}
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
    if (!canAlloc(bytes)) return 0;
   d416c:	684b      	ldr	r3, [r1, #4]
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
   d416e:	688a      	ldr	r2, [r1, #8]
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
    if (!canAlloc(bytes)) return 0;
   d4170:	3310      	adds	r3, #16
   d4172:	429a      	cmp	r2, r3
   d4174:	d201      	bcs.n	d417a <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE+0x10>
  VariantSlot* slot = pool->allocVariant();
  if (!slot) return 0;
   d4176:	2000      	movs	r0, #0
   d4178:	bd10      	pop	{r4, pc}
    _right -= bytes;
   d417a:	f1a2 0310 	sub.w	r3, r2, #16
   d417e:	608b      	str	r3, [r1, #8]
   d4180:	2b00      	cmp	r3, #0
   d4182:	d0f8      	beq.n	d4176 <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE+0xc>

  if (_tail) {
   d4184:	6841      	ldr	r1, [r0, #4]
   d4186:	b119      	cbz	r1, d4190 <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE+0x26>
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
   d4188:	1a5c      	subs	r4, r3, r1
   d418a:	1124      	asrs	r4, r4, #4
   d418c:	814c      	strh	r4, [r1, #10]
   d418e:	e000      	b.n	d4192 <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE+0x28>
    _tail->setNextNotNull(slot);
    _tail = slot;
  } else {
    _head = slot;
   d4190:	6003      	str	r3, [r0, #0]
  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
    _next = 0;
   d4192:	2100      	movs	r1, #0
    _tail = slot;
   d4194:	6043      	str	r3, [r0, #4]
   d4196:	f822 1c06 	strh.w	r1, [r2, #-6]
    _flags = 0;
   d419a:	f802 1c08 	strb.w	r1, [r2, #-8]
    _key = 0;
   d419e:	f842 1c04 	str.w	r1, [r2, #-4]
  }

  slot->clear();
  return slot;
   d41a2:	4618      	mov	r0, r3
}
   d41a4:	bd10      	pop	{r4, pc}
	...

000d41a8 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>:
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
   d41a8:	780b      	ldrb	r3, [r1, #0]
   d41aa:	b90b      	cbnz	r3, d41b0 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv+0x8>
   d41ac:	6003      	str	r3, [r0, #0]
   d41ae:	e002      	b.n	d41b6 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv+0xe>
   d41b0:	4b02      	ldr	r3, [pc, #8]	; (d41bc <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv+0x14>)
   d41b2:	6003      	str	r3, [r0, #0]
   d41b4:	2300      	movs	r3, #0
   d41b6:	6043      	str	r3, [r0, #4]
  }
   d41b8:	4770      	bx	lr
   d41ba:	bf00      	nop
   d41bc:	000d40b7 	.word	0x000d40b7

000d41c0 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj>:
    *p++ = static_cast<char>(c);
    *p = '\0';
    return 1;
  }

  size_t write(const uint8_t *s, size_t n) {
   d41c0:	b530      	push	{r4, r5, lr}
    char *begin = p;
   d41c2:	6844      	ldr	r4, [r0, #4]
   d41c4:	440a      	add	r2, r1
    while (p < end && n > 0) {
   d41c6:	6843      	ldr	r3, [r0, #4]
   d41c8:	6805      	ldr	r5, [r0, #0]
   d41ca:	42ab      	cmp	r3, r5
   d41cc:	d207      	bcs.n	d41de <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj+0x1e>
   d41ce:	4291      	cmp	r1, r2
   d41d0:	d005      	beq.n	d41de <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj+0x1e>
      *p++ = static_cast<char>(*s++);
   d41d2:	1c5d      	adds	r5, r3, #1
   d41d4:	6045      	str	r5, [r0, #4]
   d41d6:	f811 5b01 	ldrb.w	r5, [r1], #1
   d41da:	701d      	strb	r5, [r3, #0]
    return 1;
  }

  size_t write(const uint8_t *s, size_t n) {
    char *begin = p;
    while (p < end && n > 0) {
   d41dc:	e7f3      	b.n	d41c6 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj+0x6>
      *p++ = static_cast<char>(*s++);
      n--;
    }
    *p = '\0';
   d41de:	2200      	movs	r2, #0
   d41e0:	701a      	strb	r2, [r3, #0]
    return size_t(p - begin);
   d41e2:	6840      	ldr	r0, [r0, #4]
  }
   d41e4:	1b00      	subs	r0, r0, r4
   d41e6:	bd30      	pop	{r4, r5, pc}

000d41e8 <_Z13ConnectToMQTT6String>:
    }
}

// --------------------------------------------- Connect to the MQTT Broker via IP address
// triggered by Particle.function
int ConnectToMQTT(String s) {
   d41e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    
    s.toCharArray(buffer, sizeof(s));

	// connect via IP Address ---------------------------
    for (int i = 0; i < 4; i++) brokerIP[i] = 0;
   d41ea:	4c17      	ldr	r4, [pc, #92]	; (d4248 <_Z13ConnectToMQTT6String+0x60>)
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
   d41ec:	4917      	ldr	r1, [pc, #92]	; (d424c <_Z13ConnectToMQTT6String+0x64>)
   d41ee:	2300      	movs	r3, #0
   d41f0:	2210      	movs	r2, #16
   d41f2:	f003 fad7 	bl	d77a4 <_ZNK6String8getBytesEPhjj>
   d41f6:	4622      	mov	r2, r4
   d41f8:	2300      	movs	r3, #0
   d41fa:	f802 3f03 	strb.w	r3, [r2, #3]!
   d41fe:	7023      	strb	r3, [r4, #0]
   d4200:	7063      	strb	r3, [r4, #1]
   d4202:	70a3      	strb	r3, [r4, #2]
    sscanf( buffer, "%u.%u.%u.%u", &brokerIP[0], &brokerIP[1], &brokerIP[2], &brokerIP[3] );
   d4204:	1ca3      	adds	r3, r4, #2
   d4206:	9201      	str	r2, [sp, #4]
   d4208:	9300      	str	r3, [sp, #0]
   d420a:	4622      	mov	r2, r4
   d420c:	1c63      	adds	r3, r4, #1
   d420e:	4910      	ldr	r1, [pc, #64]	; (d4250 <_Z13ConnectToMQTT6String+0x68>)
   d4210:	480e      	ldr	r0, [pc, #56]	; (d424c <_Z13ConnectToMQTT6String+0x64>)
   d4212:	f002 fa41 	bl	d6698 <sscanf>
    //Serial.printf("brokerIP: %u.%u.%u.%u\r\n", brokerIP[0], brokerIP[1], brokerIP[2], brokerIP[3] );
	mqtt = new MQTT(brokerIP, 1883, 15, mqttReceiver);
   d4216:	2058      	movs	r0, #88	; 0x58
   d4218:	f7ff ff3d 	bl	d4096 <_Znwj>
   d421c:	4605      	mov	r5, r0
   d421e:	b138      	cbz	r0, d4230 <_Z13ConnectToMQTT6String+0x48>
   d4220:	4b0c      	ldr	r3, [pc, #48]	; (d4254 <_Z13ConnectToMQTT6String+0x6c>)
   d4222:	9300      	str	r3, [sp, #0]
   d4224:	f240 725b 	movw	r2, #1883	; 0x75b
   d4228:	230f      	movs	r3, #15
   d422a:	4621      	mov	r1, r4
   d422c:	f001 fbce 	bl	d59cc <_ZN4MQTTC1EPhtiPFvPcS0_jE>
   d4230:	4b09      	ldr	r3, [pc, #36]	; (d4258 <_Z13ConnectToMQTT6String+0x70>)
	
    
    mqtt->connect(clientName);
   d4232:	490a      	ldr	r1, [pc, #40]	; (d425c <_Z13ConnectToMQTT6String+0x74>)

	// connect via IP Address ---------------------------
    for (int i = 0; i < 4; i++) brokerIP[i] = 0;
    sscanf( buffer, "%u.%u.%u.%u", &brokerIP[0], &brokerIP[1], &brokerIP[2], &brokerIP[3] );
    //Serial.printf("brokerIP: %u.%u.%u.%u\r\n", brokerIP[0], brokerIP[1], brokerIP[2], brokerIP[3] );
	mqtt = new MQTT(brokerIP, 1883, 15, mqttReceiver);
   d4234:	601d      	str	r5, [r3, #0]
	
    
    mqtt->connect(clientName);
   d4236:	4628      	mov	r0, r5
   d4238:	f001 fd80 	bl	d5d3c <_ZN4MQTT7connectEPKc>
    
    mqttIsInitialized = true;
   d423c:	4b08      	ldr	r3, [pc, #32]	; (d4260 <_Z13ConnectToMQTT6String+0x78>)
   d423e:	2201      	movs	r2, #1
    
    return 0;
}
   d4240:	2000      	movs	r0, #0
	mqtt = new MQTT(brokerIP, 1883, 15, mqttReceiver);
	
    
    mqtt->connect(clientName);
    
    mqttIsInitialized = true;
   d4242:	701a      	strb	r2, [r3, #0]
    
    return 0;
}
   d4244:	b003      	add	sp, #12
   d4246:	bd30      	pop	{r4, r5, pc}
   d4248:	2003dd7c 	.word	0x2003dd7c
   d424c:	2003e2c9 	.word	0x2003e2c9
   d4250:	000d9928 	.word	0x000d9928
   d4254:	000d5915 	.word	0x000d5915
   d4258:	2003dd38 	.word	0x2003dd38
   d425c:	2003dd80 	.word	0x2003dd80
   d4260:	2003e0c8 	.word	0x2003e0c8

000d4264 <_Z13SetClientName6String>:

int SetClientName(String s) {
   d4264:	b510      	push	{r4, lr}
   d4266:	4c06      	ldr	r4, [pc, #24]	; (d4280 <_Z13SetClientName6String+0x1c>)
   d4268:	2300      	movs	r3, #0
   d426a:	4621      	mov	r1, r4
   d426c:	2210      	movs	r2, #16
   d426e:	f003 fa99 	bl	d77a4 <_ZNK6String8getBytesEPhjj>
    
    s.toCharArray(buffer, sizeof(s));
    strncpy(clientName, buffer, sizeof(clientName));
   d4272:	2240      	movs	r2, #64	; 0x40
   d4274:	4621      	mov	r1, r4
   d4276:	4803      	ldr	r0, [pc, #12]	; (d4284 <_Z13SetClientName6String+0x20>)
   d4278:	f005 fb2c 	bl	d98d4 <strncpy>
        
    return 0;
}
   d427c:	2000      	movs	r0, #0
   d427e:	bd10      	pop	{r4, pc}
   d4280:	2003e2c9 	.word	0x2003e2c9
   d4284:	2003dd80 	.word	0x2003dd80

000d4288 <_Z11SetPubTopic6String>:

int SetPubTopic(String s) {
   d4288:	b508      	push	{r3, lr}
   d428a:	2210      	movs	r2, #16
   d428c:	2300      	movs	r3, #0
   d428e:	4902      	ldr	r1, [pc, #8]	; (d4298 <_Z11SetPubTopic6String+0x10>)
   d4290:	f003 fa88 	bl	d77a4 <_ZNK6String8getBytesEPhjj>
	s.toCharArray(pubTopic, sizeof(s));
	return 0;
}
   d4294:	2000      	movs	r0, #0
   d4296:	bd08      	pop	{r3, pc}
   d4298:	2003dfc3 	.word	0x2003dfc3

000d429c <_Z16SetResponseTopic6String>:

int SetResponseTopic(String s) {
   d429c:	b508      	push	{r3, lr}
   d429e:	2210      	movs	r2, #16
   d42a0:	2300      	movs	r3, #0
   d42a2:	4902      	ldr	r1, [pc, #8]	; (d42ac <_Z16SetResponseTopic6String+0x10>)
   d42a4:	f003 fa7e 	bl	d77a4 <_ZNK6String8getBytesEPhjj>
	s.toCharArray(responseTopic, sizeof(s));
	return 0;
}
   d42a8:	2000      	movs	r0, #0
   d42aa:	bd08      	pop	{r3, pc}
   d42ac:	2003dec3 	.word	0x2003dec3

000d42b0 <setup>:

void mqttReceiver(char* topic, byte* payload, unsigned int length);
void meshReceiver(const char *event, const char *data);

// setup() runs once, when the device is first turned on.
void setup() {
   d42b0:	b510      	push	{r4, lr}
   d42b2:	b086      	sub	sp, #24
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
   d42b4:	2400      	movs	r4, #0
   d42b6:	4622      	mov	r2, r4
   d42b8:	9401      	str	r4, [sp, #4]
   d42ba:	9400      	str	r4, [sp, #0]
   d42bc:	2301      	movs	r3, #1
   d42be:	492d      	ldr	r1, [pc, #180]	; (d4374 <setup+0xc4>)
   d42c0:	482d      	ldr	r0, [pc, #180]	; (d4378 <setup+0xc8>)
   d42c2:	f002 f971 	bl	d65a8 <spark_subscribe>
   d42c6:	4b2d      	ldr	r3, [pc, #180]	; (d437c <setup+0xcc>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
   d42c8:	492b      	ldr	r1, [pc, #172]	; (d4378 <setup+0xc8>)
   d42ca:	781b      	ldrb	r3, [r3, #0]
   d42cc:	f88d 3000 	strb.w	r3, [sp]
   d42d0:	4622      	mov	r2, r4
   d42d2:	233c      	movs	r3, #60	; 0x3c
   d42d4:	a802      	add	r0, sp, #8
   d42d6:	f002 fb67 	bl	d69a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d42da:	9c03      	ldr	r4, [sp, #12]
   d42dc:	b17c      	cbz	r4, d42fe <setup+0x4e>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d42de:	6863      	ldr	r3, [r4, #4]
   d42e0:	3b01      	subs	r3, #1
   d42e2:	6063      	str	r3, [r4, #4]
   d42e4:	b95b      	cbnz	r3, d42fe <setup+0x4e>
        {
          _M_dispose();
   d42e6:	6823      	ldr	r3, [r4, #0]
   d42e8:	4620      	mov	r0, r4
   d42ea:	689b      	ldr	r3, [r3, #8]
   d42ec:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d42ee:	68a3      	ldr	r3, [r4, #8]
   d42f0:	3b01      	subs	r3, #1
   d42f2:	60a3      	str	r3, [r4, #8]
   d42f4:	b91b      	cbnz	r3, d42fe <setup+0x4e>
            _M_destroy();
   d42f6:	6823      	ldr	r3, [r4, #0]
   d42f8:	4620      	mov	r0, r4
   d42fa:	68db      	ldr	r3, [r3, #12]
   d42fc:	4798      	blx	r3
  // Get device name in handler and save it in deviceName
    Particle.subscribe("particle/device/name", handler);
    Particle.publish("particle/device/name", NULL, 60, PRIVATE);
    
    
    SetClientName("ParticleDevice");
   d42fe:	4920      	ldr	r1, [pc, #128]	; (d4380 <setup+0xd0>)
   d4300:	a802      	add	r0, sp, #8
   d4302:	f003 fa2b 	bl	d775c <_ZN6StringC1EPK19__FlashStringHelper>
   d4306:	a802      	add	r0, sp, #8
   d4308:	f7ff ffac 	bl	d4264 <_Z13SetClientName6String>
   d430c:	a802      	add	r0, sp, #8
   d430e:	f003 f9de 	bl	d76ce <_ZN6StringD1Ev>
    
    
    ConnectToMQTT("192.168.1.92");
   d4312:	491c      	ldr	r1, [pc, #112]	; (d4384 <setup+0xd4>)
   d4314:	a802      	add	r0, sp, #8
   d4316:	f003 fa21 	bl	d775c <_ZN6StringC1EPK19__FlashStringHelper>
   d431a:	a802      	add	r0, sp, #8
   d431c:	f7ff ff64 	bl	d41e8 <_Z13ConnectToMQTT6String>
   d4320:	a802      	add	r0, sp, #8
   d4322:	f003 f9d4 	bl	d76ce <_ZN6StringD1Ev>
    
    pinMode(LIGHTPIN, INPUT);
   d4326:	2100      	movs	r1, #0
   d4328:	2013      	movs	r0, #19
   d432a:	f004 fa35 	bl	d8798 <pinMode>
    pinMode(BUTTONPIN, INPUT);
   d432e:	2100      	movs	r1, #0
   d4330:	2011      	movs	r0, #17
   d4332:	f004 fa31 	bl	d8798 <pinMode>
    pinMode(ANGLEPIN, INPUT);
   d4336:	2100      	movs	r1, #0
   d4338:	200f      	movs	r0, #15
   d433a:	f004 fa2d 	bl	d8798 <pinMode>
    pinMode(LEDPIN, OUTPUT);
   d433e:	2101      	movs	r1, #1
   d4340:	2002      	movs	r0, #2
   d4342:	f004 fa29 	bl	d8798 <pinMode>
    
    SetPubTopic("DataTopic");
   d4346:	4910      	ldr	r1, [pc, #64]	; (d4388 <setup+0xd8>)
   d4348:	a802      	add	r0, sp, #8
   d434a:	f003 fa07 	bl	d775c <_ZN6StringC1EPK19__FlashStringHelper>
   d434e:	a802      	add	r0, sp, #8
   d4350:	f7ff ff9a 	bl	d4288 <_Z11SetPubTopic6String>
   d4354:	a802      	add	r0, sp, #8
   d4356:	f003 f9ba 	bl	d76ce <_ZN6StringD1Ev>
    SetResponseTopic("ResponseTopic");
   d435a:	490c      	ldr	r1, [pc, #48]	; (d438c <setup+0xdc>)
   d435c:	a802      	add	r0, sp, #8
   d435e:	f003 f9fd 	bl	d775c <_ZN6StringC1EPK19__FlashStringHelper>
   d4362:	a802      	add	r0, sp, #8
   d4364:	f7ff ff9a 	bl	d429c <_Z16SetResponseTopic6String>
   d4368:	a802      	add	r0, sp, #8
   d436a:	f003 f9b0 	bl	d76ce <_ZN6StringD1Ev>
}
   d436e:	b006      	add	sp, #24
   d4370:	bd10      	pop	{r4, pc}
   d4372:	bf00      	nop
   d4374:	000d40cd 	.word	0x000d40cd
   d4378:	000d9934 	.word	0x000d9934
   d437c:	2003ddc1 	.word	0x2003ddc1
   d4380:	000d9949 	.word	0x000d9949
   d4384:	000d9958 	.word	0x000d9958
   d4388:	000d99db 	.word	0x000d99db
   d438c:	000d9965 	.word	0x000d9965

000d4390 <_Z13MQTTSubscribev>:
}


// --------------------------------------------- Subscribe to a Topic
// 
int MQTTSubscribe() {
   d4390:	b510      	push	{r4, lr}
    
    strcpy(subTopic, "CommandTopic_");
   d4392:	490a      	ldr	r1, [pc, #40]	; (d43bc <_Z13MQTTSubscribev+0x2c>)
   d4394:	480a      	ldr	r0, [pc, #40]	; (d43c0 <_Z13MQTTSubscribev+0x30>)
    strcat(subTopic, deviceName);

    if (mqtt->isConnected()) {
   d4396:	4c0b      	ldr	r4, [pc, #44]	; (d43c4 <_Z13MQTTSubscribev+0x34>)

// --------------------------------------------- Subscribe to a Topic
// 
int MQTTSubscribe() {
    
    strcpy(subTopic, "CommandTopic_");
   d4398:	f005 fa5b 	bl	d9852 <strcpy>
    strcat(subTopic, deviceName);
   d439c:	490a      	ldr	r1, [pc, #40]	; (d43c8 <_Z13MQTTSubscribev+0x38>)
   d439e:	4808      	ldr	r0, [pc, #32]	; (d43c0 <_Z13MQTTSubscribev+0x30>)
   d43a0:	f005 fa3e 	bl	d9820 <strcat>

    if (mqtt->isConnected()) {
   d43a4:	6820      	ldr	r0, [r4, #0]
   d43a6:	f001 fbe5 	bl	d5b74 <_ZN4MQTT11isConnectedEv>
   d43aa:	b128      	cbz	r0, d43b8 <_Z13MQTTSubscribev+0x28>

	    mqtt->subscribe(subTopic);
   d43ac:	4904      	ldr	r1, [pc, #16]	; (d43c0 <_Z13MQTTSubscribev+0x30>)
   d43ae:	6820      	ldr	r0, [r4, #0]
   d43b0:	f001 feb7 	bl	d6122 <_ZN4MQTT9subscribeEPKc>
   d43b4:	2000      	movs	r0, #0
   d43b6:	bd10      	pop	{r4, pc}
	    
    	return 0;
	} else return 1;
   d43b8:	2001      	movs	r0, #1
}
   d43ba:	bd10      	pop	{r4, pc}
   d43bc:	000d9973 	.word	0x000d9973
   d43c0:	2003ddc2 	.word	0x2003ddc2
   d43c4:	2003dd38 	.word	0x2003dd38
   d43c8:	2003dd3c 	.word	0x2003dd3c

000d43cc <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev>:
class StaticJsonDocument : public JsonDocument {
  static const size_t _capacity =
      AddPadding<Max<1, desiredCapacity>::value>::value;

 public:
  StaticJsonDocument() : JsonDocument(_buffer, _capacity) {}
   d43cc:	b508      	push	{r3, lr}
   d43ce:	f100 0320 	add.w	r3, r0, #32
   d43d2:	4602      	mov	r2, r0
 public:
  MemoryPool(char* buf, size_t capa)
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
        _end(buf ? buf + capa : 0) {
   d43d4:	6003      	str	r3, [r0, #0]
   d43d6:	6043      	str	r3, [r0, #4]
   d43d8:	b113      	cbz	r3, d43e0 <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev+0x14>
   d43da:	f500 7190 	add.w	r1, r0, #288	; 0x120
   d43de:	e000      	b.n	d43e2 <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev+0x16>
   d43e0:	4619      	mov	r1, r3
   d43e2:	6091      	str	r1, [r2, #8]
   d43e4:	b10b      	cbz	r3, d43ea <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev+0x1e>
   d43e6:	f502 7390 	add.w	r3, r2, #288	; 0x120
    }
  }

  void setNull() {
    setType(VALUE_IS_NULL);
   d43ea:	f102 0018 	add.w	r0, r2, #24
   d43ee:	60d3      	str	r3, [r2, #12]
   d43f0:	2100      	movs	r1, #0
   d43f2:	f7ff fe7d 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
   d43f6:	4610      	mov	r0, r2
   d43f8:	bd08      	pop	{r3, pc}

000d43fa <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>:
  var->setOwnedString(value);
  return true;
}

template <typename T>
inline bool variantSetOwnedString(VariantData *var, T value, MemoryPool *pool) {
   d43fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d43fe:	460e      	mov	r6, r1
   d4400:	4617      	mov	r7, r2
  return var != 0 && var->setOwnedString(value, pool);
   d4402:	4604      	mov	r4, r0
   d4404:	b1c8      	cbz	r0, d443a <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE+0x40>
   d4406:	f100 0808 	add.w	r8, r0, #8
class RamStringAdapter : public ConstRamStringAdapter {
 public:
  RamStringAdapter(const char* str) : ConstRamStringAdapter(str) {}

  char* save(MemoryPool* pool) const {
    if (!_str) return NULL;
   d440a:	b1c1      	cbz	r1, d443e <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE+0x44>
    return 0;
  }

  size_t size() const {
    if (!_str) return 0;
    return strlen(_str);
   d440c:	4608      	mov	r0, r1
   d440e:	f005 fa44 	bl	d989a <strlen>
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
   d4412:	687d      	ldr	r5, [r7, #4]
  VariantSlot* allocVariant() {
    return allocRight<VariantSlot>();
  }

  char* allocFrozenString(size_t n) {
    if (!canAlloc(n)) return 0;
   d4414:	68b9      	ldr	r1, [r7, #8]
    size_t n = size() + 1;
   d4416:	1c42      	adds	r2, r0, #1
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
   d4418:	18ab      	adds	r3, r5, r2
  VariantSlot* allocVariant() {
    return allocRight<VariantSlot>();
  }

  char* allocFrozenString(size_t n) {
    if (!canAlloc(n)) return 0;
   d441a:	428b      	cmp	r3, r1
   d441c:	d80f      	bhi.n	d443e <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE+0x44>
    char* s = _left;
    _left += n;
   d441e:	607b      	str	r3, [r7, #4]
    char* dup = pool->allocFrozenString(n);
    if (dup) memcpy(dup, _str, n);
   d4420:	b16d      	cbz	r5, d443e <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE+0x44>
   d4422:	4631      	mov	r1, r6
   d4424:	4628      	mov	r0, r5
   d4426:	f005 f9c0 	bl	d97aa <memcpy>
  }

  void setOwnedString(not_null<const char *> s) {
    setType(VALUE_IS_OWNED_STRING);
   d442a:	4640      	mov	r0, r8
   d442c:	2104      	movs	r1, #4
   d442e:	f7ff fe5f 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asString = s.get();
   d4432:	6025      	str	r5, [r4, #0]
   d4434:	2001      	movs	r0, #1
   d4436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d443a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool setOwnedString(const char *s) {
    if (s) {
      setOwnedString(make_not_null(s));
      return true;
    } else {
      setType(VALUE_IS_NULL);
   d443e:	4640      	mov	r0, r8
   d4440:	2100      	movs	r1, #0
   d4442:	f7ff fe55 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
   d4446:	2000      	movs	r0, #0
}
   d4448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d444c <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_>:
                               MemoryPool *pool) {
  return var != 0 && var->setOwnedRaw(value, pool);
}

template <typename T>
inline bool variantSetSignedInteger(VariantData *var, T value) {
   d444c:	b538      	push	{r3, r4, r5, lr}
  if (!var) return false;
   d444e:	4602      	mov	r2, r0
   d4450:	b1a0      	cbz	r0, d447c <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_+0x30>
    setSignedInteger(value);
  }

  template <typename T>
  void setSignedInteger(T value) {
    if (value >= 0) {
   d4452:	2900      	cmp	r1, #0
   d4454:	f100 0008 	add.w	r0, r0, #8
   d4458:	460c      	mov	r4, r1
   d445a:	ea4f 75e1 	mov.w	r5, r1, asr #31
   d445e:	db03      	blt.n	d4468 <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_+0x1c>
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
   d4460:	2106      	movs	r1, #6
   d4462:	f7ff fe45 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
   d4466:	e005      	b.n	d4474 <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_+0x28>
    _content.asInteger = value;
  }

  void setNegativeInteger(UInt value) {
    setType(VALUE_IS_NEGATIVE_INTEGER);
   d4468:	2107      	movs	r1, #7
   d446a:	f7ff fe41 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asInteger = value;
   d446e:	4264      	negs	r4, r4
   d4470:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   d4474:	e9c2 4500 	strd	r4, r5, [r2]
  var->setSignedInteger(value);
  return true;
   d4478:	2001      	movs	r0, #1
   d447a:	bd38      	pop	{r3, r4, r5, pc}
}
   d447c:	bd38      	pop	{r3, r4, r5, pc}

000d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>:
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.get(key) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
   d447e:	b570      	push	{r4, r5, r6, lr}
   d4480:	4616      	mov	r6, r2
    if (isNull()) toObject();
   d4482:	7a02      	ldrb	r2, [r0, #8]
   d4484:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.get(key) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
   d4488:	4604      	mov	r4, r0
   d448a:	460d      	mov	r5, r1
    if (isNull()) toObject();
   d448c:	d105      	bne.n	d449a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x1c>
    _content.asCollection.clear();
    return _content.asCollection;
  }

  CollectionData &toObject() {
    setType(VALUE_IS_OBJECT);
   d448e:	2120      	movs	r1, #32
   d4490:	3008      	adds	r0, #8
   d4492:	f7ff fe2d 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
   d4496:	6022      	str	r2, [r4, #0]
  _tail = 0;
   d4498:	6062      	str	r2, [r4, #4]
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
    if (isNull()) toObject();
    if (!isObject()) return 0;
   d449a:	7a23      	ldrb	r3, [r4, #8]
   d449c:	f003 0320 	and.w	r3, r3, #32
   d44a0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
   d44a4:	b183      	cbz	r3, d44c8 <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x4a>
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
  VariantSlot* slot = getSlot(key);
   d44a6:	4629      	mov	r1, r5
   d44a8:	6820      	ldr	r0, [r4, #0]
   d44aa:	f7ff fe27 	bl	d40fc <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13>
  return slot ? slot->data() : 0;
   d44ae:	b100      	cbz	r0, d44b2 <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x34>
   d44b0:	bd70      	pop	{r4, r5, r6, pc}
  return slotData(addSlot(pool));
}

template <typename TAdaptedString>
inline VariantData* CollectionData::add(TAdaptedString key, MemoryPool* pool) {
  VariantSlot* slot = addSlot(pool);
   d44b2:	4631      	mov	r1, r6
   d44b4:	4620      	mov	r0, r4
   d44b6:	f7ff fe58 	bl	d416a <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE>

namespace ARDUINOJSON_NAMESPACE {

template <typename TAdaptedString>
inline bool slotSetKey(VariantSlot* var, TAdaptedString key, MemoryPool* pool) {
  if (!var) return false;
   d44ba:	b128      	cbz	r0, d44c8 <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x4a>
    _flags |= KEY_IS_OWNED;
    _key = k.get();
  }

  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
   d44bc:	7a03      	ldrb	r3, [r0, #8]
    _key = k.get();
   d44be:	60c5      	str	r5, [r0, #12]
    _flags |= KEY_IS_OWNED;
    _key = k.get();
  }

  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
   d44c0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d44c4:	7203      	strb	r3, [r0, #8]
   d44c6:	bd70      	pop	{r4, r5, r6, pc}
    VariantData *var = _content.asCollection.get(key);
    if (var) return var;
    return _content.asCollection.add(key, pool);
  }
   d44c8:	bd70      	pop	{r4, r5, r6, pc}

000d44ca <_ZN21ArduinoJson6110_110009variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>:
template <typename T>
inline typename enable_if<is_same<T, const char*>::value ||
                              is_same<T, char*>::value,
                          const char*>::type
variantAs(const VariantData* _data) {
  return _data != 0 ? _data->asString() : 0;
   d44ca:	b140      	cbz	r0, d44de <_ZN21ArduinoJson6110_110009variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x14>
      return 0;
  }
}

inline const char *VariantData::asString() const {
  switch (type()) {
   d44cc:	7a03      	ldrb	r3, [r0, #8]
   d44ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d44d2:	3b03      	subs	r3, #3
   d44d4:	2b01      	cmp	r3, #1
   d44d6:	d801      	bhi.n	d44dc <_ZN21ArduinoJson6110_110009variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x12>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return _content.asString;
   d44d8:	6800      	ldr	r0, [r0, #0]
   d44da:	4770      	bx	lr
    default:
      return 0;
   d44dc:	2000      	movs	r0, #0
}
   d44de:	4770      	bx	lr

000d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>:

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    if (!_loaded) {
   d44e0:	7b83      	ldrb	r3, [r0, #14]
   d44e2:	b943      	cbnz	r3, d44f6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv+0x16>
 public:
  explicit UnsafeCharPointerReader(const char* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}

  int read() {
    return static_cast<unsigned char>(*_ptr++);
   d44e4:	6843      	ldr	r3, [r0, #4]
   d44e6:	1c5a      	adds	r2, r3, #1
   d44e8:	6042      	str	r2, [r0, #4]
      int c = _reader.read();
      _current = static_cast<char>(c > 0 ? c : 0);
   d44ea:	781b      	ldrb	r3, [r3, #0]
   d44ec:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   d44f0:	7343      	strb	r3, [r0, #13]
      _loaded = true;
   d44f2:	2301      	movs	r3, #1
   d44f4:	7383      	strb	r3, [r0, #14]
    }
    return _current;
  }
   d44f6:	7b40      	ldrb	r0, [r0, #13]
   d44f8:	4770      	bx	lr

000d44fa <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>:
    if (c < 'A') return uint8_t(c - '0');
    c = char(c & ~0x20);  // uppercase
    return uint8_t(c - 'A' + 10);
  }

  DeserializationError skipSpacesAndComments() {
   d44fa:	b570      	push	{r4, r5, r6, lr}
   d44fc:	4604      	mov	r4, r0
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d44fe:	2500      	movs	r5, #0
    return uint8_t(c - 'A' + 10);
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
   d4500:	4620      	mov	r0, r4
   d4502:	f7ff ffed 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4506:	280a      	cmp	r0, #10
   d4508:	d803      	bhi.n	d4512 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x18>
   d450a:	2809      	cmp	r0, #9
   d450c:	d21d      	bcs.n	d454a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x50>
   d450e:	b1b0      	cbz	r0, d453e <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x44>
   d4510:	e02f      	b.n	d4572 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x78>
   d4512:	2820      	cmp	r0, #32
   d4514:	d019      	beq.n	d454a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x50>
   d4516:	282f      	cmp	r0, #47	; 0x2f
   d4518:	d002      	beq.n	d4520 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x26>
   d451a:	280d      	cmp	r0, #13
   d451c:	d129      	bne.n	d4572 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x78>
   d451e:	e014      	b.n	d454a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x50>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4520:	73a5      	strb	r5, [r4, #14]
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
   d4522:	4620      	mov	r0, r4
   d4524:	f7ff ffdc 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4528:	282a      	cmp	r0, #42	; 0x2a
   d452a:	d002      	beq.n	d4532 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x38>
   d452c:	282f      	cmp	r0, #47	; 0x2f
   d452e:	d016      	beq.n	d455e <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x64>
   d4530:	e01c      	b.n	d456c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x72>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4532:	73a5      	strb	r5, [r4, #14]
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
   d4534:	2600      	movs	r6, #0
              for (;;) {
                char c = current();
   d4536:	4620      	mov	r0, r4
   d4538:	f7ff ffd2 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
                if (c == '\0') return DeserializationError::IncompleteInput;
   d453c:	b910      	cbnz	r0, d4544 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x4a>
   d453e:	f04f 0001 	mov.w	r0, #1
   d4542:	bd70      	pop	{r4, r5, r6, pc}
                if (c == '/' && wasStar) {
   d4544:	282f      	cmp	r0, #47	; 0x2f
   d4546:	d102      	bne.n	d454e <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x54>
   d4548:	b10e      	cbz	r6, d454e <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x54>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d454a:	73a5      	strb	r5, [r4, #14]
   d454c:	e7d8      	b.n	d4500 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x6>
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
                  move();
                  break;
                }
                wasStar = c == '*';
   d454e:	f1a0 032a 	sub.w	r3, r0, #42	; 0x2a
   d4552:	425e      	negs	r6, r3
   d4554:	415e      	adcs	r6, r3
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4556:	73a5      	strb	r5, [r4, #14]
   d4558:	e7ed      	b.n	d4536 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x3c>
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '\n') break;
   d455a:	280a      	cmp	r0, #10
   d455c:	d0d0      	beq.n	d4500 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x6>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d455e:	73a5      	strb	r5, [r4, #14]
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
   d4560:	4620      	mov	r0, r4
   d4562:	f7ff ffbd 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
                if (c == '\0') return DeserializationError::IncompleteInput;
   d4566:	2800      	cmp	r0, #0
   d4568:	d1f7      	bne.n	d455a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x60>
   d456a:	e7e8      	b.n	d453e <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x44>
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
   d456c:	f04f 0002 	mov.w	r0, #2
   d4570:	bd70      	pop	{r4, r5, r6, pc}
          }
          break;

        default:
          return DeserializationError::Ok;
   d4572:	f04f 0000 	mov.w	r0, #0
      }
    }
  }
   d4576:	bd70      	pop	{r4, r5, r6, pc}

000d4578 <_ZNK21ArduinoJson6110_1100011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>:
  VariantData *getElement(size_t index) const {
    return isArray() ? _content.asCollection.get(index) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getMember(TAdaptedString key) const {
   d4578:	b508      	push	{r3, lr}
    return isObject() ? _content.asCollection.get(key) : 0;
   d457a:	7a02      	ldrb	r2, [r0, #8]
   d457c:	f002 0220 	and.w	r2, r2, #32
   d4580:	f002 03ff 	and.w	r3, r2, #255	; 0xff
   d4584:	b11a      	cbz	r2, d458e <_ZNK21ArduinoJson6110_1100011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x16>
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
  VariantSlot* slot = getSlot(key);
   d4586:	6800      	ldr	r0, [r0, #0]
   d4588:	f7ff fdb8 	bl	d40fc <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13>
   d458c:	bd08      	pop	{r3, pc}
   d458e:	4618      	mov	r0, r3
  }
   d4590:	bd08      	pop	{r3, pc}
	...

000d4594 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc>:
    if (err) return err;
    variant.setOwnedString(make_not_null(value));
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char *&result) {
   d4594:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4598:	4604      	mov	r4, r0
   d459a:	460f      	mov	r7, r1

class StringMover {
 public:
  class StringBuilder {
   public:
    StringBuilder(char** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
   d459c:	6886      	ldr	r6, [r0, #8]
    StringBuilder builder = _stringStorage.startString();
    const char stopChar = current();
   d459e:	f7ff ff9f 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d45a2:	2500      	movs	r5, #0
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char *&result) {
    StringBuilder builder = _stringStorage.startString();
    const char stopChar = current();
   d45a4:	4680      	mov	r8, r0
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d45a6:	73a5      	strb	r5, [r4, #14]
    StringBuilder builder = _stringStorage.startString();
    const char stopChar = current();

    move();
    for (;;) {
      char c = current();
   d45a8:	4620      	mov	r0, r4
   d45aa:	f7ff ff99 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
      move();
      if (c == stopChar) break;
   d45ae:	4580      	cmp	r8, r0
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d45b0:	f04f 0300 	mov.w	r3, #0
   d45b4:	73a5      	strb	r5, [r4, #14]

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
   d45b6:	d026      	beq.n	d4606 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x72>

      if (c == '\0') return DeserializationError::IncompleteInput;
   d45b8:	b918      	cbnz	r0, d45c2 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x2e>
   d45ba:	f04f 0001 	mov.w	r0, #1
   d45be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

      if (c == '\\') {
   d45c2:	285c      	cmp	r0, #92	; 0x5c
   d45c4:	d11a      	bne.n	d45fc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x68>
        c = current();
   d45c6:	4620      	mov	r0, r4
   d45c8:	f7ff ff8a 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
        if (c == '\0') return DeserializationError::IncompleteInput;
   d45cc:	2800      	cmp	r0, #0
   d45ce:	d0f4      	beq.n	d45ba <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x26>
        if (c == 'u') {
   d45d0:	2875      	cmp	r0, #117	; 0x75
   d45d2:	d001      	beq.n	d45d8 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x44>
   d45d4:	4b12      	ldr	r3, [pc, #72]	; (d4620 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x8c>)
   d45d6:	e006      	b.n	d45e6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x52>
          DeserializationError err = parseCodepoint(codepoint);
          if (err) return err;
          Utf8::encodeCodepoint(codepoint, builder);
          continue;
#else
          return DeserializationError::NotSupported;
   d45d8:	f04f 0004 	mov.w	r0, #4
   d45dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    for (;;) {
      if (p[0] == '\0') return c;
      if (p[0] == c) return p[1];
   d45e0:	4290      	cmp	r0, r2
   d45e2:	d004      	beq.n	d45ee <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x5a>
      p += 2;
   d45e4:	3302      	adds	r3, #2

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    for (;;) {
      if (p[0] == '\0') return c;
   d45e6:	781a      	ldrb	r2, [r3, #0]
   d45e8:	2a00      	cmp	r2, #0
   d45ea:	d1f9      	bne.n	d45e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x4c>
   d45ec:	e005      	b.n	d45fa <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x66>
      if (p[0] == c) return p[1];
   d45ee:	7858      	ldrb	r0, [r3, #1]
#endif
        }
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
   d45f0:	b918      	cbnz	r0, d45fa <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x66>
   d45f2:	f04f 0002 	mov.w	r0, #2
   d45f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d45fa:	73a5      	strb	r5, [r4, #14]

    void append(char c) {
      *(*_writePtr)++ = char(c);
   d45fc:	68a3      	ldr	r3, [r4, #8]
   d45fe:	1c5a      	adds	r2, r3, #1
   d4600:	60a2      	str	r2, [r4, #8]
   d4602:	7018      	strb	r0, [r3, #0]
   d4604:	e7d0      	b.n	d45a8 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x14>
    }

    char* complete() const {
      *(*_writePtr)++ = 0;
   d4606:	68a2      	ldr	r2, [r4, #8]
   d4608:	1c51      	adds	r1, r2, #1
   d460a:	60a1      	str	r1, [r4, #8]
   d460c:	7013      	strb	r3, [r2, #0]
      }

      builder.append(c);
    }

    result = builder.complete();
   d460e:	603e      	str	r6, [r7, #0]
    if (!result) return DeserializationError::NoMemory;
   d4610:	b91e      	cbnz	r6, d461a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x86>
   d4612:	f04f 0003 	mov.w	r0, #3
   d4616:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return DeserializationError::Ok;
   d461a:	4618      	mov	r0, r3
  }
   d461c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4620:	000d9985 	.word	0x000d9985

000d4624 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc>:
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
   d4624:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
   d4628:	2b1b      	cmp	r3, #27
   d462a:	d913      	bls.n	d4654 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc+0x30>
   d462c:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   d4630:	2b19      	cmp	r3, #25
   d4632:	d90f      	bls.n	d4654 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc+0x30>
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
   d4634:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
   d4638:	b2db      	uxtb	r3, r3
   d463a:	2b0e      	cmp	r3, #14
   d463c:	d904      	bls.n	d4648 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc+0x24>
   d463e:	f1a0 022e 	sub.w	r2, r0, #46	; 0x2e
   d4642:	4250      	negs	r0, r2
   d4644:	4150      	adcs	r0, r2
   d4646:	4770      	bx	lr
   d4648:	f647 72e5 	movw	r2, #32741	; 0x7fe5
   d464c:	fa22 f303 	lsr.w	r3, r2, r3
   d4650:	07db      	lsls	r3, r3, #31
   d4652:	d5f4      	bpl.n	d463e <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc+0x1a>
   d4654:	2001      	movs	r0, #1
  }
   d4656:	4770      	bx	lr

000d4658 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE8parseKeyERPKc>:
      err = skipSpacesAndComments();
      if (err) return err;
    }
  }

  DeserializationError parseKey(const char *&key) {
   d4658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d465c:	4604      	mov	r4, r0
   d465e:	460d      	mov	r5, r1
    if (isQuote(current())) {
   d4660:	f7ff ff3e 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
   d4664:	2827      	cmp	r0, #39	; 0x27
   d4666:	d02b      	beq.n	d46c0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE8parseKeyERPKc+0x68>
   d4668:	2822      	cmp	r0, #34	; 0x22
   d466a:	d029      	beq.n	d46c0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE8parseKeyERPKc+0x68>
  }

  DeserializationError parseNonQuotedString(const char *&result) {
    StringBuilder builder = _stringStorage.startString();

    char c = current();
   d466c:	4620      	mov	r0, r4

class StringMover {
 public:
  class StringBuilder {
   public:
    StringBuilder(char** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
   d466e:	68a7      	ldr	r7, [r4, #8]
   d4670:	f7ff ff36 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
    if (c == '\0') return DeserializationError::IncompleteInput;
   d4674:	4606      	mov	r6, r0
   d4676:	b300      	cbz	r0, d46ba <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE8parseKeyERPKc+0x62>

    if (canBeInNonQuotedString(c)) {  // no quotes
   d4678:	f7ff ffd4 	bl	d4624 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc>
   d467c:	b1d0      	cbz	r0, d46b4 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE8parseKeyERPKc+0x5c>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d467e:	f04f 0800 	mov.w	r8, #0

    void append(char c) {
      *(*_writePtr)++ = char(c);
   d4682:	68a3      	ldr	r3, [r4, #8]
   d4684:	f884 800e 	strb.w	r8, [r4, #14]
   d4688:	1c5a      	adds	r2, r3, #1
   d468a:	60a2      	str	r2, [r4, #8]

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        builder.append(c);
        c = current();
   d468c:	4620      	mov	r0, r4
   d468e:	701e      	strb	r6, [r3, #0]
   d4690:	f7ff ff26 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4694:	4606      	mov	r6, r0

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
   d4696:	f7ff ffc5 	bl	d4624 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc>
   d469a:	2800      	cmp	r0, #0
   d469c:	d1f1      	bne.n	d4682 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE8parseKeyERPKc+0x2a>
    }

    char* complete() const {
      *(*_writePtr)++ = 0;
   d469e:	68a3      	ldr	r3, [r4, #8]
   d46a0:	1c5a      	adds	r2, r3, #1
   d46a2:	60a2      	str	r2, [r4, #8]
      return DeserializationError::InvalidInput;
    }

    result = builder.complete();
    if (!result) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
   d46a4:	2f00      	cmp	r7, #0
   d46a6:	7018      	strb	r0, [r3, #0]
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
    }

    result = builder.complete();
   d46a8:	602f      	str	r7, [r5, #0]
    if (!result) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
   d46aa:	bf0c      	ite	eq
   d46ac:	2003      	moveq	r0, #3
   d46ae:	2000      	movne	r0, #0
   d46b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        move();
        builder.append(c);
        c = current();
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
   d46b4:	2002      	movs	r0, #2
   d46b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  DeserializationError parseNonQuotedString(const char *&result) {
    StringBuilder builder = _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;
   d46ba:	2001      	movs	r0, #1
   d46bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }

  DeserializationError parseKey(const char *&key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
   d46c0:	4629      	mov	r1, r5
   d46c2:	4620      	mov	r0, r4
   d46c4:	f7ff ff66 	bl	d4594 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc>
    } else {
      return parseNonQuotedString(key);
    }
  }
   d46c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d46cc <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char *s) {
   d46cc:	b538      	push	{r3, r4, r5, lr}
   d46ce:	4604      	mov	r4, r0
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
   d46d0:	4608      	mov	r0, r1

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char *s) {
   d46d2:	460d      	mov	r5, r1
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
   d46d4:	f005 f8e1 	bl	d989a <strlen>
   d46d8:	4629      	mov	r1, r5
   d46da:	4602      	mov	r2, r0
   d46dc:	6820      	ldr	r0, [r4, #0]
   d46de:	f7ff fd6f 	bl	d41c0 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj>
   d46e2:	6863      	ldr	r3, [r4, #4]
   d46e4:	4418      	add	r0, r3
   d46e6:	6060      	str	r0, [r4, #4]
   d46e8:	bd38      	pop	{r3, r4, r5, pc}
   d46ea:	0000      	movs	r0, r0
   d46ec:	0000      	movs	r0, r0
	...

000d46f0 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
      }
    }
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
   d46f0:	b570      	push	{r4, r5, r6, lr}
        1e16,
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
        forge(0x5A827748, 0xF9301D32),  // 1e128
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
    };
   d46f2:	4d1b      	ldr	r5, [pc, #108]	; (d4760 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x70>)
   d46f4:	4c1b      	ldr	r4, [pc, #108]	; (d4764 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x74>)
   d46f6:	682b      	ldr	r3, [r5, #0]
   d46f8:	f013 0f01 	tst.w	r3, #1
      }
    }
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
   d46fc:	4606      	mov	r6, r0
        1e16,
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
        forge(0x5A827748, 0xF9301D32),  // 1e128
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
    };
   d46fe:	d11a      	bne.n	d4736 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x46>
   d4700:	4628      	mov	r0, r5
   d4702:	f7ff fcd0 	bl	d40a6 <__cxa_guard_acquire>
   d4706:	b1b0      	cbz	r0, d4736 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x46>
   d4708:	a30d      	add	r3, pc, #52	; (adr r3, d4740 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x50>)
   d470a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d470e:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
   d4712:	a30d      	add	r3, pc, #52	; (adr r3, d4748 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x58>)
   d4714:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4718:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   d471c:	a30c      	add	r3, pc, #48	; (adr r3, d4750 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x60>)
   d471e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4722:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
   d4726:	a30c      	add	r3, pc, #48	; (adr r3, d4758 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x68>)
   d4728:	e9d3 2300 	ldrd	r2, r3, [r3]
   d472c:	4628      	mov	r0, r5
   d472e:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
   d4732:	f7ff fcbd 	bl	d40b0 <__cxa_guard_release>
    return factors[index];
   d4736:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  }
   d473a:	ed94 0b00 	vldr	d0, [r4]
   d473e:	bd70      	pop	{r4, r5, r6, pc}
   d4740:	b5056e17 	.word	0xb5056e17
   d4744:	4693b8b5 	.word	0x4693b8b5
   d4748:	e93ff9f5 	.word	0xe93ff9f5
   d474c:	4d384f03 	.word	0x4d384f03
   d4750:	f9301d32 	.word	0xf9301d32
   d4754:	5a827748 	.word	0x5a827748
   d4758:	7f73bf3c 	.word	0x7f73bf3c
   d475c:	75154fdd 	.word	0x75154fdd
   d4760:	2003dd30 	.word	0x2003dd30
   d4764:	2003dc28 	.word	0x2003dc28

000d4768 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:

  static T negativeBinaryPowerOfTen(int index) {
   d4768:	b570      	push	{r4, r5, r6, lr}
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
    };
   d476a:	4d33      	ldr	r5, [pc, #204]	; (d4838 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xd0>)
   d476c:	4c33      	ldr	r4, [pc, #204]	; (d483c <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xd4>)
   d476e:	682b      	ldr	r3, [r5, #0]
   d4770:	f013 0f01 	tst.w	r3, #1
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
    };
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
   d4774:	4606      	mov	r6, r0
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
    };
   d4776:	d134      	bne.n	d47e2 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x7a>
   d4778:	4628      	mov	r0, r5
   d477a:	f7ff fc94 	bl	d40a6 <__cxa_guard_acquire>
   d477e:	2800      	cmp	r0, #0
   d4780:	d02f      	beq.n	d47e2 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x7a>
   d4782:	a31b      	add	r3, pc, #108	; (adr r3, d47f0 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x88>)
   d4784:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4788:	e9c4 2300 	strd	r2, r3, [r4]
   d478c:	a31a      	add	r3, pc, #104	; (adr r3, d47f8 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x90>)
   d478e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4792:	e9c4 2302 	strd	r2, r3, [r4, #8]
   d4796:	a31a      	add	r3, pc, #104	; (adr r3, d4800 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x98>)
   d4798:	e9d3 2300 	ldrd	r2, r3, [r3]
   d479c:	e9c4 2304 	strd	r2, r3, [r4, #16]
   d47a0:	a319      	add	r3, pc, #100	; (adr r3, d4808 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xa0>)
   d47a2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47a6:	e9c4 2306 	strd	r2, r3, [r4, #24]
   d47aa:	a319      	add	r3, pc, #100	; (adr r3, d4810 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xa8>)
   d47ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47b0:	e9c4 2308 	strd	r2, r3, [r4, #32]
   d47b4:	a318      	add	r3, pc, #96	; (adr r3, d4818 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xb0>)
   d47b6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47ba:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
   d47be:	a318      	add	r3, pc, #96	; (adr r3, d4820 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xb8>)
   d47c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47c4:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
   d47c8:	a317      	add	r3, pc, #92	; (adr r3, d4828 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xc0>)
   d47ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47ce:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
   d47d2:	a317      	add	r3, pc, #92	; (adr r3, d4830 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xc8>)
   d47d4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d47d8:	4628      	mov	r0, r5
   d47da:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
   d47de:	f7ff fc67 	bl	d40b0 <__cxa_guard_release>
    return factors[index];
   d47e2:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  }
   d47e6:	ed94 0b00 	vldr	d0, [r4]
   d47ea:	bd70      	pop	{r4, r5, r6, pc}
   d47ec:	f3af 8000 	nop.w
   d47f0:	9999999a 	.word	0x9999999a
   d47f4:	3fb99999 	.word	0x3fb99999
   d47f8:	47ae147b 	.word	0x47ae147b
   d47fc:	3f847ae1 	.word	0x3f847ae1
   d4800:	eb1c432d 	.word	0xeb1c432d
   d4804:	3f1a36e2 	.word	0x3f1a36e2
   d4808:	e2308c3a 	.word	0xe2308c3a
   d480c:	3e45798e 	.word	0x3e45798e
   d4810:	97d889bc 	.word	0x97d889bc
   d4814:	3c9cd2b2 	.word	0x3c9cd2b2
   d4818:	d5a8a733 	.word	0xd5a8a733
   d481c:	3949f623 	.word	0x3949f623
   d4820:	44f4a73d 	.word	0x44f4a73d
   d4824:	32a50ffd 	.word	0x32a50ffd
   d4828:	cf8c979d 	.word	0xcf8c979d
   d482c:	255bba08 	.word	0x255bba08
   d4830:	64ac6f43 	.word	0x64ac6f43
   d4834:	0ac80628 	.word	0x0ac80628
   d4838:	2003dce0 	.word	0x2003dce0
   d483c:	2003dce8 	.word	0x2003dce8

000d4840 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
   d4840:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
   d4844:	780b      	ldrb	r3, [r1, #0]
   d4846:	2b2b      	cmp	r3, #43	; 0x2b

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
   d4848:	4604      	mov	r4, r0
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
   d484a:	d004      	beq.n	d4856 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x16>
   d484c:	2b2d      	cmp	r3, #45	; 0x2d
   d484e:	d103      	bne.n	d4858 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x18>
    case '-':
      is_negative = true;
      s++;
   d4850:	3101      	adds	r1, #1
  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
    case '-':
      is_negative = true;
   d4852:	2501      	movs	r5, #1
      s++;
      break;
   d4854:	e001      	b.n	d485a <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a>
    case '+':
      s++;
   d4856:	3101      	adds	r1, #1
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
   d4858:	2500      	movs	r5, #0
#if ARDUINOJSON_ENABLE_INFINITY
  if (*s == 'i' || *s == 'I')
    return is_negative ? -traits::inf() : traits::inf();
#endif

  if (!isdigit(*s) && *s != '.') return return_type();
   d485a:	780b      	ldrb	r3, [r1, #0]
   d485c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d4860:	2a09      	cmp	r2, #9
   d4862:	d902      	bls.n	d486a <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a>
   d4864:	2b2e      	cmp	r3, #46	; 0x2e
   d4866:	f040 80ab 	bne.w	d49c0 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x180>
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
   d486a:	f8df b1f0 	ldr.w	fp, [pc, #496]	; d4a5c <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x21c>
   d486e:	4688      	mov	r8, r1
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
   d4870:	2000      	movs	r0, #0
   d4872:	2100      	movs	r1, #0
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
   d4874:	f04f 3a99 	mov.w	sl, #2576980377	; 0x99999999
    mantissa *= 10;
   d4878:	f04f 0c0a 	mov.w	ip, #10

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
   d487c:	46c6      	mov	lr, r8
   d487e:	f81e 3b01 	ldrb.w	r3, [lr], #1
#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
   d4882:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   d4886:	b2d2      	uxtb	r2, r2
   d4888:	2a09      	cmp	r2, #9
   d488a:	d814      	bhi.n	d48b6 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x76>
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
   d488c:	458b      	cmp	fp, r1
   d488e:	bf08      	it	eq
   d4890:	4582      	cmpeq	sl, r0
   d4892:	d311      	bcc.n	d48b8 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x78>
    mantissa *= 10;
   d4894:	fb0c f301 	mul.w	r3, ip, r1
   d4898:	fba0 010c 	umull	r0, r1, r0, ip
   d489c:	4419      	add	r1, r3
    if (mantissa > maxUint - digit) break;
   d489e:	2300      	movs	r3, #0
   d48a0:	b2d2      	uxtb	r2, r2
   d48a2:	43df      	mvns	r7, r3
   d48a4:	43d6      	mvns	r6, r2
   d48a6:	428f      	cmp	r7, r1
   d48a8:	bf08      	it	eq
   d48aa:	4286      	cmpeq	r6, r0
   d48ac:	d304      	bcc.n	d48b8 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x78>
    mantissa += digit;
   d48ae:	1880      	adds	r0, r0, r2
   d48b0:	4159      	adcs	r1, r3

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
   d48b2:	46f0      	mov	r8, lr
   d48b4:	e7e2      	b.n	d487c <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c>
    if (mantissa > maxUint - digit) break;
    mantissa += digit;
    s++;
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
   d48b6:	b123      	cbz	r3, d48c2 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x82>

  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
   d48b8:	2300      	movs	r3, #0
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
   d48ba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   d48be:	4f64      	ldr	r7, [pc, #400]	; (d4a50 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x210>)
   d48c0:	e00f      	b.n	d48e2 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xa2>

  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
   d48c2:	e9c4 0100 	strd	r0, r1, [r4]
   d48c6:	f004 fad7 	bl	d8e78 <__aeabi_ul2d>
   d48ca:	2d00      	cmp	r5, #0
   d48cc:	e9c4 0102 	strd	r0, r1, [r4, #8]
   d48d0:	bf0c      	ite	eq
   d48d2:	2306      	moveq	r3, #6
   d48d4:	2307      	movne	r3, #7
   d48d6:	e0b2      	b.n	d4a3e <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1fe>

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
   d48d8:	2300      	movs	r3, #0
   d48da:	220a      	movs	r2, #10
   d48dc:	f004 fdbc 	bl	d9458 <__aeabi_uldivmod>
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
   d48e0:	464b      	mov	r3, r9
   d48e2:	428f      	cmp	r7, r1
   d48e4:	bf08      	it	eq
   d48e6:	4286      	cmpeq	r6, r0
   d48e8:	f103 0901 	add.w	r9, r3, #1
   d48ec:	d3f4      	bcc.n	d48d8 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x98>
   d48ee:	ebc8 0303 	rsb	r3, r8, r3
   d48f2:	eb03 0608 	add.w	r6, r3, r8
   d48f6:	4642      	mov	r2, r8
    mantissa /= 10;
    exponent_offset++;
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
   d48f8:	f818 7b01 	ldrb.w	r7, [r8], #1
   d48fc:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
   d4900:	f1be 0f09 	cmp.w	lr, #9
   d4904:	b236      	sxth	r6, r6
   d4906:	d9f4      	bls.n	d48f2 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb2>
    exponent_offset++;
    s++;
  }

  if (*s == '.') {
   d4908:	2f2e      	cmp	r7, #46	; 0x2e
   d490a:	d11d      	bne.n	d4948 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x108>
   d490c:	46c6      	mov	lr, r8
    s++;
    while (isdigit(*s)) {
      if (mantissa < traits::mantissa_max / 10) {
   d490e:	f20f 1938 	addw	r9, pc, #312	; 0x138
   d4912:	e9d9 8900 	ldrd	r8, r9, [r9]
        mantissa = mantissa * 10 + uint8_t(*s - '0');
   d4916:	f04f 0c0a 	mov.w	ip, #10
   d491a:	4672      	mov	r2, lr
   d491c:	f10e 0e01 	add.w	lr, lr, #1
   d4920:	7817      	ldrb	r7, [r2, #0]
   d4922:	3f30      	subs	r7, #48	; 0x30
   d4924:	b2ff      	uxtb	r7, r7
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
   d4926:	2f09      	cmp	r7, #9
   d4928:	d80e      	bhi.n	d4948 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x108>
      if (mantissa < traits::mantissa_max / 10) {
   d492a:	4589      	cmp	r9, r1
   d492c:	bf08      	it	eq
   d492e:	4580      	cmpeq	r8, r0
   d4930:	d3f3      	bcc.n	d491a <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xda>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
   d4932:	fba0 230c 	umull	r2, r3, r0, ip
   d4936:	fb0c 3301 	mla	r3, ip, r1, r3
   d493a:	19d0      	adds	r0, r2, r7
        exponent_offset--;
   d493c:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
      if (mantissa < traits::mantissa_max / 10) {
        mantissa = mantissa * 10 + uint8_t(*s - '0');
   d4940:	f143 0100 	adc.w	r1, r3, #0
        exponent_offset--;
   d4944:	b236      	sxth	r6, r6
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
   d4946:	e7e8      	b.n	d491a <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xda>
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
   d4948:	7813      	ldrb	r3, [r2, #0]
   d494a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   d494e:	2b45      	cmp	r3, #69	; 0x45
   d4950:	d133      	bne.n	d49ba <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x17a>
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
   d4952:	7853      	ldrb	r3, [r2, #1]
   d4954:	2b2d      	cmp	r3, #45	; 0x2d
   d4956:	d103      	bne.n	d4960 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x120>
      negative_exponent = true;
      s++;
   d4958:	1c97      	adds	r7, r2, #2
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
   d495a:	f04f 0e01 	mov.w	lr, #1
   d495e:	e005      	b.n	d496c <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x12c>
      s++;
    } else if (*s == '+') {
   d4960:	2b2b      	cmp	r3, #43	; 0x2b
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
   d4962:	bf14      	ite	ne
   d4964:	1c57      	addne	r7, r2, #1
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
   d4966:	1c97      	addeq	r7, r2, #2
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
   d4968:	f04f 0e00 	mov.w	lr, #0
   d496c:	2300      	movs	r3, #0
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
   d496e:	f04f 080a 	mov.w	r8, #10
   d4972:	463a      	mov	r2, r7
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
   d4974:	f817 cb01 	ldrb.w	ip, [r7], #1
   d4978:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
   d497c:	fa5f f98c 	uxtb.w	r9, ip
   d4980:	f1b9 0f09 	cmp.w	r9, #9
   d4984:	d814      	bhi.n	d49b0 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x170>
      exponent = exponent * 10 + (*s - '0');
   d4986:	fb08 c303 	mla	r3, r8, r3, ip
      if (exponent + exponent_offset > traits::exponent_max) {
   d498a:	18f2      	adds	r2, r6, r3
   d498c:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
   d4990:	ddef      	ble.n	d4972 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x132>
        if (negative_exponent)
          return is_negative ? -0.0f : 0.0f;
   d4992:	2200      	movs	r2, #0
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
   d4994:	f1be 0f00 	cmp.w	lr, #0
   d4998:	d005      	beq.n	d49a6 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x166>
          return is_negative ? -0.0f : 0.0f;
   d499a:	b115      	cbz	r5, d49a2 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x162>
   d499c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
   d49a0:	e04a      	b.n	d4a38 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f8>
   d49a2:	2300      	movs	r3, #0
   d49a4:	e048      	b.n	d4a38 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f8>
        else
          return is_negative ? -traits::inf() : traits::inf();
   d49a6:	b90d      	cbnz	r5, d49ac <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x16c>
   d49a8:	4b2a      	ldr	r3, [pc, #168]	; (d4a54 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x214>)
   d49aa:	e045      	b.n	d4a38 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f8>
   d49ac:	4b2a      	ldr	r3, [pc, #168]	; (d4a58 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x218>)
   d49ae:	e043      	b.n	d4a38 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f8>
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
   d49b0:	f1be 0f00 	cmp.w	lr, #0
   d49b4:	d002      	beq.n	d49bc <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x17c>
   d49b6:	425b      	negs	r3, r3
   d49b8:	e000      	b.n	d49bc <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x17c>
      }
      s++;
    }
  }

  int exponent = 0;
   d49ba:	2300      	movs	r3, #0
    if (negative_exponent) exponent = -exponent;
  }
  exponent += exponent_offset;

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
   d49bc:	7817      	ldrb	r7, [r2, #0]
   d49be:	b14f      	cbz	r7, d49d4 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x194>

namespace ARDUINOJSON_NAMESPACE {

template <typename TFloat, typename TUInt>
struct ParsedNumber {
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
   d49c0:	2200      	movs	r2, #0
   d49c2:	2300      	movs	r3, #0
   d49c4:	e9c4 2300 	strd	r2, r3, [r4]
   d49c8:	2300      	movs	r3, #0
   d49ca:	2200      	movs	r2, #0
   d49cc:	e9c4 2302 	strd	r2, r3, [r4, #8]
   d49d0:	2300      	movs	r3, #0
   d49d2:	e034      	b.n	d4a3e <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1fe>
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
  }
  exponent += exponent_offset;
   d49d4:	441e      	add	r6, r3

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
   d49d6:	f004 fa4f 	bl	d8e78 <__aeabi_ul2d>
  typedef int16_t exponent_type;
  static const exponent_type exponent_max = 308;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
   d49da:	2e00      	cmp	r6, #0
   d49dc:	4680      	mov	r8, r0
   d49de:	4689      	mov	r9, r1
   d49e0:	dd11      	ble.n	d4a06 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1c6>
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
   d49e2:	07f2      	lsls	r2, r6, #31
   d49e4:	d50a      	bpl.n	d49fc <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1bc>
   d49e6:	b2f8      	uxtb	r0, r7
   d49e8:	f7ff fe82 	bl	d46f0 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
   d49ec:	4640      	mov	r0, r8
   d49ee:	4649      	mov	r1, r9
   d49f0:	ec53 2b10 	vmov	r2, r3, d0
   d49f4:	f004 fa76 	bl	d8ee4 <__aeabi_dmul>
   d49f8:	4680      	mov	r8, r0
   d49fa:	4689      	mov	r9, r1
  static const exponent_type exponent_max = 308;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
   d49fc:	1076      	asrs	r6, r6, #1
   d49fe:	f107 0701 	add.w	r7, r7, #1
   d4a02:	d1ee      	bne.n	d49e2 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a2>
   d4a04:	e011      	b.n	d4a2a <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1ea>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = TExponent(-e);
   d4a06:	4276      	negs	r6, r6
      for (uint8_t index = 0; e != 0; index++) {
   d4a08:	b17e      	cbz	r6, d4a2a <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1ea>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
   d4a0a:	07f3      	lsls	r3, r6, #31
   d4a0c:	d50a      	bpl.n	d4a24 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1e4>
   d4a0e:	b2f8      	uxtb	r0, r7
   d4a10:	f7ff feaa 	bl	d4768 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
   d4a14:	4640      	mov	r0, r8
   d4a16:	4649      	mov	r1, r9
   d4a18:	ec53 2b10 	vmov	r2, r3, d0
   d4a1c:	f004 fa62 	bl	d8ee4 <__aeabi_dmul>
   d4a20:	4680      	mov	r8, r0
   d4a22:	4689      	mov	r9, r1
        e >>= 1;
   d4a24:	1076      	asrs	r6, r6, #1
   d4a26:	3701      	adds	r7, #1
   d4a28:	e7ee      	b.n	d4a08 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1c8>

  return is_negative ? -result : result;
   d4a2a:	b11d      	cbz	r5, d4a34 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f4>
   d4a2c:	4642      	mov	r2, r8
   d4a2e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
   d4a32:	e001      	b.n	d4a38 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f8>
   d4a34:	4642      	mov	r2, r8
   d4a36:	464b      	mov	r3, r9
  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
   d4a38:	e9c4 2302 	strd	r2, r3, [r4, #8]
   d4a3c:	2308      	movs	r3, #8
   d4a3e:	7423      	strb	r3, [r4, #16]
  if (*s != '\0') return return_type();

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);

  return is_negative ? -result : result;
}
   d4a40:	4620      	mov	r0, r4
   d4a42:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4a46:	bf00      	nop
   d4a48:	99999998 	.word	0x99999998
   d4a4c:	00019999 	.word	0x00019999
   d4a50:	000fffff 	.word	0x000fffff
   d4a54:	7ff00000 	.word	0x7ff00000
   d4a58:	fff00000 	.word	0xfff00000
   d4a5c:	19999999 	.word	0x19999999

000d4a60 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE>:
    result = builder.complete();
    if (!result) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(VariantData &result) {
   d4a60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4a64:	b097      	sub	sp, #92	; 0x5c
   d4a66:	4680      	mov	r8, r0
   d4a68:	460d      	mov	r5, r1
    char buffer[64];
    uint8_t n = 0;

    char c = current();
   d4a6a:	f7ff fd39 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4a6e:	2400      	movs	r4, #0
   d4a70:	4607      	mov	r7, r0
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4a72:	46a1      	mov	r9, r4
  DeserializationError parseNumericValue(VariantData &result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
   d4a74:	4638      	mov	r0, r7
   d4a76:	b2e6      	uxtb	r6, r4
   d4a78:	f7ff fdd4 	bl	d4624 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc>
   d4a7c:	b158      	cbz	r0, d4a96 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x36>
   d4a7e:	2c3f      	cmp	r4, #63	; 0x3f
   d4a80:	d009      	beq.n	d4a96 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x36>
      move();
      buffer[n++] = c;
   d4a82:	ab06      	add	r3, sp, #24
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4a84:	f888 900e 	strb.w	r9, [r8, #14]
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
   d4a88:	54e7      	strb	r7, [r4, r3]
      c = current();
   d4a8a:	4640      	mov	r0, r8
   d4a8c:	f7ff fd28 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4a90:	3401      	adds	r4, #1
   d4a92:	4607      	mov	r7, r0
  DeserializationError parseNumericValue(VariantData &result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
   d4a94:	e7ee      	b.n	d4a74 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x14>
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
   d4a96:	ab16      	add	r3, sp, #88	; 0x58
   d4a98:	4433      	add	r3, r6
   d4a9a:	2400      	movs	r4, #0
   d4a9c:	f803 4c40 	strb.w	r4, [r3, #-64]

    c = buffer[0];
   d4aa0:	f89d 3018 	ldrb.w	r3, [sp, #24]
    if (c == 't') {  // true
   d4aa4:	2b74      	cmp	r3, #116	; 0x74
   d4aa6:	d109      	bne.n	d4abc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x5c>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
   d4aa8:	2105      	movs	r1, #5
   d4aaa:	f105 0008 	add.w	r0, r5, #8
   d4aae:	f7ff fb1f 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asInteger = static_cast<UInt>(value);
   d4ab2:	2201      	movs	r2, #1
   d4ab4:	2300      	movs	r3, #0
   d4ab6:	e9c5 2300 	strd	r2, r3, [r5]
   d4aba:	e010      	b.n	d4ade <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x7e>
      result.setBoolean(true);
      return n == 4 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
    }
    if (c == 'f') {  // false
   d4abc:	2b66      	cmp	r3, #102	; 0x66
   d4abe:	d10c      	bne.n	d4ada <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x7a>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
   d4ac0:	f105 0008 	add.w	r0, r5, #8
   d4ac4:	2105      	movs	r1, #5
   d4ac6:	f7ff fb13 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asInteger = static_cast<UInt>(value);
   d4aca:	2200      	movs	r2, #0
   d4acc:	2300      	movs	r3, #0
   d4ace:	e9c5 2300 	strd	r2, r3, [r5]
      result.setBoolean(false);
      return n == 5 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
   d4ad2:	1f70      	subs	r0, r6, #5
   d4ad4:	bf18      	it	ne
   d4ad6:	2001      	movne	r0, #1
   d4ad8:	e024      	b.n	d4b24 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0xc4>
    }
    if (c == 'n') {  // null
   d4ada:	2b6e      	cmp	r3, #110	; 0x6e
   d4adc:	d101      	bne.n	d4ae2 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x82>
      // the variant is already null
      return n == 4 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
   d4ade:	1f30      	subs	r0, r6, #4
   d4ae0:	e7f8      	b.n	d4ad4 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x74>
    }

    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
   d4ae2:	a906      	add	r1, sp, #24
   d4ae4:	4668      	mov	r0, sp
   d4ae6:	f7ff feab 	bl	d4840 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>

    switch (num.type()) {
   d4aea:	f89d 1010 	ldrb.w	r1, [sp, #16]
   d4aee:	2907      	cmp	r1, #7
      // the variant is already null
      return n == 4 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
    }

    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
   d4af0:	e9dd 6700 	ldrd	r6, r7, [sp]

    switch (num.type()) {
   d4af4:	d003      	beq.n	d4afe <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x9e>
   d4af6:	2908      	cmp	r1, #8
   d4af8:	d008      	beq.n	d4b0c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0xac>
   d4afa:	2906      	cmp	r1, #6
   d4afc:	d110      	bne.n	d4b20 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0xc0>
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
   d4afe:	f105 0008 	add.w	r0, r5, #8
   d4b02:	f7ff faf5 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asInteger = value;
   d4b06:	e9c5 6700 	strd	r6, r7, [r5]
   d4b0a:	e007      	b.n	d4b1c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0xbc>
      case VALUE_IS_POSITIVE_INTEGER:
        result.setPositiveInteger(num.uintValue);
        return DeserializationError::Ok;

      case VALUE_IS_FLOAT:
        result.setFloat(num.floatValue);
   d4b0c:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
    setType(VALUE_IS_BOOLEAN);
    _content.asInteger = static_cast<UInt>(value);
  }

  void setFloat(Float value) {
    setType(VALUE_IS_FLOAT);
   d4b10:	f105 0008 	add.w	r0, r5, #8
   d4b14:	f7ff faec 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asFloat = value;
   d4b18:	e9c5 6700 	strd	r6, r7, [r5]
        return DeserializationError::Ok;
   d4b1c:	4620      	mov	r0, r4
   d4b1e:	e001      	b.n	d4b24 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0xc4>
    }

    return DeserializationError::InvalidInput;
   d4b20:	f04f 0002 	mov.w	r0, #2
  }
   d4b24:	b017      	add	sp, #92	; 0x5c
   d4b26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4b2a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE>:
    if (current() != charToSkip) return false;
    move();
    return true;
  }

  DeserializationError parseVariant(VariantData &variant) {
   d4b2a:	b570      	push	{r4, r5, r6, lr}
   d4b2c:	b088      	sub	sp, #32
   d4b2e:	460c      	mov	r4, r1
   d4b30:	4606      	mov	r6, r0
    DeserializationError err = skipSpacesAndComments();
   d4b32:	f7ff fce2 	bl	d44fa <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>
    if (err) return err;
   d4b36:	a901      	add	r1, sp, #4
    move();
    return true;
  }

  DeserializationError parseVariant(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
   d4b38:	f88d 0004 	strb.w	r0, [sp, #4]
    if (err) return err;
   d4b3c:	a804      	add	r0, sp, #16
   d4b3e:	f7ff fb33 	bl	d41a8 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
   d4b42:	9b04      	ldr	r3, [sp, #16]
   d4b44:	2b00      	cmp	r3, #0
   d4b46:	d13e      	bne.n	d4bc6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x9c>
   d4b48:	9d05      	ldr	r5, [sp, #20]
   d4b4a:	f015 0501 	ands.w	r5, r5, #1
   d4b4e:	d13a      	bne.n	d4bc6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x9c>

    switch (current()) {
   d4b50:	4630      	mov	r0, r6
   d4b52:	f7ff fcc5 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4b56:	2827      	cmp	r0, #39	; 0x27
   d4b58:	d110      	bne.n	d4b7c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x52>
    }
  }

  DeserializationError parseStringValue(VariantData &variant) {
    const char *value;
    DeserializationError err = parseQuotedString(value);
   d4b5a:	a903      	add	r1, sp, #12
   d4b5c:	4630      	mov	r0, r6
   d4b5e:	f7ff fd19 	bl	d4594 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc>
    if (err) return err;
   d4b62:	a902      	add	r1, sp, #8
    }
  }

  DeserializationError parseStringValue(VariantData &variant) {
    const char *value;
    DeserializationError err = parseQuotedString(value);
   d4b64:	f88d 0008 	strb.w	r0, [sp, #8]
    if (err) return err;
   d4b68:	a806      	add	r0, sp, #24
   d4b6a:	f7ff fb1d 	bl	d41a8 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
   d4b6e:	9b06      	ldr	r3, [sp, #24]
   d4b70:	bb63      	cbnz	r3, d4bcc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0xa2>
   d4b72:	9807      	ldr	r0, [sp, #28]
   d4b74:	f010 0201 	ands.w	r2, r0, #1
   d4b78:	d128      	bne.n	d4bcc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0xa2>
   d4b7a:	e02a      	b.n	d4bd2 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0xa8>

  DeserializationError parseVariant(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    switch (current()) {
   d4b7c:	d807      	bhi.n	d4b8e <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x64>
   d4b7e:	2822      	cmp	r0, #34	; 0x22
   d4b80:	d0eb      	beq.n	d4b5a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x30>
      case '\"':
      case '\'':
        return parseStringValue(variant);

      default:
        return parseNumericValue(variant);
   d4b82:	4621      	mov	r1, r4
   d4b84:	4630      	mov	r0, r6
   d4b86:	f7ff ff6b 	bl	d4a60 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE>
   d4b8a:	b2c0      	uxtb	r0, r0
   d4b8c:	e029      	b.n	d4be2 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0xb8>

  DeserializationError parseVariant(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    switch (current()) {
   d4b8e:	285b      	cmp	r0, #91	; 0x5b
   d4b90:	d10b      	bne.n	d4baa <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x80>
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
    setType(VALUE_IS_ARRAY);
   d4b92:	f104 0008 	add.w	r0, r4, #8
   d4b96:	2140      	movs	r1, #64	; 0x40
   d4b98:	f7ff faaa 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
   d4b9c:	6025      	str	r5, [r4, #0]
  _tail = 0;
   d4b9e:	6065      	str	r5, [r4, #4]
      case '[':
        return parseArray(variant.toArray());
   d4ba0:	4621      	mov	r1, r4
   d4ba2:	4630      	mov	r0, r6
   d4ba4:	f000 f81f 	bl	d4be6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE>
   d4ba8:	e7ef      	b.n	d4b8a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x60>

  DeserializationError parseVariant(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    switch (current()) {
   d4baa:	287b      	cmp	r0, #123	; 0x7b
   d4bac:	d1e9      	bne.n	d4b82 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x58>
    _content.asCollection.clear();
    return _content.asCollection;
  }

  CollectionData &toObject() {
    setType(VALUE_IS_OBJECT);
   d4bae:	f104 0008 	add.w	r0, r4, #8
   d4bb2:	2120      	movs	r1, #32
   d4bb4:	f7ff fa9c 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
   d4bb8:	6025      	str	r5, [r4, #0]
  _tail = 0;
   d4bba:	6065      	str	r5, [r4, #4]
      case '[':
        return parseArray(variant.toArray());

      case '{':
        return parseObject(variant.toObject());
   d4bbc:	4621      	mov	r1, r4
   d4bbe:	4630      	mov	r0, r6
   d4bc0:	f000 f877 	bl	d4cb2 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE>
   d4bc4:	e7e1      	b.n	d4b8a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x60>
    return true;
  }

  DeserializationError parseVariant(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;
   d4bc6:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4bca:	e00a      	b.n	d4be2 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0xb8>
  }

  DeserializationError parseStringValue(VariantData &variant) {
    const char *value;
    DeserializationError err = parseQuotedString(value);
    if (err) return err;
   d4bcc:	f89d 0008 	ldrb.w	r0, [sp, #8]
   d4bd0:	e007      	b.n	d4be2 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0xb8>
  void setNull() {
    setType(VALUE_IS_NULL);
  }

  void setOwnedString(not_null<const char *> s) {
    setType(VALUE_IS_OWNED_STRING);
   d4bd2:	f104 0008 	add.w	r0, r4, #8
   d4bd6:	2104      	movs	r1, #4
    variant.setOwnedString(make_not_null(value));
   d4bd8:	9d03      	ldr	r5, [sp, #12]
   d4bda:	f7ff fa89 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asString = s.get();
   d4bde:	6025      	str	r5, [r4, #0]
    return DeserializationError::Ok;
   d4be0:	4610      	mov	r0, r2
        return parseStringValue(variant);

      default:
        return parseNumericValue(variant);
    }
  }
   d4be2:	b008      	add	sp, #32
   d4be4:	bd70      	pop	{r4, r5, r6, pc}

000d4be6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE>:

  DeserializationError parseArray(CollectionData &array) {
   d4be6:	b570      	push	{r4, r5, r6, lr}
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
   d4be8:	7b03      	ldrb	r3, [r0, #12]
      default:
        return parseNumericValue(variant);
    }
  }

  DeserializationError parseArray(CollectionData &array) {
   d4bea:	b088      	sub	sp, #32
   d4bec:	4604      	mov	r4, r0
   d4bee:	460e      	mov	r6, r1
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
   d4bf0:	b913      	cbnz	r3, d4bf8 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x12>
   d4bf2:	f04f 0005 	mov.w	r0, #5
   d4bf6:	e05a      	b.n	d4cae <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0xc8>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4bf8:	f7ff fc72 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4bfc:	285b      	cmp	r0, #91	; 0x5b
   d4bfe:	d110      	bne.n	d4c22 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x3c>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4c00:	2300      	movs	r3, #0
   d4c02:	73a3      	strb	r3, [r4, #14]

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
   d4c04:	4620      	mov	r0, r4
   d4c06:	f7ff fc78 	bl	d44fa <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>
    if (err) return err;
   d4c0a:	a901      	add	r1, sp, #4

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
   d4c0c:	f88d 0004 	strb.w	r0, [sp, #4]
    if (err) return err;
   d4c10:	a802      	add	r0, sp, #8
   d4c12:	f7ff fac9 	bl	d41a8 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
   d4c16:	9b02      	ldr	r3, [sp, #8]
   d4c18:	b9bb      	cbnz	r3, d4c4a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x64>
   d4c1a:	9b03      	ldr	r3, [sp, #12]
   d4c1c:	07da      	lsls	r2, r3, #31
   d4c1e:	d414      	bmi.n	d4c4a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x64>
   d4c20:	e016      	b.n	d4c50 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x6a>

  DeserializationError parseArray(CollectionData &array) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;
   d4c22:	f04f 0002 	mov.w	r0, #2
   d4c26:	e042      	b.n	d4cae <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0xc8>
      // Allocate slot in array
      VariantData *value = array.add(_pool);
      if (!value) return DeserializationError::NoMemory;

      // 1 - Parse value
      _nestingLimit--;
   d4c28:	7b23      	ldrb	r3, [r4, #12]
   d4c2a:	3b01      	subs	r3, #1
   d4c2c:	7323      	strb	r3, [r4, #12]
      err = parseVariant(*value);
   d4c2e:	4620      	mov	r0, r4
   d4c30:	f7ff ff7b 	bl	d4b2a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE>
      _nestingLimit++;
   d4c34:	7b23      	ldrb	r3, [r4, #12]
      VariantData *value = array.add(_pool);
      if (!value) return DeserializationError::NoMemory;

      // 1 - Parse value
      _nestingLimit--;
      err = parseVariant(*value);
   d4c36:	f88d 0004 	strb.w	r0, [sp, #4]
      _nestingLimit++;
   d4c3a:	3301      	adds	r3, #1
   d4c3c:	7323      	strb	r3, [r4, #12]
      if (err) return err;
   d4c3e:	a901      	add	r1, sp, #4
   d4c40:	a804      	add	r0, sp, #16
   d4c42:	f7ff fab1 	bl	d41a8 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
   d4c46:	9b04      	ldr	r3, [sp, #16]
   d4c48:	b153      	cbz	r3, d4c60 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x7a>
    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;
   d4c4a:	f89d 0004 	ldrb.w	r0, [sp, #4]
   d4c4e:	e02e      	b.n	d4cae <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0xc8>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4c50:	4620      	mov	r0, r4
   d4c52:	f7ff fc45 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4c56:	285d      	cmp	r0, #93	; 0x5d
   d4c58:	d120      	bne.n	d4c9c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0xb6>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4c5a:	2000      	movs	r0, #0
   d4c5c:	73a0      	strb	r0, [r4, #14]
   d4c5e:	e026      	b.n	d4cae <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0xc8>

      // 1 - Parse value
      _nestingLimit--;
      err = parseVariant(*value);
      _nestingLimit++;
      if (err) return err;
   d4c60:	9b05      	ldr	r3, [sp, #20]
   d4c62:	07db      	lsls	r3, r3, #31
   d4c64:	d4f1      	bmi.n	d4c4a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x64>

      // 2 - Skip spaces
      err = skipSpacesAndComments();
   d4c66:	4620      	mov	r0, r4
   d4c68:	f7ff fc47 	bl	d44fa <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>
      if (err) return err;
   d4c6c:	a901      	add	r1, sp, #4
      err = parseVariant(*value);
      _nestingLimit++;
      if (err) return err;

      // 2 - Skip spaces
      err = skipSpacesAndComments();
   d4c6e:	f88d 0004 	strb.w	r0, [sp, #4]
      if (err) return err;
   d4c72:	a806      	add	r0, sp, #24
   d4c74:	f7ff fa98 	bl	d41a8 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
   d4c78:	9b06      	ldr	r3, [sp, #24]
   d4c7a:	2b00      	cmp	r3, #0
   d4c7c:	d1e5      	bne.n	d4c4a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x64>
   d4c7e:	9b07      	ldr	r3, [sp, #28]
   d4c80:	f013 0501 	ands.w	r5, r3, #1
   d4c84:	d1e1      	bne.n	d4c4a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x64>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4c86:	4620      	mov	r0, r4
   d4c88:	f7ff fc2a 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4c8c:	285d      	cmp	r0, #93	; 0x5d
   d4c8e:	d0e4      	beq.n	d4c5a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x74>
   d4c90:	4620      	mov	r0, r4
   d4c92:	f7ff fc25 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4c96:	282c      	cmp	r0, #44	; 0x2c
   d4c98:	d1c3      	bne.n	d4c22 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x3c>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4c9a:	73a5      	strb	r5, [r4, #14]
  slot->clear();
  return slot;
}

inline VariantData* CollectionData::add(MemoryPool* pool) {
  return slotData(addSlot(pool));
   d4c9c:	6821      	ldr	r1, [r4, #0]
   d4c9e:	4630      	mov	r0, r6
   d4ca0:	f7ff fa63 	bl	d416a <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE>

    // Read each value
    for (;;) {
      // Allocate slot in array
      VariantData *value = array.add(_pool);
      if (!value) return DeserializationError::NoMemory;
   d4ca4:	4601      	mov	r1, r0
   d4ca6:	2800      	cmp	r0, #0
   d4ca8:	d1be      	bne.n	d4c28 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x42>
   d4caa:	f04f 0003 	mov.w	r0, #3

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }
   d4cae:	b008      	add	sp, #32
   d4cb0:	bd70      	pop	{r4, r5, r6, pc}

000d4cb2 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE>:

  DeserializationError parseObject(CollectionData &object) {
   d4cb2:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
   d4cb4:	7b03      	ldrb	r3, [r0, #12]
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(CollectionData &object) {
   d4cb6:	b08f      	sub	sp, #60	; 0x3c
   d4cb8:	4604      	mov	r4, r0
   d4cba:	460f      	mov	r7, r1
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
   d4cbc:	b913      	cbnz	r3, d4cc4 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x12>
   d4cbe:	f04f 0005 	mov.w	r0, #5
   d4cc2:	e098      	b.n	d4df6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x144>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4cc4:	f7ff fc0c 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4cc8:	287b      	cmp	r0, #123	; 0x7b
   d4cca:	d17b      	bne.n	d4dc4 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x112>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4ccc:	2300      	movs	r3, #0
   d4cce:	73a3      	strb	r3, [r4, #14]

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
   d4cd0:	4620      	mov	r0, r4
   d4cd2:	f7ff fc12 	bl	d44fa <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>
    if (err) return err;
   d4cd6:	4669      	mov	r1, sp

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
   d4cd8:	f88d 0000 	strb.w	r0, [sp]
    if (err) return err;
   d4cdc:	a802      	add	r0, sp, #8
   d4cde:	f7ff fa63 	bl	d41a8 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
   d4ce2:	9b02      	ldr	r3, [sp, #8]
   d4ce4:	2b00      	cmp	r3, #0
   d4ce6:	d14d      	bne.n	d4d84 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
   d4ce8:	9803      	ldr	r0, [sp, #12]
   d4cea:	f010 0501 	ands.w	r5, r0, #1
   d4cee:	d149      	bne.n	d4d84 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4cf0:	4620      	mov	r0, r4
   d4cf2:	f7ff fbf5 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4cf6:	287d      	cmp	r0, #125	; 0x7d
   d4cf8:	d117      	bne.n	d4d2a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x78>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4cfa:	73a5      	strb	r5, [r4, #14]
    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    // Empty object?
    if (eat('}')) return DeserializationError::Ok;
   d4cfc:	4628      	mov	r0, r5
   d4cfe:	e07a      	b.n	d4df6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x144>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4d00:	4620      	mov	r0, r4
   d4d02:	f7ff fbed 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4d06:	282c      	cmp	r0, #44	; 0x2c
   d4d08:	d15c      	bne.n	d4dc4 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x112>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4d0a:	2300      	movs	r3, #0
   d4d0c:	73a3      	strb	r3, [r4, #14]
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
   d4d0e:	4620      	mov	r0, r4
   d4d10:	f7ff fbf3 	bl	d44fa <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>
      if (err) return err;
   d4d14:	4669      	mov	r1, sp
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
   d4d16:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;
   d4d1a:	a80c      	add	r0, sp, #48	; 0x30
   d4d1c:	f7ff fa44 	bl	d41a8 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
   d4d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   d4d22:	bb7b      	cbnz	r3, d4d84 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
   d4d24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   d4d26:	07db      	lsls	r3, r3, #31
   d4d28:	d42c      	bmi.n	d4d84 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
    if (eat('}')) return DeserializationError::Ok;

    // Read each key value pair
    for (;;) {
      // Allocate slot in object
      VariantSlot *slot = object.addSlot(_pool);
   d4d2a:	6821      	ldr	r1, [r4, #0]
   d4d2c:	4638      	mov	r0, r7
   d4d2e:	f7ff fa1c 	bl	d416a <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE>
      if (!slot) return DeserializationError::NoMemory;
   d4d32:	4605      	mov	r5, r0
   d4d34:	b910      	cbnz	r0, d4d3c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x8a>
   d4d36:	f04f 0003 	mov.w	r0, #3
   d4d3a:	e05c      	b.n	d4df6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x144>

      // Parse key
      const char *key;
      err = parseKey(key);
   d4d3c:	a901      	add	r1, sp, #4
   d4d3e:	4620      	mov	r0, r4
   d4d40:	f7ff fc8a 	bl	d4658 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE8parseKeyERPKc>
      if (err) return err;
   d4d44:	4669      	mov	r1, sp
      VariantSlot *slot = object.addSlot(_pool);
      if (!slot) return DeserializationError::NoMemory;

      // Parse key
      const char *key;
      err = parseKey(key);
   d4d46:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;
   d4d4a:	a804      	add	r0, sp, #16
   d4d4c:	f7ff fa2c 	bl	d41a8 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
   d4d50:	9b04      	ldr	r3, [sp, #16]
   d4d52:	b9bb      	cbnz	r3, d4d84 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
   d4d54:	9b05      	ldr	r3, [sp, #20]
   d4d56:	07d8      	lsls	r0, r3, #31
   d4d58:	d414      	bmi.n	d4d84 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
  }

  void setOwnedKey(not_null<const char*> k) {
    _flags |= KEY_IS_OWNED;
   d4d5a:	7a2b      	ldrb	r3, [r5, #8]
   d4d5c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   d4d60:	722b      	strb	r3, [r5, #8]
    _key = k.get();
   d4d62:	9b01      	ldr	r3, [sp, #4]
   d4d64:	60eb      	str	r3, [r5, #12]
      slot->setOwnedKey(make_not_null(key));

      // Skip spaces
      err = skipSpacesAndComments();
   d4d66:	4620      	mov	r0, r4
   d4d68:	f7ff fbc7 	bl	d44fa <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>
      if (err) return err;  // Colon
   d4d6c:	4669      	mov	r1, sp
      err = parseKey(key);
      if (err) return err;
      slot->setOwnedKey(make_not_null(key));

      // Skip spaces
      err = skipSpacesAndComments();
   d4d6e:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;  // Colon
   d4d72:	a806      	add	r0, sp, #24
   d4d74:	f7ff fa18 	bl	d41a8 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
   d4d78:	9b06      	ldr	r3, [sp, #24]
   d4d7a:	b91b      	cbnz	r3, d4d84 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
   d4d7c:	9b07      	ldr	r3, [sp, #28]
   d4d7e:	f013 0601 	ands.w	r6, r3, #1
   d4d82:	d002      	beq.n	d4d8a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd8>
      if (!slot) return DeserializationError::NoMemory;

      // Parse key
      const char *key;
      err = parseKey(key);
      if (err) return err;
   d4d84:	f89d 0000 	ldrb.w	r0, [sp]
   d4d88:	e035      	b.n	d4df6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x144>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4d8a:	4620      	mov	r0, r4
   d4d8c:	f7ff fba8 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4d90:	283a      	cmp	r0, #58	; 0x3a
   d4d92:	d117      	bne.n	d4dc4 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x112>
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Parse value
      _nestingLimit--;
   d4d94:	7b23      	ldrb	r3, [r4, #12]
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4d96:	73a6      	strb	r6, [r4, #14]
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Parse value
      _nestingLimit--;
   d4d98:	3b01      	subs	r3, #1
   d4d9a:	7323      	strb	r3, [r4, #12]
      err = parseVariant(*slot->data());
   d4d9c:	4629      	mov	r1, r5
   d4d9e:	4620      	mov	r0, r4
   d4da0:	f7ff fec3 	bl	d4b2a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE>
      _nestingLimit++;
   d4da4:	7b23      	ldrb	r3, [r4, #12]
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Parse value
      _nestingLimit--;
      err = parseVariant(*slot->data());
   d4da6:	f88d 0000 	strb.w	r0, [sp]
      _nestingLimit++;
   d4daa:	3301      	adds	r3, #1
   d4dac:	7323      	strb	r3, [r4, #12]
      if (err) return err;
   d4dae:	4669      	mov	r1, sp
   d4db0:	a808      	add	r0, sp, #32
   d4db2:	f7ff f9f9 	bl	d41a8 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
   d4db6:	9b08      	ldr	r3, [sp, #32]
   d4db8:	2b00      	cmp	r3, #0
   d4dba:	d1e3      	bne.n	d4d84 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
   d4dbc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   d4dbe:	07d9      	lsls	r1, r3, #31
   d4dc0:	d503      	bpl.n	d4dca <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x118>
   d4dc2:	e7df      	b.n	d4d84 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
      slot->setOwnedKey(make_not_null(key));

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;
   d4dc4:	f04f 0002 	mov.w	r0, #2
   d4dc8:	e015      	b.n	d4df6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x144>
      err = parseVariant(*slot->data());
      _nestingLimit++;
      if (err) return err;

      // Skip spaces
      err = skipSpacesAndComments();
   d4dca:	4620      	mov	r0, r4
   d4dcc:	f7ff fb95 	bl	d44fa <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>
      if (err) return err;
   d4dd0:	4669      	mov	r1, sp
      err = parseVariant(*slot->data());
      _nestingLimit++;
      if (err) return err;

      // Skip spaces
      err = skipSpacesAndComments();
   d4dd2:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;
   d4dd6:	a80a      	add	r0, sp, #40	; 0x28
   d4dd8:	f7ff f9e6 	bl	d41a8 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
   d4ddc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d4dde:	2b00      	cmp	r3, #0
   d4de0:	d1d0      	bne.n	d4d84 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
   d4de2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   d4de4:	07da      	lsls	r2, r3, #31
   d4de6:	d4cd      	bmi.n	d4d84 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
   d4de8:	4620      	mov	r0, r4
   d4dea:	f7ff fb79 	bl	d44e0 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
   d4dee:	287d      	cmp	r0, #125	; 0x7d
   d4df0:	d186      	bne.n	d4d00 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x4e>
    }
    return _current;
  }

  void move() {
    _loaded = false;
   d4df2:	2000      	movs	r0, #0
   d4df4:	73a0      	strb	r0, [r4, #14]

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;
    }
  }
   d4df6:	b00f      	add	sp, #60	; 0x3c
   d4df8:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d4dfa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
   d4dfa:	b510      	push	{r4, lr}
    _length += _writer.write(static_cast<uint8_t>(c));
   d4dfc:	6803      	ldr	r3, [r0, #0]
  StaticStringWriter(char *buf, size_t size) : end(buf + size - 1), p(buf) {
    *p = '\0';
  }

  size_t write(uint8_t c) {
    if (p >= end) return 0;
   d4dfe:	685a      	ldr	r2, [r3, #4]
   d4e00:	681c      	ldr	r4, [r3, #0]
   d4e02:	42a2      	cmp	r2, r4
    *p++ = static_cast<char>(c);
   d4e04:	bf3f      	itttt	cc
   d4e06:	1c54      	addcc	r4, r2, #1
   d4e08:	605c      	strcc	r4, [r3, #4]
   d4e0a:	7011      	strbcc	r1, [r2, #0]
    *p = '\0';
   d4e0c:	685b      	ldrcc	r3, [r3, #4]
   d4e0e:	bf3c      	itt	cc
   d4e10:	2200      	movcc	r2, #0
   d4e12:	701a      	strbcc	r2, [r3, #0]
   d4e14:	6842      	ldr	r2, [r0, #4]
    return 1;
   d4e16:	bf34      	ite	cc
   d4e18:	2301      	movcc	r3, #1
  StaticStringWriter(char *buf, size_t size) : end(buf + size - 1), p(buf) {
    *p = '\0';
  }

  size_t write(uint8_t c) {
    if (p >= end) return 0;
   d4e1a:	2300      	movcs	r3, #0
   d4e1c:	4413      	add	r3, r2
   d4e1e:	6043      	str	r3, [r0, #4]
   d4e20:	bd10      	pop	{r4, pc}
	...

000d4e24 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc>:
      writeRaw("true");
    else
      writeRaw("false");
  }

  void writeString(const char *value) {
   d4e24:	b570      	push	{r4, r5, r6, lr}
   d4e26:	4605      	mov	r5, r0
    if (!value) {
   d4e28:	460c      	mov	r4, r1
   d4e2a:	b919      	cbnz	r1, d4e34 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x10>
      writeRaw("null");
   d4e2c:	4911      	ldr	r1, [pc, #68]	; (d4e74 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x50>)
   d4e2e:	f7ff fc4d 	bl	d46cc <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
   d4e32:	bd70      	pop	{r4, r5, r6, pc}
    } else {
      writeRaw('\"');
   d4e34:	2122      	movs	r1, #34	; 0x22
   d4e36:	f7ff ffe0 	bl	d4dfa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
   d4e3a:	3c01      	subs	r4, #1
      while (*value) writeChar(*value++);
   d4e3c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
   d4e40:	b171      	cbz	r1, d4e60 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x3c>
   d4e42:	4b0d      	ldr	r3, [pc, #52]	; (d4e78 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x54>)
class EscapeSequence {
 public:
  // Optimized for code size on a 8-bit AVR
  static char escapeChar(char c) {
    const char *p = escapeTable(false);
    while (p[0] && p[1] != c) {
   d4e44:	f813 6c02 	ldrb.w	r6, [r3, #-2]
   d4e48:	b17e      	cbz	r6, d4e6a <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x46>
   d4e4a:	3302      	adds	r3, #2
   d4e4c:	f813 2c03 	ldrb.w	r2, [r3, #-3]
   d4e50:	428a      	cmp	r2, r1
   d4e52:	d1f7      	bne.n	d4e44 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x20>
  }

  void writeChar(char c) {
    char specialChar = EscapeSequence::escapeChar(c);
    if (specialChar) {
      writeRaw('\\');
   d4e54:	215c      	movs	r1, #92	; 0x5c
   d4e56:	4628      	mov	r0, r5
   d4e58:	f7ff ffcf 	bl	d4dfa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
      writeRaw(specialChar);
   d4e5c:	4631      	mov	r1, r6
   d4e5e:	e004      	b.n	d4e6a <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x46>
    if (!value) {
      writeRaw("null");
    } else {
      writeRaw('\"');
      while (*value) writeChar(*value++);
      writeRaw('\"');
   d4e60:	2122      	movs	r1, #34	; 0x22
   d4e62:	4628      	mov	r0, r5
   d4e64:	f7ff ffc9 	bl	d4dfa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
    }
  }
   d4e68:	bd70      	pop	{r4, r5, r6, pc}
    char specialChar = EscapeSequence::escapeChar(c);
    if (specialChar) {
      writeRaw('\\');
      writeRaw(specialChar);
    } else {
      writeRaw(c);
   d4e6a:	4628      	mov	r0, r5
   d4e6c:	f7ff ffc5 	bl	d4dfa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
   d4e70:	e7e4      	b.n	d4e3c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x18>
   d4e72:	bf00      	nop
   d4e74:	000d9990 	.word	0x000d9990
   d4e78:	000d9983 	.word	0x000d9983

000d4e7c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>:

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
   d4e7c:	b510      	push	{r4, lr}
    _length += _writer.write(reinterpret_cast<const uint8_t *>(begin),
   d4e7e:	1a52      	subs	r2, r2, r1

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
   d4e80:	4604      	mov	r4, r0
    _length += _writer.write(reinterpret_cast<const uint8_t *>(begin),
   d4e82:	6800      	ldr	r0, [r0, #0]
   d4e84:	f7ff f99c 	bl	d41c0 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj>
   d4e88:	6863      	ldr	r3, [r4, #4]
   d4e8a:	4418      	add	r0, r3
   d4e8c:	6060      	str	r0, [r4, #4]
   d4e8e:	bd10      	pop	{r4, pc}

000d4e90 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE20writePositiveIntegerIyEEvT_>:
    writeRaw('-');
    writePositiveInteger(value);
  }

  template <typename T>
  void writePositiveInteger(T value) {
   d4e90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d4e94:	b086      	sub	sp, #24
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
   d4e96:	f10d 0416 	add.w	r4, sp, #22
    writeRaw('-');
    writePositiveInteger(value);
  }

  template <typename T>
  void writePositiveInteger(T value) {
   d4e9a:	4605      	mov	r5, r0
   d4e9c:	4616      	mov	r6, r2
   d4e9e:	461f      	mov	r7, r3
   d4ea0:	46a0      	mov	r8, r4
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
   d4ea2:	4630      	mov	r0, r6
   d4ea4:	4639      	mov	r1, r7
   d4ea6:	220a      	movs	r2, #10
   d4ea8:	2300      	movs	r3, #0
   d4eaa:	f004 fad5 	bl	d9458 <__aeabi_uldivmod>
   d4eae:	3230      	adds	r2, #48	; 0x30
   d4eb0:	f804 2d01 	strb.w	r2, [r4, #-1]!
      value = T(value / 10);
   d4eb4:	2300      	movs	r3, #0
   d4eb6:	4630      	mov	r0, r6
   d4eb8:	4639      	mov	r1, r7
   d4eba:	220a      	movs	r2, #10
   d4ebc:	f004 facc 	bl	d9458 <__aeabi_uldivmod>
   d4ec0:	4606      	mov	r6, r0
   d4ec2:	460f      	mov	r7, r1
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
   d4ec4:	ea56 0307 	orrs.w	r3, r6, r7
   d4ec8:	d1eb      	bne.n	d4ea2 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE20writePositiveIntegerIyEEvT_+0x12>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
   d4eca:	4642      	mov	r2, r8
   d4ecc:	4621      	mov	r1, r4
   d4ece:	4628      	mov	r0, r5
   d4ed0:	f7ff ffd4 	bl	d4e7c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>
  }
   d4ed4:	b006      	add	sp, #24
   d4ed6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d4eda:	0000      	movs	r0, r0
   d4edc:	0000      	movs	r0, r0
	...

000d4ee0 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd>:
      decimal /= 10;
      decimalPlaces--;
    }
  }

  static int16_t normalize(TFloat& value) {
   d4ee0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d4ee4:	ed2d 8b06 	vpush	{d8-d10}
   d4ee8:	4606      	mov	r6, r0
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
   d4eea:	a353      	add	r3, pc, #332	; (adr r3, d5038 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x158>)
   d4eec:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4ef0:	e9d0 0100 	ldrd	r0, r1, [r0]
   d4ef4:	f004 fa7c 	bl	d93f0 <__aeabi_dcmpge>
   d4ef8:	b310      	cbz	r0, d4f40 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x60>
   d4efa:	2408      	movs	r4, #8
   d4efc:	f44f 7780 	mov.w	r7, #256	; 0x100
   d4f00:	2500      	movs	r5, #0
      for (; index >= 0; index--) {
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
   d4f02:	4620      	mov	r0, r4
   d4f04:	e9d6 8900 	ldrd	r8, r9, [r6]
   d4f08:	f7ff fbf2 	bl	d46f0 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
   d4f0c:	4640      	mov	r0, r8
   d4f0e:	ec53 2b10 	vmov	r2, r3, d0
   d4f12:	4649      	mov	r1, r9
   d4f14:	f004 fa6c 	bl	d93f0 <__aeabi_dcmpge>
   d4f18:	b160      	cbz	r0, d4f34 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x54>
          value *= traits::negativeBinaryPowerOfTen(index);
   d4f1a:	4620      	mov	r0, r4
   d4f1c:	f7ff fc24 	bl	d4768 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
   d4f20:	e9d6 0100 	ldrd	r0, r1, [r6]
   d4f24:	ec53 2b10 	vmov	r2, r3, d0
   d4f28:	f003 ffdc 	bl	d8ee4 <__aeabi_dmul>
   d4f2c:	e9c6 0100 	strd	r0, r1, [r6]
          powersOf10 = int16_t(powersOf10 + bit);
   d4f30:	443d      	add	r5, r7
   d4f32:	b22d      	sxth	r5, r5

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
   d4f34:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
          value *= traits::negativeBinaryPowerOfTen(index);
          powersOf10 = int16_t(powersOf10 + bit);
        }
        bit >>= 1;
   d4f38:	ea4f 0767 	mov.w	r7, r7, asr #1

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
   d4f3c:	d2e1      	bcs.n	d4f02 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x22>
   d4f3e:	e003      	b.n	d4f48 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x68>
  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;
   d4f40:	f44f 7780 	mov.w	r7, #256	; 0x100

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
   d4f44:	2408      	movs	r4, #8
    }
  }

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;
   d4f46:	4605      	mov	r5, r0
        }
        bit >>= 1;
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
   d4f48:	e9d6 8900 	ldrd	r8, r9, [r6]
   d4f4c:	2200      	movs	r2, #0
   d4f4e:	2300      	movs	r3, #0
   d4f50:	4640      	mov	r0, r8
   d4f52:	4649      	mov	r1, r9
   d4f54:	f004 fa56 	bl	d9404 <__aeabi_dcmpgt>
   d4f58:	2800      	cmp	r0, #0
   d4f5a:	d05b      	beq.n	d5014 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x134>
   d4f5c:	a338      	add	r3, pc, #224	; (adr r3, d5040 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x160>)
   d4f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4f62:	4640      	mov	r0, r8
   d4f64:	4649      	mov	r1, r9
   d4f66:	f004 fa39 	bl	d93dc <__aeabi_dcmple>
   d4f6a:	2800      	cmp	r0, #0
   d4f6c:	d052      	beq.n	d5014 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x134>
        forge(0x3CD203AF, 0x9EE75616),  // 1e-15
        forge(0x398039D6, 0x65896880),  // 1e-31
        forge(0x32DA53FC, 0x9631D10D),  // 1e-63
        forge(0x25915445, 0x81B7DEC2),  // 1e-127
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
   d4f6e:	ed9f 8b2c 	vldr	d8, [pc, #176]	; d5020 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x140>
   d4f72:	ed9f 9b2d 	vldr	d9, [pc, #180]	; d5028 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x148>
   d4f76:	ed9f ab2e 	vldr	d10, [pc, #184]	; d5030 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x150>
      for (; index >= 0; index--) {
   d4f7a:	1c63      	adds	r3, r4, #1
   d4f7c:	d04a      	beq.n	d5014 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x134>
   d4f7e:	f8df b0f0 	ldr.w	fp, [pc, #240]	; d5070 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x190>
   d4f82:	f8df a0f0 	ldr.w	sl, [pc, #240]	; d5074 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x194>
   d4f86:	f8db 3000 	ldr.w	r3, [fp]
   d4f8a:	f013 0f01 	tst.w	r3, #1
        if (value < traits::negativeBinaryPowerOfTenPlusOne(index)) {
   d4f8e:	e9d6 8900 	ldrd	r8, r9, [r6]
   d4f92:	d125      	bne.n	d4fe0 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x100>
   d4f94:	4658      	mov	r0, fp
   d4f96:	f7ff f886 	bl	d40a6 <__cxa_guard_acquire>
   d4f9a:	b308      	cbz	r0, d4fe0 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x100>
   d4f9c:	a32a      	add	r3, pc, #168	; (adr r3, d5048 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x168>)
   d4f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fa2:	e9ca 2308 	strd	r2, r3, [sl, #32]
   d4fa6:	a32a      	add	r3, pc, #168	; (adr r3, d5050 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x170>)
   d4fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fac:	e9ca 230a 	strd	r2, r3, [sl, #40]	; 0x28
   d4fb0:	a329      	add	r3, pc, #164	; (adr r3, d5058 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x178>)
   d4fb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fb6:	e9ca 230c 	strd	r2, r3, [sl, #48]	; 0x30
   d4fba:	a329      	add	r3, pc, #164	; (adr r3, d5060 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x180>)
   d4fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fc0:	e9ca 230e 	strd	r2, r3, [sl, #56]	; 0x38
   d4fc4:	a328      	add	r3, pc, #160	; (adr r3, d5068 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x188>)
   d4fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4fca:	4658      	mov	r0, fp
   d4fcc:	ed8a 8b02 	vstr	d8, [sl, #8]
   d4fd0:	ed8a 9b04 	vstr	d9, [sl, #16]
   d4fd4:	ed8a ab06 	vstr	d10, [sl, #24]
   d4fd8:	e9ca 2310 	strd	r2, r3, [sl, #64]	; 0x40
   d4fdc:	f7ff f868 	bl	d40b0 <__cxa_guard_release>
    return factors[index];
   d4fe0:	eb0a 0ac4 	add.w	sl, sl, r4, lsl #3
   d4fe4:	e9da 2300 	ldrd	r2, r3, [sl]
   d4fe8:	4640      	mov	r0, r8
   d4fea:	4649      	mov	r1, r9
   d4fec:	f004 f9ec 	bl	d93c8 <__aeabi_dcmplt>
   d4ff0:	b160      	cbz	r0, d500c <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x12c>
          value *= traits::positiveBinaryPowerOfTen(index);
   d4ff2:	4620      	mov	r0, r4
   d4ff4:	f7ff fb7c 	bl	d46f0 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
   d4ff8:	e9d6 0100 	ldrd	r0, r1, [r6]
   d4ffc:	ec53 2b10 	vmov	r2, r3, d0
   d5000:	f003 ff70 	bl	d8ee4 <__aeabi_dmul>
   d5004:	e9c6 0100 	strd	r0, r1, [r6]
          powersOf10 = int16_t(powersOf10 - bit);
   d5008:	1bed      	subs	r5, r5, r7
   d500a:	b22d      	sxth	r5, r5
   d500c:	3c01      	subs	r4, #1
        }
        bit >>= 1;
   d500e:	107f      	asrs	r7, r7, #1
   d5010:	b264      	sxtb	r4, r4
        bit >>= 1;
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
   d5012:	e7b2      	b.n	d4f7a <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x9a>
        bit >>= 1;
      }
    }

    return powersOf10;
  }
   d5014:	ecbd 8b06 	vpop	{d8-d10}
   d5018:	4628      	mov	r0, r5
   d501a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d501e:	bf00      	nop
   d5020:	9999999a 	.word	0x9999999a
   d5024:	3fb99999 	.word	0x3fb99999
   d5028:	d2f1a9fc 	.word	0xd2f1a9fc
   d502c:	3f50624d 	.word	0x3f50624d
   d5030:	9abcaf48 	.word	0x9abcaf48
   d5034:	3e7ad7f2 	.word	0x3e7ad7f2
   d5038:	00000000 	.word	0x00000000
   d503c:	416312d0 	.word	0x416312d0
   d5040:	88e368f1 	.word	0x88e368f1
   d5044:	3ee4f8b5 	.word	0x3ee4f8b5
   d5048:	9ee75616 	.word	0x9ee75616
   d504c:	3cd203af 	.word	0x3cd203af
   d5050:	65896880 	.word	0x65896880
   d5054:	398039d6 	.word	0x398039d6
   d5058:	9631d10d 	.word	0x9631d10d
   d505c:	32da53fc 	.word	0x32da53fc
   d5060:	81b7dec2 	.word	0x81b7dec2
   d5064:	25915445 	.word	0x25915445
   d5068:	7dd78b14 	.word	0x7dd78b14
   d506c:	0afe07b2 	.word	0x0afe07b2
   d5070:	2003dcdc 	.word	0x2003dcdc
   d5074:	2003dbe0 	.word	0x2003dbe0

000d5078 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_>:
      writeRaw(c);
    }
  }

  template <typename T>
  void writeFloat(T value) {
   d5078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d507c:	ec55 4b10 	vmov	r4, r5, d0
   d5080:	b089      	sub	sp, #36	; 0x24
   d5082:	4607      	mov	r7, r0
    if (isnan(value)) return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
   d5084:	ee10 2a10 	vmov	r2, s0
   d5088:	462b      	mov	r3, r5
   d508a:	ee10 0a10 	vmov	r0, s0
   d508e:	4629      	mov	r1, r5
   d5090:	f004 f990 	bl	d93b4 <__aeabi_dcmpeq>
   d5094:	b920      	cbnz	r0, d50a0 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x28>
   d5096:	4973      	ldr	r1, [pc, #460]	; (d5264 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1ec>)
   d5098:	4638      	mov	r0, r7
   d509a:	f7ff fb17 	bl	d46cc <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
   d509e:	e0de      	b.n	d525e <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1e6>
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
  return x != 0.0 && x * 2 == x;
   d50a0:	2200      	movs	r2, #0
   d50a2:	2300      	movs	r3, #0
   d50a4:	4620      	mov	r0, r4
   d50a6:	4629      	mov	r1, r5
   d50a8:	f004 f984 	bl	d93b4 <__aeabi_dcmpeq>
   d50ac:	b968      	cbnz	r0, d50ca <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x52>
   d50ae:	4622      	mov	r2, r4
   d50b0:	462b      	mov	r3, r5
   d50b2:	4620      	mov	r0, r4
   d50b4:	4629      	mov	r1, r5
   d50b6:	f003 fd63 	bl	d8b80 <__adddf3>
   d50ba:	4602      	mov	r2, r0
   d50bc:	460b      	mov	r3, r1
   d50be:	4620      	mov	r0, r4
   d50c0:	4629      	mov	r1, r5
   d50c2:	f004 f977 	bl	d93b4 <__aeabi_dcmpeq>
   d50c6:	2800      	cmp	r0, #0
   d50c8:	d1e5      	bne.n	d5096 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1e>

    if (isinf(value)) return writeRaw("Infinity");
#else
    if (isinf(value)) return writeRaw("null");

    if (value < 0.0) {
   d50ca:	2200      	movs	r2, #0
   d50cc:	2300      	movs	r3, #0
   d50ce:	4620      	mov	r0, r4
   d50d0:	4629      	mov	r1, r5
   d50d2:	f004 f979 	bl	d93c8 <__aeabi_dcmplt>
   d50d6:	b130      	cbz	r0, d50e6 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x6e>
      writeRaw('-');
   d50d8:	212d      	movs	r1, #45	; 0x2d
   d50da:	4638      	mov	r0, r7
   d50dc:	f7ff fe8d 	bl	d4dfa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
      value = -value;
   d50e0:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
   d50e4:	461d      	mov	r5, r3
   d50e6:	a808      	add	r0, sp, #32
   d50e8:	e960 4508 	strd	r4, r5, [r0, #-32]!

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);
   d50ec:	f7ff fef8 	bl	d4ee0 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd>

    integral = uint32_t(value);
   d50f0:	e9dd 8900 	ldrd	r8, r9, [sp]

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);
   d50f4:	4604      	mov	r4, r0

    integral = uint32_t(value);
   d50f6:	4649      	mov	r1, r9
   d50f8:	4640      	mov	r0, r8
   d50fa:	f004 f98d 	bl	d9418 <__aeabi_d2uiz>
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
   d50fe:	f8df a16c 	ldr.w	sl, [pc, #364]	; d526c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1f4>
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);

    integral = uint32_t(value);
   d5102:	4606      	mov	r6, r0
   d5104:	4602      	mov	r2, r0
   d5106:	2309      	movs	r3, #9
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
      maxDecimalPart /= 10;
   d5108:	210a      	movs	r1, #10
   d510a:	b25d      	sxtb	r5, r3

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
   d510c:	2a09      	cmp	r2, #9
   d510e:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   d5112:	b2db      	uxtb	r3, r3
   d5114:	d904      	bls.n	d5120 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0xa8>
      maxDecimalPart /= 10;
   d5116:	fbba faf1 	udiv	sl, sl, r1

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
   d511a:	fbb2 f2f1 	udiv	r2, r2, r1
   d511e:	e7f4      	b.n	d510a <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x92>
      maxDecimalPart /= 10;
      decimalPlaces--;
    }

    TFloat remainder = (value - TFloat(integral)) * TFloat(maxDecimalPart);
   d5120:	4630      	mov	r0, r6
   d5122:	f003 fe69 	bl	d8df8 <__aeabi_ui2d>
   d5126:	4602      	mov	r2, r0
   d5128:	460b      	mov	r3, r1
   d512a:	4640      	mov	r0, r8
   d512c:	4649      	mov	r1, r9
   d512e:	f003 fd25 	bl	d8b7c <__aeabi_dsub>
   d5132:	4680      	mov	r8, r0
   d5134:	4650      	mov	r0, sl
   d5136:	4689      	mov	r9, r1
   d5138:	f003 fe5e 	bl	d8df8 <__aeabi_ui2d>
   d513c:	4602      	mov	r2, r0
   d513e:	460b      	mov	r3, r1
   d5140:	4640      	mov	r0, r8
   d5142:	4649      	mov	r1, r9
   d5144:	f003 fece 	bl	d8ee4 <__aeabi_dmul>
   d5148:	4680      	mov	r8, r0
   d514a:	4689      	mov	r9, r1

    decimal = uint32_t(remainder);
   d514c:	f004 f964 	bl	d9418 <__aeabi_d2uiz>
   d5150:	4683      	mov	fp, r0
    remainder = remainder - TFloat(decimal);

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
   d5152:	f003 fe51 	bl	d8df8 <__aeabi_ui2d>
   d5156:	4602      	mov	r2, r0
   d5158:	460b      	mov	r3, r1
   d515a:	4640      	mov	r0, r8
   d515c:	4649      	mov	r1, r9
   d515e:	f003 fd0d 	bl	d8b7c <__aeabi_dsub>
   d5162:	4602      	mov	r2, r0
   d5164:	460b      	mov	r3, r1
   d5166:	f003 fd0b 	bl	d8b80 <__adddf3>
   d516a:	f004 f955 	bl	d9418 <__aeabi_d2uiz>
   d516e:	eb00 080b 	add.w	r8, r0, fp
    if (decimal >= maxDecimalPart) {
   d5172:	45c2      	cmp	sl, r8
   d5174:	d80d      	bhi.n	d5192 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x11a>
      decimal = 0;
      integral++;
   d5176:	3601      	adds	r6, #1
      if (exponent && integral >= 10) {
   d5178:	b13c      	cbz	r4, d518a <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x112>
   d517a:	2e09      	cmp	r6, #9
   d517c:	d907      	bls.n	d518e <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x116>
        exponent++;
   d517e:	3401      	adds	r4, #1
   d5180:	b224      	sxth	r4, r4

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
   d5182:	f04f 0800 	mov.w	r8, #0
      integral++;
      if (exponent && integral >= 10) {
        exponent++;
        integral = 1;
   d5186:	2601      	movs	r6, #1
   d5188:	e003      	b.n	d5192 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x11a>

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
   d518a:	46a0      	mov	r8, r4
   d518c:	e001      	b.n	d5192 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x11a>
   d518e:	f04f 0800 	mov.w	r8, #0
        integral = 1;
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
   d5192:	220a      	movs	r2, #10
   d5194:	fbb8 f3f2 	udiv	r3, r8, r2
   d5198:	fb02 8113 	mls	r1, r2, r3, r8
   d519c:	b929      	cbnz	r1, d51aa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x132>
   d519e:	2d00      	cmp	r5, #0
   d51a0:	dd03      	ble.n	d51aa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x132>
   d51a2:	3d01      	subs	r5, #1
      decimal /= 10;
   d51a4:	4698      	mov	r8, r3
   d51a6:	b26d      	sxtb	r5, r5
   d51a8:	e7f4      	b.n	d5194 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x11c>
        integral = 1;
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
   d51aa:	f10d 011e 	add.w	r1, sp, #30
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
   d51ae:	220a      	movs	r2, #10
   d51b0:	fbb6 f3f2 	udiv	r3, r6, r2
   d51b4:	fb02 6613 	mls	r6, r2, r3, r6
   d51b8:	3630      	adds	r6, #48	; 0x30
   d51ba:	f801 6d01 	strb.w	r6, [r1, #-1]!
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
   d51be:	461e      	mov	r6, r3
   d51c0:	2b00      	cmp	r3, #0
   d51c2:	d1f5      	bne.n	d51b0 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x138>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
   d51c4:	f10d 021e 	add.w	r2, sp, #30
   d51c8:	4638      	mov	r0, r7
   d51ca:	f7ff fe57 	bl	d4e7c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>
#endif

    FloatParts<T> parts(value);

    writePositiveInteger(parts.integral);
    if (parts.decimalPlaces) writeDecimals(parts.decimal, parts.decimalPlaces);
   d51ce:	b1d5      	cbz	r5, d5206 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x18e>
   d51d0:	b2e9      	uxtb	r1, r5
   d51d2:	ab02      	add	r3, sp, #8
   d51d4:	f1c1 0010 	rsb	r0, r1, #16
   d51d8:	4418      	add	r0, r3
   d51da:	ab06      	add	r3, sp, #24
   d51dc:	461a      	mov	r2, r3
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    while (width--) {
      *--begin = char(value % 10 + '0');
   d51de:	260a      	movs	r6, #10
    char buffer[16];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    while (width--) {
   d51e0:	4283      	cmp	r3, r0
   d51e2:	d009      	beq.n	d51f8 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x180>
      *--begin = char(value % 10 + '0');
   d51e4:	fbb8 f5f6 	udiv	r5, r8, r6
   d51e8:	fb06 8815 	mls	r8, r6, r5, r8
   d51ec:	f108 0830 	add.w	r8, r8, #48	; 0x30
   d51f0:	f803 8d01 	strb.w	r8, [r3, #-1]!
      value /= 10;
   d51f4:	46a8      	mov	r8, r5
   d51f6:	e7f3      	b.n	d51e0 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x168>
    }
    *--begin = '.';
   d51f8:	1a51      	subs	r1, r2, r1
   d51fa:	232e      	movs	r3, #46	; 0x2e
   d51fc:	f801 3d01 	strb.w	r3, [r1, #-1]!

    // and dump it in the right order
    writeRaw(begin, end);
   d5200:	4638      	mov	r0, r7
   d5202:	f7ff fe3b 	bl	d4e7c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>
    FloatParts<T> parts(value);

    writePositiveInteger(parts.integral);
    if (parts.decimalPlaces) writeDecimals(parts.decimal, parts.decimalPlaces);

    if (parts.exponent < 0) {
   d5206:	2c00      	cmp	r4, #0
   d5208:	da12      	bge.n	d5230 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1b8>
      writeRaw("e-");
   d520a:	4917      	ldr	r1, [pc, #92]	; (d5268 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1f0>)
   d520c:	4638      	mov	r0, r7
   d520e:	f7ff fa5d 	bl	d46cc <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
      writePositiveInteger(-parts.exponent);
   d5212:	4264      	negs	r4, r4

  template <typename T>
  void writePositiveInteger(T value) {
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
   d5214:	f10d 011e 	add.w	r1, sp, #30

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
   d5218:	220a      	movs	r2, #10
   d521a:	fb94 f3f2 	sdiv	r3, r4, r2
   d521e:	fb02 4413 	mls	r4, r2, r3, r4
   d5222:	3430      	adds	r4, #48	; 0x30
   d5224:	f801 4d01 	strb.w	r4, [r1, #-1]!
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
   d5228:	461c      	mov	r4, r3
   d522a:	2b00      	cmp	r3, #0
   d522c:	d1f5      	bne.n	d521a <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1a2>
   d522e:	e011      	b.n	d5254 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1dc>
    if (parts.exponent < 0) {
      writeRaw("e-");
      writePositiveInteger(-parts.exponent);
    }

    if (parts.exponent > 0) {
   d5230:	d015      	beq.n	d525e <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1e6>
      writeRaw('e');
   d5232:	2165      	movs	r1, #101	; 0x65
   d5234:	4638      	mov	r0, r7
   d5236:	f7ff fde0 	bl	d4dfa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>

  template <typename T>
  void writePositiveInteger(T value) {
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
   d523a:	f10d 011e 	add.w	r1, sp, #30

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
   d523e:	220a      	movs	r2, #10
   d5240:	fb94 f3f2 	sdiv	r3, r4, r2
   d5244:	fb02 4413 	mls	r4, r2, r3, r4
   d5248:	3430      	adds	r4, #48	; 0x30
   d524a:	f801 4d01 	strb.w	r4, [r1, #-1]!
      value = T(value / 10);
   d524e:	b21c      	sxth	r4, r3
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
   d5250:	2c00      	cmp	r4, #0
   d5252:	d1f5      	bne.n	d5240 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1c8>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
   d5254:	f10d 021e 	add.w	r2, sp, #30
   d5258:	4638      	mov	r0, r7
   d525a:	f7ff fe0f 	bl	d4e7c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>

    if (parts.exponent > 0) {
      writeRaw('e');
      writePositiveInteger(parts.exponent);
    }
  }
   d525e:	b009      	add	sp, #36	; 0x24
   d5260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d5264:	000d9990 	.word	0x000d9990
   d5268:	000d9995 	.word	0x000d9995
   d526c:	3b9aca00 	.word	0x3b9aca00

000d5270 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_>:
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
   d5270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (type()) {
   d5272:	7a03      	ldrb	r3, [r0, #8]
   d5274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d5278:	2b05      	cmp	r3, #5
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
   d527a:	4605      	mov	r5, r0
   d527c:	460c      	mov	r4, r1
    switch (type()) {
   d527e:	d06c      	beq.n	d535a <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xea>
   d5280:	d808      	bhi.n	d5294 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x24>
   d5282:	2b00      	cmp	r3, #0
   d5284:	d070      	beq.n	d5368 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xf8>
   d5286:	2b02      	cmp	r3, #2
   d5288:	d958      	bls.n	d533c <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xcc>
  void visitFloat(Float value) {
    _formatter.writeFloat(value);
  }

  void visitString(const char *value) {
    _formatter.writeString(value);
   d528a:	6801      	ldr	r1, [r0, #0]
   d528c:	4620      	mov	r0, r4
   d528e:	f7ff fdc9 	bl	d4e24 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc>
   d5292:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5294:	2b08      	cmp	r3, #8
   d5296:	d017      	beq.n	d52c8 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x58>
   d5298:	d80c      	bhi.n	d52b4 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x44>
   d529a:	2b06      	cmp	r3, #6
   d529c:	d057      	beq.n	d534e <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xde>
   d529e:	2b07      	cmp	r3, #7
   d52a0:	d162      	bne.n	d5368 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xf8>
      case VALUE_IS_OWNED_RAW:
      case VALUE_IS_LINKED_RAW:
        return visitor.visitRawJson(_content.asRaw.data, _content.asRaw.size);

      case VALUE_IS_NEGATIVE_INTEGER:
        return visitor.visitNegativeInteger(_content.asInteger);
   d52a2:	e9d0 6700 	ldrd	r6, r7, [r0]

  void writeNegativeInteger(UInt value) {
    writeRaw('-');
   d52a6:	212d      	movs	r1, #45	; 0x2d
   d52a8:	4620      	mov	r0, r4
   d52aa:	f7ff fda6 	bl	d4dfa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
    writePositiveInteger(value);
   d52ae:	4632      	mov	r2, r6
   d52b0:	463b      	mov	r3, r7
   d52b2:	e04e      	b.n	d5352 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xe2>
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
    switch (type()) {
   d52b4:	2b20      	cmp	r3, #32
   d52b6:	d01f      	beq.n	d52f8 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x88>
   d52b8:	2b40      	cmp	r3, #64	; 0x40
   d52ba:	d155      	bne.n	d5368 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xf8>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d52bc:	215b      	movs	r1, #91	; 0x5b
   d52be:	4620      	mov	r0, r4
   d52c0:	f7ff fd9b 	bl	d4dfa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
   d52c4:	682d      	ldr	r5, [r5, #0]
   d52c6:	e013      	b.n	d52f0 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x80>

    write('}');
  }

  void visitFloat(Float value) {
    _formatter.writeFloat(value);
   d52c8:	ed90 0b00 	vldr	d0, [r0]
   d52cc:	4608      	mov	r0, r1
   d52ce:	f7ff fed3 	bl	d5078 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_>
   d52d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    write('[');

    VariantSlot *slot = array.head();

    while (slot != 0) {
      slot->data()->accept(*this);
   d52d4:	4621      	mov	r1, r4
   d52d6:	4628      	mov	r0, r5
   d52d8:	f7ff ffca 	bl	d5270 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_>
  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
    return _next ? this + _next : 0;
   d52dc:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   d52e0:	b143      	cbz	r3, d52f4 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x84>

      slot = slot->next();
      if (slot == 0) break;
   d52e2:	eb15 1503 	adds.w	r5, r5, r3, lsl #4
   d52e6:	d005      	beq.n	d52f4 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x84>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d52e8:	212c      	movs	r1, #44	; 0x2c
   d52ea:	4620      	mov	r0, r4
   d52ec:	f7ff fd85 	bl	d4dfa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
  FORCE_INLINE void visitArray(const CollectionData &array) {
    write('[');

    VariantSlot *slot = array.head();

    while (slot != 0) {
   d52f0:	2d00      	cmp	r5, #0
   d52f2:	d1ef      	bne.n	d52d4 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x64>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d52f4:	215d      	movs	r1, #93	; 0x5d
   d52f6:	e01d      	b.n	d5334 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xc4>
   d52f8:	217b      	movs	r1, #123	; 0x7b
   d52fa:	4620      	mov	r0, r4
   d52fc:	f7ff fd7d 	bl	d4dfa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
   d5300:	682d      	ldr	r5, [r5, #0]
  void visitObject(const CollectionData &object) {
    write('{');

    VariantSlot *slot = object.head();

    while (slot != 0) {
   d5302:	b1b5      	cbz	r5, d5332 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xc2>
      _formatter.writeString(slot->key());
   d5304:	68e9      	ldr	r1, [r5, #12]
   d5306:	4620      	mov	r0, r4
   d5308:	f7ff fd8c 	bl	d4e24 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d530c:	213a      	movs	r1, #58	; 0x3a
   d530e:	4620      	mov	r0, r4
   d5310:	f7ff fd73 	bl	d4dfa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
    VariantSlot *slot = object.head();

    while (slot != 0) {
      _formatter.writeString(slot->key());
      write(':');
      slot->data()->accept(*this);
   d5314:	4621      	mov	r1, r4
   d5316:	4628      	mov	r0, r5
   d5318:	f7ff ffaa 	bl	d5270 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_>
   d531c:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
   d5320:	b13b      	cbz	r3, d5332 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xc2>

      slot = slot->next();
      if (slot == 0) break;
   d5322:	eb15 1503 	adds.w	r5, r5, r3, lsl #4
   d5326:	d004      	beq.n	d5332 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xc2>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
   d5328:	212c      	movs	r1, #44	; 0x2c
   d532a:	4620      	mov	r0, r4
   d532c:	f7ff fd65 	bl	d4dfa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
   d5330:	e7e7      	b.n	d5302 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x92>
   d5332:	217d      	movs	r1, #125	; 0x7d
   d5334:	4620      	mov	r0, r4
   d5336:	f7ff fd60 	bl	d4dfa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
   d533a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  void writeRaw(const char *s) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
  }

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
   d533c:	e890 0006 	ldmia.w	r0, {r1, r2}
   d5340:	6820      	ldr	r0, [r4, #0]
   d5342:	f7fe ff3d 	bl	d41c0 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj>
   d5346:	6863      	ldr	r3, [r4, #4]
   d5348:	4418      	add	r0, r3
   d534a:	6060      	str	r0, [r4, #4]
   d534c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  void visitNegativeInteger(UInt value) {
    _formatter.writeNegativeInteger(value);
  }

  void visitPositiveInteger(UInt value) {
    _formatter.writePositiveInteger(value);
   d534e:	e9d0 2300 	ldrd	r2, r3, [r0]
   d5352:	4620      	mov	r0, r4
   d5354:	f7ff fd9c 	bl	d4e90 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE20writePositiveIntegerIyEEvT_>
   d5358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  size_t bytesWritten() const {
    return _length;
  }

  void writeBoolean(bool value) {
    if (value)
   d535a:	e9d0 2300 	ldrd	r2, r3, [r0]
   d535e:	4313      	orrs	r3, r2
      writeRaw("true");
   d5360:	bf14      	ite	ne
   d5362:	4904      	ldrne	r1, [pc, #16]	; (d5374 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x104>)
    else
      writeRaw("false");
   d5364:	4904      	ldreq	r1, [pc, #16]	; (d5378 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x108>)
   d5366:	e000      	b.n	d536a <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xfa>
  void visitBoolean(bool value) {
    _formatter.writeBoolean(value);
  }

  void visitNull() {
    _formatter.writeRaw("null");
   d5368:	4904      	ldr	r1, [pc, #16]	; (d537c <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x10c>)
   d536a:	4620      	mov	r0, r4
   d536c:	f7ff f9ae 	bl	d46cc <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
   d5370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d5372:	bf00      	nop
   d5374:	000d9998 	.word	0x000d9998
   d5378:	000d999d 	.word	0x000d999d
   d537c:	000d9990 	.word	0x000d9990

000d5380 <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_>:
 private:
  TextFormatter<TWriter> _formatter;
};

template <typename TSource, typename TDestination>
size_t serializeJson(const TSource &source, TDestination &destination) {
   d5380:	b51f      	push	{r0, r1, r2, r3, r4, lr}
namespace ARDUINOJSON_NAMESPACE {

// A Print implementation that allows to write in a char[]
class StaticStringWriter {
 public:
  StaticStringWriter(char *buf, size_t size) : end(buf + size - 1), p(buf) {
   d5382:	f201 13ff 	addw	r3, r1, #511	; 0x1ff
   d5386:	9300      	str	r3, [sp, #0]

namespace ARDUINOJSON_NAMESPACE {

template <typename Visitor>
inline void variantAccept(const VariantData *var, Visitor &visitor) {
  if (var != 0)
   d5388:	3010      	adds	r0, #16
    *p = '\0';
   d538a:	f04f 0300 	mov.w	r3, #0
namespace ARDUINOJSON_NAMESPACE {

// A Print implementation that allows to write in a char[]
class StaticStringWriter {
 public:
  StaticStringWriter(char *buf, size_t size) : end(buf + size - 1), p(buf) {
   d538e:	9101      	str	r1, [sp, #4]
    *p = '\0';
   d5390:	700b      	strb	r3, [r1, #0]
namespace ARDUINOJSON_NAMESPACE {

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter &writer) : _writer(writer), _length(0) {}
   d5392:	f8cd d008 	str.w	sp, [sp, #8]
   d5396:	9303      	str	r3, [sp, #12]
   d5398:	d003      	beq.n	d53a2 <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_+0x22>
    var->accept(visitor);
   d539a:	a902      	add	r1, sp, #8
   d539c:	f7ff ff68 	bl	d5270 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_>
   d53a0:	e003      	b.n	d53aa <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_+0x2a>
  void visitBoolean(bool value) {
    _formatter.writeBoolean(value);
  }

  void visitNull() {
    _formatter.writeRaw("null");
   d53a2:	4904      	ldr	r1, [pc, #16]	; (d53b4 <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_+0x34>)
   d53a4:	a802      	add	r0, sp, #8
   d53a6:	f7ff f991 	bl	d46cc <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
};

template <typename TSource, typename TDestination>
size_t serializeJson(const TSource &source, TDestination &destination) {
  return serialize<JsonSerializer>(source, destination);
}
   d53aa:	9803      	ldr	r0, [sp, #12]
   d53ac:	b005      	add	sp, #20
   d53ae:	f85d fb04 	ldr.w	pc, [sp], #4
   d53b2:	bf00      	nop
   d53b4:	000d9990 	.word	0x000d9990

000d53b8 <_Z18PublishLightSensorv>:
int SetResponseTopic(String s) {
	s.toCharArray(responseTopic, sizeof(s));
	return 0;
}

int PublishLightSensor() {
   d53b8:	b530      	push	{r4, r5, lr}
    
    int value = analogRead(LIGHTPIN);
   d53ba:	2013      	movs	r0, #19
int SetResponseTopic(String s) {
	s.toCharArray(responseTopic, sizeof(s));
	return 0;
}

int PublishLightSensor() {
   d53bc:	b0c9      	sub	sp, #292	; 0x124
    
    int value = analogRead(LIGHTPIN);
   d53be:	f003 fa15 	bl	d87ec <analogRead>
   d53c2:	4605      	mov	r5, r0
    
    StaticJsonDocument<256> jsonDoc;
   d53c4:	4668      	mov	r0, sp
   d53c6:	f7ff f801 	bl	d43cc <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev>
  // getOrAddMember(char*)
  // getOrAddMember(const char*)
  // getOrAddMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getOrAddMember(TChar* key) {
    return VariantRef(&_pool, _data.getOrAddMember(adaptString(key), &_pool));
   d53ca:	466a      	mov	r2, sp
   d53cc:	4917      	ldr	r1, [pc, #92]	; (d542c <_Z18PublishLightSensorv+0x74>)
    return variantSetOwnedString(_data, adaptString(value), _pool);
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
   d53ce:	4c18      	ldr	r4, [pc, #96]	; (d5430 <_Z18PublishLightSensorv+0x78>)
   d53d0:	a804      	add	r0, sp, #16
   d53d2:	f7ff f854 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
   d53d6:	466a      	mov	r2, sp
   d53d8:	4916      	ldr	r1, [pc, #88]	; (d5434 <_Z18PublishLightSensorv+0x7c>)
   d53da:	f7ff f80e 	bl	d43fa <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
   d53de:	466a      	mov	r2, sp
   d53e0:	4915      	ldr	r1, [pc, #84]	; (d5438 <_Z18PublishLightSensorv+0x80>)
   d53e2:	a804      	add	r0, sp, #16
   d53e4:	f7ff f84b 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
   d53e8:	4621      	mov	r1, r4
   d53ea:	f7fe feae 	bl	d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d53ee:	466a      	mov	r2, sp
   d53f0:	4912      	ldr	r1, [pc, #72]	; (d543c <_Z18PublishLightSensorv+0x84>)
   d53f2:	a804      	add	r0, sp, #16
   d53f4:	f7ff f843 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
   d53f8:	4911      	ldr	r1, [pc, #68]	; (d5440 <_Z18PublishLightSensorv+0x88>)
   d53fa:	f7fe fea6 	bl	d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d53fe:	466a      	mov	r2, sp
   d5400:	4621      	mov	r1, r4
   d5402:	a804      	add	r0, sp, #16
    jsonDoc["name"] = deviceName;
    jsonDoc["cmd"] = "LightSensor";
    jsonDoc["method"] = "get";
    jsonDoc["LightSensor"] = value;
    
    serializeJson(jsonDoc, buffer);
   d5404:	4c0f      	ldr	r4, [pc, #60]	; (d5444 <_Z18PublishLightSensorv+0x8c>)
   d5406:	f7ff f83a 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  template <typename T>
  FORCE_INLINE bool set(
      T value,
      typename enable_if<is_integral<T>::value && is_signed<T>::value>::type * =
          0) const {
    return variantSetSignedInteger(_data, value);
   d540a:	4629      	mov	r1, r5
   d540c:	f7ff f81e 	bl	d444c <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_>
   d5410:	4621      	mov	r1, r4
   d5412:	4668      	mov	r0, sp
   d5414:	f7ff ffb4 	bl	d5380 <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_>
    
    mqtt->publish(pubTopic, buffer);
   d5418:	4b0b      	ldr	r3, [pc, #44]	; (d5448 <_Z18PublishLightSensorv+0x90>)
   d541a:	490c      	ldr	r1, [pc, #48]	; (d544c <_Z18PublishLightSensorv+0x94>)
   d541c:	6818      	ldr	r0, [r3, #0]
   d541e:	4622      	mov	r2, r4
   d5420:	f000 fd0c 	bl	d5e3c <_ZN4MQTT7publishEPKcS1_>
    
    return 0;
}
   d5424:	2000      	movs	r0, #0
   d5426:	b049      	add	sp, #292	; 0x124
   d5428:	bd30      	pop	{r4, r5, pc}
   d542a:	bf00      	nop
   d542c:	000d9944 	.word	0x000d9944
   d5430:	000d99a7 	.word	0x000d99a7
   d5434:	2003dd3c 	.word	0x2003dd3c
   d5438:	000d99a3 	.word	0x000d99a3
   d543c:	000d99b3 	.word	0x000d99b3
   d5440:	000d99ba 	.word	0x000d99ba
   d5444:	2003e2c9 	.word	0x2003e2c9
   d5448:	2003dd38 	.word	0x2003dd38
   d544c:	2003dfc3 	.word	0x2003dfc3

000d5450 <_Z18PublishAngleSensorv>:

int PublishAngleSensor() {
   d5450:	b530      	push	{r4, r5, lr}
    
    int value = analogRead(ANGLEPIN);
   d5452:	200f      	movs	r0, #15
    mqtt->publish(pubTopic, buffer);
    
    return 0;
}

int PublishAngleSensor() {
   d5454:	b0c9      	sub	sp, #292	; 0x124
    
    int value = analogRead(ANGLEPIN);
   d5456:	f003 f9c9 	bl	d87ec <analogRead>
   d545a:	4605      	mov	r5, r0
    
    StaticJsonDocument<256> jsonDoc;
   d545c:	4668      	mov	r0, sp
   d545e:	f7fe ffb5 	bl	d43cc <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev>
   d5462:	466a      	mov	r2, sp
   d5464:	4917      	ldr	r1, [pc, #92]	; (d54c4 <_Z18PublishAngleSensorv+0x74>)
    return variantSetOwnedString(_data, adaptString(value), _pool);
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
   d5466:	4c18      	ldr	r4, [pc, #96]	; (d54c8 <_Z18PublishAngleSensorv+0x78>)
   d5468:	a804      	add	r0, sp, #16
   d546a:	f7ff f808 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
   d546e:	466a      	mov	r2, sp
   d5470:	4916      	ldr	r1, [pc, #88]	; (d54cc <_Z18PublishAngleSensorv+0x7c>)
   d5472:	f7fe ffc2 	bl	d43fa <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
   d5476:	466a      	mov	r2, sp
   d5478:	4915      	ldr	r1, [pc, #84]	; (d54d0 <_Z18PublishAngleSensorv+0x80>)
   d547a:	a804      	add	r0, sp, #16
   d547c:	f7fe ffff 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
   d5480:	4621      	mov	r1, r4
   d5482:	f7fe fe62 	bl	d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d5486:	466a      	mov	r2, sp
   d5488:	4912      	ldr	r1, [pc, #72]	; (d54d4 <_Z18PublishAngleSensorv+0x84>)
   d548a:	a804      	add	r0, sp, #16
   d548c:	f7fe fff7 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
   d5490:	4911      	ldr	r1, [pc, #68]	; (d54d8 <_Z18PublishAngleSensorv+0x88>)
   d5492:	f7fe fe5a 	bl	d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d5496:	466a      	mov	r2, sp
   d5498:	4621      	mov	r1, r4
   d549a:	a804      	add	r0, sp, #16
    jsonDoc["name"] = deviceName;
    jsonDoc["cmd"] = "RotaryAngleSensor";
    jsonDoc["method"] = "get";
    jsonDoc["RotaryAngleSensor"] = value;
    
    serializeJson(jsonDoc, buffer);
   d549c:	4c0f      	ldr	r4, [pc, #60]	; (d54dc <_Z18PublishAngleSensorv+0x8c>)
   d549e:	f7fe ffee 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  template <typename T>
  FORCE_INLINE bool set(
      T value,
      typename enable_if<is_integral<T>::value && is_signed<T>::value>::type * =
          0) const {
    return variantSetSignedInteger(_data, value);
   d54a2:	4629      	mov	r1, r5
   d54a4:	f7fe ffd2 	bl	d444c <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_>
   d54a8:	4621      	mov	r1, r4
   d54aa:	4668      	mov	r0, sp
   d54ac:	f7ff ff68 	bl	d5380 <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_>
    
    mqtt->publish(pubTopic, buffer);
   d54b0:	4b0b      	ldr	r3, [pc, #44]	; (d54e0 <_Z18PublishAngleSensorv+0x90>)
   d54b2:	490c      	ldr	r1, [pc, #48]	; (d54e4 <_Z18PublishAngleSensorv+0x94>)
   d54b4:	6818      	ldr	r0, [r3, #0]
   d54b6:	4622      	mov	r2, r4
   d54b8:	f000 fcc0 	bl	d5e3c <_ZN4MQTT7publishEPKcS1_>
    
    return 0;
}
   d54bc:	2000      	movs	r0, #0
   d54be:	b049      	add	sp, #292	; 0x124
   d54c0:	bd30      	pop	{r4, r5, pc}
   d54c2:	bf00      	nop
   d54c4:	000d9944 	.word	0x000d9944
   d54c8:	000d99be 	.word	0x000d99be
   d54cc:	2003dd3c 	.word	0x2003dd3c
   d54d0:	000d99a3 	.word	0x000d99a3
   d54d4:	000d99b3 	.word	0x000d99b3
   d54d8:	000d99ba 	.word	0x000d99ba
   d54dc:	2003e2c9 	.word	0x2003e2c9
   d54e0:	2003dd38 	.word	0x2003dd38
   d54e4:	2003dfc3 	.word	0x2003dfc3

000d54e8 <_Z13PublishButtonv>:

int PublishButton() {
   d54e8:	b530      	push	{r4, r5, lr}
    
    int ivalue = analogRead(BUTTONPIN);
   d54ea:	2011      	movs	r0, #17
    mqtt->publish(pubTopic, buffer);
    
    return 0;
}

int PublishButton() {
   d54ec:	b0c9      	sub	sp, #292	; 0x124
    
    int ivalue = analogRead(BUTTONPIN);
   d54ee:	f003 f97d 	bl	d87ec <analogRead>
   d54f2:	4605      	mov	r5, r0
    bool value = false;
    
    StaticJsonDocument<256> jsonDoc;
   d54f4:	4668      	mov	r0, sp
   d54f6:	f7fe ff69 	bl	d43cc <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev>
   d54fa:	466a      	mov	r2, sp
   d54fc:	4918      	ldr	r1, [pc, #96]	; (d5560 <_Z13PublishButtonv+0x78>)
    return variantSetOwnedString(_data, adaptString(value), _pool);
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
   d54fe:	4c19      	ldr	r4, [pc, #100]	; (d5564 <_Z13PublishButtonv+0x7c>)
   d5500:	a804      	add	r0, sp, #16
   d5502:	f7fe ffbc 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
   d5506:	466a      	mov	r2, sp
   d5508:	4917      	ldr	r1, [pc, #92]	; (d5568 <_Z13PublishButtonv+0x80>)
   d550a:	f7fe ff76 	bl	d43fa <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
   d550e:	466a      	mov	r2, sp
   d5510:	4916      	ldr	r1, [pc, #88]	; (d556c <_Z13PublishButtonv+0x84>)
   d5512:	a804      	add	r0, sp, #16
   d5514:	f7fe ffb3 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
   d5518:	4621      	mov	r1, r4
   d551a:	f7fe fe16 	bl	d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d551e:	466a      	mov	r2, sp
   d5520:	4913      	ldr	r1, [pc, #76]	; (d5570 <_Z13PublishButtonv+0x88>)
   d5522:	a804      	add	r0, sp, #16
   d5524:	f7fe ffab 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
   d5528:	4912      	ldr	r1, [pc, #72]	; (d5574 <_Z13PublishButtonv+0x8c>)
   d552a:	f7fe fe0e 	bl	d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d552e:	4621      	mov	r1, r4
   d5530:	466a      	mov	r2, sp
   d5532:	a804      	add	r0, sp, #16
   d5534:	f7fe ffa3 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
    jsonDoc["name"] = deviceName;
    jsonDoc["cmd"] = "Button";
    jsonDoc["method"] = "get";
    jsonDoc["Button"] = value;
    
    serializeJson(jsonDoc, buffer);
   d5538:	4c0f      	ldr	r4, [pc, #60]	; (d5578 <_Z13PublishButtonv+0x90>)
    return variantSetNull(_data);
  }

  // set(bool value)
  FORCE_INLINE bool set(bool value) const {
    return variantSetBoolean(_data, value);
   d553a:	2d00      	cmp	r5, #0
   d553c:	bfd4      	ite	le
   d553e:	2100      	movle	r1, #0
   d5540:	2101      	movgt	r1, #1
   d5542:	f7fe fdf3 	bl	d412c <_ZN21ArduinoJson6110_1100017variantSetBooleanEPNS_11VariantDataEb>
   d5546:	4621      	mov	r1, r4
   d5548:	4668      	mov	r0, sp
   d554a:	f7ff ff19 	bl	d5380 <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_>
    
    mqtt->publish(pubTopic, buffer);
   d554e:	4b0b      	ldr	r3, [pc, #44]	; (d557c <_Z13PublishButtonv+0x94>)
   d5550:	490b      	ldr	r1, [pc, #44]	; (d5580 <_Z13PublishButtonv+0x98>)
   d5552:	6818      	ldr	r0, [r3, #0]
   d5554:	4622      	mov	r2, r4
   d5556:	f000 fc71 	bl	d5e3c <_ZN4MQTT7publishEPKcS1_>
    
    return 0;
}
   d555a:	2000      	movs	r0, #0
   d555c:	b049      	add	sp, #292	; 0x124
   d555e:	bd30      	pop	{r4, r5, pc}
   d5560:	000d9944 	.word	0x000d9944
   d5564:	000d99d0 	.word	0x000d99d0
   d5568:	2003dd3c 	.word	0x2003dd3c
   d556c:	000d99a3 	.word	0x000d99a3
   d5570:	000d99b3 	.word	0x000d99b3
   d5574:	000d99ba 	.word	0x000d99ba
   d5578:	2003e2c9 	.word	0x2003e2c9
   d557c:	2003dd38 	.word	0x2003dd38
   d5580:	2003dfc3 	.word	0x2003dfc3

000d5584 <loop>:
    SetPubTopic("DataTopic");
    SetResponseTopic("ResponseTopic");
}

// loop() runs over and over again, as quickly as it can execute.
void loop() {
   d5584:	b510      	push	{r4, lr}
  // The core of your code will likely live here.

  if (initialized) {
   d5586:	4c1c      	ldr	r4, [pc, #112]	; (d55f8 <loop+0x74>)
   d5588:	7823      	ldrb	r3, [r4, #0]
   d558a:	b303      	cbz	r3, d55ce <loop+0x4a>
        if (millis() - lastPublish >= PUBLISH_INTERVAL_MS) {
   d558c:	4c1b      	ldr	r4, [pc, #108]	; (d55fc <loop+0x78>)
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d558e:	f000 fe2d 	bl	d61ec <HAL_Timer_Get_Milli_Seconds>
   d5592:	6823      	ldr	r3, [r4, #0]
   d5594:	1ac0      	subs	r0, r0, r3
   d5596:	f241 3387 	movw	r3, #4999	; 0x1387
   d559a:	4298      	cmp	r0, r3
   d559c:	d92b      	bls.n	d55f6 <loop+0x72>
   d559e:	f000 fe25 	bl	d61ec <HAL_Timer_Get_Milli_Seconds>
		    lastPublish = millis();
   d55a2:	6020      	str	r0, [r4, #0]
		
		
            if (mqtt->isConnected()) {
   d55a4:	4c16      	ldr	r4, [pc, #88]	; (d5600 <loop+0x7c>)
   d55a6:	6820      	ldr	r0, [r4, #0]
   d55a8:	f000 fae4 	bl	d5b74 <_ZN4MQTT11isConnectedEv>
   d55ac:	4b15      	ldr	r3, [pc, #84]	; (d5604 <loop+0x80>)
   d55ae:	b160      	cbz	r0, d55ca <loop+0x46>
                mqttIsActive = true;
   d55b0:	2201      	movs	r2, #1
   d55b2:	701a      	strb	r2, [r3, #0]
            
                PublishLightSensor();
   d55b4:	f7ff ff00 	bl	d53b8 <_Z18PublishLightSensorv>
                PublishAngleSensor();
   d55b8:	f7ff ff4a 	bl	d5450 <_Z18PublishAngleSensorv>
                PublishButton();
   d55bc:	f7ff ff94 	bl	d54e8 <_Z13PublishButtonv>
            
                mqtt->loop();
   d55c0:	6820      	ldr	r0, [r4, #0]
            
            initialized = true;
            
        }
    }
}
   d55c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            
                PublishLightSensor();
                PublishAngleSensor();
                PublishButton();
            
                mqtt->loop();
   d55c6:	f000 bc80 	b.w	d5eca <_ZN4MQTT4loopEv>
            } else {
                mqttIsActive = false;
   d55ca:	7018      	strb	r0, [r3, #0]
   d55cc:	bd10      	pop	{r4, pc}
            }
        }
    }
    else {
        if (nameReceived && mqttIsInitialized && mqtt->isConnected()) {
   d55ce:	4b0e      	ldr	r3, [pc, #56]	; (d5608 <loop+0x84>)
   d55d0:	781b      	ldrb	r3, [r3, #0]
   d55d2:	b183      	cbz	r3, d55f6 <loop+0x72>
   d55d4:	4b0d      	ldr	r3, [pc, #52]	; (d560c <loop+0x88>)
   d55d6:	781b      	ldrb	r3, [r3, #0]
   d55d8:	b16b      	cbz	r3, d55f6 <loop+0x72>
   d55da:	4b09      	ldr	r3, [pc, #36]	; (d5600 <loop+0x7c>)
   d55dc:	6818      	ldr	r0, [r3, #0]
   d55de:	f000 fac9 	bl	d5b74 <_ZN4MQTT11isConnectedEv>
   d55e2:	b140      	cbz	r0, d55f6 <loop+0x72>
            
            // Subscribe to mqtt command topic
            MQTTSubscribe();
   d55e4:	f7fe fed4 	bl	d4390 <_Z13MQTTSubscribev>
            
            // Subscribe to mess topic
            Mesh.subscribe("MeshDataTopic", meshReceiver);
   d55e8:	4a09      	ldr	r2, [pc, #36]	; (d5610 <loop+0x8c>)
   d55ea:	490a      	ldr	r1, [pc, #40]	; (d5614 <loop+0x90>)
   d55ec:	480a      	ldr	r0, [pc, #40]	; (d5618 <loop+0x94>)
   d55ee:	f001 fe25 	bl	d723c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>
            
            initialized = true;
   d55f2:	2301      	movs	r3, #1
   d55f4:	7023      	strb	r3, [r4, #0]
   d55f6:	bd10      	pop	{r4, pc}
   d55f8:	2003dec2 	.word	0x2003dec2
   d55fc:	2003e0c4 	.word	0x2003e0c4
   d5600:	2003dd38 	.word	0x2003dd38
   d5604:	2003dd34 	.word	0x2003dd34
   d5608:	2003ddc0 	.word	0x2003ddc0
   d560c:	2003e0c8 	.word	0x2003e0c8
   d5610:	000d40b9 	.word	0x000d40b9
   d5614:	000d99d7 	.word	0x000d99d7
   d5618:	2003e4e0 	.word	0x2003e4e0

000d561c <_Z15PublishResponsev>:
    
    return 0;
}


int PublishResponse() {
   d561c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5620:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 public:
  MemoryPool(char* buf, size_t capa)
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
        _end(buf ? buf + capa : 0) {
   d5624:	ac4e      	add	r4, sp, #312	; 0x138
   d5626:	ab56      	add	r3, sp, #344	; 0x158
   d5628:	934e      	str	r3, [sp, #312]	; 0x138
   d562a:	934f      	str	r3, [sp, #316]	; 0x13c
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
    setType(VALUE_IS_NULL);
   d562c:	2100      	movs	r1, #0
   d562e:	abd6      	add	r3, sp, #856	; 0x358
   d5630:	a854      	add	r0, sp, #336	; 0x150
   d5632:	9350      	str	r3, [sp, #320]	; 0x140
   d5634:	9351      	str	r3, [sp, #324]	; 0x144
   d5636:	f7fe fd5b 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    s.size = newSize;
    checkInvariants();
  }

  void clear() {
    _left = _begin;
   d563a:	6823      	ldr	r3, [r4, #0]
   d563c:	6063      	str	r3, [r4, #4]
    _right = _end;
   d563e:	68e3      	ldr	r3, [r4, #12]
   d5640:	60a3      	str	r3, [r4, #8]
   d5642:	2100      	movs	r1, #0
   d5644:	a854      	add	r0, sp, #336	; 0x150
   d5646:	f7fe fd53 	bl	d40f0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _pool(&pool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
   d564a:	4ba2      	ldr	r3, [pc, #648]	; (d58d4 <_Z15PublishResponsev+0x2b8>)
   d564c:	9307      	str	r3, [sp, #28]
   d564e:	9308      	str	r3, [sp, #32]
   d5650:	2332      	movs	r3, #50	; 0x32
   d5652:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  DeserializationError parse(VariantData &variant) {
    DeserializationError err = parseVariant(variant);
   d5656:	a952      	add	r1, sp, #328	; 0x148
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _pool(&pool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
   d5658:	2300      	movs	r3, #0
  DeserializationError parse(VariantData &variant) {
    DeserializationError err = parseVariant(variant);
   d565a:	a806      	add	r0, sp, #24
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _pool(&pool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
   d565c:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
   d5660:	9406      	str	r4, [sp, #24]
  DeserializationError parse(VariantData &variant) {
    DeserializationError err = parseVariant(variant);
   d5662:	f7ff fa62 	bl	d4b2a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE>

    if (!err && _current != 0 && !variant.isEnclosed()) {
   d5666:	a902      	add	r1, sp, #8
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(VariantData &variant) {
    DeserializationError err = parseVariant(variant);
   d5668:	f88d 0008 	strb.w	r0, [sp, #8]

    if (!err && _current != 0 && !variant.isEnclosed()) {
   d566c:	a804      	add	r0, sp, #16
   d566e:	f7fe fd9b 	bl	d41a8 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
   d5672:	9b04      	ldr	r3, [sp, #16]
   d5674:	b98b      	cbnz	r3, d569a <_Z15PublishResponsev+0x7e>
   d5676:	9b05      	ldr	r3, [sp, #20]
   d5678:	07da      	lsls	r2, r3, #31
   d567a:	d40e      	bmi.n	d569a <_Z15PublishResponsev+0x7e>
   d567c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d5680:	b15b      	cbz	r3, d569a <_Z15PublishResponsev+0x7e>
   d5682:	7e23      	ldrb	r3, [r4, #24]
  bool isNull() const {
    return type() == VALUE_IS_NULL;
  }

  bool isEnclosed() const {
    return isCollection() || isString();
   d5684:	f013 0f60 	tst.w	r3, #96	; 0x60
   d5688:	d107      	bne.n	d569a <_Z15PublishResponsev+0x7e>
    return type() == VALUE_IS_FLOAT || type() == VALUE_IS_POSITIVE_INTEGER ||
           type() == VALUE_IS_NEGATIVE_INTEGER;
  }

  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
   d568a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d568e:	3b03      	subs	r3, #3
   d5690:	2b01      	cmp	r3, #1
      // We don't detect trailing characters earlier, so we need to check now
      err = DeserializationError::InvalidInput;
   d5692:	bf84      	itt	hi
   d5694:	2302      	movhi	r3, #2
   d5696:	f88d 3008 	strbhi.w	r3, [sp, #8]
    }

    return err;
   d569a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    
    int value = 99;
    bool bvalue = false;
    
    StaticJsonDocument<512> jd;
    DeserializationError error = deserializeJson(jd, subMessage);
   d569e:	f88d 3004 	strb.w	r3, [sp, #4]
    
    StaticJsonDocument<256> jsonDoc;
   d56a2:	a806      	add	r0, sp, #24
   d56a4:	f7fe fe92 	bl	d43cc <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev>
    
    if (!error) {
   d56a8:	a901      	add	r1, sp, #4
   d56aa:	a802      	add	r0, sp, #8
   d56ac:	f7fe fd7c 	bl	d41a8 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
   d56b0:	9b02      	ldr	r3, [sp, #8]
   d56b2:	4e89      	ldr	r6, [pc, #548]	; (d58d8 <_Z15PublishResponsev+0x2bc>)
   d56b4:	2b00      	cmp	r3, #0
   d56b6:	f040 80de 	bne.w	d5876 <_Z15PublishResponsev+0x25a>
   d56ba:	9b03      	ldr	r3, [sp, #12]
   d56bc:	07db      	lsls	r3, r3, #31
   d56be:	f100 80da 	bmi.w	d5876 <_Z15PublishResponsev+0x25a>
  // JsonVariant getMember(char*)
  // JsonVariant getMember(const char*)
  // JsonVariant getMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) {
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
   d56c2:	4986      	ldr	r1, [pc, #536]	; (d58dc <_Z15PublishResponsev+0x2c0>)
   d56c4:	a852      	add	r0, sp, #328	; 0x148
   d56c6:	f7fe ff57 	bl	d4578 <_ZNK21ArduinoJson6110_1100011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
   d56ca:	f7fe fefe 	bl	d44ca <_ZN21ArduinoJson6110_110009variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
   d56ce:	4984      	ldr	r1, [pc, #528]	; (d58e0 <_Z15PublishResponsev+0x2c4>)
   d56d0:	4607      	mov	r7, r0
   d56d2:	a852      	add	r0, sp, #328	; 0x148
   d56d4:	f7fe ff50 	bl	d4578 <_ZNK21ArduinoJson6110_1100011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
   d56d8:	f7fe fef7 	bl	d44ca <_ZN21ArduinoJson6110_110009variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
   d56dc:	4981      	ldr	r1, [pc, #516]	; (d58e4 <_Z15PublishResponsev+0x2c8>)
   d56de:	4605      	mov	r5, r0
   d56e0:	a852      	add	r0, sp, #328	; 0x148
   d56e2:	f7fe ff49 	bl	d4578 <_ZNK21ArduinoJson6110_1100011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
   d56e6:	f7fe fef0 	bl	d44ca <_ZN21ArduinoJson6110_110009variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
        // parseObject() succeeded
        const char* uuid = jd["uuid"];
        const char* cmd = jd["cmd"];
        const char* method = jd["method"];
        
        if (strcmp(method, "set") == 0) {
   d56ea:	497f      	ldr	r1, [pc, #508]	; (d58e8 <_Z15PublishResponsev+0x2cc>)
   d56ec:	4680      	mov	r8, r0
   d56ee:	f004 f8a6 	bl	d983e <strcmp>
   d56f2:	2800      	cmp	r0, #0
   d56f4:	d15b      	bne.n	d57ae <_Z15PublishResponsev+0x192>
            if (strcmp(cmd, "Led") == 0) { 
   d56f6:	497d      	ldr	r1, [pc, #500]	; (d58ec <_Z15PublishResponsev+0x2d0>)
   d56f8:	4628      	mov	r0, r5
   d56fa:	f004 f8a0 	bl	d983e <strcmp>
   d56fe:	2800      	cmp	r0, #0
   d5700:	d13d      	bne.n	d577e <_Z15PublishResponsev+0x162>
   d5702:	497a      	ldr	r1, [pc, #488]	; (d58ec <_Z15PublishResponsev+0x2d0>)
   d5704:	a852      	add	r0, sp, #328	; 0x148
   d5706:	f7fe ff37 	bl	d4578 <_ZNK21ArduinoJson6110_1100011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
}

template <typename T>
inline typename enable_if<is_same<T, bool>::value, T>::type variantAs(
    const VariantData* _data) {
  return _data != 0 ? _data->asBoolean() : false;
   d570a:	b358      	cbz	r0, d5764 <_Z15PublishResponsev+0x148>
      return 0;
  }
}

inline bool VariantData::asBoolean() const {
  switch (type()) {
   d570c:	7a03      	ldrb	r3, [r0, #8]
   d570e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   d5712:	3b03      	subs	r3, #3
   d5714:	2b05      	cmp	r3, #5
   d5716:	d825      	bhi.n	d5764 <_Z15PublishResponsev+0x148>
   d5718:	e8df f003 	tbb	[pc, r3]
   d571c:	03031717 	.word	0x03031717
   d5720:	0a03      	.short	0x0a03
    case VALUE_IS_POSITIVE_INTEGER:
    case VALUE_IS_BOOLEAN:
    case VALUE_IS_NEGATIVE_INTEGER:
      return _content.asInteger != 0;
   d5722:	e890 000c 	ldmia.w	r0, {r2, r3}
   d5726:	4313      	orrs	r3, r2
   d5728:	bf14      	ite	ne
   d572a:	2401      	movne	r4, #1
   d572c:	2400      	moveq	r4, #0
   d572e:	e013      	b.n	d5758 <_Z15PublishResponsev+0x13c>
    case VALUE_IS_FLOAT:
      return _content.asFloat != 0;
   d5730:	2200      	movs	r2, #0
   d5732:	2300      	movs	r3, #0
   d5734:	e9d0 0100 	ldrd	r0, r1, [r0]
   d5738:	f04f 0401 	mov.w	r4, #1
   d573c:	f003 fe3a 	bl	d93b4 <__aeabi_dcmpeq>
   d5740:	b108      	cbz	r0, d5746 <_Z15PublishResponsev+0x12a>
   d5742:	f04f 0400 	mov.w	r4, #0
   d5746:	b2e4      	uxtb	r4, r4
   d5748:	e006      	b.n	d5758 <_Z15PublishResponsev+0x13c>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return strcmp("true", _content.asString) == 0;
   d574a:	6801      	ldr	r1, [r0, #0]
   d574c:	4868      	ldr	r0, [pc, #416]	; (d58f0 <_Z15PublishResponsev+0x2d4>)
   d574e:	f004 f876 	bl	d983e <strcmp>
   d5752:	fab0 f480 	clz	r4, r0
   d5756:	0964      	lsrs	r4, r4, #5
                bool value = jd["Led"];
                
                if (value) {
   d5758:	b124      	cbz	r4, d5764 <_Z15PublishResponsev+0x148>
                    digitalWrite(LEDPIN, HIGH);
   d575a:	2101      	movs	r1, #1
   d575c:	2002      	movs	r0, #2
   d575e:	f003 f82c 	bl	d87ba <digitalWrite>
   d5762:	e004      	b.n	d576e <_Z15PublishResponsev+0x152>
                }
                else {
                    digitalWrite(LEDPIN, LOW);
   d5764:	2100      	movs	r1, #0
   d5766:	2002      	movs	r0, #2
   d5768:	f003 f827 	bl	d87ba <digitalWrite>
   d576c:	2400      	movs	r4, #0
  // getOrAddMember(char*)
  // getOrAddMember(const char*)
  // getOrAddMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getOrAddMember(TChar* key) {
    return VariantRef(&_pool, _data.getOrAddMember(adaptString(key), &_pool));
   d576e:	4629      	mov	r1, r5
   d5770:	aa06      	add	r2, sp, #24
   d5772:	a80a      	add	r0, sp, #40	; 0x28
   d5774:	f7fe fe83 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
    return variantSetNull(_data);
  }

  // set(bool value)
  FORCE_INLINE bool set(bool value) const {
    return variantSetBoolean(_data, value);
   d5778:	4621      	mov	r1, r4
   d577a:	f7fe fcd7 	bl	d412c <_ZN21ArduinoJson6110_1100017variantSetBooleanEPNS_11VariantDataEb>
   d577e:	aa06      	add	r2, sp, #24
   d5780:	495c      	ldr	r1, [pc, #368]	; (d58f4 <_Z15PublishResponsev+0x2d8>)
   d5782:	a80a      	add	r0, sp, #40	; 0x28
   d5784:	f7fe fe7b 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
   d5788:	aa06      	add	r2, sp, #24
   d578a:	495b      	ldr	r1, [pc, #364]	; (d58f8 <_Z15PublishResponsev+0x2dc>)
   d578c:	f7fe fe35 	bl	d43fa <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
   d5790:	aa06      	add	r2, sp, #24
   d5792:	4953      	ldr	r1, [pc, #332]	; (d58e0 <_Z15PublishResponsev+0x2c4>)
   d5794:	a80a      	add	r0, sp, #40	; 0x28
   d5796:	f7fe fe72 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
   d579a:	4629      	mov	r1, r5
   d579c:	f7fe fcd5 	bl	d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d57a0:	4950      	ldr	r1, [pc, #320]	; (d58e4 <_Z15PublishResponsev+0x2c8>)
   d57a2:	aa06      	add	r2, sp, #24
   d57a4:	a80a      	add	r0, sp, #40	; 0x28
   d57a6:	f7fe fe6a 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
   d57aa:	4641      	mov	r1, r8
   d57ac:	e058      	b.n	d5860 <_Z15PublishResponsev+0x244>
        
            mqtt->publish(responseTopic, buffer);
        }
        else {
            
            if (strcmp(cmd, "LightSensor") == 0) { 
   d57ae:	4953      	ldr	r1, [pc, #332]	; (d58fc <_Z15PublishResponsev+0x2e0>)
   d57b0:	4628      	mov	r0, r5
   d57b2:	f004 f844 	bl	d983e <strcmp>
   d57b6:	b970      	cbnz	r0, d57d6 <_Z15PublishResponsev+0x1ba>
                value = analogRead(LIGHTPIN);
   d57b8:	2013      	movs	r0, #19
   d57ba:	f003 f817 	bl	d87ec <analogRead>
   d57be:	aa06      	add	r2, sp, #24
   d57c0:	4947      	ldr	r1, [pc, #284]	; (d58e0 <_Z15PublishResponsev+0x2c4>)
   d57c2:	4604      	mov	r4, r0
   d57c4:	a80a      	add	r0, sp, #40	; 0x28
   d57c6:	f7fe fe5a 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
   d57ca:	494c      	ldr	r1, [pc, #304]	; (d58fc <_Z15PublishResponsev+0x2e0>)
   d57cc:	f7fe fcbd 	bl	d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d57d0:	aa06      	add	r2, sp, #24
   d57d2:	494a      	ldr	r1, [pc, #296]	; (d58fc <_Z15PublishResponsev+0x2e0>)
   d57d4:	e012      	b.n	d57fc <_Z15PublishResponsev+0x1e0>
                jsonDoc["cmd"] = "LightSensor";
                jsonDoc["LightSensor"] = value;
            }
            else if (strcmp(cmd, "RotaryAngleSensor") == 0) { 
   d57d6:	494a      	ldr	r1, [pc, #296]	; (d5900 <_Z15PublishResponsev+0x2e4>)
   d57d8:	4628      	mov	r0, r5
   d57da:	f004 f830 	bl	d983e <strcmp>
   d57de:	b9a0      	cbnz	r0, d580a <_Z15PublishResponsev+0x1ee>
                value = analogRead(ANGLEPIN);
   d57e0:	200f      	movs	r0, #15
   d57e2:	f003 f803 	bl	d87ec <analogRead>
   d57e6:	aa06      	add	r2, sp, #24
   d57e8:	493d      	ldr	r1, [pc, #244]	; (d58e0 <_Z15PublishResponsev+0x2c4>)
   d57ea:	4604      	mov	r4, r0
   d57ec:	a80a      	add	r0, sp, #40	; 0x28
   d57ee:	f7fe fe46 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
   d57f2:	4943      	ldr	r1, [pc, #268]	; (d5900 <_Z15PublishResponsev+0x2e4>)
   d57f4:	f7fe fca9 	bl	d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d57f8:	4941      	ldr	r1, [pc, #260]	; (d5900 <_Z15PublishResponsev+0x2e4>)
   d57fa:	aa06      	add	r2, sp, #24
   d57fc:	a80a      	add	r0, sp, #40	; 0x28
   d57fe:	f7fe fe3e 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  template <typename T>
  FORCE_INLINE bool set(
      T value,
      typename enable_if<is_integral<T>::value && is_signed<T>::value>::type * =
          0) const {
    return variantSetSignedInteger(_data, value);
   d5802:	4621      	mov	r1, r4
   d5804:	f7fe fe22 	bl	d444c <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_>
   d5808:	e01b      	b.n	d5842 <_Z15PublishResponsev+0x226>
                jsonDoc["cmd"] = "RotaryAngleSensor";
                jsonDoc["RotaryAngleSensor"] = value;
            }
            else if (strcmp(cmd, "Button") == 0) { 
   d580a:	493e      	ldr	r1, [pc, #248]	; (d5904 <_Z15PublishResponsev+0x2e8>)
   d580c:	4628      	mov	r0, r5
   d580e:	f004 f816 	bl	d983e <strcmp>
   d5812:	b9b0      	cbnz	r0, d5842 <_Z15PublishResponsev+0x226>
                value = analogRead(BUTTONPIN);
   d5814:	2011      	movs	r0, #17
   d5816:	f002 ffe9 	bl	d87ec <analogRead>
   d581a:	aa06      	add	r2, sp, #24
   d581c:	4604      	mov	r4, r0
   d581e:	4930      	ldr	r1, [pc, #192]	; (d58e0 <_Z15PublishResponsev+0x2c4>)
   d5820:	a80a      	add	r0, sp, #40	; 0x28
   d5822:	f7fe fe2c 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
    return variantSetOwnedString(_data, adaptString(value), _pool);
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
   d5826:	4937      	ldr	r1, [pc, #220]	; (d5904 <_Z15PublishResponsev+0x2e8>)
   d5828:	f7fe fc8f 	bl	d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d582c:	4935      	ldr	r1, [pc, #212]	; (d5904 <_Z15PublishResponsev+0x2e8>)
   d582e:	aa06      	add	r2, sp, #24
   d5830:	a80a      	add	r0, sp, #40	; 0x28
   d5832:	f7fe fe24 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
    return variantSetNull(_data);
  }

  // set(bool value)
  FORCE_INLINE bool set(bool value) const {
    return variantSetBoolean(_data, value);
   d5836:	2c00      	cmp	r4, #0
   d5838:	bfd4      	ite	le
   d583a:	2100      	movle	r1, #0
   d583c:	2101      	movgt	r1, #1
   d583e:	f7fe fc75 	bl	d412c <_ZN21ArduinoJson6110_1100017variantSetBooleanEPNS_11VariantDataEb>
   d5842:	aa06      	add	r2, sp, #24
   d5844:	492b      	ldr	r1, [pc, #172]	; (d58f4 <_Z15PublishResponsev+0x2d8>)
   d5846:	a80a      	add	r0, sp, #40	; 0x28
   d5848:	f7fe fe19 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
   d584c:	aa06      	add	r2, sp, #24
   d584e:	492a      	ldr	r1, [pc, #168]	; (d58f8 <_Z15PublishResponsev+0x2dc>)
   d5850:	f7fe fdd3 	bl	d43fa <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
   d5854:	4923      	ldr	r1, [pc, #140]	; (d58e4 <_Z15PublishResponsev+0x2c8>)
   d5856:	aa06      	add	r2, sp, #24
   d5858:	a80a      	add	r0, sp, #40	; 0x28
   d585a:	f7fe fe10 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
   d585e:	492a      	ldr	r1, [pc, #168]	; (d5908 <_Z15PublishResponsev+0x2ec>)
   d5860:	f7fe fc73 	bl	d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d5864:	aa06      	add	r2, sp, #24
   d5866:	491d      	ldr	r1, [pc, #116]	; (d58dc <_Z15PublishResponsev+0x2c0>)
   d5868:	a80a      	add	r0, sp, #40	; 0x28
   d586a:	f7fe fe08 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
   d586e:	4639      	mov	r1, r7
   d5870:	f7fe fc6b 	bl	d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d5874:	e020      	b.n	d58b8 <_Z15PublishResponsev+0x29c>
   d5876:	aa06      	add	r2, sp, #24
   d5878:	491e      	ldr	r1, [pc, #120]	; (d58f4 <_Z15PublishResponsev+0x2d8>)
   d587a:	a80a      	add	r0, sp, #40	; 0x28
   d587c:	f7fe fdff 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
   d5880:	aa06      	add	r2, sp, #24
   d5882:	491d      	ldr	r1, [pc, #116]	; (d58f8 <_Z15PublishResponsev+0x2dc>)
   d5884:	f7fe fdb9 	bl	d43fa <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
   d5888:	aa06      	add	r2, sp, #24
   d588a:	4915      	ldr	r1, [pc, #84]	; (d58e0 <_Z15PublishResponsev+0x2c4>)
   d588c:	a80a      	add	r0, sp, #40	; 0x28
   d588e:	f7fe fdf6 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
   d5892:	491a      	ldr	r1, [pc, #104]	; (d58fc <_Z15PublishResponsev+0x2e0>)
   d5894:	f7fe fc59 	bl	d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d5898:	aa06      	add	r2, sp, #24
   d589a:	4912      	ldr	r1, [pc, #72]	; (d58e4 <_Z15PublishResponsev+0x2c8>)
   d589c:	a80a      	add	r0, sp, #40	; 0x28
   d589e:	f7fe fdee 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
   d58a2:	4919      	ldr	r1, [pc, #100]	; (d5908 <_Z15PublishResponsev+0x2ec>)
   d58a4:	f7fe fc51 	bl	d414a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
   d58a8:	4914      	ldr	r1, [pc, #80]	; (d58fc <_Z15PublishResponsev+0x2e0>)
   d58aa:	aa06      	add	r2, sp, #24
   d58ac:	a80a      	add	r0, sp, #40	; 0x28
   d58ae:	f7fe fde6 	bl	d447e <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  template <typename T>
  FORCE_INLINE bool set(
      T value,
      typename enable_if<is_integral<T>::value && is_signed<T>::value>::type * =
          0) const {
    return variantSetSignedInteger(_data, value);
   d58b2:	2163      	movs	r1, #99	; 0x63
   d58b4:	f7fe fdca 	bl	d444c <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_>
        jsonDoc["name"] = deviceName;
        jsonDoc["cmd"] = "LightSensor";
        jsonDoc["method"] = "get";
        jsonDoc["LightSensor"] = value;
    
        serializeJson(jsonDoc, buffer);
   d58b8:	4914      	ldr	r1, [pc, #80]	; (d590c <_Z15PublishResponsev+0x2f0>)
   d58ba:	a806      	add	r0, sp, #24
   d58bc:	f7ff fd60 	bl	d5380 <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_>
        
        mqtt->publish(responseTopic, buffer);
   d58c0:	4a12      	ldr	r2, [pc, #72]	; (d590c <_Z15PublishResponsev+0x2f0>)
   d58c2:	4913      	ldr	r1, [pc, #76]	; (d5910 <_Z15PublishResponsev+0x2f4>)
   d58c4:	6830      	ldr	r0, [r6, #0]
   d58c6:	f000 fab9 	bl	d5e3c <_ZN4MQTT7publishEPKcS1_>
    }
    
    return 0;
}
   d58ca:	2000      	movs	r0, #0
   d58cc:	f50d 7d56 	add.w	sp, sp, #856	; 0x358
   d58d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d58d4:	2003e0c9 	.word	0x2003e0c9
   d58d8:	2003dd38 	.word	0x2003dd38
   d58dc:	000d99e9 	.word	0x000d99e9
   d58e0:	000d99a3 	.word	0x000d99a3
   d58e4:	000d99b3 	.word	0x000d99b3
   d58e8:	000d99ee 	.word	0x000d99ee
   d58ec:	000d99e5 	.word	0x000d99e5
   d58f0:	000d9998 	.word	0x000d9998
   d58f4:	000d9944 	.word	0x000d9944
   d58f8:	2003dd3c 	.word	0x2003dd3c
   d58fc:	000d99a7 	.word	0x000d99a7
   d5900:	000d99be 	.word	0x000d99be
   d5904:	000d99d0 	.word	0x000d99d0
   d5908:	000d99ba 	.word	0x000d99ba
   d590c:	2003e2c9 	.word	0x2003e2c9
   d5910:	2003dec3 	.word	0x2003dec3

000d5914 <_Z12mqttReceiverPcPhj>:

// --------------------------------------------- Receive an MQTT Message
// triggered when a message is received from the MQTT Broker
void mqttReceiver(char* topic, byte* payload, unsigned int length) {
    //strncpy(subTopic, topic, sizeof(subTopic));
	memcpy(subMessage, payload, length);
   d5914:	4b05      	ldr	r3, [pc, #20]	; (d592c <_Z12mqttReceiverPcPhj+0x18>)
	} else return 1;
}

// --------------------------------------------- Receive an MQTT Message
// triggered when a message is received from the MQTT Broker
void mqttReceiver(char* topic, byte* payload, unsigned int length) {
   d5916:	b510      	push	{r4, lr}
    //strncpy(subTopic, topic, sizeof(subTopic));
	memcpy(subMessage, payload, length);
   d5918:	4618      	mov	r0, r3
	} else return 1;
}

// --------------------------------------------- Receive an MQTT Message
// triggered when a message is received from the MQTT Broker
void mqttReceiver(char* topic, byte* payload, unsigned int length) {
   d591a:	4614      	mov	r4, r2
    //strncpy(subTopic, topic, sizeof(subTopic));
	memcpy(subMessage, payload, length);
   d591c:	f003 ff45 	bl	d97aa <memcpy>
	subMessage[length] = '\0';
   d5920:	2200      	movs	r2, #0
   d5922:	5502      	strb	r2, [r0, r4]
	
	PublishResponse();
}
   d5924:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void mqttReceiver(char* topic, byte* payload, unsigned int length) {
    //strncpy(subTopic, topic, sizeof(subTopic));
	memcpy(subMessage, payload, length);
	subMessage[length] = '\0';
	
	PublishResponse();
   d5928:	f7ff be78 	b.w	d561c <_Z15PublishResponsev>
   d592c:	2003e0c9 	.word	0x2003e0c9

000d5930 <_GLOBAL__sub_I_mqtt>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d5930:	4b02      	ldr	r3, [pc, #8]	; (d593c <_GLOBAL__sub_I_mqtt+0xc>)
   d5932:	2201      	movs	r2, #1
   d5934:	701a      	strb	r2, [r3, #0]

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static NRF5x_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d5936:	f000 bc61 	b.w	d61fc <HAL_Pin_Map>
   d593a:	bf00      	nop
   d593c:	2003ddc1 	.word	0x2003ddc1

000d5940 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d5940:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d5942:	6984      	ldr	r4, [r0, #24]
   d5944:	4b0a      	ldr	r3, [pc, #40]	; (d5970 <_ZN9TCPClientD1Ev+0x30>)
   d5946:	6003      	str	r3, [r0, #0]
   d5948:	4605      	mov	r5, r0
   d594a:	b17c      	cbz	r4, d596c <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d594c:	6863      	ldr	r3, [r4, #4]
   d594e:	3b01      	subs	r3, #1
   d5950:	6063      	str	r3, [r4, #4]
   d5952:	b95b      	cbnz	r3, d596c <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
   d5954:	6823      	ldr	r3, [r4, #0]
   d5956:	4620      	mov	r0, r4
   d5958:	689b      	ldr	r3, [r3, #8]
   d595a:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d595c:	68a3      	ldr	r3, [r4, #8]
   d595e:	3b01      	subs	r3, #1
   d5960:	60a3      	str	r3, [r4, #8]
   d5962:	b91b      	cbnz	r3, d596c <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d5964:	6823      	ldr	r3, [r4, #0]
   d5966:	4620      	mov	r0, r4
   d5968:	68db      	ldr	r3, [r3, #12]
   d596a:	4798      	blx	r3
   d596c:	4628      	mov	r0, r5
   d596e:	bd38      	pop	{r3, r4, r5, pc}
   d5970:	000d9c34 	.word	0x000d9c34

000d5974 <_ZN9TCPClientD0Ev>:
   d5974:	b510      	push	{r4, lr}
   d5976:	4604      	mov	r4, r0
   d5978:	f7ff ffe2 	bl	d5940 <_ZN9TCPClientD1Ev>
   d597c:	4620      	mov	r0, r4
   d597e:	f7fe fb8e 	bl	d409e <_ZdlPv>
   d5982:	4620      	mov	r0, r4
   d5984:	bd10      	pop	{r4, pc}

000d5986 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d5986:	b538      	push	{r3, r4, r5, lr}
   d5988:	461d      	mov	r5, r3
    this->callback = callback;
   d598a:	9b05      	ldr	r3, [sp, #20]
   d598c:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
   d598e:	2300      	movs	r3, #0

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
   d5990:	4604      	mov	r4, r0
    this->callback = callback;
    this->qoscallback = NULL;
   d5992:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
   d5994:	b102      	cbz	r2, d5998 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
   d5996:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
   d5998:	b119      	cbz	r1, d59a2 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
   d599a:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d599e:	f001 fef0 	bl	d7782 <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
   d59a2:	9b04      	ldr	r3, [sp, #16]
   d59a4:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d59a6:	9b06      	ldr	r3, [sp, #24]
    if (buffer != NULL)
   d59a8:	69e0      	ldr	r0, [r4, #28]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
   d59aa:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
   d59ae:	2bff      	cmp	r3, #255	; 0xff
   d59b0:	bfb8      	it	lt
   d59b2:	23ff      	movlt	r3, #255	; 0xff
   d59b4:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
   d59b8:	b108      	cbz	r0, d59be <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
   d59ba:	f7fe fb72 	bl	d40a2 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
   d59be:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
   d59c2:	f7fe fb6a 	bl	d409a <_Znaj>
   d59c6:	61e0      	str	r0, [r4, #28]
   d59c8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d59cc <_ZN4MQTTC1EPhtiPFvPcS0_jE>:

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int)) {
   d59cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
   d59d0:	4604      	mov	r4, r0
   d59d2:	2500      	movs	r5, #0
   d59d4:	4617      	mov	r7, r2
   d59d6:	4698      	mov	r8, r3
   d59d8:	460e      	mov	r6, r1
   d59da:	f002 f9b1 	bl	d7d40 <_ZN9TCPClientC1Ev>
   d59de:	61e5      	str	r5, [r4, #28]
   d59e0:	490a      	ldr	r1, [pc, #40]	; (d5a0c <_ZN4MQTTC1EPhtiPFvPcS0_jE+0x40>)
   d59e2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d59e6:	f001 feb9 	bl	d775c <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(NULL, ip, port, keepalive, callback, MQTT_MAX_PACKET_SIZE);
   d59ea:	23ff      	movs	r3, #255	; 0xff
   d59ec:	9302      	str	r3, [sp, #8]
   d59ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d59f0:	9301      	str	r3, [sp, #4]
   d59f2:	4620      	mov	r0, r4

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int)) {
   d59f4:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(NULL, ip, port, keepalive, callback, MQTT_MAX_PACKET_SIZE);
   d59f6:	f8cd 8000 	str.w	r8, [sp]
   d59fa:	463b      	mov	r3, r7
   d59fc:	4632      	mov	r2, r6
   d59fe:	4629      	mov	r1, r5
   d5a00:	f7ff ffc1 	bl	d5986 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
   d5a04:	4620      	mov	r0, r4
   d5a06:	b004      	add	sp, #16
   d5a08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5a0c:	000d998f 	.word	0x000d998f

000d5a10 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
   d5a10:	b510      	push	{r4, lr}
   d5a12:	4604      	mov	r4, r0
    while(!_client.available()) {}
   d5a14:	4620      	mov	r0, r4
   d5a16:	f002 f8f7 	bl	d7c08 <_ZN9TCPClient9availableEv>
   d5a1a:	2800      	cmp	r0, #0
   d5a1c:	d0fa      	beq.n	d5a14 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
   d5a1e:	4620      	mov	r0, r4
   d5a20:	f002 f813 	bl	d7a4a <_ZN9TCPClient4readEv>
}
   d5a24:	b2c0      	uxtb	r0, r0
   d5a26:	bd10      	pop	{r4, pc}

000d5a28 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d5a28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d5a2c:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5a2e:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
   d5a30:	4688      	mov	r8, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5a32:	f7ff ffed 	bl	d5a10 <_ZN4MQTT8readByteEv>
   d5a36:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
   d5a38:	69eb      	ldr	r3, [r5, #28]
   d5a3a:	f893 a000 	ldrb.w	sl, [r3]
    uint32_t multiplier = 1;
   d5a3e:	f04f 0901 	mov.w	r9, #1
   d5a42:	f00a 0af0 	and.w	sl, sl, #240	; 0xf0
    uint16_t length = 0;
   d5a46:	2700      	movs	r7, #0
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
   d5a48:	464e      	mov	r6, r9
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
   d5a4a:	4628      	mov	r0, r5
   d5a4c:	f7ff ffe0 	bl	d5a10 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
   d5a50:	69eb      	ldr	r3, [r5, #28]
   d5a52:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
   d5a54:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   d5a58:	fb13 f309 	smulbb	r3, r3, r9
   d5a5c:	441f      	add	r7, r3
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d5a5e:	1c74      	adds	r4, r6, #1
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
   d5a60:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d5a62:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
   d5a64:	b2bf      	uxth	r7, r7
        multiplier *= 128;
   d5a66:	ea4f 19c9 	mov.w	r9, r9, lsl #7
    } while ((digit & 128) != 0);
   d5a6a:	d501      	bpl.n	d5a70 <_ZN4MQTT10readPacketEPh+0x48>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
   d5a6c:	4626      	mov	r6, r4
   d5a6e:	e7ec      	b.n	d5a4a <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d5a70:	1e63      	subs	r3, r4, #1

    if (isPublish) {
   d5a72:	f1ba 0f30 	cmp.w	sl, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
   d5a76:	f888 3000 	strb.w	r3, [r8]

    if (isPublish) {
   d5a7a:	d113      	bne.n	d5aa4 <_ZN4MQTT10readPacketEPh+0x7c>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
   d5a7c:	4628      	mov	r0, r5
   d5a7e:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d5a82:	f7ff ffc5 	bl	d5a10 <_ZN4MQTT8readByteEv>
   d5a86:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
   d5a8a:	4628      	mov	r0, r5
   d5a8c:	1cf4      	adds	r4, r6, #3
   d5a8e:	f8d5 801c 	ldr.w	r8, [r5, #28]
   d5a92:	3602      	adds	r6, #2
   d5a94:	f7ff ffbc 	bl	d5a10 <_ZN4MQTT8readByteEv>
   d5a98:	b2b6      	uxth	r6, r6
   d5a9a:	b2a4      	uxth	r4, r4
   d5a9c:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
   d5aa0:	2302      	movs	r3, #2
   d5aa2:	e000      	b.n	d5aa6 <_ZN4MQTT10readPacketEPh+0x7e>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
   d5aa4:	2300      	movs	r3, #0
   d5aa6:	1b1b      	subs	r3, r3, r4
   d5aa8:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d5aaa:	19a3      	adds	r3, r4, r6
   d5aac:	b29b      	uxth	r3, r3
   d5aae:	429f      	cmp	r7, r3
   d5ab0:	d90b      	bls.n	d5aca <_ZN4MQTT10readPacketEPh+0xa2>
        digit = readByte();
   d5ab2:	4628      	mov	r0, r5
   d5ab4:	f7ff ffac 	bl	d5a10 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
   d5ab8:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
   d5abc:	42a3      	cmp	r3, r4
            buffer[len] = digit;
   d5abe:	bf84      	itt	hi
   d5ac0:	69eb      	ldrhi	r3, [r5, #28]
   d5ac2:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
   d5ac4:	3401      	adds	r4, #1
   d5ac6:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
   d5ac8:	e7ef      	b.n	d5aaa <_ZN4MQTT10readPacketEPh+0x82>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
   d5aca:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
   d5ace:	42a0      	cmp	r0, r4
   d5ad0:	bf2c      	ite	cs
   d5ad2:	4620      	movcs	r0, r4
   d5ad4:	2000      	movcc	r0, #0
   d5ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d5ada <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
   d5ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d5adc:	4607      	mov	r7, r0
   d5ade:	468e      	mov	lr, r1
   d5ae0:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
   d5ae2:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
   d5ae4:	2400      	movs	r4, #0
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5ae6:	a902      	add	r1, sp, #8
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
   d5ae8:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5aec:	4421      	add	r1, r4
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
   d5aee:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
   d5af0:	bf18      	it	ne
   d5af2:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
   d5af6:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
   d5af8:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
   d5afc:	b2e4      	uxtb	r4, r4
    } while(len > 0);
   d5afe:	2d00      	cmp	r5, #0
   d5b00:	d1f1      	bne.n	d5ae6 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
   d5b02:	f1c4 0304 	rsb	r3, r4, #4
   d5b06:	18d1      	adds	r1, r2, r3
   d5b08:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
   d5b0c:	42a5      	cmp	r5, r4
   d5b0e:	da06      	bge.n	d5b1e <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
   d5b10:	1b2b      	subs	r3, r5, r4
   d5b12:	a801      	add	r0, sp, #4
   d5b14:	4413      	add	r3, r2
   d5b16:	5c28      	ldrb	r0, [r5, r0]
   d5b18:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
   d5b1a:	3501      	adds	r5, #1
   d5b1c:	e7f6      	b.n	d5b0c <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
   d5b1e:	1c72      	adds	r2, r6, #1
   d5b20:	4422      	add	r2, r4
   d5b22:	4638      	mov	r0, r7
   d5b24:	f001 fe6f 	bl	d7806 <_ZN9TCPClient5writeEPKhj>
   d5b28:	4605      	mov	r5, r0
   d5b2a:	f000 fb5f 	bl	d61ec <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
   d5b2e:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
   d5b30:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
   d5b32:	4434      	add	r4, r6
   d5b34:	b2a8      	uxth	r0, r5
}
   d5b36:	1a23      	subs	r3, r4, r0
   d5b38:	4258      	negs	r0, r3
   d5b3a:	4158      	adcs	r0, r3
   d5b3c:	b003      	add	sp, #12
   d5b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b40 <_ZN4MQTT11writeStringEPKcPht>:
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5b40:	3302      	adds	r3, #2
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
   d5b42:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
   d5b44:	b29b      	uxth	r3, r3
   d5b46:	460d      	mov	r5, r1
   d5b48:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
   d5b4a:	f815 6b01 	ldrb.w	r6, [r5], #1
   d5b4e:	b2a4      	uxth	r4, r4
   d5b50:	b13e      	cbz	r6, d5b62 <_ZN4MQTT11writeStringEPKcPht+0x22>
   d5b52:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
   d5b56:	429f      	cmp	r7, r3
   d5b58:	d903      	bls.n	d5b62 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
   d5b5a:	1c5c      	adds	r4, r3, #1
   d5b5c:	54d6      	strb	r6, [r2, r3]
   d5b5e:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
   d5b60:	e7f2      	b.n	d5b48 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
   d5b62:	1b19      	subs	r1, r3, r4
   d5b64:	440a      	add	r2, r1
   d5b66:	1221      	asrs	r1, r4, #8
   d5b68:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
   d5b6c:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
   d5b70:	4618      	mov	r0, r3
   d5b72:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d5b74 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
   d5b74:	b538      	push	{r3, r4, r5, lr}
   d5b76:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
   d5b78:	f001 fe5b 	bl	d7832 <_ZN9TCPClient9connectedEv>
   d5b7c:	2800      	cmp	r0, #0
   d5b7e:	bf14      	ite	ne
   d5b80:	2401      	movne	r4, #1
   d5b82:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
   d5b84:	d102      	bne.n	d5b8c <_ZN4MQTT11isConnectedEv+0x18>
   d5b86:	4628      	mov	r0, r5
   d5b88:	f002 f827 	bl	d7bda <_ZN9TCPClient4stopEv>
    return rc;
}
   d5b8c:	4620      	mov	r0, r4
   d5b8e:	bd38      	pop	{r3, r4, r5, pc}

000d5b90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
   d5b90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5b94:	b087      	sub	sp, #28
   d5b96:	4604      	mov	r4, r0
   d5b98:	4689      	mov	r9, r1
   d5b9a:	4617      	mov	r7, r2
   d5b9c:	461e      	mov	r6, r3
   d5b9e:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    if (!isConnected()) {
   d5ba2:	f7ff ffe7 	bl	d5b74 <_ZN4MQTT11isConnectedEv>
   d5ba6:	4605      	mov	r5, r0
   d5ba8:	2800      	cmp	r0, #0
   d5baa:	f040 80bd 	bne.w	d5d28 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
   d5bae:	6ca1      	ldr	r1, [r4, #72]	; 0x48
   d5bb0:	b939      	cbnz	r1, d5bc2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
   d5bb2:	4603      	mov	r3, r0
   d5bb4:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d5bb8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
   d5bba:	4620      	mov	r0, r4
   d5bbc:	f001 fe66 	bl	d788c <_ZN9TCPClient7connectEPKctm>
   d5bc0:	e009      	b.n	d5bd6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
   d5bc2:	4668      	mov	r0, sp
   d5bc4:	f001 f95c 	bl	d6e80 <_ZN9IPAddressC1EPKh>
   d5bc8:	462b      	mov	r3, r5
   d5bca:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
   d5bce:	4669      	mov	r1, sp
   d5bd0:	4620      	mov	r0, r4
   d5bd2:	f001 ff85 	bl	d7ae0 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
   d5bd6:	2800      	cmp	r0, #0
   d5bd8:	f000 80a2 	beq.w	d5d20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
   d5bdc:	2301      	movs	r3, #1
   d5bde:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
   d5be0:	f89d 304c 	ldrb.w	r3, [sp, #76]	; 0x4c
   d5be4:	2b04      	cmp	r3, #4
   d5be6:	d115      	bne.n	d5c14 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5be8:	4b52      	ldr	r3, [pc, #328]	; (d5d34 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
   d5bea:	6818      	ldr	r0, [r3, #0]
   d5bec:	889a      	ldrh	r2, [r3, #4]
   d5bee:	f8ad 2004 	strh.w	r2, [sp, #4]
   d5bf2:	9000      	str	r0, [sp, #0]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5bf4:	69e2      	ldr	r2, [r4, #28]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5bf6:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5bf8:	9800      	ldr	r0, [sp, #0]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
   d5bfa:	f88d 3006 	strb.w	r3, [sp, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
   d5bfe:	1d53      	adds	r3, r2, #5
   d5c00:	f8c2 0005 	str.w	r0, [r2, #5]
   d5c04:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   d5c08:	f89d 2006 	ldrb.w	r2, [sp, #6]
   d5c0c:	719a      	strb	r2, [r3, #6]
   d5c0e:	8099      	strh	r1, [r3, #4]
                length+=sizeof(MQTT_HEADER_V311);
   d5c10:	230c      	movs	r3, #12
   d5c12:	e012      	b.n	d5c3a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d5c14:	4b48      	ldr	r3, [pc, #288]	; (d5d38 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5c16:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
   d5c1a:	6818      	ldr	r0, [r3, #0]
   d5c1c:	6859      	ldr	r1, [r3, #4]
   d5c1e:	7a1b      	ldrb	r3, [r3, #8]
   d5c20:	466a      	mov	r2, sp
   d5c22:	c203      	stmia	r2!, {r0, r1}
   d5c24:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
   d5c26:	466b      	mov	r3, sp
   d5c28:	cb03      	ldmia	r3!, {r0, r1}
   d5c2a:	f8cc 0005 	str.w	r0, [ip, #5]
   d5c2e:	f8cc 1009 	str.w	r1, [ip, #9]
   d5c32:	7813      	ldrb	r3, [r2, #0]
   d5c34:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
   d5c38:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
   d5c3a:	f1b8 0f00 	cmp.w	r8, #0
   d5c3e:	d00a      	beq.n	d5c56 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
   d5c40:	f89d 2040 	ldrb.w	r2, [sp, #64]	; 0x40
   d5c44:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
   d5c48:	0152      	lsls	r2, r2, #5
   d5c4a:	f042 0206 	orr.w	r2, r2, #6
   d5c4e:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
   d5c52:	b2d2      	uxtb	r2, r2
   d5c54:	e000      	b.n	d5c58 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
   d5c56:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
   d5c58:	f89d 1048 	ldrb.w	r1, [sp, #72]	; 0x48
   d5c5c:	b909      	cbnz	r1, d5c62 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
   d5c5e:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
   d5c62:	b12f      	cbz	r7, d5c70 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
   d5c64:	b916      	cbnz	r6, d5c6c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
   d5c66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   d5c6a:	e001      	b.n	d5c70 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
   d5c6c:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
   d5c70:	69e1      	ldr	r1, [r4, #28]
   d5c72:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
   d5c74:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5c76:	69e1      	ldr	r1, [r4, #28]
   d5c78:	1c58      	adds	r0, r3, #1
   d5c7a:	1212      	asrs	r2, r2, #8
   d5c7c:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
   d5c7e:	1c9a      	adds	r2, r3, #2
   d5c80:	69e1      	ldr	r1, [r4, #28]
   d5c82:	6d20      	ldr	r0, [r4, #80]	; 0x50
   d5c84:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
   d5c86:	3303      	adds	r3, #3
   d5c88:	69e2      	ldr	r2, [r4, #28]
   d5c8a:	4649      	mov	r1, r9
   d5c8c:	4620      	mov	r0, r4
   d5c8e:	f7ff ff57 	bl	d5b40 <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
   d5c92:	f1b8 0f00 	cmp.w	r8, #0
   d5c96:	d00b      	beq.n	d5cb0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
   d5c98:	4603      	mov	r3, r0
   d5c9a:	69e2      	ldr	r2, [r4, #28]
   d5c9c:	4641      	mov	r1, r8
   d5c9e:	4620      	mov	r0, r4
   d5ca0:	f7ff ff4e 	bl	d5b40 <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
   d5ca4:	69e2      	ldr	r2, [r4, #28]
   d5ca6:	9911      	ldr	r1, [sp, #68]	; 0x44
   d5ca8:	4603      	mov	r3, r0
   d5caa:	4620      	mov	r0, r4
   d5cac:	f7ff ff48 	bl	d5b40 <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
   d5cb0:	b167      	cbz	r7, d5ccc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
   d5cb2:	4603      	mov	r3, r0
   d5cb4:	69e2      	ldr	r2, [r4, #28]
   d5cb6:	4639      	mov	r1, r7
   d5cb8:	4620      	mov	r0, r4
   d5cba:	f7ff ff41 	bl	d5b40 <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
   d5cbe:	b12e      	cbz	r6, d5ccc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
   d5cc0:	4603      	mov	r3, r0
   d5cc2:	69e2      	ldr	r2, [r4, #28]
   d5cc4:	4631      	mov	r1, r6
   d5cc6:	4620      	mov	r0, r4
   d5cc8:	f7ff ff3a 	bl	d5b40 <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
   d5ccc:	1f43      	subs	r3, r0, #5
   d5cce:	b29b      	uxth	r3, r3
   d5cd0:	69e2      	ldr	r2, [r4, #28]
   d5cd2:	2110      	movs	r1, #16
   d5cd4:	4620      	mov	r0, r4
   d5cd6:	f7ff ff00 	bl	d5ada <_ZN4MQTT5writeEhPht>
   d5cda:	f000 fa87 	bl	d61ec <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5cde:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
   d5ce2:	6260      	str	r0, [r4, #36]	; 0x24
   d5ce4:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
   d5ce6:	4620      	mov	r0, r4
   d5ce8:	f001 ff8e 	bl	d7c08 <_ZN9TCPClient9availableEv>
   d5cec:	b940      	cbnz	r0, d5d00 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
   d5cee:	f000 fa7d 	bl	d61ec <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
   d5cf2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   d5cf4:	1ac0      	subs	r0, r0, r3
   d5cf6:	6d23      	ldr	r3, [r4, #80]	; 0x50
   d5cf8:	4373      	muls	r3, r6
   d5cfa:	4298      	cmp	r0, r3
   d5cfc:	d9f3      	bls.n	d5ce6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
   d5cfe:	e00f      	b.n	d5d20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d5d00:	4669      	mov	r1, sp
   d5d02:	4620      	mov	r0, r4
   d5d04:	f7ff fe90 	bl	d5a28 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
   d5d08:	2804      	cmp	r0, #4
   d5d0a:	d109      	bne.n	d5d20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
   d5d0c:	69e3      	ldr	r3, [r4, #28]
   d5d0e:	78de      	ldrb	r6, [r3, #3]
   d5d10:	b936      	cbnz	r6, d5d20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
   d5d12:	f000 fa6b 	bl	d61ec <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
   d5d16:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
   d5d18:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
   d5d1a:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
   d5d1e:	e004      	b.n	d5d2a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
   d5d20:	4620      	mov	r0, r4
   d5d22:	f001 ff5a 	bl	d7bda <_ZN9TCPClient4stopEv>
   d5d26:	e000      	b.n	d5d2a <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
   d5d28:	2500      	movs	r5, #0
}
   d5d2a:	4628      	mov	r0, r5
   d5d2c:	b007      	add	sp, #28
   d5d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5d32:	bf00      	nop
   d5d34:	000d99f2 	.word	0x000d99f2
   d5d38:	000d99f9 	.word	0x000d99f9

000d5d3c <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
   d5d3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
   d5d3e:	2304      	movs	r3, #4
   d5d40:	9305      	str	r3, [sp, #20]
   d5d42:	2301      	movs	r3, #1
   d5d44:	9304      	str	r3, [sp, #16]
   d5d46:	2300      	movs	r3, #0
   d5d48:	9303      	str	r3, [sp, #12]
   d5d4a:	9302      	str	r3, [sp, #8]
   d5d4c:	9301      	str	r3, [sp, #4]
   d5d4e:	9300      	str	r3, [sp, #0]
   d5d50:	461a      	mov	r2, r3
   d5d52:	f7ff ff1d 	bl	d5b90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
   d5d56:	b007      	add	sp, #28
   d5d58:	f85d fb04 	ldr.w	pc, [sp], #4

000d5d5c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5d5c:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5d60:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   d5d62:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
   d5d66:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d5d6a:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
   d5d6e:	4604      	mov	r4, r0
   d5d70:	468b      	mov	fp, r1
   d5d72:	4691      	mov	r9, r2
   d5d74:	469a      	mov	sl, r3
    if (isConnected()) {
   d5d76:	f7ff fefd 	bl	d5b74 <_ZN4MQTT11isConnectedEv>
   d5d7a:	2800      	cmp	r0, #0
   d5d7c:	d04c      	beq.n	d5e18 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xbc>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
   d5d7e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
   d5d82:	69e0      	ldr	r0, [r4, #28]
   d5d84:	2100      	movs	r1, #0
   d5d86:	f003 fd1b 	bl	d97c0 <memset>

        length = writeString(topic, buffer, length);
   d5d8a:	2305      	movs	r3, #5
   d5d8c:	69e2      	ldr	r2, [r4, #28]
   d5d8e:	4659      	mov	r1, fp
   d5d90:	4620      	mov	r0, r4
   d5d92:	f7ff fed5 	bl	d5b40 <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
   d5d96:	1e6b      	subs	r3, r5, #1
   d5d98:	2b01      	cmp	r3, #1
   d5d9a:	d812      	bhi.n	d5dc2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
   d5d9c:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5d9e:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
   d5da0:	3301      	adds	r3, #1
   d5da2:	b29b      	uxth	r3, r3
   d5da4:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
   d5da6:	121b      	asrs	r3, r3, #8
   d5da8:	5413      	strb	r3, [r2, r0]
   d5daa:	1c41      	adds	r1, r0, #1
   d5dac:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
   d5dae:	69e3      	ldr	r3, [r4, #28]
   d5db0:	8c22      	ldrh	r2, [r4, #32]
   d5db2:	545a      	strb	r2, [r3, r1]
   d5db4:	3002      	adds	r0, #2
   d5db6:	b280      	uxth	r0, r0
            if (messageid != NULL)
   d5db8:	b11e      	cbz	r6, d5dc2 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
   d5dba:	8c23      	ldrh	r3, [r4, #32]
   d5dbc:	1c5a      	adds	r2, r3, #1
   d5dbe:	8422      	strh	r2, [r4, #32]
   d5dc0:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
   d5dc2:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
   d5dc4:	b291      	uxth	r1, r2
   d5dc6:	1883      	adds	r3, r0, r2
   d5dc8:	458a      	cmp	sl, r1
   d5dca:	b29b      	uxth	r3, r3
   d5dcc:	d90a      	bls.n	d5de4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
   d5dce:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
   d5dd2:	429e      	cmp	r6, r3
   d5dd4:	f102 0201 	add.w	r2, r2, #1
   d5dd8:	d904      	bls.n	d5de4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x88>
            buffer[length++] = payload[i];
   d5dda:	f819 6001 	ldrb.w	r6, [r9, r1]
   d5dde:	69e1      	ldr	r1, [r4, #28]
   d5de0:	54ce      	strb	r6, [r1, r3]
   d5de2:	e7ef      	b.n	d5dc4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
   d5de4:	f1b8 0f00 	cmp.w	r8, #0
   d5de8:	bf0c      	ite	eq
   d5dea:	2130      	moveq	r1, #48	; 0x30
   d5dec:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
   d5dee:	b10f      	cbz	r7, d5df4 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x98>
            header |= DUP_FLAG_ON_MASK;
   d5df0:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
   d5df4:	2d02      	cmp	r5, #2
   d5df6:	d102      	bne.n	d5dfe <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa2>
            header |= MQTTQOS2_HEADER_MASK;
   d5df8:	f041 0104 	orr.w	r1, r1, #4
   d5dfc:	e003      	b.n	d5e06 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xaa>
        else if (qos == QOS1)
   d5dfe:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
   d5e00:	bf08      	it	eq
   d5e02:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d5e06:	3b05      	subs	r3, #5
   d5e08:	69e2      	ldr	r2, [r4, #28]
   d5e0a:	b29b      	uxth	r3, r3
   d5e0c:	4620      	mov	r0, r4
    }
    return false;
}
   d5e0e:	b001      	add	sp, #4
   d5e10:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
   d5e14:	f7ff be61 	b.w	d5ada <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d5e18:	b001      	add	sp, #4
   d5e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d5e1e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
   d5e1e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
   d5e20:	9c08      	ldr	r4, [sp, #32]
   d5e22:	9403      	str	r4, [sp, #12]
   d5e24:	2400      	movs	r4, #0
   d5e26:	9402      	str	r4, [sp, #8]
   d5e28:	f89d 401c 	ldrb.w	r4, [sp, #28]
   d5e2c:	9401      	str	r4, [sp, #4]
   d5e2e:	f89d 4018 	ldrb.w	r4, [sp, #24]
   d5e32:	9400      	str	r4, [sp, #0]
   d5e34:	f7ff ff92 	bl	d5d5c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
   d5e38:	b004      	add	sp, #16
   d5e3a:	bd10      	pop	{r4, pc}

000d5e3c <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d5e3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d5e3e:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d5e40:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
   d5e42:	460e      	mov	r6, r1
   d5e44:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
   d5e46:	f003 fd28 	bl	d989a <strlen>
   d5e4a:	2300      	movs	r3, #0
   d5e4c:	9302      	str	r3, [sp, #8]
   d5e4e:	9301      	str	r3, [sp, #4]
   d5e50:	9300      	str	r3, [sp, #0]
   d5e52:	4622      	mov	r2, r4
   d5e54:	4603      	mov	r3, r0
   d5e56:	4631      	mov	r1, r6
   d5e58:	4628      	mov	r0, r5
   d5e5a:	f7ff ffe0 	bl	d5e1e <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
   d5e5e:	b004      	add	sp, #16
   d5e60:	bd70      	pop	{r4, r5, r6, pc}

000d5e62 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
   d5e62:	b538      	push	{r3, r4, r5, lr}
   d5e64:	4604      	mov	r4, r0
   d5e66:	460d      	mov	r5, r1
    if (isConnected()) {
   d5e68:	f7ff fe84 	bl	d5b74 <_ZN4MQTT11isConnectedEv>
   d5e6c:	b190      	cbz	r0, d5e94 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
   d5e6e:	69e3      	ldr	r3, [r4, #28]
   d5e70:	2262      	movs	r2, #98	; 0x62
   d5e72:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5e74:	69e3      	ldr	r3, [r4, #28]
   d5e76:	2202      	movs	r2, #2
   d5e78:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d5e7a:	69e3      	ldr	r3, [r4, #28]
   d5e7c:	122a      	asrs	r2, r5, #8
   d5e7e:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5e80:	69e3      	ldr	r3, [r4, #28]
   d5e82:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d5e84:	2204      	movs	r2, #4
   d5e86:	69e1      	ldr	r1, [r4, #28]
   d5e88:	4620      	mov	r0, r4
   d5e8a:	f001 fcbc 	bl	d7806 <_ZN9TCPClient5writeEPKhj>
   d5e8e:	3000      	adds	r0, #0
   d5e90:	bf18      	it	ne
   d5e92:	2001      	movne	r0, #1
    }
    return false;
}
   d5e94:	bd38      	pop	{r3, r4, r5, pc}

000d5e96 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
   d5e96:	b538      	push	{r3, r4, r5, lr}
   d5e98:	4604      	mov	r4, r0
   d5e9a:	460d      	mov	r5, r1
    if (isConnected()) {
   d5e9c:	f7ff fe6a 	bl	d5b74 <_ZN4MQTT11isConnectedEv>
   d5ea0:	b190      	cbz	r0, d5ec8 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
   d5ea2:	69e3      	ldr	r3, [r4, #28]
   d5ea4:	2272      	movs	r2, #114	; 0x72
   d5ea6:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
   d5ea8:	69e3      	ldr	r3, [r4, #28]
   d5eaa:	2202      	movs	r2, #2
   d5eac:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
   d5eae:	69e3      	ldr	r3, [r4, #28]
   d5eb0:	122a      	asrs	r2, r5, #8
   d5eb2:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
   d5eb4:	69e3      	ldr	r3, [r4, #28]
   d5eb6:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
   d5eb8:	2204      	movs	r2, #4
   d5eba:	69e1      	ldr	r1, [r4, #28]
   d5ebc:	4620      	mov	r0, r4
   d5ebe:	f001 fca2 	bl	d7806 <_ZN9TCPClient5writeEPKhj>
   d5ec2:	3000      	adds	r0, #0
   d5ec4:	bf18      	it	ne
   d5ec6:	2001      	movne	r0, #1
    }
    return false;
}
   d5ec8:	bd38      	pop	{r3, r4, r5, pc}

000d5eca <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
   d5eca:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d5ece:	b083      	sub	sp, #12
   d5ed0:	af00      	add	r7, sp, #0
   d5ed2:	4604      	mov	r4, r0
    if (isConnected()) {
   d5ed4:	f7ff fe4e 	bl	d5b74 <_ZN4MQTT11isConnectedEv>
   d5ed8:	4681      	mov	r9, r0
   d5eda:	2800      	cmp	r0, #0
   d5edc:	f000 80f6 	beq.w	d60cc <_ZN4MQTT4loopEv+0x202>
   d5ee0:	f000 f984 	bl	d61ec <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
   d5ee4:	6d22      	ldr	r2, [r4, #80]	; 0x50
   d5ee6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5eea:	4353      	muls	r3, r2
   d5eec:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   d5eee:	1a82      	subs	r2, r0, r2
   d5ef0:	429a      	cmp	r2, r3
   d5ef2:	4605      	mov	r5, r0
   d5ef4:	d803      	bhi.n	d5efe <_ZN4MQTT4loopEv+0x34>
   d5ef6:	6a62      	ldr	r2, [r4, #36]	; 0x24
   d5ef8:	1a82      	subs	r2, r0, r2
   d5efa:	4293      	cmp	r3, r2
   d5efc:	d217      	bcs.n	d5f2e <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
   d5efe:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
   d5f02:	b12b      	cbz	r3, d5f10 <_ZN4MQTT4loopEv+0x46>
                _client.stop();
   d5f04:	4620      	mov	r0, r4
   d5f06:	f001 fe68 	bl	d7bda <_ZN9TCPClient4stopEv>
                return false;
   d5f0a:	f04f 0900 	mov.w	r9, #0
   d5f0e:	e0dd      	b.n	d60cc <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
   d5f10:	69e2      	ldr	r2, [r4, #28]
   d5f12:	21c0      	movs	r1, #192	; 0xc0
   d5f14:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
   d5f16:	69e2      	ldr	r2, [r4, #28]
   d5f18:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
   d5f1a:	69e1      	ldr	r1, [r4, #28]
   d5f1c:	2202      	movs	r2, #2
   d5f1e:	4620      	mov	r0, r4
   d5f20:	f001 fc71 	bl	d7806 <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
   d5f24:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
   d5f26:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
   d5f28:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
   d5f2a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
   d5f2e:	4620      	mov	r0, r4
   d5f30:	f001 fe6a 	bl	d7c08 <_ZN9TCPClient9availableEv>
   d5f34:	2800      	cmp	r0, #0
   d5f36:	f000 80c9 	beq.w	d60cc <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
   d5f3a:	1df9      	adds	r1, r7, #7
   d5f3c:	4620      	mov	r0, r4
   d5f3e:	f7ff fd73 	bl	d5a28 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
   d5f42:	4602      	mov	r2, r0
   d5f44:	2800      	cmp	r0, #0
   d5f46:	f000 80c1 	beq.w	d60cc <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
   d5f4a:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
   d5f4c:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
   d5f4e:	7818      	ldrb	r0, [r3, #0]
   d5f50:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
   d5f54:	2930      	cmp	r1, #48	; 0x30
   d5f56:	d17d      	bne.n	d6054 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
   d5f58:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
   d5f5c:	f1bb 0f00 	cmp.w	fp, #0
   d5f60:	f000 80b4 	beq.w	d60cc <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d5f64:	f897 c007 	ldrb.w	ip, [r7, #7]
   d5f68:	eb03 000c 	add.w	r0, r3, ip
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
   d5f6c:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
   d5f6e:	7881      	ldrb	r1, [r0, #2]
   d5f70:	f890 e001 	ldrb.w	lr, [r0, #1]
   d5f74:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
   d5f78:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
   d5f7c:	f10e 0108 	add.w	r1, lr, #8
   d5f80:	f021 0107 	bic.w	r1, r1, #7
   d5f84:	ebad 0d01 	sub.w	sp, sp, r1
   d5f88:	4668      	mov	r0, sp
   d5f8a:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
   d5f8c:	b28e      	uxth	r6, r1
   d5f8e:	45b6      	cmp	lr, r6
   d5f90:	d906      	bls.n	d5fa0 <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
   d5f92:	eb0c 0601 	add.w	r6, ip, r1
   d5f96:	441e      	add	r6, r3
   d5f98:	78f6      	ldrb	r6, [r6, #3]
   d5f9a:	5446      	strb	r6, [r0, r1]
   d5f9c:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
   d5f9e:	e7f5      	b.n	d5f8c <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
   d5fa0:	2100      	movs	r1, #0
   d5fa2:	f800 100e 	strb.w	r1, [r0, lr]
   d5fa6:	781e      	ldrb	r6, [r3, #0]
   d5fa8:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
   d5fac:	2e02      	cmp	r6, #2
   d5fae:	f10c 0103 	add.w	r1, ip, #3
   d5fb2:	ebcc 0202 	rsb	r2, ip, r2
   d5fb6:	d11e      	bne.n	d5ff6 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5fb8:	4471      	add	r1, lr
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d5fba:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5fbe:	f813 8001 	ldrb.w	r8, [r3, r1]
   d5fc2:	4419      	add	r1, r3
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d5fc4:	3a05      	subs	r2, #5
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5fc6:	7849      	ldrb	r1, [r1, #1]
   d5fc8:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
   d5fcc:	f10c 0105 	add.w	r1, ip, #5
   d5fd0:	4471      	add	r1, lr
   d5fd2:	4419      	add	r1, r3
   d5fd4:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
   d5fd6:	69e3      	ldr	r3, [r4, #28]
   d5fd8:	2240      	movs	r2, #64	; 0x40
   d5fda:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
   d5fdc:	69e3      	ldr	r3, [r4, #28]
   d5fde:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
   d5fe0:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
   d5fe2:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
   d5fe6:	ea4f 2228 	mov.w	r2, r8, asr #8
   d5fea:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
   d5fec:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
   d5fee:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
   d5ff0:	f883 8003 	strb.w	r8, [r3, #3]
   d5ff4:	e020      	b.n	d6038 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
   d5ff6:	2e04      	cmp	r6, #4
   d5ff8:	d124      	bne.n	d6044 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d5ffa:	4471      	add	r1, lr
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d5ffc:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6000:	f813 8001 	ldrb.w	r8, [r3, r1]
   d6004:	4419      	add	r1, r3
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d6006:	3a05      	subs	r2, #5
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6008:	7849      	ldrb	r1, [r1, #1]
   d600a:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
   d600e:	f10c 0105 	add.w	r1, ip, #5
   d6012:	4471      	add	r1, lr
   d6014:	4419      	add	r1, r3
   d6016:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
   d6018:	69e3      	ldr	r3, [r4, #28]
   d601a:	2250      	movs	r2, #80	; 0x50
   d601c:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
   d601e:	69e3      	ldr	r3, [r4, #28]
   d6020:	2202      	movs	r2, #2
   d6022:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
   d6024:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
   d6026:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
   d602a:	ea4f 2228 	mov.w	r2, r8, asr #8
   d602e:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
   d6030:	69e3      	ldr	r3, [r4, #28]
              							_client.write(buffer, 4);
   d6032:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
   d6034:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
   d6038:	69e1      	ldr	r1, [r4, #28]
   d603a:	4620      	mov	r0, r4
   d603c:	f001 fbe3 	bl	d7806 <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
   d6040:	6265      	str	r5, [r4, #36]	; 0x24
   d6042:	e005      	b.n	d6050 <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
   d6044:	3a03      	subs	r2, #3
   d6046:	4471      	add	r1, lr
   d6048:	ebce 0202 	rsb	r2, lr, r2
   d604c:	4419      	add	r1, r3
   d604e:	47d8      	blx	fp
   d6050:	46d5      	mov	sp, sl
   d6052:	e03b      	b.n	d60cc <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
   d6054:	2950      	cmp	r1, #80	; 0x50
   d6056:	d108      	bne.n	d606a <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
   d6058:	7899      	ldrb	r1, [r3, #2]
   d605a:	78db      	ldrb	r3, [r3, #3]
   d605c:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d6060:	b289      	uxth	r1, r1
   d6062:	4620      	mov	r0, r4
   d6064:	f7ff fefd 	bl	d5e62 <_ZN4MQTT14publishReleaseEt>
   d6068:	e030      	b.n	d60cc <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
   d606a:	2940      	cmp	r1, #64	; 0x40
   d606c:	d00c      	beq.n	d6088 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
   d606e:	2960      	cmp	r1, #96	; 0x60
   d6070:	d108      	bne.n	d6084 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
   d6072:	7899      	ldrb	r1, [r3, #2]
   d6074:	78db      	ldrb	r3, [r3, #3]
   d6076:	eb03 2101 	add.w	r1, r3, r1, lsl #8
   d607a:	b289      	uxth	r1, r1
   d607c:	4620      	mov	r0, r4
   d607e:	f7ff ff0a 	bl	d5e96 <_ZN4MQTT15publishCompleteEt>
   d6082:	e023      	b.n	d60cc <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
   d6084:	2970      	cmp	r1, #112	; 0x70
   d6086:	d10d      	bne.n	d60a4 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
   d6088:	6b61      	ldr	r1, [r4, #52]	; 0x34
   d608a:	b1f9      	cbz	r1, d60cc <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
   d608c:	2a04      	cmp	r2, #4
   d608e:	d11d      	bne.n	d60cc <_ZN4MQTT4loopEv+0x202>
   d6090:	f010 0f06 	tst.w	r0, #6
   d6094:	d11a      	bne.n	d60cc <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
   d6096:	7898      	ldrb	r0, [r3, #2]
   d6098:	78db      	ldrb	r3, [r3, #3]
   d609a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
   d609e:	b280      	uxth	r0, r0
   d60a0:	4788      	blx	r1
   d60a2:	e013      	b.n	d60cc <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
   d60a4:	2990      	cmp	r1, #144	; 0x90
   d60a6:	d011      	beq.n	d60cc <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
   d60a8:	29c0      	cmp	r1, #192	; 0xc0
   d60aa:	d10a      	bne.n	d60c2 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
   d60ac:	22d0      	movs	r2, #208	; 0xd0
   d60ae:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
   d60b0:	69e3      	ldr	r3, [r4, #28]
   d60b2:	2200      	movs	r2, #0
   d60b4:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
   d60b6:	69e1      	ldr	r1, [r4, #28]
   d60b8:	2202      	movs	r2, #2
   d60ba:	4620      	mov	r0, r4
   d60bc:	f001 fba3 	bl	d7806 <_ZN9TCPClient5writeEPKhj>
   d60c0:	e004      	b.n	d60cc <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
   d60c2:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
   d60c4:	bf04      	itt	eq
   d60c6:	2300      	moveq	r3, #0
   d60c8:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
   d60cc:	4648      	mov	r0, r9
   d60ce:	370c      	adds	r7, #12
   d60d0:	46bd      	mov	sp, r7
   d60d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d60d6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
   d60d6:	b570      	push	{r4, r5, r6, lr}
   d60d8:	4604      	mov	r4, r0
   d60da:	460e      	mov	r6, r1
   d60dc:	4615      	mov	r5, r2

    if (isConnected()) {
   d60de:	f7ff fd49 	bl	d5b74 <_ZN4MQTT11isConnectedEv>
   d60e2:	b1e8      	cbz	r0, d6120 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
   d60e4:	8c23      	ldrh	r3, [r4, #32]
   d60e6:	3301      	adds	r3, #1
   d60e8:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
   d60ea:	b903      	cbnz	r3, d60ee <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
   d60ec:	2301      	movs	r3, #1
   d60ee:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
   d60f0:	8c23      	ldrh	r3, [r4, #32]
   d60f2:	69e2      	ldr	r2, [r4, #28]
   d60f4:	121b      	asrs	r3, r3, #8
   d60f6:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
   d60f8:	69e3      	ldr	r3, [r4, #28]
   d60fa:	8c22      	ldrh	r2, [r4, #32]
   d60fc:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
   d60fe:	69e2      	ldr	r2, [r4, #28]
   d6100:	4631      	mov	r1, r6
   d6102:	2307      	movs	r3, #7
   d6104:	4620      	mov	r0, r4
   d6106:	f7ff fd1b 	bl	d5b40 <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
   d610a:	69e3      	ldr	r3, [r4, #28]
   d610c:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d610e:	1f03      	subs	r3, r0, #4
   d6110:	69e2      	ldr	r2, [r4, #28]
   d6112:	4620      	mov	r0, r4
   d6114:	b29b      	uxth	r3, r3
   d6116:	2182      	movs	r1, #130	; 0x82
    }
    return false;
}
   d6118:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
   d611c:	f7ff bcdd 	b.w	d5ada <_ZN4MQTT5writeEhPht>
    }
    return false;
}
   d6120:	bd70      	pop	{r4, r5, r6, pc}

000d6122 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
   d6122:	2200      	movs	r2, #0
   d6124:	f7ff bfd7 	b.w	d60d6 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

000d6128 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
   d6128:	f000 b868 	b.w	d61fc <HAL_Pin_Map>

000d612c <os_thread_create>:

DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
   d612c:	b508      	push	{r3, lr}
   d612e:	4b02      	ldr	r3, [pc, #8]	; (d6138 <os_thread_create+0xc>)
   d6130:	681b      	ldr	r3, [r3, #0]
   d6132:	685b      	ldr	r3, [r3, #4]
   d6134:	9301      	str	r3, [sp, #4]
   d6136:	bd08      	pop	{r3, pc}
   d6138:	00030248 	.word	0x00030248

000d613c <os_thread_is_current>:
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d613c:	b508      	push	{r3, lr}
   d613e:	4b02      	ldr	r3, [pc, #8]	; (d6148 <os_thread_is_current+0xc>)
   d6140:	681b      	ldr	r3, [r3, #0]
   d6142:	689b      	ldr	r3, [r3, #8]
   d6144:	9301      	str	r3, [sp, #4]
   d6146:	bd08      	pop	{r3, pc}
   d6148:	00030248 	.word	0x00030248

000d614c <os_thread_yield>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
   d614c:	b508      	push	{r3, lr}
   d614e:	4b02      	ldr	r3, [pc, #8]	; (d6158 <os_thread_yield+0xc>)
   d6150:	681b      	ldr	r3, [r3, #0]
   d6152:	68db      	ldr	r3, [r3, #12]
   d6154:	9301      	str	r3, [sp, #4]
   d6156:	bd08      	pop	{r3, pc}
   d6158:	00030248 	.word	0x00030248

000d615c <os_thread_join>:
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d615c:	b508      	push	{r3, lr}
   d615e:	4b02      	ldr	r3, [pc, #8]	; (d6168 <os_thread_join+0xc>)
   d6160:	681b      	ldr	r3, [r3, #0]
   d6162:	691b      	ldr	r3, [r3, #16]
   d6164:	9301      	str	r3, [sp, #4]
   d6166:	bd08      	pop	{r3, pc}
   d6168:	00030248 	.word	0x00030248

000d616c <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d616c:	b508      	push	{r3, lr}
   d616e:	4b02      	ldr	r3, [pc, #8]	; (d6178 <os_thread_cleanup+0xc>)
   d6170:	681b      	ldr	r3, [r3, #0]
   d6172:	695b      	ldr	r3, [r3, #20]
   d6174:	9301      	str	r3, [sp, #4]
   d6176:	bd08      	pop	{r3, pc}
   d6178:	00030248 	.word	0x00030248

000d617c <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
   d617c:	b508      	push	{r3, lr}
   d617e:	4b02      	ldr	r3, [pc, #8]	; (d6188 <os_mutex_create+0xc>)
   d6180:	681b      	ldr	r3, [r3, #0]
   d6182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6184:	9301      	str	r3, [sp, #4]
   d6186:	bd08      	pop	{r3, pc}
   d6188:	00030248 	.word	0x00030248

000d618c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d618c:	b508      	push	{r3, lr}
   d618e:	4b02      	ldr	r3, [pc, #8]	; (d6198 <os_mutex_recursive_create+0xc>)
   d6190:	681b      	ldr	r3, [r3, #0]
   d6192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6194:	9301      	str	r3, [sp, #4]
   d6196:	bd08      	pop	{r3, pc}
   d6198:	00030248 	.word	0x00030248

000d619c <os_mutex_recursive_lock>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
DYNALIB_FN(19, hal_concurrent, os_mutex_recursive_lock, int(os_mutex_recursive_t))
   d619c:	b508      	push	{r3, lr}
   d619e:	4b02      	ldr	r3, [pc, #8]	; (d61a8 <os_mutex_recursive_lock+0xc>)
   d61a0:	681b      	ldr	r3, [r3, #0]
   d61a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d61a4:	9301      	str	r3, [sp, #4]
   d61a6:	bd08      	pop	{r3, pc}
   d61a8:	00030248 	.word	0x00030248

000d61ac <os_mutex_recursive_unlock>:
DYNALIB_FN(20, hal_concurrent, os_mutex_recursive_trylock, int(os_mutex_recursive_t))
DYNALIB_FN(21, hal_concurrent, os_mutex_recursive_unlock, int(os_mutex_recursive_t))
   d61ac:	b508      	push	{r3, lr}
   d61ae:	4b02      	ldr	r3, [pc, #8]	; (d61b8 <os_mutex_recursive_unlock+0xc>)
   d61b0:	681b      	ldr	r3, [r3, #0]
   d61b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d61b4:	9301      	str	r3, [sp, #4]
   d61b6:	bd08      	pop	{r3, pc}
   d61b8:	00030248 	.word	0x00030248

000d61bc <os_thread_exit>:

DYNALIB_FN(23, hal_concurrent, os_queue_create, int(os_queue_t*, size_t, size_t, void*))
DYNALIB_FN(24, hal_concurrent, os_queue_destroy, int(os_queue_t, void*))
DYNALIB_FN(25, hal_concurrent, os_queue_put, int(os_queue_t, const void* item, system_tick_t, void*))
DYNALIB_FN(26, hal_concurrent, os_queue_take, int(os_queue_t, void* item, system_tick_t, void*))
DYNALIB_FN(27, hal_concurrent, os_thread_exit, os_result_t(os_thread_t))
   d61bc:	b508      	push	{r3, lr}
   d61be:	4b02      	ldr	r3, [pc, #8]	; (d61c8 <os_thread_exit+0xc>)
   d61c0:	681b      	ldr	r3, [r3, #0]
   d61c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
   d61c4:	9301      	str	r3, [sp, #4]
   d61c6:	bd08      	pop	{r3, pc}
   d61c8:	00030248 	.word	0x00030248

000d61cc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d61cc:	b508      	push	{r3, lr}
   d61ce:	4b02      	ldr	r3, [pc, #8]	; (d61d8 <HAL_RNG_GetRandomNumber+0xc>)
   d61d0:	681b      	ldr	r3, [r3, #0]
   d61d2:	685b      	ldr	r3, [r3, #4]
   d61d4:	9301      	str	r3, [sp, #4]
   d61d6:	bd08      	pop	{r3, pc}
   d61d8:	00030218 	.word	0x00030218

000d61dc <HAL_Delay_Milliseconds>:
#define BASE_IDX 2 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
   d61dc:	b508      	push	{r3, lr}
   d61de:	4b02      	ldr	r3, [pc, #8]	; (d61e8 <HAL_Delay_Milliseconds+0xc>)
   d61e0:	681b      	ldr	r3, [r3, #0]
   d61e2:	689b      	ldr	r3, [r3, #8]
   d61e4:	9301      	str	r3, [sp, #4]
   d61e6:	bd08      	pop	{r3, pc}
   d61e8:	00030218 	.word	0x00030218

000d61ec <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d61ec:	b508      	push	{r3, lr}
   d61ee:	4b02      	ldr	r3, [pc, #8]	; (d61f8 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d61f0:	681b      	ldr	r3, [r3, #0]
   d61f2:	695b      	ldr	r3, [r3, #20]
   d61f4:	9301      	str	r3, [sp, #4]
   d61f6:	bd08      	pop	{r3, pc}
   d61f8:	00030218 	.word	0x00030218

000d61fc <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
   d61fc:	b508      	push	{r3, lr}
   d61fe:	4b02      	ldr	r3, [pc, #8]	; (d6208 <HAL_Pin_Map+0xc>)
   d6200:	681b      	ldr	r3, [r3, #0]
   d6202:	681b      	ldr	r3, [r3, #0]
   d6204:	9301      	str	r3, [sp, #4]
   d6206:	bd08      	pop	{r3, pc}
   d6208:	0003022c 	.word	0x0003022c

000d620c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
   d620c:	b508      	push	{r3, lr}
   d620e:	4b02      	ldr	r3, [pc, #8]	; (d6218 <HAL_Validate_Pin_Function+0xc>)
   d6210:	681b      	ldr	r3, [r3, #0]
   d6212:	685b      	ldr	r3, [r3, #4]
   d6214:	9301      	str	r3, [sp, #4]
   d6216:	bd08      	pop	{r3, pc}
   d6218:	0003022c 	.word	0x0003022c

000d621c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d621c:	b508      	push	{r3, lr}
   d621e:	4b02      	ldr	r3, [pc, #8]	; (d6228 <HAL_Pin_Mode+0xc>)
   d6220:	681b      	ldr	r3, [r3, #0]
   d6222:	689b      	ldr	r3, [r3, #8]
   d6224:	9301      	str	r3, [sp, #4]
   d6226:	bd08      	pop	{r3, pc}
   d6228:	0003022c 	.word	0x0003022c

000d622c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d622c:	b508      	push	{r3, lr}
   d622e:	4b02      	ldr	r3, [pc, #8]	; (d6238 <HAL_Get_Pin_Mode+0xc>)
   d6230:	681b      	ldr	r3, [r3, #0]
   d6232:	68db      	ldr	r3, [r3, #12]
   d6234:	9301      	str	r3, [sp, #4]
   d6236:	bd08      	pop	{r3, pc}
   d6238:	0003022c 	.word	0x0003022c

000d623c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d623c:	b508      	push	{r3, lr}
   d623e:	4b02      	ldr	r3, [pc, #8]	; (d6248 <HAL_GPIO_Write+0xc>)
   d6240:	681b      	ldr	r3, [r3, #0]
   d6242:	691b      	ldr	r3, [r3, #16]
   d6244:	9301      	str	r3, [sp, #4]
   d6246:	bd08      	pop	{r3, pc}
   d6248:	0003022c 	.word	0x0003022c

000d624c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
   d624c:	b508      	push	{r3, lr}
   d624e:	4b02      	ldr	r3, [pc, #8]	; (d6258 <HAL_ADC_Read+0xc>)
   d6250:	681b      	ldr	r3, [r3, #0]
   d6252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6254:	9301      	str	r3, [sp, #4]
   d6256:	bd08      	pop	{r3, pc}
   d6258:	0003022c 	.word	0x0003022c

000d625c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d625c:	b508      	push	{r3, lr}
   d625e:	4b02      	ldr	r3, [pc, #8]	; (d6268 <HAL_I2C_Write_Data+0xc>)
   d6260:	681b      	ldr	r3, [r3, #0]
   d6262:	6a1b      	ldr	r3, [r3, #32]
   d6264:	9301      	str	r3, [sp, #4]
   d6266:	bd08      	pop	{r3, pc}
   d6268:	00030228 	.word	0x00030228

000d626c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d626c:	b508      	push	{r3, lr}
   d626e:	4b02      	ldr	r3, [pc, #8]	; (d6278 <HAL_I2C_Available_Data+0xc>)
   d6270:	681b      	ldr	r3, [r3, #0]
   d6272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6274:	9301      	str	r3, [sp, #4]
   d6276:	bd08      	pop	{r3, pc}
   d6278:	00030228 	.word	0x00030228

000d627c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d627c:	b508      	push	{r3, lr}
   d627e:	4b02      	ldr	r3, [pc, #8]	; (d6288 <HAL_I2C_Read_Data+0xc>)
   d6280:	681b      	ldr	r3, [r3, #0]
   d6282:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6284:	9301      	str	r3, [sp, #4]
   d6286:	bd08      	pop	{r3, pc}
   d6288:	00030228 	.word	0x00030228

000d628c <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d628c:	b508      	push	{r3, lr}
   d628e:	4b02      	ldr	r3, [pc, #8]	; (d6298 <HAL_I2C_Peek_Data+0xc>)
   d6290:	681b      	ldr	r3, [r3, #0]
   d6292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6294:	9301      	str	r3, [sp, #4]
   d6296:	bd08      	pop	{r3, pc}
   d6298:	00030228 	.word	0x00030228

000d629c <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d629c:	b508      	push	{r3, lr}
   d629e:	4b02      	ldr	r3, [pc, #8]	; (d62a8 <HAL_I2C_Flush_Data+0xc>)
   d62a0:	681b      	ldr	r3, [r3, #0]
   d62a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d62a4:	9301      	str	r3, [sp, #4]
   d62a6:	bd08      	pop	{r3, pc}
   d62a8:	00030228 	.word	0x00030228

000d62ac <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d62ac:	b508      	push	{r3, lr}
   d62ae:	4b02      	ldr	r3, [pc, #8]	; (d62b8 <HAL_I2C_Is_Enabled+0xc>)
   d62b0:	681b      	ldr	r3, [r3, #0]
   d62b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d62b4:	9301      	str	r3, [sp, #4]
   d62b6:	bd08      	pop	{r3, pc}
   d62b8:	00030228 	.word	0x00030228

000d62bc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
   d62bc:	b508      	push	{r3, lr}
   d62be:	4b02      	ldr	r3, [pc, #8]	; (d62c8 <HAL_I2C_Init+0xc>)
   d62c0:	681b      	ldr	r3, [r3, #0]
   d62c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d62c4:	9301      	str	r3, [sp, #4]
   d62c6:	bd08      	pop	{r3, pc}
   d62c8:	00030228 	.word	0x00030228

000d62cc <if_name_to_index>:

DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
   d62cc:	b508      	push	{r3, lr}
   d62ce:	4b02      	ldr	r3, [pc, #8]	; (d62d8 <if_name_to_index+0xc>)
   d62d0:	681b      	ldr	r3, [r3, #0]
   d62d2:	691b      	ldr	r3, [r3, #16]
   d62d4:	9301      	str	r3, [sp, #4]
   d62d6:	bd08      	pop	{r3, pc}
   d62d8:	0003026c 	.word	0x0003026c

000d62dc <if_index_to_name>:
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d62dc:	b508      	push	{r3, lr}
   d62de:	4b02      	ldr	r3, [pc, #8]	; (d62e8 <if_index_to_name+0xc>)
   d62e0:	681b      	ldr	r3, [r3, #0]
   d62e2:	695b      	ldr	r3, [r3, #20]
   d62e4:	9301      	str	r3, [sp, #4]
   d62e6:	bd08      	pop	{r3, pc}
   d62e8:	0003026c 	.word	0x0003026c

000d62ec <if_get_by_index>:
DYNALIB_FN(6, hal_ifapi, if_get_by_index, int(uint8_t, if_t*))
   d62ec:	b508      	push	{r3, lr}
   d62ee:	4b02      	ldr	r3, [pc, #8]	; (d62f8 <if_get_by_index+0xc>)
   d62f0:	681b      	ldr	r3, [r3, #0]
   d62f2:	699b      	ldr	r3, [r3, #24]
   d62f4:	9301      	str	r3, [sp, #4]
   d62f6:	bd08      	pop	{r3, pc}
   d62f8:	0003026c 	.word	0x0003026c

000d62fc <if_get_addrs>:
DYNALIB_FN(16, hal_ifapi, if_get_mtu, int(if_t, unsigned int*))
DYNALIB_FN(17, hal_ifapi, if_set_mtu, int(if_t, unsigned int))
DYNALIB_FN(18, hal_ifapi, if_get_metric, int(if_t, unsigned int*))
DYNALIB_FN(19, hal_ifapi, if_set_metric, int(if_t, unsigned int))
DYNALIB_FN(20, hal_ifapi, if_get_if_addrs, int(struct if_addrs**))
DYNALIB_FN(21, hal_ifapi, if_get_addrs, int(if_t, struct if_addrs**))
   d62fc:	b508      	push	{r3, lr}
   d62fe:	4b02      	ldr	r3, [pc, #8]	; (d6308 <if_get_addrs+0xc>)
   d6300:	681b      	ldr	r3, [r3, #0]
   d6302:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6304:	9301      	str	r3, [sp, #4]
   d6306:	bd08      	pop	{r3, pc}
   d6308:	0003026c 	.word	0x0003026c

000d630c <if_free_if_addrs>:
DYNALIB_FN(22, hal_ifapi, if_free_if_addrs, int(struct if_addrs*))
   d630c:	b508      	push	{r3, lr}
   d630e:	4b02      	ldr	r3, [pc, #8]	; (d6318 <if_free_if_addrs+0xc>)
   d6310:	681b      	ldr	r3, [r3, #0]
   d6312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
   d6314:	9301      	str	r3, [sp, #4]
   d6316:	bd08      	pop	{r3, pc}
   d6318:	0003026c 	.word	0x0003026c

000d631c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d631c:	b508      	push	{r3, lr}
   d631e:	4b02      	ldr	r3, [pc, #8]	; (d6328 <inet_inet_ntop+0xc>)
   d6320:	681b      	ldr	r3, [r3, #0]
   d6322:	695b      	ldr	r3, [r3, #20]
   d6324:	9301      	str	r3, [sp, #4]
   d6326:	bd08      	pop	{r3, pc}
   d6328:	00030264 	.word	0x00030264

000d632c <inet_inet_pton>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
   d632c:	b508      	push	{r3, lr}
   d632e:	4b02      	ldr	r3, [pc, #8]	; (d6338 <inet_inet_pton+0xc>)
   d6330:	681b      	ldr	r3, [r3, #0]
   d6332:	699b      	ldr	r3, [r3, #24]
   d6334:	9301      	str	r3, [sp, #4]
   d6336:	bd08      	pop	{r3, pc}
   d6338:	00030264 	.word	0x00030264

000d633c <inet_htonl>:
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d633c:	b508      	push	{r3, lr}
   d633e:	4b02      	ldr	r3, [pc, #8]	; (d6348 <inet_htonl+0xc>)
   d6340:	681b      	ldr	r3, [r3, #0]
   d6342:	6a1b      	ldr	r3, [r3, #32]
   d6344:	9301      	str	r3, [sp, #4]
   d6346:	bd08      	pop	{r3, pc}
   d6348:	00030264 	.word	0x00030264

000d634c <inet_ntohs>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
   d634c:	b508      	push	{r3, lr}
   d634e:	4b02      	ldr	r3, [pc, #8]	; (d6358 <inet_ntohs+0xc>)
   d6350:	681b      	ldr	r3, [r3, #0]
   d6352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6354:	9301      	str	r3, [sp, #4]
   d6356:	bd08      	pop	{r3, pc}
   d6358:	00030264 	.word	0x00030264

000d635c <inet_htons>:
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d635c:	b508      	push	{r3, lr}
   d635e:	4b02      	ldr	r3, [pc, #8]	; (d6368 <inet_htons+0xc>)
   d6360:	681b      	ldr	r3, [r3, #0]
   d6362:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6364:	9301      	str	r3, [sp, #4]
   d6366:	bd08      	pop	{r3, pc}
   d6368:	00030264 	.word	0x00030264

000d636c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d636c:	b508      	push	{r3, lr}
   d636e:	4b02      	ldr	r3, [pc, #8]	; (d6378 <netdb_freeaddrinfo+0xc>)
   d6370:	681b      	ldr	r3, [r3, #0]
   d6372:	689b      	ldr	r3, [r3, #8]
   d6374:	9301      	str	r3, [sp, #4]
   d6376:	bd08      	pop	{r3, pc}
   d6378:	00030268 	.word	0x00030268

000d637c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d637c:	b508      	push	{r3, lr}
   d637e:	4b02      	ldr	r3, [pc, #8]	; (d6388 <netdb_getaddrinfo+0xc>)
   d6380:	681b      	ldr	r3, [r3, #0]
   d6382:	68db      	ldr	r3, [r3, #12]
   d6384:	9301      	str	r3, [sp, #4]
   d6386:	bd08      	pop	{r3, pc}
   d6388:	00030268 	.word	0x00030268

000d638c <sock_bind>:
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, sock_accept, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
   d638c:	b508      	push	{r3, lr}
   d638e:	4b02      	ldr	r3, [pc, #8]	; (d6398 <sock_bind+0xc>)
   d6390:	681b      	ldr	r3, [r3, #0]
   d6392:	685b      	ldr	r3, [r3, #4]
   d6394:	9301      	str	r3, [sp, #4]
   d6396:	bd08      	pop	{r3, pc}
   d6398:	00030238 	.word	0x00030238

000d639c <sock_setsockopt>:
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d639c:	b508      	push	{r3, lr}
   d639e:	4b02      	ldr	r3, [pc, #8]	; (d63a8 <sock_setsockopt+0xc>)
   d63a0:	681b      	ldr	r3, [r3, #0]
   d63a2:	699b      	ldr	r3, [r3, #24]
   d63a4:	9301      	str	r3, [sp, #4]
   d63a6:	bd08      	pop	{r3, pc}
   d63a8:	00030238 	.word	0x00030238

000d63ac <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d63ac:	b508      	push	{r3, lr}
   d63ae:	4b02      	ldr	r3, [pc, #8]	; (d63b8 <sock_close+0xc>)
   d63b0:	681b      	ldr	r3, [r3, #0]
   d63b2:	69db      	ldr	r3, [r3, #28]
   d63b4:	9301      	str	r3, [sp, #4]
   d63b6:	bd08      	pop	{r3, pc}
   d63b8:	00030238 	.word	0x00030238

000d63bc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d63bc:	b508      	push	{r3, lr}
   d63be:	4b02      	ldr	r3, [pc, #8]	; (d63c8 <sock_connect+0xc>)
   d63c0:	681b      	ldr	r3, [r3, #0]
   d63c2:	6a1b      	ldr	r3, [r3, #32]
   d63c4:	9301      	str	r3, [sp, #4]
   d63c6:	bd08      	pop	{r3, pc}
   d63c8:	00030238 	.word	0x00030238

000d63cc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d63cc:	b508      	push	{r3, lr}
   d63ce:	4b02      	ldr	r3, [pc, #8]	; (d63d8 <sock_recv+0xc>)
   d63d0:	681b      	ldr	r3, [r3, #0]
   d63d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d63d4:	9301      	str	r3, [sp, #4]
   d63d6:	bd08      	pop	{r3, pc}
   d63d8:	00030238 	.word	0x00030238

000d63dc <sock_recvfrom>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
   d63dc:	b508      	push	{r3, lr}
   d63de:	4b02      	ldr	r3, [pc, #8]	; (d63e8 <sock_recvfrom+0xc>)
   d63e0:	681b      	ldr	r3, [r3, #0]
   d63e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d63e4:	9301      	str	r3, [sp, #4]
   d63e6:	bd08      	pop	{r3, pc}
   d63e8:	00030238 	.word	0x00030238

000d63ec <sock_send>:
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d63ec:	b508      	push	{r3, lr}
   d63ee:	4b02      	ldr	r3, [pc, #8]	; (d63f8 <sock_send+0xc>)
   d63f0:	681b      	ldr	r3, [r3, #0]
   d63f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d63f4:	9301      	str	r3, [sp, #4]
   d63f6:	bd08      	pop	{r3, pc}
   d63f8:	00030238 	.word	0x00030238

000d63fc <sock_sendto>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
   d63fc:	b508      	push	{r3, lr}
   d63fe:	4b02      	ldr	r3, [pc, #8]	; (d6408 <sock_sendto+0xc>)
   d6400:	681b      	ldr	r3, [r3, #0]
   d6402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6404:	9301      	str	r3, [sp, #4]
   d6406:	bd08      	pop	{r3, pc}
   d6408:	00030238 	.word	0x00030238

000d640c <sock_socket>:
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d640c:	b508      	push	{r3, lr}
   d640e:	4b02      	ldr	r3, [pc, #8]	; (d6418 <sock_socket+0xc>)
   d6410:	681b      	ldr	r3, [r3, #0]
   d6412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d6414:	9301      	str	r3, [sp, #4]
   d6416:	bd08      	pop	{r3, pc}
   d6418:	00030238 	.word	0x00030238

000d641c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d641c:	b508      	push	{r3, lr}
   d641e:	4b02      	ldr	r3, [pc, #8]	; (d6428 <HAL_SPI_Init+0xc>)
   d6420:	681b      	ldr	r3, [r3, #0]
   d6422:	69db      	ldr	r3, [r3, #28]
   d6424:	9301      	str	r3, [sp, #4]
   d6426:	bd08      	pop	{r3, pc}
   d6428:	00030230 	.word	0x00030230

000d642c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d642c:	b508      	push	{r3, lr}
   d642e:	4b02      	ldr	r3, [pc, #8]	; (d6438 <HAL_SPI_Is_Enabled+0xc>)
   d6430:	681b      	ldr	r3, [r3, #0]
   d6432:	6a1b      	ldr	r3, [r3, #32]
   d6434:	9301      	str	r3, [sp, #4]
   d6436:	bd08      	pop	{r3, pc}
   d6438:	00030230 	.word	0x00030230

000d643c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d643c:	b508      	push	{r3, lr}
   d643e:	4b02      	ldr	r3, [pc, #8]	; (d6448 <HAL_USART_Init+0xc>)
   d6440:	681b      	ldr	r3, [r3, #0]
   d6442:	681b      	ldr	r3, [r3, #0]
   d6444:	9301      	str	r3, [sp, #4]
   d6446:	bd08      	pop	{r3, pc}
   d6448:	0003023c 	.word	0x0003023c

000d644c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d644c:	b508      	push	{r3, lr}
   d644e:	4b02      	ldr	r3, [pc, #8]	; (d6458 <HAL_USART_Write_Data+0xc>)
   d6450:	681b      	ldr	r3, [r3, #0]
   d6452:	68db      	ldr	r3, [r3, #12]
   d6454:	9301      	str	r3, [sp, #4]
   d6456:	bd08      	pop	{r3, pc}
   d6458:	0003023c 	.word	0x0003023c

000d645c <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d645c:	b508      	push	{r3, lr}
   d645e:	4b02      	ldr	r3, [pc, #8]	; (d6468 <HAL_USART_Available_Data+0xc>)
   d6460:	681b      	ldr	r3, [r3, #0]
   d6462:	691b      	ldr	r3, [r3, #16]
   d6464:	9301      	str	r3, [sp, #4]
   d6466:	bd08      	pop	{r3, pc}
   d6468:	0003023c 	.word	0x0003023c

000d646c <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d646c:	b508      	push	{r3, lr}
   d646e:	4b02      	ldr	r3, [pc, #8]	; (d6478 <HAL_USART_Read_Data+0xc>)
   d6470:	681b      	ldr	r3, [r3, #0]
   d6472:	695b      	ldr	r3, [r3, #20]
   d6474:	9301      	str	r3, [sp, #4]
   d6476:	bd08      	pop	{r3, pc}
   d6478:	0003023c 	.word	0x0003023c

000d647c <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d647c:	b508      	push	{r3, lr}
   d647e:	4b02      	ldr	r3, [pc, #8]	; (d6488 <HAL_USART_Peek_Data+0xc>)
   d6480:	681b      	ldr	r3, [r3, #0]
   d6482:	699b      	ldr	r3, [r3, #24]
   d6484:	9301      	str	r3, [sp, #4]
   d6486:	bd08      	pop	{r3, pc}
   d6488:	0003023c 	.word	0x0003023c

000d648c <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d648c:	b508      	push	{r3, lr}
   d648e:	4b02      	ldr	r3, [pc, #8]	; (d6498 <HAL_USART_Flush_Data+0xc>)
   d6490:	681b      	ldr	r3, [r3, #0]
   d6492:	69db      	ldr	r3, [r3, #28]
   d6494:	9301      	str	r3, [sp, #4]
   d6496:	bd08      	pop	{r3, pc}
   d6498:	0003023c 	.word	0x0003023c

000d649c <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d649c:	b508      	push	{r3, lr}
   d649e:	4b02      	ldr	r3, [pc, #8]	; (d64a8 <HAL_USART_Is_Enabled+0xc>)
   d64a0:	681b      	ldr	r3, [r3, #0]
   d64a2:	6a1b      	ldr	r3, [r3, #32]
   d64a4:	9301      	str	r3, [sp, #4]
   d64a6:	bd08      	pop	{r3, pc}
   d64a8:	0003023c 	.word	0x0003023c

000d64ac <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d64ac:	b508      	push	{r3, lr}
   d64ae:	4b02      	ldr	r3, [pc, #8]	; (d64b8 <HAL_USART_Available_Data_For_Write+0xc>)
   d64b0:	681b      	ldr	r3, [r3, #0]
   d64b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d64b4:	9301      	str	r3, [sp, #4]
   d64b6:	bd08      	pop	{r3, pc}
   d64b8:	0003023c 	.word	0x0003023c

000d64bc <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d64bc:	b508      	push	{r3, lr}
   d64be:	4b02      	ldr	r3, [pc, #8]	; (d64c8 <HAL_USB_USART_Init+0xc>)
   d64c0:	681b      	ldr	r3, [r3, #0]
   d64c2:	681b      	ldr	r3, [r3, #0]
   d64c4:	9301      	str	r3, [sp, #4]
   d64c6:	bd08      	pop	{r3, pc}
   d64c8:	0003024c 	.word	0x0003024c

000d64cc <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d64cc:	b508      	push	{r3, lr}
   d64ce:	4b02      	ldr	r3, [pc, #8]	; (d64d8 <HAL_USB_USART_Available_Data+0xc>)
   d64d0:	681b      	ldr	r3, [r3, #0]
   d64d2:	691b      	ldr	r3, [r3, #16]
   d64d4:	9301      	str	r3, [sp, #4]
   d64d6:	bd08      	pop	{r3, pc}
   d64d8:	0003024c 	.word	0x0003024c

000d64dc <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d64dc:	b508      	push	{r3, lr}
   d64de:	4b02      	ldr	r3, [pc, #8]	; (d64e8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d64e0:	681b      	ldr	r3, [r3, #0]
   d64e2:	695b      	ldr	r3, [r3, #20]
   d64e4:	9301      	str	r3, [sp, #4]
   d64e6:	bd08      	pop	{r3, pc}
   d64e8:	0003024c 	.word	0x0003024c

000d64ec <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d64ec:	b508      	push	{r3, lr}
   d64ee:	4b02      	ldr	r3, [pc, #8]	; (d64f8 <HAL_USB_USART_Receive_Data+0xc>)
   d64f0:	681b      	ldr	r3, [r3, #0]
   d64f2:	699b      	ldr	r3, [r3, #24]
   d64f4:	9301      	str	r3, [sp, #4]
   d64f6:	bd08      	pop	{r3, pc}
   d64f8:	0003024c 	.word	0x0003024c

000d64fc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d64fc:	b508      	push	{r3, lr}
   d64fe:	4b02      	ldr	r3, [pc, #8]	; (d6508 <HAL_USB_USART_Send_Data+0xc>)
   d6500:	681b      	ldr	r3, [r3, #0]
   d6502:	69db      	ldr	r3, [r3, #28]
   d6504:	9301      	str	r3, [sp, #4]
   d6506:	bd08      	pop	{r3, pc}
   d6508:	0003024c 	.word	0x0003024c

000d650c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d650c:	b508      	push	{r3, lr}
   d650e:	4b02      	ldr	r3, [pc, #8]	; (d6518 <HAL_USB_USART_Flush_Data+0xc>)
   d6510:	681b      	ldr	r3, [r3, #0]
   d6512:	6a1b      	ldr	r3, [r3, #32]
   d6514:	9301      	str	r3, [sp, #4]
   d6516:	bd08      	pop	{r3, pc}
   d6518:	0003024c 	.word	0x0003024c

000d651c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d651c:	b508      	push	{r3, lr}
   d651e:	4b02      	ldr	r3, [pc, #8]	; (d6528 <log_message+0xc>)
   d6520:	681b      	ldr	r3, [r3, #0]
   d6522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6524:	9301      	str	r3, [sp, #4]
   d6526:	bd08      	pop	{r3, pc}
   d6528:	00030260 	.word	0x00030260

000d652c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d652c:	b508      	push	{r3, lr}
   d652e:	4b02      	ldr	r3, [pc, #8]	; (d6538 <set_system_mode+0xc>)
   d6530:	681b      	ldr	r3, [r3, #0]
   d6532:	685b      	ldr	r3, [r3, #4]
   d6534:	9301      	str	r3, [sp, #4]
   d6536:	bd08      	pop	{r3, pc}
   d6538:	00030220 	.word	0x00030220

000d653c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
   d653c:	b508      	push	{r3, lr}
   d653e:	4b02      	ldr	r3, [pc, #8]	; (d6548 <application_thread_current+0xc>)
   d6540:	681b      	ldr	r3, [r3, #0]
   d6542:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
   d6544:	9301      	str	r3, [sp, #4]
   d6546:	bd08      	pop	{r3, pc}
   d6548:	00030220 	.word	0x00030220

000d654c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
   d654c:	b508      	push	{r3, lr}
   d654e:	4b02      	ldr	r3, [pc, #8]	; (d6558 <application_thread_invoke+0xc>)
   d6550:	681b      	ldr	r3, [r3, #0]
   d6552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
   d6554:	9301      	str	r3, [sp, #4]
   d6556:	bd08      	pop	{r3, pc}
   d6558:	00030220 	.word	0x00030220

000d655c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d655c:	b508      	push	{r3, lr}
   d655e:	4b03      	ldr	r3, [pc, #12]	; (d656c <system_ctrl_set_app_request_handler+0x10>)
   d6560:	681b      	ldr	r3, [r3, #0]
   d6562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6566:	9301      	str	r3, [sp, #4]
   d6568:	bd08      	pop	{r3, pc}
   d656a:	0000      	.short	0x0000
   d656c:	00030220 	.word	0x00030220

000d6570 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6570:	b508      	push	{r3, lr}
   d6572:	4b03      	ldr	r3, [pc, #12]	; (d6580 <system_ctrl_set_result+0x10>)
   d6574:	681b      	ldr	r3, [r3, #0]
   d6576:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d657a:	9301      	str	r3, [sp, #4]
   d657c:	bd08      	pop	{r3, pc}
   d657e:	0000      	.short	0x0000
   d6580:	00030220 	.word	0x00030220

000d6584 <system_invoke_event_handler>:

DYNALIB_FN(BASE_IDX + 13, system, system_pool_alloc, void*(size_t, void*))
DYNALIB_FN(BASE_IDX + 14, system, system_pool_free, void(void*, void*))
DYNALIB_FN(BASE_IDX + 15, system, system_sleep_pins, int(const uint16_t*, size_t, const InterruptMode*, size_t, long, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 16, system, system_invoke_event_handler, int(uint16_t handlerInfoSize, FilteringEventHandler* handlerInfo, const char* event_name, const char* event_data, void* reserved))
   d6584:	b508      	push	{r3, lr}
   d6586:	4b03      	ldr	r3, [pc, #12]	; (d6594 <system_invoke_event_handler+0x10>)
   d6588:	681b      	ldr	r3, [r3, #0]
   d658a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   d658e:	9301      	str	r3, [sp, #4]
   d6590:	bd08      	pop	{r3, pc}
   d6592:	0000      	.short	0x0000
   d6594:	00030220 	.word	0x00030220

000d6598 <spark_send_event>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
   d6598:	b508      	push	{r3, lr}
   d659a:	4b02      	ldr	r3, [pc, #8]	; (d65a4 <spark_send_event+0xc>)
   d659c:	681b      	ldr	r3, [r3, #0]
   d659e:	6a1b      	ldr	r3, [r3, #32]
   d65a0:	9301      	str	r3, [sp, #4]
   d65a2:	bd08      	pop	{r3, pc}
   d65a4:	00030244 	.word	0x00030244

000d65a8 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
   d65a8:	b508      	push	{r3, lr}
   d65aa:	4b02      	ldr	r3, [pc, #8]	; (d65b4 <spark_subscribe+0xc>)
   d65ac:	681b      	ldr	r3, [r3, #0]
   d65ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d65b0:	9301      	str	r3, [sp, #4]
   d65b2:	bd08      	pop	{r3, pc}
   d65b4:	00030244 	.word	0x00030244

000d65b8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d65b8:	b508      	push	{r3, lr}
   d65ba:	4b02      	ldr	r3, [pc, #8]	; (d65c4 <spark_set_random_seed_from_cloud_handler+0xc>)
   d65bc:	681b      	ldr	r3, [r3, #0]
   d65be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d65c0:	9301      	str	r3, [sp, #4]
   d65c2:	bd08      	pop	{r3, pc}
   d65c4:	00030244 	.word	0x00030244

000d65c8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d65c8:	b508      	push	{r3, lr}
   d65ca:	4b02      	ldr	r3, [pc, #8]	; (d65d4 <network_connect+0xc>)
   d65cc:	681b      	ldr	r3, [r3, #0]
   d65ce:	685b      	ldr	r3, [r3, #4]
   d65d0:	9301      	str	r3, [sp, #4]
   d65d2:	bd08      	pop	{r3, pc}
   d65d4:	00030240 	.word	0x00030240

000d65d8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d65d8:	b508      	push	{r3, lr}
   d65da:	4b02      	ldr	r3, [pc, #8]	; (d65e4 <network_connecting+0xc>)
   d65dc:	681b      	ldr	r3, [r3, #0]
   d65de:	689b      	ldr	r3, [r3, #8]
   d65e0:	9301      	str	r3, [sp, #4]
   d65e2:	bd08      	pop	{r3, pc}
   d65e4:	00030240 	.word	0x00030240

000d65e8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d65e8:	b508      	push	{r3, lr}
   d65ea:	4b02      	ldr	r3, [pc, #8]	; (d65f4 <network_disconnect+0xc>)
   d65ec:	681b      	ldr	r3, [r3, #0]
   d65ee:	68db      	ldr	r3, [r3, #12]
   d65f0:	9301      	str	r3, [sp, #4]
   d65f2:	bd08      	pop	{r3, pc}
   d65f4:	00030240 	.word	0x00030240

000d65f8 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d65f8:	b508      	push	{r3, lr}
   d65fa:	4b02      	ldr	r3, [pc, #8]	; (d6604 <network_ready+0xc>)
   d65fc:	681b      	ldr	r3, [r3, #0]
   d65fe:	691b      	ldr	r3, [r3, #16]
   d6600:	9301      	str	r3, [sp, #4]
   d6602:	bd08      	pop	{r3, pc}
   d6604:	00030240 	.word	0x00030240

000d6608 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6608:	b508      	push	{r3, lr}
   d660a:	4b02      	ldr	r3, [pc, #8]	; (d6614 <network_on+0xc>)
   d660c:	681b      	ldr	r3, [r3, #0]
   d660e:	695b      	ldr	r3, [r3, #20]
   d6610:	9301      	str	r3, [sp, #4]
   d6612:	bd08      	pop	{r3, pc}
   d6614:	00030240 	.word	0x00030240

000d6618 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6618:	b508      	push	{r3, lr}
   d661a:	4b02      	ldr	r3, [pc, #8]	; (d6624 <network_off+0xc>)
   d661c:	681b      	ldr	r3, [r3, #0]
   d661e:	699b      	ldr	r3, [r3, #24]
   d6620:	9301      	str	r3, [sp, #4]
   d6622:	bd08      	pop	{r3, pc}
   d6624:	00030240 	.word	0x00030240

000d6628 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d6628:	b508      	push	{r3, lr}
   d662a:	4b02      	ldr	r3, [pc, #8]	; (d6634 <network_listen+0xc>)
   d662c:	681b      	ldr	r3, [r3, #0]
   d662e:	69db      	ldr	r3, [r3, #28]
   d6630:	9301      	str	r3, [sp, #4]
   d6632:	bd08      	pop	{r3, pc}
   d6634:	00030240 	.word	0x00030240

000d6638 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d6638:	b508      	push	{r3, lr}
   d663a:	4b02      	ldr	r3, [pc, #8]	; (d6644 <network_listening+0xc>)
   d663c:	681b      	ldr	r3, [r3, #0]
   d663e:	6a1b      	ldr	r3, [r3, #32]
   d6640:	9301      	str	r3, [sp, #4]
   d6642:	bd08      	pop	{r3, pc}
   d6644:	00030240 	.word	0x00030240

000d6648 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d6648:	b508      	push	{r3, lr}
   d664a:	4b02      	ldr	r3, [pc, #8]	; (d6654 <network_set_listen_timeout+0xc>)
   d664c:	681b      	ldr	r3, [r3, #0]
   d664e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6650:	9301      	str	r3, [sp, #4]
   d6652:	bd08      	pop	{r3, pc}
   d6654:	00030240 	.word	0x00030240

000d6658 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d6658:	b508      	push	{r3, lr}
   d665a:	4b02      	ldr	r3, [pc, #8]	; (d6664 <network_get_listen_timeout+0xc>)
   d665c:	681b      	ldr	r3, [r3, #0]
   d665e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6660:	9301      	str	r3, [sp, #4]
   d6662:	bd08      	pop	{r3, pc}
   d6664:	00030240 	.word	0x00030240

000d6668 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d6668:	b508      	push	{r3, lr}
   d666a:	4b02      	ldr	r3, [pc, #8]	; (d6674 <malloc+0xc>)
   d666c:	681b      	ldr	r3, [r3, #0]
   d666e:	681b      	ldr	r3, [r3, #0]
   d6670:	9301      	str	r3, [sp, #4]
   d6672:	bd08      	pop	{r3, pc}
   d6674:	0003021c 	.word	0x0003021c

000d6678 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6678:	b508      	push	{r3, lr}
   d667a:	4b02      	ldr	r3, [pc, #8]	; (d6684 <free+0xc>)
   d667c:	681b      	ldr	r3, [r3, #0]
   d667e:	685b      	ldr	r3, [r3, #4]
   d6680:	9301      	str	r3, [sp, #4]
   d6682:	bd08      	pop	{r3, pc}
   d6684:	0003021c 	.word	0x0003021c

000d6688 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6688:	b508      	push	{r3, lr}
   d668a:	4b02      	ldr	r3, [pc, #8]	; (d6694 <realloc+0xc>)
   d668c:	681b      	ldr	r3, [r3, #0]
   d668e:	689b      	ldr	r3, [r3, #8]
   d6690:	9301      	str	r3, [sp, #4]
   d6692:	bd08      	pop	{r3, pc}
   d6694:	0003021c 	.word	0x0003021c

000d6698 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
   d6698:	b508      	push	{r3, lr}
   d669a:	4b02      	ldr	r3, [pc, #8]	; (d66a4 <sscanf+0xc>)
   d669c:	681b      	ldr	r3, [r3, #0]
   d669e:	695b      	ldr	r3, [r3, #20]
   d66a0:	9301      	str	r3, [sp, #4]
   d66a2:	bd08      	pop	{r3, pc}
   d66a4:	0003021c 	.word	0x0003021c

000d66a8 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
   d66a8:	b508      	push	{r3, lr}
   d66aa:	4b02      	ldr	r3, [pc, #8]	; (d66b4 <abort+0xc>)
   d66ac:	681b      	ldr	r3, [r3, #0]
   d66ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d66b0:	9301      	str	r3, [sp, #4]
   d66b2:	bd08      	pop	{r3, pc}
   d66b4:	0003021c 	.word	0x0003021c

000d66b8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
   d66b8:	b508      	push	{r3, lr}
   d66ba:	4b02      	ldr	r3, [pc, #8]	; (d66c4 <_malloc_r+0xc>)
   d66bc:	681b      	ldr	r3, [r3, #0]
   d66be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d66c0:	9301      	str	r3, [sp, #4]
   d66c2:	bd08      	pop	{r3, pc}
   d66c4:	0003021c 	.word	0x0003021c

000d66c8 <__errno>:
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d66c8:	b508      	push	{r3, lr}
   d66ca:	4b02      	ldr	r3, [pc, #8]	; (d66d4 <__errno+0xc>)
   d66cc:	681b      	ldr	r3, [r3, #0]
   d66ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d66d0:	9301      	str	r3, [sp, #4]
   d66d2:	bd08      	pop	{r3, pc}
   d66d4:	0003021c 	.word	0x0003021c

000d66d8 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
   d66d8:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d66da:	6883      	ldr	r3, [r0, #8]
   d66dc:	4604      	mov	r4, r0
   d66de:	b90b      	cbnz	r3, d66e4 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
   d66e0:	f002 f8fd 	bl	d88de <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d66e4:	68c3      	ldr	r3, [r0, #12]
   d66e6:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d66e8:	68a3      	ldr	r3, [r4, #8]
   d66ea:	b11b      	cbz	r3, d66f4 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d66ec:	2203      	movs	r2, #3
   d66ee:	4621      	mov	r1, r4
   d66f0:	4620      	mov	r0, r4
   d66f2:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d66f4:	4620      	mov	r0, r4
}
   d66f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
   d66fa:	f7fd bcd0 	b.w	d409e <_ZdlPv>

000d66fe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d66fe:	4770      	bx	lr

000d6700 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
   d6700:	2000      	movs	r0, #0
   d6702:	4770      	bx	lr

000d6704 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
   d6704:	b510      	push	{r4, lr}
   d6706:	4604      	mov	r4, r0
   d6708:	f7fd fcc9 	bl	d409e <_ZdlPv>
   d670c:	4620      	mov	r0, r4
   d670e:	bd10      	pop	{r4, pc}

000d6710 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
   d6710:	b508      	push	{r3, lr}
      { delete this; }
   d6712:	b108      	cbz	r0, d6718 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
   d6714:	f7ff fff6 	bl	d6704 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
   d6718:	bd08      	pop	{r3, pc}

000d671a <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d671a:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d671c:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d671e:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d6720:	b113      	cbz	r3, d6728 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6722:	2203      	movs	r2, #3
   d6724:	4601      	mov	r1, r0
   d6726:	4798      	blx	r3
    }
   d6728:	4620      	mov	r0, r4
   d672a:	bd10      	pop	{r4, pc}

000d672c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
   d672c:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
   d672e:	68c4      	ldr	r4, [r0, #12]
   d6730:	b1d4      	cbz	r4, d6768 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
   d6732:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
   d6734:	2b02      	cmp	r3, #2
   d6736:	d102      	bne.n	d673e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6738:	68e0      	ldr	r0, [r4, #12]
   d673a:	f7ff ff9d 	bl	d6678 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
   d673e:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
   d6740:	b12d      	cbz	r5, d674e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6742:	4628      	mov	r0, r5
   d6744:	f7ff ffe9 	bl	d671a <_ZNSt14_Function_baseD1Ev>
   d6748:	4628      	mov	r0, r5
   d674a:	f7fd fca8 	bl	d409e <_ZdlPv>
   d674e:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
   d6750:	b12d      	cbz	r5, d675e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
   d6752:	4628      	mov	r0, r5
   d6754:	f7ff ffe1 	bl	d671a <_ZNSt14_Function_baseD1Ev>
   d6758:	4628      	mov	r0, r5
   d675a:	f7fd fca0 	bl	d409e <_ZdlPv>
   d675e:	4620      	mov	r0, r4
   d6760:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   d6764:	f7fd bc9b 	b.w	d409e <_ZdlPv>
   d6768:	bd38      	pop	{r3, r4, r5, pc}

000d676a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d676a:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
   d676c:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
   d676e:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
   d6770:	b17c      	cbz	r4, d6792 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d6772:	6863      	ldr	r3, [r4, #4]
   d6774:	3b01      	subs	r3, #1
   d6776:	6063      	str	r3, [r4, #4]
   d6778:	b95b      	cbnz	r3, d6792 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
   d677a:	6823      	ldr	r3, [r4, #0]
   d677c:	4620      	mov	r0, r4
   d677e:	689b      	ldr	r3, [r3, #8]
   d6780:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d6782:	68a3      	ldr	r3, [r4, #8]
   d6784:	3b01      	subs	r3, #1
   d6786:	60a3      	str	r3, [r4, #8]
   d6788:	b91b      	cbnz	r3, d6792 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
   d678a:	6823      	ldr	r3, [r4, #0]
   d678c:	4620      	mov	r0, r4
   d678e:	68db      	ldr	r3, [r3, #12]
   d6790:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
   d6792:	4628      	mov	r0, r5
   d6794:	bd38      	pop	{r3, r4, r5, pc}

000d6796 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
   d6796:	b513      	push	{r0, r1, r4, lr}
   d6798:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
   d679a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
   d679e:	2300      	movs	r3, #0
   d67a0:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d67a2:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
   d67a4:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d67a6:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d67a8:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d67aa:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
   d67ac:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d67ae:	f7ff ffdc 	bl	d676a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67b2:	4620      	mov	r0, r4
   d67b4:	b002      	add	sp, #8
   d67b6:	bd10      	pop	{r4, pc}

000d67b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
   d67b8:	680b      	ldr	r3, [r1, #0]
   d67ba:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
   d67bc:	b113      	cbz	r3, d67c4 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
   d67be:	685a      	ldr	r2, [r3, #4]
   d67c0:	3201      	adds	r2, #1
   d67c2:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
   d67c4:	4770      	bx	lr

000d67c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
   d67c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d67c8:	460c      	mov	r4, r1
   d67ca:	ad02      	add	r5, sp, #8
   d67cc:	f854 3b04 	ldr.w	r3, [r4], #4
   d67d0:	f845 3d08 	str.w	r3, [r5, #-8]!
   d67d4:	4606      	mov	r6, r0
   d67d6:	460f      	mov	r7, r1
   d67d8:	a801      	add	r0, sp, #4
   d67da:	4621      	mov	r1, r4
   d67dc:	f7ff ffec 	bl	d67b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
   d67e0:	4629      	mov	r1, r5
   d67e2:	4630      	mov	r0, r6
   d67e4:	f7ff ffd7 	bl	d6796 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d67e8:	a801      	add	r0, sp, #4
   d67ea:	f7ff ffbe 	bl	d676a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d67ee:	4620      	mov	r0, r4
   d67f0:	f7ff ffbb 	bl	d676a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
   d67f4:	4638      	mov	r0, r7
   d67f6:	f7fd fc52 	bl	d409e <_ZdlPv>
        return p;
    }
   d67fa:	4630      	mov	r0, r6
   d67fc:	b003      	add	sp, #12
   d67fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6800 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
   d6800:	b513      	push	{r0, r1, r4, lr}
   d6802:	460b      	mov	r3, r1
   d6804:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6806:	c803      	ldmia	r0, {r0, r1}
   d6808:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
   d680c:	e893 0003 	ldmia.w	r3, {r0, r1}
   d6810:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
   d6814:	e89d 0003 	ldmia.w	sp, {r0, r1}
   d6818:	e883 0003 	stmia.w	r3, {r0, r1}
    }
   d681c:	b002      	add	sp, #8
   d681e:	bd10      	pop	{r4, pc}

000d6820 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6820:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6822:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6824:	b90a      	cbnz	r2, d682a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
   d6826:	f002 f85a 	bl	d88de <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d682a:	68c3      	ldr	r3, [r0, #12]
    }
   d682c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6830:	4718      	bx	r3

000d6832 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6832:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6834:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6836:	f100 0110 	add.w	r1, r0, #16
   d683a:	f7ff fff1 	bl	d6820 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d683e:	bd08      	pop	{r3, pc}

000d6840 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6840:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
   d6842:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6844:	b90a      	cbnz	r2, d684a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
   d6846:	f002 f84a 	bl	d88de <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d684a:	68c3      	ldr	r3, [r0, #12]
    }
   d684c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6850:	4718      	bx	r3

000d6852 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
   d6852:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6854:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
   d6856:	f100 0110 	add.w	r1, r0, #16
   d685a:	f7ff fff1 	bl	d6840 <_ZNKSt8functionIFvRKbEEclES1_>
   d685e:	bd08      	pop	{r3, pc}

000d6860 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6860:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6862:	2300      	movs	r3, #0
   d6864:	6083      	str	r3, [r0, #8]
   d6866:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6868:	4604      	mov	r4, r0
   d686a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d686c:	b12b      	cbz	r3, d687a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d686e:	2202      	movs	r2, #2
   d6870:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6872:	68eb      	ldr	r3, [r5, #12]
   d6874:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6876:	68ab      	ldr	r3, [r5, #8]
   d6878:	60a3      	str	r3, [r4, #8]
	}
    }
   d687a:	4620      	mov	r0, r4
   d687c:	bd38      	pop	{r3, r4, r5, pc}
	...

000d6880 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
   d6880:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
   d6884:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d6888:	b086      	sub	sp, #24
   d688a:	6804      	ldr	r4, [r0, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d688c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
   d6890:	808b      	strh	r3, [r1, #4]
   d6892:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6894:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6896:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
   d689a:	600b      	str	r3, [r1, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d689c:	f04f 0002 	mov.w	r0, #2
   d68a0:	e8d4 1f4f 	ldrexb	r1, [r4]
   d68a4:	4299      	cmp	r1, r3
   d68a6:	d103      	bne.n	d68b0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
   d68a8:	e8c4 0f45 	strexb	r5, r0, [r4]
   d68ac:	2d00      	cmp	r5, #0
   d68ae:	d1f7      	bne.n	d68a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
   d68b0:	d002      	beq.n	d68b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
   d68b2:	f88d 1000 	strb.w	r1, [sp]
   d68b6:	e06a      	b.n	d698e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
   d68b8:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d68bc:	bf1e      	ittt	ne
   d68be:	60e7      	strne	r7, [r4, #12]
   d68c0:	8222      	strhne	r2, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d68c2:	461f      	movne	r7, r3
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d68c4:	2301      	movs	r3, #1
   d68c6:	f3bf 8f5f 	dmb	sy

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d68ca:	2000      	movs	r0, #0
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d68cc:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d68ce:	f104 0308 	add.w	r3, r4, #8
   d68d2:	f3bf 8f5f 	dmb	sy
   d68d6:	e853 6f00 	ldrex	r6, [r3]
   d68da:	e843 0200 	strex	r2, r0, [r3]
   d68de:	2a00      	cmp	r2, #0
   d68e0:	d1f9      	bne.n	d68d6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x56>
   d68e2:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d68e6:	2e00      	cmp	r6, #0
   d68e8:	d051      	beq.n	d698e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x10e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d68ea:	f7ff fe27 	bl	d653c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d68ee:	b120      	cbz	r0, d68fa <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7a>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d68f0:	4629      	mov	r1, r5
   d68f2:	4630      	mov	r0, r6
   d68f4:	f7ff ff94 	bl	d6820 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
   d68f8:	e043      	b.n	d6982 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x102>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d68fa:	4631      	mov	r1, r6
   d68fc:	4668      	mov	r0, sp
   d68fe:	f7ff ffaf 	bl	d6860 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6902:	68e0      	ldr	r0, [r4, #12]
   d6904:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6908:	b108      	cbz	r0, d690e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x8e>
   d690a:	f002 ffab 	bl	d9864 <strdup>
   d690e:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6910:	2010      	movs	r0, #16
   d6912:	f8ad 5014 	strh.w	r5, [sp, #20]
   d6916:	f7fd fbbe 	bl	d4096 <_Znwj>
   d691a:	4605      	mov	r5, r0
   d691c:	b330      	cbz	r0, d696c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xec>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d691e:	f04f 0800 	mov.w	r8, #0
   d6922:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6926:	2018      	movs	r0, #24
   d6928:	f7fd fbb5 	bl	d4096 <_Znwj>
   d692c:	4604      	mov	r4, r0
   d692e:	b1c0      	cbz	r0, d6962 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe2>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6930:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6934:	4601      	mov	r1, r0
   d6936:	4668      	mov	r0, sp
   d6938:	f7ff ff62 	bl	d6800 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d693c:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
   d693e:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6940:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6942:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6944:	9202      	str	r2, [sp, #8]
   d6946:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6948:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d694a:	f8bd 3014 	ldrh.w	r3, [sp, #20]
   d694e:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
   d6950:	f64f 739c 	movw	r3, #65436	; 0xff9c
   d6954:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6958:	9b04      	ldr	r3, [sp, #16]
   d695a:	9203      	str	r2, [sp, #12]
   d695c:	6123      	str	r3, [r4, #16]
      __b = _GLIBCXX_MOVE(__tmp);
   d695e:	f8cd 8010 	str.w	r8, [sp, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6962:	4b0e      	ldr	r3, [pc, #56]	; (d699c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
   d6964:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6966:	4b0e      	ldr	r3, [pc, #56]	; (d69a0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6968:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d696a:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d696c:	9804      	ldr	r0, [sp, #16]
   d696e:	f7ff fe83 	bl	d6678 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6972:	4668      	mov	r0, sp
   d6974:	f7ff fed1 	bl	d671a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6978:	2200      	movs	r2, #0
   d697a:	4629      	mov	r1, r5
   d697c:	4809      	ldr	r0, [pc, #36]	; (d69a4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
   d697e:	f7ff fde5 	bl	d654c <application_thread_invoke>
   d6982:	4630      	mov	r0, r6
   d6984:	f7ff fec9 	bl	d671a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6988:	4630      	mov	r0, r6
   d698a:	f7fd fb88 	bl	d409e <_ZdlPv>
   d698e:	4638      	mov	r0, r7
   d6990:	f7ff fe72 	bl	d6678 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
   d6994:	b006      	add	sp, #24
   d6996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d699a:	bf00      	nop
   d699c:	000d6833 	.word	0x000d6833
   d69a0:	000d6a91 	.word	0x000d6a91
   d69a4:	000d66d9 	.word	0x000d66d9

000d69a8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d69a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d69ac:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d69ae:	ad07      	add	r5, sp, #28
   d69b0:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d69b4:	4606      	mov	r6, r0
   d69b6:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
   d69b8:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d69ba:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
   d69bc:	460f      	mov	r7, r1
   d69be:	4690      	mov	r8, r2
   d69c0:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
   d69c4:	f8c5 b004 	str.w	fp, [r5, #4]
   d69c8:	f8c5 b008 	str.w	fp, [r5, #8]
   d69cc:	9307      	str	r3, [sp, #28]
   d69ce:	f7fd fb62 	bl	d4096 <_Znwj>
   d69d2:	4604      	mov	r4, r0
   d69d4:	b138      	cbz	r0, d69e6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
   d69d6:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d69da:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
   d69de:	f8c0 b004 	str.w	fp, [r0, #4]
   d69e2:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d69e6:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d69e8:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
   d69ea:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
   d69ec:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d69ee:	f7fd fb52 	bl	d4096 <_Znwj>
   d69f2:	b128      	cbz	r0, d6a00 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d69f4:	2301      	movs	r3, #1
   d69f6:	6043      	str	r3, [r0, #4]
   d69f8:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
   d69fa:	4b23      	ldr	r3, [pc, #140]	; (d6a88 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
   d69fc:	6003      	str	r3, [r0, #0]
   d69fe:	60c4      	str	r4, [r0, #12]
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
   d6a00:	9004      	str	r0, [sp, #16]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
   d6a02:	4b22      	ldr	r3, [pc, #136]	; (d6a8c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
   d6a04:	9308      	str	r3, [sp, #32]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
   d6a06:	2008      	movs	r0, #8
   d6a08:	f7fd fb45 	bl	d4096 <_Znwj>
   d6a0c:	4604      	mov	r4, r0
   d6a0e:	b128      	cbz	r0, d6a1c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6a10:	9b03      	ldr	r3, [sp, #12]
   d6a12:	f840 3b04 	str.w	r3, [r0], #4
   d6a16:	a904      	add	r1, sp, #16
   d6a18:	f7ff fece 	bl	d67b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6a1c:	9500      	str	r5, [sp, #0]
   d6a1e:	fa5f f38a 	uxtb.w	r3, sl
   d6a22:	464a      	mov	r2, r9
   d6a24:	4641      	mov	r1, r8
   d6a26:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
   d6a28:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
   d6a2a:	f7ff fdb5 	bl	d6598 <spark_send_event>
   d6a2e:	b9b8      	cbnz	r0, d6a60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
   d6a30:	9b03      	ldr	r3, [sp, #12]
   d6a32:	785b      	ldrb	r3, [r3, #1]
   d6a34:	f003 02ff 	and.w	r2, r3, #255	; 0xff
   d6a38:	b993      	cbnz	r3, d6a60 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
   d6a3a:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
   d6a3e:	a905      	add	r1, sp, #20
   d6a40:	a803      	add	r0, sp, #12
   d6a42:	9205      	str	r2, [sp, #20]
   d6a44:	f8ad 3018 	strh.w	r3, [sp, #24]
   d6a48:	f7ff ff1a 	bl	d6880 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6a4c:	9805      	ldr	r0, [sp, #20]
   d6a4e:	f7ff fe13 	bl	d6678 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
   d6a52:	a805      	add	r0, sp, #20
   d6a54:	9909      	ldr	r1, [sp, #36]	; 0x24
   d6a56:	f7ff feb6 	bl	d67c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6a5a:	a806      	add	r0, sp, #24
   d6a5c:	f7ff fe85 	bl	d676a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
   d6a60:	9b03      	ldr	r3, [sp, #12]
   d6a62:	9305      	str	r3, [sp, #20]
   d6a64:	a904      	add	r1, sp, #16
   d6a66:	a806      	add	r0, sp, #24
   d6a68:	f7ff fea6 	bl	d67b8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
   d6a6c:	a905      	add	r1, sp, #20
   d6a6e:	4630      	mov	r0, r6
   d6a70:	f7ff fe91 	bl	d6796 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
   d6a74:	a806      	add	r0, sp, #24
   d6a76:	f7ff fe78 	bl	d676a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
   d6a7a:	a804      	add	r0, sp, #16
   d6a7c:	f7ff fe75 	bl	d676a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
   d6a80:	4630      	mov	r0, r6
   d6a82:	b00b      	add	sp, #44	; 0x2c
   d6a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d6a88:	000d9a0c 	.word	0x000d9a0c
   d6a8c:	000d6bf9 	.word	0x000d6bf9

000d6a90 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6a90:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6a92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a94:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6a96:	d006      	beq.n	d6aa6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
   d6a98:	2a03      	cmp	r2, #3
   d6a9a:	d017      	beq.n	d6acc <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
   d6a9c:	2a01      	cmp	r2, #1
   d6a9e:	d120      	bne.n	d6ae2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6aa0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6aa2:	6003      	str	r3, [r0, #0]
	      break;
   d6aa4:	e01d      	b.n	d6ae2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6aa6:	2018      	movs	r0, #24
   d6aa8:	680e      	ldr	r6, [r1, #0]
   d6aaa:	f7fd faf4 	bl	d4096 <_Znwj>
   d6aae:	4605      	mov	r5, r0
   d6ab0:	b150      	cbz	r0, d6ac8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6ab2:	4631      	mov	r1, r6
   d6ab4:	f7ff fed4 	bl	d6860 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
   d6ab8:	6930      	ldr	r0, [r6, #16]
   d6aba:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6abe:	b108      	cbz	r0, d6ac4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
   d6ac0:	f002 fed0 	bl	d9864 <strdup>
   d6ac4:	6128      	str	r0, [r5, #16]
   d6ac6:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6ac8:	6025      	str	r5, [r4, #0]
   d6aca:	e00a      	b.n	d6ae2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6acc:	6804      	ldr	r4, [r0, #0]
   d6ace:	b144      	cbz	r4, d6ae2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6ad0:	6920      	ldr	r0, [r4, #16]
   d6ad2:	f7ff fdd1 	bl	d6678 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6ad6:	4620      	mov	r0, r4
   d6ad8:	f7ff fe1f 	bl	d671a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6adc:	4620      	mov	r0, r4
   d6ade:	f7fd fade 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6ae2:	2000      	movs	r0, #0
   d6ae4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6ae6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6ae6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ae8:	2300      	movs	r3, #0
   d6aea:	6083      	str	r3, [r0, #8]
   d6aec:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
   d6aee:	4604      	mov	r4, r0
   d6af0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
   d6af2:	b12b      	cbz	r3, d6b00 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
   d6af4:	2202      	movs	r2, #2
   d6af6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
   d6af8:	68eb      	ldr	r3, [r5, #12]
   d6afa:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
   d6afc:	68ab      	ldr	r3, [r5, #8]
   d6afe:	60a3      	str	r3, [r4, #8]
	}
    }
   d6b00:	4620      	mov	r0, r4
   d6b02:	bd38      	pop	{r3, r4, r5, pc}

000d6b04 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
   d6b04:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
   d6b06:	b570      	push	{r4, r5, r6, lr}
   d6b08:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
   d6b0a:	d006      	beq.n	d6b1a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
   d6b0c:	2a03      	cmp	r2, #3
   d6b0e:	d011      	beq.n	d6b34 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
   d6b10:	2a01      	cmp	r2, #1
   d6b12:	d117      	bne.n	d6b44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
   d6b14:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
   d6b16:	6003      	str	r3, [r0, #0]
	      break;
   d6b18:	e014      	b.n	d6b44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6b1a:	2014      	movs	r0, #20
   d6b1c:	680e      	ldr	r6, [r1, #0]
   d6b1e:	f7fd faba 	bl	d4096 <_Znwj>
   d6b22:	4605      	mov	r5, r0
   d6b24:	b120      	cbz	r0, d6b30 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
   d6b26:	4631      	mov	r1, r6
   d6b28:	f7ff ffdd 	bl	d6ae6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
   d6b2c:	7c33      	ldrb	r3, [r6, #16]
   d6b2e:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
   d6b30:	6025      	str	r5, [r4, #0]
   d6b32:	e007      	b.n	d6b44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6b34:	6804      	ldr	r4, [r0, #0]
   d6b36:	b12c      	cbz	r4, d6b44 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6b38:	4620      	mov	r0, r4
   d6b3a:	f7ff fdee 	bl	d671a <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
   d6b3e:	4620      	mov	r0, r4
   d6b40:	f7fd faad 	bl	d409e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
   d6b44:	2000      	movs	r0, #0
   d6b46:	bd70      	pop	{r4, r5, r6, pc}

000d6b48 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
   d6b48:	b5f0      	push	{r4, r5, r6, r7, lr}

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
   d6b4a:	2300      	movs	r3, #0
   d6b4c:	b087      	sub	sp, #28
   d6b4e:	460c      	mov	r4, r1
   d6b50:	f3bf 8f5f 	dmb	sy
   d6b54:	e850 6f00 	ldrex	r6, [r0]
   d6b58:	e840 3200 	strex	r2, r3, [r0]
   d6b5c:	2a00      	cmp	r2, #0
   d6b5e:	d1f9      	bne.n	d6b54 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
   d6b60:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
   d6b64:	2e00      	cmp	r6, #0
   d6b66:	d03e      	beq.n	d6be6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
   d6b68:	4618      	mov	r0, r3
   d6b6a:	f7ff fce7 	bl	d653c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
   d6b6e:	4607      	mov	r7, r0
   d6b70:	b120      	cbz	r0, d6b7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
   d6b72:	4621      	mov	r1, r4
   d6b74:	4630      	mov	r0, r6
   d6b76:	f7ff fe63 	bl	d6840 <_ZNKSt8functionIFvRKbEEclES1_>
   d6b7a:	e02e      	b.n	d6bda <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
   d6b7c:	4631      	mov	r1, r6
   d6b7e:	a801      	add	r0, sp, #4
   d6b80:	f7ff ffb1 	bl	d6ae6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d6b84:	7823      	ldrb	r3, [r4, #0]
   d6b86:	f88d 3014 	strb.w	r3, [sp, #20]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
   d6b8a:	2010      	movs	r0, #16
   d6b8c:	f7fd fa83 	bl	d4096 <_Znwj>
   d6b90:	4605      	mov	r5, r0
   d6b92:	b1d0      	cbz	r0, d6bca <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6b94:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6b96:	2014      	movs	r0, #20
   d6b98:	f7fd fa7d 	bl	d4096 <_Znwj>
   d6b9c:	4604      	mov	r4, r0
   d6b9e:	b178      	cbz	r0, d6bc0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d6ba0:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
   d6ba2:	4601      	mov	r1, r0
   d6ba4:	a801      	add	r0, sp, #4
   d6ba6:	f7ff fe2b 	bl	d6800 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6baa:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
   d6bac:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bae:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6bb0:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
   d6bb2:	9203      	str	r2, [sp, #12]
   d6bb4:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
   d6bb6:	60e3      	str	r3, [r4, #12]
   d6bb8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
   d6bbc:	9204      	str	r2, [sp, #16]
   d6bbe:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
   d6bc0:	4b0a      	ldr	r3, [pc, #40]	; (d6bec <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
   d6bc2:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
   d6bc4:	4b0a      	ldr	r3, [pc, #40]	; (d6bf0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
   d6bc6:	602c      	str	r4, [r5, #0]

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
	    _M_manager = &_My_handler::_M_manager;
   d6bc8:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6bca:	a801      	add	r0, sp, #4
   d6bcc:	f7ff fda5 	bl	d671a <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
   d6bd0:	2200      	movs	r2, #0
   d6bd2:	4629      	mov	r1, r5
   d6bd4:	4807      	ldr	r0, [pc, #28]	; (d6bf4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
   d6bd6:	f7ff fcb9 	bl	d654c <application_thread_invoke>
   d6bda:	4630      	mov	r0, r6
   d6bdc:	f7ff fd9d 	bl	d671a <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
   d6be0:	4630      	mov	r0, r6
   d6be2:	f7fd fa5c 	bl	d409e <_ZdlPv>
        }
    }
   d6be6:	b007      	add	sp, #28
   d6be8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d6bea:	bf00      	nop
   d6bec:	000d6853 	.word	0x000d6853
   d6bf0:	000d6b05 	.word	0x000d6b05
   d6bf4:	000d66d9 	.word	0x000d66d9

000d6bf8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
   d6bf8:	b530      	push	{r4, r5, lr}
   d6bfa:	b085      	sub	sp, #20
   d6bfc:	4604      	mov	r4, r0
   d6bfe:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
   d6c00:	4668      	mov	r0, sp
   d6c02:	4611      	mov	r1, r2
   d6c04:	f7ff fddf 	bl	d67c6 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
   d6c08:	b17c      	cbz	r4, d6c2a <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
   d6c0a:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
   d6c0c:	4628      	mov	r0, r5
   d6c0e:	b10d      	cbz	r5, d6c14 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
   d6c10:	f002 fe28 	bl	d9864 <strdup>
   d6c14:	9002      	str	r0, [sp, #8]
   d6c16:	a902      	add	r1, sp, #8
   d6c18:	4668      	mov	r0, sp
   d6c1a:	f8ad 400c 	strh.w	r4, [sp, #12]
   d6c1e:	f7ff fe2f 	bl	d6880 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
   d6c22:	9802      	ldr	r0, [sp, #8]
   d6c24:	f7ff fd28 	bl	d6678 <free>
   d6c28:	e01d      	b.n	d6c66 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
   d6c2a:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
   d6c2c:	f88d 4008 	strb.w	r4, [sp, #8]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
   d6c30:	f04f 0201 	mov.w	r2, #1
   d6c34:	e8d0 3f4f 	ldrexb	r3, [r0]
   d6c38:	42a3      	cmp	r3, r4
   d6c3a:	d103      	bne.n	d6c44 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
   d6c3c:	e8c0 2f41 	strexb	r1, r2, [r0]
   d6c40:	2900      	cmp	r1, #0
   d6c42:	d1f7      	bne.n	d6c34 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
   d6c44:	d002      	beq.n	d6c4c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
   d6c46:	f88d 3008 	strb.w	r3, [sp, #8]
   d6c4a:	e00c      	b.n	d6c66 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
   d6c4c:	f110 010c 	adds.w	r1, r0, #12
   d6c50:	f04f 0301 	mov.w	r3, #1
   d6c54:	bf18      	it	ne
   d6c56:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
   d6c58:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
   d6c5c:	3004      	adds	r0, #4
   d6c5e:	f800 3c03 	strb.w	r3, [r0, #-3]
   d6c62:	f7ff ff71 	bl	d6b48 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
   d6c66:	a801      	add	r0, sp, #4
   d6c68:	f7ff fd7f 	bl	d676a <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
   d6c6c:	b005      	add	sp, #20
   d6c6e:	bd30      	pop	{r4, r5, pc}

000d6c70 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6c70:	2200      	movs	r2, #0
   d6c72:	4611      	mov	r1, r2
   d6c74:	6840      	ldr	r0, [r0, #4]
   d6c76:	f7ff bcdf 	b.w	d6638 <network_listening>

000d6c7a <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6c7a:	2200      	movs	r2, #0
   d6c7c:	4611      	mov	r1, r2
   d6c7e:	6840      	ldr	r0, [r0, #4]
   d6c80:	f7ff bcea 	b.w	d6658 <network_get_listen_timeout>

000d6c84 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6c84:	2200      	movs	r2, #0
   d6c86:	6840      	ldr	r0, [r0, #4]
   d6c88:	f7ff bcde 	b.w	d6648 <network_set_listen_timeout>

000d6c8c <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6c8c:	2200      	movs	r2, #0
   d6c8e:	f081 0101 	eor.w	r1, r1, #1
   d6c92:	6840      	ldr	r0, [r0, #4]
   d6c94:	f7ff bcc8 	b.w	d6628 <network_listen>

000d6c98 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6c98:	2300      	movs	r3, #0
   d6c9a:	461a      	mov	r2, r3
   d6c9c:	4619      	mov	r1, r3
   d6c9e:	6840      	ldr	r0, [r0, #4]
   d6ca0:	f7ff bcba 	b.w	d6618 <network_off>

000d6ca4 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6ca4:	2300      	movs	r3, #0
   d6ca6:	461a      	mov	r2, r3
   d6ca8:	4619      	mov	r1, r3
   d6caa:	6840      	ldr	r0, [r0, #4]
   d6cac:	f7ff bcac 	b.w	d6608 <network_on>

000d6cb0 <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6cb0:	2200      	movs	r2, #0
   d6cb2:	4611      	mov	r1, r2
   d6cb4:	6840      	ldr	r0, [r0, #4]
   d6cb6:	f7ff bc9f 	b.w	d65f8 <network_ready>

000d6cba <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6cba:	2200      	movs	r2, #0
   d6cbc:	4611      	mov	r1, r2
   d6cbe:	6840      	ldr	r0, [r0, #4]
   d6cc0:	f7ff bc8a 	b.w	d65d8 <network_connecting>

000d6cc4 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6cc4:	2200      	movs	r2, #0
   d6cc6:	2102      	movs	r1, #2
   d6cc8:	6840      	ldr	r0, [r0, #4]
   d6cca:	f7ff bc8d 	b.w	d65e8 <network_disconnect>

000d6cce <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6cce:	2300      	movs	r3, #0
   d6cd0:	461a      	mov	r2, r3
   d6cd2:	6840      	ldr	r0, [r0, #4]
   d6cd4:	f7ff bc78 	b.w	d65c8 <network_connect>

000d6cd8 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d6cd8:	4b02      	ldr	r3, [pc, #8]	; (d6ce4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d6cda:	2203      	movs	r2, #3
   d6cdc:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d6cde:	4a02      	ldr	r2, [pc, #8]	; (d6ce8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d6ce0:	601a      	str	r2, [r3, #0]
   d6ce2:	4770      	bx	lr
   d6ce4:	2003e4cc 	.word	0x2003e4cc
   d6ce8:	000d9a28 	.word	0x000d9a28

000d6cec <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
   d6cec:	4770      	bx	lr

000d6cee <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d6cee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6cf0:	4606      	mov	r6, r0
   d6cf2:	4615      	mov	r5, r2
   d6cf4:	460c      	mov	r4, r1
   d6cf6:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6cf8:	42bc      	cmp	r4, r7
   d6cfa:	d006      	beq.n	d6d0a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d6cfc:	6833      	ldr	r3, [r6, #0]
   d6cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
   d6d02:	689b      	ldr	r3, [r3, #8]
   d6d04:	4630      	mov	r0, r6
   d6d06:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d6d08:	e7f6      	b.n	d6cf8 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d6d0a:	4628      	mov	r0, r5
   d6d0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6d0e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d6d0e:	2200      	movs	r2, #0
   d6d10:	7c00      	ldrb	r0, [r0, #16]
   d6d12:	f7ff baa3 	b.w	d625c <HAL_I2C_Write_Data>

000d6d16 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d6d16:	2100      	movs	r1, #0
   d6d18:	7c00      	ldrb	r0, [r0, #16]
   d6d1a:	f7ff baa7 	b.w	d626c <HAL_I2C_Available_Data>

000d6d1e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d6d1e:	2100      	movs	r1, #0
   d6d20:	7c00      	ldrb	r0, [r0, #16]
   d6d22:	f7ff baab 	b.w	d627c <HAL_I2C_Read_Data>

000d6d26 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d6d26:	2100      	movs	r1, #0
   d6d28:	7c00      	ldrb	r0, [r0, #16]
   d6d2a:	f7ff baaf 	b.w	d628c <HAL_I2C_Peek_Data>

000d6d2e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d6d2e:	2100      	movs	r1, #0
   d6d30:	7c00      	ldrb	r0, [r0, #16]
   d6d32:	f7ff bab3 	b.w	d629c <HAL_I2C_Flush_Data>

000d6d36 <_ZN7TwoWireD0Ev>:
   d6d36:	b510      	push	{r4, lr}
   d6d38:	4604      	mov	r4, r0
   d6d3a:	f7fd f9b0 	bl	d409e <_ZdlPv>
   d6d3e:	4620      	mov	r0, r4
   d6d40:	bd10      	pop	{r4, pc}
	...

000d6d44 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6d44:	b510      	push	{r4, lr}
   d6d46:	4604      	mov	r4, r0
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6d48:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d6d4c:	4608      	mov	r0, r1
   d6d4e:	60a3      	str	r3, [r4, #8]
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d6d50:	2100      	movs	r1, #0
   d6d52:	4b04      	ldr	r3, [pc, #16]	; (d6d64 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
{
  _i2c = i2c;
   d6d54:	7420      	strb	r0, [r4, #16]
   d6d56:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
   d6d58:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
   d6d5a:	f7ff faaf 	bl	d62bc <HAL_I2C_Init>

}
   d6d5e:	4620      	mov	r0, r4
   d6d60:	bd10      	pop	{r4, pc}
   d6d62:	bf00      	nop
   d6d64:	000d9a5c 	.word	0x000d9a5c

000d6d68 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d6d68:	2100      	movs	r1, #0
   d6d6a:	7c00      	ldrb	r0, [r0, #16]
   d6d6c:	f7ff ba9e 	b.w	d62ac <HAL_I2C_Is_Enabled>

000d6d70 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6d70:	4770      	bx	lr

000d6d72 <_ZN9IPAddressD0Ev>:
   d6d72:	b510      	push	{r4, lr}
   d6d74:	4604      	mov	r4, r0
   d6d76:	f7fd f992 	bl	d409e <_ZdlPv>
   d6d7a:	4620      	mov	r0, r4
   d6d7c:	bd10      	pop	{r4, pc}

000d6d7e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6d7e:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6d80:	7d03      	ldrb	r3, [r0, #20]
   d6d82:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6d84:	b08d      	sub	sp, #52	; 0x34
   d6d86:	460e      	mov	r6, r1
   d6d88:	f100 0704 	add.w	r7, r0, #4
   d6d8c:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6d90:	d002      	beq.n	d6d98 <_ZNK9IPAddress7printToER5Print+0x1a>
   d6d92:	f100 0508 	add.w	r5, r0, #8
   d6d96:	e018      	b.n	d6dca <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6d98:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6d9a:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d6d9c:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6da0:	232f      	movs	r3, #47	; 0x2f
   d6da2:	462a      	mov	r2, r5
   d6da4:	200a      	movs	r0, #10
   d6da6:	f7ff fab9 	bl	d631c <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d6daa:	4628      	mov	r0, r5
   d6dac:	f002 fd75 	bl	d989a <strlen>
   d6db0:	6833      	ldr	r3, [r6, #0]
   d6db2:	4602      	mov	r2, r0
   d6db4:	68db      	ldr	r3, [r3, #12]
   d6db6:	4629      	mov	r1, r5
   d6db8:	4630      	mov	r0, r6
   d6dba:	4798      	blx	r3
   d6dbc:	e00f      	b.n	d6dde <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d6dbe:	b124      	cbz	r4, d6dca <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d6dc0:	212e      	movs	r1, #46	; 0x2e
   d6dc2:	4630      	mov	r0, r6
   d6dc4:	f000 fc1e 	bl	d7604 <_ZN5Print5printEc>
   d6dc8:	4404      	add	r4, r0
        n += p.print((*this)[i], DEC);
   d6dca:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6dce:	220a      	movs	r2, #10
   d6dd0:	4630      	mov	r0, r6
   d6dd2:	f000 fc47 	bl	d7664 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6dd6:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6dd8:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6dda:	d1f0      	bne.n	d6dbe <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6ddc:	4620      	mov	r0, r4
    }
    return n;
}
   d6dde:	b00d      	add	sp, #52	; 0x34
   d6de0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d6de4 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d6de4:	b510      	push	{r4, lr}
   d6de6:	4b05      	ldr	r3, [pc, #20]	; (d6dfc <_ZN9IPAddressC1Ev+0x18>)
   d6de8:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6dea:	2211      	movs	r2, #17
   d6dec:	f840 3b04 	str.w	r3, [r0], #4
   d6df0:	2100      	movs	r1, #0
   d6df2:	f002 fce5 	bl	d97c0 <memset>
{
    clear();
}
   d6df6:	4620      	mov	r0, r4
   d6df8:	bd10      	pop	{r4, pc}
   d6dfa:	bf00      	nop
   d6dfc:	000d9a84 	.word	0x000d9a84

000d6e00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d6e00:	4603      	mov	r3, r0
   d6e02:	4a07      	ldr	r2, [pc, #28]	; (d6e20 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6e04:	b510      	push	{r4, lr}
   d6e06:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d6e0a:	f101 0210 	add.w	r2, r1, #16
   d6e0e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6e12:	f843 4b04 	str.w	r4, [r3], #4
   d6e16:	4291      	cmp	r1, r2
   d6e18:	d1f9      	bne.n	d6e0e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6e1a:	780a      	ldrb	r2, [r1, #0]
   d6e1c:	701a      	strb	r2, [r3, #0]
}
   d6e1e:	bd10      	pop	{r4, pc}
   d6e20:	000d9a84 	.word	0x000d9a84

000d6e24 <_ZNK9IPAddresscvbEv>:
{
    *this = address;
}

IPAddress::operator bool() const
{
   d6e24:	7d03      	ldrb	r3, [r0, #20]
#if Wiring_IPv6
    if (version() == 4) {
   d6e26:	2b04      	cmp	r3, #4
   d6e28:	d101      	bne.n	d6e2e <_ZNK9IPAddresscvbEv+0xa>
        return address.ipv4 != 0;
   d6e2a:	6840      	ldr	r0, [r0, #4]
   d6e2c:	e008      	b.n	d6e40 <_ZNK9IPAddresscvbEv+0x1c>
    } else if (version() == 6) {
   d6e2e:	2b06      	cmp	r3, #6
   d6e30:	d10a      	bne.n	d6e48 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 && address.ipv6[1] != 0 && address.ipv6[2] != 0 && address.ipv6[3] != 0;
   d6e32:	6843      	ldr	r3, [r0, #4]
   d6e34:	b153      	cbz	r3, d6e4c <_ZNK9IPAddresscvbEv+0x28>
   d6e36:	6883      	ldr	r3, [r0, #8]
   d6e38:	b143      	cbz	r3, d6e4c <_ZNK9IPAddresscvbEv+0x28>
   d6e3a:	68c3      	ldr	r3, [r0, #12]
   d6e3c:	b133      	cbz	r3, d6e4c <_ZNK9IPAddresscvbEv+0x28>
   d6e3e:	6900      	ldr	r0, [r0, #16]
   d6e40:	3000      	adds	r0, #0
   d6e42:	bf18      	it	ne
   d6e44:	2001      	movne	r0, #1
   d6e46:	4770      	bx	lr
   d6e48:	2000      	movs	r0, #0
   d6e4a:	4770      	bx	lr
   d6e4c:	4618      	mov	r0, r3
        return false;
    }
#else
    return address.ipv4!=0;
#endif
}
   d6e4e:	4770      	bx	lr

000d6e50 <_ZN9IPAddress8set_ipv4Ehhhh>:

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d6e50:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6e52:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6e56:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6e5a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6e5e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d6e62:	2304      	movs	r3, #4
   d6e64:	6041      	str	r1, [r0, #4]
   d6e66:	7503      	strb	r3, [r0, #20]
   d6e68:	bd10      	pop	{r4, pc}

000d6e6a <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d6e6a:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6e6c:	780d      	ldrb	r5, [r1, #0]
   d6e6e:	788b      	ldrb	r3, [r1, #2]
   d6e70:	784a      	ldrb	r2, [r1, #1]
   d6e72:	78c9      	ldrb	r1, [r1, #3]
   d6e74:	9100      	str	r1, [sp, #0]
   d6e76:	4629      	mov	r1, r5
   d6e78:	f7ff ffea 	bl	d6e50 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d6e7c:	b003      	add	sp, #12
   d6e7e:	bd30      	pop	{r4, r5, pc}

000d6e80 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
   d6e80:	b510      	push	{r4, lr}
   d6e82:	4b03      	ldr	r3, [pc, #12]	; (d6e90 <_ZN9IPAddressC1EPKh+0x10>)
   d6e84:	6003      	str	r3, [r0, #0]
   d6e86:	4604      	mov	r4, r0
{
    *this = address;
   d6e88:	f7ff ffef 	bl	d6e6a <_ZN9IPAddressaSEPKh>
}
   d6e8c:	4620      	mov	r0, r4
   d6e8e:	bd10      	pop	{r4, pc}
   d6e90:	000d9a84 	.word	0x000d9a84

000d6e94 <_ZN14RecursiveMutex4lockEv>:
            os_mutex_recursive_destroy(handle_);
            handle_ = nullptr;
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
   d6e94:	6800      	ldr	r0, [r0, #0]
   d6e96:	f7ff b981 	b.w	d619c <os_mutex_recursive_lock>
	...

000d6e9c <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6e9c:	4b01      	ldr	r3, [pc, #4]	; (d6ea4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6e9e:	4a02      	ldr	r2, [pc, #8]	; (d6ea8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6ea0:	601a      	str	r2, [r3, #0]
   d6ea2:	4770      	bx	lr
   d6ea4:	2003e4d4 	.word	0x2003e4d4
   d6ea8:	000d9b3e 	.word	0x000d9b3e

000d6eac <_ZN6Thread3runEPv>:
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6eac:	b510      	push	{r4, lr}
        Data* th = (Data*)param;
        th->started = true;
   d6eae:	2301      	movs	r3, #1
   d6eb0:	7403      	strb	r3, [r0, #16]
        if (th->func) {
   d6eb2:	6883      	ldr	r3, [r0, #8]
        return *this;
    }

private:

    static os_thread_return_t run(void* param) {
   d6eb4:	4604      	mov	r4, r0
        Data* th = (Data*)param;
        th->started = true;
        if (th->func) {
   d6eb6:	b10b      	cbz	r3, d6ebc <_ZN6Thread3runEPv+0x10>
            (*(th->func))(th->func_param);
   d6eb8:	68c0      	ldr	r0, [r0, #12]
   d6eba:	e006      	b.n	d6eca <_ZN6Thread3runEPv+0x1e>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6ebc:	6800      	ldr	r0, [r0, #0]
        } else if (th->wrapper) {
   d6ebe:	b128      	cbz	r0, d6ecc <_ZN6Thread3runEPv+0x20>
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
   d6ec0:	6883      	ldr	r3, [r0, #8]
   d6ec2:	b90b      	cbnz	r3, d6ec8 <_ZN6Thread3runEPv+0x1c>
	__throw_bad_function_call();
   d6ec4:	f001 fd0b 	bl	d88de <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
   d6ec8:	68c3      	ldr	r3, [r0, #12]
   d6eca:	4798      	blx	r3
            (*(th->wrapper))();
        }
        th->exited = true;
   d6ecc:	2301      	movs	r3, #1
   d6ece:	7463      	strb	r3, [r4, #17]
        os_thread_exit(nullptr);
   d6ed0:	2000      	movs	r0, #0
    }
   d6ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            (*(th->func))(th->func_param);
        } else if (th->wrapper) {
            (*(th->wrapper))();
        }
        th->exited = true;
        os_thread_exit(nullptr);
   d6ed6:	f7ff b971 	b.w	d61bc <os_thread_exit>

000d6eda <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6eda:	2200      	movs	r2, #0
   d6edc:	4611      	mov	r1, r2
   d6ede:	6840      	ldr	r0, [r0, #4]
   d6ee0:	f7ff bbaa 	b.w	d6638 <network_listening>

000d6ee4 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d6ee4:	2200      	movs	r2, #0
   d6ee6:	4611      	mov	r1, r2
   d6ee8:	6840      	ldr	r0, [r0, #4]
   d6eea:	f7ff bbb5 	b.w	d6658 <network_get_listen_timeout>

000d6eee <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d6eee:	2200      	movs	r2, #0
   d6ef0:	6840      	ldr	r0, [r0, #4]
   d6ef2:	f7ff bba9 	b.w	d6648 <network_set_listen_timeout>

000d6ef6 <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d6ef6:	2200      	movs	r2, #0
   d6ef8:	f081 0101 	eor.w	r1, r1, #1
   d6efc:	6840      	ldr	r0, [r0, #4]
   d6efe:	f7ff bb93 	b.w	d6628 <network_listen>

000d6f02 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d6f02:	2300      	movs	r3, #0
   d6f04:	461a      	mov	r2, r3
   d6f06:	4619      	mov	r1, r3
   d6f08:	6840      	ldr	r0, [r0, #4]
   d6f0a:	f7ff bb85 	b.w	d6618 <network_off>

000d6f0e <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d6f0e:	2300      	movs	r3, #0
   d6f10:	461a      	mov	r2, r3
   d6f12:	4619      	mov	r1, r3
   d6f14:	6840      	ldr	r0, [r0, #4]
   d6f16:	f7ff bb77 	b.w	d6608 <network_on>

000d6f1a <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d6f1a:	2200      	movs	r2, #0
   d6f1c:	4611      	mov	r1, r2
   d6f1e:	6840      	ldr	r0, [r0, #4]
   d6f20:	f7ff bb6a 	b.w	d65f8 <network_ready>

000d6f24 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d6f24:	2200      	movs	r2, #0
   d6f26:	4611      	mov	r1, r2
   d6f28:	6840      	ldr	r0, [r0, #4]
   d6f2a:	f7ff bb55 	b.w	d65d8 <network_connecting>

000d6f2e <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d6f2e:	2200      	movs	r2, #0
   d6f30:	2102      	movs	r1, #2
   d6f32:	6840      	ldr	r0, [r0, #4]
   d6f34:	f7ff bb58 	b.w	d65e8 <network_disconnect>

000d6f38 <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d6f38:	2300      	movs	r3, #0
   d6f3a:	461a      	mov	r2, r3
   d6f3c:	6840      	ldr	r0, [r0, #4]
   d6f3e:	f7ff bb43 	b.w	d65c8 <network_connect>

000d6f42 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d6f42:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f44:	4605      	mov	r5, r0
   d6f46:	b178      	cbz	r0, d6f68 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x26>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6f48:	6804      	ldr	r4, [r0, #0]
   d6f4a:	b144      	cbz	r4, d6f5e <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x1c>

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
   d6f4c:	68a3      	ldr	r3, [r4, #8]
   d6f4e:	b11b      	cbz	r3, d6f58 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6f50:	2203      	movs	r2, #3
   d6f52:	4621      	mov	r1, r4
   d6f54:	4620      	mov	r0, r4
   d6f56:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f58:	4620      	mov	r0, r4
   d6f5a:	f7fd f8a0 	bl	d409e <_ZdlPv>
   d6f5e:	4628      	mov	r0, r5
      }
   d6f60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6f64:	f7fd b89b 	b.w	d409e <_ZdlPv>
   d6f68:	bd38      	pop	{r3, r4, r5, pc}

000d6f6a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>:
   d6f6a:	b110      	cbz	r0, d6f72 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15+0x8>
   d6f6c:	6803      	ldr	r3, [r0, #0]
   d6f6e:	685b      	ldr	r3, [r3, #4]
   d6f70:	4718      	bx	r3
   d6f72:	4770      	bx	lr

000d6f74 <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d6f74:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d6f76:	6803      	ldr	r3, [r0, #0]
   d6f78:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d6f7a:	b1bb      	cbz	r3, d6fac <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d6f7c:	6858      	ldr	r0, [r3, #4]
   d6f7e:	f7ff f8dd 	bl	d613c <os_thread_is_current>
   d6f82:	b978      	cbnz	r0, d6fa4 <_ZN6ThreadD1Ev+0x30>
   d6f84:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d6f86:	7c5a      	ldrb	r2, [r3, #17]
   d6f88:	b912      	cbnz	r2, d6f90 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d6f8a:	6858      	ldr	r0, [r3, #4]
   d6f8c:	f7ff f8e6 	bl	d615c <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d6f90:	6823      	ldr	r3, [r4, #0]
   d6f92:	6858      	ldr	r0, [r3, #4]
   d6f94:	f7ff f8ea 	bl	d616c <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d6f98:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d6f9a:	2300      	movs	r3, #0
   d6f9c:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d6f9e:	b128      	cbz	r0, d6fac <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d6fa0:	f7ff ffcf 	bl	d6f42 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fa4:	6820      	ldr	r0, [r4, #0]
   d6fa6:	b108      	cbz	r0, d6fac <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d6fa8:	f7ff ffcb 	bl	d6f42 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
    }

    ~Thread()
    {
        dispose();
    }
   d6fac:	4620      	mov	r0, r4
   d6fae:	bd10      	pop	{r4, pc}

000d6fb0 <_ZN5spark9MeshClassD1Ev>:
     * Pull data from the socket and handle as required.
     */
    int poll();
};

class MeshClass : public NetworkClass, public MeshPublish {
   d6fb0:	b538      	push	{r3, r4, r5, lr}
   d6fb2:	4b0b      	ldr	r3, [pc, #44]	; (d6fe0 <_ZN5spark9MeshClassD1Ev+0x30>)
   d6fb4:	6003      	str	r3, [r0, #0]
   d6fb6:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fb8:	f8d0 01cc 	ldr.w	r0, [r0, #460]	; 0x1cc
   d6fbc:	b108      	cbz	r0, d6fc2 <_ZN5spark9MeshClassD1Ev+0x12>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d6fbe:	f7fd f870 	bl	d40a2 <_ZdaPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fc2:	f8d4 51c4 	ldr.w	r5, [r4, #452]	; 0x1c4
   d6fc6:	b12d      	cbz	r5, d6fd4 <_ZN5spark9MeshClassD1Ev+0x24>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d6fc8:	4628      	mov	r0, r5
   d6fca:	f7ff ffd3 	bl	d6f74 <_ZN6ThreadD1Ev>
   d6fce:	4628      	mov	r0, r5
   d6fd0:	f7fd f865 	bl	d409e <_ZdlPv>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d6fd4:	68a0      	ldr	r0, [r4, #8]
   d6fd6:	b108      	cbz	r0, d6fdc <_ZN5spark9MeshClassD1Ev+0x2c>
	  get_deleter()(__ptr);
   d6fd8:	f7ff ffc7 	bl	d6f6a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
   d6fdc:	4620      	mov	r0, r4
   d6fde:	bd38      	pop	{r3, r4, r5, pc}
   d6fe0:	000d9b70 	.word	0x000d9b70

000d6fe4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
    return spark::Mesh.poll();
}

bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d6fe4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6fe8:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   d6fea:	f89d b028 	ldrb.w	fp, [sp, #40]	; 0x28
   d6fee:	4606      	mov	r6, r0
   d6ff0:	4688      	mov	r8, r1
   d6ff2:	4691      	mov	r9, r2
   d6ff4:	469a      	mov	sl, r3
   d6ff6:	4604      	mov	r4, r0
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d6ff8:	2500      	movs	r5, #0
    {
        if (event_handlers[i].handler == handler
   d6ffa:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d6ffc:	454b      	cmp	r3, r9
   d6ffe:	d129      	bne.n	d7054 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].handler_data == handler_data
   d7000:	6c63      	ldr	r3, [r4, #68]	; 0x44
   d7002:	4553      	cmp	r3, sl
   d7004:	d126      	bne.n	d7054 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
                && event_handlers[i].scope == scope)
   d7006:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   d700a:	455b      	cmp	r3, fp
   d700c:	d122      	bne.n	d7054 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d700e:	2140      	movs	r1, #64	; 0x40
   d7010:	4640      	mov	r0, r8
   d7012:	f002 fc72 	bl	d98fa <strnlen>
            if (!strncmp(event_handlers[i].filter, event_name, FILTER_LEN))
   d7016:	4641      	mov	r1, r8
   d7018:	4602      	mov	r2, r0
   d701a:	4620      	mov	r0, r4
   d701c:	f002 fc45 	bl	d98aa <strncmp>
   d7020:	b9c0      	cbnz	r0, d7054 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
            {
                const size_t MAX_ID_LEN =
                        sizeof(event_handlers[i].device_id) - 1;
                const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d7022:	b16f      	cbz	r7, d7040 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
   d7024:	210c      	movs	r1, #12
   d7026:	4638      	mov	r0, r7
   d7028:	f002 fc67 	bl	d98fa <strnlen>
                if (id_len)
   d702c:	4602      	mov	r2, r0
   d702e:	b138      	cbz	r0, d7040 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x5c>
                    return !strncmp(event_handlers[i].device_id, id, id_len);
   d7030:	2358      	movs	r3, #88	; 0x58
   d7032:	fb03 6005 	mla	r0, r3, r5, r6
   d7036:	4639      	mov	r1, r7
   d7038:	3049      	adds	r0, #73	; 0x49
   d703a:	f002 fc36 	bl	d98aa <strncmp>
   d703e:	e004      	b.n	d704a <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x66>
                else
                    return !event_handlers[i].device_id[0];
   d7040:	2058      	movs	r0, #88	; 0x58
   d7042:	fb00 6505 	mla	r5, r0, r5, r6
   d7046:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
   d704a:	fab0 f080 	clz	r0, r0
   d704e:	0940      	lsrs	r0, r0, #5
   d7050:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
bool MeshPublish::Subscriptions::event_handler_exists(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    const int NUM_HANDLERS = sizeof(event_handlers)
            / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d7054:	3501      	adds	r5, #1
   d7056:	2d05      	cmp	r5, #5
   d7058:	f104 0458 	add.w	r4, r4, #88	; 0x58
   d705c:	d1cd      	bne.n	d6ffa <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x16>
                else
                    return !event_handlers[i].device_id[0];
            }
        }
    }
    return false;
   d705e:	2000      	movs	r0, #0
}
   d7060:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000d7064 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d7064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7068:	b085      	sub	sp, #20
   d706a:	4607      	mov	r7, r0
   d706c:	f89d a038 	ldrb.w	sl, [sp, #56]	; 0x38
   d7070:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d7072:	9601      	str	r6, [sp, #4]
   d7074:	f8cd a000 	str.w	sl, [sp]
/**
 * Adds the given handler.
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
   d7078:	4689      	mov	r9, r1
   d707a:	9202      	str	r2, [sp, #8]
   d707c:	9303      	str	r3, [sp, #12]
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
   d707e:	f7ff ffb1 	bl	d6fe4 <_ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
   d7082:	2800      	cmp	r0, #0
   d7084:	d13c      	bne.n	d7100 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9c>
   d7086:	4604      	mov	r4, r0
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d7088:	2358      	movs	r3, #88	; 0x58
   d708a:	fb03 7504 	mla	r5, r3, r4, r7
   d708e:	f8d5 8040 	ldr.w	r8, [r5, #64]	; 0x40
   d7092:	f1b8 0f00 	cmp.w	r8, #0
   d7096:	d12e      	bne.n	d70f6 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x92>
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d7098:	2140      	movs	r1, #64	; 0x40
   d709a:	4648      	mov	r0, r9
   d709c:	f002 fc2d 	bl	d98fa <strnlen>
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d70a0:	4649      	mov	r1, r9
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
        {
            const size_t MAX_FILTER_LEN = sizeof(event_handlers[i].filter);
            const size_t FILTER_LEN = strnlen(event_name, MAX_FILTER_LEN);
   d70a2:	4683      	mov	fp, r0
            memcpy(event_handlers[i].filter, event_name, FILTER_LEN);
   d70a4:	4602      	mov	r2, r0
   d70a6:	4628      	mov	r0, r5
   d70a8:	f002 fb7f 	bl	d97aa <memcpy>
            memset(event_handlers[i].filter + FILTER_LEN, 0, MAX_FILTER_LEN - FILTER_LEN);
   d70ac:	f1cb 0240 	rsb	r2, fp, #64	; 0x40
   d70b0:	4641      	mov	r1, r8
   d70b2:	eb05 000b 	add.w	r0, r5, fp
   d70b6:	f002 fb83 	bl	d97c0 <memset>
            event_handlers[i].handler = handler;
   d70ba:	9b02      	ldr	r3, [sp, #8]
   d70bc:	642b      	str	r3, [r5, #64]	; 0x40
            event_handlers[i].handler_data = handler_data;
   d70be:	9b03      	ldr	r3, [sp, #12]
   d70c0:	646b      	str	r3, [r5, #68]	; 0x44
            event_handlers[i].device_id[0] = 0;
   d70c2:	f885 8049 	strb.w	r8, [r5, #73]	; 0x49
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
   d70c6:	b12e      	cbz	r6, d70d4 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x70>
   d70c8:	210c      	movs	r1, #12
   d70ca:	4630      	mov	r0, r6
   d70cc:	f002 fc15 	bl	d98fa <strnlen>
   d70d0:	4605      	mov	r5, r0
   d70d2:	e000      	b.n	d70d6 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x72>
   d70d4:	4635      	mov	r5, r6
            memcpy(event_handlers[i].device_id, id, id_len);
   d70d6:	2058      	movs	r0, #88	; 0x58
   d70d8:	4344      	muls	r4, r0
   d70da:	1938      	adds	r0, r7, r4
            event_handlers[i].device_id[id_len] = 0;
   d70dc:	443c      	add	r4, r7
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d70de:	462a      	mov	r2, r5
   d70e0:	4631      	mov	r1, r6
   d70e2:	3049      	adds	r0, #73	; 0x49
            event_handlers[i].device_id[id_len] = 0;
   d70e4:	4425      	add	r5, r4
            event_handlers[i].handler = handler;
            event_handlers[i].handler_data = handler_data;
            event_handlers[i].device_id[0] = 0;
            const size_t MAX_ID_LEN = sizeof(event_handlers[i].device_id) - 1;
            const size_t id_len = id ? strnlen(id, MAX_ID_LEN) : 0;
            memcpy(event_handlers[i].device_id, id, id_len);
   d70e6:	f002 fb60 	bl	d97aa <memcpy>
            event_handlers[i].device_id[id_len] = 0;
   d70ea:	2000      	movs	r0, #0
   d70ec:	f885 0049 	strb.w	r0, [r5, #73]	; 0x49
            event_handlers[i].scope = scope;
   d70f0:	f884 a048 	strb.w	sl, [r4, #72]	; 0x48
   d70f4:	e005      	b.n	d7102 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;

    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d70f6:	3401      	adds	r4, #1
   d70f8:	2c05      	cmp	r4, #5
   d70fa:	d1c6      	bne.n	d708a <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x26>
            event_handlers[i].device_id[id_len] = 0;
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
   d70fc:	4802      	ldr	r0, [pc, #8]	; (d7108 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0xa4>)
   d70fe:	e000      	b.n	d7102 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x9e>
 */
int MeshPublish::Subscriptions::add_event_handler(const char *event_name, EventHandler handler,
        void *handler_data, SubscriptionScope::Enum scope, const char* id)
{
    if (event_handler_exists(event_name, handler, handler_data, scope, id))
        return SYSTEM_ERROR_NONE;
   d7100:	2000      	movs	r0, #0
            event_handlers[i].scope = scope;
            return SYSTEM_ERROR_NONE;
        }
    }
    return SYSTEM_ERROR_NO_MEMORY;
}
   d7102:	b005      	add	sp, #20
   d7104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7108:	fffffefc 	.word	0xfffffefc

000d710c <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>:


int MeshPublish::Subscriptions::add(const char* name, EventHandler handler)
{
   d710c:	b507      	push	{r0, r1, r2, lr}
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
   d710e:	2300      	movs	r3, #0
   d7110:	9301      	str	r3, [sp, #4]
   d7112:	9300      	str	r3, [sp, #0]
   d7114:	f7ff ffa6 	bl	d7064 <_ZN5spark11MeshPublish13Subscriptions17add_event_handlerEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>
}
   d7118:	b003      	add	sp, #12
   d711a:	f85d fb04 	ldr.w	pc, [sp], #4

000d711e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>:

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d711e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7122:	4604      	mov	r4, r0
    const size_t event_name_length = strlen(event_name);
   d7124:	4608      	mov	r0, r1
{
    return add_event_handler(name, handler, nullptr, SubscriptionScope::MY_DEVICES, nullptr);
}

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
   d7126:	460d      	mov	r5, r1
   d7128:	4690      	mov	r8, r2
    const size_t event_name_length = strlen(event_name);
   d712a:	f002 fbb6 	bl	d989a <strlen>
   d712e:	f504 76dc 	add.w	r6, r4, #440	; 0x1b8
   d7132:	4607      	mov	r7, r0
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
    {
        if (NULL == event_handlers[i].handler)
   d7134:	6c23      	ldr	r3, [r4, #64]	; 0x40
   d7136:	b1ab      	cbz	r3, d7164 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x46>
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d7138:	2140      	movs	r1, #64	; 0x40
   d713a:	4620      	mov	r0, r4
   d713c:	f002 fbdd 	bl	d98fa <strnlen>

        if (event_name_length < filter_length)
   d7140:	4287      	cmp	r7, r0
        {
            break;
        }
        const size_t MAX_FILTER_LENGTH = sizeof(event_handlers[i].filter);
        const size_t filter_length = strnlen(event_handlers[i].filter,
                MAX_FILTER_LENGTH);
   d7142:	4602      	mov	r2, r0

        if (event_name_length < filter_length)
   d7144:	d30b      	bcc.n	d715e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
            // does not match this filter, try the next event handler
            continue;
        }

        const int cmp = memcmp(event_handlers[i].filter, event_name,
                filter_length);
   d7146:	4629      	mov	r1, r5
   d7148:	4620      	mov	r0, r4
   d714a:	f002 fb1f 	bl	d978c <memcmp>
        if (0 == cmp)
   d714e:	b930      	cbnz	r0, d715e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x40>
        {
            system_invoke_event_handler(sizeof(FilteringEventHandler),
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
   d7150:	9000      	str	r0, [sp, #0]
   d7152:	4643      	mov	r3, r8
   d7154:	462a      	mov	r2, r5
   d7156:	4621      	mov	r1, r4
   d7158:	2058      	movs	r0, #88	; 0x58
   d715a:	f7ff fa13 	bl	d6584 <system_invoke_event_handler>
   d715e:	3458      	adds	r4, #88	; 0x58

void MeshPublish::Subscriptions::send(const char* event_name, const char* data)
{
    const size_t event_name_length = strlen(event_name);
    const int NUM_HANDLERS = sizeof(event_handlers) / sizeof(FilteringEventHandler);
    for (int i = 0; i < NUM_HANDLERS; i++)
   d7160:	42b4      	cmp	r4, r6
   d7162:	d1e7      	bne.n	d7134 <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_+0x16>
                                            &event_handlers[i], (const char*) event_name,
                                            (const char*) data, nullptr);
        }
        // else continue the for loop to try the next handler
    }
}
   d7164:	b002      	add	sp, #8
   d7166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

000d716c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>:

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
   d716c:	b530      	push	{r4, r5, lr}
   d716e:	b08d      	sub	sp, #52	; 0x34
   d7170:	4604      	mov	r4, r0
    HAL_IPAddress addr = {};
   d7172:	2211      	movs	r2, #17
   d7174:	2100      	movs	r1, #0
   d7176:	a801      	add	r0, sp, #4
   d7178:	f002 fb22 	bl	d97c0 <memset>
    addr.v = 6;
   d717c:	2306      	movs	r3, #6
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d717e:	aa01      	add	r2, sp, #4
   d7180:	4909      	ldr	r1, [pc, #36]	; (d71a8 <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress+0x3c>)
    }
}

int MeshPublish::fetchMulticastAddress(IPAddress& mcastAddr) {
    HAL_IPAddress addr = {};
    addr.v = 6;
   d7182:	f88d 3014 	strb.w	r3, [sp, #20]
    inet_inet_pton(AF_INET6, MULTICAST_ADDR, addr.ipv6);
   d7186:	200a      	movs	r0, #10
   d7188:	f7ff f8d0 	bl	d632c <inet_inet_pton>

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d718c:	ad07      	add	r5, sp, #28
    mcastAddr = addr;
   d718e:	a901      	add	r1, sp, #4
   d7190:	a806      	add	r0, sp, #24
   d7192:	f7ff fe35 	bl	d6e00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7196:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7198:	3404      	adds	r4, #4
   d719a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d719c:	682b      	ldr	r3, [r5, #0]
   d719e:	7023      	strb	r3, [r4, #0]
    return 0;
}
   d71a0:	2000      	movs	r0, #0
   d71a2:	b00d      	add	sp, #52	; 0x34
   d71a4:	bd30      	pop	{r4, r5, pc}
   d71a6:	bf00      	nop
   d71a8:	000d9b9c 	.word	0x000d9b9c

000d71ac <_ZN5spark11MeshPublish14initialize_udpEv>:

int MeshPublish::initialize_udp() {
   d71ac:	b530      	push	{r4, r5, lr}
   d71ae:	4604      	mov	r4, r0
   d71b0:	b089      	sub	sp, #36	; 0x24
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
   d71b2:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d71b6:	f7ff fe6d 	bl	d6e94 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
   d71ba:	6823      	ldr	r3, [r4, #0]
   d71bc:	bb83      	cbnz	r3, d7220 <_ZN5spark11MeshPublish14initialize_udpEv+0x74>
        return SYSTEM_ERROR_NONE;
    }
    udp.reset(new UDP());
   d71be:	204c      	movs	r0, #76	; 0x4c
   d71c0:	f7fc ff69 	bl	d4096 <_Znwj>
   d71c4:	4605      	mov	r5, r0
   d71c6:	b108      	cbz	r0, d71cc <_ZN5spark11MeshPublish14initialize_udpEv+0x20>
   d71c8:	f001 f884 	bl	d82d4 <_ZN3UDPC1Ev>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d71cc:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d71ce:	6025      	str	r5, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d71d0:	b108      	cbz	r0, d71d6 <_ZN5spark11MeshPublish14initialize_udpEv+0x2a>
	  get_deleter()(__p);
   d71d2:	f7ff feca 	bl	d6f6a <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.10.constprop.15>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d71d6:	6820      	ldr	r0, [r4, #0]
    if (!udp) {
   d71d8:	b320      	cbz	r0, d7224 <_ZN5spark11MeshPublish14initialize_udpEv+0x78>
        return SYSTEM_ERROR_NO_MEMORY;
    }
    udp->setBuffer(MAX_PACKET_LEN);
   d71da:	2200      	movs	r2, #0
   d71dc:	f44f 619a 	mov.w	r1, #1232	; 0x4d0
   d71e0:	f001 f8a7 	bl	d8332 <_ZN3UDP9setBufferEjPh>
    // Get OpenThread interface index (     interface is named "th1" on all Mesh devices)
    uint8_t idx = 0;
   d71e4:	a908      	add	r1, sp, #32
   d71e6:	2500      	movs	r5, #0
   d71e8:	f801 5d19 	strb.w	r5, [r1, #-25]!
    if_name_to_index("th1", &idx);
   d71ec:	4811      	ldr	r0, [pc, #68]	; (d7234 <_ZN5spark11MeshPublish14initialize_udpEv+0x88>)
   d71ee:	f7ff f86d 	bl	d62cc <if_name_to_index>
   d71f2:	6820      	ldr	r0, [r4, #0]
     // Create UDP socket and bind to OpenThread interface
    CHECK(udp->begin(PORT, idx));
   d71f4:	f89d 2007 	ldrb.w	r2, [sp, #7]
   d71f8:	6803      	ldr	r3, [r0, #0]
   d71fa:	f249 0169 	movw	r1, #36969	; 0x9069
   d71fe:	6a1b      	ldr	r3, [r3, #32]
   d7200:	4798      	blx	r3
    // subscribe to multicast

    IPAddress mcastAddr;
   d7202:	a802      	add	r0, sp, #8
   d7204:	f7ff fdee 	bl	d6de4 <_ZN9IPAddressC1Ev>
    CHECK(fetchMulticastAddress(mcastAddr));
   d7208:	a802      	add	r0, sp, #8
   d720a:	f7ff ffaf 	bl	d716c <_ZN5spark11MeshPublish21fetchMulticastAddressER9IPAddress>
   d720e:	2800      	cmp	r0, #0
   d7210:	db04      	blt.n	d721c <_ZN5spark11MeshPublish14initialize_udpEv+0x70>
    udp->joinMulticast(mcastAddr);
   d7212:	a902      	add	r1, sp, #8
   d7214:	6820      	ldr	r0, [r4, #0]
   d7216:	f001 f8f6 	bl	d8406 <_ZN3UDP13joinMulticastERK9IPAddress>
    return SYSTEM_ERROR_NONE;
   d721a:	e004      	b.n	d7226 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
   d721c:	4605      	mov	r5, r0
   d721e:	e002      	b.n	d7226 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
}

int MeshPublish::initialize_udp() {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (udp) {
        return SYSTEM_ERROR_NONE;
   d7220:	2500      	movs	r5, #0
   d7222:	e000      	b.n	d7226 <_ZN5spark11MeshPublish14initialize_udpEv+0x7a>
    }
    udp.reset(new UDP());
    if (!udp) {
        return SYSTEM_ERROR_NO_MEMORY;
   d7224:	4d04      	ldr	r5, [pc, #16]	; (d7238 <_ZN5spark11MeshPublish14initialize_udpEv+0x8c>)
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d7226:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d722a:	f7fe ffbf 	bl	d61ac <os_mutex_recursive_unlock>

    IPAddress mcastAddr;
    CHECK(fetchMulticastAddress(mcastAddr));
    udp->joinMulticast(mcastAddr);
    return SYSTEM_ERROR_NONE;
}
   d722e:	4628      	mov	r0, r5
   d7230:	b009      	add	sp, #36	; 0x24
   d7232:	bd30      	pop	{r4, r5, pc}
   d7234:	000d9ba9 	.word	0x000d9ba9
   d7238:	fffffefc 	.word	0xfffffefc

000d723c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E>:
    }
    CHECK(udp->endPacket());
    return SYSTEM_ERROR_NONE;
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
   d723c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   d7240:	4604      	mov	r4, r0
   d7242:	f500 70e0 	add.w	r0, r0, #448	; 0x1c0
   d7246:	460f      	mov	r7, r1
   d7248:	4690      	mov	r8, r2
   d724a:	f7ff fe23 	bl	d6e94 <_ZN14RecursiveMutex4lockEv>
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
   d724e:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
   d7252:	2e00      	cmp	r6, #0
   d7254:	d139      	bne.n	d72ca <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x8e>
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d7256:	4928      	ldr	r1, [pc, #160]	; (d72f8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xbc>)
   d7258:	2004      	movs	r0, #4
   d725a:	f001 fb2f 	bl	d88bc <_ZnwjRKSt9nothrow_t>
   d725e:	4605      	mov	r5, r0
   d7260:	b340      	cbz	r0, d72b4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
    {
    }

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
   d7262:	4925      	ldr	r1, [pc, #148]	; (d72f8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xbc>)
   d7264:	2014      	movs	r0, #20
   d7266:	f001 fb29 	bl	d88bc <_ZnwjRKSt9nothrow_t>
   d726a:	b128      	cbz	r0, d7278 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x3c>
        Data() :
            handle(OS_THREAD_INVALID_HANDLE),
            func(nullptr),
            func_param(nullptr),
            started(false),
            exited(false) {
   d726c:	7406      	strb	r6, [r0, #16]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d726e:	6006      	str	r6, [r0, #0]
   d7270:	6046      	str	r6, [r0, #4]
   d7272:	6086      	str	r6, [r0, #8]
   d7274:	60c6      	str	r6, [r0, #12]
   d7276:	7446      	strb	r6, [r0, #17]
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
   d7278:	6028      	str	r0, [r5, #0]

    Thread(const char* name, os_thread_fn_t function, void* function_param=NULL,
            os_thread_prio_t priority=OS_THREAD_PRIORITY_DEFAULT, size_t stack_size=OS_THREAD_STACK_SIZE_DEFAULT)
        : d_(new(std::nothrow) Data)
    {
        if (!d_) {
   d727a:	b1a8      	cbz	r0, d72a8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x6c>
            goto error;
        }
        d_->func = function;
   d727c:	4b1f      	ldr	r3, [pc, #124]	; (d72fc <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc0>)
   d727e:	6083      	str	r3, [r0, #8]
   d7280:	682b      	ldr	r3, [r5, #0]
        d_->func_param = function_param;
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7282:	491f      	ldr	r1, [pc, #124]	; (d7300 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc4>)
    {
        if (!d_) {
            goto error;
        }
        d_->func = function;
        d_->func_param = function_param;
   d7284:	60dc      	str	r4, [r3, #12]
   d7286:	6828      	ldr	r0, [r5, #0]
        if (os_thread_create(&d_->handle, name, priority, &Thread::run, d_.get(), stack_size) != 0) {
   d7288:	f44f 6340 	mov.w	r3, #3072	; 0xc00
   d728c:	e88d 0009 	stmia.w	sp, {r0, r3}
   d7290:	2203      	movs	r2, #3
   d7292:	4b1c      	ldr	r3, [pc, #112]	; (d7304 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xc8>)
   d7294:	3004      	adds	r0, #4
   d7296:	f7fe ff49 	bl	d612c <os_thread_create>
   d729a:	b928      	cbnz	r0, d72a8 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x6c>
   d729c:	682b      	ldr	r3, [r5, #0]
            goto error;
        }
        while (!d_->started) {
   d729e:	7c1b      	ldrb	r3, [r3, #16]
   d72a0:	b943      	cbnz	r3, d72b4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
            os_thread_yield();
   d72a2:	f7fe ff53 	bl	d614c <os_thread_yield>
   d72a6:	e7f9      	b.n	d729c <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x60>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d72a8:	6828      	ldr	r0, [r5, #0]
      __a = _GLIBCXX_MOVE(__b);
   d72aa:	2300      	movs	r3, #0
   d72ac:	602b      	str	r3, [r5, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d72ae:	b108      	cbz	r0, d72b4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x78>
	  get_deleter()(__p);
   d72b0:	f7ff fe47 	bl	d6f42 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.8>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d72b4:	f8d4 61bc 	ldr.w	r6, [r4, #444]	; 0x1bc
      __a = _GLIBCXX_MOVE(__b);
   d72b8:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d72bc:	b12e      	cbz	r6, d72ca <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0x8e>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d72be:	4630      	mov	r0, r6
   d72c0:	f7ff fe58 	bl	d6f74 <_ZN6ThreadD1Ev>
   d72c4:	4630      	mov	r0, r6
   d72c6:	f7fc feea 	bl	d409e <_ZdlPv>
            while (true) {
                self->poll();
            }
        }, this, OS_THREAD_PRIORITY_DEFAULT + 1));
    }
    CHECK(initialize_udp());
   d72ca:	4620      	mov	r0, r4
   d72cc:	f7ff ff6e 	bl	d71ac <_ZN5spark11MeshPublish14initialize_udpEv>
   d72d0:	2800      	cmp	r0, #0
   d72d2:	db07      	blt.n	d72e4 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xa8>
    CHECK(subscriptions.add(prefix, handler));
   d72d4:	4642      	mov	r2, r8
   d72d6:	4639      	mov	r1, r7
   d72d8:	1d20      	adds	r0, r4, #4
   d72da:	f7ff ff17 	bl	d710c <_ZN5spark11MeshPublish13Subscriptions3addEPKcPFvS3_S3_E>
   d72de:	ea00 75e0 	and.w	r5, r0, r0, asr #31
   d72e2:	e000      	b.n	d72e6 <_ZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_E+0xaa>
   d72e4:	4605      	mov	r5, r0
        }
    }

    void lock() { os_mutex_recursive_lock(handle_); }
    bool trylock() { return os_mutex_recursive_trylock(handle_)==0; }
    void unlock() { os_mutex_recursive_unlock(handle_); }
   d72e6:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d72ea:	f7fe ff5f 	bl	d61ac <os_mutex_recursive_unlock>
    return SYSTEM_ERROR_NONE;
}
   d72ee:	4628      	mov	r0, r5
   d72f0:	b002      	add	sp, #8
   d72f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d72f6:	bf00      	nop
   d72f8:	000d9db8 	.word	0x000d9db8
   d72fc:	000d7419 	.word	0x000d7419
   d7300:	000d9bad 	.word	0x000d9bad
   d7304:	000d6ead 	.word	0x000d6ead

000d7308 <_ZN5spark11MeshPublish4pollEv>:

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d7308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d730c:	4605      	mov	r5, r0
    int result = 0;
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
   d730e:	f500 76e0 	add.w	r6, r0, #448	; 0x1c0
}

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
   d7312:	b08a      	sub	sp, #40	; 0x28
   d7314:	4630      	mov	r0, r6
   d7316:	f7ff fdbd 	bl	d6e94 <_ZN14RecursiveMutex4lockEv>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d731a:	682c      	ldr	r4, [r5, #0]
   d731c:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d7320:	f7fe ff44 	bl	d61ac <os_mutex_recursive_unlock>
    UDP* u = nullptr;
    {
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
   d7324:	2c00      	cmp	r4, #0
   d7326:	d063      	beq.n	d73f0 <_ZN5spark11MeshPublish4pollEv+0xe8>
        if (!buffer_) {
   d7328:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d732c:	b163      	cbz	r3, d7348 <_ZN5spark11MeshPublish4pollEv+0x40>
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
   d732e:	6823      	ldr	r3, [r4, #0]
   d7330:	f8d5 11c4 	ldr.w	r1, [r5, #452]	; 0x1c4
   d7334:	6b1f      	ldr	r7, [r3, #48]	; 0x30
   d7336:	4620      	mov	r0, r4
   d7338:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d733c:	f44f 629a 	mov.w	r2, #1232	; 0x4d0
   d7340:	47b8      	blx	r7
        if (len > 0) {
   d7342:	1e04      	subs	r4, r0, #0
   d7344:	dc13      	bgt.n	d736e <_ZN5spark11MeshPublish4pollEv+0x66>
   d7346:	e056      	b.n	d73f6 <_ZN5spark11MeshPublish4pollEv+0xee>
        std::lock_guard<RecursiveMutex> lk(mutex_);
        u = udp.get();
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
   d7348:	492d      	ldr	r1, [pc, #180]	; (d7400 <_ZN5spark11MeshPublish4pollEv+0xf8>)
   d734a:	f44f 609a 	mov.w	r0, #1232	; 0x4d0
   d734e:	f001 fac4 	bl	d88da <_ZnajRKSt9nothrow_t>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d7352:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
      __a = _GLIBCXX_MOVE(__b);
   d7356:	f8c5 01c4 	str.w	r0, [r5, #452]	; 0x1c4
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != nullptr)
   d735a:	b113      	cbz	r3, d7362 <_ZN5spark11MeshPublish4pollEv+0x5a>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d735c:	4618      	mov	r0, r3
   d735e:	f7fc fea0 	bl	d40a2 <_ZdaPv>
            if (!buffer_) {
   d7362:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
   d7366:	2b00      	cmp	r3, #0
   d7368:	d1e1      	bne.n	d732e <_ZN5spark11MeshPublish4pollEv+0x26>
                return SYSTEM_ERROR_NO_MEMORY;
   d736a:	4826      	ldr	r0, [pc, #152]	; (d7404 <_ZN5spark11MeshPublish4pollEv+0xfc>)
   d736c:	e044      	b.n	d73f8 <_ZN5spark11MeshPublish4pollEv+0xf0>
            }
        }
        int len = u->receivePacket(buffer_.get(), MAX_PACKET_LEN, 1000);
        if (len > 0) {
            LOG(TRACE, "parse packet %d", len);
   d736e:	2320      	movs	r3, #32
   d7370:	4a25      	ldr	r2, [pc, #148]	; (d7408 <_ZN5spark11MeshPublish4pollEv+0x100>)
   d7372:	9302      	str	r3, [sp, #8]
   d7374:	9200      	str	r2, [sp, #0]
   d7376:	2300      	movs	r3, #0
   d7378:	9401      	str	r4, [sp, #4]
   d737a:	aa02      	add	r2, sp, #8
   d737c:	4923      	ldr	r1, [pc, #140]	; (d740c <_ZN5spark11MeshPublish4pollEv+0x104>)
   d737e:	9303      	str	r3, [sp, #12]
   d7380:	2001      	movs	r0, #1
   d7382:	f7ff f8cb 	bl	d651c <log_message>
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d7386:	f8d5 31c4 	ldr.w	r3, [r5, #452]	; 0x1c4
            const char* buffer = (const char*)buffer_.get();

            // There should be a version and it should be "0"
            const char version = *buffer++;
   d738a:	1c5f      	adds	r7, r3, #1
            CHECK_TRUE(version == 0, SYSTEM_ERROR_BAD_DATA);
   d738c:	781b      	ldrb	r3, [r3, #0]
   d738e:	bb6b      	cbnz	r3, d73ec <_ZN5spark11MeshPublish4pollEv+0xe4>
            len -= sizeof(version);
   d7390:	3c01      	subs	r4, #1

            // Topic should not be empty
            const size_t topicLen = strnlen(buffer, len);
   d7392:	4621      	mov	r1, r4
   d7394:	4638      	mov	r0, r7
   d7396:	f002 fab0 	bl	d98fa <strnlen>
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);
   d739a:	b338      	cbz	r0, d73ec <_ZN5spark11MeshPublish4pollEv+0xe4>

            const char* topic = buffer;

            len -= topicLen;
   d739c:	1a24      	subs	r4, r4, r0
            buffer += topicLen;

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d739e:	2c00      	cmp	r4, #0
            CHECK_TRUE(topicLen > 0, SYSTEM_ERROR_BAD_DATA);

            const char* topic = buffer;

            len -= topicLen;
            buffer += topicLen;
   d73a0:	eb07 0800 	add.w	r8, r7, r0

            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d73a4:	dd22      	ble.n	d73ec <_ZN5spark11MeshPublish4pollEv+0xe4>
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d73a6:	5c3b      	ldrb	r3, [r7, r0]
   d73a8:	bb03      	cbnz	r3, d73ec <_ZN5spark11MeshPublish4pollEv+0xe4>
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
   d73aa:	3c01      	subs	r4, #1
   d73ac:	d00e      	beq.n	d73cc <_ZN5spark11MeshPublish4pollEv+0xc4>
            // Topic should be terminated by '\0'
            CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
            CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
            // Skip it
            --len;
            buffer++;
   d73ae:	f108 0801 	add.w	r8, r8, #1

            size_t dataLen = 0;
            const char* data = "";
            if (len > 0) {
                // There is data
                dataLen = strnlen(buffer, len);
   d73b2:	4621      	mov	r1, r4
   d73b4:	4640      	mov	r0, r8
   d73b6:	f002 faa0 	bl	d98fa <strnlen>
                data = buffer;
                // Data can be empty
                len -= dataLen;
   d73ba:	1a24      	subs	r4, r4, r0
                buffer += dataLen;
                // Data should be terminated by '\0'
                CHECK_TRUE(len > 0, SYSTEM_ERROR_BAD_DATA);
   d73bc:	2c00      	cmp	r4, #0
   d73be:	dd15      	ble.n	d73ec <_ZN5spark11MeshPublish4pollEv+0xe4>
                CHECK_TRUE(*buffer == 0, SYSTEM_ERROR_BAD_DATA);
   d73c0:	f818 3000 	ldrb.w	r3, [r8, r0]
   d73c4:	b993      	cbnz	r3, d73ec <_ZN5spark11MeshPublish4pollEv+0xe4>
                // Skip it
                --len;
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);
   d73c6:	2c01      	cmp	r4, #1
   d73c8:	d002      	beq.n	d73d0 <_ZN5spark11MeshPublish4pollEv+0xc8>
   d73ca:	e00f      	b.n	d73ec <_ZN5spark11MeshPublish4pollEv+0xe4>
            // Skip it
            --len;
            buffer++;

            size_t dataLen = 0;
            const char* data = "";
   d73cc:	f8df 8044 	ldr.w	r8, [pc, #68]	; d7414 <_ZN5spark11MeshPublish4pollEv+0x10c>
   d73d0:	4630      	mov	r0, r6
   d73d2:	f7ff fd5f 	bl	d6e94 <_ZN14RecursiveMutex4lockEv>
                buffer++;
            }
            CHECK_TRUE(len == 0, SYSTEM_ERROR_BAD_DATA);

            std::lock_guard<RecursiveMutex> lk(mutex_);
            subscriptions.send(topic, data);
   d73d6:	4642      	mov	r2, r8
   d73d8:	4639      	mov	r1, r7
   d73da:	1d28      	adds	r0, r5, #4
   d73dc:	f7ff fe9f 	bl	d711e <_ZN5spark11MeshPublish13Subscriptions4sendEPKcS3_>
   d73e0:	f8d5 01c0 	ldr.w	r0, [r5, #448]	; 0x1c0
   d73e4:	f7fe fee2 	bl	d61ac <os_mutex_recursive_unlock>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d73e8:	2000      	movs	r0, #0
   d73ea:	e005      	b.n	d73f8 <_ZN5spark11MeshPublish4pollEv+0xf0>
    }
    if (u) {
        if (!buffer_) {
            buffer_.reset(new (std::nothrow) uint8_t[MAX_PACKET_LEN]);
            if (!buffer_) {
                return SYSTEM_ERROR_NO_MEMORY;
   d73ec:	4808      	ldr	r0, [pc, #32]	; (d7410 <_ZN5spark11MeshPublish4pollEv+0x108>)
   d73ee:	e003      	b.n	d73f8 <_ZN5spark11MeshPublish4pollEv+0xf0>
            subscriptions.send(topic, data);
        } else {
            result = len;
        }
    } else {
        HAL_Delay_Milliseconds(100);
   d73f0:	2064      	movs	r0, #100	; 0x64
   d73f2:	f7fe fef3 	bl	d61dc <HAL_Delay_Milliseconds>

/**
 * Pull data from the socket and handle as required.
 */
int MeshPublish::poll() {
    int result = 0;
   d73f6:	4620      	mov	r0, r4
        }
    } else {
        HAL_Delay_Milliseconds(100);
    }
    return result;
}
   d73f8:	b00a      	add	sp, #40	; 0x28
   d73fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d73fe:	bf00      	nop
   d7400:	000d9db8 	.word	0x000d9db8
   d7404:	fffffefc 	.word	0xfffffefc
   d7408:	000d9bbc 	.word	0x000d9bbc
   d740c:	000d9bb5 	.word	0x000d9bb5
   d7410:	fffffee8 	.word	0xfffffee8
   d7414:	000d998f 	.word	0x000d998f

000d7418 <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_>:
}

int MeshPublish::subscribe(const char* prefix, EventHandler handler) {
    std::lock_guard<RecursiveMutex> lk(mutex_);
    if (!thread_) {
        thread_.reset(new (std::nothrow) Thread("meshpub", [](void* ptr) {
   d7418:	b508      	push	{r3, lr}
   d741a:	4604      	mov	r4, r0
            auto self = (MeshPublish*)ptr;
            while (true) {
                self->poll();
   d741c:	4620      	mov	r0, r4
   d741e:	f7ff ff73 	bl	d7308 <_ZN5spark11MeshPublish4pollEv>
   d7422:	e7fb      	b.n	d741c <_ZZN5spark11MeshPublish9subscribeEPKcPFvS2_S2_EENUlPvE_4_FUNES5_+0x4>

000d7424 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d7424:	b538      	push	{r3, r4, r5, lr}
   d7426:	4c0d      	ldr	r4, [pc, #52]	; (d745c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x38>)
   d7428:	4b0d      	ldr	r3, [pc, #52]	; (d7460 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x3c>)
   d742a:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d742c:	2500      	movs	r5, #0
   d742e:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d7430:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d7434:	6063      	str	r3, [r4, #4]
   d7436:	60a5      	str	r5, [r4, #8]
   d7438:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d743c:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d7440:	f7fe fea4 	bl	d618c <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d7444:	4b07      	ldr	r3, [pc, #28]	; (d7464 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x40>)
   d7446:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   d744a:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d744c:	4620      	mov	r0, r4
   d744e:	4a06      	ldr	r2, [pc, #24]	; (d7468 <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x44>)
   d7450:	4906      	ldr	r1, [pc, #24]	; (d746c <_GLOBAL__sub_I__ZN5spark9mesh_loopEv+0x48>)
} // namespace spark
   d7452:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d7456:	f001 ba23 	b.w	d88a0 <__aeabi_atexit>
   d745a:	bf00      	nop
   d745c:	2003e4d8 	.word	0x2003e4d8
   d7460:	000d9bd4 	.word	0x000d9bd4
   d7464:	000d9b70 	.word	0x000d9b70
   d7468:	2003dcd8 	.word	0x2003dcd8
   d746c:	000d6fb1 	.word	0x000d6fb1

000d7470 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7470:	2300      	movs	r3, #0
   d7472:	461a      	mov	r2, r3
   d7474:	6840      	ldr	r0, [r0, #4]
   d7476:	f7ff b8a7 	b.w	d65c8 <network_connect>

000d747a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d747a:	2200      	movs	r2, #0
   d747c:	2102      	movs	r1, #2
   d747e:	6840      	ldr	r0, [r0, #4]
   d7480:	f7ff b8b2 	b.w	d65e8 <network_disconnect>

000d7484 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7484:	2200      	movs	r2, #0
   d7486:	4611      	mov	r1, r2
   d7488:	6840      	ldr	r0, [r0, #4]
   d748a:	f7ff b8a5 	b.w	d65d8 <network_connecting>

000d748e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d748e:	2200      	movs	r2, #0
   d7490:	4611      	mov	r1, r2
   d7492:	6840      	ldr	r0, [r0, #4]
   d7494:	f7ff b8b0 	b.w	d65f8 <network_ready>

000d7498 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d7498:	2300      	movs	r3, #0
   d749a:	461a      	mov	r2, r3
   d749c:	4619      	mov	r1, r3
   d749e:	6840      	ldr	r0, [r0, #4]
   d74a0:	f7ff b8b2 	b.w	d6608 <network_on>

000d74a4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d74a4:	2300      	movs	r3, #0
   d74a6:	461a      	mov	r2, r3
   d74a8:	4619      	mov	r1, r3
   d74aa:	6840      	ldr	r0, [r0, #4]
   d74ac:	f7ff b8b4 	b.w	d6618 <network_off>

000d74b0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d74b0:	2200      	movs	r2, #0
   d74b2:	f081 0101 	eor.w	r1, r1, #1
   d74b6:	6840      	ldr	r0, [r0, #4]
   d74b8:	f7ff b8b6 	b.w	d6628 <network_listen>

000d74bc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d74bc:	2200      	movs	r2, #0
   d74be:	6840      	ldr	r0, [r0, #4]
   d74c0:	f7ff b8c2 	b.w	d6648 <network_set_listen_timeout>

000d74c4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d74c4:	2200      	movs	r2, #0
   d74c6:	4611      	mov	r1, r2
   d74c8:	6840      	ldr	r0, [r0, #4]
   d74ca:	f7ff b8c5 	b.w	d6658 <network_get_listen_timeout>

000d74ce <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d74ce:	2200      	movs	r2, #0
   d74d0:	4611      	mov	r1, r2
   d74d2:	6840      	ldr	r0, [r0, #4]
   d74d4:	f7ff b8b0 	b.w	d6638 <network_listening>

000d74d8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d74d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d74dc:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d74de:	b095      	sub	sp, #84	; 0x54
   d74e0:	4616      	mov	r6, r2
   d74e2:	460d      	mov	r5, r1
   d74e4:	4607      	mov	r7, r0
    IPAddress addr;
   d74e6:	f7ff fc7d 	bl	d6de4 <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d74ea:	4621      	mov	r1, r4
   d74ec:	2220      	movs	r2, #32
   d74ee:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d74f0:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d74f2:	f002 f965 	bl	d97c0 <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d74f6:	2340      	movs	r3, #64	; 0x40
   d74f8:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d74fa:	4621      	mov	r1, r4
   d74fc:	466b      	mov	r3, sp
   d74fe:	aa0c      	add	r2, sp, #48	; 0x30
   d7500:	4630      	mov	r0, r6
   d7502:	f7fe ff3b 	bl	d637c <netdb_getaddrinfo>
    if (!r) {
   d7506:	4604      	mov	r4, r0
   d7508:	2800      	cmp	r0, #0
   d750a:	d144      	bne.n	d7596 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d750c:	4602      	mov	r2, r0
   d750e:	2101      	movs	r1, #1
   d7510:	6868      	ldr	r0, [r5, #4]
   d7512:	f7ff f871 	bl	d65f8 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7516:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7518:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d751a:	4622      	mov	r2, r4
   d751c:	6868      	ldr	r0, [r5, #4]
   d751e:	f7ff f86b 	bl	d65f8 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7522:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7524:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d7526:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7528:	2e00      	cmp	r6, #0
   d752a:	d034      	beq.n	d7596 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d752c:	2900      	cmp	r1, #0
   d752e:	d132      	bne.n	d7596 <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7530:	6873      	ldr	r3, [r6, #4]
   d7532:	2b02      	cmp	r3, #2
   d7534:	d002      	beq.n	d753c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d7536:	2b0a      	cmp	r3, #10
   d7538:	d009      	beq.n	d754e <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d753a:	e02a      	b.n	d7592 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d753c:	f1b8 0f00 	cmp.w	r8, #0
   d7540:	d027      	beq.n	d7592 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7542:	6971      	ldr	r1, [r6, #20]
   d7544:	4638      	mov	r0, r7
   d7546:	3104      	adds	r1, #4
   d7548:	f7ff fc8f 	bl	d6e6a <_ZN9IPAddressaSEPKh>
   d754c:	e020      	b.n	d7590 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d754e:	f1b9 0f00 	cmp.w	r9, #0
   d7552:	d01e      	beq.n	d7592 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d7554:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7556:	2211      	movs	r2, #17
   d7558:	a801      	add	r0, sp, #4
   d755a:	f002 f931 	bl	d97c0 <memset>
                    a.v = 6;
   d755e:	2306      	movs	r3, #6
   d7560:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7564:	ad01      	add	r5, sp, #4
   d7566:	f104 0308 	add.w	r3, r4, #8
   d756a:	3418      	adds	r4, #24
   d756c:	6818      	ldr	r0, [r3, #0]
   d756e:	6859      	ldr	r1, [r3, #4]
   d7570:	462a      	mov	r2, r5
   d7572:	c203      	stmia	r2!, {r0, r1}
   d7574:	3308      	adds	r3, #8
   d7576:	42a3      	cmp	r3, r4
   d7578:	4615      	mov	r5, r2
   d757a:	d1f7      	bne.n	d756c <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d757c:	a901      	add	r1, sp, #4
   d757e:	a806      	add	r0, sp, #24
   d7580:	ad07      	add	r5, sp, #28
   d7582:	f7ff fc3d 	bl	d6e00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7586:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7588:	1d3c      	adds	r4, r7, #4
   d758a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d758c:	682b      	ldr	r3, [r5, #0]
   d758e:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d7590:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7592:	69f6      	ldr	r6, [r6, #28]
   d7594:	e7c8      	b.n	d7528 <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d7596:	9800      	ldr	r0, [sp, #0]
   d7598:	f7fe fee8 	bl	d636c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d759c:	4638      	mov	r0, r7
   d759e:	b015      	add	sp, #84	; 0x54
   d75a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d75a4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d75a4:	4b02      	ldr	r3, [pc, #8]	; (d75b0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d75a6:	4a03      	ldr	r2, [pc, #12]	; (d75b4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d75a8:	601a      	str	r2, [r3, #0]
   d75aa:	2200      	movs	r2, #0
   d75ac:	605a      	str	r2, [r3, #4]
   d75ae:	4770      	bx	lr
   d75b0:	2003e6a8 	.word	0x2003e6a8
   d75b4:	000d9bd4 	.word	0x000d9bd4

000d75b8 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d75b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d75ba:	4606      	mov	r6, r0
   d75bc:	460d      	mov	r5, r1
   d75be:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d75c0:	2400      	movs	r4, #0
  while (size--) {
   d75c2:	42bd      	cmp	r5, r7
   d75c4:	d00c      	beq.n	d75e0 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d75c6:	6833      	ldr	r3, [r6, #0]
   d75c8:	f815 1b01 	ldrb.w	r1, [r5], #1
   d75cc:	689b      	ldr	r3, [r3, #8]
   d75ce:	4630      	mov	r0, r6
   d75d0:	4798      	blx	r3
     if (chunk>=0)
   d75d2:	2800      	cmp	r0, #0
   d75d4:	db01      	blt.n	d75da <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d75d6:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d75d8:	e7f3      	b.n	d75c2 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d75da:	2c00      	cmp	r4, #0
   d75dc:	bf08      	it	eq
   d75de:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d75e0:	4620      	mov	r0, r4
   d75e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d75e4 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d75e4:	b570      	push	{r4, r5, r6, lr}
   d75e6:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d75e8:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d75ea:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d75ec:	b149      	cbz	r1, d7602 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d75ee:	f002 f954 	bl	d989a <strlen>
   d75f2:	682b      	ldr	r3, [r5, #0]
   d75f4:	4602      	mov	r2, r0
   d75f6:	4621      	mov	r1, r4
   d75f8:	4628      	mov	r0, r5
   d75fa:	68db      	ldr	r3, [r3, #12]
    }
   d75fc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d7600:	4718      	bx	r3
    }
   d7602:	bd70      	pop	{r4, r5, r6, pc}

000d7604 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d7604:	6803      	ldr	r3, [r0, #0]
   d7606:	689b      	ldr	r3, [r3, #8]
   d7608:	4718      	bx	r3

000d760a <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d760a:	b530      	push	{r4, r5, lr}
   d760c:	b08b      	sub	sp, #44	; 0x2c
   d760e:	460b      	mov	r3, r1
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d7610:	2100      	movs	r1, #0
   d7612:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d7616:	2a01      	cmp	r2, #1
   d7618:	bf98      	it	ls
   d761a:	220a      	movls	r2, #10
   d761c:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
    unsigned long m = n;
    n /= base;
   d7620:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
   d7624:	fb05 3312 	mls	r3, r5, r2, r3
   d7628:	f003 03ff 	and.w	r3, r3, #255	; 0xff
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d762c:	2b09      	cmp	r3, #9
   d762e:	bf94      	ite	ls
   d7630:	3330      	addls	r3, #48	; 0x30
   d7632:	3337      	addhi	r3, #55	; 0x37
   d7634:	b2db      	uxtb	r3, r3
   d7636:	4621      	mov	r1, r4
   d7638:	f804 3901 	strb.w	r3, [r4], #-1
   d763c:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d763e:	2d00      	cmp	r5, #0
   d7640:	d1ee      	bne.n	d7620 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d7642:	f7ff ffcf 	bl	d75e4 <_ZN5Print5writeEPKc>
}
   d7646:	b00b      	add	sp, #44	; 0x2c
   d7648:	bd30      	pop	{r4, r5, pc}

000d764a <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
   d764a:	b410      	push	{r4}
  if (base == 0) return write(n);
   d764c:	b92a      	cbnz	r2, d765a <_ZN5Print5printEmi+0x10>
   d764e:	6803      	ldr	r3, [r0, #0]
  else return printNumber(n, base);
}
   d7650:	f85d 4b04 	ldr.w	r4, [sp], #4
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
   d7654:	689b      	ldr	r3, [r3, #8]
   d7656:	b2c9      	uxtb	r1, r1
   d7658:	4718      	bx	r3
  else return printNumber(n, base);
   d765a:	b2d2      	uxtb	r2, r2
}
   d765c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
   d7660:	f7ff bfd3 	b.w	d760a <_ZN5Print11printNumberEmh>

000d7664 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
   d7664:	f7ff bff1 	b.w	d764a <_ZN5Print5printEmi>

000d7668 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d7668:	b510      	push	{r4, lr}
   d766a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d766c:	f7ff f855 	bl	d671a <_ZNSt14_Function_baseD1Ev>
   d7670:	4620      	mov	r0, r4
   d7672:	bd10      	pop	{r4, pc}

000d7674 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d7674:	4803      	ldr	r0, [pc, #12]	; (d7684 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d7676:	4a04      	ldr	r2, [pc, #16]	; (d7688 <_GLOBAL__sub_I_RGB+0x14>)
   d7678:	4904      	ldr	r1, [pc, #16]	; (d768c <_GLOBAL__sub_I_RGB+0x18>)
   d767a:	2300      	movs	r3, #0
   d767c:	6083      	str	r3, [r0, #8]
   d767e:	f001 b90f 	b.w	d88a0 <__aeabi_atexit>
   d7682:	bf00      	nop
   d7684:	2003e6b0 	.word	0x2003e6b0
   d7688:	2003dcd8 	.word	0x2003dcd8
   d768c:	000d7669 	.word	0x000d7669

000d7690 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
   d7690:	4770      	bx	lr

000d7692 <_ZN8SPIClassD0Ev>:
   d7692:	b510      	push	{r4, lr}
   d7694:	4604      	mov	r4, r0
   d7696:	f7fc fd02 	bl	d409e <_ZdlPv>
   d769a:	4620      	mov	r0, r4
   d769c:	bd10      	pop	{r4, pc}
	...

000d76a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d76a0:	b570      	push	{r4, r5, r6, lr}
   d76a2:	4b08      	ldr	r3, [pc, #32]	; (d76c4 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
   d76a4:	6003      	str	r3, [r0, #0]
   d76a6:	4604      	mov	r4, r0
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
   d76a8:	2500      	movs	r5, #0
   d76aa:	460e      	mov	r6, r1
   d76ac:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
   d76b0:	f7fe fd64 	bl	d617c <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
   d76b4:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
   d76b6:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
   d76b8:	f7fe feb0 	bl	d641c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
   d76bc:	60a5      	str	r5, [r4, #8]
}
   d76be:	4620      	mov	r0, r4
   d76c0:	bd70      	pop	{r4, r5, r6, pc}
   d76c2:	bf00      	nop
   d76c4:	000d9c08 	.word	0x000d9c08

000d76c8 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
   d76c8:	7900      	ldrb	r0, [r0, #4]
   d76ca:	f7fe beaf 	b.w	d642c <HAL_SPI_Is_Enabled>

000d76ce <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d76ce:	b510      	push	{r4, lr}
   d76d0:	4604      	mov	r4, r0
{
	free(buffer);
   d76d2:	6800      	ldr	r0, [r0, #0]
   d76d4:	f7fe ffd0 	bl	d6678 <free>
}
   d76d8:	4620      	mov	r0, r4
   d76da:	bd10      	pop	{r4, pc}

000d76dc <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d76dc:	b510      	push	{r4, lr}
   d76de:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d76e0:	6800      	ldr	r0, [r0, #0]
   d76e2:	b108      	cbz	r0, d76e8 <_ZN6String10invalidateEv+0xc>
   d76e4:	f7fe ffc8 	bl	d6678 <free>
	buffer = NULL;
   d76e8:	2300      	movs	r3, #0
   d76ea:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
   d76ec:	60a3      	str	r3, [r4, #8]
   d76ee:	6063      	str	r3, [r4, #4]
   d76f0:	bd10      	pop	{r4, pc}

000d76f2 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d76f2:	b538      	push	{r3, r4, r5, lr}
   d76f4:	4604      	mov	r4, r0
   d76f6:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d76f8:	6800      	ldr	r0, [r0, #0]
   d76fa:	3101      	adds	r1, #1
   d76fc:	f7fe ffc4 	bl	d6688 <realloc>
	if (newbuffer) {
   d7700:	b110      	cbz	r0, d7708 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d7702:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
   d7706:	2001      	movs	r0, #1
	}
	return 0;
}
   d7708:	bd38      	pop	{r3, r4, r5, pc}

000d770a <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d770a:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d770c:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
   d770e:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d7710:	b113      	cbz	r3, d7718 <_ZN6String7reserveEj+0xe>
   d7712:	6843      	ldr	r3, [r0, #4]
   d7714:	428b      	cmp	r3, r1
   d7716:	d207      	bcs.n	d7728 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
   d7718:	4620      	mov	r0, r4
   d771a:	f7ff ffea 	bl	d76f2 <_ZN6String12changeBufferEj>
   d771e:	b120      	cbz	r0, d772a <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
   d7720:	68a3      	ldr	r3, [r4, #8]
   d7722:	b90b      	cbnz	r3, d7728 <_ZN6String7reserveEj+0x1e>
   d7724:	6822      	ldr	r2, [r4, #0]
   d7726:	7013      	strb	r3, [r2, #0]
   d7728:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
   d772a:	bd10      	pop	{r4, pc}

000d772c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d772c:	b570      	push	{r4, r5, r6, lr}
   d772e:	460e      	mov	r6, r1
	if (!reserve(length)) {
   d7730:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d7732:	4604      	mov	r4, r0
   d7734:	4615      	mov	r5, r2
	if (!reserve(length)) {
   d7736:	f7ff ffe8 	bl	d770a <_ZN6String7reserveEj>
   d773a:	b918      	cbnz	r0, d7744 <_ZN6String4copyEPKcj+0x18>
		invalidate();
   d773c:	4620      	mov	r0, r4
   d773e:	f7ff ffcd 	bl	d76dc <_ZN6String10invalidateEv>
		return *this;
   d7742:	e009      	b.n	d7758 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
   d7744:	462a      	mov	r2, r5
   d7746:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
   d7748:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
   d774a:	6820      	ldr	r0, [r4, #0]
   d774c:	f002 f82d 	bl	d97aa <memcpy>
	buffer[len] = 0;
   d7750:	6822      	ldr	r2, [r4, #0]
   d7752:	68a3      	ldr	r3, [r4, #8]
   d7754:	2100      	movs	r1, #0
   d7756:	54d1      	strb	r1, [r2, r3]
	return *this;
}
   d7758:	4620      	mov	r0, r4
   d775a:	bd70      	pop	{r4, r5, r6, pc}

000d775c <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d775c:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d775e:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
   d7760:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
   d7762:	6003      	str	r3, [r0, #0]
	capacity = 0;
   d7764:	6043      	str	r3, [r0, #4]
	len = 0;
   d7766:	6083      	str	r3, [r0, #8]
	flags = 0;
   d7768:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
   d776a:	460d      	mov	r5, r1
   d776c:	b139      	cbz	r1, d777e <_ZN6StringC1EPK19__FlashStringHelper+0x22>
   d776e:	4608      	mov	r0, r1
   d7770:	f002 f893 	bl	d989a <strlen>
   d7774:	4629      	mov	r1, r5
   d7776:	4602      	mov	r2, r0
   d7778:	4620      	mov	r0, r4
   d777a:	f7ff ffd7 	bl	d772c <_ZN6String4copyEPKcj>
}
   d777e:	4620      	mov	r0, r4
   d7780:	bd38      	pop	{r3, r4, r5, pc}

000d7782 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d7782:	b538      	push	{r3, r4, r5, lr}
   d7784:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
   d7786:	460c      	mov	r4, r1
   d7788:	b141      	cbz	r1, d779c <_ZN6StringaSEPKc+0x1a>
   d778a:	4608      	mov	r0, r1
   d778c:	f002 f885 	bl	d989a <strlen>
   d7790:	4621      	mov	r1, r4
   d7792:	4602      	mov	r2, r0
   d7794:	4628      	mov	r0, r5
   d7796:	f7ff ffc9 	bl	d772c <_ZN6String4copyEPKcj>
   d779a:	e001      	b.n	d77a0 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
   d779c:	f7ff ff9e 	bl	d76dc <_ZN6String10invalidateEv>

	return *this;
}
   d77a0:	4628      	mov	r0, r5
   d77a2:	bd38      	pop	{r3, r4, r5, pc}

000d77a4 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
   d77a4:	b570      	push	{r4, r5, r6, lr}
   d77a6:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
   d77a8:	b19a      	cbz	r2, d77d2 <_ZNK6String8getBytesEPhjj+0x2e>
   d77aa:	b191      	cbz	r1, d77d2 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
   d77ac:	6885      	ldr	r5, [r0, #8]
   d77ae:	429d      	cmp	r5, r3
   d77b0:	d802      	bhi.n	d77b8 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
   d77b2:	2300      	movs	r3, #0
   d77b4:	700b      	strb	r3, [r1, #0]
		return;
   d77b6:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
   d77b8:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
   d77ba:	1aed      	subs	r5, r5, r3
	strncpy((char *)buf, buffer + index, n);
   d77bc:	6801      	ldr	r1, [r0, #0]
   d77be:	42ac      	cmp	r4, r5
   d77c0:	bf28      	it	cs
   d77c2:	462c      	movcs	r4, r5
   d77c4:	4419      	add	r1, r3
   d77c6:	4622      	mov	r2, r4
   d77c8:	4630      	mov	r0, r6
   d77ca:	f002 f883 	bl	d98d4 <strncpy>
	buf[n] = 0;
   d77ce:	2300      	movs	r3, #0
   d77d0:	5533      	strb	r3, [r6, r4]
   d77d2:	bd70      	pop	{r4, r5, r6, pc}

000d77d4 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
   d77d4:	4b04      	ldr	r3, [pc, #16]	; (d77e8 <_GLOBAL__sub_I_System+0x14>)
   d77d6:	2000      	movs	r0, #0
   d77d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
   d77dc:	7018      	strb	r0, [r3, #0]
   d77de:	8058      	strh	r0, [r3, #2]
   d77e0:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d77e2:	f7fe bea3 	b.w	d652c <set_system_mode>
   d77e6:	bf00      	nop
   d77e8:	2003e6c0 	.word	0x2003e6c0

000d77ec <_ZN9TCPClient5writeEh>:
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d77ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d77ee:	ac02      	add	r4, sp, #8
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d77f0:	6803      	ldr	r3, [r0, #0]
    done.dismiss();
    // Why not 0?
    return 1;
}

size_t TCPClient::write(uint8_t b) {
   d77f2:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d77f6:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d77f8:	2201      	movs	r2, #1
   d77fa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d77fe:	4621      	mov	r1, r4
   d7800:	47a8      	blx	r5
}
   d7802:	b003      	add	sp, #12
   d7804:	bd30      	pop	{r4, r5, pc}

000d7806 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d7806:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7808:	6803      	ldr	r3, [r0, #0]
   d780a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d780c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7810:	46a4      	mov	ip, r4
}
   d7812:	f85d 4b04 	ldr.w	r4, [sp], #4
size_t TCPClient::write(uint8_t b) {
    return write(&b, 1, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d7816:	4760      	bx	ip

000d7818 <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d7818:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d781a:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
   d781c:	6803      	ldr	r3, [r0, #0]

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
    return write(buffer, size, SOCKET_WAIT_FOREVER);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d781e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
   d7822:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   d7824:	4621      	mov	r1, r4
   d7826:	4613      	mov	r3, r2
   d7828:	2201      	movs	r2, #1
   d782a:	47a8      	blx	r5
}
   d782c:	b003      	add	sp, #12
   d782e:	bd30      	pop	{r4, r5, pc}

000d7830 <_ZN9TCPClient5flushEv>:
void TCPClient::flush_buffer() {
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
   d7830:	4770      	bx	lr

000d7832 <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d7832:	b538      	push	{r3, r4, r5, lr}
   d7834:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d7836:	681a      	ldr	r2, [r3, #0]
   d7838:	2a00      	cmp	r2, #0
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d783a:	4604      	mov	r4, r0
    bool rv = (status() || bufferCount());
   d783c:	da05      	bge.n	d784a <_ZN9TCPClient9connectedEv+0x18>
   d783e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7842:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7846:	429a      	cmp	r2, r3
   d7848:	d001      	beq.n	d784e <_ZN9TCPClient9connectedEv+0x1c>
   d784a:	2501      	movs	r5, #1
   d784c:	e00b      	b.n	d7866 <_ZN9TCPClient9connectedEv+0x34>
    if (!rv) {
        rv = available();
   d784e:	6803      	ldr	r3, [r0, #0]
   d7850:	691b      	ldr	r3, [r3, #16]
   d7852:	4798      	blx	r3
   d7854:	2800      	cmp	r0, #0
   d7856:	bf14      	ite	ne
   d7858:	2501      	movne	r5, #1
   d785a:	2500      	moveq	r5, #0
        if (!rv) {
   d785c:	d103      	bne.n	d7866 <_ZN9TCPClient9connectedEv+0x34>
            stop();
   d785e:	6823      	ldr	r3, [r4, #0]
   d7860:	4620      	mov	r0, r4
   d7862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7864:	4798      	blx	r3
        }
    }
    return rv;
}
   d7866:	4628      	mov	r0, r5
   d7868:	bd38      	pop	{r3, r4, r5, pc}

000d786a <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d786a:	6943      	ldr	r3, [r0, #20]
}

TCPClient::operator bool() {
   return (status() != 0);
   d786c:	6818      	ldr	r0, [r3, #0]
}
   d786e:	43c0      	mvns	r0, r0
   d7870:	0fc0      	lsrs	r0, r0, #31
   d7872:	4770      	bx	lr

000d7874 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d7874:	4770      	bx	lr

000d7876 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
   d7876:	2000      	movs	r0, #0
   d7878:	4770      	bx	lr

000d787a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
   d787a:	b510      	push	{r4, lr}
   d787c:	4604      	mov	r4, r0
   d787e:	f7fc fc0e 	bl	d409e <_ZdlPv>
   d7882:	4620      	mov	r0, r4
   d7884:	bd10      	pop	{r4, pc}

000d7886 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7886:	f7fc bc0a 	b.w	d409e <_ZdlPv>
	...

000d788c <_ZN9TCPClient7connectEPKctm>:
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d788c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7890:	4698      	mov	r8, r3
    stop();
   d7892:	6803      	ldr	r3, [r0, #0]
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7894:	b093      	sub	sp, #76	; 0x4c
    stop();
   d7896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
TCPClient::TCPClient(sock_handle_t sock)
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7898:	460c      	mov	r4, r1
   d789a:	4606      	mov	r6, r0
   d789c:	4617      	mov	r7, r2
    stop();
   d789e:	4798      	blx	r3

    struct addrinfo* ais = nullptr;
   d78a0:	ab12      	add	r3, sp, #72	; 0x48
   d78a2:	2500      	movs	r5, #0
   d78a4:	f843 5d48 	str.w	r5, [r3, #-72]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d78a8:	462a      	mov	r2, r5
   d78aa:	4629      	mov	r1, r5
   d78ac:	4620      	mov	r0, r4
   d78ae:	f7fe fd65 	bl	d637c <netdb_getaddrinfo>
   d78b2:	2800      	cmp	r0, #0
   d78b4:	db3a      	blt.n	d792c <_ZN9TCPClient7connectEPKctm+0xa0>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d78b6:	9b00      	ldr	r3, [sp, #0]
   d78b8:	2b00      	cmp	r3, #0
   d78ba:	d039      	beq.n	d7930 <_ZN9TCPClient7connectEPKctm+0xa4>
   d78bc:	695b      	ldr	r3, [r3, #20]
   d78be:	2b00      	cmp	r3, #0
   d78c0:	d036      	beq.n	d7930 <_ZN9TCPClient7connectEPKctm+0xa4>
        IPAddress addr;
   d78c2:	a806      	add	r0, sp, #24
   d78c4:	f7ff fa8e 	bl	d6de4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d78c8:	9b00      	ldr	r3, [sp, #0]
   d78ca:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d78cc:	7863      	ldrb	r3, [r4, #1]
   d78ce:	2b02      	cmp	r3, #2
   d78d0:	d101      	bne.n	d78d6 <_ZN9TCPClient7connectEPKctm+0x4a>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d78d2:	1d21      	adds	r1, r4, #4
   d78d4:	e013      	b.n	d78fe <_ZN9TCPClient7connectEPKctm+0x72>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d78d6:	2b0a      	cmp	r3, #10
   d78d8:	d114      	bne.n	d7904 <_ZN9TCPClient7connectEPKctm+0x78>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d78da:	2211      	movs	r2, #17
   d78dc:	4629      	mov	r1, r5
   d78de:	a801      	add	r0, sp, #4
   d78e0:	f001 ff6e 	bl	d97c0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d78e4:	68a3      	ldr	r3, [r4, #8]
   d78e6:	bb33      	cbnz	r3, d7936 <_ZN9TCPClient7connectEPKctm+0xaa>
   d78e8:	68e3      	ldr	r3, [r4, #12]
   d78ea:	bb23      	cbnz	r3, d7936 <_ZN9TCPClient7connectEPKctm+0xaa>
   d78ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d78f0:	6925      	ldr	r5, [r4, #16]
   d78f2:	f7fe fd23 	bl	d633c <inet_htonl>
   d78f6:	4285      	cmp	r5, r0
   d78f8:	d11d      	bne.n	d7936 <_ZN9TCPClient7connectEPKctm+0xaa>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d78fa:	f104 0114 	add.w	r1, r4, #20
   d78fe:	a806      	add	r0, sp, #24
   d7900:	f7ff fab3 	bl	d6e6a <_ZN9IPAddressaSEPKh>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d7904:	a806      	add	r0, sp, #24
   d7906:	f7ff fa8d 	bl	d6e24 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d790a:	b188      	cbz	r0, d7930 <_ZN9TCPClient7connectEPKctm+0xa4>
            return connect(addr, port, nif);
   d790c:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d790e:	ad07      	add	r5, sp, #28
   d7910:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d7914:	4b18      	ldr	r3, [pc, #96]	; (d7978 <_ZN9TCPClient7connectEPKctm+0xec>)
   d7916:	930c      	str	r3, [sp, #48]	; 0x30
   d7918:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d791a:	ac0d      	add	r4, sp, #52	; 0x34
   d791c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d791e:	682b      	ldr	r3, [r5, #0]
   d7920:	7023      	strb	r3, [r4, #0]
   d7922:	463a      	mov	r2, r7
   d7924:	4643      	mov	r3, r8
   d7926:	a90c      	add	r1, sp, #48	; 0x30
   d7928:	4630      	mov	r0, r6
   d792a:	47c8      	blx	r9
   d792c:	4604      	mov	r4, r0
   d792e:	e01c      	b.n	d796a <_ZN9TCPClient7connectEPKctm+0xde>
        }
    }

    return -1;
   d7930:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d7934:	e019      	b.n	d796a <_ZN9TCPClient7connectEPKctm+0xde>
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7936:	f104 0308 	add.w	r3, r4, #8
   d793a:	ad01      	add	r5, sp, #4
   d793c:	3418      	adds	r4, #24
   d793e:	6818      	ldr	r0, [r3, #0]
   d7940:	6859      	ldr	r1, [r3, #4]
   d7942:	462a      	mov	r2, r5
   d7944:	c203      	stmia	r2!, {r0, r1}
   d7946:	3308      	adds	r3, #8
   d7948:	42a3      	cmp	r3, r4
   d794a:	4615      	mov	r5, r2
   d794c:	d1f7      	bne.n	d793e <_ZN9TCPClient7connectEPKctm+0xb2>
            a.v = 6;
   d794e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7950:	a901      	add	r1, sp, #4
   d7952:	a80c      	add	r0, sp, #48	; 0x30
   d7954:	ad0d      	add	r5, sp, #52	; 0x34
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d7956:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d795a:	f7ff fa51 	bl	d6e00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d795e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7960:	ac07      	add	r4, sp, #28
   d7962:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7964:	682b      	ldr	r3, [r5, #0]
   d7966:	7023      	strb	r3, [r4, #0]
   d7968:	e7cc      	b.n	d7904 <_ZN9TCPClient7connectEPKctm+0x78>

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
    stop();

    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d796a:	9800      	ldr	r0, [sp, #0]
   d796c:	f7fe fcfe 	bl	d636c <netdb_freeaddrinfo>
            return connect(addr, port, nif);
        }
    }

    return -1;
}
   d7970:	4620      	mov	r0, r4
   d7972:	b013      	add	sp, #76	; 0x4c
   d7974:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d7978:	000d9a84 	.word	0x000d9a84

000d797c <_ZN9TCPClient5writeEPKhjm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d797c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d797e:	4616      	mov	r6, r2
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
   d7980:	2200      	movs	r2, #0
   d7982:	6042      	str	r2, [r0, #4]
    clearWriteError();
    struct timeval tv = {};
   d7984:	9202      	str	r2, [sp, #8]
   d7986:	9203      	str	r2, [sp, #12]
    if (timeout != SOCKET_WAIT_FOREVER) {
   d7988:	1c5a      	adds	r2, r3, #1

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d798a:	4604      	mov	r4, r0
   d798c:	460d      	mov	r5, r1
    clearWriteError();
    struct timeval tv = {};
    if (timeout != SOCKET_WAIT_FOREVER) {
   d798e:	d008      	beq.n	d79a2 <_ZN9TCPClient5writeEPKhjm+0x26>
        tv.tv_sec = timeout / 1000;
   d7990:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7994:	fbb3 f1f2 	udiv	r1, r3, r2
   d7998:	9102      	str	r1, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d799a:	fb02 3111 	mls	r1, r2, r1, r3
   d799e:	434a      	muls	r2, r1
   d79a0:	9203      	str	r2, [sp, #12]
    }
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d79a2:	6960      	ldr	r0, [r4, #20]
   d79a4:	2308      	movs	r3, #8
   d79a6:	9300      	str	r3, [sp, #0]
   d79a8:	f241 0205 	movw	r2, #4101	; 0x1005
   d79ac:	446b      	add	r3, sp
   d79ae:	f640 71ff 	movw	r1, #4095	; 0xfff
   d79b2:	6800      	ldr	r0, [r0, #0]
   d79b4:	f7fe fcf2 	bl	d639c <sock_setsockopt>
    if (ret < 0) {
   d79b8:	2800      	cmp	r0, #0
   d79ba:	db08      	blt.n	d79ce <_ZN9TCPClient5writeEPKhjm+0x52>
        setWriteError(errno);
        return 0;
    }

    ret = sock_send(d_->sock, buffer, size, 0);
   d79bc:	6960      	ldr	r0, [r4, #20]
   d79be:	2300      	movs	r3, #0
   d79c0:	4632      	mov	r2, r6
   d79c2:	4629      	mov	r1, r5
   d79c4:	6800      	ldr	r0, [r0, #0]
   d79c6:	f7fe fd11 	bl	d63ec <sock_send>
    if (ret < 0) {
   d79ca:	2800      	cmp	r0, #0
   d79cc:	da04      	bge.n	d79d8 <_ZN9TCPClient5writeEPKhjm+0x5c>
        setWriteError(errno);
   d79ce:	f7fe fe7b 	bl	d66c8 <__errno>
   d79d2:	6803      	ldr	r3, [r0, #0]
   d79d4:	6063      	str	r3, [r4, #4]
   d79d6:	2000      	movs	r0, #0
        return 0;
    }

    return ret;
}
   d79d8:	b004      	add	sp, #16
   d79da:	bd70      	pop	{r4, r5, r6, pc}

000d79dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d79dc:	b510      	push	{r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d79de:	6803      	ldr	r3, [r0, #0]
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
   d79e0:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
   d79e2:	689b      	ldr	r3, [r3, #8]
   d79e4:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d79e6:	68a3      	ldr	r3, [r4, #8]
   d79e8:	3b01      	subs	r3, #1
   d79ea:	60a3      	str	r3, [r4, #8]
   d79ec:	b92b      	cbnz	r3, d79fa <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31+0x1e>
            _M_destroy();
   d79ee:	6823      	ldr	r3, [r4, #0]
   d79f0:	4620      	mov	r0, r4
   d79f2:	68db      	ldr	r3, [r3, #12]
        }
    }
   d79f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
   d79f8:	4718      	bx	r3
   d79fa:	bd10      	pop	{r4, pc}

000d79fc <_ZN9TCPClient8remoteIPEv>:

TCPClient::operator bool() {
   return (status() != 0);
}

IPAddress TCPClient::remoteIP() {
   d79fc:	b570      	push	{r4, r5, r6, lr}
   d79fe:	4604      	mov	r4, r0
   d7a00:	694d      	ldr	r5, [r1, #20]
   d7a02:	4b05      	ldr	r3, [pc, #20]	; (d7a18 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d7a04:	f844 3b04 	str.w	r3, [r4], #4
   d7a08:	358c      	adds	r5, #140	; 0x8c
   d7a0a:	4606      	mov	r6, r0
   d7a0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7a0e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7a10:	682b      	ldr	r3, [r5, #0]
   d7a12:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d7a14:	4630      	mov	r0, r6
   d7a16:	bd70      	pop	{r4, r5, r6, pc}
   d7a18:	000d9a84 	.word	0x000d9a84

000d7a1c <_ZN9TCPClient4peekEv>:
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7a1c:	b510      	push	{r4, lr}
   d7a1e:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7a20:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7a24:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7a28:	429a      	cmp	r2, r3
        d_->offset += read;
    }
    return read;
}

int TCPClient::peek() {
   d7a2a:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7a2c:	d005      	beq.n	d7a3a <_ZN9TCPClient4peekEv+0x1e>
   d7a2e:	6962      	ldr	r2, [r4, #20]
   d7a30:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7a34:	4413      	add	r3, r2
   d7a36:	7918      	ldrb	r0, [r3, #4]
   d7a38:	bd10      	pop	{r4, pc}
   d7a3a:	6803      	ldr	r3, [r0, #0]
   d7a3c:	691b      	ldr	r3, [r3, #16]
   d7a3e:	4798      	blx	r3
   d7a40:	2800      	cmp	r0, #0
   d7a42:	d1f4      	bne.n	d7a2e <_ZN9TCPClient4peekEv+0x12>
   d7a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d7a48:	bd10      	pop	{r4, pc}

000d7a4a <_ZN9TCPClient4readEv>:
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7a4a:	b510      	push	{r4, lr}
   d7a4c:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7a4e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7a52:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7a56:	429a      	cmp	r2, r3
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
}

int TCPClient::read() {
   d7a58:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7a5a:	d008      	beq.n	d7a6e <_ZN9TCPClient4readEv+0x24>
   d7a5c:	6962      	ldr	r2, [r4, #20]
   d7a5e:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7a62:	1c59      	adds	r1, r3, #1
   d7a64:	4413      	add	r3, r2
   d7a66:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
   d7a6a:	7918      	ldrb	r0, [r3, #4]
   d7a6c:	bd10      	pop	{r4, pc}
   d7a6e:	6803      	ldr	r3, [r0, #0]
   d7a70:	691b      	ldr	r3, [r3, #16]
   d7a72:	4798      	blx	r3
   d7a74:	2800      	cmp	r0, #0
   d7a76:	d1f1      	bne.n	d7a5c <_ZN9TCPClient4readEv+0x12>
   d7a78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d7a7c:	bd10      	pop	{r4, pc}

000d7a7e <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7a7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7a80:	6943      	ldr	r3, [r0, #20]
   d7a82:	4617      	mov	r7, r2
    int read = -1;
    if (bufferCount() || available()) {
   d7a84:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7a88:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7a8c:	429a      	cmp	r2, r3

int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
   d7a8e:	4605      	mov	r5, r0
   d7a90:	460e      	mov	r6, r1
    int read = -1;
    if (bufferCount() || available()) {
   d7a92:	d106      	bne.n	d7aa2 <_ZN9TCPClient4readEPhj+0x24>
   d7a94:	6803      	ldr	r3, [r0, #0]
   d7a96:	691b      	ldr	r3, [r3, #16]
   d7a98:	4798      	blx	r3
   d7a9a:	b910      	cbnz	r0, d7aa2 <_ZN9TCPClient4readEPhj+0x24>
int TCPClient::read() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
   d7a9c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   d7aa0:	e014      	b.n	d7acc <_ZN9TCPClient4readEPhj+0x4e>
   d7aa2:	6969      	ldr	r1, [r5, #20]

    return ret;
}

int TCPClient::bufferCount() {
    return d_->total - d_->offset;
   d7aa4:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7aa8:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7aac:	1ae4      	subs	r4, r4, r3
}

int TCPClient::read(uint8_t *buffer, size_t size) {
    int read = -1;
    if (bufferCount() || available()) {
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7aae:	42bc      	cmp	r4, r7
   d7ab0:	bf28      	it	cs
   d7ab2:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7ab4:	4419      	add	r1, r3
   d7ab6:	4622      	mov	r2, r4
   d7ab8:	3104      	adds	r1, #4
   d7aba:	4630      	mov	r0, r6
   d7abc:	f001 fe75 	bl	d97aa <memcpy>
   d7ac0:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7ac2:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7ac6:	4423      	add	r3, r4
   d7ac8:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
    }
    return read;
}
   d7acc:	4620      	mov	r0, r4
   d7ace:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d7ad0 <_ZN9TCPClient12flush_bufferEv>:

int TCPClient::peek() {
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer() {
   d7ad0:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d7ad2:	2300      	movs	r3, #0
   d7ad4:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7ad8:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7ada:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
   d7ade:	4770      	bx	lr

000d7ae0 <_ZN9TCPClient7connectE9IPAddresstm>:
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7ae0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7ae4:	4698      	mov	r8, r3
    stop();
   d7ae6:	6803      	ldr	r3, [r0, #0]
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7ae8:	460d      	mov	r5, r1
   d7aea:	b08a      	sub	sp, #40	; 0x28
    stop();
   d7aec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    }

    return -1;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d7aee:	4606      	mov	r6, r0
   d7af0:	4617      	mov	r7, r2
    stop();
   d7af2:	4798      	blx	r3

    NAMED_SCOPE_GUARD(done, {
        stop();
    });

    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d7af4:	7d2b      	ldrb	r3, [r5, #20]
   d7af6:	6974      	ldr	r4, [r6, #20]
   d7af8:	2b04      	cmp	r3, #4
   d7afa:	bf0c      	ite	eq
   d7afc:	2002      	moveq	r0, #2
   d7afe:	200a      	movne	r0, #10
   d7b00:	2206      	movs	r2, #6
   d7b02:	2101      	movs	r1, #1
   d7b04:	f7fe fc82 	bl	d640c <sock_socket>
   d7b08:	6020      	str	r0, [r4, #0]
    CHECK(d_->sock);
   d7b0a:	6973      	ldr	r3, [r6, #20]
   d7b0c:	681c      	ldr	r4, [r3, #0]
   d7b0e:	2c00      	cmp	r4, #0
   d7b10:	db5b      	blt.n	d7bca <_ZN9TCPClient7connectE9IPAddresstm+0xea>

    flush_buffer();
   d7b12:	4630      	mov	r0, r6
   d7b14:	f7ff ffdc 	bl	d7ad0 <_ZN9TCPClient12flush_bufferEv>

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7b18:	f1b8 0f00 	cmp.w	r8, #0
   d7b1c:	d017      	beq.n	d7b4e <_ZN9TCPClient7connectE9IPAddresstm+0x6e>
        struct ifreq ifr = {};
   d7b1e:	2300      	movs	r3, #0
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d7b20:	a903      	add	r1, sp, #12
   d7b22:	fa5f f088 	uxtb.w	r0, r8
    flush_buffer();

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
        struct ifreq ifr = {};
   d7b26:	9303      	str	r3, [sp, #12]
   d7b28:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK(if_index_to_name(nif, ifr.ifr_name));
   d7b2c:	f7fe fbd6 	bl	d62dc <if_index_to_name>
   d7b30:	2800      	cmp	r0, #0
   d7b32:	db49      	blt.n	d7bc8 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
   d7b34:	6970      	ldr	r0, [r6, #20]
   d7b36:	2306      	movs	r3, #6
   d7b38:	9300      	str	r3, [sp, #0]
   d7b3a:	f241 020b 	movw	r2, #4107	; 0x100b
   d7b3e:	ab03      	add	r3, sp, #12
   d7b40:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7b44:	6800      	ldr	r0, [r0, #0]
   d7b46:	f7fe fc29 	bl	d639c <sock_setsockopt>
   d7b4a:	2800      	cmp	r0, #0
   d7b4c:	db3c      	blt.n	d7bc8 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
   d7b4e:	241c      	movs	r4, #28
   d7b50:	4622      	mov	r2, r4
   d7b52:	2100      	movs	r1, #0
   d7b54:	a803      	add	r0, sp, #12
   d7b56:	f001 fe33 	bl	d97c0 <memset>
    if (ip.version() == 4) {
   d7b5a:	7d2b      	ldrb	r3, [r5, #20]
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
   d7b5c:	f88d 400c 	strb.w	r4, [sp, #12]
        CHECK(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)));
    }
#endif // HAL_PLATFORM_IFAPI

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
   d7b60:	2b04      	cmp	r3, #4
   d7b62:	d10c      	bne.n	d7b7e <_ZN9TCPClient7connectE9IPAddresstm+0x9e>
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7b64:	2302      	movs	r3, #2
        s->sin_port = htons(port);
   d7b66:	4638      	mov	r0, r7

    sockaddr_storage saddr = {};
    if (ip.version() == 4) {
        auto s = (sockaddr_in*)&saddr;
        s->sin_len = sizeof(saddr);
        s->sin_family = AF_INET;
   d7b68:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin_port = htons(port);
   d7b6c:	f7fe fbf6 	bl	d635c <inet_htons>
   d7b70:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7b74:	6868      	ldr	r0, [r5, #4]
   d7b76:	f7fe fbe1 	bl	d633c <inet_htonl>
   d7b7a:	9004      	str	r0, [sp, #16]
   d7b7c:	e013      	b.n	d7ba6 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7b7e:	230a      	movs	r3, #10
        s->sin6_port = htons(port);
   d7b80:	4638      	mov	r0, r7
        s->sin_port = htons(port);
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
   d7b82:	f88d 300d 	strb.w	r3, [sp, #13]
        s->sin6_port = htons(port);
   d7b86:	f7fe fbe9 	bl	d635c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7b8a:	ac05      	add	r4, sp, #20
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
    } else {
        auto s = (sockaddr_in6*)&saddr;
        s->sin6_len = sizeof(saddr);
        s->sin6_family = AF_INET6;
        s->sin6_port = htons(port);
   d7b8c:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7b90:	1d2b      	adds	r3, r5, #4
   d7b92:	f105 0714 	add.w	r7, r5, #20
   d7b96:	6818      	ldr	r0, [r3, #0]
   d7b98:	6859      	ldr	r1, [r3, #4]
   d7b9a:	4622      	mov	r2, r4
   d7b9c:	c203      	stmia	r2!, {r0, r1}
   d7b9e:	3308      	adds	r3, #8
   d7ba0:	42bb      	cmp	r3, r7
   d7ba2:	4614      	mov	r4, r2
   d7ba4:	d1f7      	bne.n	d7b96 <_ZN9TCPClient7connectE9IPAddresstm+0xb6>
    }

    // FIXME: timeout?
    CHECK(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)));
   d7ba6:	6973      	ldr	r3, [r6, #20]
   d7ba8:	221c      	movs	r2, #28
   d7baa:	a903      	add	r1, sp, #12
   d7bac:	6818      	ldr	r0, [r3, #0]
   d7bae:	f7fe fc05 	bl	d63bc <sock_connect>
   d7bb2:	2800      	cmp	r0, #0
   d7bb4:	db08      	blt.n	d7bc8 <_ZN9TCPClient7connectE9IPAddresstm+0xe8>
   d7bb6:	1d2c      	adds	r4, r5, #4
   d7bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7bba:	6976      	ldr	r6, [r6, #20]
   d7bbc:	368c      	adds	r6, #140	; 0x8c
   d7bbe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d7bc0:	6823      	ldr	r3, [r4, #0]
   d7bc2:	7033      	strb	r3, [r6, #0]

    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
   d7bc4:	2401      	movs	r4, #1
   d7bc6:	e004      	b.n	d7bd2 <_ZN9TCPClient7connectE9IPAddresstm+0xf2>
   d7bc8:	4604      	mov	r4, r0
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
    stop();

    NAMED_SCOPE_GUARD(done, {
   d7bca:	6833      	ldr	r3, [r6, #0]
   d7bcc:	4630      	mov	r0, r6
   d7bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7bd0:	4798      	blx	r3
    d_->remoteIP = ip;

    done.dismiss();
    // Why not 0?
    return 1;
}
   d7bd2:	4620      	mov	r0, r4
   d7bd4:	b00a      	add	sp, #40	; 0x28
   d7bd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7bda <_ZN9TCPClient4stopEv>:
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7bda:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7bdc:	6943      	ldr	r3, [r0, #20]
}

void TCPClient::flush() {
}

void TCPClient::stop() {
   d7bde:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d7be0:	6818      	ldr	r0, [r3, #0]
   d7be2:	2800      	cmp	r0, #0
   d7be4:	db01      	blt.n	d7bea <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7be6:	f7fe fbe1 	bl	d63ac <sock_close>
   d7bea:	6963      	ldr	r3, [r4, #20]
    }
    d_->sock = -1;
   d7bec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7bf0:	601a      	str	r2, [r3, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d7bf2:	6960      	ldr	r0, [r4, #20]
   d7bf4:	2211      	movs	r2, #17
   d7bf6:	2100      	movs	r1, #0
   d7bf8:	308c      	adds	r0, #140	; 0x8c
   d7bfa:	f001 fde1 	bl	d97c0 <memset>
    d_->remoteIP.clear();
    flush_buffer();
   d7bfe:	4620      	mov	r0, r4
}
   d7c00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    if (isOpen(d_->sock)) {
        sock_close(d_->sock);
    }
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
   d7c04:	f7ff bf64 	b.w	d7ad0 <_ZN9TCPClient12flush_bufferEv>

000d7c08 <_ZN9TCPClient9availableEv>:
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7c08:	b530      	push	{r4, r5, lr}
   d7c0a:	6942      	ldr	r2, [r0, #20]
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7c0c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
int TCPClient::bufferCount() {
    return d_->total - d_->offset;
}

int TCPClient::available()
{
   d7c10:	b08b      	sub	sp, #44	; 0x2c
   d7c12:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
   d7c14:	b11b      	cbz	r3, d7c1e <_ZN9TCPClient9availableEv+0x16>
   d7c16:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d7c1a:	429a      	cmp	r2, r3
   d7c1c:	d040      	beq.n	d7ca0 <_ZN9TCPClient9availableEv+0x98>
   d7c1e:	6963      	ldr	r3, [r4, #20]
        flush_buffer();
    }

    if (isOpen(d_->sock)) {
   d7c20:	6818      	ldr	r0, [r3, #0]
   d7c22:	2800      	cmp	r0, #0
   d7c24:	db3f      	blt.n	d7ca6 <_ZN9TCPClient9availableEv+0x9e>
        // Have room
        if (d_->total < arraySize(d_->buffer)) {
   d7c26:	f8b3 5086 	ldrh.w	r5, [r3, #134]	; 0x86
   d7c2a:	2d7f      	cmp	r5, #127	; 0x7f
   d7c2c:	d83b      	bhi.n	d7ca6 <_ZN9TCPClient9availableEv+0x9e>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d7c2e:	1d19      	adds	r1, r3, #4
   d7c30:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7c34:	2308      	movs	r3, #8
   d7c36:	4429      	add	r1, r5
   d7c38:	f7fe fbc8 	bl	d63cc <sock_recv>
            if (ret > 0) {
   d7c3c:	2800      	cmp	r0, #0
   d7c3e:	dd0c      	ble.n	d7c5a <_ZN9TCPClient9availableEv+0x52>
   d7c40:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d7c42:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7c46:	b90a      	cbnz	r2, d7c4c <_ZN9TCPClient9availableEv+0x44>
                    d_->offset = 0;
   d7c48:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7c4c:	6962      	ldr	r2, [r4, #20]
                }
                d_->total += ret;
   d7c4e:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7c52:	4418      	add	r0, r3
   d7c54:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
   d7c58:	e025      	b.n	d7ca6 <_ZN9TCPClient9availableEv+0x9e>
            } else {
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7c5a:	f7fe fd35 	bl	d66c8 <__errno>
   d7c5e:	6803      	ldr	r3, [r0, #0]
   d7c60:	2b0b      	cmp	r3, #11
   d7c62:	d020      	beq.n	d7ca6 <_ZN9TCPClient9availableEv+0x9e>
   d7c64:	f7fe fd30 	bl	d66c8 <__errno>
   d7c68:	6803      	ldr	r3, [r0, #0]
   d7c6a:	2b0b      	cmp	r3, #11
   d7c6c:	d01b      	beq.n	d7ca6 <_ZN9TCPClient9availableEv+0x9e>
                    LOG(ERROR, "recv error = %d", errno);
   d7c6e:	2320      	movs	r3, #32
   d7c70:	2500      	movs	r5, #0
   d7c72:	9302      	str	r3, [sp, #8]
   d7c74:	9503      	str	r5, [sp, #12]
   d7c76:	f7fe fd27 	bl	d66c8 <__errno>
   d7c7a:	6803      	ldr	r3, [r0, #0]
   d7c7c:	9301      	str	r3, [sp, #4]
   d7c7e:	4b0e      	ldr	r3, [pc, #56]	; (d7cb8 <_ZN9TCPClient9availableEv+0xb0>)
   d7c80:	9300      	str	r3, [sp, #0]
   d7c82:	aa02      	add	r2, sp, #8
   d7c84:	462b      	mov	r3, r5
   d7c86:	490d      	ldr	r1, [pc, #52]	; (d7cbc <_ZN9TCPClient9availableEv+0xb4>)
   d7c88:	2032      	movs	r0, #50	; 0x32
   d7c8a:	f7fe fc47 	bl	d651c <log_message>
                    sock_close(d_->sock);
   d7c8e:	6963      	ldr	r3, [r4, #20]
   d7c90:	6818      	ldr	r0, [r3, #0]
   d7c92:	f7fe fb8b 	bl	d63ac <sock_close>
   d7c96:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7c98:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   d7c9c:	601a      	str	r2, [r3, #0]
   d7c9e:	e002      	b.n	d7ca6 <_ZN9TCPClient9availableEv+0x9e>
{
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total)) {
        flush_buffer();
   d7ca0:	f7ff ff16 	bl	d7ad0 <_ZN9TCPClient12flush_bufferEv>
   d7ca4:	e7bb      	b.n	d7c1e <_ZN9TCPClient9availableEv+0x16>
   d7ca6:	6962      	ldr	r2, [r4, #20]
                }
            }
        } // Have Space
    } // isOpen(d_->sock)
    avail = bufferCount();
    return avail;
   d7ca8:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
   d7cac:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
   d7cb0:	1a18      	subs	r0, r3, r0
}
   d7cb2:	b00b      	add	sp, #44	; 0x2c
   d7cb4:	bd30      	pop	{r4, r5, pc}
   d7cb6:	bf00      	nop
   d7cb8:	000d9c78 	.word	0x000d9c78
   d7cbc:	000d9bb5 	.word	0x000d9bb5

000d7cc0 <_ZN9TCPClient4DataC1Ei>:

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7cc0:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7cc2:	2300      	movs	r3, #0

IPAddress TCPClient::remoteIP() {
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
   d7cc4:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
   d7cc6:	6001      	str	r1, [r0, #0]
   d7cc8:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
   d7ccc:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
   d7cd0:	3088      	adds	r0, #136	; 0x88
   d7cd2:	f7ff f887 	bl	d6de4 <_ZN9IPAddressC1Ev>
}
   d7cd6:	4620      	mov	r0, r4
   d7cd8:	bd10      	pop	{r4, pc}
	...

000d7cdc <_ZN9TCPClientC1Ei>:
   d7cdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7ce0:	b570      	push	{r4, r5, r6, lr}
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d7ce2:	2300      	movs	r3, #0
   d7ce4:	6082      	str	r2, [r0, #8]
        : d_(std::make_shared<Data>(sock)) {
   d7ce6:	4a14      	ldr	r2, [pc, #80]	; (d7d38 <_ZN9TCPClientC1Ei+0x5c>)
   d7ce8:	6043      	str	r3, [r0, #4]
   d7cea:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
   d7cec:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
   d7cee:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient()
        : TCPClient(-1) {
}

TCPClient::TCPClient(sock_handle_t sock)
   d7cf0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7cf2:	20a0      	movs	r0, #160	; 0xa0
   d7cf4:	460e      	mov	r6, r1
   d7cf6:	f7fc f9ce 	bl	d4096 <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d7cfa:	4605      	mov	r5, r0
   d7cfc:	b110      	cbz	r0, d7d04 <_ZN9TCPClientC1Ei+0x28>
   d7cfe:	4631      	mov	r1, r6
   d7d00:	f7ff ffde 	bl	d7cc0 <_ZN9TCPClient4DataC1Ei>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d7d04:	2014      	movs	r0, #20
   d7d06:	f7fc f9c6 	bl	d4096 <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
   d7d0a:	4603      	mov	r3, r0
   d7d0c:	b128      	cbz	r0, d7d1a <_ZN9TCPClientC1Ei+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
   d7d0e:	2201      	movs	r2, #1
   d7d10:	6042      	str	r2, [r0, #4]
   d7d12:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
   d7d14:	4a09      	ldr	r2, [pc, #36]	; (d7d3c <_ZN9TCPClientC1Ei+0x60>)
   d7d16:	6002      	str	r2, [r0, #0]
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
   d7d18:	6105      	str	r5, [r0, #16]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
   d7d1a:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
   d7d1c:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
   d7d1e:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d7d20:	b128      	cbz	r0, d7d2e <_ZN9TCPClientC1Ei+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
   d7d22:	6843      	ldr	r3, [r0, #4]
   d7d24:	3b01      	subs	r3, #1
   d7d26:	6043      	str	r3, [r0, #4]
   d7d28:	b90b      	cbnz	r3, d7d2e <_ZN9TCPClientC1Ei+0x52>
   d7d2a:	f7ff fe57 	bl	d79dc <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.4.constprop.31>
        : d_(std::make_shared<Data>(sock)) {
    flush_buffer();
   d7d2e:	4620      	mov	r0, r4
   d7d30:	f7ff fece 	bl	d7ad0 <_ZN9TCPClient12flush_bufferEv>
}
   d7d34:	4620      	mov	r0, r4
   d7d36:	bd70      	pop	{r4, r5, r6, pc}
   d7d38:	000d9c34 	.word	0x000d9c34
   d7d3c:	000d9c18 	.word	0x000d9c18

000d7d40 <_ZN9TCPClientC1Ev>:

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7d40:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d7d42:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff

static bool inline isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

TCPClient::TCPClient()
   d7d46:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7d48:	f7ff ffc8 	bl	d7cdc <_ZN9TCPClientC1Ei>
}
   d7d4c:	4620      	mov	r0, r4
   d7d4e:	bd10      	pop	{r4, pc}

000d7d50 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
   d7d50:	b510      	push	{r4, lr}
   d7d52:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d7d54:	6800      	ldr	r0, [r0, #0]
   d7d56:	2800      	cmp	r0, #0
   d7d58:	db01      	blt.n	d7d5e <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7d5a:	f7fe fb27 	bl	d63ac <sock_close>
    }
}
   d7d5e:	4620      	mov	r0, r4
   d7d60:	bd10      	pop	{r4, pc}

000d7d62 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
   d7d62:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
   d7d64:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
   d7d66:	4620      	mov	r0, r4
   d7d68:	f7ff fff2 	bl	d7d50 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
   d7d6c:	b124      	cbz	r4, d7d78 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
   d7d6e:	4620      	mov	r0, r4
   d7d70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d7d74:	f7fc b993 	b.w	d409e <_ZdlPv>
   d7d78:	bd10      	pop	{r4, pc}
	...

000d7d7c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d7d7c:	4b02      	ldr	r3, [pc, #8]	; (d7d88 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d7d7e:	681a      	ldr	r2, [r3, #0]
   d7d80:	4b02      	ldr	r3, [pc, #8]	; (d7d8c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d7d82:	601a      	str	r2, [r3, #0]
   d7d84:	4770      	bx	lr
   d7d86:	bf00      	nop
   d7d88:	2003dc70 	.word	0x2003dc70
   d7d8c:	2003e6c8 	.word	0x2003e6c8

000d7d90 <_ZN3UDP13receivePacketEPcjm>:
     * @param buffer        The buffer to read data to
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
   d7d90:	b410      	push	{r4}
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d7d92:	6804      	ldr	r4, [r0, #0]
   d7d94:	6b24      	ldr	r4, [r4, #48]	; 0x30
   d7d96:	46a4      	mov	ip, r4
    }
   d7d98:	f85d 4b04 	ldr.w	r4, [sp], #4
     * @param buf_size      The buffer size
     * @return The number of bytes written to the buffer, or a negative value on error.
     */
    virtual int receivePacket(uint8_t* buffer, size_t buf_size, system_tick_t timeout = 0);
    virtual int receivePacket(char* buffer, size_t buf_size, system_tick_t timeout = 0) {
        return receivePacket((uint8_t*)buffer, buf_size, timeout);
   d7d9c:	4760      	bx	ip

000d7d9e <_ZN3UDP4readEPcj>:
     * @return
     */
    virtual int read();
    virtual int read(unsigned char* buffer, size_t len);

    virtual int read(char* buffer, size_t len) { return read((unsigned char*)buffer, len); };
   d7d9e:	6803      	ldr	r3, [r0, #0]
   d7da0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d7da2:	4718      	bx	r3

000d7da4 <_ZN3UDP10remotePortEv>:
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
    virtual uint16_t remotePort() { return _remotePort; };
   d7da4:	8e80      	ldrh	r0, [r0, #52]	; 0x34
   d7da6:	4770      	bx	lr

000d7da8 <_ZN3UDP9availableEv>:
    }
    return bound;
}

int UDP::available() {
    return _total - _offset;
   d7da8:	8f02      	ldrh	r2, [r0, #56]	; 0x38
   d7daa:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
}
   d7dac:	1a10      	subs	r0, r2, r0
   d7dae:	4770      	bx	lr

000d7db0 <_ZN3UDP5writeEh>:
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d7db0:	b513      	push	{r0, r1, r4, lr}
   d7db2:	ab02      	add	r3, sp, #8
    return write(&byte, 1);
   d7db4:	6802      	ldr	r2, [r0, #0]
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}

size_t UDP::write(uint8_t byte) {
   d7db6:	f803 1d01 	strb.w	r1, [r3, #-1]!
    return write(&byte, 1);
   d7dba:	68d4      	ldr	r4, [r2, #12]
   d7dbc:	4619      	mov	r1, r3
   d7dbe:	2201      	movs	r2, #1
   d7dc0:	47a0      	blx	r4
}
   d7dc2:	b002      	add	sp, #8
   d7dc4:	bd10      	pop	{r4, pc}

000d7dc6 <_ZN3UDP4readEv>:
        }
    }
    return ret;
}

int UDP::read() {
   d7dc6:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset++] : -1;
   d7dc8:	6803      	ldr	r3, [r0, #0]
   d7dca:	691b      	ldr	r3, [r3, #16]
        }
    }
    return ret;
}

int UDP::read() {
   d7dcc:	4604      	mov	r4, r0
    return available() ? _buffer[_offset++] : -1;
   d7dce:	4798      	blx	r3
   d7dd0:	b128      	cbz	r0, d7dde <_ZN3UDP4readEv+0x18>
   d7dd2:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7dd4:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d7dd6:	1c59      	adds	r1, r3, #1
   d7dd8:	86e1      	strh	r1, [r4, #54]	; 0x36
   d7dda:	5cd0      	ldrb	r0, [r2, r3]
   d7ddc:	bd10      	pop	{r4, pc}
   d7dde:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d7de2:	bd10      	pop	{r4, pc}

000d7de4 <_ZN3UDP4peekEv>:
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d7de4:	b510      	push	{r4, lr}
    return available() ? _buffer[_offset] : -1;
   d7de6:	6803      	ldr	r3, [r0, #0]
   d7de8:	691b      	ldr	r3, [r3, #16]
        _offset += read;
    }
    return read;
}

int UDP::peek() {
   d7dea:	4604      	mov	r4, r0
    return available() ? _buffer[_offset] : -1;
   d7dec:	4798      	blx	r3
   d7dee:	b118      	cbz	r0, d7df8 <_ZN3UDP4peekEv+0x14>
   d7df0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7df2:	6be2      	ldr	r2, [r4, #60]	; 0x3c
   d7df4:	5cd0      	ldrb	r0, [r2, r3]
   d7df6:	bd10      	pop	{r4, pc}
   d7df8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d7dfc:	bd10      	pop	{r4, pc}

000d7dfe <_ZN3UDP5flushEv>:

void UDP::flush() {
   d7dfe:	4770      	bx	lr

000d7e00 <_ZNK3UDP7printToER5Print>:
void UDP::flush_buffer() {
    _offset = 0;
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
   d7e00:	b410      	push	{r4}
   d7e02:	4603      	mov	r3, r0
   d7e04:	4608      	mov	r0, r1
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d7e06:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
    _total = 0;
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
   d7e08:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
    return p.write(_buffer + _offset, size);
   d7e0a:	8f1a      	ldrh	r2, [r3, #56]	; 0x38
   d7e0c:	6803      	ldr	r3, [r0, #0]
   d7e0e:	1a52      	subs	r2, r2, r1
   d7e10:	68db      	ldr	r3, [r3, #12]
   d7e12:	4421      	add	r1, r4
}
   d7e14:	f85d 4b04 	ldr.w	r4, [sp], #4
}

size_t UDP::printTo(Print& p) const {
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
   d7e18:	4718      	bx	r3

000d7e1a <_ZThn16_NK3UDP7printToER5Print>:
    /**
     * Prints the current read parsed packet to the given output.
     * @param p
     * @return
     */
    virtual size_t printTo(Print& p) const;
   d7e1a:	f1a0 0010 	sub.w	r0, r0, #16
   d7e1e:	f7ff bfef 	b.w	d7e00 <_ZNK3UDP7printToER5Print>

000d7e22 <_ZN3UDP5beginEtm>:
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7e22:	b5f0      	push	{r4, r5, r6, r7, lr}
    stop();
   d7e24:	6803      	ldr	r3, [r0, #0]
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7e26:	b08d      	sub	sp, #52	; 0x34

    bool bound = false;
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7e28:	261c      	movs	r6, #28
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();
   d7e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    _buffer_allocated = false;
    _buffer_size = 0;
    flush_buffer(); // clear buffer
}

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
   d7e2c:	4604      	mov	r4, r0
   d7e2e:	460f      	mov	r7, r1
   d7e30:	4615      	mov	r5, r2
    stop();
   d7e32:	4798      	blx	r3

    bool bound = false;
    const int one = 1;
   d7e34:	2301      	movs	r3, #1

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7e36:	4632      	mov	r2, r6
   d7e38:	2100      	movs	r1, #0
   d7e3a:	a805      	add	r0, sp, #20

uint8_t UDP::begin(uint16_t port, network_interface_t nif) {
    stop();

    bool bound = false;
    const int one = 1;
   d7e3c:	9302      	str	r3, [sp, #8]

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
   d7e3e:	f001 fcbf 	bl	d97c0 <memset>
    saddr.sin6_len = sizeof(saddr);
   d7e42:	f88d 6014 	strb.w	r6, [sp, #20]
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d7e46:	4638      	mov	r0, r7
    const int one = 1;

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
   d7e48:	260a      	movs	r6, #10
   d7e4a:	f88d 6015 	strb.w	r6, [sp, #21]
    saddr.sin6_port = htons(port);
   d7e4e:	f7fe fa85 	bl	d635c <inet_htons>
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7e52:	2211      	movs	r2, #17

#if HAL_IPv6
    struct sockaddr_in6 saddr = {};
    saddr.sin6_len = sizeof(saddr);
    saddr.sin6_family = AF_INET6;
    saddr.sin6_port = htons(port);
   d7e54:	f8ad 0016 	strh.w	r0, [sp, #22]
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7e58:	2102      	movs	r1, #2
   d7e5a:	4630      	mov	r0, r6
   d7e5c:	f7fe fad6 	bl	d640c <sock_socket>

    if (_sock < 0) {
   d7e60:	2800      	cmp	r0, #0
    saddr.sin_port = htons(port);
    saddr.sin_addr.s_addr = INADDR_ANY;
#endif // HAL_IPv6

    // Create socket
    _sock = sock_socket(HAL_IPv6 ? AF_INET6 : AF_INET, SOCK_DGRAM, IPPROTO_UDP);
   d7e62:	6160      	str	r0, [r4, #20]

    if (_sock < 0) {
   d7e64:	db24      	blt.n	d7eb0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    if (sock_setsockopt(_sock, SOL_SOCKET, SO_REUSEADDR, &one, sizeof(one))) {
   d7e66:	2204      	movs	r2, #4
   d7e68:	9200      	str	r2, [sp, #0]
   d7e6a:	ab02      	add	r3, sp, #8
   d7e6c:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7e70:	f7fe fa94 	bl	d639c <sock_setsockopt>
   d7e74:	b9e0      	cbnz	r0, d7eb0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

#if HAL_PLATFORM_IFAPI
    // TODO: provide compatibility headers and use if_indextoname()
    if (nif != 0) {
   d7e76:	b195      	cbz	r5, d7e9e <_ZN3UDP5beginEtm+0x7c>
        struct ifreq ifr = {};
   d7e78:	9003      	str	r0, [sp, #12]
   d7e7a:	f8ad 0010 	strh.w	r0, [sp, #16]
        if (if_index_to_name(nif, ifr.ifr_name)) {
   d7e7e:	a903      	add	r1, sp, #12
   d7e80:	b2e8      	uxtb	r0, r5
   d7e82:	f7fe fa2b 	bl	d62dc <if_index_to_name>
   d7e86:	b998      	cbnz	r0, d7eb0 <_ZN3UDP5beginEtm+0x8e>
            goto done;
        }
        if (sock_setsockopt(_sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr))) {
   d7e88:	2306      	movs	r3, #6
   d7e8a:	9300      	str	r3, [sp, #0]
   d7e8c:	f241 020b 	movw	r2, #4107	; 0x100b
   d7e90:	ab03      	add	r3, sp, #12
   d7e92:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7e96:	6960      	ldr	r0, [r4, #20]
   d7e98:	f7fe fa80 	bl	d639c <sock_setsockopt>
   d7e9c:	b940      	cbnz	r0, d7eb0 <_ZN3UDP5beginEtm+0x8e>
        }
    }
#endif // HAL_PLATFORM_IFAPI

    // Bind socket
    if (sock_bind(_sock, (const struct sockaddr*)&saddr, sizeof(saddr))) {
   d7e9e:	221c      	movs	r2, #28
   d7ea0:	a905      	add	r1, sp, #20
   d7ea2:	6960      	ldr	r0, [r4, #20]
   d7ea4:	f7fe fa72 	bl	d638c <sock_bind>
   d7ea8:	b910      	cbnz	r0, d7eb0 <_ZN3UDP5beginEtm+0x8e>
        goto done;
    }

    _nif = nif;
   d7eaa:	6465      	str	r5, [r4, #68]	; 0x44

    bound = true;
   d7eac:	2001      	movs	r0, #1
   d7eae:	e004      	b.n	d7eba <_ZN3UDP5beginEtm+0x98>

done:
    if (!bound) {
        stop();
   d7eb0:	6823      	ldr	r3, [r4, #0]
   d7eb2:	4620      	mov	r0, r4
   d7eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d7eb6:	4798      	blx	r3
   d7eb8:	2000      	movs	r0, #0
    }
    return bound;
}
   d7eba:	b00d      	add	sp, #52	; 0x34
   d7ebc:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7ebe <_ZN3UDP4stopEv>:

int UDP::available() {
    return _total - _offset;
}

void UDP::stop() {
   d7ebe:	b510      	push	{r4, lr}
   d7ec0:	4604      	mov	r4, r0
    if (isOpen(_sock)) {
   d7ec2:	6940      	ldr	r0, [r0, #20]
   d7ec4:	2800      	cmp	r0, #0
   d7ec6:	db01      	blt.n	d7ecc <_ZN3UDP4stopEv+0xe>
        sock_close(_sock);
   d7ec8:	f7fe fa70 	bl	d63ac <sock_close>
    }

    _sock = -1;
   d7ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   d7ed0:	6163      	str	r3, [r4, #20]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d7ed2:	2300      	movs	r3, #0
   d7ed4:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d7ed6:	8723      	strh	r3, [r4, #56]	; 0x38
   d7ed8:	bd10      	pop	{r4, pc}

000d7eda <_ZN3UDP5writeEPKhj>:

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d7eda:	b538      	push	{r3, r4, r5, lr}
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d7edc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c

size_t UDP::write(uint8_t byte) {
    return write(&byte, 1);
}

size_t UDP::write(const uint8_t *buffer, size_t size) {
   d7ede:	4605      	mov	r5, r0
   d7ee0:	8ec0      	ldrh	r0, [r0, #54]	; 0x36
    size_t available = _buffer ? _buffer_size - _offset : 0;
   d7ee2:	b113      	cbz	r3, d7eea <_ZN3UDP5writeEPKhj+0x10>
   d7ee4:	6c2c      	ldr	r4, [r5, #64]	; 0x40
   d7ee6:	1a24      	subs	r4, r4, r0
   d7ee8:	e000      	b.n	d7eec <_ZN3UDP5writeEPKhj+0x12>
   d7eea:	461c      	mov	r4, r3
   d7eec:	4294      	cmp	r4, r2
   d7eee:	bf28      	it	cs
   d7ef0:	4614      	movcs	r4, r2
    if (size > available) {
        size = available;
    }
    memcpy(_buffer + _offset, buffer, size);
   d7ef2:	4622      	mov	r2, r4
   d7ef4:	4418      	add	r0, r3
   d7ef6:	f001 fc58 	bl	d97aa <memcpy>
    _offset += size;
   d7efa:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
   d7efc:	4423      	add	r3, r4
   d7efe:	86eb      	strh	r3, [r5, #54]	; 0x36
    return size;
}
   d7f00:	4620      	mov	r0, r4
   d7f02:	bd38      	pop	{r3, r4, r5, pc}

000d7f04 <_ZN3UDP4readEPhj>:

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d7f04:	b570      	push	{r4, r5, r6, lr}
    int read = -1;
    if (available()) {
   d7f06:	6803      	ldr	r3, [r0, #0]
   d7f08:	691b      	ldr	r3, [r3, #16]

int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
   d7f0a:	4604      	mov	r4, r0
   d7f0c:	460e      	mov	r6, r1
   d7f0e:	4615      	mov	r5, r2
    int read = -1;
    if (available()) {
   d7f10:	4798      	blx	r3
   d7f12:	b188      	cbz	r0, d7f38 <_ZN3UDP4readEPhj+0x34>
        read = min(int(len), available());
   d7f14:	6823      	ldr	r3, [r4, #0]
   d7f16:	4620      	mov	r0, r4
   d7f18:	691b      	ldr	r3, [r3, #16]
   d7f1a:	4798      	blx	r3
        memcpy(buffer, &_buffer[_offset], read);
   d7f1c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7f1e:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7f20:	4285      	cmp	r5, r0
   d7f22:	bfa8      	it	ge
   d7f24:	4605      	movge	r5, r0
   d7f26:	4419      	add	r1, r3
   d7f28:	462a      	mov	r2, r5
   d7f2a:	4630      	mov	r0, r6
   d7f2c:	f001 fc3d 	bl	d97aa <memcpy>
        _offset += read;
   d7f30:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   d7f32:	442b      	add	r3, r5
   d7f34:	86e3      	strh	r3, [r4, #54]	; 0x36
   d7f36:	e001      	b.n	d7f3c <_ZN3UDP4readEPhj+0x38>
int UDP::read() {
    return available() ? _buffer[_offset++] : -1;
}

int UDP::read(unsigned char* buffer, size_t len) {
    int read = -1;
   d7f38:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
        read = min(int(len), available());
        memcpy(buffer, &_buffer[_offset], read);
        _offset += read;
    }
    return read;
}
   d7f3c:	4628      	mov	r0, r5
   d7f3e:	bd70      	pop	{r4, r5, r6, pc}

000d7f40 <_ZN3UDP8remoteIPEv>:
     */
    void flush_buffer();

    const uint8_t* buffer() const { return _buffer; }

    virtual IPAddress remoteIP() { return _remoteIP; };
   d7f40:	b570      	push	{r4, r5, r6, lr}

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d7f42:	4604      	mov	r4, r0
   d7f44:	4b05      	ldr	r3, [pc, #20]	; (d7f5c <_ZN3UDP8remoteIPEv+0x1c>)
   d7f46:	f844 3b04 	str.w	r3, [r4], #4
   d7f4a:	f101 0520 	add.w	r5, r1, #32
   d7f4e:	4606      	mov	r6, r0
   d7f50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7f54:	682b      	ldr	r3, [r5, #0]
   d7f56:	7023      	strb	r3, [r4, #0]
   d7f58:	4630      	mov	r0, r6
   d7f5a:	bd70      	pop	{r4, r5, r6, pc}
   d7f5c:	000d9a84 	.word	0x000d9a84

000d7f60 <_ZN3UDP10sendPacketEPKcj9IPAddresst>:
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7f60:	b5f0      	push	{r4, r5, r6, r7, lr}
   d7f62:	4694      	mov	ip, r2
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7f64:	6802      	ldr	r2, [r0, #0]
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7f66:	b089      	sub	sp, #36	; 0x24
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7f68:	6a97      	ldr	r7, [r2, #40]	; 0x28
   d7f6a:	4a0a      	ldr	r2, [pc, #40]	; (d7f94 <_ZN3UDP10sendPacketEPKcj9IPAddresst+0x34>)
   d7f6c:	9202      	str	r2, [sp, #8]
   d7f6e:	1d1d      	adds	r5, r3, #4
     * @param ip
     * @param port
     * @return
     */
    virtual int sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress destination, uint16_t port);
    virtual int sendPacket(const char* buffer, size_t buffer_size, IPAddress destination, uint16_t port) {
   d7f70:	468e      	mov	lr, r1
   d7f72:	4606      	mov	r6, r0
   d7f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7f76:	ac03      	add	r4, sp, #12
   d7f78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7f7a:	682b      	ldr	r3, [r5, #0]
   d7f7c:	7023      	strb	r3, [r4, #0]
        return sendPacket((uint8_t*)buffer, buffer_size, destination, port);
   d7f7e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
   d7f82:	9300      	str	r3, [sp, #0]
   d7f84:	4662      	mov	r2, ip
   d7f86:	ab02      	add	r3, sp, #8
   d7f88:	4671      	mov	r1, lr
   d7f8a:	4630      	mov	r0, r6
   d7f8c:	47b8      	blx	r7
    }
   d7f8e:	b009      	add	sp, #36	; 0x24
   d7f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7f92:	bf00      	nop
   d7f94:	000d9a84 	.word	0x000d9a84

000d7f98 <_ZN3UDP9endPacketEv>:
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d7f98:	b5f0      	push	{r4, r5, r6, r7, lr}
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d7f9a:	6803      	ldr	r3, [r0, #0]
   d7f9c:	f8b0 e036 	ldrh.w	lr, [r0, #54]	; 0x36
   d7fa0:	6a9f      	ldr	r7, [r3, #40]	; 0x28
   d7fa2:	4b0d      	ldr	r3, [pc, #52]	; (d7fd8 <_ZN3UDP9endPacketEv+0x40>)
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
   d7fa4:	b089      	sub	sp, #36	; 0x24
   d7fa6:	f100 0620 	add.w	r6, r0, #32
   d7faa:	4604      	mov	r4, r0
   d7fac:	9302      	str	r3, [sp, #8]
   d7fae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d7fb0:	ad03      	add	r5, sp, #12
   d7fb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d7fb4:	6833      	ldr	r3, [r6, #0]
   d7fb6:	702b      	strb	r3, [r5, #0]
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d7fb8:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
   d7fba:	9300      	str	r3, [sp, #0]
   d7fbc:	4672      	mov	r2, lr
   d7fbe:	ab02      	add	r3, sp, #8
   d7fc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
   d7fc2:	4620      	mov	r0, r4
   d7fc4:	47b8      	blx	r7
    flush(); // wait for send to complete
   d7fc6:	6823      	ldr	r3, [r4, #0]
    flush_buffer(); // clear buffer
    return _buffer_size;
}

int UDP::endPacket() {
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
   d7fc8:	4605      	mov	r5, r0
    flush(); // wait for send to complete
   d7fca:	69db      	ldr	r3, [r3, #28]
   d7fcc:	4620      	mov	r0, r4
   d7fce:	4798      	blx	r3
    return result;
}
   d7fd0:	4628      	mov	r0, r5
   d7fd2:	b009      	add	sp, #36	; 0x24
   d7fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d7fd6:	bf00      	nop
   d7fd8:	000d9a84 	.word	0x000d9a84

000d7fdc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>:

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d7fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (saddr->sa_family == AF_INET) {
   d7fde:	7843      	ldrb	r3, [r0, #1]
   d7fe0:	2b02      	cmp	r3, #2

namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
   d7fe2:	b08d      	sub	sp, #52	; 0x34
   d7fe4:	4605      	mov	r5, r0
   d7fe6:	460c      	mov	r4, r1
   d7fe8:	4617      	mov	r7, r2
    if (saddr->sa_family == AF_INET) {
   d7fea:	d101      	bne.n	d7ff0 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x14>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7fec:	1d01      	adds	r1, r0, #4
   d7fee:	e033      	b.n	d8058 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x7c>
        if (port) {
            *port = ntohs(inaddr->sin_port);
        }
    }
#if HAL_IPv6
    else if (saddr->sa_family == AF_INET6) {
   d7ff0:	2b0a      	cmp	r3, #10
   d7ff2:	d135      	bne.n	d8060 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
   d7ff4:	2211      	movs	r2, #17
   d7ff6:	2100      	movs	r1, #0
   d7ff8:	a801      	add	r0, sp, #4
   d7ffa:	f001 fbe1 	bl	d97c0 <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7ffe:	68ab      	ldr	r3, [r5, #8]
   d8000:	b943      	cbnz	r3, d8014 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d8002:	68eb      	ldr	r3, [r5, #12]
   d8004:	b933      	cbnz	r3, d8014 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x38>
   d8006:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d800a:	692e      	ldr	r6, [r5, #16]
   d800c:	f7fe f996 	bl	d633c <inet_htonl>
   d8010:	4286      	cmp	r6, r0
   d8012:	d01f      	beq.n	d8054 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x78>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d8014:	f105 0308 	add.w	r3, r5, #8
   d8018:	ae01      	add	r6, sp, #4
   d801a:	f105 0e18 	add.w	lr, r5, #24
   d801e:	6818      	ldr	r0, [r3, #0]
   d8020:	6859      	ldr	r1, [r3, #4]
   d8022:	4632      	mov	r2, r6
   d8024:	c203      	stmia	r2!, {r0, r1}
   d8026:	3308      	adds	r3, #8
   d8028:	4573      	cmp	r3, lr
   d802a:	4616      	mov	r6, r2
   d802c:	d1f7      	bne.n	d801e <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x42>
            a.v = 6;
   d802e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d8030:	a901      	add	r1, sp, #4
   d8032:	a806      	add	r0, sp, #24
   d8034:	ae07      	add	r6, sp, #28
    else if (saddr->sa_family == AF_INET6) {
        const struct sockaddr_in6* in6addr = (const struct sockaddr_in6*)saddr;
        HAL_IPAddress a = {};
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
   d8036:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d803a:	f7fe fee1 	bl	d6e00 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d803e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   d8040:	3404      	adds	r4, #4
   d8042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d8044:	6833      	ldr	r3, [r6, #0]
   d8046:	7023      	strb	r3, [r4, #0]
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
        }
        if (port) {
   d8048:	b157      	cbz	r7, d8060 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            *port = ntohs(in6addr->sin6_port);
   d804a:	8868      	ldrh	r0, [r5, #2]
   d804c:	f7fe f97e 	bl	d634c <inet_ntohs>
   d8050:	8038      	strh	r0, [r7, #0]
        }
    }
#endif // HAL_IPv6
}
   d8052:	e005      	b.n	d8060 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x84>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d8054:	f105 0114 	add.w	r1, r5, #20
   d8058:	4620      	mov	r0, r4
   d805a:	f7fe ff06 	bl	d6e6a <_ZN9IPAddressaSEPKh>
   d805e:	e7f3      	b.n	d8048 <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt+0x6c>
        if (port) {
            *port = ntohs(in6addr->sin6_port);
        }
    }
#endif // HAL_IPv6
}
   d8060:	b00d      	add	sp, #52	; 0x34
   d8062:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d8064 <_ZN3UDP11beginPacketEPKct>:
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d8064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8068:	b08e      	sub	sp, #56	; 0x38
    struct addrinfo* ais = nullptr;
   d806a:	ab0e      	add	r3, sp, #56	; 0x38
   d806c:	2500      	movs	r5, #0
    _sock = -1;

    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
   d806e:	4606      	mov	r6, r0
   d8070:	4617      	mov	r7, r2
   d8072:	4608      	mov	r0, r1
    struct addrinfo* ais = nullptr;
   d8074:	f843 5d34 	str.w	r5, [r3, #-52]!
    SCOPE_GUARD({
        netdb_freeaddrinfo(ais);
    });
    CHECK(netdb_getaddrinfo(host, nullptr, nullptr, &ais));
   d8078:	462a      	mov	r2, r5
   d807a:	4629      	mov	r1, r5
   d807c:	f7fe f97e 	bl	d637c <netdb_getaddrinfo>
   d8080:	2800      	cmp	r0, #0
   d8082:	db1f      	blt.n	d80c4 <_ZN3UDP11beginPacketEPKct+0x60>

    // FIXME: for now using only the first entry
    if (ais && ais->ai_addr) {
   d8084:	9b01      	ldr	r3, [sp, #4]
   d8086:	b1fb      	cbz	r3, d80c8 <_ZN3UDP11beginPacketEPKct+0x64>
   d8088:	695b      	ldr	r3, [r3, #20]
   d808a:	b1eb      	cbz	r3, d80c8 <_ZN3UDP11beginPacketEPKct+0x64>
        IPAddress addr;
   d808c:	a802      	add	r0, sp, #8
   d808e:	f7fe fea9 	bl	d6de4 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d8092:	9b01      	ldr	r3, [sp, #4]
   d8094:	462a      	mov	r2, r5
   d8096:	6958      	ldr	r0, [r3, #20]
   d8098:	a902      	add	r1, sp, #8
   d809a:	f7ff ff9f 	bl	d7fdc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
    operator bool() const;

    // For some reason, without this non-const overload GCC struggles to pick right operator
    // for bool conversion of a non-const object
    operator bool() {
        return static_cast<const IPAddress*>(this)->operator bool();
   d809e:	a802      	add	r0, sp, #8
   d80a0:	f7fe fec0 	bl	d6e24 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d80a4:	b180      	cbz	r0, d80c8 <_ZN3UDP11beginPacketEPKct+0x64>
            return beginPacket(addr, port);
   d80a6:	6833      	ldr	r3, [r6, #0]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d80a8:	ad03      	add	r5, sp, #12
   d80aa:	f8d3 8038 	ldr.w	r8, [r3, #56]	; 0x38
   d80ae:	4b0b      	ldr	r3, [pc, #44]	; (d80dc <_ZN3UDP11beginPacketEPKct+0x78>)
   d80b0:	9308      	str	r3, [sp, #32]
   d80b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d80b4:	ac09      	add	r4, sp, #36	; 0x24
   d80b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d80b8:	682b      	ldr	r3, [r5, #0]
   d80ba:	7023      	strb	r3, [r4, #0]
   d80bc:	463a      	mov	r2, r7
   d80be:	a908      	add	r1, sp, #32
   d80c0:	4630      	mov	r0, r6
   d80c2:	47c0      	blx	r8
   d80c4:	4604      	mov	r4, r0
   d80c6:	e001      	b.n	d80cc <_ZN3UDP11beginPacketEPKct+0x68>
        }
    }

    return -1;
   d80c8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    flush_buffer(); // clear buffer
}

int UDP::beginPacket(const char *host, uint16_t port) {
    struct addrinfo* ais = nullptr;
    SCOPE_GUARD({
   d80cc:	9801      	ldr	r0, [sp, #4]
   d80ce:	f7fe f94d 	bl	d636c <netdb_freeaddrinfo>
            return beginPacket(addr, port);
        }
    }

    return -1;
}
   d80d2:	4620      	mov	r0, r4
   d80d4:	b00e      	add	sp, #56	; 0x38
   d80d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d80da:	bf00      	nop
   d80dc:	000d9a84 	.word	0x000d9a84

000d80e0 <_ZN3UDP13receivePacketEPhjm>:
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d80e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d80e4:	f8d0 8014 	ldr.w	r8, [r0, #20]
   d80e8:	f1b8 0f00 	cmp.w	r8, #0
        }
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
   d80ec:	b08c      	sub	sp, #48	; 0x30
   d80ee:	4605      	mov	r5, r0
   d80f0:	460c      	mov	r4, r1
   d80f2:	4617      	mov	r7, r2
   d80f4:	4699      	mov	r9, r3
    int ret = -1;
    if (isOpen(_sock) && buffer) {
   d80f6:	db00      	blt.n	d80fa <_ZN3UDP13receivePacketEPhjm+0x1a>
   d80f8:	b911      	cbnz	r1, d8100 <_ZN3UDP13receivePacketEPhjm+0x20>
    }
    return available();
}

int UDP::receivePacket(uint8_t* buffer, size_t size, system_tick_t timeout) {
    int ret = -1;
   d80fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d80fe:	e035      	b.n	d816c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
   d8100:	f04f 0a1c 	mov.w	sl, #28
   d8104:	ae05      	add	r6, sp, #20
   d8106:	4652      	mov	r2, sl
   d8108:	2100      	movs	r1, #0
   d810a:	4630      	mov	r0, r6
   d810c:	f001 fb58 	bl	d97c0 <memset>
        socklen_t slen = sizeof(saddr);
   d8110:	f8cd a008 	str.w	sl, [sp, #8]
        int flags = 0;
        if (timeout == 0) {
   d8114:	f1b9 0f00 	cmp.w	r9, #0
   d8118:	d014      	beq.n	d8144 <_ZN3UDP13receivePacketEPhjm+0x64>
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
   d811a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d811e:	fbb9 f1f2 	udiv	r1, r9, r2
   d8122:	9103      	str	r1, [sp, #12]
            tv.tv_usec = (timeout % 1000) * 1000;
   d8124:	fb02 9111 	mls	r1, r2, r1, r9
   d8128:	434a      	muls	r2, r1
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d812a:	2308      	movs	r3, #8
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
        } else {
            struct timeval tv = {};
            tv.tv_sec = timeout / 1000;
            tv.tv_usec = (timeout % 1000) * 1000;
   d812c:	9204      	str	r2, [sp, #16]
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
   d812e:	9300      	str	r3, [sp, #0]
   d8130:	f241 0206 	movw	r2, #4102	; 0x1006
   d8134:	ab03      	add	r3, sp, #12
   d8136:	f640 71ff 	movw	r1, #4095	; 0xfff
   d813a:	4640      	mov	r0, r8
   d813c:	f7fe f92e 	bl	d639c <sock_setsockopt>
            if (ret) {
   d8140:	b108      	cbz	r0, d8146 <_ZN3UDP13receivePacketEPhjm+0x66>
   d8142:	e013      	b.n	d816c <_ZN3UDP13receivePacketEPhjm+0x8c>
    if (isOpen(_sock) && buffer) {
        sockaddr_storage saddr = {};
        socklen_t slen = sizeof(saddr);
        int flags = 0;
        if (timeout == 0) {
            flags = MSG_DONTWAIT;
   d8144:	2008      	movs	r0, #8
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d8146:	ab02      	add	r3, sp, #8
   d8148:	9301      	str	r3, [sp, #4]
   d814a:	4621      	mov	r1, r4
   d814c:	4603      	mov	r3, r0
   d814e:	9600      	str	r6, [sp, #0]
   d8150:	463a      	mov	r2, r7
   d8152:	6968      	ldr	r0, [r5, #20]
   d8154:	f7fe f942 	bl	d63dc <sock_recvfrom>
        if (ret >= 0) {
   d8158:	1e04      	subs	r4, r0, #0
   d815a:	db06      	blt.n	d816a <_ZN3UDP13receivePacketEPhjm+0x8a>
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
   d815c:	f105 0234 	add.w	r2, r5, #52	; 0x34
   d8160:	f105 011c 	add.w	r1, r5, #28
   d8164:	4630      	mov	r0, r6
   d8166:	f7ff ff39 	bl	d7fdc <_ZN5spark6detail23sockaddrToIpAddressPortEPK8sockaddrR9IPAddressPt>
            ret = sock_setsockopt(_sock, SOL_SOCKET, SO_RCVTIMEO, &tv, sizeof(tv));
            if (ret) {
                return ret;
            }
        }
        ret = sock_recvfrom(_sock, buffer, size, flags, (struct sockaddr*)&saddr, &slen);
   d816a:	4620      	mov	r0, r4
            detail::sockaddrToIpAddressPort((const struct sockaddr*)&saddr, _remoteIP, &_remotePort);
            LOG_DEBUG(TRACE, "received %d bytes from %s#%d", ret, _remoteIP.toString().c_str(), _remotePort);
        }
    }
    return ret;
}
   d816c:	b00c      	add	sp, #48	; 0x30
   d816e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000d8172 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>:

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d8172:	b538      	push	{r3, r4, r5, lr}
   d8174:	4605      	mov	r5, r0
   d8176:	4614      	mov	r4, r2
   d8178:	7d2b      	ldrb	r3, [r5, #20]
    if (addr.version() == 6) {
   d817a:	2b06      	cmp	r3, #6
        }
    }
#endif // HAL_IPv6
}

inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
   d817c:	4608      	mov	r0, r1
    if (addr.version() == 6) {
   d817e:	d111      	bne.n	d81a4 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x32>
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
   d8180:	231c      	movs	r3, #28
   d8182:	7013      	strb	r3, [r2, #0]
        in6addr->sin6_family = AF_INET6;
   d8184:	230a      	movs	r3, #10
   d8186:	7053      	strb	r3, [r2, #1]
        in6addr->sin6_port = htons(port);
   d8188:	f7fe f8e8 	bl	d635c <inet_htons>
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d818c:	3408      	adds	r4, #8
inline void ipAddressPortToSockaddr(const IPAddress& addr, uint16_t port, struct sockaddr* saddr) {
    if (addr.version() == 6) {
        struct sockaddr_in6* in6addr = (struct sockaddr_in6*)saddr;
        in6addr->sin6_len = sizeof(sockaddr_in6);
        in6addr->sin6_family = AF_INET6;
        in6addr->sin6_port = htons(port);
   d818e:	f824 0c06 	strh.w	r0, [r4, #-6]
        const auto& a = addr.raw();
        memcpy(in6addr->sin6_addr.s6_addr, a.ipv6, sizeof(a.ipv6));
   d8192:	1d2b      	adds	r3, r5, #4
   d8194:	3514      	adds	r5, #20
   d8196:	f853 2b04 	ldr.w	r2, [r3], #4
   d819a:	f844 2b04 	str.w	r2, [r4], #4
   d819e:	42ab      	cmp	r3, r5
   d81a0:	d1f9      	bne.n	d8196 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x24>
   d81a2:	bd38      	pop	{r3, r4, r5, pc}
    }
#if HAL_IPv6
    else if (addr.version() == 4) {
   d81a4:	2b04      	cmp	r3, #4
   d81a6:	d10a      	bne.n	d81be <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr+0x4c>
        struct sockaddr_in* inaddr = (struct sockaddr_in*)saddr;
        inaddr->sin_len = sizeof(sockaddr_in);
   d81a8:	2310      	movs	r3, #16
   d81aa:	7013      	strb	r3, [r2, #0]
        inaddr->sin_family = AF_INET;
   d81ac:	2302      	movs	r3, #2
   d81ae:	7053      	strb	r3, [r2, #1]
        inaddr->sin_port = htons(port);
   d81b0:	f7fe f8d4 	bl	d635c <inet_htons>
   d81b4:	8060      	strh	r0, [r4, #2]
        const auto& a = addr.raw();
        // NOTE: HAL_IPAddress.ipv4 is host-order :|
        inaddr->sin_addr.s_addr = htonl(a.ipv4);
   d81b6:	6868      	ldr	r0, [r5, #4]
   d81b8:	f7fe f8c0 	bl	d633c <inet_htonl>
   d81bc:	6060      	str	r0, [r4, #4]
   d81be:	bd38      	pop	{r3, r4, r5, pc}

000d81c0 <_ZN3UDP10sendPacketEPKhj9IPAddresst>:
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d81c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d81c4:	b08b      	sub	sp, #44	; 0x2c
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d81c6:	ac03      	add	r4, sp, #12
   d81c8:	251c      	movs	r5, #28
    int result = sendPacket(_buffer, _offset, _remoteIP, _remotePort);
    flush(); // wait for send to complete
    return result;
}

int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
   d81ca:	4699      	mov	r9, r3
   d81cc:	4606      	mov	r6, r0
   d81ce:	460f      	mov	r7, r1
   d81d0:	4690      	mov	r8, r2
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
   d81d2:	2100      	movs	r1, #0
   d81d4:	462a      	mov	r2, r5
   d81d6:	4620      	mov	r0, r4
   d81d8:	f001 faf2 	bl	d97c0 <memset>
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
   d81dc:	4622      	mov	r2, r4
   d81de:	f8bd 1048 	ldrh.w	r1, [sp, #72]	; 0x48
   d81e2:	4648      	mov	r0, r9
   d81e4:	f7ff ffc5 	bl	d8172 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_UNSPEC) {
   d81e8:	f89d 300d 	ldrb.w	r3, [sp, #13]
   d81ec:	b143      	cbz	r3, d8200 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x40>
        return -1;
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
   d81ee:	e88d 0030 	stmia.w	sp, {r4, r5}
   d81f2:	2300      	movs	r3, #0
   d81f4:	4642      	mov	r2, r8
   d81f6:	4639      	mov	r1, r7
   d81f8:	6970      	ldr	r0, [r6, #20]
   d81fa:	f7fe f8ff 	bl	d63fc <sock_sendto>
   d81fe:	e001      	b.n	d8204 <_ZN3UDP10sendPacketEPKhj9IPAddresst+0x44>
int UDP::sendPacket(const uint8_t* buffer, size_t buffer_size, IPAddress remoteIP, uint16_t port) {
    LOG_DEBUG(TRACE, "sendPacket size %d, %s#%d", buffer_size, remoteIP.toString().c_str(), port);
	sockaddr_storage s = {};
    detail::ipAddressPortToSockaddr(remoteIP, port, (struct sockaddr*)&s);
    if (s.ss_family == AF_UNSPEC) {
        return -1;
   d8200:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    }

    return sock_sendto(_sock, buffer, buffer_size, 0, (const struct sockaddr*)&s, sizeof(s));
}
   d8204:	b00b      	add	sp, #44	; 0x2c
   d8206:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d820a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>:

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d820a:	b5f0      	push	{r4, r5, r6, r7, lr}
   d820c:	b091      	sub	sp, #68	; 0x44
   d820e:	460c      	mov	r4, r1
   d8210:	4606      	mov	r6, r0
    sockaddr_storage s = {};
   d8212:	2100      	movs	r1, #0

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d8214:	4615      	mov	r5, r2
    sockaddr_storage s = {};
   d8216:	a809      	add	r0, sp, #36	; 0x24
   d8218:	221c      	movs	r2, #28

inline bool isOpen(sock_handle_t sd) {
    return socket_handle_valid(sd);
}

int joinLeaveMulticast(int sock, const IPAddress& addr, uint8_t ifindex, bool join) {
   d821a:	461f      	mov	r7, r3
    sockaddr_storage s = {};
   d821c:	f001 fad0 	bl	d97c0 <memset>
    detail::ipAddressPortToSockaddr(addr, 0, (struct sockaddr*)&s);
   d8220:	aa09      	add	r2, sp, #36	; 0x24
   d8222:	2100      	movs	r1, #0
   d8224:	4620      	mov	r0, r4
   d8226:	f7ff ffa4 	bl	d8172 <_ZN5spark6detail23ipAddressPortToSockaddrERK9IPAddresstP8sockaddr>
    if (s.ss_family == AF_INET) {
   d822a:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   d822e:	2b02      	cmp	r3, #2
   d8230:	d12e      	bne.n	d8290 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x86>
        struct ip_mreq mreq = {};
   d8232:	2300      	movs	r3, #0
   d8234:	9305      	str	r3, [sp, #20]
        mreq.imr_multiaddr = ((struct sockaddr_in*)&s)->sin_addr;
   d8236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d8238:	9304      	str	r3, [sp, #16]
        mreq.imr_interface.s_addr = INADDR_ANY;
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
   d823a:	b1dd      	cbz	r5, d8274 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
   d823c:	a902      	add	r1, sp, #8
   d823e:	4628      	mov	r0, r5
   d8240:	f7fe f854 	bl	d62ec <if_get_by_index>
   d8244:	b9b0      	cbnz	r0, d8274 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x6a>
                struct if_addrs* addrs = nullptr;
   d8246:	a910      	add	r1, sp, #64	; 0x40
   d8248:	f841 0d34 	str.w	r0, [r1, #-52]!
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
   d824c:	9802      	ldr	r0, [sp, #8]
   d824e:	f7fe f855 	bl	d62fc <if_get_addrs>
   d8252:	b960      	cbnz	r0, d826e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d8254:	9b03      	ldr	r3, [sp, #12]
   d8256:	b153      	cbz	r3, d826e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                        auto ifaddr = a->if_addr->addr;
   d8258:	68da      	ldr	r2, [r3, #12]
   d825a:	6812      	ldr	r2, [r2, #0]
                        if (ifaddr->sa_family == AF_INET) {
   d825c:	7851      	ldrb	r1, [r2, #1]
   d825e:	2902      	cmp	r1, #2
   d8260:	d103      	bne.n	d826a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                            struct sockaddr_in* inaddr = (struct sockaddr_in*)ifaddr;
                            if (inaddr->sin_addr.s_addr != INADDR_ANY) {
   d8262:	6852      	ldr	r2, [r2, #4]
   d8264:	b10a      	cbz	r2, d826a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x60>
                                mreq.imr_interface.s_addr = inaddr->sin_addr.s_addr;
   d8266:	9205      	str	r2, [sp, #20]
   d8268:	e001      	b.n	d826e <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x64>
                SCOPE_GUARD({
                    if_free_if_addrs(addrs);
                });
                // Query interface IP address
                if (!if_get_addrs(iface, &addrs)) {
                    for (auto a = addrs; a != nullptr; a = a->next) {
   d826a:	681b      	ldr	r3, [r3, #0]
   d826c:	e7f3      	b.n	d8256 <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0x4c>
#if HAL_PLATFORM_IFAPI
        if (ifindex != 0) {
            if_t iface;
            if (!if_get_by_index(ifindex, &iface)) {
                struct if_addrs* addrs = nullptr;
                SCOPE_GUARD({
   d826e:	9803      	ldr	r0, [sp, #12]
   d8270:	f7fe f84c 	bl	d630c <if_free_if_addrs>
                    }
                }
            }
        }
#endif // HAL_PLATFORM_IFAPI
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
   d8274:	2f00      	cmp	r7, #0
                    (void*)&mreq, sizeof(mreq));
   d8276:	f04f 0308 	mov.w	r3, #8
   d827a:	9300      	str	r3, [sp, #0]
   d827c:	bf18      	it	ne
   d827e:	2203      	movne	r2, #3
   d8280:	ab04      	add	r3, sp, #16
   d8282:	bf08      	it	eq
   d8284:	2204      	moveq	r2, #4
   d8286:	2100      	movs	r1, #0
   d8288:	4630      	mov	r0, r6
   d828a:	f7fe f887 	bl	d639c <sock_setsockopt>
   d828e:	e01e      	b.n	d82ce <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
   d8290:	2b0a      	cmp	r3, #10
   d8292:	d11a      	bne.n	d82ca <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc0>
        struct ipv6_mreq mreq = {};
   d8294:	ac04      	add	r4, sp, #16
   d8296:	2214      	movs	r2, #20
   d8298:	2100      	movs	r1, #0
   d829a:	4620      	mov	r0, r4
   d829c:	f001 fa90 	bl	d97c0 <memset>
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d82a0:	ab0b      	add	r3, sp, #44	; 0x2c
   d82a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d82a4:	2f00      	cmp	r7, #0
        return sock_setsockopt(sock, IPPROTO_IP, join ? IP_ADD_MEMBERSHIP : IP_DROP_MEMBERSHIP,
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
   d82a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
        mreq.ipv6mr_interface = ifindex;
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d82aa:	f04f 0314 	mov.w	r3, #20
   d82ae:	9300      	str	r3, [sp, #0]
   d82b0:	bf18      	it	ne
   d82b2:	220c      	movne	r2, #12
   d82b4:	4623      	mov	r3, r4
   d82b6:	bf08      	it	eq
   d82b8:	220d      	moveq	r2, #13
   d82ba:	2129      	movs	r1, #41	; 0x29
   d82bc:	4630      	mov	r0, r6
                    (void*)&mreq, sizeof(mreq));
#if HAL_IPv6
    } else if (s.ss_family == AF_INET6) {
        struct ipv6_mreq mreq = {};
        mreq.ipv6mr_multiaddr = ((struct sockaddr_in6*)&s)->sin6_addr;
        mreq.ipv6mr_interface = ifindex;
   d82be:	9508      	str	r5, [sp, #32]
        CHECK(sock_setsockopt(sock, IPPROTO_IPV6, join ? IPV6_JOIN_GROUP : IPV6_LEAVE_GROUP,
   d82c0:	f7fe f86c 	bl	d639c <sock_setsockopt>
   d82c4:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   d82c8:	e001      	b.n	d82ce <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4+0xc4>
                &mreq, sizeof(mreq)));
        return 0;
    }
#endif // HAL_IPv6
    return -1;
   d82ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
   d82ce:	b011      	add	sp, #68	; 0x44
   d82d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000d82d4 <_ZN3UDPC1Ev>:

} // anonymous

UDP::UDP()
   d82d4:	b538      	push	{r3, r4, r5, lr}
   d82d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d82da:	6083      	str	r3, [r0, #8]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d82dc:	4b0b      	ldr	r3, [pc, #44]	; (d830c <_ZN3UDPC1Ev+0x38>)
   d82de:	f103 0208 	add.w	r2, r3, #8
   d82e2:	336c      	adds	r3, #108	; 0x6c
   d82e4:	2500      	movs	r5, #0
   d82e6:	6103      	str	r3, [r0, #16]
   d82e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    return -1;
}

} // anonymous

UDP::UDP()
   d82ec:	4604      	mov	r4, r0
   d82ee:	6045      	str	r5, [r0, #4]
        : _sock(-1),
          _offset(0),
          _total(0),
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
   d82f0:	6002      	str	r2, [r0, #0]
   d82f2:	6143      	str	r3, [r0, #20]
   d82f4:	301c      	adds	r0, #28
   d82f6:	f7fe fd75 	bl	d6de4 <_ZN9IPAddressC1Ev>
   d82fa:	f44f 7300 	mov.w	r3, #512	; 0x200
   d82fe:	86e5      	strh	r5, [r4, #54]	; 0x36
   d8300:	8725      	strh	r5, [r4, #56]	; 0x38
   d8302:	63e5      	str	r5, [r4, #60]	; 0x3c
   d8304:	6423      	str	r3, [r4, #64]	; 0x40
   d8306:	6465      	str	r5, [r4, #68]	; 0x44
}
   d8308:	4620      	mov	r0, r4
   d830a:	bd38      	pop	{r3, r4, r5, pc}
   d830c:	000d9cb4 	.word	0x000d9cb4

000d8310 <_ZN3UDP13releaseBufferEv>:
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d8310:	b510      	push	{r4, lr}
    if (_buffer_allocated && _buffer) {
   d8312:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
        _buffer_size = buf_size;
    }
    return _buffer_size;
}

void UDP::releaseBuffer() {
   d8316:	4604      	mov	r4, r0
    if (_buffer_allocated && _buffer) {
   d8318:	b11b      	cbz	r3, d8322 <_ZN3UDP13releaseBufferEv+0x12>
   d831a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
   d831c:	b108      	cbz	r0, d8322 <_ZN3UDP13releaseBufferEv+0x12>
        delete _buffer;
   d831e:	f7fb febe 	bl	d409e <_ZdlPv>
    }
    _buffer = NULL;
   d8322:	2300      	movs	r3, #0
   d8324:	63e3      	str	r3, [r4, #60]	; 0x3c
    _buffer_allocated = false;
   d8326:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    _buffer_size = 0;
   d832a:	6423      	str	r3, [r4, #64]	; 0x40

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d832c:	86e3      	strh	r3, [r4, #54]	; 0x36
    _total = 0;
   d832e:	8723      	strh	r3, [r4, #56]	; 0x38
   d8330:	bd10      	pop	{r4, pc}

000d8332 <_ZN3UDP9setBufferEjPh>:
          _buffer(0),
          _buffer_size(512),
          _nif(0) {
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
   d8332:	b570      	push	{r4, r5, r6, lr}
   d8334:	4604      	mov	r4, r0
   d8336:	4616      	mov	r6, r2
   d8338:	460d      	mov	r5, r1
    releaseBuffer();
   d833a:	f7ff ffe9 	bl	d8310 <_ZN3UDP13releaseBufferEv>

    _buffer = buffer;
    _buffer_size = 0;
   d833e:	2300      	movs	r3, #0
}

bool UDP::setBuffer(size_t buf_size, uint8_t* buffer) {
    releaseBuffer();

    _buffer = buffer;
   d8340:	63e6      	str	r6, [r4, #60]	; 0x3c
    _buffer_size = 0;
   d8342:	6423      	str	r3, [r4, #64]	; 0x40
    if (!_buffer && buf_size) {         // requested allocation
   d8344:	b93e      	cbnz	r6, d8356 <_ZN3UDP9setBufferEjPh+0x24>
   d8346:	b135      	cbz	r5, d8356 <_ZN3UDP9setBufferEjPh+0x24>
        _buffer = new uint8_t[buf_size];
   d8348:	4628      	mov	r0, r5
   d834a:	f7fb fea6 	bl	d409a <_Znaj>
        _buffer_allocated = true;
   d834e:	2301      	movs	r3, #1
    releaseBuffer();

    _buffer = buffer;
    _buffer_size = 0;
    if (!_buffer && buf_size) {         // requested allocation
        _buffer = new uint8_t[buf_size];
   d8350:	63e0      	str	r0, [r4, #60]	; 0x3c
        _buffer_allocated = true;
   d8352:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
    }
    if (_buffer) {
   d8356:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   d8358:	b103      	cbz	r3, d835c <_ZN3UDP9setBufferEjPh+0x2a>
        _buffer_size = buf_size;
   d835a:	6425      	str	r5, [r4, #64]	; 0x40
    }
    return _buffer_size;
   d835c:	6c20      	ldr	r0, [r4, #64]	; 0x40
}
   d835e:	3000      	adds	r0, #0
   d8360:	bf18      	it	ne
   d8362:	2001      	movne	r0, #1
   d8364:	bd70      	pop	{r4, r5, r6, pc}

000d8366 <_ZN3UDP11beginPacketE9IPAddresst>:
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d8366:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d8368:	4617      	mov	r7, r2
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d836a:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    }

    return -1;
}

int UDP::beginPacket(IPAddress ip, uint16_t port) {
   d836c:	4605      	mov	r5, r0
   d836e:	460c      	mov	r4, r1
	LOG_DEBUG(TRACE, "begin packet %s#%d", ip.toString().c_str(), port);
    // default behavior previously was to use a 512 byte buffer, so instantiate that if not already done
    if (!_buffer && _buffer_size) {
   d8370:	b91a      	cbnz	r2, d837a <_ZN3UDP11beginPacketE9IPAddresst+0x14>
   d8372:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d8374:	b109      	cbz	r1, d837a <_ZN3UDP11beginPacketE9IPAddresst+0x14>
        setBuffer(_buffer_size);
   d8376:	f7ff ffdc 	bl	d8332 <_ZN3UDP9setBufferEjPh>
   d837a:	3404      	adds	r4, #4
   d837c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d837e:	f105 0620 	add.w	r6, r5, #32
   d8382:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   d8384:	6823      	ldr	r3, [r4, #0]
   d8386:	7033      	strb	r3, [r6, #0]

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d8388:	2300      	movs	r3, #0
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    _remoteIP = ip;
    _remotePort = port;
   d838a:	86af      	strh	r7, [r5, #52]	; 0x34

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d838c:	86eb      	strh	r3, [r5, #54]	; 0x36
    _total = 0;
   d838e:	872b      	strh	r3, [r5, #56]	; 0x38

    _remoteIP = ip;
    _remotePort = port;
    flush_buffer(); // clear buffer
    return _buffer_size;
}
   d8390:	6c28      	ldr	r0, [r5, #64]	; 0x40
   d8392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d8394 <_ZN3UDP11parsePacketEm>:
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d8394:	b570      	push	{r4, r5, r6, lr}
    if (!_buffer && _buffer_size) {
   d8396:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
    memcpy(_buffer + _offset, buffer, size);
    _offset += size;
    return size;
}

int UDP::parsePacket(system_tick_t timeout) {
   d8398:	4604      	mov	r4, r0
   d839a:	460e      	mov	r6, r1
    if (!_buffer && _buffer_size) {
   d839c:	b91a      	cbnz	r2, d83a6 <_ZN3UDP11parsePacketEm+0x12>
   d839e:	6c01      	ldr	r1, [r0, #64]	; 0x40
   d83a0:	b109      	cbz	r1, d83a6 <_ZN3UDP11parsePacketEm+0x12>
        setBuffer(_buffer_size);
   d83a2:	f7ff ffc6 	bl	d8332 <_ZN3UDP9setBufferEjPh>
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d83a6:	6be1      	ldr	r1, [r4, #60]	; 0x3c

void UDP::flush() {
}

void UDP::flush_buffer() {
    _offset = 0;
   d83a8:	2200      	movs	r2, #0
   d83aa:	86e2      	strh	r2, [r4, #54]	; 0x36
    _total = 0;
   d83ac:	8722      	strh	r2, [r4, #56]	; 0x38
    if (!_buffer && _buffer_size) {
        setBuffer(_buffer_size);
    }

    flush_buffer();         // start a new read - discard the old data
    if (_buffer && _buffer_size) {
   d83ae:	b149      	cbz	r1, d83c4 <_ZN3UDP11parsePacketEm+0x30>
   d83b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
   d83b2:	b13a      	cbz	r2, d83c4 <_ZN3UDP11parsePacketEm+0x30>
        int result = receivePacket(_buffer, _buffer_size, timeout);
   d83b4:	6823      	ldr	r3, [r4, #0]
   d83b6:	4620      	mov	r0, r4
   d83b8:	6b1d      	ldr	r5, [r3, #48]	; 0x30
   d83ba:	4633      	mov	r3, r6
   d83bc:	47a8      	blx	r5
        if (result > 0) {
   d83be:	2800      	cmp	r0, #0
            _total = result;
   d83c0:	bfc8      	it	gt
   d83c2:	8720      	strhgt	r0, [r4, #56]	; 0x38
        }
    }
    return available();
   d83c4:	6823      	ldr	r3, [r4, #0]
   d83c6:	4620      	mov	r0, r4
   d83c8:	691b      	ldr	r3, [r3, #16]
}
   d83ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        int result = receivePacket(_buffer, _buffer_size, timeout);
        if (result > 0) {
            _total = result;
        }
    }
    return available();
   d83ce:	4718      	bx	r3

000d83d0 <_ZN3UDPD1Ev>:



public:
    UDP();
    virtual ~UDP() { stop(); releaseBuffer(); }
   d83d0:	b510      	push	{r4, lr}
   d83d2:	4b07      	ldr	r3, [pc, #28]	; (d83f0 <_ZN3UDPD1Ev+0x20>)
   d83d4:	f103 0208 	add.w	r2, r3, #8
   d83d8:	336c      	adds	r3, #108	; 0x6c
   d83da:	4604      	mov	r4, r0
   d83dc:	6002      	str	r2, [r0, #0]
   d83de:	6103      	str	r3, [r0, #16]
   d83e0:	f7ff fd6d 	bl	d7ebe <_ZN3UDP4stopEv>
   d83e4:	4620      	mov	r0, r4
   d83e6:	f7ff ff93 	bl	d8310 <_ZN3UDP13releaseBufferEv>
   d83ea:	4620      	mov	r0, r4
   d83ec:	bd10      	pop	{r4, pc}
   d83ee:	bf00      	nop
   d83f0:	000d9cb4 	.word	0x000d9cb4

000d83f4 <_ZN3UDPD0Ev>:
   d83f4:	b510      	push	{r4, lr}
   d83f6:	4604      	mov	r4, r0
   d83f8:	f7ff ffea 	bl	d83d0 <_ZN3UDPD1Ev>
   d83fc:	4620      	mov	r0, r4
   d83fe:	f7fb fe4e 	bl	d409e <_ZdlPv>
   d8402:	4620      	mov	r0, r4
   d8404:	bd10      	pop	{r4, pc}

000d8406 <_ZN3UDP13joinMulticastERK9IPAddress>:
    // can't use available() since this is a `const` method, and available is part of the Stream interface, and is non-const.
    int size = _total - _offset;
    return p.write(_buffer + _offset, size);
}

int UDP::joinMulticast(const IPAddress& ip) {
   d8406:	4602      	mov	r2, r0
    if (!isOpen(_sock)) {
   d8408:	6940      	ldr	r0, [r0, #20]
   d840a:	2800      	cmp	r0, #0
   d840c:	db04      	blt.n	d8418 <_ZN3UDP13joinMulticastERK9IPAddress+0x12>
        return -1;
    }
    return joinLeaveMulticast(_sock, ip, _nif, true);
   d840e:	2301      	movs	r3, #1
   d8410:	f892 2044 	ldrb.w	r2, [r2, #68]	; 0x44
   d8414:	f7ff bef9 	b.w	d820a <_ZN12_GLOBAL__N_118joinLeaveMulticastEiRK9IPAddresshb.constprop.4>
}
   d8418:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d841c:	4770      	bx	lr

000d841e <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d841e:	4770      	bx	lr

000d8420 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8420:	7441      	strb	r1, [r0, #17]
   d8422:	4770      	bx	lr

000d8424 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
   d8424:	7c00      	ldrb	r0, [r0, #16]
   d8426:	f7fe b841 	b.w	d64ac <HAL_USART_Available_Data_For_Write>

000d842a <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
   d842a:	7c00      	ldrb	r0, [r0, #16]
   d842c:	f7fe b816 	b.w	d645c <HAL_USART_Available_Data>

000d8430 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
   d8430:	7c00      	ldrb	r0, [r0, #16]
   d8432:	f7fe b823 	b.w	d647c <HAL_USART_Peek_Data>

000d8436 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
   d8436:	7c00      	ldrb	r0, [r0, #16]
   d8438:	f7fe b818 	b.w	d646c <HAL_USART_Read_Data>

000d843c <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d843c:	7c00      	ldrb	r0, [r0, #16]
   d843e:	f7fe b825 	b.w	d648c <HAL_USART_Flush_Data>

000d8442 <_ZN11USARTSerialD0Ev>:
   d8442:	b510      	push	{r4, lr}
   d8444:	4604      	mov	r4, r0
   d8446:	f7fb fe2a 	bl	d409e <_ZdlPv>
   d844a:	4620      	mov	r0, r4
   d844c:	bd10      	pop	{r4, pc}

000d844e <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d844e:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8450:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d8452:	4604      	mov	r4, r0
   d8454:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d8456:	b925      	cbnz	r5, d8462 <_ZN11USARTSerial5writeEh+0x14>
   d8458:	7c00      	ldrb	r0, [r0, #16]
   d845a:	f7fe f827 	bl	d64ac <HAL_USART_Available_Data_For_Write>
   d845e:	2800      	cmp	r0, #0
   d8460:	dd05      	ble.n	d846e <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d8462:	4631      	mov	r1, r6
   d8464:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d8466:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d846a:	f7fd bfef 	b.w	d644c <HAL_USART_Write_Data>
  }
  return 0;
}
   d846e:	4628      	mov	r0, r5
   d8470:	bd70      	pop	{r4, r5, r6, pc}
	...

000d8474 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d8474:	b510      	push	{r4, lr}
   d8476:	4604      	mov	r4, r0
   d8478:	4608      	mov	r0, r1
   d847a:	4611      	mov	r1, r2
   d847c:	2200      	movs	r2, #0
   d847e:	6062      	str	r2, [r4, #4]
   d8480:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d8484:	60a2      	str	r2, [r4, #8]
   d8486:	4a05      	ldr	r2, [pc, #20]	; (d849c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d8488:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d848a:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d848c:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d848e:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d8490:	461a      	mov	r2, r3
   d8492:	f7fd ffd3 	bl	d643c <HAL_USART_Init>
}
   d8496:	4620      	mov	r0, r4
   d8498:	bd10      	pop	{r4, pc}
   d849a:	bf00      	nop
   d849c:	000d9d2c 	.word	0x000d9d2c

000d84a0 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d84a0:	7c00      	ldrb	r0, [r0, #16]
   d84a2:	f7fd bffb 	b.w	d649c <HAL_USART_Is_Enabled>
	...

000d84a8 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d84a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
   d84aa:	4c19      	ldr	r4, [pc, #100]	; (d8510 <_Z22__fetch_global_Serial1v+0x68>)
   d84ac:	6825      	ldr	r5, [r4, #0]
   d84ae:	b94d      	cbnz	r5, d84c4 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
   d84b0:	2084      	movs	r0, #132	; 0x84
   d84b2:	f7fb fdf0 	bl	d4096 <_Znwj>
   d84b6:	4606      	mov	r6, r0
   d84b8:	b118      	cbz	r0, d84c2 <_Z22__fetch_global_Serial1v+0x1a>
   d84ba:	2284      	movs	r2, #132	; 0x84
   d84bc:	4629      	mov	r1, r5
   d84be:	f001 f97f 	bl	d97c0 <memset>
   d84c2:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
   d84c4:	4d13      	ldr	r5, [pc, #76]	; (d8514 <_Z22__fetch_global_Serial1v+0x6c>)
   d84c6:	682e      	ldr	r6, [r5, #0]
   d84c8:	b94e      	cbnz	r6, d84de <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
   d84ca:	2084      	movs	r0, #132	; 0x84
   d84cc:	f7fb fde3 	bl	d4096 <_Znwj>
   d84d0:	4607      	mov	r7, r0
   d84d2:	b118      	cbz	r0, d84dc <_Z22__fetch_global_Serial1v+0x34>
   d84d4:	2284      	movs	r2, #132	; 0x84
   d84d6:	4631      	mov	r1, r6
   d84d8:	f001 f972 	bl	d97c0 <memset>
   d84dc:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
   d84de:	4f0e      	ldr	r7, [pc, #56]	; (d8518 <_Z22__fetch_global_Serial1v+0x70>)
   d84e0:	6839      	ldr	r1, [r7, #0]
   d84e2:	f011 0601 	ands.w	r6, r1, #1
   d84e6:	d111      	bne.n	d850c <_Z22__fetch_global_Serial1v+0x64>
   d84e8:	4638      	mov	r0, r7
   d84ea:	f7fb fddc 	bl	d40a6 <__cxa_guard_acquire>
   d84ee:	b168      	cbz	r0, d850c <_Z22__fetch_global_Serial1v+0x64>
   d84f0:	6822      	ldr	r2, [r4, #0]
   d84f2:	682b      	ldr	r3, [r5, #0]
   d84f4:	4809      	ldr	r0, [pc, #36]	; (d851c <_Z22__fetch_global_Serial1v+0x74>)
   d84f6:	4631      	mov	r1, r6
   d84f8:	f7ff ffbc 	bl	d8474 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d84fc:	4638      	mov	r0, r7
   d84fe:	f7fb fdd7 	bl	d40b0 <__cxa_guard_release>
   d8502:	4a07      	ldr	r2, [pc, #28]	; (d8520 <_Z22__fetch_global_Serial1v+0x78>)
   d8504:	4907      	ldr	r1, [pc, #28]	; (d8524 <_Z22__fetch_global_Serial1v+0x7c>)
   d8506:	4805      	ldr	r0, [pc, #20]	; (d851c <_Z22__fetch_global_Serial1v+0x74>)
   d8508:	f000 f9ca 	bl	d88a0 <__aeabi_atexit>
#endif
	return serial1;
}
   d850c:	4803      	ldr	r0, [pc, #12]	; (d851c <_Z22__fetch_global_Serial1v+0x74>)
   d850e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d8510:	2003e6e8 	.word	0x2003e6e8
   d8514:	2003e6e0 	.word	0x2003e6e0
   d8518:	2003e6e4 	.word	0x2003e6e4
   d851c:	2003e6cc 	.word	0x2003e6cc
   d8520:	2003dcd8 	.word	0x2003dcd8
   d8524:	000d841f 	.word	0x000d841f

000d8528 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d8528:	7441      	strb	r1, [r0, #17]
   d852a:	4770      	bx	lr

000d852c <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d852c:	4770      	bx	lr

000d852e <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
   d852e:	2100      	movs	r1, #0
   d8530:	7c00      	ldrb	r0, [r0, #16]
   d8532:	f7fd bfdb 	b.w	d64ec <HAL_USB_USART_Receive_Data>

000d8536 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
   d8536:	2101      	movs	r1, #1
   d8538:	7c00      	ldrb	r0, [r0, #16]
   d853a:	f7fd bfd7 	b.w	d64ec <HAL_USB_USART_Receive_Data>

000d853e <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
   d853e:	7c00      	ldrb	r0, [r0, #16]
   d8540:	f7fd bfcc 	b.w	d64dc <HAL_USB_USART_Available_Data_For_Write>

000d8544 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
   d8544:	7c00      	ldrb	r0, [r0, #16]
   d8546:	f7fd bfc1 	b.w	d64cc <HAL_USB_USART_Available_Data>

000d854a <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
   d854a:	b538      	push	{r3, r4, r5, lr}
   d854c:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d854e:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
   d8550:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d8552:	f7fd ffc3 	bl	d64dc <HAL_USB_USART_Available_Data_For_Write>
   d8556:	2800      	cmp	r0, #0
   d8558:	dc01      	bgt.n	d855e <_ZN9USBSerial5writeEh+0x14>
   d855a:	7c60      	ldrb	r0, [r4, #17]
   d855c:	b120      	cbz	r0, d8568 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
   d855e:	4629      	mov	r1, r5
   d8560:	7c20      	ldrb	r0, [r4, #16]
   d8562:	f7fd ffcb 	bl	d64fc <HAL_USB_USART_Send_Data>
    return 1;
   d8566:	2001      	movs	r0, #1
  }
  return 0;
}
   d8568:	bd38      	pop	{r3, r4, r5, pc}

000d856a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d856a:	7c00      	ldrb	r0, [r0, #16]
   d856c:	f7fd bfce 	b.w	d650c <HAL_USB_USART_Flush_Data>

000d8570 <_ZN9USBSerialD0Ev>:
   d8570:	b510      	push	{r4, lr}
   d8572:	4604      	mov	r4, r0
   d8574:	f7fb fd93 	bl	d409e <_ZdlPv>
   d8578:	4620      	mov	r0, r4
   d857a:	bd10      	pop	{r4, pc}

000d857c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d857c:	b510      	push	{r4, lr}
   d857e:	4604      	mov	r4, r0
   d8580:	2300      	movs	r3, #0
   d8582:	6063      	str	r3, [r4, #4]
   d8584:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d8588:	60a3      	str	r3, [r4, #8]
   d858a:	4b05      	ldr	r3, [pc, #20]	; (d85a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d858c:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d858e:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d8590:	4608      	mov	r0, r1
{
  _serial = serial;
   d8592:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d8594:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d8596:	4611      	mov	r1, r2
   d8598:	f7fd ff90 	bl	d64bc <HAL_USB_USART_Init>
}
   d859c:	4620      	mov	r0, r4
   d859e:	bd10      	pop	{r4, pc}
   d85a0:	000d9d5c 	.word	0x000d9d5c

000d85a4 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d85a4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d85a6:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d85a8:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d85aa:	2100      	movs	r1, #0
   d85ac:	f001 f908 	bl	d97c0 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d85b0:	4620      	mov	r0, r4
   d85b2:	bd10      	pop	{r4, pc}

000d85b4 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d85b4:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d85b6:	4d0e      	ldr	r5, [pc, #56]	; (d85f0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d85b8:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d85ba:	a801      	add	r0, sp, #4
   d85bc:	f7ff fff2 	bl	d85a4 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d85c0:	6829      	ldr	r1, [r5, #0]
   d85c2:	f011 0401 	ands.w	r4, r1, #1
   d85c6:	d110      	bne.n	d85ea <_Z16_fetch_usbserialv+0x36>
   d85c8:	4628      	mov	r0, r5
   d85ca:	f7fb fd6c 	bl	d40a6 <__cxa_guard_acquire>
   d85ce:	b160      	cbz	r0, d85ea <_Z16_fetch_usbserialv+0x36>
   d85d0:	aa01      	add	r2, sp, #4
   d85d2:	4621      	mov	r1, r4
   d85d4:	4807      	ldr	r0, [pc, #28]	; (d85f4 <_Z16_fetch_usbserialv+0x40>)
   d85d6:	f7ff ffd1 	bl	d857c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d85da:	4628      	mov	r0, r5
   d85dc:	f7fb fd68 	bl	d40b0 <__cxa_guard_release>
   d85e0:	4a05      	ldr	r2, [pc, #20]	; (d85f8 <_Z16_fetch_usbserialv+0x44>)
   d85e2:	4906      	ldr	r1, [pc, #24]	; (d85fc <_Z16_fetch_usbserialv+0x48>)
   d85e4:	4803      	ldr	r0, [pc, #12]	; (d85f4 <_Z16_fetch_usbserialv+0x40>)
   d85e6:	f000 f95b 	bl	d88a0 <__aeabi_atexit>
	return _usbserial;
}
   d85ea:	4802      	ldr	r0, [pc, #8]	; (d85f4 <_Z16_fetch_usbserialv+0x40>)
   d85ec:	b007      	add	sp, #28
   d85ee:	bd30      	pop	{r4, r5, pc}
   d85f0:	2003e6ec 	.word	0x2003e6ec
   d85f4:	2003e6f0 	.word	0x2003e6f0
   d85f8:	2003dcd8 	.word	0x2003dcd8
   d85fc:	000d852d 	.word	0x000d852d

000d8600 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d8600:	2200      	movs	r2, #0
   d8602:	4611      	mov	r1, r2
   d8604:	6840      	ldr	r0, [r0, #4]
   d8606:	f7fd bff7 	b.w	d65f8 <network_ready>

000d860a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d860a:	2200      	movs	r2, #0
   d860c:	4611      	mov	r1, r2
   d860e:	6840      	ldr	r0, [r0, #4]
   d8610:	f7fe b812 	b.w	d6638 <network_listening>

000d8614 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d8614:	2200      	movs	r2, #0
   d8616:	4611      	mov	r1, r2
   d8618:	6840      	ldr	r0, [r0, #4]
   d861a:	f7fe b81d 	b.w	d6658 <network_get_listen_timeout>

000d861e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d861e:	2200      	movs	r2, #0
   d8620:	6840      	ldr	r0, [r0, #4]
   d8622:	f7fe b811 	b.w	d6648 <network_set_listen_timeout>

000d8626 <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d8626:	2200      	movs	r2, #0
   d8628:	f081 0101 	eor.w	r1, r1, #1
   d862c:	6840      	ldr	r0, [r0, #4]
   d862e:	f7fd bffb 	b.w	d6628 <network_listen>

000d8632 <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d8632:	2300      	movs	r3, #0
   d8634:	461a      	mov	r2, r3
   d8636:	4619      	mov	r1, r3
   d8638:	6840      	ldr	r0, [r0, #4]
   d863a:	f7fd bfed 	b.w	d6618 <network_off>

000d863e <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d863e:	2300      	movs	r3, #0
   d8640:	461a      	mov	r2, r3
   d8642:	4619      	mov	r1, r3
   d8644:	6840      	ldr	r0, [r0, #4]
   d8646:	f7fd bfdf 	b.w	d6608 <network_on>

000d864a <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d864a:	2200      	movs	r2, #0
   d864c:	4611      	mov	r1, r2
   d864e:	6840      	ldr	r0, [r0, #4]
   d8650:	f7fd bfc2 	b.w	d65d8 <network_connecting>

000d8654 <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d8654:	2200      	movs	r2, #0
   d8656:	2102      	movs	r1, #2
   d8658:	6840      	ldr	r0, [r0, #4]
   d865a:	f7fd bfc5 	b.w	d65e8 <network_disconnect>

000d865e <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d865e:	2300      	movs	r3, #0
   d8660:	461a      	mov	r2, r3
   d8662:	6840      	ldr	r0, [r0, #4]
   d8664:	f7fd bfb0 	b.w	d65c8 <network_connect>

000d8668 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d8668:	4b02      	ldr	r3, [pc, #8]	; (d8674 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d866a:	2204      	movs	r2, #4
   d866c:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d866e:	4a02      	ldr	r2, [pc, #8]	; (d8678 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d8670:	601a      	str	r2, [r3, #0]
   d8672:	4770      	bx	lr
   d8674:	2003e704 	.word	0x2003e704
   d8678:	000d9d8c 	.word	0x000d9d8c

000d867c <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d867c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d867e:	4b0c      	ldr	r3, [pc, #48]	; (d86b0 <serialEventRun+0x34>)
   d8680:	b133      	cbz	r3, d8690 <serialEventRun+0x14>
   d8682:	f7ff ff97 	bl	d85b4 <_Z16_fetch_usbserialv>
   d8686:	6803      	ldr	r3, [r0, #0]
   d8688:	691b      	ldr	r3, [r3, #16]
   d868a:	4798      	blx	r3
   d868c:	2800      	cmp	r0, #0
   d868e:	dc09      	bgt.n	d86a4 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d8690:	4b08      	ldr	r3, [pc, #32]	; (d86b4 <serialEventRun+0x38>)
   d8692:	b163      	cbz	r3, d86ae <serialEventRun+0x32>
   d8694:	f7ff ff08 	bl	d84a8 <_Z22__fetch_global_Serial1v>
   d8698:	6803      	ldr	r3, [r0, #0]
   d869a:	691b      	ldr	r3, [r3, #16]
   d869c:	4798      	blx	r3
   d869e:	2800      	cmp	r0, #0
   d86a0:	dc03      	bgt.n	d86aa <serialEventRun+0x2e>
   d86a2:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d86a4:	f3af 8000 	nop.w
   d86a8:	e7f2      	b.n	d8690 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d86aa:	f3af 8000 	nop.w
   d86ae:	bd08      	pop	{r3, pc}
	...

000d86b8 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d86b8:	b508      	push	{r3, lr}
	serialEventRun();
   d86ba:	f7ff ffdf 	bl	d867c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d86be:	f7fd fd95 	bl	d61ec <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d86c2:	4b01      	ldr	r3, [pc, #4]	; (d86c8 <_post_loop+0x10>)
   d86c4:	6018      	str	r0, [r3, #0]
   d86c6:	bd08      	pop	{r3, pc}
   d86c8:	2003e710 	.word	0x2003e710

000d86cc <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d86cc:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d86ce:	2300      	movs	r3, #0
   d86d0:	9300      	str	r3, [sp, #0]
   d86d2:	461a      	mov	r2, r3
   d86d4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d86d8:	f7fd ff4a 	bl	d6570 <system_ctrl_set_result>
}
   d86dc:	b003      	add	sp, #12
   d86de:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d86e4 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d86e4:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d86e6:	8843      	ldrh	r3, [r0, #2]
   d86e8:	2b0a      	cmp	r3, #10
   d86ea:	d008      	beq.n	d86fe <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d86ec:	2b50      	cmp	r3, #80	; 0x50
   d86ee:	d109      	bne.n	d8704 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d86f0:	4b09      	ldr	r3, [pc, #36]	; (d8718 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d86f2:	681b      	ldr	r3, [r3, #0]
   d86f4:	b13b      	cbz	r3, d8706 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d86f6:	b003      	add	sp, #12
   d86f8:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d86fc:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d86fe:	f7ff ffe5 	bl	d86cc <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d8702:	e006      	b.n	d8712 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d8704:	2300      	movs	r3, #0
   d8706:	9300      	str	r3, [sp, #0]
   d8708:	461a      	mov	r2, r3
   d870a:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d870e:	f7fd ff2f 	bl	d6570 <system_ctrl_set_result>
        break;
    }
}
   d8712:	b003      	add	sp, #12
   d8714:	f85d fb04 	ldr.w	pc, [sp], #4
   d8718:	2003e70c 	.word	0x2003e70c

000d871c <module_user_init_hook>:

void module_user_init_hook()
{
   d871c:	b510      	push	{r4, lr}
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d871e:	f7fd fd55 	bl	d61cc <HAL_RNG_GetRandomNumber>
   d8722:	4604      	mov	r4, r0
    srand(seed);
   d8724:	f001 f854 	bl	d97d0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d8728:	4b07      	ldr	r3, [pc, #28]	; (d8748 <module_user_init_hook+0x2c>)
   d872a:	b113      	cbz	r3, d8732 <module_user_init_hook+0x16>
        random_seed_from_cloud(seed);
   d872c:	4620      	mov	r0, r4
   d872e:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d8732:	2100      	movs	r1, #0
   d8734:	4804      	ldr	r0, [pc, #16]	; (d8748 <module_user_init_hook+0x2c>)
   d8736:	f7fd ff3f 	bl	d65b8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d873a:	2100      	movs	r1, #0
   d873c:	4803      	ldr	r0, [pc, #12]	; (d874c <module_user_init_hook+0x30>)
}
   d873e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d8742:	f7fd bf0b 	b.w	d655c <system_ctrl_set_app_request_handler>
   d8746:	bf00      	nop
   d8748:	00000000 	.word	0x00000000
   d874c:	000d86e5 	.word	0x000d86e5

000d8750 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d8750:	b510      	push	{r4, lr}
   d8752:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d8754:	480f      	ldr	r0, [pc, #60]	; (d8794 <pinAvailable+0x44>)
   d8756:	f7fe ffb7 	bl	d76c8 <_ZN8SPIClass9isEnabledEv>
   d875a:	b128      	cbz	r0, d8768 <pinAvailable+0x18>
   d875c:	f1a4 030b 	sub.w	r3, r4, #11
   d8760:	2b02      	cmp	r3, #2
   d8762:	d801      	bhi.n	d8768 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
   d8764:	2000      	movs	r0, #0
   d8766:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d8768:	f000 f858 	bl	d881c <_Z19__fetch_global_Wirev>
   d876c:	f7fe fafc 	bl	d6d68 <_ZN7TwoWire9isEnabledEv>
   d8770:	b108      	cbz	r0, d8776 <pinAvailable+0x26>
   d8772:	2c01      	cmp	r4, #1
   d8774:	d9f6      	bls.n	d8764 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d8776:	f7ff fe97 	bl	d84a8 <_Z22__fetch_global_Serial1v>
   d877a:	f7ff fe91 	bl	d84a0 <_ZN11USARTSerial9isEnabledEv>
   d877e:	b118      	cbz	r0, d8788 <pinAvailable+0x38>
   d8780:	f1a4 0309 	sub.w	r3, r4, #9
   d8784:	2b01      	cmp	r3, #1
   d8786:	d9ed      	bls.n	d8764 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d8788:	2c23      	cmp	r4, #35	; 0x23
   d878a:	bf8c      	ite	hi
   d878c:	2000      	movhi	r0, #0
   d878e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d8790:	bd10      	pop	{r4, pc}
   d8792:	bf00      	nop
   d8794:	2003e72c 	.word	0x2003e72c

000d8798 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d8798:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d879a:	b538      	push	{r3, r4, r5, lr}
   d879c:	4604      	mov	r4, r0
   d879e:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d87a0:	d80a      	bhi.n	d87b8 <pinMode+0x20>
   d87a2:	29ff      	cmp	r1, #255	; 0xff
   d87a4:	d008      	beq.n	d87b8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d87a6:	f7ff ffd3 	bl	d8750 <pinAvailable>
   d87aa:	b128      	cbz	r0, d87b8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d87ac:	4629      	mov	r1, r5
   d87ae:	4620      	mov	r0, r4
}
   d87b0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d87b4:	f7fd bd32 	b.w	d621c <HAL_Pin_Mode>
   d87b8:	bd38      	pop	{r3, r4, r5, pc}

000d87ba <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d87ba:	b538      	push	{r3, r4, r5, lr}
   d87bc:	4604      	mov	r4, r0
   d87be:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d87c0:	f7fd fd34 	bl	d622c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d87c4:	28ff      	cmp	r0, #255	; 0xff
   d87c6:	d010      	beq.n	d87ea <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d87c8:	2806      	cmp	r0, #6
   d87ca:	d804      	bhi.n	d87d6 <digitalWrite+0x1c>
   d87cc:	234d      	movs	r3, #77	; 0x4d
   d87ce:	fa23 f000 	lsr.w	r0, r3, r0
   d87d2:	07c3      	lsls	r3, r0, #31
   d87d4:	d409      	bmi.n	d87ea <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d87d6:	4620      	mov	r0, r4
   d87d8:	f7ff ffba 	bl	d8750 <pinAvailable>
   d87dc:	b128      	cbz	r0, d87ea <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d87de:	4629      	mov	r1, r5
   d87e0:	4620      	mov	r0, r4
}
   d87e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d87e6:	f7fd bd29 	b.w	d623c <HAL_GPIO_Write>
   d87ea:	bd38      	pop	{r3, r4, r5, pc}

000d87ec <analogRead>:
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
   d87ec:	280d      	cmp	r0, #13
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
   d87ee:	b510      	push	{r4, lr}
   d87f0:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
  {
    pin = pin + FIRST_ANALOG_PIN;
   d87f2:	bf9c      	itt	ls
   d87f4:	340e      	addls	r4, #14
   d87f6:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d87f8:	4620      	mov	r0, r4
   d87fa:	f7ff ffa9 	bl	d8750 <pinAvailable>
   d87fe:	b150      	cbz	r0, d8816 <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
   d8800:	2103      	movs	r1, #3
   d8802:	4620      	mov	r0, r4
   d8804:	f7fd fd02 	bl	d620c <HAL_Validate_Pin_Function>
   d8808:	2803      	cmp	r0, #3
   d880a:	d104      	bne.n	d8816 <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d880c:	4620      	mov	r0, r4
}
   d880e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
   d8812:	f7fd bd1b 	b.w	d624c <HAL_ADC_Read>
}
   d8816:	2000      	movs	r0, #0
   d8818:	bd10      	pop	{r4, pc}
	...

000d881c <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
   d881c:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
   d881e:	4d0b      	ldr	r5, [pc, #44]	; (d884c <_Z19__fetch_global_Wirev+0x30>)
   d8820:	6829      	ldr	r1, [r5, #0]
   d8822:	f011 0401 	ands.w	r4, r1, #1
   d8826:	d10f      	bne.n	d8848 <_Z19__fetch_global_Wirev+0x2c>
   d8828:	4628      	mov	r0, r5
   d882a:	f7fb fc3c 	bl	d40a6 <__cxa_guard_acquire>
   d882e:	b158      	cbz	r0, d8848 <_Z19__fetch_global_Wirev+0x2c>
   d8830:	4621      	mov	r1, r4
   d8832:	4807      	ldr	r0, [pc, #28]	; (d8850 <_Z19__fetch_global_Wirev+0x34>)
   d8834:	f7fe fa86 	bl	d6d44 <_ZN7TwoWireC1E17HAL_I2C_Interface>
   d8838:	4628      	mov	r0, r5
   d883a:	f7fb fc39 	bl	d40b0 <__cxa_guard_release>
   d883e:	4a05      	ldr	r2, [pc, #20]	; (d8854 <_Z19__fetch_global_Wirev+0x38>)
   d8840:	4905      	ldr	r1, [pc, #20]	; (d8858 <_Z19__fetch_global_Wirev+0x3c>)
   d8842:	4803      	ldr	r0, [pc, #12]	; (d8850 <_Z19__fetch_global_Wirev+0x34>)
   d8844:	f000 f82c 	bl	d88a0 <__aeabi_atexit>
	return wire;
}
   d8848:	4801      	ldr	r0, [pc, #4]	; (d8850 <_Z19__fetch_global_Wirev+0x34>)
   d884a:	bd38      	pop	{r3, r4, r5, pc}
   d884c:	2003e714 	.word	0x2003e714
   d8850:	2003e718 	.word	0x2003e718
   d8854:	2003dcd8 	.word	0x2003dcd8
   d8858:	000d6ced 	.word	0x000d6ced

000d885c <_GLOBAL__sub_I_SPI>:
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d885c:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d885e:	4c0c      	ldr	r4, [pc, #48]	; (d8890 <_GLOBAL__sub_I_SPI+0x34>)
   d8860:	4e0c      	ldr	r6, [pc, #48]	; (d8894 <_GLOBAL__sub_I_SPI+0x38>)
   d8862:	4d0d      	ldr	r5, [pc, #52]	; (d8898 <_GLOBAL__sub_I_SPI+0x3c>)
   d8864:	2100      	movs	r1, #0
   d8866:	4620      	mov	r0, r4
   d8868:	f7fe ff1a 	bl	d76a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d886c:	4620      	mov	r0, r4

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d886e:	4c0b      	ldr	r4, [pc, #44]	; (d889c <_GLOBAL__sub_I_SPI+0x40>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
   d8870:	4632      	mov	r2, r6
   d8872:	4629      	mov	r1, r5
   d8874:	f000 f814 	bl	d88a0 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
   d8878:	2101      	movs	r1, #1
   d887a:	4620      	mov	r0, r4
   d887c:	f7fe ff10 	bl	d76a0 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d8880:	4632      	mov	r2, r6
   d8882:	4629      	mov	r1, r5
   d8884:	4620      	mov	r0, r4
   d8886:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d888a:	f000 b809 	b.w	d88a0 <__aeabi_atexit>
   d888e:	bf00      	nop
   d8890:	2003e72c 	.word	0x2003e72c
   d8894:	2003dcd8 	.word	0x2003dcd8
   d8898:	000d7691 	.word	0x000d7691
   d889c:	2003e73c 	.word	0x2003e73c

000d88a0 <__aeabi_atexit>:
   d88a0:	460b      	mov	r3, r1
   d88a2:	4601      	mov	r1, r0
   d88a4:	4618      	mov	r0, r3
   d88a6:	f000 bf63 	b.w	d9770 <__cxa_atexit>
	...

000d88ac <_ZSt15get_new_handlerv>:
   d88ac:	4b02      	ldr	r3, [pc, #8]	; (d88b8 <_ZSt15get_new_handlerv+0xc>)
   d88ae:	6818      	ldr	r0, [r3, #0]
   d88b0:	f3bf 8f5f 	dmb	sy
   d88b4:	4770      	bx	lr
   d88b6:	bf00      	nop
   d88b8:	2003e74c 	.word	0x2003e74c

000d88bc <_ZnwjRKSt9nothrow_t>:
   d88bc:	b510      	push	{r4, lr}
   d88be:	2800      	cmp	r0, #0
   d88c0:	bf14      	ite	ne
   d88c2:	4604      	movne	r4, r0
   d88c4:	2401      	moveq	r4, #1
   d88c6:	4620      	mov	r0, r4
   d88c8:	f7fd fece 	bl	d6668 <malloc>
   d88cc:	b920      	cbnz	r0, d88d8 <_ZnwjRKSt9nothrow_t+0x1c>
   d88ce:	f7ff ffed 	bl	d88ac <_ZSt15get_new_handlerv>
   d88d2:	b108      	cbz	r0, d88d8 <_ZnwjRKSt9nothrow_t+0x1c>
   d88d4:	4780      	blx	r0
   d88d6:	e7f6      	b.n	d88c6 <_ZnwjRKSt9nothrow_t+0xa>
   d88d8:	bd10      	pop	{r4, pc}

000d88da <_ZnajRKSt9nothrow_t>:
   d88da:	f7ff bfef 	b.w	d88bc <_ZnwjRKSt9nothrow_t>

000d88de <_ZSt25__throw_bad_function_callv>:
   d88de:	b508      	push	{r3, lr}
   d88e0:	f7fd fee2 	bl	d66a8 <abort>

000d88e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d88e4:	4b24      	ldr	r3, [pc, #144]	; (d8978 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d88e6:	681a      	ldr	r2, [r3, #0]
   d88e8:	07d0      	lsls	r0, r2, #31
   d88ea:	bf5c      	itt	pl
   d88ec:	2201      	movpl	r2, #1
   d88ee:	601a      	strpl	r2, [r3, #0]
   d88f0:	4b22      	ldr	r3, [pc, #136]	; (d897c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d88f2:	681a      	ldr	r2, [r3, #0]
   d88f4:	07d1      	lsls	r1, r2, #31
   d88f6:	bf5c      	itt	pl
   d88f8:	2201      	movpl	r2, #1
   d88fa:	601a      	strpl	r2, [r3, #0]
   d88fc:	4b20      	ldr	r3, [pc, #128]	; (d8980 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d88fe:	681a      	ldr	r2, [r3, #0]
   d8900:	07d2      	lsls	r2, r2, #31
   d8902:	bf5c      	itt	pl
   d8904:	2201      	movpl	r2, #1
   d8906:	601a      	strpl	r2, [r3, #0]
   d8908:	4b1e      	ldr	r3, [pc, #120]	; (d8984 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d890a:	681a      	ldr	r2, [r3, #0]
   d890c:	07d0      	lsls	r0, r2, #31
   d890e:	bf5c      	itt	pl
   d8910:	2201      	movpl	r2, #1
   d8912:	601a      	strpl	r2, [r3, #0]
   d8914:	4b1c      	ldr	r3, [pc, #112]	; (d8988 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d8916:	681a      	ldr	r2, [r3, #0]
   d8918:	07d1      	lsls	r1, r2, #31
   d891a:	bf5c      	itt	pl
   d891c:	2201      	movpl	r2, #1
   d891e:	601a      	strpl	r2, [r3, #0]
   d8920:	4b1a      	ldr	r3, [pc, #104]	; (d898c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d8922:	681a      	ldr	r2, [r3, #0]
   d8924:	07d2      	lsls	r2, r2, #31
   d8926:	bf5c      	itt	pl
   d8928:	2201      	movpl	r2, #1
   d892a:	601a      	strpl	r2, [r3, #0]
   d892c:	4b18      	ldr	r3, [pc, #96]	; (d8990 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d892e:	681a      	ldr	r2, [r3, #0]
   d8930:	07d0      	lsls	r0, r2, #31
   d8932:	bf5c      	itt	pl
   d8934:	2201      	movpl	r2, #1
   d8936:	601a      	strpl	r2, [r3, #0]
   d8938:	4b16      	ldr	r3, [pc, #88]	; (d8994 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d893a:	681a      	ldr	r2, [r3, #0]
   d893c:	07d1      	lsls	r1, r2, #31
   d893e:	bf5c      	itt	pl
   d8940:	2201      	movpl	r2, #1
   d8942:	601a      	strpl	r2, [r3, #0]
   d8944:	4b14      	ldr	r3, [pc, #80]	; (d8998 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d8946:	681a      	ldr	r2, [r3, #0]
   d8948:	07d2      	lsls	r2, r2, #31
   d894a:	bf5c      	itt	pl
   d894c:	2201      	movpl	r2, #1
   d894e:	601a      	strpl	r2, [r3, #0]
   d8950:	4b12      	ldr	r3, [pc, #72]	; (d899c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d8952:	681a      	ldr	r2, [r3, #0]
   d8954:	07d0      	lsls	r0, r2, #31
   d8956:	bf5c      	itt	pl
   d8958:	2201      	movpl	r2, #1
   d895a:	601a      	strpl	r2, [r3, #0]
   d895c:	4b10      	ldr	r3, [pc, #64]	; (d89a0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d895e:	681a      	ldr	r2, [r3, #0]
   d8960:	07d1      	lsls	r1, r2, #31
   d8962:	bf5c      	itt	pl
   d8964:	2201      	movpl	r2, #1
   d8966:	601a      	strpl	r2, [r3, #0]
   d8968:	4b0e      	ldr	r3, [pc, #56]	; (d89a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d896a:	681a      	ldr	r2, [r3, #0]
   d896c:	07d2      	lsls	r2, r2, #31
   d896e:	bf5c      	itt	pl
   d8970:	2201      	movpl	r2, #1
   d8972:	601a      	strpl	r2, [r3, #0]
   d8974:	4770      	bx	lr
   d8976:	bf00      	nop
   d8978:	2003e77c 	.word	0x2003e77c
   d897c:	2003e778 	.word	0x2003e778
   d8980:	2003e774 	.word	0x2003e774
   d8984:	2003e770 	.word	0x2003e770
   d8988:	2003e76c 	.word	0x2003e76c
   d898c:	2003e768 	.word	0x2003e768
   d8990:	2003e764 	.word	0x2003e764
   d8994:	2003e760 	.word	0x2003e760
   d8998:	2003e75c 	.word	0x2003e75c
   d899c:	2003e758 	.word	0x2003e758
   d89a0:	2003e754 	.word	0x2003e754
   d89a4:	2003e750 	.word	0x2003e750

000d89a8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d89a8:	4b18      	ldr	r3, [pc, #96]	; (d8a0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d89aa:	681a      	ldr	r2, [r3, #0]
   d89ac:	07d1      	lsls	r1, r2, #31
   d89ae:	bf5c      	itt	pl
   d89b0:	2201      	movpl	r2, #1
   d89b2:	601a      	strpl	r2, [r3, #0]
   d89b4:	4b16      	ldr	r3, [pc, #88]	; (d8a10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d89b6:	681a      	ldr	r2, [r3, #0]
   d89b8:	07d2      	lsls	r2, r2, #31
   d89ba:	bf5c      	itt	pl
   d89bc:	2201      	movpl	r2, #1
   d89be:	601a      	strpl	r2, [r3, #0]
   d89c0:	4b14      	ldr	r3, [pc, #80]	; (d8a14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d89c2:	681a      	ldr	r2, [r3, #0]
   d89c4:	07d0      	lsls	r0, r2, #31
   d89c6:	bf5c      	itt	pl
   d89c8:	2201      	movpl	r2, #1
   d89ca:	601a      	strpl	r2, [r3, #0]
   d89cc:	4b12      	ldr	r3, [pc, #72]	; (d8a18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d89ce:	681a      	ldr	r2, [r3, #0]
   d89d0:	07d1      	lsls	r1, r2, #31
   d89d2:	bf5c      	itt	pl
   d89d4:	2201      	movpl	r2, #1
   d89d6:	601a      	strpl	r2, [r3, #0]
   d89d8:	4b10      	ldr	r3, [pc, #64]	; (d8a1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d89da:	681a      	ldr	r2, [r3, #0]
   d89dc:	07d2      	lsls	r2, r2, #31
   d89de:	bf5c      	itt	pl
   d89e0:	2201      	movpl	r2, #1
   d89e2:	601a      	strpl	r2, [r3, #0]
   d89e4:	4b0e      	ldr	r3, [pc, #56]	; (d8a20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d89e6:	681a      	ldr	r2, [r3, #0]
   d89e8:	07d0      	lsls	r0, r2, #31
   d89ea:	bf5c      	itt	pl
   d89ec:	2201      	movpl	r2, #1
   d89ee:	601a      	strpl	r2, [r3, #0]
   d89f0:	4b0c      	ldr	r3, [pc, #48]	; (d8a24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d89f2:	681a      	ldr	r2, [r3, #0]
   d89f4:	07d1      	lsls	r1, r2, #31
   d89f6:	bf5c      	itt	pl
   d89f8:	2201      	movpl	r2, #1
   d89fa:	601a      	strpl	r2, [r3, #0]
   d89fc:	4b0a      	ldr	r3, [pc, #40]	; (d8a28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d89fe:	681a      	ldr	r2, [r3, #0]
   d8a00:	07d2      	lsls	r2, r2, #31
   d8a02:	bf5c      	itt	pl
   d8a04:	2201      	movpl	r2, #1
   d8a06:	601a      	strpl	r2, [r3, #0]
   d8a08:	4770      	bx	lr
   d8a0a:	bf00      	nop
   d8a0c:	2003e79c 	.word	0x2003e79c
   d8a10:	2003e798 	.word	0x2003e798
   d8a14:	2003e794 	.word	0x2003e794
   d8a18:	2003e790 	.word	0x2003e790
   d8a1c:	2003e78c 	.word	0x2003e78c
   d8a20:	2003e788 	.word	0x2003e788
   d8a24:	2003e784 	.word	0x2003e784
   d8a28:	2003e780 	.word	0x2003e780

000d8a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d8a2c:	4b18      	ldr	r3, [pc, #96]	; (d8a90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d8a2e:	681a      	ldr	r2, [r3, #0]
   d8a30:	07d1      	lsls	r1, r2, #31
   d8a32:	bf5c      	itt	pl
   d8a34:	2201      	movpl	r2, #1
   d8a36:	601a      	strpl	r2, [r3, #0]
   d8a38:	4b16      	ldr	r3, [pc, #88]	; (d8a94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d8a3a:	681a      	ldr	r2, [r3, #0]
   d8a3c:	07d2      	lsls	r2, r2, #31
   d8a3e:	bf5c      	itt	pl
   d8a40:	2201      	movpl	r2, #1
   d8a42:	601a      	strpl	r2, [r3, #0]
   d8a44:	4b14      	ldr	r3, [pc, #80]	; (d8a98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d8a46:	681a      	ldr	r2, [r3, #0]
   d8a48:	07d0      	lsls	r0, r2, #31
   d8a4a:	bf5c      	itt	pl
   d8a4c:	2201      	movpl	r2, #1
   d8a4e:	601a      	strpl	r2, [r3, #0]
   d8a50:	4b12      	ldr	r3, [pc, #72]	; (d8a9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d8a52:	681a      	ldr	r2, [r3, #0]
   d8a54:	07d1      	lsls	r1, r2, #31
   d8a56:	bf5c      	itt	pl
   d8a58:	2201      	movpl	r2, #1
   d8a5a:	601a      	strpl	r2, [r3, #0]
   d8a5c:	4b10      	ldr	r3, [pc, #64]	; (d8aa0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d8a5e:	681a      	ldr	r2, [r3, #0]
   d8a60:	07d2      	lsls	r2, r2, #31
   d8a62:	bf5c      	itt	pl
   d8a64:	2201      	movpl	r2, #1
   d8a66:	601a      	strpl	r2, [r3, #0]
   d8a68:	4b0e      	ldr	r3, [pc, #56]	; (d8aa4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d8a6a:	681a      	ldr	r2, [r3, #0]
   d8a6c:	07d0      	lsls	r0, r2, #31
   d8a6e:	bf5c      	itt	pl
   d8a70:	2201      	movpl	r2, #1
   d8a72:	601a      	strpl	r2, [r3, #0]
   d8a74:	4b0c      	ldr	r3, [pc, #48]	; (d8aa8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d8a76:	681a      	ldr	r2, [r3, #0]
   d8a78:	07d1      	lsls	r1, r2, #31
   d8a7a:	bf5c      	itt	pl
   d8a7c:	2201      	movpl	r2, #1
   d8a7e:	601a      	strpl	r2, [r3, #0]
   d8a80:	4b0a      	ldr	r3, [pc, #40]	; (d8aac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d8a82:	681a      	ldr	r2, [r3, #0]
   d8a84:	07d2      	lsls	r2, r2, #31
   d8a86:	bf5c      	itt	pl
   d8a88:	2201      	movpl	r2, #1
   d8a8a:	601a      	strpl	r2, [r3, #0]
   d8a8c:	4770      	bx	lr
   d8a8e:	bf00      	nop
   d8a90:	2003e7bc 	.word	0x2003e7bc
   d8a94:	2003e7b8 	.word	0x2003e7b8
   d8a98:	2003e7b4 	.word	0x2003e7b4
   d8a9c:	2003e7b0 	.word	0x2003e7b0
   d8aa0:	2003e7ac 	.word	0x2003e7ac
   d8aa4:	2003e7a8 	.word	0x2003e7a8
   d8aa8:	2003e7a4 	.word	0x2003e7a4
   d8aac:	2003e7a0 	.word	0x2003e7a0

000d8ab0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d8ab0:	4b24      	ldr	r3, [pc, #144]	; (d8b44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d8ab2:	681a      	ldr	r2, [r3, #0]
   d8ab4:	07d0      	lsls	r0, r2, #31
   d8ab6:	bf5c      	itt	pl
   d8ab8:	2201      	movpl	r2, #1
   d8aba:	601a      	strpl	r2, [r3, #0]
   d8abc:	4b22      	ldr	r3, [pc, #136]	; (d8b48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d8abe:	681a      	ldr	r2, [r3, #0]
   d8ac0:	07d1      	lsls	r1, r2, #31
   d8ac2:	bf5c      	itt	pl
   d8ac4:	2201      	movpl	r2, #1
   d8ac6:	601a      	strpl	r2, [r3, #0]
   d8ac8:	4b20      	ldr	r3, [pc, #128]	; (d8b4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d8aca:	681a      	ldr	r2, [r3, #0]
   d8acc:	07d2      	lsls	r2, r2, #31
   d8ace:	bf5c      	itt	pl
   d8ad0:	2201      	movpl	r2, #1
   d8ad2:	601a      	strpl	r2, [r3, #0]
   d8ad4:	4b1e      	ldr	r3, [pc, #120]	; (d8b50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d8ad6:	681a      	ldr	r2, [r3, #0]
   d8ad8:	07d0      	lsls	r0, r2, #31
   d8ada:	bf5c      	itt	pl
   d8adc:	2201      	movpl	r2, #1
   d8ade:	601a      	strpl	r2, [r3, #0]
   d8ae0:	4b1c      	ldr	r3, [pc, #112]	; (d8b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d8ae2:	681a      	ldr	r2, [r3, #0]
   d8ae4:	07d1      	lsls	r1, r2, #31
   d8ae6:	bf5c      	itt	pl
   d8ae8:	2201      	movpl	r2, #1
   d8aea:	601a      	strpl	r2, [r3, #0]
   d8aec:	4b1a      	ldr	r3, [pc, #104]	; (d8b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d8aee:	681a      	ldr	r2, [r3, #0]
   d8af0:	07d2      	lsls	r2, r2, #31
   d8af2:	bf5c      	itt	pl
   d8af4:	2201      	movpl	r2, #1
   d8af6:	601a      	strpl	r2, [r3, #0]
   d8af8:	4b18      	ldr	r3, [pc, #96]	; (d8b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d8afa:	681a      	ldr	r2, [r3, #0]
   d8afc:	07d0      	lsls	r0, r2, #31
   d8afe:	bf5c      	itt	pl
   d8b00:	2201      	movpl	r2, #1
   d8b02:	601a      	strpl	r2, [r3, #0]
   d8b04:	4b16      	ldr	r3, [pc, #88]	; (d8b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d8b06:	681a      	ldr	r2, [r3, #0]
   d8b08:	07d1      	lsls	r1, r2, #31
   d8b0a:	bf5c      	itt	pl
   d8b0c:	2201      	movpl	r2, #1
   d8b0e:	601a      	strpl	r2, [r3, #0]
   d8b10:	4b14      	ldr	r3, [pc, #80]	; (d8b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d8b12:	681a      	ldr	r2, [r3, #0]
   d8b14:	07d2      	lsls	r2, r2, #31
   d8b16:	bf5c      	itt	pl
   d8b18:	2201      	movpl	r2, #1
   d8b1a:	601a      	strpl	r2, [r3, #0]
   d8b1c:	4b12      	ldr	r3, [pc, #72]	; (d8b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d8b1e:	681a      	ldr	r2, [r3, #0]
   d8b20:	07d0      	lsls	r0, r2, #31
   d8b22:	bf5c      	itt	pl
   d8b24:	2201      	movpl	r2, #1
   d8b26:	601a      	strpl	r2, [r3, #0]
   d8b28:	4b10      	ldr	r3, [pc, #64]	; (d8b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d8b2a:	681a      	ldr	r2, [r3, #0]
   d8b2c:	07d1      	lsls	r1, r2, #31
   d8b2e:	bf5c      	itt	pl
   d8b30:	2201      	movpl	r2, #1
   d8b32:	601a      	strpl	r2, [r3, #0]
   d8b34:	4b0e      	ldr	r3, [pc, #56]	; (d8b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d8b36:	681a      	ldr	r2, [r3, #0]
   d8b38:	07d2      	lsls	r2, r2, #31
   d8b3a:	bf5c      	itt	pl
   d8b3c:	2201      	movpl	r2, #1
   d8b3e:	601a      	strpl	r2, [r3, #0]
   d8b40:	4770      	bx	lr
   d8b42:	bf00      	nop
   d8b44:	2003e7ec 	.word	0x2003e7ec
   d8b48:	2003e7e8 	.word	0x2003e7e8
   d8b4c:	2003e7e4 	.word	0x2003e7e4
   d8b50:	2003e7e0 	.word	0x2003e7e0
   d8b54:	2003e7dc 	.word	0x2003e7dc
   d8b58:	2003e7d8 	.word	0x2003e7d8
   d8b5c:	2003e7d4 	.word	0x2003e7d4
   d8b60:	2003e7d0 	.word	0x2003e7d0
   d8b64:	2003e7cc 	.word	0x2003e7cc
   d8b68:	2003e7c8 	.word	0x2003e7c8
   d8b6c:	2003e7c4 	.word	0x2003e7c4
   d8b70:	2003e7c0 	.word	0x2003e7c0

000d8b74 <__aeabi_drsub>:
   d8b74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d8b78:	e002      	b.n	d8b80 <__adddf3>
   d8b7a:	bf00      	nop

000d8b7c <__aeabi_dsub>:
   d8b7c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d8b80 <__adddf3>:
   d8b80:	b530      	push	{r4, r5, lr}
   d8b82:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d8b86:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d8b8a:	ea94 0f05 	teq	r4, r5
   d8b8e:	bf08      	it	eq
   d8b90:	ea90 0f02 	teqeq	r0, r2
   d8b94:	bf1f      	itttt	ne
   d8b96:	ea54 0c00 	orrsne.w	ip, r4, r0
   d8b9a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d8b9e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d8ba2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8ba6:	f000 80e2 	beq.w	d8d6e <__adddf3+0x1ee>
   d8baa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d8bae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d8bb2:	bfb8      	it	lt
   d8bb4:	426d      	neglt	r5, r5
   d8bb6:	dd0c      	ble.n	d8bd2 <__adddf3+0x52>
   d8bb8:	442c      	add	r4, r5
   d8bba:	ea80 0202 	eor.w	r2, r0, r2
   d8bbe:	ea81 0303 	eor.w	r3, r1, r3
   d8bc2:	ea82 0000 	eor.w	r0, r2, r0
   d8bc6:	ea83 0101 	eor.w	r1, r3, r1
   d8bca:	ea80 0202 	eor.w	r2, r0, r2
   d8bce:	ea81 0303 	eor.w	r3, r1, r3
   d8bd2:	2d36      	cmp	r5, #54	; 0x36
   d8bd4:	bf88      	it	hi
   d8bd6:	bd30      	pophi	{r4, r5, pc}
   d8bd8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d8bdc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d8be0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d8be4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d8be8:	d002      	beq.n	d8bf0 <__adddf3+0x70>
   d8bea:	4240      	negs	r0, r0
   d8bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8bf0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d8bf4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d8bf8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d8bfc:	d002      	beq.n	d8c04 <__adddf3+0x84>
   d8bfe:	4252      	negs	r2, r2
   d8c00:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d8c04:	ea94 0f05 	teq	r4, r5
   d8c08:	f000 80a7 	beq.w	d8d5a <__adddf3+0x1da>
   d8c0c:	f1a4 0401 	sub.w	r4, r4, #1
   d8c10:	f1d5 0e20 	rsbs	lr, r5, #32
   d8c14:	db0d      	blt.n	d8c32 <__adddf3+0xb2>
   d8c16:	fa02 fc0e 	lsl.w	ip, r2, lr
   d8c1a:	fa22 f205 	lsr.w	r2, r2, r5
   d8c1e:	1880      	adds	r0, r0, r2
   d8c20:	f141 0100 	adc.w	r1, r1, #0
   d8c24:	fa03 f20e 	lsl.w	r2, r3, lr
   d8c28:	1880      	adds	r0, r0, r2
   d8c2a:	fa43 f305 	asr.w	r3, r3, r5
   d8c2e:	4159      	adcs	r1, r3
   d8c30:	e00e      	b.n	d8c50 <__adddf3+0xd0>
   d8c32:	f1a5 0520 	sub.w	r5, r5, #32
   d8c36:	f10e 0e20 	add.w	lr, lr, #32
   d8c3a:	2a01      	cmp	r2, #1
   d8c3c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d8c40:	bf28      	it	cs
   d8c42:	f04c 0c02 	orrcs.w	ip, ip, #2
   d8c46:	fa43 f305 	asr.w	r3, r3, r5
   d8c4a:	18c0      	adds	r0, r0, r3
   d8c4c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d8c50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8c54:	d507      	bpl.n	d8c66 <__adddf3+0xe6>
   d8c56:	f04f 0e00 	mov.w	lr, #0
   d8c5a:	f1dc 0c00 	rsbs	ip, ip, #0
   d8c5e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d8c62:	eb6e 0101 	sbc.w	r1, lr, r1
   d8c66:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8c6a:	d31b      	bcc.n	d8ca4 <__adddf3+0x124>
   d8c6c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d8c70:	d30c      	bcc.n	d8c8c <__adddf3+0x10c>
   d8c72:	0849      	lsrs	r1, r1, #1
   d8c74:	ea5f 0030 	movs.w	r0, r0, rrx
   d8c78:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d8c7c:	f104 0401 	add.w	r4, r4, #1
   d8c80:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d8c84:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d8c88:	f080 809a 	bcs.w	d8dc0 <__adddf3+0x240>
   d8c8c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d8c90:	bf08      	it	eq
   d8c92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d8c96:	f150 0000 	adcs.w	r0, r0, #0
   d8c9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8c9e:	ea41 0105 	orr.w	r1, r1, r5
   d8ca2:	bd30      	pop	{r4, r5, pc}
   d8ca4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d8ca8:	4140      	adcs	r0, r0
   d8caa:	eb41 0101 	adc.w	r1, r1, r1
   d8cae:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d8cb2:	f1a4 0401 	sub.w	r4, r4, #1
   d8cb6:	d1e9      	bne.n	d8c8c <__adddf3+0x10c>
   d8cb8:	f091 0f00 	teq	r1, #0
   d8cbc:	bf04      	itt	eq
   d8cbe:	4601      	moveq	r1, r0
   d8cc0:	2000      	moveq	r0, #0
   d8cc2:	fab1 f381 	clz	r3, r1
   d8cc6:	bf08      	it	eq
   d8cc8:	3320      	addeq	r3, #32
   d8cca:	f1a3 030b 	sub.w	r3, r3, #11
   d8cce:	f1b3 0220 	subs.w	r2, r3, #32
   d8cd2:	da0c      	bge.n	d8cee <__adddf3+0x16e>
   d8cd4:	320c      	adds	r2, #12
   d8cd6:	dd08      	ble.n	d8cea <__adddf3+0x16a>
   d8cd8:	f102 0c14 	add.w	ip, r2, #20
   d8cdc:	f1c2 020c 	rsb	r2, r2, #12
   d8ce0:	fa01 f00c 	lsl.w	r0, r1, ip
   d8ce4:	fa21 f102 	lsr.w	r1, r1, r2
   d8ce8:	e00c      	b.n	d8d04 <__adddf3+0x184>
   d8cea:	f102 0214 	add.w	r2, r2, #20
   d8cee:	bfd8      	it	le
   d8cf0:	f1c2 0c20 	rsble	ip, r2, #32
   d8cf4:	fa01 f102 	lsl.w	r1, r1, r2
   d8cf8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d8cfc:	bfdc      	itt	le
   d8cfe:	ea41 010c 	orrle.w	r1, r1, ip
   d8d02:	4090      	lslle	r0, r2
   d8d04:	1ae4      	subs	r4, r4, r3
   d8d06:	bfa2      	ittt	ge
   d8d08:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d8d0c:	4329      	orrge	r1, r5
   d8d0e:	bd30      	popge	{r4, r5, pc}
   d8d10:	ea6f 0404 	mvn.w	r4, r4
   d8d14:	3c1f      	subs	r4, #31
   d8d16:	da1c      	bge.n	d8d52 <__adddf3+0x1d2>
   d8d18:	340c      	adds	r4, #12
   d8d1a:	dc0e      	bgt.n	d8d3a <__adddf3+0x1ba>
   d8d1c:	f104 0414 	add.w	r4, r4, #20
   d8d20:	f1c4 0220 	rsb	r2, r4, #32
   d8d24:	fa20 f004 	lsr.w	r0, r0, r4
   d8d28:	fa01 f302 	lsl.w	r3, r1, r2
   d8d2c:	ea40 0003 	orr.w	r0, r0, r3
   d8d30:	fa21 f304 	lsr.w	r3, r1, r4
   d8d34:	ea45 0103 	orr.w	r1, r5, r3
   d8d38:	bd30      	pop	{r4, r5, pc}
   d8d3a:	f1c4 040c 	rsb	r4, r4, #12
   d8d3e:	f1c4 0220 	rsb	r2, r4, #32
   d8d42:	fa20 f002 	lsr.w	r0, r0, r2
   d8d46:	fa01 f304 	lsl.w	r3, r1, r4
   d8d4a:	ea40 0003 	orr.w	r0, r0, r3
   d8d4e:	4629      	mov	r1, r5
   d8d50:	bd30      	pop	{r4, r5, pc}
   d8d52:	fa21 f004 	lsr.w	r0, r1, r4
   d8d56:	4629      	mov	r1, r5
   d8d58:	bd30      	pop	{r4, r5, pc}
   d8d5a:	f094 0f00 	teq	r4, #0
   d8d5e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d8d62:	bf06      	itte	eq
   d8d64:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d8d68:	3401      	addeq	r4, #1
   d8d6a:	3d01      	subne	r5, #1
   d8d6c:	e74e      	b.n	d8c0c <__adddf3+0x8c>
   d8d6e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8d72:	bf18      	it	ne
   d8d74:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d8d78:	d029      	beq.n	d8dce <__adddf3+0x24e>
   d8d7a:	ea94 0f05 	teq	r4, r5
   d8d7e:	bf08      	it	eq
   d8d80:	ea90 0f02 	teqeq	r0, r2
   d8d84:	d005      	beq.n	d8d92 <__adddf3+0x212>
   d8d86:	ea54 0c00 	orrs.w	ip, r4, r0
   d8d8a:	bf04      	itt	eq
   d8d8c:	4619      	moveq	r1, r3
   d8d8e:	4610      	moveq	r0, r2
   d8d90:	bd30      	pop	{r4, r5, pc}
   d8d92:	ea91 0f03 	teq	r1, r3
   d8d96:	bf1e      	ittt	ne
   d8d98:	2100      	movne	r1, #0
   d8d9a:	2000      	movne	r0, #0
   d8d9c:	bd30      	popne	{r4, r5, pc}
   d8d9e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d8da2:	d105      	bne.n	d8db0 <__adddf3+0x230>
   d8da4:	0040      	lsls	r0, r0, #1
   d8da6:	4149      	adcs	r1, r1
   d8da8:	bf28      	it	cs
   d8daa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d8dae:	bd30      	pop	{r4, r5, pc}
   d8db0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d8db4:	bf3c      	itt	cc
   d8db6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d8dba:	bd30      	popcc	{r4, r5, pc}
   d8dbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8dc0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d8dc4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d8dc8:	f04f 0000 	mov.w	r0, #0
   d8dcc:	bd30      	pop	{r4, r5, pc}
   d8dce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d8dd2:	bf1a      	itte	ne
   d8dd4:	4619      	movne	r1, r3
   d8dd6:	4610      	movne	r0, r2
   d8dd8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d8ddc:	bf1c      	itt	ne
   d8dde:	460b      	movne	r3, r1
   d8de0:	4602      	movne	r2, r0
   d8de2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d8de6:	bf06      	itte	eq
   d8de8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d8dec:	ea91 0f03 	teqeq	r1, r3
   d8df0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d8df4:	bd30      	pop	{r4, r5, pc}
   d8df6:	bf00      	nop

000d8df8 <__aeabi_ui2d>:
   d8df8:	f090 0f00 	teq	r0, #0
   d8dfc:	bf04      	itt	eq
   d8dfe:	2100      	moveq	r1, #0
   d8e00:	4770      	bxeq	lr
   d8e02:	b530      	push	{r4, r5, lr}
   d8e04:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8e08:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8e0c:	f04f 0500 	mov.w	r5, #0
   d8e10:	f04f 0100 	mov.w	r1, #0
   d8e14:	e750      	b.n	d8cb8 <__adddf3+0x138>
   d8e16:	bf00      	nop

000d8e18 <__aeabi_i2d>:
   d8e18:	f090 0f00 	teq	r0, #0
   d8e1c:	bf04      	itt	eq
   d8e1e:	2100      	moveq	r1, #0
   d8e20:	4770      	bxeq	lr
   d8e22:	b530      	push	{r4, r5, lr}
   d8e24:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8e28:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8e2c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d8e30:	bf48      	it	mi
   d8e32:	4240      	negmi	r0, r0
   d8e34:	f04f 0100 	mov.w	r1, #0
   d8e38:	e73e      	b.n	d8cb8 <__adddf3+0x138>
   d8e3a:	bf00      	nop

000d8e3c <__aeabi_f2d>:
   d8e3c:	0042      	lsls	r2, r0, #1
   d8e3e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d8e42:	ea4f 0131 	mov.w	r1, r1, rrx
   d8e46:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d8e4a:	bf1f      	itttt	ne
   d8e4c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d8e50:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8e54:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d8e58:	4770      	bxne	lr
   d8e5a:	f092 0f00 	teq	r2, #0
   d8e5e:	bf14      	ite	ne
   d8e60:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d8e64:	4770      	bxeq	lr
   d8e66:	b530      	push	{r4, r5, lr}
   d8e68:	f44f 7460 	mov.w	r4, #896	; 0x380
   d8e6c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d8e70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d8e74:	e720      	b.n	d8cb8 <__adddf3+0x138>
   d8e76:	bf00      	nop

000d8e78 <__aeabi_ul2d>:
   d8e78:	ea50 0201 	orrs.w	r2, r0, r1
   d8e7c:	bf08      	it	eq
   d8e7e:	4770      	bxeq	lr
   d8e80:	b530      	push	{r4, r5, lr}
   d8e82:	f04f 0500 	mov.w	r5, #0
   d8e86:	e00a      	b.n	d8e9e <__aeabi_l2d+0x16>

000d8e88 <__aeabi_l2d>:
   d8e88:	ea50 0201 	orrs.w	r2, r0, r1
   d8e8c:	bf08      	it	eq
   d8e8e:	4770      	bxeq	lr
   d8e90:	b530      	push	{r4, r5, lr}
   d8e92:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d8e96:	d502      	bpl.n	d8e9e <__aeabi_l2d+0x16>
   d8e98:	4240      	negs	r0, r0
   d8e9a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d8e9e:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d8ea2:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d8ea6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d8eaa:	f43f aedc 	beq.w	d8c66 <__adddf3+0xe6>
   d8eae:	f04f 0203 	mov.w	r2, #3
   d8eb2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8eb6:	bf18      	it	ne
   d8eb8:	3203      	addne	r2, #3
   d8eba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d8ebe:	bf18      	it	ne
   d8ec0:	3203      	addne	r2, #3
   d8ec2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d8ec6:	f1c2 0320 	rsb	r3, r2, #32
   d8eca:	fa00 fc03 	lsl.w	ip, r0, r3
   d8ece:	fa20 f002 	lsr.w	r0, r0, r2
   d8ed2:	fa01 fe03 	lsl.w	lr, r1, r3
   d8ed6:	ea40 000e 	orr.w	r0, r0, lr
   d8eda:	fa21 f102 	lsr.w	r1, r1, r2
   d8ede:	4414      	add	r4, r2
   d8ee0:	e6c1      	b.n	d8c66 <__adddf3+0xe6>
   d8ee2:	bf00      	nop

000d8ee4 <__aeabi_dmul>:
   d8ee4:	b570      	push	{r4, r5, r6, lr}
   d8ee6:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d8eea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d8eee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d8ef2:	bf1d      	ittte	ne
   d8ef4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d8ef8:	ea94 0f0c 	teqne	r4, ip
   d8efc:	ea95 0f0c 	teqne	r5, ip
   d8f00:	f000 f8de 	bleq	d90c0 <__aeabi_dmul+0x1dc>
   d8f04:	442c      	add	r4, r5
   d8f06:	ea81 0603 	eor.w	r6, r1, r3
   d8f0a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d8f0e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d8f12:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d8f16:	bf18      	it	ne
   d8f18:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d8f1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8f24:	d038      	beq.n	d8f98 <__aeabi_dmul+0xb4>
   d8f26:	fba0 ce02 	umull	ip, lr, r0, r2
   d8f2a:	f04f 0500 	mov.w	r5, #0
   d8f2e:	fbe1 e502 	umlal	lr, r5, r1, r2
   d8f32:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d8f36:	fbe0 e503 	umlal	lr, r5, r0, r3
   d8f3a:	f04f 0600 	mov.w	r6, #0
   d8f3e:	fbe1 5603 	umlal	r5, r6, r1, r3
   d8f42:	f09c 0f00 	teq	ip, #0
   d8f46:	bf18      	it	ne
   d8f48:	f04e 0e01 	orrne.w	lr, lr, #1
   d8f4c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d8f50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d8f54:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d8f58:	d204      	bcs.n	d8f64 <__aeabi_dmul+0x80>
   d8f5a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d8f5e:	416d      	adcs	r5, r5
   d8f60:	eb46 0606 	adc.w	r6, r6, r6
   d8f64:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d8f68:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d8f6c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d8f70:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d8f74:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d8f78:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d8f7c:	bf88      	it	hi
   d8f7e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d8f82:	d81e      	bhi.n	d8fc2 <__aeabi_dmul+0xde>
   d8f84:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d8f88:	bf08      	it	eq
   d8f8a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d8f8e:	f150 0000 	adcs.w	r0, r0, #0
   d8f92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d8f96:	bd70      	pop	{r4, r5, r6, pc}
   d8f98:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d8f9c:	ea46 0101 	orr.w	r1, r6, r1
   d8fa0:	ea40 0002 	orr.w	r0, r0, r2
   d8fa4:	ea81 0103 	eor.w	r1, r1, r3
   d8fa8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d8fac:	bfc2      	ittt	gt
   d8fae:	ebd4 050c 	rsbsgt	r5, r4, ip
   d8fb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d8fb6:	bd70      	popgt	{r4, r5, r6, pc}
   d8fb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d8fbc:	f04f 0e00 	mov.w	lr, #0
   d8fc0:	3c01      	subs	r4, #1
   d8fc2:	f300 80ab 	bgt.w	d911c <__aeabi_dmul+0x238>
   d8fc6:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d8fca:	bfde      	ittt	le
   d8fcc:	2000      	movle	r0, #0
   d8fce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d8fd2:	bd70      	pople	{r4, r5, r6, pc}
   d8fd4:	f1c4 0400 	rsb	r4, r4, #0
   d8fd8:	3c20      	subs	r4, #32
   d8fda:	da35      	bge.n	d9048 <__aeabi_dmul+0x164>
   d8fdc:	340c      	adds	r4, #12
   d8fde:	dc1b      	bgt.n	d9018 <__aeabi_dmul+0x134>
   d8fe0:	f104 0414 	add.w	r4, r4, #20
   d8fe4:	f1c4 0520 	rsb	r5, r4, #32
   d8fe8:	fa00 f305 	lsl.w	r3, r0, r5
   d8fec:	fa20 f004 	lsr.w	r0, r0, r4
   d8ff0:	fa01 f205 	lsl.w	r2, r1, r5
   d8ff4:	ea40 0002 	orr.w	r0, r0, r2
   d8ff8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d8ffc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9000:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9004:	fa21 f604 	lsr.w	r6, r1, r4
   d9008:	eb42 0106 	adc.w	r1, r2, r6
   d900c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9010:	bf08      	it	eq
   d9012:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9016:	bd70      	pop	{r4, r5, r6, pc}
   d9018:	f1c4 040c 	rsb	r4, r4, #12
   d901c:	f1c4 0520 	rsb	r5, r4, #32
   d9020:	fa00 f304 	lsl.w	r3, r0, r4
   d9024:	fa20 f005 	lsr.w	r0, r0, r5
   d9028:	fa01 f204 	lsl.w	r2, r1, r4
   d902c:	ea40 0002 	orr.w	r0, r0, r2
   d9030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9034:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9038:	f141 0100 	adc.w	r1, r1, #0
   d903c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9040:	bf08      	it	eq
   d9042:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9046:	bd70      	pop	{r4, r5, r6, pc}
   d9048:	f1c4 0520 	rsb	r5, r4, #32
   d904c:	fa00 f205 	lsl.w	r2, r0, r5
   d9050:	ea4e 0e02 	orr.w	lr, lr, r2
   d9054:	fa20 f304 	lsr.w	r3, r0, r4
   d9058:	fa01 f205 	lsl.w	r2, r1, r5
   d905c:	ea43 0302 	orr.w	r3, r3, r2
   d9060:	fa21 f004 	lsr.w	r0, r1, r4
   d9064:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9068:	fa21 f204 	lsr.w	r2, r1, r4
   d906c:	ea20 0002 	bic.w	r0, r0, r2
   d9070:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d9074:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9078:	bf08      	it	eq
   d907a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d907e:	bd70      	pop	{r4, r5, r6, pc}
   d9080:	f094 0f00 	teq	r4, #0
   d9084:	d10f      	bne.n	d90a6 <__aeabi_dmul+0x1c2>
   d9086:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d908a:	0040      	lsls	r0, r0, #1
   d908c:	eb41 0101 	adc.w	r1, r1, r1
   d9090:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9094:	bf08      	it	eq
   d9096:	3c01      	subeq	r4, #1
   d9098:	d0f7      	beq.n	d908a <__aeabi_dmul+0x1a6>
   d909a:	ea41 0106 	orr.w	r1, r1, r6
   d909e:	f095 0f00 	teq	r5, #0
   d90a2:	bf18      	it	ne
   d90a4:	4770      	bxne	lr
   d90a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d90aa:	0052      	lsls	r2, r2, #1
   d90ac:	eb43 0303 	adc.w	r3, r3, r3
   d90b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d90b4:	bf08      	it	eq
   d90b6:	3d01      	subeq	r5, #1
   d90b8:	d0f7      	beq.n	d90aa <__aeabi_dmul+0x1c6>
   d90ba:	ea43 0306 	orr.w	r3, r3, r6
   d90be:	4770      	bx	lr
   d90c0:	ea94 0f0c 	teq	r4, ip
   d90c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d90c8:	bf18      	it	ne
   d90ca:	ea95 0f0c 	teqne	r5, ip
   d90ce:	d00c      	beq.n	d90ea <__aeabi_dmul+0x206>
   d90d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d90d4:	bf18      	it	ne
   d90d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d90da:	d1d1      	bne.n	d9080 <__aeabi_dmul+0x19c>
   d90dc:	ea81 0103 	eor.w	r1, r1, r3
   d90e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d90e4:	f04f 0000 	mov.w	r0, #0
   d90e8:	bd70      	pop	{r4, r5, r6, pc}
   d90ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d90ee:	bf06      	itte	eq
   d90f0:	4610      	moveq	r0, r2
   d90f2:	4619      	moveq	r1, r3
   d90f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d90f8:	d019      	beq.n	d912e <__aeabi_dmul+0x24a>
   d90fa:	ea94 0f0c 	teq	r4, ip
   d90fe:	d102      	bne.n	d9106 <__aeabi_dmul+0x222>
   d9100:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d9104:	d113      	bne.n	d912e <__aeabi_dmul+0x24a>
   d9106:	ea95 0f0c 	teq	r5, ip
   d910a:	d105      	bne.n	d9118 <__aeabi_dmul+0x234>
   d910c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9110:	bf1c      	itt	ne
   d9112:	4610      	movne	r0, r2
   d9114:	4619      	movne	r1, r3
   d9116:	d10a      	bne.n	d912e <__aeabi_dmul+0x24a>
   d9118:	ea81 0103 	eor.w	r1, r1, r3
   d911c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9120:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9124:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9128:	f04f 0000 	mov.w	r0, #0
   d912c:	bd70      	pop	{r4, r5, r6, pc}
   d912e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d9132:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d9136:	bd70      	pop	{r4, r5, r6, pc}

000d9138 <__aeabi_ddiv>:
   d9138:	b570      	push	{r4, r5, r6, lr}
   d913a:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d913e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9142:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d9146:	bf1d      	ittte	ne
   d9148:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d914c:	ea94 0f0c 	teqne	r4, ip
   d9150:	ea95 0f0c 	teqne	r5, ip
   d9154:	f000 f8a7 	bleq	d92a6 <__aeabi_ddiv+0x16e>
   d9158:	eba4 0405 	sub.w	r4, r4, r5
   d915c:	ea81 0e03 	eor.w	lr, r1, r3
   d9160:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9164:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9168:	f000 8088 	beq.w	d927c <__aeabi_ddiv+0x144>
   d916c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9170:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d9174:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9178:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d917c:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9180:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d9184:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9188:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d918c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9190:	429d      	cmp	r5, r3
   d9192:	bf08      	it	eq
   d9194:	4296      	cmpeq	r6, r2
   d9196:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d919a:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d919e:	d202      	bcs.n	d91a6 <__aeabi_ddiv+0x6e>
   d91a0:	085b      	lsrs	r3, r3, #1
   d91a2:	ea4f 0232 	mov.w	r2, r2, rrx
   d91a6:	1ab6      	subs	r6, r6, r2
   d91a8:	eb65 0503 	sbc.w	r5, r5, r3
   d91ac:	085b      	lsrs	r3, r3, #1
   d91ae:	ea4f 0232 	mov.w	r2, r2, rrx
   d91b2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d91b6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d91ba:	ebb6 0e02 	subs.w	lr, r6, r2
   d91be:	eb75 0e03 	sbcs.w	lr, r5, r3
   d91c2:	bf22      	ittt	cs
   d91c4:	1ab6      	subcs	r6, r6, r2
   d91c6:	4675      	movcs	r5, lr
   d91c8:	ea40 000c 	orrcs.w	r0, r0, ip
   d91cc:	085b      	lsrs	r3, r3, #1
   d91ce:	ea4f 0232 	mov.w	r2, r2, rrx
   d91d2:	ebb6 0e02 	subs.w	lr, r6, r2
   d91d6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d91da:	bf22      	ittt	cs
   d91dc:	1ab6      	subcs	r6, r6, r2
   d91de:	4675      	movcs	r5, lr
   d91e0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d91e4:	085b      	lsrs	r3, r3, #1
   d91e6:	ea4f 0232 	mov.w	r2, r2, rrx
   d91ea:	ebb6 0e02 	subs.w	lr, r6, r2
   d91ee:	eb75 0e03 	sbcs.w	lr, r5, r3
   d91f2:	bf22      	ittt	cs
   d91f4:	1ab6      	subcs	r6, r6, r2
   d91f6:	4675      	movcs	r5, lr
   d91f8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d91fc:	085b      	lsrs	r3, r3, #1
   d91fe:	ea4f 0232 	mov.w	r2, r2, rrx
   d9202:	ebb6 0e02 	subs.w	lr, r6, r2
   d9206:	eb75 0e03 	sbcs.w	lr, r5, r3
   d920a:	bf22      	ittt	cs
   d920c:	1ab6      	subcs	r6, r6, r2
   d920e:	4675      	movcs	r5, lr
   d9210:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d9214:	ea55 0e06 	orrs.w	lr, r5, r6
   d9218:	d018      	beq.n	d924c <__aeabi_ddiv+0x114>
   d921a:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d921e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d9222:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d9226:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d922a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d922e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d9232:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d9236:	d1c0      	bne.n	d91ba <__aeabi_ddiv+0x82>
   d9238:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d923c:	d10b      	bne.n	d9256 <__aeabi_ddiv+0x11e>
   d923e:	ea41 0100 	orr.w	r1, r1, r0
   d9242:	f04f 0000 	mov.w	r0, #0
   d9246:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d924a:	e7b6      	b.n	d91ba <__aeabi_ddiv+0x82>
   d924c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9250:	bf04      	itt	eq
   d9252:	4301      	orreq	r1, r0
   d9254:	2000      	moveq	r0, #0
   d9256:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d925a:	bf88      	it	hi
   d925c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9260:	f63f aeaf 	bhi.w	d8fc2 <__aeabi_dmul+0xde>
   d9264:	ebb5 0c03 	subs.w	ip, r5, r3
   d9268:	bf04      	itt	eq
   d926a:	ebb6 0c02 	subseq.w	ip, r6, r2
   d926e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9272:	f150 0000 	adcs.w	r0, r0, #0
   d9276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d927a:	bd70      	pop	{r4, r5, r6, pc}
   d927c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9280:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d9284:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9288:	bfc2      	ittt	gt
   d928a:	ebd4 050c 	rsbsgt	r5, r4, ip
   d928e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d9292:	bd70      	popgt	{r4, r5, r6, pc}
   d9294:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9298:	f04f 0e00 	mov.w	lr, #0
   d929c:	3c01      	subs	r4, #1
   d929e:	e690      	b.n	d8fc2 <__aeabi_dmul+0xde>
   d92a0:	ea45 0e06 	orr.w	lr, r5, r6
   d92a4:	e68d      	b.n	d8fc2 <__aeabi_dmul+0xde>
   d92a6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d92aa:	ea94 0f0c 	teq	r4, ip
   d92ae:	bf08      	it	eq
   d92b0:	ea95 0f0c 	teqeq	r5, ip
   d92b4:	f43f af3b 	beq.w	d912e <__aeabi_dmul+0x24a>
   d92b8:	ea94 0f0c 	teq	r4, ip
   d92bc:	d10a      	bne.n	d92d4 <__aeabi_ddiv+0x19c>
   d92be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d92c2:	f47f af34 	bne.w	d912e <__aeabi_dmul+0x24a>
   d92c6:	ea95 0f0c 	teq	r5, ip
   d92ca:	f47f af25 	bne.w	d9118 <__aeabi_dmul+0x234>
   d92ce:	4610      	mov	r0, r2
   d92d0:	4619      	mov	r1, r3
   d92d2:	e72c      	b.n	d912e <__aeabi_dmul+0x24a>
   d92d4:	ea95 0f0c 	teq	r5, ip
   d92d8:	d106      	bne.n	d92e8 <__aeabi_ddiv+0x1b0>
   d92da:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d92de:	f43f aefd 	beq.w	d90dc <__aeabi_dmul+0x1f8>
   d92e2:	4610      	mov	r0, r2
   d92e4:	4619      	mov	r1, r3
   d92e6:	e722      	b.n	d912e <__aeabi_dmul+0x24a>
   d92e8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d92ec:	bf18      	it	ne
   d92ee:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d92f2:	f47f aec5 	bne.w	d9080 <__aeabi_dmul+0x19c>
   d92f6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d92fa:	f47f af0d 	bne.w	d9118 <__aeabi_dmul+0x234>
   d92fe:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d9302:	f47f aeeb 	bne.w	d90dc <__aeabi_dmul+0x1f8>
   d9306:	e712      	b.n	d912e <__aeabi_dmul+0x24a>

000d9308 <__gedf2>:
   d9308:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   d930c:	e006      	b.n	d931c <__cmpdf2+0x4>
   d930e:	bf00      	nop

000d9310 <__ledf2>:
   d9310:	f04f 0c01 	mov.w	ip, #1
   d9314:	e002      	b.n	d931c <__cmpdf2+0x4>
   d9316:	bf00      	nop

000d9318 <__cmpdf2>:
   d9318:	f04f 0c01 	mov.w	ip, #1
   d931c:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9320:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9324:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9328:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d932c:	bf18      	it	ne
   d932e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d9332:	d01b      	beq.n	d936c <__cmpdf2+0x54>
   d9334:	b001      	add	sp, #4
   d9336:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d933a:	bf0c      	ite	eq
   d933c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9340:	ea91 0f03 	teqne	r1, r3
   d9344:	bf02      	ittt	eq
   d9346:	ea90 0f02 	teqeq	r0, r2
   d934a:	2000      	moveq	r0, #0
   d934c:	4770      	bxeq	lr
   d934e:	f110 0f00 	cmn.w	r0, #0
   d9352:	ea91 0f03 	teq	r1, r3
   d9356:	bf58      	it	pl
   d9358:	4299      	cmppl	r1, r3
   d935a:	bf08      	it	eq
   d935c:	4290      	cmpeq	r0, r2
   d935e:	bf2c      	ite	cs
   d9360:	17d8      	asrcs	r0, r3, #31
   d9362:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d9366:	f040 0001 	orr.w	r0, r0, #1
   d936a:	4770      	bx	lr
   d936c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9370:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9374:	d102      	bne.n	d937c <__cmpdf2+0x64>
   d9376:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d937a:	d107      	bne.n	d938c <__cmpdf2+0x74>
   d937c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9380:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9384:	d1d6      	bne.n	d9334 <__cmpdf2+0x1c>
   d9386:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d938a:	d0d3      	beq.n	d9334 <__cmpdf2+0x1c>
   d938c:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9390:	4770      	bx	lr
   d9392:	bf00      	nop

000d9394 <__aeabi_cdrcmple>:
   d9394:	4684      	mov	ip, r0
   d9396:	4610      	mov	r0, r2
   d9398:	4662      	mov	r2, ip
   d939a:	468c      	mov	ip, r1
   d939c:	4619      	mov	r1, r3
   d939e:	4663      	mov	r3, ip
   d93a0:	e000      	b.n	d93a4 <__aeabi_cdcmpeq>
   d93a2:	bf00      	nop

000d93a4 <__aeabi_cdcmpeq>:
   d93a4:	b501      	push	{r0, lr}
   d93a6:	f7ff ffb7 	bl	d9318 <__cmpdf2>
   d93aa:	2800      	cmp	r0, #0
   d93ac:	bf48      	it	mi
   d93ae:	f110 0f00 	cmnmi.w	r0, #0
   d93b2:	bd01      	pop	{r0, pc}

000d93b4 <__aeabi_dcmpeq>:
   d93b4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d93b8:	f7ff fff4 	bl	d93a4 <__aeabi_cdcmpeq>
   d93bc:	bf0c      	ite	eq
   d93be:	2001      	moveq	r0, #1
   d93c0:	2000      	movne	r0, #0
   d93c2:	f85d fb08 	ldr.w	pc, [sp], #8
   d93c6:	bf00      	nop

000d93c8 <__aeabi_dcmplt>:
   d93c8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d93cc:	f7ff ffea 	bl	d93a4 <__aeabi_cdcmpeq>
   d93d0:	bf34      	ite	cc
   d93d2:	2001      	movcc	r0, #1
   d93d4:	2000      	movcs	r0, #0
   d93d6:	f85d fb08 	ldr.w	pc, [sp], #8
   d93da:	bf00      	nop

000d93dc <__aeabi_dcmple>:
   d93dc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d93e0:	f7ff ffe0 	bl	d93a4 <__aeabi_cdcmpeq>
   d93e4:	bf94      	ite	ls
   d93e6:	2001      	movls	r0, #1
   d93e8:	2000      	movhi	r0, #0
   d93ea:	f85d fb08 	ldr.w	pc, [sp], #8
   d93ee:	bf00      	nop

000d93f0 <__aeabi_dcmpge>:
   d93f0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d93f4:	f7ff ffce 	bl	d9394 <__aeabi_cdrcmple>
   d93f8:	bf94      	ite	ls
   d93fa:	2001      	movls	r0, #1
   d93fc:	2000      	movhi	r0, #0
   d93fe:	f85d fb08 	ldr.w	pc, [sp], #8
   d9402:	bf00      	nop

000d9404 <__aeabi_dcmpgt>:
   d9404:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9408:	f7ff ffc4 	bl	d9394 <__aeabi_cdrcmple>
   d940c:	bf34      	ite	cc
   d940e:	2001      	movcc	r0, #1
   d9410:	2000      	movcs	r0, #0
   d9412:	f85d fb08 	ldr.w	pc, [sp], #8
   d9416:	bf00      	nop

000d9418 <__aeabi_d2uiz>:
   d9418:	004a      	lsls	r2, r1, #1
   d941a:	d211      	bcs.n	d9440 <__aeabi_d2uiz+0x28>
   d941c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9420:	d211      	bcs.n	d9446 <__aeabi_d2uiz+0x2e>
   d9422:	d50d      	bpl.n	d9440 <__aeabi_d2uiz+0x28>
   d9424:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9428:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d942c:	d40e      	bmi.n	d944c <__aeabi_d2uiz+0x34>
   d942e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9432:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9436:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d943a:	fa23 f002 	lsr.w	r0, r3, r2
   d943e:	4770      	bx	lr
   d9440:	f04f 0000 	mov.w	r0, #0
   d9444:	4770      	bx	lr
   d9446:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d944a:	d102      	bne.n	d9452 <__aeabi_d2uiz+0x3a>
   d944c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   d9450:	4770      	bx	lr
   d9452:	f04f 0000 	mov.w	r0, #0
   d9456:	4770      	bx	lr

000d9458 <__aeabi_uldivmod>:
   d9458:	b953      	cbnz	r3, d9470 <__aeabi_uldivmod+0x18>
   d945a:	b94a      	cbnz	r2, d9470 <__aeabi_uldivmod+0x18>
   d945c:	2900      	cmp	r1, #0
   d945e:	bf08      	it	eq
   d9460:	2800      	cmpeq	r0, #0
   d9462:	bf1c      	itt	ne
   d9464:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
   d9468:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   d946c:	f000 b97e 	b.w	d976c <__aeabi_idiv0>
   d9470:	f1ad 0c08 	sub.w	ip, sp, #8
   d9474:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d9478:	f000 f806 	bl	d9488 <__udivmoddi4>
   d947c:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9480:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9484:	b004      	add	sp, #16
   d9486:	4770      	bx	lr

000d9488 <__udivmoddi4>:
   d9488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d948c:	468c      	mov	ip, r1
   d948e:	460e      	mov	r6, r1
   d9490:	4604      	mov	r4, r0
   d9492:	9d08      	ldr	r5, [sp, #32]
   d9494:	2b00      	cmp	r3, #0
   d9496:	d150      	bne.n	d953a <__udivmoddi4+0xb2>
   d9498:	428a      	cmp	r2, r1
   d949a:	4617      	mov	r7, r2
   d949c:	d96c      	bls.n	d9578 <__udivmoddi4+0xf0>
   d949e:	fab2 fe82 	clz	lr, r2
   d94a2:	f1be 0f00 	cmp.w	lr, #0
   d94a6:	d00b      	beq.n	d94c0 <__udivmoddi4+0x38>
   d94a8:	f1ce 0420 	rsb	r4, lr, #32
   d94ac:	fa20 f404 	lsr.w	r4, r0, r4
   d94b0:	fa01 f60e 	lsl.w	r6, r1, lr
   d94b4:	ea44 0c06 	orr.w	ip, r4, r6
   d94b8:	fa02 f70e 	lsl.w	r7, r2, lr
   d94bc:	fa00 f40e 	lsl.w	r4, r0, lr
   d94c0:	ea4f 4917 	mov.w	r9, r7, lsr #16
   d94c4:	0c22      	lsrs	r2, r4, #16
   d94c6:	fbbc f0f9 	udiv	r0, ip, r9
   d94ca:	fa1f f887 	uxth.w	r8, r7
   d94ce:	fb09 c610 	mls	r6, r9, r0, ip
   d94d2:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d94d6:	fb00 f308 	mul.w	r3, r0, r8
   d94da:	42b3      	cmp	r3, r6
   d94dc:	d909      	bls.n	d94f2 <__udivmoddi4+0x6a>
   d94de:	19f6      	adds	r6, r6, r7
   d94e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d94e4:	f080 8122 	bcs.w	d972c <__udivmoddi4+0x2a4>
   d94e8:	42b3      	cmp	r3, r6
   d94ea:	f240 811f 	bls.w	d972c <__udivmoddi4+0x2a4>
   d94ee:	3802      	subs	r0, #2
   d94f0:	443e      	add	r6, r7
   d94f2:	1af6      	subs	r6, r6, r3
   d94f4:	b2a2      	uxth	r2, r4
   d94f6:	fbb6 f3f9 	udiv	r3, r6, r9
   d94fa:	fb09 6613 	mls	r6, r9, r3, r6
   d94fe:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d9502:	fb03 f808 	mul.w	r8, r3, r8
   d9506:	45a0      	cmp	r8, r4
   d9508:	d909      	bls.n	d951e <__udivmoddi4+0x96>
   d950a:	19e4      	adds	r4, r4, r7
   d950c:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d9510:	f080 810a 	bcs.w	d9728 <__udivmoddi4+0x2a0>
   d9514:	45a0      	cmp	r8, r4
   d9516:	f240 8107 	bls.w	d9728 <__udivmoddi4+0x2a0>
   d951a:	3b02      	subs	r3, #2
   d951c:	443c      	add	r4, r7
   d951e:	ebc8 0404 	rsb	r4, r8, r4
   d9522:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d9526:	2100      	movs	r1, #0
   d9528:	2d00      	cmp	r5, #0
   d952a:	d062      	beq.n	d95f2 <__udivmoddi4+0x16a>
   d952c:	fa24 f40e 	lsr.w	r4, r4, lr
   d9530:	2300      	movs	r3, #0
   d9532:	602c      	str	r4, [r5, #0]
   d9534:	606b      	str	r3, [r5, #4]
   d9536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d953a:	428b      	cmp	r3, r1
   d953c:	d907      	bls.n	d954e <__udivmoddi4+0xc6>
   d953e:	2d00      	cmp	r5, #0
   d9540:	d055      	beq.n	d95ee <__udivmoddi4+0x166>
   d9542:	2100      	movs	r1, #0
   d9544:	e885 0041 	stmia.w	r5, {r0, r6}
   d9548:	4608      	mov	r0, r1
   d954a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d954e:	fab3 f183 	clz	r1, r3
   d9552:	2900      	cmp	r1, #0
   d9554:	f040 8090 	bne.w	d9678 <__udivmoddi4+0x1f0>
   d9558:	42b3      	cmp	r3, r6
   d955a:	d302      	bcc.n	d9562 <__udivmoddi4+0xda>
   d955c:	4282      	cmp	r2, r0
   d955e:	f200 80f8 	bhi.w	d9752 <__udivmoddi4+0x2ca>
   d9562:	1a84      	subs	r4, r0, r2
   d9564:	eb66 0603 	sbc.w	r6, r6, r3
   d9568:	2001      	movs	r0, #1
   d956a:	46b4      	mov	ip, r6
   d956c:	2d00      	cmp	r5, #0
   d956e:	d040      	beq.n	d95f2 <__udivmoddi4+0x16a>
   d9570:	e885 1010 	stmia.w	r5, {r4, ip}
   d9574:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9578:	b912      	cbnz	r2, d9580 <__udivmoddi4+0xf8>
   d957a:	2701      	movs	r7, #1
   d957c:	fbb7 f7f2 	udiv	r7, r7, r2
   d9580:	fab7 fe87 	clz	lr, r7
   d9584:	f1be 0f00 	cmp.w	lr, #0
   d9588:	d135      	bne.n	d95f6 <__udivmoddi4+0x16e>
   d958a:	1bf3      	subs	r3, r6, r7
   d958c:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d9590:	fa1f fc87 	uxth.w	ip, r7
   d9594:	2101      	movs	r1, #1
   d9596:	fbb3 f0f8 	udiv	r0, r3, r8
   d959a:	0c22      	lsrs	r2, r4, #16
   d959c:	fb08 3610 	mls	r6, r8, r0, r3
   d95a0:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
   d95a4:	fb0c f300 	mul.w	r3, ip, r0
   d95a8:	42b3      	cmp	r3, r6
   d95aa:	d907      	bls.n	d95bc <__udivmoddi4+0x134>
   d95ac:	19f6      	adds	r6, r6, r7
   d95ae:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   d95b2:	d202      	bcs.n	d95ba <__udivmoddi4+0x132>
   d95b4:	42b3      	cmp	r3, r6
   d95b6:	f200 80ce 	bhi.w	d9756 <__udivmoddi4+0x2ce>
   d95ba:	4610      	mov	r0, r2
   d95bc:	1af6      	subs	r6, r6, r3
   d95be:	b2a2      	uxth	r2, r4
   d95c0:	fbb6 f3f8 	udiv	r3, r6, r8
   d95c4:	fb08 6613 	mls	r6, r8, r3, r6
   d95c8:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
   d95cc:	fb0c fc03 	mul.w	ip, ip, r3
   d95d0:	45a4      	cmp	ip, r4
   d95d2:	d907      	bls.n	d95e4 <__udivmoddi4+0x15c>
   d95d4:	19e4      	adds	r4, r4, r7
   d95d6:	f103 32ff 	add.w	r2, r3, #4294967295	; 0xffffffff
   d95da:	d202      	bcs.n	d95e2 <__udivmoddi4+0x15a>
   d95dc:	45a4      	cmp	ip, r4
   d95de:	f200 80b5 	bhi.w	d974c <__udivmoddi4+0x2c4>
   d95e2:	4613      	mov	r3, r2
   d95e4:	ebcc 0404 	rsb	r4, ip, r4
   d95e8:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
   d95ec:	e79c      	b.n	d9528 <__udivmoddi4+0xa0>
   d95ee:	4629      	mov	r1, r5
   d95f0:	4628      	mov	r0, r5
   d95f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d95f6:	f1ce 0120 	rsb	r1, lr, #32
   d95fa:	fa06 f30e 	lsl.w	r3, r6, lr
   d95fe:	fa07 f70e 	lsl.w	r7, r7, lr
   d9602:	fa20 f901 	lsr.w	r9, r0, r1
   d9606:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d960a:	40ce      	lsrs	r6, r1
   d960c:	ea49 0903 	orr.w	r9, r9, r3
   d9610:	fbb6 faf8 	udiv	sl, r6, r8
   d9614:	ea4f 4419 	mov.w	r4, r9, lsr #16
   d9618:	fb08 661a 	mls	r6, r8, sl, r6
   d961c:	fa1f fc87 	uxth.w	ip, r7
   d9620:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
   d9624:	fb0a f20c 	mul.w	r2, sl, ip
   d9628:	429a      	cmp	r2, r3
   d962a:	fa00 f40e 	lsl.w	r4, r0, lr
   d962e:	d90a      	bls.n	d9646 <__udivmoddi4+0x1be>
   d9630:	19db      	adds	r3, r3, r7
   d9632:	f10a 31ff 	add.w	r1, sl, #4294967295	; 0xffffffff
   d9636:	f080 8087 	bcs.w	d9748 <__udivmoddi4+0x2c0>
   d963a:	429a      	cmp	r2, r3
   d963c:	f240 8084 	bls.w	d9748 <__udivmoddi4+0x2c0>
   d9640:	f1aa 0a02 	sub.w	sl, sl, #2
   d9644:	443b      	add	r3, r7
   d9646:	1a9b      	subs	r3, r3, r2
   d9648:	fa1f f989 	uxth.w	r9, r9
   d964c:	fbb3 f1f8 	udiv	r1, r3, r8
   d9650:	fb08 3311 	mls	r3, r8, r1, r3
   d9654:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
   d9658:	fb01 f60c 	mul.w	r6, r1, ip
   d965c:	429e      	cmp	r6, r3
   d965e:	d907      	bls.n	d9670 <__udivmoddi4+0x1e8>
   d9660:	19db      	adds	r3, r3, r7
   d9662:	f101 32ff 	add.w	r2, r1, #4294967295	; 0xffffffff
   d9666:	d26b      	bcs.n	d9740 <__udivmoddi4+0x2b8>
   d9668:	429e      	cmp	r6, r3
   d966a:	d969      	bls.n	d9740 <__udivmoddi4+0x2b8>
   d966c:	3902      	subs	r1, #2
   d966e:	443b      	add	r3, r7
   d9670:	1b9b      	subs	r3, r3, r6
   d9672:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
   d9676:	e78e      	b.n	d9596 <__udivmoddi4+0x10e>
   d9678:	f1c1 0e20 	rsb	lr, r1, #32
   d967c:	fa22 f40e 	lsr.w	r4, r2, lr
   d9680:	408b      	lsls	r3, r1
   d9682:	4323      	orrs	r3, r4
   d9684:	fa20 f70e 	lsr.w	r7, r0, lr
   d9688:	fa06 f401 	lsl.w	r4, r6, r1
   d968c:	ea4f 4c13 	mov.w	ip, r3, lsr #16
   d9690:	fa26 f60e 	lsr.w	r6, r6, lr
   d9694:	433c      	orrs	r4, r7
   d9696:	fbb6 f9fc 	udiv	r9, r6, ip
   d969a:	0c27      	lsrs	r7, r4, #16
   d969c:	fb0c 6619 	mls	r6, ip, r9, r6
   d96a0:	fa1f f883 	uxth.w	r8, r3
   d96a4:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   d96a8:	fb09 f708 	mul.w	r7, r9, r8
   d96ac:	42b7      	cmp	r7, r6
   d96ae:	fa02 f201 	lsl.w	r2, r2, r1
   d96b2:	fa00 fa01 	lsl.w	sl, r0, r1
   d96b6:	d908      	bls.n	d96ca <__udivmoddi4+0x242>
   d96b8:	18f6      	adds	r6, r6, r3
   d96ba:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
   d96be:	d241      	bcs.n	d9744 <__udivmoddi4+0x2bc>
   d96c0:	42b7      	cmp	r7, r6
   d96c2:	d93f      	bls.n	d9744 <__udivmoddi4+0x2bc>
   d96c4:	f1a9 0902 	sub.w	r9, r9, #2
   d96c8:	441e      	add	r6, r3
   d96ca:	1bf6      	subs	r6, r6, r7
   d96cc:	b2a0      	uxth	r0, r4
   d96ce:	fbb6 f4fc 	udiv	r4, r6, ip
   d96d2:	fb0c 6614 	mls	r6, ip, r4, r6
   d96d6:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
   d96da:	fb04 f808 	mul.w	r8, r4, r8
   d96de:	45b8      	cmp	r8, r7
   d96e0:	d907      	bls.n	d96f2 <__udivmoddi4+0x26a>
   d96e2:	18ff      	adds	r7, r7, r3
   d96e4:	f104 30ff 	add.w	r0, r4, #4294967295	; 0xffffffff
   d96e8:	d228      	bcs.n	d973c <__udivmoddi4+0x2b4>
   d96ea:	45b8      	cmp	r8, r7
   d96ec:	d926      	bls.n	d973c <__udivmoddi4+0x2b4>
   d96ee:	3c02      	subs	r4, #2
   d96f0:	441f      	add	r7, r3
   d96f2:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
   d96f6:	ebc8 0707 	rsb	r7, r8, r7
   d96fa:	fba0 8902 	umull	r8, r9, r0, r2
   d96fe:	454f      	cmp	r7, r9
   d9700:	4644      	mov	r4, r8
   d9702:	464e      	mov	r6, r9
   d9704:	d314      	bcc.n	d9730 <__udivmoddi4+0x2a8>
   d9706:	d029      	beq.n	d975c <__udivmoddi4+0x2d4>
   d9708:	b365      	cbz	r5, d9764 <__udivmoddi4+0x2dc>
   d970a:	ebba 0304 	subs.w	r3, sl, r4
   d970e:	eb67 0706 	sbc.w	r7, r7, r6
   d9712:	fa07 fe0e 	lsl.w	lr, r7, lr
   d9716:	40cb      	lsrs	r3, r1
   d9718:	40cf      	lsrs	r7, r1
   d971a:	ea4e 0303 	orr.w	r3, lr, r3
   d971e:	e885 0088 	stmia.w	r5, {r3, r7}
   d9722:	2100      	movs	r1, #0
   d9724:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9728:	4613      	mov	r3, r2
   d972a:	e6f8      	b.n	d951e <__udivmoddi4+0x96>
   d972c:	4610      	mov	r0, r2
   d972e:	e6e0      	b.n	d94f2 <__udivmoddi4+0x6a>
   d9730:	ebb8 0402 	subs.w	r4, r8, r2
   d9734:	eb69 0603 	sbc.w	r6, r9, r3
   d9738:	3801      	subs	r0, #1
   d973a:	e7e5      	b.n	d9708 <__udivmoddi4+0x280>
   d973c:	4604      	mov	r4, r0
   d973e:	e7d8      	b.n	d96f2 <__udivmoddi4+0x26a>
   d9740:	4611      	mov	r1, r2
   d9742:	e795      	b.n	d9670 <__udivmoddi4+0x1e8>
   d9744:	4681      	mov	r9, r0
   d9746:	e7c0      	b.n	d96ca <__udivmoddi4+0x242>
   d9748:	468a      	mov	sl, r1
   d974a:	e77c      	b.n	d9646 <__udivmoddi4+0x1be>
   d974c:	3b02      	subs	r3, #2
   d974e:	443c      	add	r4, r7
   d9750:	e748      	b.n	d95e4 <__udivmoddi4+0x15c>
   d9752:	4608      	mov	r0, r1
   d9754:	e70a      	b.n	d956c <__udivmoddi4+0xe4>
   d9756:	3802      	subs	r0, #2
   d9758:	443e      	add	r6, r7
   d975a:	e72f      	b.n	d95bc <__udivmoddi4+0x134>
   d975c:	45c2      	cmp	sl, r8
   d975e:	d3e7      	bcc.n	d9730 <__udivmoddi4+0x2a8>
   d9760:	463e      	mov	r6, r7
   d9762:	e7d1      	b.n	d9708 <__udivmoddi4+0x280>
   d9764:	4629      	mov	r1, r5
   d9766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d976a:	bf00      	nop

000d976c <__aeabi_idiv0>:
   d976c:	4770      	bx	lr
   d976e:	bf00      	nop

000d9770 <__cxa_atexit>:
   d9770:	b510      	push	{r4, lr}
   d9772:	4c05      	ldr	r4, [pc, #20]	; (d9788 <__cxa_atexit+0x18>)
   d9774:	4613      	mov	r3, r2
   d9776:	b12c      	cbz	r4, d9784 <__cxa_atexit+0x14>
   d9778:	460a      	mov	r2, r1
   d977a:	4601      	mov	r1, r0
   d977c:	2002      	movs	r0, #2
   d977e:	f3af 8000 	nop.w
   d9782:	bd10      	pop	{r4, pc}
   d9784:	4620      	mov	r0, r4
   d9786:	bd10      	pop	{r4, pc}
   d9788:	00000000 	.word	0x00000000

000d978c <memcmp>:
   d978c:	b510      	push	{r4, lr}
   d978e:	3901      	subs	r1, #1
   d9790:	4402      	add	r2, r0
   d9792:	4290      	cmp	r0, r2
   d9794:	d007      	beq.n	d97a6 <memcmp+0x1a>
   d9796:	f810 3b01 	ldrb.w	r3, [r0], #1
   d979a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d979e:	42a3      	cmp	r3, r4
   d97a0:	d0f7      	beq.n	d9792 <memcmp+0x6>
   d97a2:	1b18      	subs	r0, r3, r4
   d97a4:	bd10      	pop	{r4, pc}
   d97a6:	2000      	movs	r0, #0
   d97a8:	bd10      	pop	{r4, pc}

000d97aa <memcpy>:
   d97aa:	b510      	push	{r4, lr}
   d97ac:	1e43      	subs	r3, r0, #1
   d97ae:	440a      	add	r2, r1
   d97b0:	4291      	cmp	r1, r2
   d97b2:	d004      	beq.n	d97be <memcpy+0x14>
   d97b4:	f811 4b01 	ldrb.w	r4, [r1], #1
   d97b8:	f803 4f01 	strb.w	r4, [r3, #1]!
   d97bc:	e7f8      	b.n	d97b0 <memcpy+0x6>
   d97be:	bd10      	pop	{r4, pc}

000d97c0 <memset>:
   d97c0:	4402      	add	r2, r0
   d97c2:	4603      	mov	r3, r0
   d97c4:	4293      	cmp	r3, r2
   d97c6:	d002      	beq.n	d97ce <memset+0xe>
   d97c8:	f803 1b01 	strb.w	r1, [r3], #1
   d97cc:	e7fa      	b.n	d97c4 <memset+0x4>
   d97ce:	4770      	bx	lr

000d97d0 <srand>:
   d97d0:	b538      	push	{r3, r4, r5, lr}
   d97d2:	4b12      	ldr	r3, [pc, #72]	; (d981c <srand+0x4c>)
   d97d4:	681c      	ldr	r4, [r3, #0]
   d97d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d97d8:	4605      	mov	r5, r0
   d97da:	b9d3      	cbnz	r3, d9812 <srand+0x42>
   d97dc:	2018      	movs	r0, #24
   d97de:	f7fc ff43 	bl	d6668 <malloc>
   d97e2:	f243 330e 	movw	r3, #13070	; 0x330e
   d97e6:	63a0      	str	r0, [r4, #56]	; 0x38
   d97e8:	8003      	strh	r3, [r0, #0]
   d97ea:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d97ee:	8043      	strh	r3, [r0, #2]
   d97f0:	f241 2334 	movw	r3, #4660	; 0x1234
   d97f4:	8083      	strh	r3, [r0, #4]
   d97f6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d97fa:	80c3      	strh	r3, [r0, #6]
   d97fc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d9800:	8103      	strh	r3, [r0, #8]
   d9802:	2305      	movs	r3, #5
   d9804:	8143      	strh	r3, [r0, #10]
   d9806:	230b      	movs	r3, #11
   d9808:	8183      	strh	r3, [r0, #12]
   d980a:	2201      	movs	r2, #1
   d980c:	2300      	movs	r3, #0
   d980e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d9812:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d9814:	2200      	movs	r2, #0
   d9816:	611d      	str	r5, [r3, #16]
   d9818:	615a      	str	r2, [r3, #20]
   d981a:	bd38      	pop	{r3, r4, r5, pc}
   d981c:	2003dcd4 	.word	0x2003dcd4

000d9820 <strcat>:
   d9820:	b510      	push	{r4, lr}
   d9822:	4602      	mov	r2, r0
   d9824:	4613      	mov	r3, r2
   d9826:	3201      	adds	r2, #1
   d9828:	781c      	ldrb	r4, [r3, #0]
   d982a:	2c00      	cmp	r4, #0
   d982c:	d1fa      	bne.n	d9824 <strcat+0x4>
   d982e:	3b01      	subs	r3, #1
   d9830:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9834:	f803 2f01 	strb.w	r2, [r3, #1]!
   d9838:	2a00      	cmp	r2, #0
   d983a:	d1f9      	bne.n	d9830 <strcat+0x10>
   d983c:	bd10      	pop	{r4, pc}

000d983e <strcmp>:
   d983e:	f810 2b01 	ldrb.w	r2, [r0], #1
   d9842:	f811 3b01 	ldrb.w	r3, [r1], #1
   d9846:	2a01      	cmp	r2, #1
   d9848:	bf28      	it	cs
   d984a:	429a      	cmpcs	r2, r3
   d984c:	d0f7      	beq.n	d983e <strcmp>
   d984e:	1ad0      	subs	r0, r2, r3
   d9850:	4770      	bx	lr

000d9852 <strcpy>:
   d9852:	4603      	mov	r3, r0
   d9854:	f811 2b01 	ldrb.w	r2, [r1], #1
   d9858:	f803 2b01 	strb.w	r2, [r3], #1
   d985c:	2a00      	cmp	r2, #0
   d985e:	d1f9      	bne.n	d9854 <strcpy+0x2>
   d9860:	4770      	bx	lr
	...

000d9864 <strdup>:
   d9864:	4b02      	ldr	r3, [pc, #8]	; (d9870 <strdup+0xc>)
   d9866:	4601      	mov	r1, r0
   d9868:	6818      	ldr	r0, [r3, #0]
   d986a:	f000 b803 	b.w	d9874 <_strdup_r>
   d986e:	bf00      	nop
   d9870:	2003dcd4 	.word	0x2003dcd4

000d9874 <_strdup_r>:
   d9874:	b570      	push	{r4, r5, r6, lr}
   d9876:	4606      	mov	r6, r0
   d9878:	4608      	mov	r0, r1
   d987a:	460c      	mov	r4, r1
   d987c:	f000 f80d 	bl	d989a <strlen>
   d9880:	1c45      	adds	r5, r0, #1
   d9882:	4629      	mov	r1, r5
   d9884:	4630      	mov	r0, r6
   d9886:	f7fc ff17 	bl	d66b8 <_malloc_r>
   d988a:	4606      	mov	r6, r0
   d988c:	b118      	cbz	r0, d9896 <_strdup_r+0x22>
   d988e:	462a      	mov	r2, r5
   d9890:	4621      	mov	r1, r4
   d9892:	f7ff ff8a 	bl	d97aa <memcpy>
   d9896:	4630      	mov	r0, r6
   d9898:	bd70      	pop	{r4, r5, r6, pc}

000d989a <strlen>:
   d989a:	4603      	mov	r3, r0
   d989c:	f813 2b01 	ldrb.w	r2, [r3], #1
   d98a0:	2a00      	cmp	r2, #0
   d98a2:	d1fb      	bne.n	d989c <strlen+0x2>
   d98a4:	1a18      	subs	r0, r3, r0
   d98a6:	3801      	subs	r0, #1
   d98a8:	4770      	bx	lr

000d98aa <strncmp>:
   d98aa:	b530      	push	{r4, r5, lr}
   d98ac:	b182      	cbz	r2, d98d0 <strncmp+0x26>
   d98ae:	1e45      	subs	r5, r0, #1
   d98b0:	3901      	subs	r1, #1
   d98b2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
   d98b6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   d98ba:	42a3      	cmp	r3, r4
   d98bc:	d106      	bne.n	d98cc <strncmp+0x22>
   d98be:	43ec      	mvns	r4, r5
   d98c0:	4414      	add	r4, r2
   d98c2:	42e0      	cmn	r0, r4
   d98c4:	d001      	beq.n	d98ca <strncmp+0x20>
   d98c6:	2b00      	cmp	r3, #0
   d98c8:	d1f3      	bne.n	d98b2 <strncmp+0x8>
   d98ca:	461c      	mov	r4, r3
   d98cc:	1b18      	subs	r0, r3, r4
   d98ce:	bd30      	pop	{r4, r5, pc}
   d98d0:	4610      	mov	r0, r2
   d98d2:	bd30      	pop	{r4, r5, pc}

000d98d4 <strncpy>:
   d98d4:	b510      	push	{r4, lr}
   d98d6:	4603      	mov	r3, r0
   d98d8:	b142      	cbz	r2, d98ec <strncpy+0x18>
   d98da:	f811 4b01 	ldrb.w	r4, [r1], #1
   d98de:	f803 4b01 	strb.w	r4, [r3], #1
   d98e2:	3a01      	subs	r2, #1
   d98e4:	2c00      	cmp	r4, #0
   d98e6:	d1f7      	bne.n	d98d8 <strncpy+0x4>
   d98e8:	441a      	add	r2, r3
   d98ea:	e000      	b.n	d98ee <strncpy+0x1a>
   d98ec:	bd10      	pop	{r4, pc}
   d98ee:	4293      	cmp	r3, r2
   d98f0:	d002      	beq.n	d98f8 <strncpy+0x24>
   d98f2:	f803 4b01 	strb.w	r4, [r3], #1
   d98f6:	e7fa      	b.n	d98ee <strncpy+0x1a>
   d98f8:	bd10      	pop	{r4, pc}

000d98fa <strnlen>:
   d98fa:	b510      	push	{r4, lr}
   d98fc:	4603      	mov	r3, r0
   d98fe:	4401      	add	r1, r0
   d9900:	428b      	cmp	r3, r1
   d9902:	d004      	beq.n	d990e <strnlen+0x14>
   d9904:	781a      	ldrb	r2, [r3, #0]
   d9906:	1c5c      	adds	r4, r3, #1
   d9908:	b10a      	cbz	r2, d990e <strnlen+0x14>
   d990a:	4623      	mov	r3, r4
   d990c:	e7f8      	b.n	d9900 <strnlen+0x6>
   d990e:	1a18      	subs	r0, r3, r0
   d9910:	bd10      	pop	{r4, pc}

000d9912 <link_code_end>:
	...

000d9914 <dynalib_user>:
   d9914:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d9924:	0000 0000 7525 252e 2e75 7525 252e 0075     ....%u.%u.%u.%u.
   d9934:	6170 7472 6369 656c 642f 7665 6369 2f65     particle/device/
   d9944:	616e 656d 5000 7261 6974 6c63 4465 7665     name.ParticleDev
   d9954:	6369 0065 3931 2e32 3631 2e38 2e31 3239     ice.192.168.1.92
   d9964:	5200 7365 6f70 736e 5465 706f 6369 4300     .ResponseTopic.C
   d9974:	6d6f 616d 646e 6f54 6970 5f63 2200 5c22     ommandTopic_.""\
   d9984:	625c 6608 6e0c 720a 740d 0009 756e 6c6c     \b.f.n.r.t..null
   d9994:	6500 002d 7274 6575 6600 6c61 6573 6300     .e-.true.false.c
   d99a4:	646d 4c00 6769 7468 6553 736e 726f 6d00     md.LightSensor.m
   d99b4:	7465 6f68 0064 6567 0074 6f52 6174 7972     ethod.get.Rotary
   d99c4:	6e41 6c67 5365 6e65 6f73 0072 7542 7474     AngleSensor.Butt
   d99d4:	6e6f 4d00 7365 4468 7461 5461 706f 6369     on.MeshDataTopic
   d99e4:	4c00 6465 7500 6975 0064 6573 0074 0400     .Led.uuid.set...
   d99f4:	514d 5454 0004 4d06 4951 6473 0370 0000     MQTT...MQIsdp...

000d9a04 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   d9a0c:	66ff 000d 6705 000d 672d 000d 6711 000d     .f...g..-g...g..
   d9a1c:	6701 000d                                   .g..

000d9a20 <_ZTVN5spark13EthernetClassE>:
	...
   d9a28:	6ccf 000d 6cc5 000d 6cbb 000d 6cb1 000d     .l...l...l...l..
   d9a38:	6ca5 000d 6c99 000d 6c8d 000d 6c85 000d     .l...l...l...l..
   d9a48:	6c7b 000d 6c71 000d 74d9 000d               {l..ql...t..

000d9a54 <_ZTV7TwoWire>:
	...
   d9a5c:	6ced 000d 6d37 000d 6d0f 000d 6cef 000d     .l..7m...m...l..
   d9a6c:	6d17 000d 6d1f 000d 6d27 000d 6d2f 000d     .m...m..'m../m..

000d9a7c <_ZTV9IPAddress>:
	...
   d9a84:	6d7f 000d 6d71 000d 6d73 000d 0066 6e6c     .m..qm..sm..f.ln
   d9a94:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
   d9aa4:	0a0d 2500 3130 7530 0020 205d 2c00 0020     ...%010u .] ., .
   d9ab4:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
   d9ac4:	6925 6400 7465 6961 736c 3d20 0020 6162     %i.details = .ba
   d9ad4:	6475 5300 7265 6169 006c 6553 6972 6c61     ud.Serial.Serial
   d9ae4:	0031 7974 6570 7000 7261 6d61 6800 646e     1.type.param.hnd
   d9af4:	7300 7274 006d 6966 746c 6c00 6c76 6100     .strm.filt.lvl.a
   d9b04:	6464 6148 646e 656c 0072 6572 6f6d 6576     ddHandler.remove
   d9b14:	6148 646e 656c 0072 6e65 6d75 6148 646e     Handler.enumHand
   d9b24:	656c 7372 4a00 4f53 534e 7274 6165 4c6d     lers.JSONStreamL
   d9b34:	676f 6148 646e 656c 0072 7061 0070 6f6e     ogHandler.app.no
   d9b44:	656e 7400 6172 6563 6900 666e 006f 6177     ne.trace.info.wa
   d9b54:	6e72 6500 7272 726f 7000 6e61 6369 6100     rn.error.panic.a
   d9b64:	6c6c 0000                                   ll..

000d9b68 <_ZTVN5spark9MeshClassE>:
	...
   d9b70:	6f39 000d 6f2f 000d 6f25 000d 6f1b 000d     9o../o..%o...o..
   d9b80:	6f0f 000d 6f03 000d 6ef7 000d 6eef 000d     .o...o...n...n..
   d9b90:	6ee5 000d 6edb 000d 74d9 000d 6666 3330     .n...n...t..ff03
   d9ba0:	3a3a 3a31 3031 3130 7400 3168 6d00 7365     ::1:1001.th1.mes
   d9bb0:	7068 6275 7700 7269 6e69 0067 6170 7372     hpub.wiring.pars
   d9bc0:	2065 6170 6b63 7465 2520 0064               e packet %d.

000d9bcc <_ZTVN5spark12NetworkClassE>:
	...
   d9bd4:	7471 000d 747b 000d 7485 000d 748f 000d     qt..{t...t...t..
   d9be4:	7499 000d 74a5 000d 74b1 000d 74bd 000d     .t...t...t...t..
   d9bf4:	74c5 000d 74cf 000d 74d9 000d               .t...t...t..

000d9c00 <_ZTV8SPIClass>:
	...
   d9c08:	7691 000d 7693 000d                         .v...v..

000d9c10 <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
   d9c18:	7875 000d 787b 000d 7d63 000d 7887 000d     ux..{x..c}...x..
   d9c28:	7877 000d                                   wx..

000d9c2c <_ZTV9TCPClient>:
	...
   d9c34:	5941 000d 5975 000d 77ed 000d 7807 000d     AY..uY...w...x..
   d9c44:	7c09 000d 7a4b 000d 7a1d 000d 7831 000d     .|..Kz...z..1x..
   d9c54:	7ae1 000d 788d 000d 7a7f 000d 7bdb 000d     .z...x...z...{..
   d9c64:	7833 000d 786b 000d 7819 000d 797d 000d     3x..kx...x..}y..
   d9c74:	79fd 000d 6572 7663 6520 7272 726f 3d20     .y..recv error =
   d9c84:	2520 0064 005a 2b25 3330 3a64 3025 7532      %d.Z.%+03d:%02u
   d9c94:	2500 2d59 6d25 252d 5464 4825 253a 3a4d     .%Y-%m-%dT%H:%M:
   d9ca4:	5325 7a25 6100 6373 6974 656d 0000 0000     %S%z.asctime....

000d9cb4 <_ZTV3UDP>:
	...
   d9cbc:	83d1 000d 83f5 000d 7db1 000d 7edb 000d     .........}...~..
   d9ccc:	7da9 000d 7dc7 000d 7de5 000d 7dff 000d     .}...}...}...}..
   d9cdc:	7e23 000d 7ebf 000d 81c1 000d 7f61 000d     #~...~......a...
   d9cec:	80e1 000d 7d91 000d 8367 000d 8065 000d     .....}..g...e...
   d9cfc:	7f99 000d 8395 000d 7f05 000d 7d9f 000d     .............}..
   d9d0c:	7f41 000d 7da5 000d 7e01 000d fff0 ffff     A....}...~......
   d9d1c:	0000 0000 7e1b 000d                         .....~..

000d9d24 <_ZTV11USARTSerial>:
	...
   d9d2c:	841f 000d 8443 000d 844f 000d 75b9 000d     ....C...O....u..
   d9d3c:	842b 000d 8437 000d 8431 000d 843d 000d     +...7...1...=...
   d9d4c:	8421 000d 8425 000d                         !...%...

000d9d54 <_ZTV9USBSerial>:
	...
   d9d5c:	852d 000d 8571 000d 854b 000d 75b9 000d     -...q...K....u..
   d9d6c:	8545 000d 852f 000d 8537 000d 856b 000d     E.../...7...k...
   d9d7c:	853f 000d 8529 000d                         ?...)...

000d9d84 <_ZTVN5spark9WiFiClassE>:
	...
   d9d8c:	865f 000d 8655 000d 864b 000d 8601 000d     _...U...K.......
   d9d9c:	863f 000d 8633 000d 8627 000d 861f 000d     ?...3...'.......
   d9dac:	8615 000d 860b 000d 74d9 000d               .........t..

000d9db8 <_ZSt7nothrow>:
   d9db8:	0000 0000                                   ....

000d9dbc <__sf_fake_stdin>:
	...

000d9ddc <__sf_fake_stdout>:
	...

000d9dfc <__sf_fake_stderr>:
	...
   d9e1c:	0043                                        C.

000d9e1e <link_const_variable_data_end>:
	...

000d9e20 <link_constructors_location>:
   d9e20:	000d5931 	.word	0x000d5931
   d9e24:	000d6129 	.word	0x000d6129
   d9e28:	000d6cd9 	.word	0x000d6cd9
   d9e2c:	000d6e9d 	.word	0x000d6e9d
   d9e30:	000d7425 	.word	0x000d7425
   d9e34:	000d75a5 	.word	0x000d75a5
   d9e38:	000d7675 	.word	0x000d7675
   d9e3c:	000d77d5 	.word	0x000d77d5
   d9e40:	000d7d7d 	.word	0x000d7d7d
   d9e44:	000d8669 	.word	0x000d8669
   d9e48:	000d885d 	.word	0x000d885d
   d9e4c:	000d88e5 	.word	0x000d88e5
   d9e50:	000d89a9 	.word	0x000d89a9
   d9e54:	000d8a2d 	.word	0x000d8a2d
   d9e58:	000d8ab1 	.word	0x000d8ab1

000d9e5c <link_constructors_end>:
   d9e5c:	00000000 	.word	0x00000000
