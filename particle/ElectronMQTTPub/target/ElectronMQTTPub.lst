
/Users/gallardo/TIBProjects/iot/particle/projects/ElectronMQTTPub/target/ElectronMQTTPub.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004e48  08080018  08080018  00010018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .ARM.exidx    00000008  08084e60  08084e60  00014e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .backup       00000004  40024000  08084e68  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         000000f8  20000400  08084e6c  00030400  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          000009dc  200004f8  200004f8  000404f8  2**3
                  ALLOC
  6 .module_info_suffix 00000028  08084f64  08084f64  00034f64  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  08084f8c  08084f8c  00034f8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000b1c49  00000000  00000000  00034f90  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 0000f892  00000000  00000000  000e6bd9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00019b2d  00000000  00000000  000f646b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 000022d0  00000000  00000000  0010ff98  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00003d18  00000000  00000000  00112268  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00025781  00000000  00000000  00115f80  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002493b  00000000  00000000  0013b701  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000b3314  00000000  00000000  0016003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c4e8  00000000  00000000  00213350  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	04 4a 08 08                                         .J..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f004 fc55 	bl	80848dc <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f004 fc5a 	bl	80848f2 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08084e6c 	.word	0x08084e6c
 808004c:	200004f8 	.word	0x200004f8
 8080050:	200004f8 	.word	0x200004f8
 8080054:	20000ed4 	.word	0x20000ed4
 8080058:	20000ed4 	.word	0x20000ed4

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f003 fbd3 	bl	8083808 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08084e1c 	.word	0x08084e1c
 8080084:	08084e54 	.word	0x08084e54

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 b90a 	b.w	80802a0 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f001 fa4d 	bl	808152c <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f003 bb79 	b.w	808378c <_post_loop>

0808009a <_Znwj>:
 808009a:	f002 ba0b 	b.w	80824b4 <malloc>

0808009e <_Znaj>:
	return malloc(size);
}

void *operator new[](size_t size)
{
	return malloc(size);
 808009e:	f002 ba09 	b.w	80824b4 <malloc>

080800a2 <_ZdlPv>:
 80800a2:	f002 ba0f 	b.w	80824c4 <free>

080800a6 <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
 80800a6:	f002 ba0d 	b.w	80824c4 <free>

080800aa <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800aa:	7800      	ldrb	r0, [r0, #0]
 80800ac:	fab0 f080 	clz	r0, r0
 80800b0:	0940      	lsrs	r0, r0, #5
 80800b2:	4770      	bx	lr

080800b4 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800b4:	2301      	movs	r3, #1
 80800b6:	7003      	strb	r3, [r0, #0]
 80800b8:	4770      	bx	lr

080800ba <_ZNK21ArduinoJson6110_1100020DeserializationError14safeBoolHelperEv>:
namespace ARDUINOJSON_NAMESPACE {

class DeserializationError {
  // safe bool idiom
  typedef void (DeserializationError::*bool_type)() const;
  void safeBoolHelper() const {}
 80800ba:	4770      	bx	lr

080800bc <_Z7handlerPKcS0_>:
	PublishResponse();
}

// -------------------------------------------- Get ClientName
// triggered by the Particle.subscribe and Particle.publish run in setup()
void handler(const char *topic, const char *data) {
 80800bc:	b510      	push	{r4, lr}
    strncpy(deviceName, data, strlen(data));
 80800be:	4608      	mov	r0, r1
	PublishResponse();
}

// -------------------------------------------- Get ClientName
// triggered by the Particle.subscribe and Particle.publish run in setup()
void handler(const char *topic, const char *data) {
 80800c0:	460c      	mov	r4, r1
    strncpy(deviceName, data, strlen(data));
 80800c2:	f004 fc84 	bl	80849ce <strlen>
 80800c6:	4621      	mov	r1, r4
 80800c8:	4602      	mov	r2, r0
 80800ca:	4803      	ldr	r0, [pc, #12]	; (80800d8 <_Z7handlerPKcS0_+0x1c>)
 80800cc:	f004 fc87 	bl	80849de <strncpy>
    
    nameReceived = true;
 80800d0:	4b02      	ldr	r3, [pc, #8]	; (80800dc <_Z7handlerPKcS0_+0x20>)
 80800d2:	2201      	movs	r2, #1
 80800d4:	701a      	strb	r2, [r3, #0]
 80800d6:	bd10      	pop	{r4, pc}
 80800d8:	20000574 	.word	0x20000574
 80800dc:	200005f8 	.word	0x200005f8

080800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>:
    return _flags & VALUE_MASK;
  }

  void setType(uint8_t t) {
    _flags &= KEY_IS_OWNED;
    _flags |= t;
 80800e0:	7803      	ldrb	r3, [r0, #0]
 80800e2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80800e6:	4319      	orrs	r1, r3
 80800e8:	7001      	strb	r1, [r0, #0]
 80800ea:	4770      	bx	lr

080800ec <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13>:
    s2 = s2->next();
  }
}

template <typename TAdaptedString>
inline VariantSlot* CollectionData::getSlot(TAdaptedString key) const {
 80800ec:	b538      	push	{r3, r4, r5, lr}
 80800ee:	4604      	mov	r4, r0
 80800f0:	460d      	mov	r5, r1
  VariantSlot* slot = _head;
  while (slot) {
 80800f2:	b18c      	cbz	r4, 8080118 <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x2c>
 80800f4:	68e1      	ldr	r1, [r4, #12]
#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline int8_t safe_strcmp(const char* a, const char* b) {
  if (a == b) return 0;
 80800f6:	42a9      	cmp	r1, r5
 80800f8:	d00e      	beq.n	8080118 <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x2c>
  if (!a) return -1;
 80800fa:	b135      	cbz	r5, 808010a <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x1e>
  if (!b) return 1;
 80800fc:	b129      	cbz	r1, 808010a <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x1e>
  return static_cast<int8_t>(strcmp(a, b));
 80800fe:	4628      	mov	r0, r5
 8080100:	f004 fc37 	bl	8084972 <strcmp>
    if (key.equals(slot->key())) break;
 8080104:	f010 0fff 	tst.w	r0, #255	; 0xff
 8080108:	d006      	beq.n	8080118 <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x2c>
  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
    return _next ? this + _next : 0;
 808010a:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 808010e:	b113      	cbz	r3, 8080116 <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x2a>
 8080110:	eb04 1403 	add.w	r4, r4, r3, lsl #4
 8080114:	e7ed      	b.n	80800f2 <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13+0x6>
 8080116:	461c      	mov	r4, r3
    slot = slot->next();
  }
  return slot;
}
 8080118:	4620      	mov	r0, r4
 808011a:	bd38      	pop	{r3, r4, r5, pc}

0808011c <_ZN21ArduinoJson6110_1100017variantSetBooleanEPNS_11VariantDataEb>:

inline bool variantIsNull(const VariantData *var) {
  return var == 0 || var->isNull();
}

inline bool variantSetBoolean(VariantData *var, bool value) {
 808011c:	b510      	push	{r4, lr}
  if (!var) return false;
 808011e:	4602      	mov	r2, r0

inline bool variantIsNull(const VariantData *var) {
  return var == 0 || var->isNull();
}

inline bool variantSetBoolean(VariantData *var, bool value) {
 8080120:	460c      	mov	r4, r1
  if (!var) return false;
 8080122:	b148      	cbz	r0, 8080138 <_ZN21ArduinoJson6110_1100017variantSetBooleanEPNS_11VariantDataEb+0x1c>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
 8080124:	2105      	movs	r1, #5
 8080126:	3008      	adds	r0, #8
 8080128:	f7ff ffda 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asInteger = static_cast<UInt>(value);
 808012c:	b2e0      	uxtb	r0, r4
 808012e:	2100      	movs	r1, #0
 8080130:	e9c2 0100 	strd	r0, r1, [r2]
  var->setBoolean(value);
  return true;
 8080134:	2001      	movs	r0, #1
 8080136:	bd10      	pop	{r4, pc}
}
 8080138:	bd10      	pop	{r4, pc}

0808013a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>:
  if (!var) return false;
  var->setSignedInteger(value);
  return true;
}

inline bool variantSetLinkedString(VariantData *var, const char *value) {
 808013a:	b510      	push	{r4, lr}
  if (!var) return false;
 808013c:	4602      	mov	r2, r0
  if (!var) return false;
  var->setSignedInteger(value);
  return true;
}

inline bool variantSetLinkedString(VariantData *var, const char *value) {
 808013e:	460c      	mov	r4, r1
  if (!var) return false;
 8080140:	b150      	cbz	r0, 8080158 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc+0x1e>
 8080142:	3008      	adds	r0, #8
    setType(VALUE_IS_NEGATIVE_INTEGER);
    _content.asInteger = value;
  }

  void setLinkedString(const char *value) {
    if (value) {
 8080144:	b121      	cbz	r1, 8080150 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc+0x16>
      setType(VALUE_IS_LINKED_STRING);
 8080146:	2103      	movs	r1, #3
 8080148:	f7ff ffca 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
      _content.asString = value;
 808014c:	6014      	str	r4, [r2, #0]
 808014e:	e001      	b.n	8080154 <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc+0x1a>
    } else {
      setType(VALUE_IS_NULL);
 8080150:	f7ff ffc6 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
  var->setLinkedString(value);
  return true;
 8080154:	2001      	movs	r0, #1
 8080156:	bd10      	pop	{r4, pc}
}
 8080158:	bd10      	pop	{r4, pc}

0808015a <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE>:
#include "../Variant/VariantData.hpp"
#include "CollectionData.hpp"

namespace ARDUINOJSON_NAMESPACE {

inline VariantSlot* CollectionData::addSlot(MemoryPool* pool) {
 808015a:	b510      	push	{r4, lr}
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
    if (!canAlloc(bytes)) return 0;
 808015c:	684b      	ldr	r3, [r1, #4]
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
 808015e:	688a      	ldr	r2, [r1, #8]
  T* allocRight() {
    return reinterpret_cast<T*>(allocRight(sizeof(T)));
  }

  void* allocRight(size_t bytes) {
    if (!canAlloc(bytes)) return 0;
 8080160:	3310      	adds	r3, #16
 8080162:	429a      	cmp	r2, r3
 8080164:	d201      	bcs.n	808016a <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE+0x10>
  VariantSlot* slot = pool->allocVariant();
  if (!slot) return 0;
 8080166:	2000      	movs	r0, #0
 8080168:	bd10      	pop	{r4, pc}
    _right -= bytes;
 808016a:	f1a2 0310 	sub.w	r3, r2, #16
 808016e:	608b      	str	r3, [r1, #8]
 8080170:	2b00      	cmp	r3, #0
 8080172:	d0f8      	beq.n	8080166 <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE+0xc>

  if (_tail) {
 8080174:	6841      	ldr	r1, [r0, #4]
 8080176:	b119      	cbz	r1, 8080180 <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE+0x26>
    _next = VariantSlotDiff(slot ? slot - this : 0);
  }

  void setNextNotNull(VariantSlot* slot) {
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
 8080178:	1a5c      	subs	r4, r3, r1
 808017a:	1124      	asrs	r4, r4, #4
 808017c:	814c      	strh	r4, [r1, #10]
 808017e:	e000      	b.n	8080182 <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE+0x28>
    _tail->setNextNotNull(slot);
    _tail = slot;
  } else {
    _head = slot;
 8080180:	6003      	str	r3, [r0, #0]
  bool ownsKey() const {
    return (_flags & KEY_IS_OWNED) != 0;
  }

  void clear() {
    _next = 0;
 8080182:	2100      	movs	r1, #0
    _tail = slot;
 8080184:	6043      	str	r3, [r0, #4]
 8080186:	f822 1c06 	strh.w	r1, [r2, #-6]
    _flags = 0;
 808018a:	f802 1c08 	strb.w	r1, [r2, #-8]
    _key = 0;
 808018e:	f842 1c04 	str.w	r1, [r2, #-4]
  }

  slot->clear();
  return slot;
 8080192:	4618      	mov	r0, r3
}
 8080194:	bd10      	pop	{r4, pc}
	...

08080198 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>:
    return lhs != rhs._code;
  }

  // Behaves like a bool
  operator bool_type() const {
    return _code != Ok ? &DeserializationError::safeBoolHelper : 0;
 8080198:	780b      	ldrb	r3, [r1, #0]
 808019a:	b90b      	cbnz	r3, 80801a0 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv+0x8>
 808019c:	6003      	str	r3, [r0, #0]
 808019e:	e002      	b.n	80801a6 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv+0xe>
 80801a0:	4b02      	ldr	r3, [pc, #8]	; (80801ac <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv+0x14>)
 80801a2:	6003      	str	r3, [r0, #0]
 80801a4:	2300      	movs	r3, #0
 80801a6:	6043      	str	r3, [r0, #4]
  }
 80801a8:	4770      	bx	lr
 80801aa:	bf00      	nop
 80801ac:	080800bb 	.word	0x080800bb

080801b0 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj>:
    *p++ = static_cast<char>(c);
    *p = '\0';
    return 1;
  }

  size_t write(const uint8_t *s, size_t n) {
 80801b0:	b530      	push	{r4, r5, lr}
    char *begin = p;
 80801b2:	6844      	ldr	r4, [r0, #4]
 80801b4:	440a      	add	r2, r1
    while (p < end && n > 0) {
 80801b6:	6843      	ldr	r3, [r0, #4]
 80801b8:	6805      	ldr	r5, [r0, #0]
 80801ba:	42ab      	cmp	r3, r5
 80801bc:	d207      	bcs.n	80801ce <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj+0x1e>
 80801be:	4291      	cmp	r1, r2
 80801c0:	d005      	beq.n	80801ce <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj+0x1e>
      *p++ = static_cast<char>(*s++);
 80801c2:	1c5d      	adds	r5, r3, #1
 80801c4:	6045      	str	r5, [r0, #4]
 80801c6:	f811 5b01 	ldrb.w	r5, [r1], #1
 80801ca:	701d      	strb	r5, [r3, #0]
    return 1;
  }

  size_t write(const uint8_t *s, size_t n) {
    char *begin = p;
    while (p < end && n > 0) {
 80801cc:	e7f3      	b.n	80801b6 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj+0x6>
      *p++ = static_cast<char>(*s++);
      n--;
    }
    *p = '\0';
 80801ce:	2200      	movs	r2, #0
 80801d0:	701a      	strb	r2, [r3, #0]
    return size_t(p - begin);
 80801d2:	6840      	ldr	r0, [r0, #4]
  }
 80801d4:	1b00      	subs	r0, r0, r4
 80801d6:	bd30      	pop	{r4, r5, pc}

080801d8 <_Z13ConnectToMQTT6String>:
    }
}

// --------------------------------------------- Connect to the MQTT Broker via IP address
// triggered by Particle.function
int ConnectToMQTT(String s) {
 80801d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    
    s.toCharArray(buffer, sizeof(s));

	// connect via IP Address ---------------------------
    for (int i = 0; i < 4; i++) brokerIP[i] = 0;
 80801da:	4c17      	ldr	r4, [pc, #92]	; (8080238 <_Z13ConnectToMQTT6String+0x60>)
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 80801dc:	2300      	movs	r3, #0
 80801de:	2210      	movs	r2, #16
 80801e0:	4916      	ldr	r1, [pc, #88]	; (808023c <_Z13ConnectToMQTT6String+0x64>)
 80801e2:	f002 feeb 	bl	8082fbc <_ZNK6String8getBytesEPhjj>
 80801e6:	4622      	mov	r2, r4
 80801e8:	2300      	movs	r3, #0
 80801ea:	f802 3f03 	strb.w	r3, [r2, #3]!
 80801ee:	7023      	strb	r3, [r4, #0]
 80801f0:	7063      	strb	r3, [r4, #1]
 80801f2:	70a3      	strb	r3, [r4, #2]
    sscanf( buffer, "%u.%u.%u.%u", &brokerIP[0], &brokerIP[1], &brokerIP[2], &brokerIP[3] );
 80801f4:	1ca3      	adds	r3, r4, #2
 80801f6:	9201      	str	r2, [sp, #4]
 80801f8:	9300      	str	r3, [sp, #0]
 80801fa:	4622      	mov	r2, r4
 80801fc:	1c63      	adds	r3, r4, #1
 80801fe:	4910      	ldr	r1, [pc, #64]	; (8080240 <_Z13ConnectToMQTT6String+0x68>)
 8080200:	480e      	ldr	r0, [pc, #56]	; (808023c <_Z13ConnectToMQTT6String+0x64>)
 8080202:	f002 f96f 	bl	80824e4 <sscanf>
    //Serial.printf("brokerIP: %u.%u.%u.%u\r\n", brokerIP[0], brokerIP[1], brokerIP[2], brokerIP[3] );
	mqtt = new MQTT(brokerIP, 1883, 15, mqttReceiver);
 8080206:	2058      	movs	r0, #88	; 0x58
 8080208:	f7ff ff47 	bl	808009a <_Znwj>
 808020c:	4605      	mov	r5, r0
 808020e:	b138      	cbz	r0, 8080220 <_Z13ConnectToMQTT6String+0x48>
 8080210:	4b0c      	ldr	r3, [pc, #48]	; (8080244 <_Z13ConnectToMQTT6String+0x6c>)
 8080212:	f240 725b 	movw	r2, #1883	; 0x75b
 8080216:	9300      	str	r3, [sp, #0]
 8080218:	4621      	mov	r1, r4
 808021a:	230f      	movs	r3, #15
 808021c:	f001 fb9e 	bl	808195c <_ZN4MQTTC1EPhtiPFvPcS0_jE>
 8080220:	4b09      	ldr	r3, [pc, #36]	; (8080248 <_Z13ConnectToMQTT6String+0x70>)
	
    
    mqtt->connect(clientName);
 8080222:	490a      	ldr	r1, [pc, #40]	; (808024c <_Z13ConnectToMQTT6String+0x74>)
 8080224:	4628      	mov	r0, r5

	// connect via IP Address ---------------------------
    for (int i = 0; i < 4; i++) brokerIP[i] = 0;
    sscanf( buffer, "%u.%u.%u.%u", &brokerIP[0], &brokerIP[1], &brokerIP[2], &brokerIP[3] );
    //Serial.printf("brokerIP: %u.%u.%u.%u\r\n", brokerIP[0], brokerIP[1], brokerIP[2], brokerIP[3] );
	mqtt = new MQTT(brokerIP, 1883, 15, mqttReceiver);
 8080226:	601d      	str	r5, [r3, #0]
	
    
    mqtt->connect(clientName);
 8080228:	f001 fd50 	bl	8081ccc <_ZN4MQTT7connectEPKc>
    
    mqttIsInitialized = true;
 808022c:	4b08      	ldr	r3, [pc, #32]	; (8080250 <_Z13ConnectToMQTT6String+0x78>)
 808022e:	2201      	movs	r2, #1
    
    return 0;
}
 8080230:	2000      	movs	r0, #0
	mqtt = new MQTT(brokerIP, 1883, 15, mqttReceiver);
	
    
    mqtt->connect(clientName);
    
    mqttIsInitialized = true;
 8080232:	701a      	strb	r2, [r3, #0]
    
    return 0;
}
 8080234:	b003      	add	sp, #12
 8080236:	bd30      	pop	{r4, r5, pc}
 8080238:	200005b4 	.word	0x200005b4
 808023c:	20000b01 	.word	0x20000b01
 8080240:	08084a18 	.word	0x08084a18
 8080244:	080818a5 	.word	0x080818a5
 8080248:	20000570 	.word	0x20000570
 808024c:	200005b8 	.word	0x200005b8
 8080250:	20000900 	.word	0x20000900

08080254 <_Z13SetClientName6String>:

int SetClientName(String s) {
 8080254:	b510      	push	{r4, lr}
 8080256:	4c06      	ldr	r4, [pc, #24]	; (8080270 <_Z13SetClientName6String+0x1c>)
 8080258:	2300      	movs	r3, #0
 808025a:	4621      	mov	r1, r4
 808025c:	2210      	movs	r2, #16
 808025e:	f002 fead 	bl	8082fbc <_ZNK6String8getBytesEPhjj>
    
    s.toCharArray(buffer, sizeof(s));
    strncpy(clientName, buffer, sizeof(clientName));
 8080262:	2240      	movs	r2, #64	; 0x40
 8080264:	4621      	mov	r1, r4
 8080266:	4803      	ldr	r0, [pc, #12]	; (8080274 <_Z13SetClientName6String+0x20>)
 8080268:	f004 fbb9 	bl	80849de <strncpy>
        
    return 0;
}
 808026c:	2000      	movs	r0, #0
 808026e:	bd10      	pop	{r4, pc}
 8080270:	20000b01 	.word	0x20000b01
 8080274:	200005b8 	.word	0x200005b8

08080278 <_Z11SetPubTopic6String>:

int SetPubTopic(String s) {
 8080278:	b508      	push	{r3, lr}
 808027a:	2210      	movs	r2, #16
 808027c:	2300      	movs	r3, #0
 808027e:	4902      	ldr	r1, [pc, #8]	; (8080288 <_Z11SetPubTopic6String+0x10>)
 8080280:	f002 fe9c 	bl	8082fbc <_ZNK6String8getBytesEPhjj>
	s.toCharArray(pubTopic, sizeof(s));
	return 0;
}
 8080284:	2000      	movs	r0, #0
 8080286:	bd08      	pop	{r3, pc}
 8080288:	200007fb 	.word	0x200007fb

0808028c <_Z16SetResponseTopic6String>:

int SetResponseTopic(String s) {
 808028c:	b508      	push	{r3, lr}
 808028e:	2210      	movs	r2, #16
 8080290:	2300      	movs	r3, #0
 8080292:	4902      	ldr	r1, [pc, #8]	; (808029c <_Z16SetResponseTopic6String+0x10>)
 8080294:	f002 fe92 	bl	8082fbc <_ZNK6String8getBytesEPhjj>
	s.toCharArray(responseTopic, sizeof(s));
	return 0;
}
 8080298:	2000      	movs	r0, #0
 808029a:	bd08      	pop	{r3, pc}
 808029c:	200006fb 	.word	0x200006fb

080802a0 <setup>:
unsigned long lastPublish = 0;


void mqttReceiver(char* topic, byte* payload, unsigned int length);

void setup() {
 80802a0:	b510      	push	{r4, lr}
 80802a2:	b086      	sub	sp, #24
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 80802a4:	a802      	add	r0, sp, #8
 80802a6:	f002 f895 	bl	80823d4 <spark_deviceID>
 80802aa:	2300      	movs	r3, #0
 80802ac:	2219      	movs	r2, #25
 80802ae:	492f      	ldr	r1, [pc, #188]	; (808036c <setup+0xcc>)
 80802b0:	a802      	add	r0, sp, #8
 80802b2:	f002 fe83 	bl	8082fbc <_ZNK6String8getBytesEPhjj>
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 80802b6:	2400      	movs	r4, #0
    //Serial.begin(9600);

    // Get Device Id
    System.deviceID().toCharArray(deviceId, sizeof(deviceId));
 80802b8:	a802      	add	r0, sp, #8
 80802ba:	f002 fe14 	bl	8082ee6 <_ZN6StringD1Ev>
 80802be:	4622      	mov	r2, r4
 80802c0:	9401      	str	r4, [sp, #4]
 80802c2:	9400      	str	r4, [sp, #0]
 80802c4:	2301      	movs	r3, #1
 80802c6:	492a      	ldr	r1, [pc, #168]	; (8080370 <setup+0xd0>)
 80802c8:	482a      	ldr	r0, [pc, #168]	; (8080374 <setup+0xd4>)
 80802ca:	f002 f893 	bl	80823f4 <spark_subscribe>
 80802ce:	4b2a      	ldr	r3, [pc, #168]	; (8080378 <setup+0xd8>)
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80802d0:	4622      	mov	r2, r4
 80802d2:	781b      	ldrb	r3, [r3, #0]
 80802d4:	4927      	ldr	r1, [pc, #156]	; (8080374 <setup+0xd4>)
 80802d6:	f88d 3000 	strb.w	r3, [sp]
 80802da:	a802      	add	r0, sp, #8
 80802dc:	233c      	movs	r3, #60	; 0x3c
 80802de:	f002 faf7 	bl	80828d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80802e2:	9c03      	ldr	r4, [sp, #12]
 80802e4:	b17c      	cbz	r4, 8080306 <setup+0x66>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80802e6:	6863      	ldr	r3, [r4, #4]
 80802e8:	3b01      	subs	r3, #1
 80802ea:	6063      	str	r3, [r4, #4]
 80802ec:	b95b      	cbnz	r3, 8080306 <setup+0x66>
        {
          _M_dispose();
 80802ee:	6823      	ldr	r3, [r4, #0]
 80802f0:	4620      	mov	r0, r4
 80802f2:	689b      	ldr	r3, [r3, #8]
 80802f4:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80802f6:	68a3      	ldr	r3, [r4, #8]
 80802f8:	3b01      	subs	r3, #1
 80802fa:	60a3      	str	r3, [r4, #8]
 80802fc:	b91b      	cbnz	r3, 8080306 <setup+0x66>
            _M_destroy();
 80802fe:	6823      	ldr	r3, [r4, #0]
 8080300:	4620      	mov	r0, r4
 8080302:	68db      	ldr	r3, [r3, #12]
 8080304:	4798      	blx	r3
    // Get device name in handler and save it in deviceName
    Particle.subscribe("particle/device/name", handler);
    Particle.publish("particle/device/name", NULL, 60, PRIVATE);
    
    
    SetClientName("ParticleDevice");
 8080306:	491d      	ldr	r1, [pc, #116]	; (808037c <setup+0xdc>)
 8080308:	a802      	add	r0, sp, #8
 808030a:	f002 fe33 	bl	8082f74 <_ZN6StringC1EPK19__FlashStringHelper>
 808030e:	a802      	add	r0, sp, #8
 8080310:	f7ff ffa0 	bl	8080254 <_Z13SetClientName6String>
 8080314:	a802      	add	r0, sp, #8
 8080316:	f002 fde6 	bl	8082ee6 <_ZN6StringD1Ev>
    
    
    ConnectToMQTT("137.117.38.255");
 808031a:	4919      	ldr	r1, [pc, #100]	; (8080380 <setup+0xe0>)
 808031c:	a802      	add	r0, sp, #8
 808031e:	f002 fe29 	bl	8082f74 <_ZN6StringC1EPK19__FlashStringHelper>
 8080322:	a802      	add	r0, sp, #8
 8080324:	f7ff ff58 	bl	80801d8 <_Z13ConnectToMQTT6String>
 8080328:	a802      	add	r0, sp, #8
 808032a:	f002 fddc 	bl	8082ee6 <_ZN6StringD1Ev>
    
    pinMode(BUTTONPIN, INPUT);
 808032e:	2100      	movs	r1, #0
 8080330:	2001      	movs	r0, #1
 8080332:	f003 fab9 	bl	80838a8 <pinMode>
    pinMode(ANGLEPIN, INPUT);
 8080336:	2100      	movs	r1, #0
 8080338:	200a      	movs	r0, #10
 808033a:	f003 fab5 	bl	80838a8 <pinMode>
    
    SetPubTopic("DataTopic");
 808033e:	4911      	ldr	r1, [pc, #68]	; (8080384 <setup+0xe4>)
 8080340:	a802      	add	r0, sp, #8
 8080342:	f002 fe17 	bl	8082f74 <_ZN6StringC1EPK19__FlashStringHelper>
 8080346:	a802      	add	r0, sp, #8
 8080348:	f7ff ff96 	bl	8080278 <_Z11SetPubTopic6String>
 808034c:	a802      	add	r0, sp, #8
 808034e:	f002 fdca 	bl	8082ee6 <_ZN6StringD1Ev>
    SetResponseTopic("ResponseTopic");
 8080352:	490d      	ldr	r1, [pc, #52]	; (8080388 <setup+0xe8>)
 8080354:	a802      	add	r0, sp, #8
 8080356:	f002 fe0d 	bl	8082f74 <_ZN6StringC1EPK19__FlashStringHelper>
 808035a:	a802      	add	r0, sp, #8
 808035c:	f7ff ff96 	bl	808028c <_Z16SetResponseTopic6String>
 8080360:	a802      	add	r0, sp, #8
 8080362:	f002 fdc0 	bl	8082ee6 <_ZN6StringD1Ev>
    
}
 8080366:	b006      	add	sp, #24
 8080368:	bd10      	pop	{r4, pc}
 808036a:	bf00      	nop
 808036c:	20000555 	.word	0x20000555
 8080370:	080800bd 	.word	0x080800bd
 8080374:	08084a24 	.word	0x08084a24
 8080378:	200005f9 	.word	0x200005f9
 808037c:	08084a39 	.word	0x08084a39
 8080380:	08084a48 	.word	0x08084a48
 8080384:	08084a57 	.word	0x08084a57
 8080388:	08084a61 	.word	0x08084a61

0808038c <_Z13MQTTSubscribev>:
}


// --------------------------------------------- Subscribe to a Topic
// 
int MQTTSubscribe() {
 808038c:	b510      	push	{r4, lr}
    
    strcpy(subTopic, "CommandTopic_");
 808038e:	490a      	ldr	r1, [pc, #40]	; (80803b8 <_Z13MQTTSubscribev+0x2c>)
 8080390:	480a      	ldr	r0, [pc, #40]	; (80803bc <_Z13MQTTSubscribev+0x30>)
    strcat(subTopic, deviceName);

    if (mqtt->isConnected()) {
 8080392:	4c0b      	ldr	r4, [pc, #44]	; (80803c0 <_Z13MQTTSubscribev+0x34>)

// --------------------------------------------- Subscribe to a Topic
// 
int MQTTSubscribe() {
    
    strcpy(subTopic, "CommandTopic_");
 8080394:	f004 faf7 	bl	8084986 <strcpy>
    strcat(subTopic, deviceName);
 8080398:	490a      	ldr	r1, [pc, #40]	; (80803c4 <_Z13MQTTSubscribev+0x38>)
 808039a:	4808      	ldr	r0, [pc, #32]	; (80803bc <_Z13MQTTSubscribev+0x30>)
 808039c:	f004 fada 	bl	8084954 <strcat>

    if (mqtt->isConnected()) {
 80803a0:	6820      	ldr	r0, [r4, #0]
 80803a2:	f001 fbae 	bl	8081b02 <_ZN4MQTT11isConnectedEv>
 80803a6:	b128      	cbz	r0, 80803b4 <_Z13MQTTSubscribev+0x28>

	    mqtt->subscribe(subTopic);
 80803a8:	4904      	ldr	r1, [pc, #16]	; (80803bc <_Z13MQTTSubscribev+0x30>)
 80803aa:	6820      	ldr	r0, [r4, #0]
 80803ac:	f001 fe80 	bl	80820b0 <_ZN4MQTT9subscribeEPKc>
 80803b0:	2000      	movs	r0, #0
 80803b2:	bd10      	pop	{r4, pc}
	    
    	return 0;
	} else return 1;
 80803b4:	2001      	movs	r0, #1
}
 80803b6:	bd10      	pop	{r4, pc}
 80803b8:	08084a6f 	.word	0x08084a6f
 80803bc:	200005fa 	.word	0x200005fa
 80803c0:	20000570 	.word	0x20000570
 80803c4:	20000574 	.word	0x20000574

080803c8 <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev>:
class StaticJsonDocument : public JsonDocument {
  static const size_t _capacity =
      AddPadding<Max<1, desiredCapacity>::value>::value;

 public:
  StaticJsonDocument() : JsonDocument(_buffer, _capacity) {}
 80803c8:	b508      	push	{r3, lr}
 80803ca:	f100 0320 	add.w	r3, r0, #32
 80803ce:	4602      	mov	r2, r0
 public:
  MemoryPool(char* buf, size_t capa)
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
        _end(buf ? buf + capa : 0) {
 80803d0:	6003      	str	r3, [r0, #0]
 80803d2:	6043      	str	r3, [r0, #4]
 80803d4:	b113      	cbz	r3, 80803dc <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev+0x14>
 80803d6:	f500 7190 	add.w	r1, r0, #288	; 0x120
 80803da:	e000      	b.n	80803de <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev+0x16>
 80803dc:	4619      	mov	r1, r3
 80803de:	6091      	str	r1, [r2, #8]
 80803e0:	b10b      	cbz	r3, 80803e6 <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev+0x1e>
 80803e2:	f502 7390 	add.w	r3, r2, #288	; 0x120
    }
  }

  void setNull() {
    setType(VALUE_IS_NULL);
 80803e6:	f102 0018 	add.w	r0, r2, #24
 80803ea:	60d3      	str	r3, [r2, #12]
 80803ec:	2100      	movs	r1, #0
 80803ee:	f7ff fe77 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
 80803f2:	4610      	mov	r0, r2
 80803f4:	bd08      	pop	{r3, pc}

080803f6 <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>:
  var->setOwnedString(value);
  return true;
}

template <typename T>
inline bool variantSetOwnedString(VariantData *var, T value, MemoryPool *pool) {
 80803f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80803fa:	460e      	mov	r6, r1
 80803fc:	4617      	mov	r7, r2
  return var != 0 && var->setOwnedString(value, pool);
 80803fe:	4604      	mov	r4, r0
 8080400:	b1c8      	cbz	r0, 8080436 <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE+0x40>
 8080402:	f100 0808 	add.w	r8, r0, #8
class RamStringAdapter : public ConstRamStringAdapter {
 public:
  RamStringAdapter(const char* str) : ConstRamStringAdapter(str) {}

  char* save(MemoryPool* pool) const {
    if (!_str) return NULL;
 8080406:	b1c1      	cbz	r1, 808043a <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE+0x44>
    return 0;
  }

  size_t size() const {
    if (!_str) return 0;
    return strlen(_str);
 8080408:	4608      	mov	r0, r1
 808040a:	f004 fae0 	bl	80849ce <strlen>
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
 808040e:	687d      	ldr	r5, [r7, #4]
    size_t n = size() + 1;
 8080410:	1c42      	adds	r2, r0, #1
  VariantSlot* allocVariant() {
    return allocRight<VariantSlot>();
  }

  char* allocFrozenString(size_t n) {
    if (!canAlloc(n)) return 0;
 8080412:	68b9      	ldr	r1, [r7, #8]
    _left = _begin;
    _right = _end;
  }

  bool canAlloc(size_t bytes) const {
    return _left + bytes <= _right;
 8080414:	18ab      	adds	r3, r5, r2
  VariantSlot* allocVariant() {
    return allocRight<VariantSlot>();
  }

  char* allocFrozenString(size_t n) {
    if (!canAlloc(n)) return 0;
 8080416:	428b      	cmp	r3, r1
 8080418:	d80f      	bhi.n	808043a <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE+0x44>
    char* s = _left;
    _left += n;
 808041a:	607b      	str	r3, [r7, #4]
    char* dup = pool->allocFrozenString(n);
    if (dup) memcpy(dup, _str, n);
 808041c:	b16d      	cbz	r5, 808043a <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE+0x44>
 808041e:	4631      	mov	r1, r6
 8080420:	4628      	mov	r0, r5
 8080422:	f004 fa5b 	bl	80848dc <memcpy>
  }

  void setOwnedString(not_null<const char *> s) {
    setType(VALUE_IS_OWNED_STRING);
 8080426:	4640      	mov	r0, r8
 8080428:	2104      	movs	r1, #4
 808042a:	f7ff fe59 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asString = s.get();
 808042e:	6025      	str	r5, [r4, #0]
 8080430:	2001      	movs	r0, #1
 8080432:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  bool setOwnedString(const char *s) {
    if (s) {
      setOwnedString(make_not_null(s));
      return true;
    } else {
      setType(VALUE_IS_NULL);
 808043a:	4640      	mov	r0, r8
 808043c:	2100      	movs	r1, #0
 808043e:	f7ff fe4f 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
 8080442:	2000      	movs	r0, #0
}
 8080444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08080448 <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_>:
                               MemoryPool *pool) {
  return var != 0 && var->setOwnedRaw(value, pool);
}

template <typename T>
inline bool variantSetSignedInteger(VariantData *var, T value) {
 8080448:	b538      	push	{r3, r4, r5, lr}
  if (!var) return false;
 808044a:	4602      	mov	r2, r0
 808044c:	b1a0      	cbz	r0, 8080478 <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_+0x30>
    setSignedInteger(value);
  }

  template <typename T>
  void setSignedInteger(T value) {
    if (value >= 0) {
 808044e:	2900      	cmp	r1, #0
 8080450:	f100 0008 	add.w	r0, r0, #8
 8080454:	460c      	mov	r4, r1
 8080456:	ea4f 75e1 	mov.w	r5, r1, asr #31
 808045a:	db03      	blt.n	8080464 <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_+0x1c>
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
 808045c:	2106      	movs	r1, #6
 808045e:	f7ff fe3f 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
 8080462:	e005      	b.n	8080470 <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_+0x28>
    _content.asInteger = value;
  }

  void setNegativeInteger(UInt value) {
    setType(VALUE_IS_NEGATIVE_INTEGER);
 8080464:	2107      	movs	r1, #7
 8080466:	f7ff fe3b 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asInteger = value;
 808046a:	4264      	negs	r4, r4
 808046c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 8080470:	e9c2 4500 	strd	r4, r5, [r2]
  var->setSignedInteger(value);
  return true;
 8080474:	2001      	movs	r0, #1
 8080476:	bd38      	pop	{r3, r4, r5, pc}
}
 8080478:	bd38      	pop	{r3, r4, r5, pc}

0808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>:
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.get(key) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
 808047a:	b570      	push	{r4, r5, r6, lr}
 808047c:	4616      	mov	r6, r2
    if (isNull()) toObject();
 808047e:	7a02      	ldrb	r2, [r0, #8]
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.get(key) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
 8080480:	4604      	mov	r4, r0
    if (isNull()) toObject();
 8080482:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
  VariantData *getMember(TAdaptedString key) const {
    return isObject() ? _content.asCollection.get(key) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
 8080486:	460d      	mov	r5, r1
    if (isNull()) toObject();
 8080488:	d105      	bne.n	8080496 <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x1c>
    _content.asCollection.clear();
    return _content.asCollection;
  }

  CollectionData &toObject() {
    setType(VALUE_IS_OBJECT);
 808048a:	2120      	movs	r1, #32
 808048c:	3008      	adds	r0, #8
 808048e:	f7ff fe27 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
 8080492:	6022      	str	r2, [r4, #0]
  _tail = 0;
 8080494:	6062      	str	r2, [r4, #4]
  }

  template <typename TAdaptedString>
  VariantData *getOrAddMember(TAdaptedString key, MemoryPool *pool) {
    if (isNull()) toObject();
    if (!isObject()) return 0;
 8080496:	7a23      	ldrb	r3, [r4, #8]
 8080498:	f003 0320 	and.w	r3, r3, #32
 808049c:	f003 00ff 	and.w	r0, r3, #255	; 0xff
 80804a0:	b183      	cbz	r3, 80804c4 <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x4a>
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
  VariantSlot* slot = getSlot(key);
 80804a2:	4629      	mov	r1, r5
 80804a4:	6820      	ldr	r0, [r4, #0]
 80804a6:	f7ff fe21 	bl	80800ec <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13>
  return slot ? slot->data() : 0;
 80804aa:	b100      	cbz	r0, 80804ae <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x34>
 80804ac:	bd70      	pop	{r4, r5, r6, pc}
  return slotData(addSlot(pool));
}

template <typename TAdaptedString>
inline VariantData* CollectionData::add(TAdaptedString key, MemoryPool* pool) {
  VariantSlot* slot = addSlot(pool);
 80804ae:	4631      	mov	r1, r6
 80804b0:	4620      	mov	r0, r4
 80804b2:	f7ff fe52 	bl	808015a <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE>

namespace ARDUINOJSON_NAMESPACE {

template <typename TAdaptedString>
inline bool slotSetKey(VariantSlot* var, TAdaptedString key, MemoryPool* pool) {
  if (!var) return false;
 80804b6:	b128      	cbz	r0, 80804c4 <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE+0x4a>
    _flags |= KEY_IS_OWNED;
    _key = k.get();
  }

  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
 80804b8:	7a03      	ldrb	r3, [r0, #8]
    _key = k.get();
 80804ba:	60c5      	str	r5, [r0, #12]
    _flags |= KEY_IS_OWNED;
    _key = k.get();
  }

  void setLinkedKey(not_null<const char*> k) {
    _flags &= VALUE_MASK;
 80804bc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80804c0:	7203      	strb	r3, [r0, #8]
 80804c2:	bd70      	pop	{r4, r5, r6, pc}
    VariantData *var = _content.asCollection.get(key);
    if (var) return var;
    return _content.asCollection.add(key, pool);
  }
 80804c4:	bd70      	pop	{r4, r5, r6, pc}

080804c6 <_ZN21ArduinoJson6110_110009variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>:
template <typename T>
inline typename enable_if<is_same<T, const char*>::value ||
                              is_same<T, char*>::value,
                          const char*>::type
variantAs(const VariantData* _data) {
  return _data != 0 ? _data->asString() : 0;
 80804c6:	b140      	cbz	r0, 80804da <_ZN21ArduinoJson6110_110009variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x14>
      return 0;
  }
}

inline const char *VariantData::asString() const {
  switch (type()) {
 80804c8:	7a03      	ldrb	r3, [r0, #8]
 80804ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80804ce:	3b03      	subs	r3, #3
 80804d0:	2b01      	cmp	r3, #1
 80804d2:	d801      	bhi.n	80804d8 <_ZN21ArduinoJson6110_110009variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE+0x12>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return _content.asString;
 80804d4:	6800      	ldr	r0, [r0, #0]
 80804d6:	4770      	bx	lr
    default:
      return 0;
 80804d8:	2000      	movs	r0, #0
}
 80804da:	4770      	bx	lr

080804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>:

 private:
  JsonDeserializer &operator=(const JsonDeserializer &);  // non-copiable

  char current() {
    if (!_loaded) {
 80804dc:	7b83      	ldrb	r3, [r0, #14]
 80804de:	b943      	cbnz	r3, 80804f2 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv+0x16>
 public:
  explicit UnsafeCharPointerReader(const char* ptr)
      : _ptr(ptr ? ptr : reinterpret_cast<const char*>("")) {}

  int read() {
    return static_cast<unsigned char>(*_ptr++);
 80804e0:	6843      	ldr	r3, [r0, #4]
 80804e2:	1c5a      	adds	r2, r3, #1
 80804e4:	6042      	str	r2, [r0, #4]
      int c = _reader.read();
      _current = static_cast<char>(c > 0 ? c : 0);
 80804e6:	781b      	ldrb	r3, [r3, #0]
 80804e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80804ec:	7343      	strb	r3, [r0, #13]
      _loaded = true;
 80804ee:	2301      	movs	r3, #1
 80804f0:	7383      	strb	r3, [r0, #14]
    }
    return _current;
  }
 80804f2:	7b40      	ldrb	r0, [r0, #13]
 80804f4:	4770      	bx	lr

080804f6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>:
    if (c < 'A') return uint8_t(c - '0');
    c = char(c & ~0x20);  // uppercase
    return uint8_t(c - 'A' + 10);
  }

  DeserializationError skipSpacesAndComments() {
 80804f6:	b570      	push	{r4, r5, r6, lr}
 80804f8:	4604      	mov	r4, r0
    }
    return _current;
  }

  void move() {
    _loaded = false;
 80804fa:	2500      	movs	r5, #0
    return uint8_t(c - 'A' + 10);
  }

  DeserializationError skipSpacesAndComments() {
    for (;;) {
      switch (current()) {
 80804fc:	4620      	mov	r0, r4
 80804fe:	f7ff ffed 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080502:	280a      	cmp	r0, #10
 8080504:	d803      	bhi.n	808050e <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x18>
 8080506:	2809      	cmp	r0, #9
 8080508:	d21d      	bcs.n	8080546 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x50>
 808050a:	b1b0      	cbz	r0, 808053a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x44>
 808050c:	e02f      	b.n	808056e <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x78>
 808050e:	2820      	cmp	r0, #32
 8080510:	d019      	beq.n	8080546 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x50>
 8080512:	282f      	cmp	r0, #47	; 0x2f
 8080514:	d002      	beq.n	808051c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x26>
 8080516:	280d      	cmp	r0, #13
 8080518:	d129      	bne.n	808056e <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x78>
 808051a:	e014      	b.n	8080546 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x50>
    }
    return _current;
  }

  void move() {
    _loaded = false;
 808051c:	73a5      	strb	r5, [r4, #14]
          continue;

        // comments
        case '/':
          move();  // skip '/'
          switch (current()) {
 808051e:	4620      	mov	r0, r4
 8080520:	f7ff ffdc 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080524:	282a      	cmp	r0, #42	; 0x2a
 8080526:	d002      	beq.n	808052e <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x38>
 8080528:	282f      	cmp	r0, #47	; 0x2f
 808052a:	d016      	beq.n	808055a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x64>
 808052c:	e01c      	b.n	8080568 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x72>
    }
    return _current;
  }

  void move() {
    _loaded = false;
 808052e:	73a5      	strb	r5, [r4, #14]
          move();  // skip '/'
          switch (current()) {
            // block comment
            case '*': {
              move();  // skip '*'
              bool wasStar = false;
 8080530:	2600      	movs	r6, #0
              for (;;) {
                char c = current();
 8080532:	4620      	mov	r0, r4
 8080534:	f7ff ffd2 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
                if (c == '\0') return DeserializationError::IncompleteInput;
 8080538:	b910      	cbnz	r0, 8080540 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x4a>
 808053a:	f04f 0001 	mov.w	r0, #1
 808053e:	bd70      	pop	{r4, r5, r6, pc}
                if (c == '/' && wasStar) {
 8080540:	282f      	cmp	r0, #47	; 0x2f
 8080542:	d102      	bne.n	808054a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x54>
 8080544:	b10e      	cbz	r6, 808054a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x54>
    }
    return _current;
  }

  void move() {
    _loaded = false;
 8080546:	73a5      	strb	r5, [r4, #14]
 8080548:	e7d8      	b.n	80804fc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x6>
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '/' && wasStar) {
                  move();
                  break;
                }
                wasStar = c == '*';
 808054a:	f1a0 032a 	sub.w	r3, r0, #42	; 0x2a
 808054e:	425e      	negs	r6, r3
 8080550:	415e      	adcs	r6, r3
    }
    return _current;
  }

  void move() {
    _loaded = false;
 8080552:	73a5      	strb	r5, [r4, #14]
 8080554:	e7ed      	b.n	8080532 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x3c>
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
                if (c == '\0') return DeserializationError::IncompleteInput;
                if (c == '\n') break;
 8080556:	280a      	cmp	r0, #10
 8080558:	d0d0      	beq.n	80804fc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x6>
    }
    return _current;
  }

  void move() {
    _loaded = false;
 808055a:	73a5      	strb	r5, [r4, #14]
            // trailing comment
            case '/':
              // no need to skip "//"
              for (;;) {
                move();
                char c = current();
 808055c:	4620      	mov	r0, r4
 808055e:	f7ff ffbd 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
                if (c == '\0') return DeserializationError::IncompleteInput;
 8080562:	2800      	cmp	r0, #0
 8080564:	d1f7      	bne.n	8080556 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x60>
 8080566:	e7e8      	b.n	808053a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv+0x44>
              }
              break;

            // not a comment, just a '/'
            default:
              return DeserializationError::InvalidInput;
 8080568:	f04f 0002 	mov.w	r0, #2
 808056c:	bd70      	pop	{r4, r5, r6, pc}
          }
          break;

        default:
          return DeserializationError::Ok;
 808056e:	f04f 0000 	mov.w	r0, #0
      }
    }
  }
 8080572:	bd70      	pop	{r4, r5, r6, pc}

08080574 <_ZNK21ArduinoJson6110_1100011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>:
  VariantData *getElement(size_t index) const {
    return isArray() ? _content.asCollection.get(index) : 0;
  }

  template <typename TAdaptedString>
  VariantData *getMember(TAdaptedString key) const {
 8080574:	b508      	push	{r3, lr}
    return isObject() ? _content.asCollection.get(key) : 0;
 8080576:	7a02      	ldrb	r2, [r0, #8]
 8080578:	f002 0220 	and.w	r2, r2, #32
 808057c:	f002 03ff 	and.w	r3, r2, #255	; 0xff
 8080580:	b11a      	cbz	r2, 808058a <_ZNK21ArduinoJson6110_1100011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_+0x16>
  return 0;
}

template <typename TAdaptedString>
inline VariantData* CollectionData::get(TAdaptedString key) const {
  VariantSlot* slot = getSlot(key);
 8080582:	6800      	ldr	r0, [r0, #0]
 8080584:	f7ff fdb2 	bl	80800ec <_ZNK21ArduinoJson6110_1100014CollectionData7getSlotINS_21ConstRamStringAdapterEEEPNS_11VariantSlotET_.isra.13>
 8080588:	bd08      	pop	{r3, pc}
 808058a:	4618      	mov	r0, r3
  }
 808058c:	bd08      	pop	{r3, pc}
	...

08080590 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc>:
    if (err) return err;
    variant.setOwnedString(make_not_null(value));
    return DeserializationError::Ok;
  }

  DeserializationError parseQuotedString(const char *&result) {
 8080590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080594:	4604      	mov	r4, r0
 8080596:	460f      	mov	r7, r1

class StringMover {
 public:
  class StringBuilder {
   public:
    StringBuilder(char** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
 8080598:	6886      	ldr	r6, [r0, #8]
    StringBuilder builder = _stringStorage.startString();
    const char stopChar = current();
 808059a:	f7ff ff9f 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 808059e:	4680      	mov	r8, r0
    }
    return _current;
  }

  void move() {
    _loaded = false;
 80805a0:	2500      	movs	r5, #0
 80805a2:	73a5      	strb	r5, [r4, #14]
    StringBuilder builder = _stringStorage.startString();
    const char stopChar = current();

    move();
    for (;;) {
      char c = current();
 80805a4:	4620      	mov	r0, r4
 80805a6:	f7ff ff99 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
      move();
      if (c == stopChar) break;
 80805aa:	4580      	cmp	r8, r0
    }
    return _current;
  }

  void move() {
    _loaded = false;
 80805ac:	f04f 0300 	mov.w	r3, #0
 80805b0:	73a5      	strb	r5, [r4, #14]

    move();
    for (;;) {
      char c = current();
      move();
      if (c == stopChar) break;
 80805b2:	d026      	beq.n	8080602 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x72>

      if (c == '\0') return DeserializationError::IncompleteInput;
 80805b4:	b918      	cbnz	r0, 80805be <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x2e>
 80805b6:	f04f 0001 	mov.w	r0, #1
 80805ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

      if (c == '\\') {
 80805be:	285c      	cmp	r0, #92	; 0x5c
 80805c0:	d11a      	bne.n	80805f8 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x68>
        c = current();
 80805c2:	4620      	mov	r0, r4
 80805c4:	f7ff ff8a 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
        if (c == '\0') return DeserializationError::IncompleteInput;
 80805c8:	2800      	cmp	r0, #0
 80805ca:	d0f4      	beq.n	80805b6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x26>
        if (c == 'u') {
 80805cc:	2875      	cmp	r0, #117	; 0x75
 80805ce:	d001      	beq.n	80805d4 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x44>
 80805d0:	4b12      	ldr	r3, [pc, #72]	; (808061c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x8c>)
 80805d2:	e006      	b.n	80805e2 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x52>
          DeserializationError err = parseCodepoint(codepoint);
          if (err) return err;
          Utf8::encodeCodepoint(codepoint, builder);
          continue;
#else
          return DeserializationError::NotSupported;
 80805d4:	f04f 0004 	mov.w	r0, #4
 80805d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    for (;;) {
      if (p[0] == '\0') return c;
      if (p[0] == c) return p[1];
 80805dc:	4290      	cmp	r0, r2
 80805de:	d004      	beq.n	80805ea <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x5a>
      p += 2;
 80805e0:	3302      	adds	r3, #2

  // Optimized for code size on a 8-bit AVR
  static char unescapeChar(char c) {
    const char *p = escapeTable(true);
    for (;;) {
      if (p[0] == '\0') return c;
 80805e2:	781a      	ldrb	r2, [r3, #0]
 80805e4:	2a00      	cmp	r2, #0
 80805e6:	d1f9      	bne.n	80805dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x4c>
 80805e8:	e005      	b.n	80805f6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x66>
      if (p[0] == c) return p[1];
 80805ea:	7858      	ldrb	r0, [r3, #1]
#endif
        }
        // replace char
        c = EscapeSequence::unescapeChar(c);
        if (c == '\0') return DeserializationError::InvalidInput;
 80805ec:	b918      	cbnz	r0, 80805f6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x66>
 80805ee:	f04f 0002 	mov.w	r0, #2
 80805f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    return _current;
  }

  void move() {
    _loaded = false;
 80805f6:	73a5      	strb	r5, [r4, #14]

    void append(char c) {
      *(*_writePtr)++ = char(c);
 80805f8:	68a3      	ldr	r3, [r4, #8]
 80805fa:	1c5a      	adds	r2, r3, #1
 80805fc:	60a2      	str	r2, [r4, #8]
 80805fe:	7018      	strb	r0, [r3, #0]
 8080600:	e7d0      	b.n	80805a4 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x14>
    }

    char* complete() const {
      *(*_writePtr)++ = 0;
 8080602:	68a2      	ldr	r2, [r4, #8]
 8080604:	1c51      	adds	r1, r2, #1
 8080606:	60a1      	str	r1, [r4, #8]
 8080608:	7013      	strb	r3, [r2, #0]
      }

      builder.append(c);
    }

    result = builder.complete();
 808060a:	603e      	str	r6, [r7, #0]
    if (!result) return DeserializationError::NoMemory;
 808060c:	b91e      	cbnz	r6, 8080616 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc+0x86>
 808060e:	f04f 0003 	mov.w	r0, #3
 8080612:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return DeserializationError::Ok;
 8080616:	4618      	mov	r0, r3
  }
 8080618:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808061c:	08084a81 	.word	0x08084a81

08080620 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc>:
    }
    return DeserializationError::Ok;
  }

  static inline bool isBetween(char c, char min, char max) {
    return min <= c && c <= max;
 8080620:	f1a0 035f 	sub.w	r3, r0, #95	; 0x5f
 8080624:	2b1b      	cmp	r3, #27
 8080626:	d913      	bls.n	8080650 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc+0x30>
 8080628:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 808062c:	2b19      	cmp	r3, #25
 808062e:	d90f      	bls.n	8080650 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc+0x30>
  }

  static inline bool canBeInNonQuotedString(char c) {
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
 8080630:	f1a0 032b 	sub.w	r3, r0, #43	; 0x2b
 8080634:	b2db      	uxtb	r3, r3
 8080636:	2b0e      	cmp	r3, #14
 8080638:	d904      	bls.n	8080644 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc+0x24>
 808063a:	f1a0 022e 	sub.w	r2, r0, #46	; 0x2e
 808063e:	4250      	negs	r0, r2
 8080640:	4150      	adcs	r0, r2
 8080642:	4770      	bx	lr
 8080644:	f647 72e5 	movw	r2, #32741	; 0x7fe5
 8080648:	fa22 f303 	lsr.w	r3, r2, r3
 808064c:	07db      	lsls	r3, r3, #31
 808064e:	d5f4      	bpl.n	808063a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc+0x1a>
 8080650:	2001      	movs	r0, #1
  }
 8080652:	4770      	bx	lr

08080654 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE8parseKeyERPKc>:
      err = skipSpacesAndComments();
      if (err) return err;
    }
  }

  DeserializationError parseKey(const char *&key) {
 8080654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080658:	4604      	mov	r4, r0
 808065a:	460d      	mov	r5, r1
    if (isQuote(current())) {
 808065c:	f7ff ff3e 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
    return isBetween(c, '0', '9') || isBetween(c, '_', 'z') ||
           isBetween(c, 'A', 'Z') || c == '+' || c == '-' || c == '.';
  }

  static inline bool isQuote(char c) {
    return c == '\'' || c == '\"';
 8080660:	2827      	cmp	r0, #39	; 0x27
 8080662:	d02c      	beq.n	80806be <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE8parseKeyERPKc+0x6a>
 8080664:	2822      	cmp	r0, #34	; 0x22
 8080666:	d02a      	beq.n	80806be <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE8parseKeyERPKc+0x6a>
  }

  DeserializationError parseNonQuotedString(const char *&result) {
    StringBuilder builder = _stringStorage.startString();

    char c = current();
 8080668:	4620      	mov	r0, r4

class StringMover {
 public:
  class StringBuilder {
   public:
    StringBuilder(char** ptr) : _writePtr(ptr), _startPtr(*ptr) {}
 808066a:	68a7      	ldr	r7, [r4, #8]
 808066c:	f7ff ff36 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
    if (c == '\0') return DeserializationError::IncompleteInput;
 8080670:	4606      	mov	r6, r0
 8080672:	b308      	cbz	r0, 80806b8 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE8parseKeyERPKc+0x64>

    if (canBeInNonQuotedString(c)) {  // no quotes
 8080674:	f7ff ffd4 	bl	8080620 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc>
 8080678:	b1d8      	cbz	r0, 80806b2 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE8parseKeyERPKc+0x5e>
    }
    return _current;
  }

  void move() {
    _loaded = false;
 808067a:	f04f 0800 	mov.w	r8, #0

    void append(char c) {
      *(*_writePtr)++ = char(c);
 808067e:	68a3      	ldr	r3, [r4, #8]
 8080680:	f884 800e 	strb.w	r8, [r4, #14]
 8080684:	1c5a      	adds	r2, r3, #1
 8080686:	60a2      	str	r2, [r4, #8]

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
        move();
        builder.append(c);
        c = current();
 8080688:	4620      	mov	r0, r4
 808068a:	701e      	strb	r6, [r3, #0]
 808068c:	f7ff ff26 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080690:	4606      	mov	r6, r0

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;

    if (canBeInNonQuotedString(c)) {  // no quotes
      do {
 8080692:	f7ff ffc5 	bl	8080620 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc>
 8080696:	2800      	cmp	r0, #0
 8080698:	d1f1      	bne.n	808067e <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE8parseKeyERPKc+0x2a>
    }

    char* complete() const {
      *(*_writePtr)++ = 0;
 808069a:	68a3      	ldr	r3, [r4, #8]
      return DeserializationError::InvalidInput;
    }

    result = builder.complete();
    if (!result) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
 808069c:	2f00      	cmp	r7, #0
 808069e:	f103 0201 	add.w	r2, r3, #1
 80806a2:	60a2      	str	r2, [r4, #8]
 80806a4:	7018      	strb	r0, [r3, #0]
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
    }

    result = builder.complete();
 80806a6:	602f      	str	r7, [r5, #0]
    if (!result) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
 80806a8:	bf0c      	ite	eq
 80806aa:	2003      	moveq	r0, #3
 80806ac:	2000      	movne	r0, #0
 80806ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        move();
        builder.append(c);
        c = current();
      } while (canBeInNonQuotedString(c));
    } else {
      return DeserializationError::InvalidInput;
 80806b2:	2002      	movs	r0, #2
 80806b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

  DeserializationError parseNonQuotedString(const char *&result) {
    StringBuilder builder = _stringStorage.startString();

    char c = current();
    if (c == '\0') return DeserializationError::IncompleteInput;
 80806b8:	2001      	movs	r0, #1
 80806ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }

  DeserializationError parseKey(const char *&key) {
    if (isQuote(current())) {
      return parseQuotedString(key);
 80806be:	4629      	mov	r1, r5
 80806c0:	4620      	mov	r0, r4
 80806c2:	f7ff ff65 	bl	8080590 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc>
    } else {
      return parseNonQuotedString(key);
    }
  }
 80806c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080806ca <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>:

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char *s) {
 80806ca:	b538      	push	{r3, r4, r5, lr}
 80806cc:	4604      	mov	r4, r0
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
 80806ce:	4608      	mov	r0, r1

    // and dump it in the right order
    writeRaw(begin, end);
  }

  void writeRaw(const char *s) {
 80806d0:	460d      	mov	r5, r1
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
 80806d2:	f004 f97c 	bl	80849ce <strlen>
 80806d6:	4629      	mov	r1, r5
 80806d8:	4602      	mov	r2, r0
 80806da:	6820      	ldr	r0, [r4, #0]
 80806dc:	f7ff fd68 	bl	80801b0 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj>
 80806e0:	6863      	ldr	r3, [r4, #4]
 80806e2:	4418      	add	r0, r3
 80806e4:	6060      	str	r0, [r4, #4]
 80806e6:	bd38      	pop	{r3, r4, r5, pc}

080806e8 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>:
      }
    }
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
 80806e8:	b570      	push	{r4, r5, r6, lr}
        1e16,
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
        forge(0x5A827748, 0xF9301D32),  // 1e128
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
    };
 80806ea:	4d1b      	ldr	r5, [pc, #108]	; (8080758 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x70>)
      }
    }
    return m;
  }

  static T positiveBinaryPowerOfTen(int index) {
 80806ec:	4606      	mov	r6, r0
        1e16,
        forge(0x4693B8B5, 0xB5056E17),  // 1e32
        forge(0x4D384F03, 0xE93FF9F5),  // 1e64
        forge(0x5A827748, 0xF9301D32),  // 1e128
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
    };
 80806ee:	682b      	ldr	r3, [r5, #0]
 80806f0:	4c1a      	ldr	r4, [pc, #104]	; (808075c <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x74>)
 80806f2:	f013 0f01 	tst.w	r3, #1
 80806f6:	d11a      	bne.n	808072e <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x46>
 80806f8:	4628      	mov	r0, r5
 80806fa:	f7ff fcd6 	bl	80800aa <__cxa_guard_acquire>
 80806fe:	b1b0      	cbz	r0, 808072e <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x46>
 8080700:	a30d      	add	r3, pc, #52	; (adr r3, 8080738 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x50>)
 8080702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080706:	4628      	mov	r0, r5
 8080708:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 808070c:	a30c      	add	r3, pc, #48	; (adr r3, 8080740 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x58>)
 808070e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080712:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 8080716:	a30c      	add	r3, pc, #48	; (adr r3, 8080748 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x60>)
 8080718:	e9d3 2300 	ldrd	r2, r3, [r3]
 808071c:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 8080720:	a30b      	add	r3, pc, #44	; (adr r3, 8080750 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi+0x68>)
 8080722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080726:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 808072a:	f7ff fcc3 	bl	80800b4 <__cxa_guard_release>
    return factors[index];
 808072e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  }
 8080732:	e9d4 0100 	ldrd	r0, r1, [r4]
 8080736:	bd70      	pop	{r4, r5, r6, pc}
 8080738:	b5056e17 	.word	0xb5056e17
 808073c:	4693b8b5 	.word	0x4693b8b5
 8080740:	e93ff9f5 	.word	0xe93ff9f5
 8080744:	4d384f03 	.word	0x4d384f03
 8080748:	f9301d32 	.word	0xf9301d32
 808074c:	5a827748 	.word	0x5a827748
 8080750:	7f73bf3c 	.word	0x7f73bf3c
 8080754:	75154fdd 	.word	0x75154fdd
 8080758:	20000550 	.word	0x20000550
 808075c:	20000448 	.word	0x20000448

08080760 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>:

  static T negativeBinaryPowerOfTen(int index) {
 8080760:	b570      	push	{r4, r5, r6, lr}
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
    };
 8080762:	4d33      	ldr	r5, [pc, #204]	; (8080830 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xd0>)
        forge(0x75154FDD, 0x7F73BF3C)   // 1e256
    };
    return factors[index];
  }

  static T negativeBinaryPowerOfTen(int index) {
 8080764:	4606      	mov	r6, r0
        forge(0x3C9CD2B2, 0x97D889BC),  // 1e-16
        forge(0x3949F623, 0xD5A8A733),  // 1e-32
        forge(0x32A50FFD, 0x44F4A73D),  // 1e-64
        forge(0x255BBA08, 0xCF8C979D),  // 1e-128
        forge(0x0AC80628, 0x64AC6F43)   // 1e-256
    };
 8080766:	682b      	ldr	r3, [r5, #0]
 8080768:	4c32      	ldr	r4, [pc, #200]	; (8080834 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xd4>)
 808076a:	f013 0f01 	tst.w	r3, #1
 808076e:	d134      	bne.n	80807da <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x7a>
 8080770:	4628      	mov	r0, r5
 8080772:	f7ff fc9a 	bl	80800aa <__cxa_guard_acquire>
 8080776:	2800      	cmp	r0, #0
 8080778:	d02f      	beq.n	80807da <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x7a>
 808077a:	a31b      	add	r3, pc, #108	; (adr r3, 80807e8 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x88>)
 808077c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080780:	4628      	mov	r0, r5
 8080782:	e9c4 2300 	strd	r2, r3, [r4]
 8080786:	a31a      	add	r3, pc, #104	; (adr r3, 80807f0 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x90>)
 8080788:	e9d3 2300 	ldrd	r2, r3, [r3]
 808078c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8080790:	a319      	add	r3, pc, #100	; (adr r3, 80807f8 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0x98>)
 8080792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080796:	e9c4 2304 	strd	r2, r3, [r4, #16]
 808079a:	a319      	add	r3, pc, #100	; (adr r3, 8080800 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xa0>)
 808079c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80807a0:	e9c4 2306 	strd	r2, r3, [r4, #24]
 80807a4:	a318      	add	r3, pc, #96	; (adr r3, 8080808 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xa8>)
 80807a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80807aa:	e9c4 2308 	strd	r2, r3, [r4, #32]
 80807ae:	a318      	add	r3, pc, #96	; (adr r3, 8080810 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xb0>)
 80807b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80807b4:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
 80807b8:	a317      	add	r3, pc, #92	; (adr r3, 8080818 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xb8>)
 80807ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80807be:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
 80807c2:	a317      	add	r3, pc, #92	; (adr r3, 8080820 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xc0>)
 80807c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80807c8:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
 80807cc:	a316      	add	r3, pc, #88	; (adr r3, 8080828 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi+0xc8>)
 80807ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80807d2:	e9c4 2310 	strd	r2, r3, [r4, #64]	; 0x40
 80807d6:	f7ff fc6d 	bl	80800b4 <__cxa_guard_release>
    return factors[index];
 80807da:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
  }
 80807de:	e9d4 0100 	ldrd	r0, r1, [r4]
 80807e2:	bd70      	pop	{r4, r5, r6, pc}
 80807e4:	f3af 8000 	nop.w
 80807e8:	9999999a 	.word	0x9999999a
 80807ec:	3fb99999 	.word	0x3fb99999
 80807f0:	47ae147b 	.word	0x47ae147b
 80807f4:	3f847ae1 	.word	0x3f847ae1
 80807f8:	eb1c432d 	.word	0xeb1c432d
 80807fc:	3f1a36e2 	.word	0x3f1a36e2
 8080800:	e2308c3a 	.word	0xe2308c3a
 8080804:	3e45798e 	.word	0x3e45798e
 8080808:	97d889bc 	.word	0x97d889bc
 808080c:	3c9cd2b2 	.word	0x3c9cd2b2
 8080810:	d5a8a733 	.word	0xd5a8a733
 8080814:	3949f623 	.word	0x3949f623
 8080818:	44f4a73d 	.word	0x44f4a73d
 808081c:	32a50ffd 	.word	0x32a50ffd
 8080820:	cf8c979d 	.word	0xcf8c979d
 8080824:	255bba08 	.word	0x255bba08
 8080828:	64ac6f43 	.word	0x64ac6f43
 808082c:	0ac80628 	.word	0x0ac80628
 8080830:	20000500 	.word	0x20000500
 8080834:	20000508 	.word	0x20000508

08080838 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>:

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 8080838:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
 808083c:	780b      	ldrb	r3, [r1, #0]

template <typename A, typename B>
struct choose_largest : conditional<(sizeof(A) > sizeof(B)), A, B> {};

template <typename TFloat, typename TUInt>
inline ParsedNumber<TFloat, TUInt> parseNumber(const char *s) {
 808083e:	4604      	mov	r4, r0
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
 8080840:	2b2b      	cmp	r3, #43	; 0x2b
 8080842:	d004      	beq.n	808084e <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x16>
 8080844:	2b2d      	cmp	r3, #45	; 0x2d
 8080846:	d103      	bne.n	8080850 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x18>
    case '-':
      is_negative = true;
      s++;
 8080848:	3101      	adds	r1, #1
  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
  switch (*s) {
    case '-':
      is_negative = true;
 808084a:	2501      	movs	r5, #1
      s++;
      break;
 808084c:	e001      	b.n	8080852 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a>
    case '+':
      s++;
 808084e:	3101      	adds	r1, #1
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8080850:	2500      	movs	r5, #0
#if ARDUINOJSON_ENABLE_INFINITY
  if (*s == 'i' || *s == 'I')
    return is_negative ? -traits::inf() : traits::inf();
#endif

  if (!isdigit(*s) && *s != '.') return return_type();
 8080852:	780b      	ldrb	r3, [r1, #0]
 8080854:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8080858:	2a09      	cmp	r2, #9
 808085a:	d902      	bls.n	8080862 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x2a>
 808085c:	2b2e      	cmp	r3, #46	; 0x2e
 808085e:	f040 80ae 	bne.w	80809be <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x186>
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
 8080862:	f8df b200 	ldr.w	fp, [pc, #512]	; 8080a64 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x22c>
 8080866:	4688      	mov	r8, r1
  typedef typename traits::exponent_type exponent_t;
  typedef ParsedNumber<TFloat, TUInt> return_type;

  ARDUINOJSON_ASSERT(s != 0);

  bool is_negative = false;
 8080868:	2000      	movs	r0, #0
 808086a:	2100      	movs	r1, #0
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
 808086c:	f04f 3a99 	mov.w	sl, #2576980377	; 0x99999999
    mantissa *= 10;
 8080870:	f04f 0c0a 	mov.w	ip, #10

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
 8080874:	46c6      	mov	lr, r8
 8080876:	f81e 3b01 	ldrb.w	r3, [lr], #1
#pragma once

namespace ARDUINOJSON_NAMESPACE {

inline bool isdigit(char c) {
  return '0' <= c && c <= '9';
 808087a:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 808087e:	b2d2      	uxtb	r2, r2
 8080880:	2a09      	cmp	r2, #9
 8080882:	d814      	bhi.n	80808ae <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x76>
    uint8_t digit = uint8_t(*s - '0');
    if (mantissa > maxUint / 10) break;
 8080884:	458b      	cmp	fp, r1
 8080886:	bf08      	it	eq
 8080888:	4582      	cmpeq	sl, r0
 808088a:	d311      	bcc.n	80808b0 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x78>
    mantissa *= 10;
 808088c:	fb0c f301 	mul.w	r3, ip, r1
 8080890:	fba0 010c 	umull	r0, r1, r0, ip
 8080894:	4419      	add	r1, r3
    if (mantissa > maxUint - digit) break;
 8080896:	2300      	movs	r3, #0
 8080898:	b2d2      	uxtb	r2, r2
 808089a:	43df      	mvns	r7, r3
 808089c:	43d6      	mvns	r6, r2
 808089e:	428f      	cmp	r7, r1
 80808a0:	bf08      	it	eq
 80808a2:	4286      	cmpeq	r6, r0
 80808a4:	d304      	bcc.n	80808b0 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x78>
    mantissa += digit;
 80808a6:	1880      	adds	r0, r0, r2
 80808a8:	4159      	adcs	r1, r3

  mantissa_t mantissa = 0;
  exponent_t exponent_offset = 0;
  const mantissa_t maxUint = TUInt(-1);

  while (isdigit(*s)) {
 80808aa:	46f0      	mov	r8, lr
 80808ac:	e7e2      	b.n	8080874 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x3c>
    if (mantissa > maxUint - digit) break;
    mantissa += digit;
    s++;
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);
 80808ae:	b123      	cbz	r3, 80808ba <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x82>

  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 80808b0:	2300      	movs	r3, #0
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
 80808b2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 80808b6:	4f68      	ldr	r7, [pc, #416]	; (8080a58 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x220>)
 80808b8:	e00f      	b.n	80808da <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xa2>

  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
 80808ba:	e9c4 0100 	strd	r0, r1, [r4]
 80808be:	f003 fb7f 	bl	8083fc0 <__aeabi_ul2d>
 80808c2:	2d00      	cmp	r5, #0
 80808c4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80808c8:	bf0c      	ite	eq
 80808ca:	2306      	moveq	r3, #6
 80808cc:	2307      	movne	r3, #7
 80808ce:	e0b8      	b.n	8080a42 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x20a>

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
    mantissa /= 10;
 80808d0:	2300      	movs	r3, #0
 80808d2:	220a      	movs	r2, #10
 80808d4:	f003 fe64 	bl	80845a0 <__aeabi_uldivmod>
  }

  if (*s == '\0') return return_type(TUInt(mantissa), is_negative);

  // avoid mantissa overflow
  while (mantissa > traits::mantissa_max) {
 80808d8:	464b      	mov	r3, r9
 80808da:	428f      	cmp	r7, r1
 80808dc:	bf08      	it	eq
 80808de:	4286      	cmpeq	r6, r0
 80808e0:	f103 0901 	add.w	r9, r3, #1
 80808e4:	d3f4      	bcc.n	80808d0 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x98>
 80808e6:	ebc8 0303 	rsb	r3, r8, r3
 80808ea:	eb03 0608 	add.w	r6, r3, r8
 80808ee:	4642      	mov	r2, r8
    mantissa /= 10;
    exponent_offset++;
  }

  // remaing digits can't fit in the mantissa
  while (isdigit(*s)) {
 80808f0:	f818 7b01 	ldrb.w	r7, [r8], #1
 80808f4:	b236      	sxth	r6, r6
 80808f6:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
 80808fa:	f1be 0f09 	cmp.w	lr, #9
 80808fe:	d9f4      	bls.n	80808ea <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xb2>
    exponent_offset++;
    s++;
  }

  if (*s == '.') {
 8080900:	2f2e      	cmp	r7, #46	; 0x2e
 8080902:	d11d      	bne.n	8080940 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x108>
    s++;
    while (isdigit(*s)) {
      if (mantissa < traits::mantissa_max / 10) {
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8080904:	f04f 0c0a 	mov.w	ip, #10
 8080908:	46c6      	mov	lr, r8
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
      if (mantissa < traits::mantissa_max / 10) {
 808090a:	f20f 1944 	addw	r9, pc, #324	; 0x144
 808090e:	e9d9 8900 	ldrd	r8, r9, [r9]
 8080912:	4672      	mov	r2, lr
 8080914:	7817      	ldrb	r7, [r2, #0]
 8080916:	f10e 0e01 	add.w	lr, lr, #1
 808091a:	3f30      	subs	r7, #48	; 0x30
 808091c:	b2ff      	uxtb	r7, r7
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
 808091e:	2f09      	cmp	r7, #9
 8080920:	d80e      	bhi.n	8080940 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x108>
      if (mantissa < traits::mantissa_max / 10) {
 8080922:	4589      	cmp	r9, r1
 8080924:	bf08      	it	eq
 8080926:	4580      	cmpeq	r8, r0
 8080928:	d3f3      	bcc.n	8080912 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xda>
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 808092a:	fba0 230c 	umull	r2, r3, r0, ip
 808092e:	fb0c 3301 	mla	r3, ip, r1, r3
 8080932:	19d0      	adds	r0, r2, r7
        exponent_offset--;
 8080934:	f106 36ff 	add.w	r6, r6, #4294967295	; 0xffffffff

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
      if (mantissa < traits::mantissa_max / 10) {
        mantissa = mantissa * 10 + uint8_t(*s - '0');
 8080938:	f143 0100 	adc.w	r1, r3, #0
        exponent_offset--;
 808093c:	b236      	sxth	r6, r6
    s++;
  }

  if (*s == '.') {
    s++;
    while (isdigit(*s)) {
 808093e:	e7e8      	b.n	8080912 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0xda>
      s++;
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
 8080940:	7813      	ldrb	r3, [r2, #0]
 8080942:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8080946:	2b45      	cmp	r3, #69	; 0x45
 8080948:	d133      	bne.n	80809b2 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x17a>
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
 808094a:	7853      	ldrb	r3, [r2, #1]
 808094c:	2b2d      	cmp	r3, #45	; 0x2d
 808094e:	d103      	bne.n	8080958 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x120>
      negative_exponent = true;
      s++;
 8080950:	1c97      	adds	r7, r2, #2
  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
 8080952:	f04f 0e01 	mov.w	lr, #1
 8080956:	e005      	b.n	8080964 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x12c>
      s++;
    } else if (*s == '+') {
 8080958:	2b2b      	cmp	r3, #43	; 0x2b
    }
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
 808095a:	bf14      	ite	ne
 808095c:	1c57      	addne	r7, r2, #1
    bool negative_exponent = false;
    if (*s == '-') {
      negative_exponent = true;
      s++;
    } else if (*s == '+') {
      s++;
 808095e:	1c97      	addeq	r7, r2, #2
  }

  int exponent = 0;
  if (*s == 'e' || *s == 'E') {
    s++;
    bool negative_exponent = false;
 8080960:	f04f 0e00 	mov.w	lr, #0
 8080964:	2300      	movs	r3, #0
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
 8080966:	f04f 080a 	mov.w	r8, #10
 808096a:	463a      	mov	r2, r7
      s++;
    } else if (*s == '+') {
      s++;
    }

    while (isdigit(*s)) {
 808096c:	f817 cb01 	ldrb.w	ip, [r7], #1
 8080970:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8080974:	fa5f f98c 	uxtb.w	r9, ip
 8080978:	f1b9 0f09 	cmp.w	r9, #9
 808097c:	d814      	bhi.n	80809a8 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x170>
      exponent = exponent * 10 + (*s - '0');
 808097e:	fb08 c303 	mla	r3, r8, r3, ip
      if (exponent + exponent_offset > traits::exponent_max) {
 8080982:	18f2      	adds	r2, r6, r3
 8080984:	f5b2 7f9a 	cmp.w	r2, #308	; 0x134
 8080988:	ddef      	ble.n	808096a <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x132>
        if (negative_exponent)
          return is_negative ? -0.0f : 0.0f;
 808098a:	2200      	movs	r2, #0
    }

    while (isdigit(*s)) {
      exponent = exponent * 10 + (*s - '0');
      if (exponent + exponent_offset > traits::exponent_max) {
        if (negative_exponent)
 808098c:	f1be 0f00 	cmp.w	lr, #0
 8080990:	d005      	beq.n	808099e <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x166>
          return is_negative ? -0.0f : 0.0f;
 8080992:	b115      	cbz	r5, 808099a <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x162>
 8080994:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8080998:	e050      	b.n	8080a3c <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
 808099a:	2300      	movs	r3, #0
 808099c:	e04e      	b.n	8080a3c <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
        else
          return is_negative ? -traits::inf() : traits::inf();
 808099e:	b90d      	cbnz	r5, 80809a4 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x16c>
 80809a0:	4b2e      	ldr	r3, [pc, #184]	; (8080a5c <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x224>)
 80809a2:	e04b      	b.n	8080a3c <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
 80809a4:	4b2e      	ldr	r3, [pc, #184]	; (8080a60 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x228>)
 80809a6:	e049      	b.n	8080a3c <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x204>
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
 80809a8:	f1be 0f00 	cmp.w	lr, #0
 80809ac:	d002      	beq.n	80809b4 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x17c>
 80809ae:	425b      	negs	r3, r3
 80809b0:	e000      	b.n	80809b4 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x17c>
      }
      s++;
    }
  }

  int exponent = 0;
 80809b2:	2300      	movs	r3, #0
    if (negative_exponent) exponent = -exponent;
  }
  exponent += exponent_offset;

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();
 80809b4:	f892 9000 	ldrb.w	r9, [r2]
 80809b8:	f1b9 0f00 	cmp.w	r9, #0
 80809bc:	d009      	beq.n	80809d2 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x19a>

namespace ARDUINOJSON_NAMESPACE {

template <typename TFloat, typename TUInt>
struct ParsedNumber {
  ParsedNumber() : uintValue(0), floatValue(0), _type(VALUE_IS_NULL) {}
 80809be:	2200      	movs	r2, #0
 80809c0:	2300      	movs	r3, #0
 80809c2:	e9c4 2300 	strd	r2, r3, [r4]
 80809c6:	2300      	movs	r3, #0
 80809c8:	2200      	movs	r2, #0
 80809ca:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80809ce:	2300      	movs	r3, #0
 80809d0:	e037      	b.n	8080a42 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x20a>
      }
      s++;
    }
    if (negative_exponent) exponent = -exponent;
  }
  exponent += exponent_offset;
 80809d2:	441e      	add	r6, r3

  // we should be at the end of the string, otherwise it's an error
  if (*s != '\0') return return_type();

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);
 80809d4:	f003 faf4 	bl	8083fc0 <__aeabi_ul2d>
  typedef int16_t exponent_type;
  static const exponent_type exponent_max = 308;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
 80809d8:	2e00      	cmp	r6, #0
 80809da:	4680      	mov	r8, r0
 80809dc:	460f      	mov	r7, r1
 80809de:	dd12      	ble.n	8080a06 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1ce>
      for (uint8_t index = 0; e != 0; index++) {
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
 80809e0:	07f2      	lsls	r2, r6, #31
 80809e2:	d50b      	bpl.n	80809fc <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1c4>
 80809e4:	fa5f f089 	uxtb.w	r0, r9
 80809e8:	f7ff fe7e 	bl	80806e8 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 80809ec:	4602      	mov	r2, r0
 80809ee:	460b      	mov	r3, r1
 80809f0:	4640      	mov	r0, r8
 80809f2:	4639      	mov	r1, r7
 80809f4:	f003 fb1a 	bl	808402c <__aeabi_dmul>
 80809f8:	4680      	mov	r8, r0
 80809fa:	460f      	mov	r7, r1
  static const exponent_type exponent_max = 308;

  template <typename TExponent>
  static T make_float(T m, TExponent e) {
    if (e > 0) {
      for (uint8_t index = 0; e != 0; index++) {
 80809fc:	1076      	asrs	r6, r6, #1
 80809fe:	f109 0901 	add.w	r9, r9, #1
 8080a02:	d1ed      	bne.n	80809e0 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1a8>
 8080a04:	e013      	b.n	8080a2e <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f6>
        if (e & 1) m *= positiveBinaryPowerOfTen(index);
        e >>= 1;
      }
    } else {
      e = TExponent(-e);
 8080a06:	4276      	negs	r6, r6
      for (uint8_t index = 0; e != 0; index++) {
 8080a08:	b18e      	cbz	r6, 8080a2e <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1f6>
        if (e & 1) m *= negativeBinaryPowerOfTen(index);
 8080a0a:	07f3      	lsls	r3, r6, #31
 8080a0c:	d50b      	bpl.n	8080a26 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1ee>
 8080a0e:	fa5f f089 	uxtb.w	r0, r9
 8080a12:	f7ff fea5 	bl	8080760 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 8080a16:	4602      	mov	r2, r0
 8080a18:	460b      	mov	r3, r1
 8080a1a:	4640      	mov	r0, r8
 8080a1c:	4639      	mov	r1, r7
 8080a1e:	f003 fb05 	bl	808402c <__aeabi_dmul>
 8080a22:	4680      	mov	r8, r0
 8080a24:	460f      	mov	r7, r1
        e >>= 1;
 8080a26:	1076      	asrs	r6, r6, #1
 8080a28:	f109 0901 	add.w	r9, r9, #1
 8080a2c:	e7ec      	b.n	8080a08 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1d0>

  return is_negative ? -result : result;
 8080a2e:	b115      	cbz	r5, 8080a36 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x1fe>
 8080a30:	f107 4100 	add.w	r1, r7, #2147483648	; 0x80000000
 8080a34:	e000      	b.n	8080a38 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc+0x200>
 8080a36:	4639      	mov	r1, r7
  ParsedNumber(TUInt value, bool is_negative)
      : uintValue(value),
        floatValue(TFloat(value)),
        _type(uint8_t(is_negative ? VALUE_IS_NEGATIVE_INTEGER
                                  : VALUE_IS_POSITIVE_INTEGER)) {}
  ParsedNumber(TFloat value) : floatValue(value), _type(VALUE_IS_FLOAT) {}
 8080a38:	4642      	mov	r2, r8
 8080a3a:	460b      	mov	r3, r1
 8080a3c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8080a40:	2308      	movs	r3, #8
 8080a42:	7423      	strb	r3, [r4, #16]
  if (*s != '\0') return return_type();

  TFloat result = traits::make_float(static_cast<TFloat>(mantissa), exponent);

  return is_negative ? -result : result;
}
 8080a44:	4620      	mov	r0, r4
 8080a46:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8080a4a:	bf00      	nop
 8080a4c:	f3af 8000 	nop.w
 8080a50:	99999998 	.word	0x99999998
 8080a54:	00019999 	.word	0x00019999
 8080a58:	000fffff 	.word	0x000fffff
 8080a5c:	7ff00000 	.word	0x7ff00000
 8080a60:	fff00000 	.word	0xfff00000
 8080a64:	19999999 	.word	0x19999999

08080a68 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE>:
    result = builder.complete();
    if (!result) return DeserializationError::NoMemory;
    return DeserializationError::Ok;
  }

  DeserializationError parseNumericValue(VariantData &result) {
 8080a68:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8080a6c:	b097      	sub	sp, #92	; 0x5c
 8080a6e:	4680      	mov	r8, r0
 8080a70:	460d      	mov	r5, r1
    char buffer[64];
    uint8_t n = 0;

    char c = current();
 8080a72:	f7ff fd33 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080a76:	2400      	movs	r4, #0
 8080a78:	4607      	mov	r7, r0
    }
    return _current;
  }

  void move() {
    _loaded = false;
 8080a7a:	46a1      	mov	r9, r4
  DeserializationError parseNumericValue(VariantData &result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
 8080a7c:	4638      	mov	r0, r7
 8080a7e:	b2e6      	uxtb	r6, r4
 8080a80:	f7ff fdce 	bl	8080620 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE22canBeInNonQuotedStringEc>
 8080a84:	b158      	cbz	r0, 8080a9e <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x36>
 8080a86:	2c3f      	cmp	r4, #63	; 0x3f
 8080a88:	d009      	beq.n	8080a9e <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x36>
      move();
      buffer[n++] = c;
 8080a8a:	ab06      	add	r3, sp, #24
 8080a8c:	54e7      	strb	r7, [r4, r3]
    }
    return _current;
  }

  void move() {
    _loaded = false;
 8080a8e:	f888 900e 	strb.w	r9, [r8, #14]

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
      move();
      buffer[n++] = c;
      c = current();
 8080a92:	4640      	mov	r0, r8
 8080a94:	f7ff fd22 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080a98:	3401      	adds	r4, #1
 8080a9a:	4607      	mov	r7, r0
  DeserializationError parseNumericValue(VariantData &result) {
    char buffer[64];
    uint8_t n = 0;

    char c = current();
    while (canBeInNonQuotedString(c) && n < 63) {
 8080a9c:	e7ee      	b.n	8080a7c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x14>
      move();
      buffer[n++] = c;
      c = current();
    }
    buffer[n] = 0;
 8080a9e:	ab16      	add	r3, sp, #88	; 0x58
 8080aa0:	4433      	add	r3, r6
 8080aa2:	2400      	movs	r4, #0
 8080aa4:	f803 4c40 	strb.w	r4, [r3, #-64]

    c = buffer[0];
 8080aa8:	f89d 3018 	ldrb.w	r3, [sp, #24]
    if (c == 't') {  // true
 8080aac:	2b74      	cmp	r3, #116	; 0x74
 8080aae:	d109      	bne.n	8080ac4 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x5c>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
 8080ab0:	2105      	movs	r1, #5
 8080ab2:	f105 0008 	add.w	r0, r5, #8
 8080ab6:	f7ff fb13 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asInteger = static_cast<UInt>(value);
 8080aba:	2201      	movs	r2, #1
 8080abc:	2300      	movs	r3, #0
 8080abe:	e9c5 2300 	strd	r2, r3, [r5]
 8080ac2:	e010      	b.n	8080ae6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x7e>
      result.setBoolean(true);
      return n == 4 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
    }
    if (c == 'f') {  // false
 8080ac4:	2b66      	cmp	r3, #102	; 0x66
 8080ac6:	d10c      	bne.n	8080ae2 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x7a>
  void remove(TAdaptedString key) {
    if (isObject()) _content.asCollection.remove(key);
  }

  void setBoolean(bool value) {
    setType(VALUE_IS_BOOLEAN);
 8080ac8:	f105 0008 	add.w	r0, r5, #8
 8080acc:	2105      	movs	r1, #5
 8080ace:	f7ff fb07 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asInteger = static_cast<UInt>(value);
 8080ad2:	2200      	movs	r2, #0
 8080ad4:	2300      	movs	r3, #0
 8080ad6:	e9c5 2300 	strd	r2, r3, [r5]
      result.setBoolean(false);
      return n == 5 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
 8080ada:	1f70      	subs	r0, r6, #5
 8080adc:	bf18      	it	ne
 8080ade:	2001      	movne	r0, #1
 8080ae0:	e024      	b.n	8080b2c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0xc4>
    }
    if (c == 'n') {  // null
 8080ae2:	2b6e      	cmp	r3, #110	; 0x6e
 8080ae4:	d101      	bne.n	8080aea <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x82>
      // the variant is already null
      return n == 4 ? DeserializationError::Ok
                    : DeserializationError::IncompleteInput;
 8080ae6:	1f30      	subs	r0, r6, #4
 8080ae8:	e7f8      	b.n	8080adc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x74>
    }

    ParsedNumber<Float, UInt> num = parseNumber<Float, UInt>(buffer);
 8080aea:	a906      	add	r1, sp, #24
 8080aec:	4668      	mov	r0, sp
 8080aee:	f7ff fea3 	bl	8080838 <_ZN21ArduinoJson6110_1100011parseNumberIdyEENS_12ParsedNumberIT_T0_EEPKc>
 8080af2:	e9dd 6700 	ldrd	r6, r7, [sp]

    switch (num.type()) {
 8080af6:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8080afa:	2907      	cmp	r1, #7
 8080afc:	d003      	beq.n	8080b06 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0x9e>
 8080afe:	2908      	cmp	r1, #8
 8080b00:	d008      	beq.n	8080b14 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0xac>
 8080b02:	2906      	cmp	r1, #6
 8080b04:	d110      	bne.n	8080b28 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0xc0>
      setNegativeInteger(~static_cast<UInt>(value) + 1);
    }
  }

  void setPositiveInteger(UInt value) {
    setType(VALUE_IS_POSITIVE_INTEGER);
 8080b06:	f105 0008 	add.w	r0, r5, #8
 8080b0a:	f7ff fae9 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asInteger = value;
 8080b0e:	e9c5 6700 	strd	r6, r7, [r5]
 8080b12:	e007      	b.n	8080b24 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0xbc>
    setType(VALUE_IS_BOOLEAN);
    _content.asInteger = static_cast<UInt>(value);
  }

  void setFloat(Float value) {
    setType(VALUE_IS_FLOAT);
 8080b14:	f105 0008 	add.w	r0, r5, #8
      case VALUE_IS_POSITIVE_INTEGER:
        result.setPositiveInteger(num.uintValue);
        return DeserializationError::Ok;

      case VALUE_IS_FLOAT:
        result.setFloat(num.floatValue);
 8080b18:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8080b1c:	f7ff fae0 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    _content.asFloat = value;
 8080b20:	e9c5 6700 	strd	r6, r7, [r5]
        return DeserializationError::Ok;
 8080b24:	4620      	mov	r0, r4
 8080b26:	e001      	b.n	8080b2c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE+0xc4>
    }

    return DeserializationError::InvalidInput;
 8080b28:	f04f 0002 	mov.w	r0, #2
  }
 8080b2c:	b017      	add	sp, #92	; 0x5c
 8080b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08080b32 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE>:
    if (current() != charToSkip) return false;
    move();
    return true;
  }

  DeserializationError parseVariant(VariantData &variant) {
 8080b32:	b570      	push	{r4, r5, r6, lr}
 8080b34:	b088      	sub	sp, #32
 8080b36:	460c      	mov	r4, r1
 8080b38:	4606      	mov	r6, r0
    DeserializationError err = skipSpacesAndComments();
 8080b3a:	f7ff fcdc 	bl	80804f6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>
    if (err) return err;
 8080b3e:	a901      	add	r1, sp, #4
    move();
    return true;
  }

  DeserializationError parseVariant(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
 8080b40:	f88d 0004 	strb.w	r0, [sp, #4]
    if (err) return err;
 8080b44:	a804      	add	r0, sp, #16
 8080b46:	f7ff fb27 	bl	8080198 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
 8080b4a:	9b04      	ldr	r3, [sp, #16]
 8080b4c:	2b00      	cmp	r3, #0
 8080b4e:	d13e      	bne.n	8080bce <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x9c>
 8080b50:	9d05      	ldr	r5, [sp, #20]
 8080b52:	f015 0501 	ands.w	r5, r5, #1
 8080b56:	d13a      	bne.n	8080bce <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x9c>

    switch (current()) {
 8080b58:	4630      	mov	r0, r6
 8080b5a:	f7ff fcbf 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080b5e:	2827      	cmp	r0, #39	; 0x27
 8080b60:	d110      	bne.n	8080b84 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x52>
    }
  }

  DeserializationError parseStringValue(VariantData &variant) {
    const char *value;
    DeserializationError err = parseQuotedString(value);
 8080b62:	a903      	add	r1, sp, #12
 8080b64:	4630      	mov	r0, r6
 8080b66:	f7ff fd13 	bl	8080590 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseQuotedStringERPKc>
    if (err) return err;
 8080b6a:	a902      	add	r1, sp, #8
    }
  }

  DeserializationError parseStringValue(VariantData &variant) {
    const char *value;
    DeserializationError err = parseQuotedString(value);
 8080b6c:	f88d 0008 	strb.w	r0, [sp, #8]
    if (err) return err;
 8080b70:	a806      	add	r0, sp, #24
 8080b72:	f7ff fb11 	bl	8080198 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
 8080b76:	9b06      	ldr	r3, [sp, #24]
 8080b78:	bb63      	cbnz	r3, 8080bd4 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0xa2>
 8080b7a:	9807      	ldr	r0, [sp, #28]
 8080b7c:	f010 0201 	ands.w	r2, r0, #1
 8080b80:	d128      	bne.n	8080bd4 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0xa2>
 8080b82:	e02a      	b.n	8080bda <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0xa8>

  DeserializationError parseVariant(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    switch (current()) {
 8080b84:	d807      	bhi.n	8080b96 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x64>
 8080b86:	2822      	cmp	r0, #34	; 0x22
 8080b88:	d0eb      	beq.n	8080b62 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x30>
      case '\"':
      case '\'':
        return parseStringValue(variant);

      default:
        return parseNumericValue(variant);
 8080b8a:	4621      	mov	r1, r4
 8080b8c:	4630      	mov	r0, r6
 8080b8e:	f7ff ff6b 	bl	8080a68 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE17parseNumericValueERNS_11VariantDataE>
 8080b92:	b2c0      	uxtb	r0, r0
 8080b94:	e029      	b.n	8080bea <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0xb8>

  DeserializationError parseVariant(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    switch (current()) {
 8080b96:	285b      	cmp	r0, #91	; 0x5b
 8080b98:	d10b      	bne.n	8080bb2 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x80>
    setType(VALUE_IS_POSITIVE_INTEGER);
    _content.asInteger = static_cast<UInt>(value);
  }

  CollectionData &toArray() {
    setType(VALUE_IS_ARRAY);
 8080b9a:	f104 0008 	add.w	r0, r4, #8
 8080b9e:	2140      	movs	r1, #64	; 0x40
 8080ba0:	f7ff fa9e 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
 8080ba4:	6025      	str	r5, [r4, #0]
  _tail = 0;
 8080ba6:	6065      	str	r5, [r4, #4]
      case '[':
        return parseArray(variant.toArray());
 8080ba8:	4621      	mov	r1, r4
 8080baa:	4630      	mov	r0, r6
 8080bac:	f000 f81f 	bl	8080bee <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE>
 8080bb0:	e7ef      	b.n	8080b92 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x60>

  DeserializationError parseVariant(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    switch (current()) {
 8080bb2:	287b      	cmp	r0, #123	; 0x7b
 8080bb4:	d1e9      	bne.n	8080b8a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x58>
    _content.asCollection.clear();
    return _content.asCollection;
  }

  CollectionData &toObject() {
    setType(VALUE_IS_OBJECT);
 8080bb6:	f104 0008 	add.w	r0, r4, #8
 8080bba:	2120      	movs	r1, #32
 8080bbc:	f7ff fa90 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
  if (!slotSetKey(slot, key, pool)) return 0;
  return slot->data();
}

inline void CollectionData::clear() {
  _head = 0;
 8080bc0:	6025      	str	r5, [r4, #0]
  _tail = 0;
 8080bc2:	6065      	str	r5, [r4, #4]
      case '[':
        return parseArray(variant.toArray());

      case '{':
        return parseObject(variant.toObject());
 8080bc4:	4621      	mov	r1, r4
 8080bc6:	4630      	mov	r0, r6
 8080bc8:	f000 f877 	bl	8080cba <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE>
 8080bcc:	e7e1      	b.n	8080b92 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0x60>
    return true;
  }

  DeserializationError parseVariant(VariantData &variant) {
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;
 8080bce:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8080bd2:	e00a      	b.n	8080bea <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0xb8>
  }

  DeserializationError parseStringValue(VariantData &variant) {
    const char *value;
    DeserializationError err = parseQuotedString(value);
    if (err) return err;
 8080bd4:	f89d 0008 	ldrb.w	r0, [sp, #8]
 8080bd8:	e007      	b.n	8080bea <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE+0xb8>
  void setNull() {
    setType(VALUE_IS_NULL);
  }

  void setOwnedString(not_null<const char *> s) {
    setType(VALUE_IS_OWNED_STRING);
 8080bda:	f104 0008 	add.w	r0, r4, #8
 8080bde:	2104      	movs	r1, #4
    variant.setOwnedString(make_not_null(value));
 8080be0:	9d03      	ldr	r5, [sp, #12]
 8080be2:	f7ff fa7d 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    return DeserializationError::Ok;
 8080be6:	4610      	mov	r0, r2
    _content.asString = s.get();
 8080be8:	6025      	str	r5, [r4, #0]
        return parseStringValue(variant);

      default:
        return parseNumericValue(variant);
    }
  }
 8080bea:	b008      	add	sp, #32
 8080bec:	bd70      	pop	{r4, r5, r6, pc}

08080bee <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE>:

  DeserializationError parseArray(CollectionData &array) {
 8080bee:	b570      	push	{r4, r5, r6, lr}
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8080bf0:	7b03      	ldrb	r3, [r0, #12]
      default:
        return parseNumericValue(variant);
    }
  }

  DeserializationError parseArray(CollectionData &array) {
 8080bf2:	b088      	sub	sp, #32
 8080bf4:	4604      	mov	r4, r0
 8080bf6:	460e      	mov	r6, r1
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8080bf8:	b913      	cbnz	r3, 8080c00 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x12>
 8080bfa:	f04f 0005 	mov.w	r0, #5
 8080bfe:	e05a      	b.n	8080cb6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0xc8>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
 8080c00:	f7ff fc6c 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080c04:	285b      	cmp	r0, #91	; 0x5b
 8080c06:	d110      	bne.n	8080c2a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x3c>
    }
    return _current;
  }

  void move() {
    _loaded = false;
 8080c08:	2300      	movs	r3, #0
 8080c0a:	73a3      	strb	r3, [r4, #14]

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
 8080c0c:	4620      	mov	r0, r4
 8080c0e:	f7ff fc72 	bl	80804f6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>
    if (err) return err;
 8080c12:	a901      	add	r1, sp, #4

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
 8080c14:	f88d 0004 	strb.w	r0, [sp, #4]
    if (err) return err;
 8080c18:	a802      	add	r0, sp, #8
 8080c1a:	f7ff fabd 	bl	8080198 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
 8080c1e:	9b02      	ldr	r3, [sp, #8]
 8080c20:	b9bb      	cbnz	r3, 8080c52 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x64>
 8080c22:	9b03      	ldr	r3, [sp, #12]
 8080c24:	07da      	lsls	r2, r3, #31
 8080c26:	d414      	bmi.n	8080c52 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x64>
 8080c28:	e016      	b.n	8080c58 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x6a>

  DeserializationError parseArray(CollectionData &array) {
    if (_nestingLimit == 0) return DeserializationError::TooDeep;

    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;
 8080c2a:	f04f 0002 	mov.w	r0, #2
 8080c2e:	e042      	b.n	8080cb6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0xc8>
      // Allocate slot in array
      VariantData *value = array.add(_pool);
      if (!value) return DeserializationError::NoMemory;

      // 1 - Parse value
      _nestingLimit--;
 8080c30:	7b23      	ldrb	r3, [r4, #12]
      err = parseVariant(*value);
 8080c32:	4620      	mov	r0, r4
      // Allocate slot in array
      VariantData *value = array.add(_pool);
      if (!value) return DeserializationError::NoMemory;

      // 1 - Parse value
      _nestingLimit--;
 8080c34:	3b01      	subs	r3, #1
 8080c36:	7323      	strb	r3, [r4, #12]
      err = parseVariant(*value);
 8080c38:	f7ff ff7b 	bl	8080b32 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE>
      _nestingLimit++;
 8080c3c:	7b23      	ldrb	r3, [r4, #12]
      VariantData *value = array.add(_pool);
      if (!value) return DeserializationError::NoMemory;

      // 1 - Parse value
      _nestingLimit--;
      err = parseVariant(*value);
 8080c3e:	f88d 0004 	strb.w	r0, [sp, #4]
      _nestingLimit++;
 8080c42:	3301      	adds	r3, #1
 8080c44:	7323      	strb	r3, [r4, #12]
      if (err) return err;
 8080c46:	a901      	add	r1, sp, #4
 8080c48:	a804      	add	r0, sp, #16
 8080c4a:	f7ff faa5 	bl	8080198 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
 8080c4e:	9b04      	ldr	r3, [sp, #16]
 8080c50:	b153      	cbz	r3, 8080c68 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x7a>
    // Check opening braket
    if (!eat('[')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;
 8080c52:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8080c56:	e02e      	b.n	8080cb6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0xc8>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
 8080c58:	4620      	mov	r0, r4
 8080c5a:	f7ff fc3f 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080c5e:	285d      	cmp	r0, #93	; 0x5d
 8080c60:	d120      	bne.n	8080ca4 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0xb6>
    }
    return _current;
  }

  void move() {
    _loaded = false;
 8080c62:	2000      	movs	r0, #0
 8080c64:	73a0      	strb	r0, [r4, #14]
 8080c66:	e026      	b.n	8080cb6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0xc8>

      // 1 - Parse value
      _nestingLimit--;
      err = parseVariant(*value);
      _nestingLimit++;
      if (err) return err;
 8080c68:	9b05      	ldr	r3, [sp, #20]
 8080c6a:	07db      	lsls	r3, r3, #31
 8080c6c:	d4f1      	bmi.n	8080c52 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x64>

      // 2 - Skip spaces
      err = skipSpacesAndComments();
 8080c6e:	4620      	mov	r0, r4
 8080c70:	f7ff fc41 	bl	80804f6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>
      if (err) return err;
 8080c74:	a901      	add	r1, sp, #4
      err = parseVariant(*value);
      _nestingLimit++;
      if (err) return err;

      // 2 - Skip spaces
      err = skipSpacesAndComments();
 8080c76:	f88d 0004 	strb.w	r0, [sp, #4]
      if (err) return err;
 8080c7a:	a806      	add	r0, sp, #24
 8080c7c:	f7ff fa8c 	bl	8080198 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
 8080c80:	9b06      	ldr	r3, [sp, #24]
 8080c82:	2b00      	cmp	r3, #0
 8080c84:	d1e5      	bne.n	8080c52 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x64>
 8080c86:	9b07      	ldr	r3, [sp, #28]
 8080c88:	f013 0501 	ands.w	r5, r3, #1
 8080c8c:	d1e1      	bne.n	8080c52 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x64>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
 8080c8e:	4620      	mov	r0, r4
 8080c90:	f7ff fc24 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080c94:	285d      	cmp	r0, #93	; 0x5d
 8080c96:	d0e4      	beq.n	8080c62 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x74>
 8080c98:	4620      	mov	r0, r4
 8080c9a:	f7ff fc1f 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080c9e:	282c      	cmp	r0, #44	; 0x2c
 8080ca0:	d1c3      	bne.n	8080c2a <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x3c>
    }
    return _current;
  }

  void move() {
    _loaded = false;
 8080ca2:	73a5      	strb	r5, [r4, #14]
  slot->clear();
  return slot;
}

inline VariantData* CollectionData::add(MemoryPool* pool) {
  return slotData(addSlot(pool));
 8080ca4:	6821      	ldr	r1, [r4, #0]
 8080ca6:	4630      	mov	r0, r6
 8080ca8:	f7ff fa57 	bl	808015a <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE>

    // Read each value
    for (;;) {
      // Allocate slot in array
      VariantData *value = array.add(_pool);
      if (!value) return DeserializationError::NoMemory;
 8080cac:	4601      	mov	r1, r0
 8080cae:	2800      	cmp	r0, #0
 8080cb0:	d1be      	bne.n	8080c30 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE10parseArrayERNS_14CollectionDataE+0x42>
 8080cb2:	f04f 0003 	mov.w	r0, #3

      // 3 - More values?
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }
 8080cb6:	b008      	add	sp, #32
 8080cb8:	bd70      	pop	{r4, r5, r6, pc}

08080cba <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE>:

  DeserializationError parseObject(CollectionData &object) {
 8080cba:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8080cbc:	7b03      	ldrb	r3, [r0, #12]
      if (eat(']')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;
    }
  }

  DeserializationError parseObject(CollectionData &object) {
 8080cbe:	b08f      	sub	sp, #60	; 0x3c
 8080cc0:	4604      	mov	r4, r0
 8080cc2:	460f      	mov	r7, r1
    if (_nestingLimit == 0) return DeserializationError::TooDeep;
 8080cc4:	b913      	cbnz	r3, 8080ccc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x12>
 8080cc6:	f04f 0005 	mov.w	r0, #5
 8080cca:	e098      	b.n	8080dfe <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x144>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
 8080ccc:	f7ff fc06 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080cd0:	287b      	cmp	r0, #123	; 0x7b
 8080cd2:	d17b      	bne.n	8080dcc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x112>
    }
    return _current;
  }

  void move() {
    _loaded = false;
 8080cd4:	2300      	movs	r3, #0
 8080cd6:	73a3      	strb	r3, [r4, #14]

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
 8080cd8:	4620      	mov	r0, r4
 8080cda:	f7ff fc0c 	bl	80804f6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>
    if (err) return err;
 8080cde:	4669      	mov	r1, sp

    // Check opening brace
    if (!eat('{')) return DeserializationError::InvalidInput;

    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
 8080ce0:	f88d 0000 	strb.w	r0, [sp]
    if (err) return err;
 8080ce4:	a802      	add	r0, sp, #8
 8080ce6:	f7ff fa57 	bl	8080198 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
 8080cea:	9b02      	ldr	r3, [sp, #8]
 8080cec:	2b00      	cmp	r3, #0
 8080cee:	d14d      	bne.n	8080d8c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
 8080cf0:	9803      	ldr	r0, [sp, #12]
 8080cf2:	f010 0501 	ands.w	r5, r0, #1
 8080cf6:	d149      	bne.n	8080d8c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
 8080cf8:	4620      	mov	r0, r4
 8080cfa:	f7ff fbef 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080cfe:	287d      	cmp	r0, #125	; 0x7d
 8080d00:	d117      	bne.n	8080d32 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x78>
    }
    return _current;
  }

  void move() {
    _loaded = false;
 8080d02:	73a5      	strb	r5, [r4, #14]
    // Skip spaces
    DeserializationError err = skipSpacesAndComments();
    if (err) return err;

    // Empty object?
    if (eat('}')) return DeserializationError::Ok;
 8080d04:	4628      	mov	r0, r5
 8080d06:	e07a      	b.n	8080dfe <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x144>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
 8080d08:	4620      	mov	r0, r4
 8080d0a:	f7ff fbe7 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080d0e:	282c      	cmp	r0, #44	; 0x2c
 8080d10:	d15c      	bne.n	8080dcc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x112>
    }
    return _current;
  }

  void move() {
    _loaded = false;
 8080d12:	2300      	movs	r3, #0
 8080d14:	73a3      	strb	r3, [r4, #14]
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
 8080d16:	4620      	mov	r0, r4
 8080d18:	f7ff fbed 	bl	80804f6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>
      if (err) return err;
 8080d1c:	4669      	mov	r1, sp
      // More keys/values?
      if (eat('}')) return DeserializationError::Ok;
      if (!eat(',')) return DeserializationError::InvalidInput;

      // Skip spaces
      err = skipSpacesAndComments();
 8080d1e:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;
 8080d22:	a80c      	add	r0, sp, #48	; 0x30
 8080d24:	f7ff fa38 	bl	8080198 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
 8080d28:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8080d2a:	bb7b      	cbnz	r3, 8080d8c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
 8080d2c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8080d2e:	07db      	lsls	r3, r3, #31
 8080d30:	d42c      	bmi.n	8080d8c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
    if (eat('}')) return DeserializationError::Ok;

    // Read each key value pair
    for (;;) {
      // Allocate slot in object
      VariantSlot *slot = object.addSlot(_pool);
 8080d32:	6821      	ldr	r1, [r4, #0]
 8080d34:	4638      	mov	r0, r7
 8080d36:	f7ff fa10 	bl	808015a <_ZN21ArduinoJson6110_1100014CollectionData7addSlotEPNS_10MemoryPoolE>
      if (!slot) return DeserializationError::NoMemory;
 8080d3a:	4605      	mov	r5, r0
 8080d3c:	b910      	cbnz	r0, 8080d44 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x8a>
 8080d3e:	f04f 0003 	mov.w	r0, #3
 8080d42:	e05c      	b.n	8080dfe <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x144>

      // Parse key
      const char *key;
      err = parseKey(key);
 8080d44:	a901      	add	r1, sp, #4
 8080d46:	4620      	mov	r0, r4
 8080d48:	f7ff fc84 	bl	8080654 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE8parseKeyERPKc>
      if (err) return err;
 8080d4c:	4669      	mov	r1, sp
      VariantSlot *slot = object.addSlot(_pool);
      if (!slot) return DeserializationError::NoMemory;

      // Parse key
      const char *key;
      err = parseKey(key);
 8080d4e:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;
 8080d52:	a804      	add	r0, sp, #16
 8080d54:	f7ff fa20 	bl	8080198 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
 8080d58:	9b04      	ldr	r3, [sp, #16]
 8080d5a:	b9bb      	cbnz	r3, 8080d8c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
 8080d5c:	9b05      	ldr	r3, [sp, #20]
 8080d5e:	07d8      	lsls	r0, r3, #31
 8080d60:	d414      	bmi.n	8080d8c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
    ARDUINOJSON_ASSERT(slot != 0);
    _next = VariantSlotDiff(slot - this);
  }

  void setOwnedKey(not_null<const char*> k) {
    _flags |= KEY_IS_OWNED;
 8080d62:	7a2b      	ldrb	r3, [r5, #8]
      slot->setOwnedKey(make_not_null(key));

      // Skip spaces
      err = skipSpacesAndComments();
 8080d64:	4620      	mov	r0, r4
 8080d66:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8080d6a:	722b      	strb	r3, [r5, #8]
    _key = k.get();
 8080d6c:	9b01      	ldr	r3, [sp, #4]
 8080d6e:	60eb      	str	r3, [r5, #12]
 8080d70:	f7ff fbc1 	bl	80804f6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>
      if (err) return err;  // Colon
 8080d74:	4669      	mov	r1, sp
      err = parseKey(key);
      if (err) return err;
      slot->setOwnedKey(make_not_null(key));

      // Skip spaces
      err = skipSpacesAndComments();
 8080d76:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;  // Colon
 8080d7a:	a806      	add	r0, sp, #24
 8080d7c:	f7ff fa0c 	bl	8080198 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
 8080d80:	9b06      	ldr	r3, [sp, #24]
 8080d82:	b91b      	cbnz	r3, 8080d8c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
 8080d84:	9b07      	ldr	r3, [sp, #28]
 8080d86:	f013 0601 	ands.w	r6, r3, #1
 8080d8a:	d002      	beq.n	8080d92 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd8>
      if (!slot) return DeserializationError::NoMemory;

      // Parse key
      const char *key;
      err = parseKey(key);
      if (err) return err;
 8080d8c:	f89d 0000 	ldrb.w	r0, [sp]
 8080d90:	e035      	b.n	8080dfe <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x144>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
 8080d92:	4620      	mov	r0, r4
 8080d94:	f7ff fba2 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080d98:	283a      	cmp	r0, #58	; 0x3a
 8080d9a:	d117      	bne.n	8080dcc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x112>
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Parse value
      _nestingLimit--;
 8080d9c:	7b23      	ldrb	r3, [r4, #12]
      err = parseVariant(*slot->data());
 8080d9e:	4629      	mov	r1, r5
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Parse value
      _nestingLimit--;
 8080da0:	3b01      	subs	r3, #1
 8080da2:	7323      	strb	r3, [r4, #12]
    }
    return _current;
  }

  void move() {
    _loaded = false;
 8080da4:	73a6      	strb	r6, [r4, #14]
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Parse value
      _nestingLimit--;
      err = parseVariant(*slot->data());
 8080da6:	4620      	mov	r0, r4
 8080da8:	f7ff fec3 	bl	8080b32 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE>
      _nestingLimit++;
 8080dac:	7b23      	ldrb	r3, [r4, #12]
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;

      // Parse value
      _nestingLimit--;
      err = parseVariant(*slot->data());
 8080dae:	f88d 0000 	strb.w	r0, [sp]
      _nestingLimit++;
 8080db2:	3301      	adds	r3, #1
 8080db4:	7323      	strb	r3, [r4, #12]
      if (err) return err;
 8080db6:	4669      	mov	r1, sp
 8080db8:	a808      	add	r0, sp, #32
 8080dba:	f7ff f9ed 	bl	8080198 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
 8080dbe:	9b08      	ldr	r3, [sp, #32]
 8080dc0:	2b00      	cmp	r3, #0
 8080dc2:	d1e3      	bne.n	8080d8c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
 8080dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8080dc6:	07d9      	lsls	r1, r3, #31
 8080dc8:	d503      	bpl.n	8080dd2 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x118>
 8080dca:	e7df      	b.n	8080d8c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
      slot->setOwnedKey(make_not_null(key));

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;  // Colon
      if (!eat(':')) return DeserializationError::InvalidInput;
 8080dcc:	f04f 0002 	mov.w	r0, #2
 8080dd0:	e015      	b.n	8080dfe <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x144>
      err = parseVariant(*slot->data());
      _nestingLimit++;
      if (err) return err;

      // Skip spaces
      err = skipSpacesAndComments();
 8080dd2:	4620      	mov	r0, r4
 8080dd4:	f7ff fb8f 	bl	80804f6 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE21skipSpacesAndCommentsEv>
      if (err) return err;
 8080dd8:	4669      	mov	r1, sp
      err = parseVariant(*slot->data());
      _nestingLimit++;
      if (err) return err;

      // Skip spaces
      err = skipSpacesAndComments();
 8080dda:	f88d 0000 	strb.w	r0, [sp]
      if (err) return err;
 8080dde:	a80a      	add	r0, sp, #40	; 0x28
 8080de0:	f7ff f9da 	bl	8080198 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
 8080de4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8080de6:	2b00      	cmp	r3, #0
 8080de8:	d1d0      	bne.n	8080d8c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
 8080dea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8080dec:	07da      	lsls	r2, r3, #31
 8080dee:	d4cd      	bmi.n	8080d8c <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0xd2>
  void move() {
    _loaded = false;
  }

  FORCE_INLINE bool eat(char charToSkip) {
    if (current() != charToSkip) return false;
 8080df0:	4620      	mov	r0, r4
 8080df2:	f7ff fb73 	bl	80804dc <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE7currentEv>
 8080df6:	287d      	cmp	r0, #125	; 0x7d
 8080df8:	d186      	bne.n	8080d08 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE11parseObjectERNS_14CollectionDataE+0x4e>
    }
    return _current;
  }

  void move() {
    _loaded = false;
 8080dfa:	2000      	movs	r0, #0
 8080dfc:	73a0      	strb	r0, [r4, #14]

      // Skip spaces
      err = skipSpacesAndComments();
      if (err) return err;
    }
  }
 8080dfe:	b00f      	add	sp, #60	; 0x3c
 8080e00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08080e02 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>:

  template <size_t N>
  void writeRaw(const char (&s)[N]) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), N - 1);
  }
  void writeRaw(char c) {
 8080e02:	b510      	push	{r4, lr}
    _length += _writer.write(static_cast<uint8_t>(c));
 8080e04:	6803      	ldr	r3, [r0, #0]
  StaticStringWriter(char *buf, size_t size) : end(buf + size - 1), p(buf) {
    *p = '\0';
  }

  size_t write(uint8_t c) {
    if (p >= end) return 0;
 8080e06:	685a      	ldr	r2, [r3, #4]
 8080e08:	681c      	ldr	r4, [r3, #0]
 8080e0a:	42a2      	cmp	r2, r4
    *p++ = static_cast<char>(c);
 8080e0c:	bf3f      	itttt	cc
 8080e0e:	1c54      	addcc	r4, r2, #1
 8080e10:	605c      	strcc	r4, [r3, #4]
 8080e12:	7011      	strbcc	r1, [r2, #0]
    *p = '\0';
 8080e14:	685b      	ldrcc	r3, [r3, #4]
 8080e16:	bf3c      	itt	cc
 8080e18:	2200      	movcc	r2, #0
 8080e1a:	701a      	strbcc	r2, [r3, #0]
 8080e1c:	6842      	ldr	r2, [r0, #4]
    return 1;
 8080e1e:	bf34      	ite	cc
 8080e20:	2301      	movcc	r3, #1
  StaticStringWriter(char *buf, size_t size) : end(buf + size - 1), p(buf) {
    *p = '\0';
  }

  size_t write(uint8_t c) {
    if (p >= end) return 0;
 8080e22:	2300      	movcs	r3, #0
 8080e24:	4413      	add	r3, r2
 8080e26:	6043      	str	r3, [r0, #4]
 8080e28:	bd10      	pop	{r4, pc}
	...

08080e2c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc>:
      writeRaw("true");
    else
      writeRaw("false");
  }

  void writeString(const char *value) {
 8080e2c:	b570      	push	{r4, r5, r6, lr}
 8080e2e:	4605      	mov	r5, r0
    if (!value) {
 8080e30:	460c      	mov	r4, r1
 8080e32:	b919      	cbnz	r1, 8080e3c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x10>
      writeRaw("null");
 8080e34:	4911      	ldr	r1, [pc, #68]	; (8080e7c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x50>)
 8080e36:	f7ff fc48 	bl	80806ca <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
 8080e3a:	bd70      	pop	{r4, r5, r6, pc}
    } else {
      writeRaw('\"');
 8080e3c:	2122      	movs	r1, #34	; 0x22
 8080e3e:	f7ff ffe0 	bl	8080e02 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
 8080e42:	3c01      	subs	r4, #1
      while (*value) writeChar(*value++);
 8080e44:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8080e48:	b171      	cbz	r1, 8080e68 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x3c>
 8080e4a:	4b0d      	ldr	r3, [pc, #52]	; (8080e80 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x54>)
class EscapeSequence {
 public:
  // Optimized for code size on a 8-bit AVR
  static char escapeChar(char c) {
    const char *p = escapeTable(false);
    while (p[0] && p[1] != c) {
 8080e4c:	f813 6c02 	ldrb.w	r6, [r3, #-2]
 8080e50:	b17e      	cbz	r6, 8080e72 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x46>
 8080e52:	3302      	adds	r3, #2
 8080e54:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8080e58:	428a      	cmp	r2, r1
 8080e5a:	d1f7      	bne.n	8080e4c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x20>
  }

  void writeChar(char c) {
    char specialChar = EscapeSequence::escapeChar(c);
    if (specialChar) {
      writeRaw('\\');
 8080e5c:	215c      	movs	r1, #92	; 0x5c
 8080e5e:	4628      	mov	r0, r5
 8080e60:	f7ff ffcf 	bl	8080e02 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
      writeRaw(specialChar);
 8080e64:	4631      	mov	r1, r6
 8080e66:	e004      	b.n	8080e72 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x46>
    if (!value) {
      writeRaw("null");
    } else {
      writeRaw('\"');
      while (*value) writeChar(*value++);
      writeRaw('\"');
 8080e68:	2122      	movs	r1, #34	; 0x22
 8080e6a:	4628      	mov	r0, r5
 8080e6c:	f7ff ffc9 	bl	8080e02 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
    }
  }
 8080e70:	bd70      	pop	{r4, r5, r6, pc}
    char specialChar = EscapeSequence::escapeChar(c);
    if (specialChar) {
      writeRaw('\\');
      writeRaw(specialChar);
    } else {
      writeRaw(c);
 8080e72:	4628      	mov	r0, r5
 8080e74:	f7ff ffc5 	bl	8080e02 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
 8080e78:	e7e4      	b.n	8080e44 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc+0x18>
 8080e7a:	bf00      	nop
 8080e7c:	08084a8c 	.word	0x08084a8c
 8080e80:	08084a7f 	.word	0x08084a7f

08080e84 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>:

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
  }

  void writeRaw(const char *begin, const char *end) {
 8080e84:	b510      	push	{r4, lr}
 8080e86:	4604      	mov	r4, r0
    _length += _writer.write(reinterpret_cast<const uint8_t *>(begin),
 8080e88:	1a52      	subs	r2, r2, r1
 8080e8a:	6800      	ldr	r0, [r0, #0]
 8080e8c:	f7ff f990 	bl	80801b0 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj>
 8080e90:	6863      	ldr	r3, [r4, #4]
 8080e92:	4418      	add	r0, r3
 8080e94:	6060      	str	r0, [r4, #4]
 8080e96:	bd10      	pop	{r4, pc}

08080e98 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE20writePositiveIntegerIyEEvT_>:
    writeRaw('-');
    writePositiveInteger(value);
  }

  template <typename T>
  void writePositiveInteger(T value) {
 8080e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080e9c:	b086      	sub	sp, #24
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
 8080e9e:	f10d 0416 	add.w	r4, sp, #22
    writeRaw('-');
    writePositiveInteger(value);
  }

  template <typename T>
  void writePositiveInteger(T value) {
 8080ea2:	4605      	mov	r5, r0
 8080ea4:	4616      	mov	r6, r2
 8080ea6:	461f      	mov	r7, r3
 8080ea8:	46a0      	mov	r8, r4
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
 8080eaa:	4630      	mov	r0, r6
 8080eac:	4639      	mov	r1, r7
 8080eae:	220a      	movs	r2, #10
 8080eb0:	2300      	movs	r3, #0
 8080eb2:	f003 fb75 	bl	80845a0 <__aeabi_uldivmod>
 8080eb6:	3230      	adds	r2, #48	; 0x30
 8080eb8:	f804 2d01 	strb.w	r2, [r4, #-1]!
      value = T(value / 10);
 8080ebc:	2300      	movs	r3, #0
 8080ebe:	4630      	mov	r0, r6
 8080ec0:	4639      	mov	r1, r7
 8080ec2:	220a      	movs	r2, #10
 8080ec4:	f003 fb6c 	bl	80845a0 <__aeabi_uldivmod>
 8080ec8:	4606      	mov	r6, r0
 8080eca:	460f      	mov	r7, r1
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
 8080ecc:	ea56 0307 	orrs.w	r3, r6, r7
 8080ed0:	d1eb      	bne.n	8080eaa <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE20writePositiveIntegerIyEEvT_+0x12>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
 8080ed2:	4642      	mov	r2, r8
 8080ed4:	4621      	mov	r1, r4
 8080ed6:	4628      	mov	r0, r5
 8080ed8:	f7ff ffd4 	bl	8080e84 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>
  }
 8080edc:	b006      	add	sp, #24
 8080ede:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080ee2:	0000      	movs	r0, r0
 8080ee4:	0000      	movs	r0, r0
	...

08080ee8 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd>:
      decimal /= 10;
      decimalPlaces--;
    }
  }

  static int16_t normalize(TFloat& value) {
 8080ee8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 8080eec:	a350      	add	r3, pc, #320	; (adr r3, 8081030 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x148>)
 8080eee:	e9d3 2300 	ldrd	r2, r3, [r3]
      decimal /= 10;
      decimalPlaces--;
    }
  }

  static int16_t normalize(TFloat& value) {
 8080ef2:	4606      	mov	r6, r0
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
 8080ef4:	c803      	ldmia	r0, {r0, r1}
 8080ef6:	f003 fb1f 	bl	8084538 <__aeabi_dcmpge>
 8080efa:	b310      	cbz	r0, 8080f42 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x5a>
 8080efc:	2408      	movs	r4, #8
 8080efe:	f44f 7780 	mov.w	r7, #256	; 0x100
 8080f02:	2500      	movs	r5, #0
      for (; index >= 0; index--) {
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
 8080f04:	4620      	mov	r0, r4
 8080f06:	e9d6 8900 	ldrd	r8, r9, [r6]
 8080f0a:	f7ff fbed 	bl	80806e8 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 8080f0e:	4602      	mov	r2, r0
 8080f10:	460b      	mov	r3, r1
 8080f12:	4640      	mov	r0, r8
 8080f14:	4649      	mov	r1, r9
 8080f16:	f003 fb0f 	bl	8084538 <__aeabi_dcmpge>
 8080f1a:	b160      	cbz	r0, 8080f36 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x4e>
          value *= traits::negativeBinaryPowerOfTen(index);
 8080f1c:	4620      	mov	r0, r4
 8080f1e:	f7ff fc1f 	bl	8080760 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24negativeBinaryPowerOfTenEi>
 8080f22:	4602      	mov	r2, r0
 8080f24:	460b      	mov	r3, r1
 8080f26:	e9d6 0100 	ldrd	r0, r1, [r6]
 8080f2a:	f003 f87f 	bl	808402c <__aeabi_dmul>
 8080f2e:	e9c6 0100 	strd	r0, r1, [r6]
          powersOf10 = int16_t(powersOf10 + bit);
 8080f32:	443d      	add	r5, r7
 8080f34:	b22d      	sxth	r5, r5

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
 8080f36:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
        if (value >= traits::positiveBinaryPowerOfTen(index)) {
          value *= traits::negativeBinaryPowerOfTen(index);
          powersOf10 = int16_t(powersOf10 + bit);
        }
        bit >>= 1;
 8080f3a:	ea4f 0767 	mov.w	r7, r7, asr #1

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;

    if (value >= ARDUINOJSON_POSITIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
 8080f3e:	d2e1      	bcs.n	8080f04 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x1c>
 8080f40:	e003      	b.n	8080f4a <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x62>
    }
  }

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;
 8080f42:	4605      	mov	r5, r0

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
    int bit = 1 << index;
 8080f44:	f44f 7780 	mov.w	r7, #256	; 0x100

  static int16_t normalize(TFloat& value) {
    typedef FloatTraits<TFloat> traits;
    int16_t powersOf10 = 0;

    int8_t index = sizeof(TFloat) == 8 ? 8 : 5;
 8080f48:	2408      	movs	r4, #8
        }
        bit >>= 1;
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
 8080f4a:	e9d6 8900 	ldrd	r8, r9, [r6]
 8080f4e:	2200      	movs	r2, #0
 8080f50:	2300      	movs	r3, #0
 8080f52:	4640      	mov	r0, r8
 8080f54:	4649      	mov	r1, r9
 8080f56:	f003 faf9 	bl	808454c <__aeabi_dcmpgt>
 8080f5a:	2800      	cmp	r0, #0
 8080f5c:	d061      	beq.n	8081022 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x13a>
 8080f5e:	a336      	add	r3, pc, #216	; (adr r3, 8081038 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x150>)
 8080f60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080f64:	4640      	mov	r0, r8
 8080f66:	4649      	mov	r1, r9
 8080f68:	f003 fadc 	bl	8084524 <__aeabi_dcmple>
 8080f6c:	2800      	cmp	r0, #0
 8080f6e:	d058      	beq.n	8081022 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x13a>
        forge(0x3CD203AF, 0x9EE75616),  // 1e-15
        forge(0x398039D6, 0x65896880),  // 1e-31
        forge(0x32DA53FC, 0x9631D10D),  // 1e-63
        forge(0x25915445, 0x81B7DEC2),  // 1e-127
        forge(0x0AFE07B2, 0x7DD78B14)   // 1e-255
    };
 8080f70:	f20f 0bcc 	addw	fp, pc, #204	; 0xcc
 8080f74:	e9db ab00 	ldrd	sl, fp, [fp]
      for (; index >= 0; index--) {
 8080f78:	1c63      	adds	r3, r4, #1
 8080f7a:	d052      	beq.n	8081022 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x13a>
        if (value < traits::negativeBinaryPowerOfTenPlusOne(index)) {
 8080f7c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8080f80:	f8df 90fc 	ldr.w	r9, [pc, #252]	; 8081080 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x198>
 8080f84:	e9cd 2300 	strd	r2, r3, [sp]
 8080f88:	f8d9 3000 	ldr.w	r3, [r9]
 8080f8c:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 8081084 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x19c>
 8080f90:	f013 0f01 	tst.w	r3, #1
 8080f94:	d12b      	bne.n	8080fee <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x106>
 8080f96:	4648      	mov	r0, r9
 8080f98:	f7ff f887 	bl	80800aa <__cxa_guard_acquire>
 8080f9c:	b338      	cbz	r0, 8080fee <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x106>
 8080f9e:	a12a      	add	r1, pc, #168	; (adr r1, 8081048 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x160>)
 8080fa0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8080fa4:	a32a      	add	r3, pc, #168	; (adr r3, 8081050 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x168>)
 8080fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080faa:	e9c8 0108 	strd	r0, r1, [r8, #32]
 8080fae:	a12a      	add	r1, pc, #168	; (adr r1, 8081058 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x170>)
 8080fb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8080fb4:	e9c8 010a 	strd	r0, r1, [r8, #40]	; 0x28
 8080fb8:	a129      	add	r1, pc, #164	; (adr r1, 8081060 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x178>)
 8080fba:	e9d1 0100 	ldrd	r0, r1, [r1]
 8080fbe:	e9c8 010c 	strd	r0, r1, [r8, #48]	; 0x30
 8080fc2:	a129      	add	r1, pc, #164	; (adr r1, 8081068 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x180>)
 8080fc4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8080fc8:	e9c8 010e 	strd	r0, r1, [r8, #56]	; 0x38
 8080fcc:	a128      	add	r1, pc, #160	; (adr r1, 8081070 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x188>)
 8080fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8080fd2:	e9c8 0110 	strd	r0, r1, [r8, #64]	; 0x40
 8080fd6:	4648      	mov	r0, r9
 8080fd8:	e9c8 2302 	strd	r2, r3, [r8, #8]
 8080fdc:	a326      	add	r3, pc, #152	; (adr r3, 8081078 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x190>)
 8080fde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080fe2:	e9c8 ab06 	strd	sl, fp, [r8, #24]
 8080fe6:	e9c8 2304 	strd	r2, r3, [r8, #16]
 8080fea:	f7ff f863 	bl	80800b4 <__cxa_guard_release>
 8080fee:	e9dd 0100 	ldrd	r0, r1, [sp]
    return factors[index];
 8080ff2:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
 8080ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8080ffa:	f003 fa89 	bl	8084510 <__aeabi_dcmplt>
 8080ffe:	b160      	cbz	r0, 808101a <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x132>
          value *= traits::positiveBinaryPowerOfTen(index);
 8081000:	4620      	mov	r0, r4
 8081002:	f7ff fb71 	bl	80806e8 <_ZN21ArduinoJson6110_1100011FloatTraitsIdLj8EE24positiveBinaryPowerOfTenEi>
 8081006:	4602      	mov	r2, r0
 8081008:	460b      	mov	r3, r1
 808100a:	e9d6 0100 	ldrd	r0, r1, [r6]
 808100e:	f003 f80d 	bl	808402c <__aeabi_dmul>
 8081012:	e9c6 0100 	strd	r0, r1, [r6]
          powersOf10 = int16_t(powersOf10 - bit);
 8081016:	1bed      	subs	r5, r5, r7
 8081018:	b22d      	sxth	r5, r5
 808101a:	3c01      	subs	r4, #1
        }
        bit >>= 1;
 808101c:	107f      	asrs	r7, r7, #1
 808101e:	b264      	sxtb	r4, r4
        bit >>= 1;
      }
    }

    if (value > 0 && value <= ARDUINOJSON_NEGATIVE_EXPONENTIATION_THRESHOLD) {
      for (; index >= 0; index--) {
 8081020:	e7aa      	b.n	8080f78 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd+0x90>
        bit >>= 1;
      }
    }

    return powersOf10;
  }
 8081022:	4628      	mov	r0, r5
 8081024:	b003      	add	sp, #12
 8081026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808102a:	bf00      	nop
 808102c:	f3af 8000 	nop.w
 8081030:	00000000 	.word	0x00000000
 8081034:	416312d0 	.word	0x416312d0
 8081038:	88e368f1 	.word	0x88e368f1
 808103c:	3ee4f8b5 	.word	0x3ee4f8b5
 8081040:	9abcaf48 	.word	0x9abcaf48
 8081044:	3e7ad7f2 	.word	0x3e7ad7f2
 8081048:	9ee75616 	.word	0x9ee75616
 808104c:	3cd203af 	.word	0x3cd203af
 8081050:	9999999a 	.word	0x9999999a
 8081054:	3fb99999 	.word	0x3fb99999
 8081058:	65896880 	.word	0x65896880
 808105c:	398039d6 	.word	0x398039d6
 8081060:	9631d10d 	.word	0x9631d10d
 8081064:	32da53fc 	.word	0x32da53fc
 8081068:	81b7dec2 	.word	0x81b7dec2
 808106c:	25915445 	.word	0x25915445
 8081070:	7dd78b14 	.word	0x7dd78b14
 8081074:	0afe07b2 	.word	0x0afe07b2
 8081078:	d2f1a9fc 	.word	0xd2f1a9fc
 808107c:	3f50624d 	.word	0x3f50624d
 8081080:	200004fc 	.word	0x200004fc
 8081084:	20000400 	.word	0x20000400

08081088 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_>:
      writeRaw(c);
    }
  }

  template <typename T>
  void writeFloat(T value) {
 8081088:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if (isnan(value)) return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 808108c:	4619      	mov	r1, r3
      writeRaw(c);
    }
  }

  template <typename T>
  void writeFloat(T value) {
 808108e:	b089      	sub	sp, #36	; 0x24
 8081090:	4607      	mov	r7, r0
    if (isnan(value)) return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 8081092:	4610      	mov	r0, r2
      writeRaw(c);
    }
  }

  template <typename T>
  void writeFloat(T value) {
 8081094:	4615      	mov	r5, r2
 8081096:	461c      	mov	r4, r3
    if (isnan(value)) return writeRaw(ARDUINOJSON_ENABLE_NAN ? "NaN" : "null");
 8081098:	f003 fa30 	bl	80844fc <__aeabi_dcmpeq>
 808109c:	b920      	cbnz	r0, 80810a8 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x20>
 808109e:	4974      	ldr	r1, [pc, #464]	; (8081270 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1e8>)
 80810a0:	4638      	mov	r0, r7
 80810a2:	f7ff fb12 	bl	80806ca <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
 80810a6:	e0df      	b.n	8081268 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1e0>
#endif

#ifndef isinf
template <typename T>
bool isinf(T x) {
  return x != 0.0 && x * 2 == x;
 80810a8:	2200      	movs	r2, #0
 80810aa:	2300      	movs	r3, #0
 80810ac:	4628      	mov	r0, r5
 80810ae:	4621      	mov	r1, r4
 80810b0:	f003 fa24 	bl	80844fc <__aeabi_dcmpeq>
 80810b4:	b968      	cbnz	r0, 80810d2 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x4a>
 80810b6:	462a      	mov	r2, r5
 80810b8:	4623      	mov	r3, r4
 80810ba:	4628      	mov	r0, r5
 80810bc:	4621      	mov	r1, r4
 80810be:	f002 fe03 	bl	8083cc8 <__adddf3>
 80810c2:	4602      	mov	r2, r0
 80810c4:	460b      	mov	r3, r1
 80810c6:	4628      	mov	r0, r5
 80810c8:	4621      	mov	r1, r4
 80810ca:	f003 fa17 	bl	80844fc <__aeabi_dcmpeq>
 80810ce:	2800      	cmp	r0, #0
 80810d0:	d1e5      	bne.n	808109e <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x16>

    if (isinf(value)) return writeRaw("Infinity");
#else
    if (isinf(value)) return writeRaw("null");

    if (value < 0.0) {
 80810d2:	2200      	movs	r2, #0
 80810d4:	2300      	movs	r3, #0
 80810d6:	4628      	mov	r0, r5
 80810d8:	4621      	mov	r1, r4
 80810da:	f003 fa19 	bl	8084510 <__aeabi_dcmplt>
 80810de:	b128      	cbz	r0, 80810ec <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x64>
      writeRaw('-');
 80810e0:	212d      	movs	r1, #45	; 0x2d
 80810e2:	4638      	mov	r0, r7
 80810e4:	f7ff fe8d 	bl	8080e02 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
      value = -value;
 80810e8:	f104 4400 	add.w	r4, r4, #2147483648	; 0x80000000
 80810ec:	4623      	mov	r3, r4
 80810ee:	462a      	mov	r2, r5
 80810f0:	a808      	add	r0, sp, #32
 80810f2:	e960 2308 	strd	r2, r3, [r0, #-32]!

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);
 80810f6:	f7ff fef7 	bl	8080ee8 <_ZN21ArduinoJson6110_1100010FloatPartsIdE9normalizeERd>

    integral = uint32_t(value);
 80810fa:	e9dd 8900 	ldrd	r8, r9, [sp]

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);
 80810fe:	4604      	mov	r4, r0

    integral = uint32_t(value);
 8081100:	4649      	mov	r1, r9
 8081102:	4640      	mov	r0, r8
 8081104:	f003 fa2c 	bl	8084560 <__aeabi_d2uiz>
 8081108:	4606      	mov	r6, r0
 808110a:	4602      	mov	r2, r0
  uint32_t decimal;
  int16_t exponent;
  int8_t decimalPlaces;

  FloatParts(TFloat value) {
    uint32_t maxDecimalPart = sizeof(TFloat) >= 8 ? 1000000000 : 1000000;
 808110c:	f8df a168 	ldr.w	sl, [pc, #360]	; 8081278 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1f0>
    decimalPlaces = sizeof(TFloat) >= 8 ? 9 : 6;

    exponent = normalize(value);

    integral = uint32_t(value);
 8081110:	2309      	movs	r3, #9
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
      maxDecimalPart /= 10;
 8081112:	210a      	movs	r1, #10
 8081114:	b25d      	sxtb	r5, r3

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8081116:	2a09      	cmp	r2, #9
 8081118:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 808111c:	b2db      	uxtb	r3, r3
 808111e:	d904      	bls.n	808112a <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0xa2>
      maxDecimalPart /= 10;
 8081120:	fbba faf1 	udiv	sl, sl, r1

    exponent = normalize(value);

    integral = uint32_t(value);
    // reduce number of decimal places by the number of integral places
    for (uint32_t tmp = integral; tmp >= 10; tmp /= 10) {
 8081124:	fbb2 f2f1 	udiv	r2, r2, r1
 8081128:	e7f4      	b.n	8081114 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x8c>
      maxDecimalPart /= 10;
      decimalPlaces--;
    }

    TFloat remainder = (value - TFloat(integral)) * TFloat(maxDecimalPart);
 808112a:	4630      	mov	r0, r6
 808112c:	f002 ff08 	bl	8083f40 <__aeabi_ui2d>
 8081130:	4602      	mov	r2, r0
 8081132:	460b      	mov	r3, r1
 8081134:	4640      	mov	r0, r8
 8081136:	4649      	mov	r1, r9
 8081138:	f002 fdc4 	bl	8083cc4 <__aeabi_dsub>
 808113c:	4680      	mov	r8, r0
 808113e:	4650      	mov	r0, sl
 8081140:	4689      	mov	r9, r1
 8081142:	f002 fefd 	bl	8083f40 <__aeabi_ui2d>
 8081146:	4602      	mov	r2, r0
 8081148:	460b      	mov	r3, r1
 808114a:	4640      	mov	r0, r8
 808114c:	4649      	mov	r1, r9
 808114e:	f002 ff6d 	bl	808402c <__aeabi_dmul>
 8081152:	4680      	mov	r8, r0
 8081154:	4689      	mov	r9, r1

    decimal = uint32_t(remainder);
 8081156:	f003 fa03 	bl	8084560 <__aeabi_d2uiz>
 808115a:	4683      	mov	fp, r0
    remainder = remainder - TFloat(decimal);

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
 808115c:	f002 fef0 	bl	8083f40 <__aeabi_ui2d>
 8081160:	4602      	mov	r2, r0
 8081162:	460b      	mov	r3, r1
 8081164:	4640      	mov	r0, r8
 8081166:	4649      	mov	r1, r9
 8081168:	f002 fdac 	bl	8083cc4 <__aeabi_dsub>
 808116c:	4602      	mov	r2, r0
 808116e:	460b      	mov	r3, r1
 8081170:	f002 fdaa 	bl	8083cc8 <__adddf3>
 8081174:	f003 f9f4 	bl	8084560 <__aeabi_d2uiz>
 8081178:	eb00 080b 	add.w	r8, r0, fp
    if (decimal >= maxDecimalPart) {
 808117c:	45c2      	cmp	sl, r8
 808117e:	d80d      	bhi.n	808119c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x114>
      decimal = 0;
      integral++;
 8081180:	3601      	adds	r6, #1
      if (exponent && integral >= 10) {
 8081182:	b13c      	cbz	r4, 8081194 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x10c>
 8081184:	2e09      	cmp	r6, #9
 8081186:	d907      	bls.n	8081198 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x110>
        exponent++;
 8081188:	3401      	adds	r4, #1
 808118a:	b224      	sxth	r4, r4

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
 808118c:	f04f 0800 	mov.w	r8, #0
      integral++;
      if (exponent && integral >= 10) {
        exponent++;
        integral = 1;
 8081190:	2601      	movs	r6, #1
 8081192:	e003      	b.n	808119c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x114>

    // rounding:
    // increment by 1 if remainder >= 0.5
    decimal += uint32_t(remainder * 2);
    if (decimal >= maxDecimalPart) {
      decimal = 0;
 8081194:	46a0      	mov	r8, r4
 8081196:	e001      	b.n	808119c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x114>
 8081198:	f04f 0800 	mov.w	r8, #0
        integral = 1;
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 808119c:	220a      	movs	r2, #10
 808119e:	fbb8 f3f2 	udiv	r3, r8, r2
 80811a2:	fb02 8113 	mls	r1, r2, r3, r8
 80811a6:	b929      	cbnz	r1, 80811b4 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x12c>
 80811a8:	2d00      	cmp	r5, #0
 80811aa:	dd03      	ble.n	80811b4 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x12c>
 80811ac:	3d01      	subs	r5, #1
      decimal /= 10;
 80811ae:	4698      	mov	r8, r3
 80811b0:	b26d      	sxtb	r5, r5
 80811b2:	e7f4      	b.n	808119e <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x116>
        integral = 1;
      }
    }

    // remove trailing zeros
    while (decimal % 10 == 0 && decimalPlaces > 0) {
 80811b4:	f10d 011e 	add.w	r1, sp, #30
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
 80811b8:	220a      	movs	r2, #10
 80811ba:	fbb6 f3f2 	udiv	r3, r6, r2
 80811be:	fb02 6613 	mls	r6, r2, r3, r6
 80811c2:	3630      	adds	r6, #48	; 0x30
 80811c4:	f801 6d01 	strb.w	r6, [r1, #-1]!
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
 80811c8:	461e      	mov	r6, r3
 80811ca:	2b00      	cmp	r3, #0
 80811cc:	d1f5      	bne.n	80811ba <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x132>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
 80811ce:	f10d 021e 	add.w	r2, sp, #30
 80811d2:	4638      	mov	r0, r7
 80811d4:	f7ff fe56 	bl	8080e84 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>
#endif

    FloatParts<T> parts(value);

    writePositiveInteger(parts.integral);
    if (parts.decimalPlaces) writeDecimals(parts.decimal, parts.decimalPlaces);
 80811d8:	b1d5      	cbz	r5, 8081210 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x188>
 80811da:	b2e9      	uxtb	r1, r5
 80811dc:	ab02      	add	r3, sp, #8
 80811de:	f1c1 0010 	rsb	r0, r1, #16
 80811e2:	4418      	add	r0, r3
 80811e4:	ab06      	add	r3, sp, #24
 80811e6:	461a      	mov	r2, r3
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    while (width--) {
      *--begin = char(value % 10 + '0');
 80811e8:	260a      	movs	r6, #10
    char buffer[16];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    while (width--) {
 80811ea:	4283      	cmp	r3, r0
 80811ec:	d009      	beq.n	8081202 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x17a>
      *--begin = char(value % 10 + '0');
 80811ee:	fbb8 f5f6 	udiv	r5, r8, r6
 80811f2:	fb06 8815 	mls	r8, r6, r5, r8
 80811f6:	f108 0830 	add.w	r8, r8, #48	; 0x30
 80811fa:	f803 8d01 	strb.w	r8, [r3, #-1]!
      value /= 10;
 80811fe:	46a8      	mov	r8, r5
 8081200:	e7f3      	b.n	80811ea <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x162>
    }
    *--begin = '.';
 8081202:	1a51      	subs	r1, r2, r1
 8081204:	232e      	movs	r3, #46	; 0x2e
 8081206:	f801 3d01 	strb.w	r3, [r1, #-1]!

    // and dump it in the right order
    writeRaw(begin, end);
 808120a:	4638      	mov	r0, r7
 808120c:	f7ff fe3a 	bl	8080e84 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>
    FloatParts<T> parts(value);

    writePositiveInteger(parts.integral);
    if (parts.decimalPlaces) writeDecimals(parts.decimal, parts.decimalPlaces);

    if (parts.exponent < 0) {
 8081210:	2c00      	cmp	r4, #0
 8081212:	da12      	bge.n	808123a <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1b2>
      writeRaw("e-");
 8081214:	4917      	ldr	r1, [pc, #92]	; (8081274 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1ec>)
 8081216:	4638      	mov	r0, r7
 8081218:	f7ff fa57 	bl	80806ca <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
      writePositiveInteger(-parts.exponent);
 808121c:	4264      	negs	r4, r4

  template <typename T>
  void writePositiveInteger(T value) {
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
 808121e:	f10d 011e 	add.w	r1, sp, #30

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
 8081222:	220a      	movs	r2, #10
 8081224:	fb94 f3f2 	sdiv	r3, r4, r2
 8081228:	fb02 4413 	mls	r4, r2, r3, r4
 808122c:	3430      	adds	r4, #48	; 0x30
 808122e:	f801 4d01 	strb.w	r4, [r1, #-1]!
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
 8081232:	461c      	mov	r4, r3
 8081234:	2b00      	cmp	r3, #0
 8081236:	d1f5      	bne.n	8081224 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x19c>
 8081238:	e011      	b.n	808125e <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1d6>
    if (parts.exponent < 0) {
      writeRaw("e-");
      writePositiveInteger(-parts.exponent);
    }

    if (parts.exponent > 0) {
 808123a:	d015      	beq.n	8081268 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1e0>
      writeRaw('e');
 808123c:	2165      	movs	r1, #101	; 0x65
 808123e:	4638      	mov	r0, r7
 8081240:	f7ff fddf 	bl	8080e02 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>

  template <typename T>
  void writePositiveInteger(T value) {
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;
 8081244:	f10d 011e 	add.w	r1, sp, #30

    // write the string in reverse order
    do {
      *--begin = char(value % 10 + '0');
 8081248:	220a      	movs	r2, #10
 808124a:	fb94 f3f2 	sdiv	r3, r4, r2
 808124e:	fb02 4413 	mls	r4, r2, r3, r4
 8081252:	3430      	adds	r4, #48	; 0x30
 8081254:	f801 4d01 	strb.w	r4, [r1, #-1]!
      value = T(value / 10);
 8081258:	b21c      	sxth	r4, r3
    char buffer[22];
    char *end = buffer + sizeof(buffer);
    char *begin = end;

    // write the string in reverse order
    do {
 808125a:	2c00      	cmp	r4, #0
 808125c:	d1f5      	bne.n	808124a <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_+0x1c2>
      *--begin = char(value % 10 + '0');
      value = T(value / 10);
    } while (value);

    // and dump it in the right order
    writeRaw(begin, end);
 808125e:	f10d 021e 	add.w	r2, sp, #30
 8081262:	4638      	mov	r0, r7
 8081264:	f7ff fe0e 	bl	8080e84 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKcS4_>

    if (parts.exponent > 0) {
      writeRaw('e');
      writePositiveInteger(parts.exponent);
    }
  }
 8081268:	b009      	add	sp, #36	; 0x24
 808126a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808126e:	bf00      	nop
 8081270:	08084a8c 	.word	0x08084a8c
 8081274:	08084a91 	.word	0x08084a91
 8081278:	3b9aca00 	.word	0x3b9aca00

0808127c <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_>:
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
 808127c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    switch (type()) {
 808127e:	7a03      	ldrb	r3, [r0, #8]
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
 8081280:	4605      	mov	r5, r0
    switch (type()) {
 8081282:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8081286:	2b05      	cmp	r3, #5
  // - no destructor
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
 8081288:	460c      	mov	r4, r1
    switch (type()) {
 808128a:	d06c      	beq.n	8081366 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xea>
 808128c:	d808      	bhi.n	80812a0 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x24>
 808128e:	2b00      	cmp	r3, #0
 8081290:	d070      	beq.n	8081374 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xf8>
 8081292:	2b02      	cmp	r3, #2
 8081294:	d958      	bls.n	8081348 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xcc>
  void visitFloat(Float value) {
    _formatter.writeFloat(value);
  }

  void visitString(const char *value) {
    _formatter.writeString(value);
 8081296:	6801      	ldr	r1, [r0, #0]
 8081298:	4620      	mov	r0, r4
 808129a:	f7ff fdc7 	bl	8080e2c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc>
 808129e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80812a0:	2b08      	cmp	r3, #8
 80812a2:	d017      	beq.n	80812d4 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x58>
 80812a4:	d80c      	bhi.n	80812c0 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x44>
 80812a6:	2b06      	cmp	r3, #6
 80812a8:	d057      	beq.n	808135a <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xde>
 80812aa:	2b07      	cmp	r3, #7
 80812ac:	d162      	bne.n	8081374 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xf8>
      case VALUE_IS_OWNED_RAW:
      case VALUE_IS_LINKED_RAW:
        return visitor.visitRawJson(_content.asRaw.data, _content.asRaw.size);

      case VALUE_IS_NEGATIVE_INTEGER:
        return visitor.visitNegativeInteger(_content.asInteger);
 80812ae:	e9d0 6700 	ldrd	r6, r7, [r0]

  void writeNegativeInteger(UInt value) {
    writeRaw('-');
 80812b2:	212d      	movs	r1, #45	; 0x2d
 80812b4:	4620      	mov	r0, r4
 80812b6:	f7ff fda4 	bl	8080e02 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
    writePositiveInteger(value);
 80812ba:	4632      	mov	r2, r6
 80812bc:	463b      	mov	r3, r7
 80812be:	e04e      	b.n	808135e <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xe2>
  // - no virtual
  // - no inheritance

  template <typename Visitor>
  void accept(Visitor &visitor) const {
    switch (type()) {
 80812c0:	2b20      	cmp	r3, #32
 80812c2:	d01f      	beq.n	8081304 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x88>
 80812c4:	2b40      	cmp	r3, #64	; 0x40
 80812c6:	d155      	bne.n	8081374 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xf8>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 80812c8:	215b      	movs	r1, #91	; 0x5b
 80812ca:	4620      	mov	r0, r4
 80812cc:	f7ff fd99 	bl	8080e02 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
 80812d0:	682d      	ldr	r5, [r5, #0]
 80812d2:	e013      	b.n	80812fc <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x80>

    write('}');
  }

  void visitFloat(Float value) {
    _formatter.writeFloat(value);
 80812d4:	e9d0 2300 	ldrd	r2, r3, [r0]
 80812d8:	4608      	mov	r0, r1
 80812da:	f7ff fed5 	bl	8081088 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE10writeFloatIdEEvT_>
 80812de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    write('[');

    VariantSlot *slot = array.head();

    while (slot != 0) {
      slot->data()->accept(*this);
 80812e0:	4621      	mov	r1, r4
 80812e2:	4628      	mov	r0, r5
 80812e4:	f7ff ffca 	bl	808127c <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_>
  const VariantData* data() const {
    return reinterpret_cast<const VariantData*>(&_content);
  }

  VariantSlot* next() {
    return _next ? this + _next : 0;
 80812e8:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80812ec:	b143      	cbz	r3, 8081300 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x84>

      slot = slot->next();
      if (slot == 0) break;
 80812ee:	eb15 1503 	adds.w	r5, r5, r3, lsl #4
 80812f2:	d005      	beq.n	8081300 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x84>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 80812f4:	212c      	movs	r1, #44	; 0x2c
 80812f6:	4620      	mov	r0, r4
 80812f8:	f7ff fd83 	bl	8080e02 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
  FORCE_INLINE void visitArray(const CollectionData &array) {
    write('[');

    VariantSlot *slot = array.head();

    while (slot != 0) {
 80812fc:	2d00      	cmp	r5, #0
 80812fe:	d1ef      	bne.n	80812e0 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x64>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 8081300:	215d      	movs	r1, #93	; 0x5d
 8081302:	e01d      	b.n	8081340 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xc4>
 8081304:	217b      	movs	r1, #123	; 0x7b
 8081306:	4620      	mov	r0, r4
 8081308:	f7ff fd7b 	bl	8080e02 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
 808130c:	682d      	ldr	r5, [r5, #0]
  void visitObject(const CollectionData &object) {
    write('{');

    VariantSlot *slot = object.head();

    while (slot != 0) {
 808130e:	b1b5      	cbz	r5, 808133e <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xc2>
      _formatter.writeString(slot->key());
 8081310:	68e9      	ldr	r1, [r5, #12]
 8081312:	4620      	mov	r0, r4
 8081314:	f7ff fd8a 	bl	8080e2c <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE11writeStringEPKc>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 8081318:	213a      	movs	r1, #58	; 0x3a
 808131a:	4620      	mov	r0, r4
 808131c:	f7ff fd71 	bl	8080e02 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
    VariantSlot *slot = object.head();

    while (slot != 0) {
      _formatter.writeString(slot->key());
      write(':');
      slot->data()->accept(*this);
 8081320:	4621      	mov	r1, r4
 8081322:	4628      	mov	r0, r5
 8081324:	f7ff ffaa 	bl	808127c <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_>
 8081328:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 808132c:	b13b      	cbz	r3, 808133e <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xc2>

      slot = slot->next();
      if (slot == 0) break;
 808132e:	eb15 1503 	adds.w	r5, r5, r3, lsl #4
 8081332:	d004      	beq.n	808133e <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xc2>
    return _formatter.bytesWritten();
  }

 protected:
  void write(char c) {
    _formatter.writeRaw(c);
 8081334:	212c      	movs	r1, #44	; 0x2c
 8081336:	4620      	mov	r0, r4
 8081338:	f7ff fd63 	bl	8080e02 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
 808133c:	e7e7      	b.n	808130e <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x92>
 808133e:	217d      	movs	r1, #125	; 0x7d
 8081340:	4620      	mov	r0, r4
 8081342:	f7ff fd5e 	bl	8080e02 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEc>
 8081346:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  void writeRaw(const char *s) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), strlen(s));
  }

  void writeRaw(const char *s, size_t n) {
    _length += _writer.write(reinterpret_cast<const uint8_t *>(s), n);
 8081348:	e890 0006 	ldmia.w	r0, {r1, r2}
 808134c:	6820      	ldr	r0, [r4, #0]
 808134e:	f7fe ff2f 	bl	80801b0 <_ZN21ArduinoJson6110_1100018StaticStringWriter5writeEPKhj>
 8081352:	6863      	ldr	r3, [r4, #4]
 8081354:	4418      	add	r0, r3
 8081356:	6060      	str	r0, [r4, #4]
 8081358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  void visitNegativeInteger(UInt value) {
    _formatter.writeNegativeInteger(value);
  }

  void visitPositiveInteger(UInt value) {
    _formatter.writePositiveInteger(value);
 808135a:	e9d0 2300 	ldrd	r2, r3, [r0]
 808135e:	4620      	mov	r0, r4
 8081360:	f7ff fd9a 	bl	8080e98 <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE20writePositiveIntegerIyEEvT_>
 8081364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  size_t bytesWritten() const {
    return _length;
  }

  void writeBoolean(bool value) {
    if (value)
 8081366:	e9d0 2300 	ldrd	r2, r3, [r0]
 808136a:	4313      	orrs	r3, r2
      writeRaw("true");
 808136c:	bf14      	ite	ne
 808136e:	4904      	ldrne	r1, [pc, #16]	; (8081380 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x104>)
    else
      writeRaw("false");
 8081370:	4904      	ldreq	r1, [pc, #16]	; (8081384 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x108>)
 8081372:	e000      	b.n	8081376 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0xfa>
  void visitBoolean(bool value) {
    _formatter.writeBoolean(value);
  }

  void visitNull() {
    _formatter.writeRaw("null");
 8081374:	4904      	ldr	r1, [pc, #16]	; (8081388 <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_+0x10c>)
 8081376:	4620      	mov	r0, r4
 8081378:	f7ff f9a7 	bl	80806ca <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
 808137c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 808137e:	bf00      	nop
 8081380:	08084a94 	.word	0x08084a94
 8081384:	08084a99 	.word	0x08084a99
 8081388:	08084a8c 	.word	0x08084a8c

0808138c <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_>:
 private:
  TextFormatter<TWriter> _formatter;
};

template <typename TSource, typename TDestination>
size_t serializeJson(const TSource &source, TDestination &destination) {
 808138c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
namespace ARDUINOJSON_NAMESPACE {

// A Print implementation that allows to write in a char[]
class StaticStringWriter {
 public:
  StaticStringWriter(char *buf, size_t size) : end(buf + size - 1), p(buf) {
 808138e:	f201 13ff 	addw	r3, r1, #511	; 0x1ff
 8081392:	9300      	str	r3, [sp, #0]

namespace ARDUINOJSON_NAMESPACE {

template <typename Visitor>
inline void variantAccept(const VariantData *var, Visitor &visitor) {
  if (var != 0)
 8081394:	3010      	adds	r0, #16
    *p = '\0';
 8081396:	f04f 0300 	mov.w	r3, #0
namespace ARDUINOJSON_NAMESPACE {

// A Print implementation that allows to write in a char[]
class StaticStringWriter {
 public:
  StaticStringWriter(char *buf, size_t size) : end(buf + size - 1), p(buf) {
 808139a:	9101      	str	r1, [sp, #4]
    *p = '\0';
 808139c:	700b      	strb	r3, [r1, #0]
namespace ARDUINOJSON_NAMESPACE {

template <typename TWriter>
class TextFormatter {
 public:
  explicit TextFormatter(TWriter &writer) : _writer(writer), _length(0) {}
 808139e:	f8cd d008 	str.w	sp, [sp, #8]
 80813a2:	9303      	str	r3, [sp, #12]
 80813a4:	d003      	beq.n	80813ae <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_+0x22>
    var->accept(visitor);
 80813a6:	a902      	add	r1, sp, #8
 80813a8:	f7ff ff68 	bl	808127c <_ZNK21ArduinoJson6110_1100011VariantData6acceptINS_14JsonSerializerINS_18StaticStringWriterEEEEEvRT_>
 80813ac:	e003      	b.n	80813b6 <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_+0x2a>
  void visitBoolean(bool value) {
    _formatter.writeBoolean(value);
  }

  void visitNull() {
    _formatter.writeRaw("null");
 80813ae:	4904      	ldr	r1, [pc, #16]	; (80813c0 <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_+0x34>)
 80813b0:	a802      	add	r0, sp, #8
 80813b2:	f7ff f98a 	bl	80806ca <_ZN21ArduinoJson6110_1100013TextFormatterINS_18StaticStringWriterEE8writeRawEPKc>
};

template <typename TSource, typename TDestination>
size_t serializeJson(const TSource &source, TDestination &destination) {
  return serialize<JsonSerializer>(source, destination);
}
 80813b6:	9803      	ldr	r0, [sp, #12]
 80813b8:	b005      	add	sp, #20
 80813ba:	f85d fb04 	ldr.w	pc, [sp], #4
 80813be:	bf00      	nop
 80813c0:	08084a8c 	.word	0x08084a8c

080813c4 <_Z18PublishAngleSensorv>:
    mqtt->publish(pubTopic, buffer);
    
    return 0;
}

int PublishAngleSensor() {
 80813c4:	b530      	push	{r4, r5, lr}
    
    int value = analogRead(ANGLEPIN);
 80813c6:	200a      	movs	r0, #10
    mqtt->publish(pubTopic, buffer);
    
    return 0;
}

int PublishAngleSensor() {
 80813c8:	b0c9      	sub	sp, #292	; 0x124
    
    int value = analogRead(ANGLEPIN);
 80813ca:	f002 faaa 	bl	8083922 <analogRead>
 80813ce:	4605      	mov	r5, r0
    
    StaticJsonDocument<256> jsonDoc;
 80813d0:	4668      	mov	r0, sp
 80813d2:	f7fe fff9 	bl	80803c8 <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev>
  // getOrAddMember(char*)
  // getOrAddMember(const char*)
  // getOrAddMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getOrAddMember(TChar* key) {
    return VariantRef(&_pool, _data.getOrAddMember(adaptString(key), &_pool));
 80813d6:	466a      	mov	r2, sp
 80813d8:	491b      	ldr	r1, [pc, #108]	; (8081448 <_Z18PublishAngleSensorv+0x84>)
 80813da:	a804      	add	r0, sp, #16
 80813dc:	f7ff f84d 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
 80813e0:	466a      	mov	r2, sp
 80813e2:	491a      	ldr	r1, [pc, #104]	; (808144c <_Z18PublishAngleSensorv+0x88>)
 80813e4:	f7ff f807 	bl	80803f6 <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
 80813e8:	466a      	mov	r2, sp
 80813ea:	4919      	ldr	r1, [pc, #100]	; (8081450 <_Z18PublishAngleSensorv+0x8c>)
 80813ec:	a804      	add	r0, sp, #16
 80813ee:	f7ff f844 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
 80813f2:	4c18      	ldr	r4, [pc, #96]	; (8081454 <_Z18PublishAngleSensorv+0x90>)
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
 80813f4:	466a      	mov	r2, sp
 80813f6:	4918      	ldr	r1, [pc, #96]	; (8081458 <_Z18PublishAngleSensorv+0x94>)
 80813f8:	f7fe fffd 	bl	80803f6 <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
 80813fc:	466a      	mov	r2, sp
 80813fe:	4917      	ldr	r1, [pc, #92]	; (808145c <_Z18PublishAngleSensorv+0x98>)
 8081400:	a804      	add	r0, sp, #16
 8081402:	f7ff f83a 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
 8081406:	4621      	mov	r1, r4
 8081408:	f7fe fe97 	bl	808013a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
 808140c:	466a      	mov	r2, sp
 808140e:	4914      	ldr	r1, [pc, #80]	; (8081460 <_Z18PublishAngleSensorv+0x9c>)
 8081410:	a804      	add	r0, sp, #16
 8081412:	f7ff f832 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
 8081416:	4913      	ldr	r1, [pc, #76]	; (8081464 <_Z18PublishAngleSensorv+0xa0>)
 8081418:	f7fe fe8f 	bl	808013a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
 808141c:	466a      	mov	r2, sp
 808141e:	4621      	mov	r1, r4
 8081420:	a804      	add	r0, sp, #16
    jsonDoc["name"] = deviceName;
    jsonDoc["cmd"] = "RotaryAngleSensor";
    jsonDoc["method"] = "get";
    jsonDoc["RotaryAngleSensor"] = value;
    
    serializeJson(jsonDoc, buffer);
 8081422:	4c11      	ldr	r4, [pc, #68]	; (8081468 <_Z18PublishAngleSensorv+0xa4>)
 8081424:	f7ff f829 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  template <typename T>
  FORCE_INLINE bool set(
      T value,
      typename enable_if<is_integral<T>::value && is_signed<T>::value>::type * =
          0) const {
    return variantSetSignedInteger(_data, value);
 8081428:	4629      	mov	r1, r5
 808142a:	f7ff f80d 	bl	8080448 <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_>
 808142e:	4621      	mov	r1, r4
 8081430:	4668      	mov	r0, sp
 8081432:	f7ff ffab 	bl	808138c <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_>
    
    mqtt->publish(pubTopic, buffer);
 8081436:	4b0d      	ldr	r3, [pc, #52]	; (808146c <_Z18PublishAngleSensorv+0xa8>)
 8081438:	4622      	mov	r2, r4
 808143a:	490d      	ldr	r1, [pc, #52]	; (8081470 <_Z18PublishAngleSensorv+0xac>)
 808143c:	6818      	ldr	r0, [r3, #0]
 808143e:	f000 fcc4 	bl	8081dca <_ZN4MQTT7publishEPKcS1_>
    
    return 0;
}
 8081442:	2000      	movs	r0, #0
 8081444:	b049      	add	sp, #292	; 0x124
 8081446:	bd30      	pop	{r4, r5, pc}
 8081448:	08084a9f 	.word	0x08084a9f
 808144c:	20000555 	.word	0x20000555
 8081450:	08084a34 	.word	0x08084a34
 8081454:	08084ac3 	.word	0x08084ac3
 8081458:	20000574 	.word	0x20000574
 808145c:	08084aa8 	.word	0x08084aa8
 8081460:	08084ab8 	.word	0x08084ab8
 8081464:	08084abf 	.word	0x08084abf
 8081468:	20000b01 	.word	0x20000b01
 808146c:	20000570 	.word	0x20000570
 8081470:	200007fb 	.word	0x200007fb

08081474 <_Z13PublishButtonv>:

int PublishButton() {
 8081474:	b530      	push	{r4, r5, lr}
    
    int ivalue = digitalRead(BUTTONPIN);
 8081476:	2001      	movs	r0, #1
    mqtt->publish(pubTopic, buffer);
    
    return 0;
}

int PublishButton() {
 8081478:	b0c9      	sub	sp, #292	; 0x124
    
    int ivalue = digitalRead(BUTTONPIN);
 808147a:	f002 fa3f 	bl	80838fc <digitalRead>
 808147e:	4605      	mov	r5, r0
    bool value = false;
    
    StaticJsonDocument<256> jsonDoc;
 8081480:	4668      	mov	r0, sp
 8081482:	f7fe ffa1 	bl	80803c8 <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev>
 8081486:	466a      	mov	r2, sp
 8081488:	491d      	ldr	r1, [pc, #116]	; (8081500 <_Z13PublishButtonv+0x8c>)
 808148a:	a804      	add	r0, sp, #16
 808148c:	f7fe fff5 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
 8081490:	466a      	mov	r2, sp
 8081492:	491c      	ldr	r1, [pc, #112]	; (8081504 <_Z13PublishButtonv+0x90>)
 8081494:	f7fe ffaf 	bl	80803f6 <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
 8081498:	466a      	mov	r2, sp
 808149a:	491b      	ldr	r1, [pc, #108]	; (8081508 <_Z13PublishButtonv+0x94>)
 808149c:	a804      	add	r0, sp, #16
 808149e:	f7fe ffec 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
 80814a2:	4c1a      	ldr	r4, [pc, #104]	; (808150c <_Z13PublishButtonv+0x98>)
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
 80814a4:	466a      	mov	r2, sp
 80814a6:	491a      	ldr	r1, [pc, #104]	; (8081510 <_Z13PublishButtonv+0x9c>)
 80814a8:	f7fe ffa5 	bl	80803f6 <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
 80814ac:	466a      	mov	r2, sp
 80814ae:	4919      	ldr	r1, [pc, #100]	; (8081514 <_Z13PublishButtonv+0xa0>)
 80814b0:	a804      	add	r0, sp, #16
 80814b2:	f7fe ffe2 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
 80814b6:	4621      	mov	r1, r4
 80814b8:	f7fe fe3f 	bl	808013a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
 80814bc:	466a      	mov	r2, sp
 80814be:	4916      	ldr	r1, [pc, #88]	; (8081518 <_Z13PublishButtonv+0xa4>)
 80814c0:	a804      	add	r0, sp, #16
 80814c2:	f7fe ffda 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
 80814c6:	4915      	ldr	r1, [pc, #84]	; (808151c <_Z13PublishButtonv+0xa8>)
 80814c8:	f7fe fe37 	bl	808013a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
 80814cc:	4621      	mov	r1, r4
 80814ce:	466a      	mov	r2, sp
 80814d0:	a804      	add	r0, sp, #16
 80814d2:	f7fe ffd2 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
    jsonDoc["name"] = deviceName;
    jsonDoc["cmd"] = "Button";
    jsonDoc["method"] = "get";
    jsonDoc["Button"] = value;
    
    serializeJson(jsonDoc, buffer);
 80814d6:	4c12      	ldr	r4, [pc, #72]	; (8081520 <_Z13PublishButtonv+0xac>)
    return variantSetNull(_data);
  }

  // set(bool value)
  FORCE_INLINE bool set(bool value) const {
    return variantSetBoolean(_data, value);
 80814d8:	2d00      	cmp	r5, #0
 80814da:	bfd4      	ite	le
 80814dc:	2100      	movle	r1, #0
 80814de:	2101      	movgt	r1, #1
 80814e0:	f7fe fe1c 	bl	808011c <_ZN21ArduinoJson6110_1100017variantSetBooleanEPNS_11VariantDataEb>
 80814e4:	4621      	mov	r1, r4
 80814e6:	4668      	mov	r0, sp
 80814e8:	f7ff ff50 	bl	808138c <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_>
    
    mqtt->publish(pubTopic, buffer);
 80814ec:	4b0d      	ldr	r3, [pc, #52]	; (8081524 <_Z13PublishButtonv+0xb0>)
 80814ee:	4622      	mov	r2, r4
 80814f0:	490d      	ldr	r1, [pc, #52]	; (8081528 <_Z13PublishButtonv+0xb4>)
 80814f2:	6818      	ldr	r0, [r3, #0]
 80814f4:	f000 fc69 	bl	8081dca <_ZN4MQTT7publishEPKcS1_>
    
    return 0;
}
 80814f8:	2000      	movs	r0, #0
 80814fa:	b049      	add	sp, #292	; 0x124
 80814fc:	bd30      	pop	{r4, r5, pc}
 80814fe:	bf00      	nop
 8081500:	08084a9f 	.word	0x08084a9f
 8081504:	20000555 	.word	0x20000555
 8081508:	08084a34 	.word	0x08084a34
 808150c:	08084ad5 	.word	0x08084ad5
 8081510:	20000574 	.word	0x20000574
 8081514:	08084aa8 	.word	0x08084aa8
 8081518:	08084ab8 	.word	0x08084ab8
 808151c:	08084abf 	.word	0x08084abf
 8081520:	20000b01 	.word	0x20000b01
 8081524:	20000570 	.word	0x20000570
 8081528:	200007fb 	.word	0x200007fb

0808152c <loop>:
    SetResponseTopic("ResponseTopic");
    
}


void loop() {
 808152c:	b510      	push	{r4, lr}
    
    if (initialized) {
 808152e:	4c19      	ldr	r4, [pc, #100]	; (8081594 <loop+0x68>)
 8081530:	7823      	ldrb	r3, [r4, #0]
 8081532:	b1f3      	cbz	r3, 8081572 <loop+0x46>
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 8081534:	f000 fde2 	bl	80820fc <HAL_Timer_Get_Milli_Seconds>
        if (millis() - lastPublish >= PUBLISH_INTERVAL_MS) {
 8081538:	4c17      	ldr	r4, [pc, #92]	; (8081598 <loop+0x6c>)
 808153a:	6823      	ldr	r3, [r4, #0]
 808153c:	1ac0      	subs	r0, r0, r3
 808153e:	f241 3387 	movw	r3, #4999	; 0x1387
 8081542:	4298      	cmp	r0, r3
 8081544:	d924      	bls.n	8081590 <loop+0x64>
 8081546:	f000 fdd9 	bl	80820fc <HAL_Timer_Get_Milli_Seconds>
		    lastPublish = millis();
 808154a:	6020      	str	r0, [r4, #0]
            
            if (mqtt->isConnected()) {
 808154c:	4c13      	ldr	r4, [pc, #76]	; (808159c <loop+0x70>)
 808154e:	6820      	ldr	r0, [r4, #0]
 8081550:	f000 fad7 	bl	8081b02 <_ZN4MQTT11isConnectedEv>
 8081554:	4b12      	ldr	r3, [pc, #72]	; (80815a0 <loop+0x74>)
 8081556:	b150      	cbz	r0, 808156e <loop+0x42>
                mqttIsActive = true;
 8081558:	2201      	movs	r2, #1
 808155a:	701a      	strb	r2, [r3, #0]
            
                //PublishLightSensor();
                PublishAngleSensor();
 808155c:	f7ff ff32 	bl	80813c4 <_Z18PublishAngleSensorv>
                PublishButton();
 8081560:	f7ff ff88 	bl	8081474 <_Z13PublishButtonv>
            
                mqtt->loop();
 8081564:	6820      	ldr	r0, [r4, #0]
            
            initialized = true;
            
        }
    }
}
 8081566:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            
                //PublishLightSensor();
                PublishAngleSensor();
                PublishButton();
            
                mqtt->loop();
 808156a:	f000 bc75 	b.w	8081e58 <_ZN4MQTT4loopEv>
            } else {
                mqttIsActive = false;
 808156e:	7018      	strb	r0, [r3, #0]
 8081570:	bd10      	pop	{r4, pc}
            }
        }
    }
    else {
        if (nameReceived && mqttIsInitialized && mqtt->isConnected()) {
 8081572:	4b0c      	ldr	r3, [pc, #48]	; (80815a4 <loop+0x78>)
 8081574:	781b      	ldrb	r3, [r3, #0]
 8081576:	b15b      	cbz	r3, 8081590 <loop+0x64>
 8081578:	4b0b      	ldr	r3, [pc, #44]	; (80815a8 <loop+0x7c>)
 808157a:	781b      	ldrb	r3, [r3, #0]
 808157c:	b143      	cbz	r3, 8081590 <loop+0x64>
 808157e:	4b07      	ldr	r3, [pc, #28]	; (808159c <loop+0x70>)
 8081580:	6818      	ldr	r0, [r3, #0]
 8081582:	f000 fabe 	bl	8081b02 <_ZN4MQTT11isConnectedEv>
 8081586:	b118      	cbz	r0, 8081590 <loop+0x64>
            // Subscribe to mqtt command topic
            MQTTSubscribe();
 8081588:	f7fe ff00 	bl	808038c <_Z13MQTTSubscribev>
            
            initialized = true;
 808158c:	2301      	movs	r3, #1
 808158e:	7023      	strb	r3, [r4, #0]
 8081590:	bd10      	pop	{r4, pc}
 8081592:	bf00      	nop
 8081594:	200006fa 	.word	0x200006fa
 8081598:	200008fc 	.word	0x200008fc
 808159c:	20000570 	.word	0x20000570
 80815a0:	20000554 	.word	0x20000554
 80815a4:	200005f8 	.word	0x200005f8
 80815a8:	20000900 	.word	0x20000900

080815ac <_Z15PublishResponsev>:
    
    return 0;
}


int PublishResponse() {
 80815ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80815b0:	f5ad 7d56 	sub.w	sp, sp, #856	; 0x358
 public:
  MemoryPool(char* buf, size_t capa)
      : _begin(buf),
        _left(buf),
        _right(buf ? buf + capa : 0),
        _end(buf ? buf + capa : 0) {
 80815b4:	ab56      	add	r3, sp, #344	; 0x158
 80815b6:	ac4e      	add	r4, sp, #312	; 0x138
 80815b8:	934e      	str	r3, [sp, #312]	; 0x138
 80815ba:	934f      	str	r3, [sp, #316]	; 0x13c
      setType(VALUE_IS_NULL);
    }
  }

  void setNull() {
    setType(VALUE_IS_NULL);
 80815bc:	2100      	movs	r1, #0
 80815be:	abd6      	add	r3, sp, #856	; 0x358
 80815c0:	a854      	add	r0, sp, #336	; 0x150
 80815c2:	9350      	str	r3, [sp, #320]	; 0x140
 80815c4:	9351      	str	r3, [sp, #324]	; 0x144
 80815c6:	f7fe fd8b 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
    s.size = newSize;
    checkInvariants();
  }

  void clear() {
    _left = _begin;
 80815ca:	6823      	ldr	r3, [r4, #0]
 80815cc:	2100      	movs	r1, #0
 80815ce:	6063      	str	r3, [r4, #4]
    _right = _end;
 80815d0:	68e3      	ldr	r3, [r4, #12]
 80815d2:	a854      	add	r0, sp, #336	; 0x150
 80815d4:	60a3      	str	r3, [r4, #8]
 80815d6:	f7fe fd83 	bl	80800e0 <_ZN21ArduinoJson6110_1100011VariantData7setTypeEh.isra.7>
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _pool(&pool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
 80815da:	4ba2      	ldr	r3, [pc, #648]	; (8081864 <_Z15PublishResponsev+0x2b8>)
  DeserializationError parse(VariantData &variant) {
    DeserializationError err = parseVariant(variant);
 80815dc:	a952      	add	r1, sp, #328	; 0x148
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _pool(&pool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
 80815de:	9307      	str	r3, [sp, #28]
 80815e0:	9308      	str	r3, [sp, #32]
 80815e2:	2332      	movs	r3, #50	; 0x32
 80815e4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  DeserializationError parse(VariantData &variant) {
    DeserializationError err = parseVariant(variant);
 80815e8:	a806      	add	r0, sp, #24
                   TStringStorage stringStorage, uint8_t nestingLimit)
      : _pool(&pool),
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
 80815ea:	2300      	movs	r3, #0
 80815ec:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
 80815f0:	9406      	str	r4, [sp, #24]
  DeserializationError parse(VariantData &variant) {
    DeserializationError err = parseVariant(variant);
 80815f2:	f7ff fa9e 	bl	8080b32 <_ZN21ArduinoJson6110_1100016JsonDeserializerINS_23UnsafeCharPointerReaderENS_11StringMoverEE12parseVariantERNS_11VariantDataE>

    if (!err && _current != 0 && !variant.isEnclosed()) {
 80815f6:	a902      	add	r1, sp, #8
        _reader(reader),
        _stringStorage(stringStorage),
        _nestingLimit(nestingLimit),
        _loaded(false) {}
  DeserializationError parse(VariantData &variant) {
    DeserializationError err = parseVariant(variant);
 80815f8:	f88d 0008 	strb.w	r0, [sp, #8]

    if (!err && _current != 0 && !variant.isEnclosed()) {
 80815fc:	a804      	add	r0, sp, #16
 80815fe:	f7fe fdcb 	bl	8080198 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
 8081602:	9b04      	ldr	r3, [sp, #16]
 8081604:	b98b      	cbnz	r3, 808162a <_Z15PublishResponsev+0x7e>
 8081606:	9b05      	ldr	r3, [sp, #20]
 8081608:	07da      	lsls	r2, r3, #31
 808160a:	d40e      	bmi.n	808162a <_Z15PublishResponsev+0x7e>
 808160c:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8081610:	b15b      	cbz	r3, 808162a <_Z15PublishResponsev+0x7e>
 8081612:	7e23      	ldrb	r3, [r4, #24]
  bool isNull() const {
    return type() == VALUE_IS_NULL;
  }

  bool isEnclosed() const {
    return isCollection() || isString();
 8081614:	f013 0f60 	tst.w	r3, #96	; 0x60
 8081618:	d107      	bne.n	808162a <_Z15PublishResponsev+0x7e>
    return type() == VALUE_IS_FLOAT || type() == VALUE_IS_POSITIVE_INTEGER ||
           type() == VALUE_IS_NEGATIVE_INTEGER;
  }

  bool isString() const {
    return type() == VALUE_IS_LINKED_STRING || type() == VALUE_IS_OWNED_STRING;
 808161a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 808161e:	3b03      	subs	r3, #3
 8081620:	2b01      	cmp	r3, #1
      // We don't detect trailing characters earlier, so we need to check now
      err = DeserializationError::InvalidInput;
 8081622:	bf84      	itt	hi
 8081624:	2302      	movhi	r3, #2
 8081626:	f88d 3008 	strbhi.w	r3, [sp, #8]
    }

    return err;
 808162a:	f89d 3008 	ldrb.w	r3, [sp, #8]
    bool bvalue = false;
    
    StaticJsonDocument<512> jd;
    DeserializationError error = deserializeJson(jd, subMessage);
    
    StaticJsonDocument<256> jsonDoc;
 808162e:	a806      	add	r0, sp, #24
    
    int value = 99;
    bool bvalue = false;
    
    StaticJsonDocument<512> jd;
    DeserializationError error = deserializeJson(jd, subMessage);
 8081630:	f88d 3004 	strb.w	r3, [sp, #4]
    
    StaticJsonDocument<256> jsonDoc;
 8081634:	f7fe fec8 	bl	80803c8 <_ZN21ArduinoJson6110_1100018StaticJsonDocumentILj256EEC1Ev>
    
    if (!error) {
 8081638:	a901      	add	r1, sp, #4
 808163a:	a802      	add	r0, sp, #8
 808163c:	f7fe fdac 	bl	8080198 <_ZNK21ArduinoJson6110_1100020DeserializationErrorcvMS0_KFvvEEv>
 8081640:	9b02      	ldr	r3, [sp, #8]
 8081642:	4e89      	ldr	r6, [pc, #548]	; (8081868 <_Z15PublishResponsev+0x2bc>)
 8081644:	2b00      	cmp	r3, #0
 8081646:	f040 80dd 	bne.w	8081804 <_Z15PublishResponsev+0x258>
 808164a:	9b03      	ldr	r3, [sp, #12]
 808164c:	07db      	lsls	r3, r3, #31
 808164e:	f100 80d9 	bmi.w	8081804 <_Z15PublishResponsev+0x258>
  // JsonVariant getMember(char*)
  // JsonVariant getMember(const char*)
  // JsonVariant getMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getMember(TChar* key) {
    return VariantRef(&_pool, _data.getMember(adaptString(key)));
 8081652:	4986      	ldr	r1, [pc, #536]	; (808186c <_Z15PublishResponsev+0x2c0>)
 8081654:	a852      	add	r0, sp, #328	; 0x148
 8081656:	f7fe ff8d 	bl	8080574 <_ZNK21ArduinoJson6110_1100011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
  FORCE_INLINE typename enable_if<!is_same<T, ArrayRef>::value &&
                                      !is_same<T, ObjectRef>::value &&
                                      !is_same<T, VariantRef>::value,
                                  typename VariantAs<T>::type>::type
  as() const {
    return variantAs<T>(_data);
 808165a:	f7fe ff34 	bl	80804c6 <_ZN21ArduinoJson6110_110009variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 808165e:	4984      	ldr	r1, [pc, #528]	; (8081870 <_Z15PublishResponsev+0x2c4>)
 8081660:	4607      	mov	r7, r0
 8081662:	a852      	add	r0, sp, #328	; 0x148
 8081664:	f7fe ff86 	bl	8080574 <_ZNK21ArduinoJson6110_1100011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
 8081668:	f7fe ff2d 	bl	80804c6 <_ZN21ArduinoJson6110_110009variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
 808166c:	4981      	ldr	r1, [pc, #516]	; (8081874 <_Z15PublishResponsev+0x2c8>)
 808166e:	4605      	mov	r5, r0
 8081670:	a852      	add	r0, sp, #328	; 0x148
 8081672:	f7fe ff7f 	bl	8080574 <_ZNK21ArduinoJson6110_1100011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
 8081676:	f7fe ff26 	bl	80804c6 <_ZN21ArduinoJson6110_110009variantAsIPKcEENS_9enable_ifIXoosrNS_7is_sameIT_S2_EE5valuesrNS4_IS5_PcEE5valueES2_E4typeEPKNS_11VariantDataE>
        // parseObject() succeeded
        const char* uuid = jd["uuid"];
        const char* cmd = jd["cmd"];
        const char* method = jd["method"];
        
        if (strcmp(method, "set") == 0) {
 808167a:	497f      	ldr	r1, [pc, #508]	; (8081878 <_Z15PublishResponsev+0x2cc>)
 808167c:	4680      	mov	r8, r0
 808167e:	f003 f978 	bl	8084972 <strcmp>
 8081682:	2800      	cmp	r0, #0
 8081684:	d15a      	bne.n	808173c <_Z15PublishResponsev+0x190>
            if (strcmp(cmd, "Led") == 0) { 
 8081686:	497d      	ldr	r1, [pc, #500]	; (808187c <_Z15PublishResponsev+0x2d0>)
 8081688:	4628      	mov	r0, r5
 808168a:	f003 f972 	bl	8084972 <strcmp>
 808168e:	2800      	cmp	r0, #0
 8081690:	d13c      	bne.n	808170c <_Z15PublishResponsev+0x160>
 8081692:	497a      	ldr	r1, [pc, #488]	; (808187c <_Z15PublishResponsev+0x2d0>)
 8081694:	a852      	add	r0, sp, #328	; 0x148
 8081696:	f7fe ff6d 	bl	8080574 <_ZNK21ArduinoJson6110_1100011VariantData9getMemberINS_21ConstRamStringAdapterEEEPS0_T_>
}

template <typename T>
inline typename enable_if<is_same<T, bool>::value, T>::type variantAs(
    const VariantData* _data) {
  return _data != 0 ? _data->asBoolean() : false;
 808169a:	b350      	cbz	r0, 80816f2 <_Z15PublishResponsev+0x146>
      return 0;
  }
}

inline bool VariantData::asBoolean() const {
  switch (type()) {
 808169c:	7a03      	ldrb	r3, [r0, #8]
 808169e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80816a2:	3b03      	subs	r3, #3
 80816a4:	2b05      	cmp	r3, #5
 80816a6:	d824      	bhi.n	80816f2 <_Z15PublishResponsev+0x146>
 80816a8:	e8df f003 	tbb	[pc, r3]
 80816ac:	03031616 	.word	0x03031616
 80816b0:	0a03      	.short	0x0a03
    case VALUE_IS_POSITIVE_INTEGER:
    case VALUE_IS_BOOLEAN:
    case VALUE_IS_NEGATIVE_INTEGER:
      return _content.asInteger != 0;
 80816b2:	e890 000c 	ldmia.w	r0, {r2, r3}
 80816b6:	4313      	orrs	r3, r2
 80816b8:	bf14      	ite	ne
 80816ba:	2401      	movne	r4, #1
 80816bc:	2400      	moveq	r4, #0
 80816be:	e012      	b.n	80816e6 <_Z15PublishResponsev+0x13a>
    case VALUE_IS_FLOAT:
      return _content.asFloat != 0;
 80816c0:	2200      	movs	r2, #0
 80816c2:	2300      	movs	r3, #0
 80816c4:	c803      	ldmia	r0, {r0, r1}
 80816c6:	f04f 0401 	mov.w	r4, #1
 80816ca:	f002 ff17 	bl	80844fc <__aeabi_dcmpeq>
 80816ce:	b108      	cbz	r0, 80816d4 <_Z15PublishResponsev+0x128>
 80816d0:	f04f 0400 	mov.w	r4, #0
 80816d4:	b2e4      	uxtb	r4, r4
 80816d6:	e006      	b.n	80816e6 <_Z15PublishResponsev+0x13a>
    case VALUE_IS_LINKED_STRING:
    case VALUE_IS_OWNED_STRING:
      return strcmp("true", _content.asString) == 0;
 80816d8:	6801      	ldr	r1, [r0, #0]
 80816da:	4869      	ldr	r0, [pc, #420]	; (8081880 <_Z15PublishResponsev+0x2d4>)
 80816dc:	f003 f949 	bl	8084972 <strcmp>
 80816e0:	fab0 f480 	clz	r4, r0
 80816e4:	0964      	lsrs	r4, r4, #5
                bool value = jd["Led"];
                
                if (value) {
 80816e6:	b124      	cbz	r4, 80816f2 <_Z15PublishResponsev+0x146>
                    digitalWrite(LEDPIN, HIGH);
 80816e8:	2101      	movs	r1, #1
 80816ea:	2002      	movs	r0, #2
 80816ec:	f002 f8ed 	bl	80838ca <digitalWrite>
 80816f0:	e004      	b.n	80816fc <_Z15PublishResponsev+0x150>
                }
                else {
                    digitalWrite(LEDPIN, LOW);
 80816f2:	2100      	movs	r1, #0
 80816f4:	2002      	movs	r0, #2
 80816f6:	f002 f8e8 	bl	80838ca <digitalWrite>
 80816fa:	2400      	movs	r4, #0
  // getOrAddMember(char*)
  // getOrAddMember(const char*)
  // getOrAddMember(const __FlashStringHelper*)
  template <typename TChar>
  FORCE_INLINE VariantRef getOrAddMember(TChar* key) {
    return VariantRef(&_pool, _data.getOrAddMember(adaptString(key), &_pool));
 80816fc:	4629      	mov	r1, r5
 80816fe:	aa06      	add	r2, sp, #24
 8081700:	a80a      	add	r0, sp, #40	; 0x28
 8081702:	f7fe feba 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
    return variantSetNull(_data);
  }

  // set(bool value)
  FORCE_INLINE bool set(bool value) const {
    return variantSetBoolean(_data, value);
 8081706:	4621      	mov	r1, r4
 8081708:	f7fe fd08 	bl	808011c <_ZN21ArduinoJson6110_1100017variantSetBooleanEPNS_11VariantDataEb>
 808170c:	aa06      	add	r2, sp, #24
 808170e:	495d      	ldr	r1, [pc, #372]	; (8081884 <_Z15PublishResponsev+0x2d8>)
 8081710:	a80a      	add	r0, sp, #40	; 0x28
 8081712:	f7fe feb2 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
 8081716:	aa06      	add	r2, sp, #24
 8081718:	495b      	ldr	r1, [pc, #364]	; (8081888 <_Z15PublishResponsev+0x2dc>)
 808171a:	f7fe fe6c 	bl	80803f6 <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
 808171e:	aa06      	add	r2, sp, #24
 8081720:	4953      	ldr	r1, [pc, #332]	; (8081870 <_Z15PublishResponsev+0x2c4>)
 8081722:	a80a      	add	r0, sp, #40	; 0x28
 8081724:	f7fe fea9 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
 8081728:	4629      	mov	r1, r5
 808172a:	f7fe fd06 	bl	808013a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
 808172e:	4951      	ldr	r1, [pc, #324]	; (8081874 <_Z15PublishResponsev+0x2c8>)
 8081730:	aa06      	add	r2, sp, #24
 8081732:	a80a      	add	r0, sp, #40	; 0x28
 8081734:	f7fe fea1 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
 8081738:	4641      	mov	r1, r8
 808173a:	e058      	b.n	80817ee <_Z15PublishResponsev+0x242>
        
            mqtt->publish(responseTopic, buffer);
        }
        else {
            
            if (strcmp(cmd, "LightSensor") == 0) { 
 808173c:	4953      	ldr	r1, [pc, #332]	; (808188c <_Z15PublishResponsev+0x2e0>)
 808173e:	4628      	mov	r0, r5
 8081740:	f003 f917 	bl	8084972 <strcmp>
 8081744:	b970      	cbnz	r0, 8081764 <_Z15PublishResponsev+0x1b8>
                value = analogRead(LIGHTPIN);
 8081746:	200c      	movs	r0, #12
 8081748:	f002 f8eb 	bl	8083922 <analogRead>
 808174c:	aa06      	add	r2, sp, #24
 808174e:	4948      	ldr	r1, [pc, #288]	; (8081870 <_Z15PublishResponsev+0x2c4>)
 8081750:	4604      	mov	r4, r0
 8081752:	a80a      	add	r0, sp, #40	; 0x28
 8081754:	f7fe fe91 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
 8081758:	494c      	ldr	r1, [pc, #304]	; (808188c <_Z15PublishResponsev+0x2e0>)
 808175a:	f7fe fcee 	bl	808013a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
 808175e:	aa06      	add	r2, sp, #24
 8081760:	494a      	ldr	r1, [pc, #296]	; (808188c <_Z15PublishResponsev+0x2e0>)
 8081762:	e012      	b.n	808178a <_Z15PublishResponsev+0x1de>
                jsonDoc["cmd"] = "LightSensor";
                jsonDoc["LightSensor"] = value;
            }
            else if (strcmp(cmd, "RotaryAngleSensor") == 0) { 
 8081764:	494a      	ldr	r1, [pc, #296]	; (8081890 <_Z15PublishResponsev+0x2e4>)
 8081766:	4628      	mov	r0, r5
 8081768:	f003 f903 	bl	8084972 <strcmp>
 808176c:	b9a0      	cbnz	r0, 8081798 <_Z15PublishResponsev+0x1ec>
                value = analogRead(ANGLEPIN);
 808176e:	200a      	movs	r0, #10
 8081770:	f002 f8d7 	bl	8083922 <analogRead>
 8081774:	aa06      	add	r2, sp, #24
 8081776:	493e      	ldr	r1, [pc, #248]	; (8081870 <_Z15PublishResponsev+0x2c4>)
 8081778:	4604      	mov	r4, r0
 808177a:	a80a      	add	r0, sp, #40	; 0x28
 808177c:	f7fe fe7d 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
 8081780:	4943      	ldr	r1, [pc, #268]	; (8081890 <_Z15PublishResponsev+0x2e4>)
 8081782:	f7fe fcda 	bl	808013a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
 8081786:	4942      	ldr	r1, [pc, #264]	; (8081890 <_Z15PublishResponsev+0x2e4>)
 8081788:	aa06      	add	r2, sp, #24
 808178a:	a80a      	add	r0, sp, #40	; 0x28
 808178c:	f7fe fe75 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  template <typename T>
  FORCE_INLINE bool set(
      T value,
      typename enable_if<is_integral<T>::value && is_signed<T>::value>::type * =
          0) const {
    return variantSetSignedInteger(_data, value);
 8081790:	4621      	mov	r1, r4
 8081792:	f7fe fe59 	bl	8080448 <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_>
 8081796:	e01b      	b.n	80817d0 <_Z15PublishResponsev+0x224>
                jsonDoc["cmd"] = "RotaryAngleSensor";
                jsonDoc["RotaryAngleSensor"] = value;
            }
            else if (strcmp(cmd, "Button") == 0) { 
 8081798:	493e      	ldr	r1, [pc, #248]	; (8081894 <_Z15PublishResponsev+0x2e8>)
 808179a:	4628      	mov	r0, r5
 808179c:	f003 f8e9 	bl	8084972 <strcmp>
 80817a0:	b9b0      	cbnz	r0, 80817d0 <_Z15PublishResponsev+0x224>
                value = analogRead(BUTTONPIN);
 80817a2:	2001      	movs	r0, #1
 80817a4:	f002 f8bd 	bl	8083922 <analogRead>
 80817a8:	4604      	mov	r4, r0
 80817aa:	aa06      	add	r2, sp, #24
 80817ac:	4930      	ldr	r1, [pc, #192]	; (8081870 <_Z15PublishResponsev+0x2c4>)
 80817ae:	a80a      	add	r0, sp, #40	; 0x28
 80817b0:	f7fe fe63 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
    return variantSetOwnedString(_data, adaptString(value), _pool);
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
 80817b4:	4937      	ldr	r1, [pc, #220]	; (8081894 <_Z15PublishResponsev+0x2e8>)
 80817b6:	f7fe fcc0 	bl	808013a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
 80817ba:	4936      	ldr	r1, [pc, #216]	; (8081894 <_Z15PublishResponsev+0x2e8>)
 80817bc:	aa06      	add	r2, sp, #24
 80817be:	a80a      	add	r0, sp, #40	; 0x28
 80817c0:	f7fe fe5b 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
    return variantSetNull(_data);
  }

  // set(bool value)
  FORCE_INLINE bool set(bool value) const {
    return variantSetBoolean(_data, value);
 80817c4:	2c00      	cmp	r4, #0
 80817c6:	bfd4      	ite	le
 80817c8:	2100      	movle	r1, #0
 80817ca:	2101      	movgt	r1, #1
 80817cc:	f7fe fca6 	bl	808011c <_ZN21ArduinoJson6110_1100017variantSetBooleanEPNS_11VariantDataEb>
 80817d0:	aa06      	add	r2, sp, #24
 80817d2:	492c      	ldr	r1, [pc, #176]	; (8081884 <_Z15PublishResponsev+0x2d8>)
 80817d4:	a80a      	add	r0, sp, #40	; 0x28
 80817d6:	f7fe fe50 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
 80817da:	aa06      	add	r2, sp, #24
 80817dc:	492a      	ldr	r1, [pc, #168]	; (8081888 <_Z15PublishResponsev+0x2dc>)
 80817de:	f7fe fe0a 	bl	80803f6 <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
 80817e2:	4924      	ldr	r1, [pc, #144]	; (8081874 <_Z15PublishResponsev+0x2c8>)
 80817e4:	aa06      	add	r2, sp, #24
 80817e6:	a80a      	add	r0, sp, #40	; 0x28
 80817e8:	f7fe fe47 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
 80817ec:	492a      	ldr	r1, [pc, #168]	; (8081898 <_Z15PublishResponsev+0x2ec>)
 80817ee:	f7fe fca4 	bl	808013a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
 80817f2:	aa06      	add	r2, sp, #24
 80817f4:	491d      	ldr	r1, [pc, #116]	; (808186c <_Z15PublishResponsev+0x2c0>)
 80817f6:	a80a      	add	r0, sp, #40	; 0x28
 80817f8:	f7fe fe3f 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
 80817fc:	4639      	mov	r1, r7
 80817fe:	f7fe fc9c 	bl	808013a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
 8081802:	e020      	b.n	8081846 <_Z15PublishResponsev+0x29a>
 8081804:	aa06      	add	r2, sp, #24
 8081806:	491f      	ldr	r1, [pc, #124]	; (8081884 <_Z15PublishResponsev+0x2d8>)
 8081808:	a80a      	add	r0, sp, #40	; 0x28
 808180a:	f7fe fe36 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  // set(char*)
  // set(const __FlashStringHelper*)
  template <typename T>
  FORCE_INLINE bool set(
      T *value, typename enable_if<IsString<T *>::value>::type * = 0) const {
    return variantSetOwnedString(_data, adaptString(value), _pool);
 808180e:	aa06      	add	r2, sp, #24
 8081810:	491d      	ldr	r1, [pc, #116]	; (8081888 <_Z15PublishResponsev+0x2dc>)
 8081812:	f7fe fdf0 	bl	80803f6 <_ZN21ArduinoJson6110_1100021variantSetOwnedStringINS_16RamStringAdapterEEEbPNS_11VariantDataET_PNS_10MemoryPoolE>
 8081816:	aa06      	add	r2, sp, #24
 8081818:	4915      	ldr	r1, [pc, #84]	; (8081870 <_Z15PublishResponsev+0x2c4>)
 808181a:	a80a      	add	r0, sp, #40	; 0x28
 808181c:	f7fe fe2d 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  }

  // set(const char*);
  FORCE_INLINE bool set(const char *value) const {
    return variantSetLinkedString(_data, value);
 8081820:	491a      	ldr	r1, [pc, #104]	; (808188c <_Z15PublishResponsev+0x2e0>)
 8081822:	f7fe fc8a 	bl	808013a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
 8081826:	aa06      	add	r2, sp, #24
 8081828:	4912      	ldr	r1, [pc, #72]	; (8081874 <_Z15PublishResponsev+0x2c8>)
 808182a:	a80a      	add	r0, sp, #40	; 0x28
 808182c:	f7fe fe25 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
 8081830:	4919      	ldr	r1, [pc, #100]	; (8081898 <_Z15PublishResponsev+0x2ec>)
 8081832:	f7fe fc82 	bl	808013a <_ZN21ArduinoJson6110_1100022variantSetLinkedStringEPNS_11VariantDataEPKc>
 8081836:	4915      	ldr	r1, [pc, #84]	; (808188c <_Z15PublishResponsev+0x2e0>)
 8081838:	aa06      	add	r2, sp, #24
 808183a:	a80a      	add	r0, sp, #40	; 0x28
 808183c:	f7fe fe1d 	bl	808047a <_ZN21ArduinoJson6110_1100011VariantData14getOrAddMemberINS_21ConstRamStringAdapterEEEPS0_T_PNS_10MemoryPoolE>
  template <typename T>
  FORCE_INLINE bool set(
      T value,
      typename enable_if<is_integral<T>::value && is_signed<T>::value>::type * =
          0) const {
    return variantSetSignedInteger(_data, value);
 8081840:	2163      	movs	r1, #99	; 0x63
 8081842:	f7fe fe01 	bl	8080448 <_ZN21ArduinoJson6110_1100023variantSetSignedIntegerIiEEbPNS_11VariantDataET_>
        jsonDoc["name"] = deviceName;
        jsonDoc["cmd"] = "LightSensor";
        jsonDoc["method"] = "get";
        jsonDoc["LightSensor"] = value;
    
        serializeJson(jsonDoc, buffer);
 8081846:	4915      	ldr	r1, [pc, #84]	; (808189c <_Z15PublishResponsev+0x2f0>)
 8081848:	a806      	add	r0, sp, #24
 808184a:	f7ff fd9f 	bl	808138c <_ZN21ArduinoJson6110_1100013serializeJsonINS_18StaticJsonDocumentILj256EEEA512_cEEjRKT_RT0_>
        
        mqtt->publish(responseTopic, buffer);
 808184e:	4a13      	ldr	r2, [pc, #76]	; (808189c <_Z15PublishResponsev+0x2f0>)
 8081850:	4913      	ldr	r1, [pc, #76]	; (80818a0 <_Z15PublishResponsev+0x2f4>)
 8081852:	6830      	ldr	r0, [r6, #0]
 8081854:	f000 fab9 	bl	8081dca <_ZN4MQTT7publishEPKcS1_>
    }
    
    return 0;
}
 8081858:	2000      	movs	r0, #0
 808185a:	f50d 7d56 	add.w	sp, sp, #856	; 0x358
 808185e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8081862:	bf00      	nop
 8081864:	20000901 	.word	0x20000901
 8081868:	20000570 	.word	0x20000570
 808186c:	08084ae0 	.word	0x08084ae0
 8081870:	08084aa8 	.word	0x08084aa8
 8081874:	08084ab8 	.word	0x08084ab8
 8081878:	08084ae5 	.word	0x08084ae5
 808187c:	08084adc 	.word	0x08084adc
 8081880:	08084a94 	.word	0x08084a94
 8081884:	08084a34 	.word	0x08084a34
 8081888:	20000574 	.word	0x20000574
 808188c:	08084aac 	.word	0x08084aac
 8081890:	08084ac3 	.word	0x08084ac3
 8081894:	08084ad5 	.word	0x08084ad5
 8081898:	08084abf 	.word	0x08084abf
 808189c:	20000b01 	.word	0x20000b01
 80818a0:	200006fb 	.word	0x200006fb

080818a4 <_Z12mqttReceiverPcPhj>:

// --------------------------------------------- Receive an MQTT Message
// triggered when a message is received from the MQTT Broker
void mqttReceiver(char* topic, byte* payload, unsigned int length) {
    //strncpy(subTopic, topic, sizeof(subTopic));
	memcpy(subMessage, payload, length);
 80818a4:	4b05      	ldr	r3, [pc, #20]	; (80818bc <_Z12mqttReceiverPcPhj+0x18>)
	} else return 1;
}

// --------------------------------------------- Receive an MQTT Message
// triggered when a message is received from the MQTT Broker
void mqttReceiver(char* topic, byte* payload, unsigned int length) {
 80818a6:	b510      	push	{r4, lr}
    //strncpy(subTopic, topic, sizeof(subTopic));
	memcpy(subMessage, payload, length);
 80818a8:	4618      	mov	r0, r3
	} else return 1;
}

// --------------------------------------------- Receive an MQTT Message
// triggered when a message is received from the MQTT Broker
void mqttReceiver(char* topic, byte* payload, unsigned int length) {
 80818aa:	4614      	mov	r4, r2
    //strncpy(subTopic, topic, sizeof(subTopic));
	memcpy(subMessage, payload, length);
 80818ac:	f003 f816 	bl	80848dc <memcpy>
	subMessage[length] = '\0';
 80818b0:	2200      	movs	r2, #0
 80818b2:	5502      	strb	r2, [r0, r4]
	
	PublishResponse();
}
 80818b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
void mqttReceiver(char* topic, byte* payload, unsigned int length) {
    //strncpy(subTopic, topic, sizeof(subTopic));
	memcpy(subMessage, payload, length);
	subMessage[length] = '\0';
	
	PublishResponse();
 80818b8:	f7ff be78 	b.w	80815ac <_Z15PublishResponsev>
 80818bc:	20000901 	.word	0x20000901

080818c0 <_GLOBAL__sub_I_mqtt>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80818c0:	4b02      	ldr	r3, [pc, #8]	; (80818cc <_GLOBAL__sub_I_mqtt+0xc>)
 80818c2:	2201      	movs	r2, #1
 80818c4:	701a      	strb	r2, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80818c6:	f000 bc21 	b.w	808210c <HAL_Pin_Map>
 80818ca:	bf00      	nop
 80818cc:	200005f9 	.word	0x200005f9

080818d0 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
 80818d0:	b538      	push	{r3, r4, r5, lr}
 80818d2:	4b0b      	ldr	r3, [pc, #44]	; (8081900 <_ZN9TCPClientD1Ev+0x30>)
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 80818d4:	6984      	ldr	r4, [r0, #24]
 80818d6:	4605      	mov	r5, r0
 80818d8:	6003      	str	r3, [r0, #0]
 80818da:	b17c      	cbz	r4, 80818fc <_ZN9TCPClientD1Ev+0x2c>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80818dc:	6863      	ldr	r3, [r4, #4]
 80818de:	3b01      	subs	r3, #1
 80818e0:	6063      	str	r3, [r4, #4]
 80818e2:	b95b      	cbnz	r3, 80818fc <_ZN9TCPClientD1Ev+0x2c>
        {
          _M_dispose();
 80818e4:	6823      	ldr	r3, [r4, #0]
 80818e6:	4620      	mov	r0, r4
 80818e8:	689b      	ldr	r3, [r3, #8]
 80818ea:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80818ec:	68a3      	ldr	r3, [r4, #8]
 80818ee:	3b01      	subs	r3, #1
 80818f0:	60a3      	str	r3, [r4, #8]
 80818f2:	b91b      	cbnz	r3, 80818fc <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
 80818f4:	6823      	ldr	r3, [r4, #0]
 80818f6:	4620      	mov	r0, r4
 80818f8:	68db      	ldr	r3, [r3, #12]
 80818fa:	4798      	blx	r3
 80818fc:	4628      	mov	r0, r5
 80818fe:	bd38      	pop	{r3, r4, r5, pc}
 8081900:	08084cd0 	.word	0x08084cd0

08081904 <_ZN9TCPClientD0Ev>:
 8081904:	b510      	push	{r4, lr}
 8081906:	4604      	mov	r4, r0
 8081908:	f7ff ffe2 	bl	80818d0 <_ZN9TCPClientD1Ev>
 808190c:	4620      	mov	r0, r4
 808190e:	f7fe fbc8 	bl	80800a2 <_ZdlPv>
 8081912:	4620      	mov	r0, r4
 8081914:	bd10      	pop	{r4, pc}

08081916 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>:

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 8081916:	b538      	push	{r3, r4, r5, lr}
 8081918:	461d      	mov	r5, r3
    this->callback = callback;
 808191a:	9b05      	ldr	r3, [sp, #20]

    if (buffer != NULL)
      delete[] buffer;
}

void MQTT::initialize(char* domain, uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
 808191c:	4604      	mov	r4, r0
    this->callback = callback;
 808191e:	6303      	str	r3, [r0, #48]	; 0x30
    this->qoscallback = NULL;
 8081920:	2300      	movs	r3, #0
 8081922:	6343      	str	r3, [r0, #52]	; 0x34
    if (ip != NULL)
 8081924:	b102      	cbz	r2, 8081928 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x12>
        this->ip = ip;
 8081926:	6482      	str	r2, [r0, #72]	; 0x48
    if (domain != NULL)
 8081928:	b119      	cbz	r1, 8081932 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x1c>
        this->domain = domain;
 808192a:	f104 0038 	add.w	r0, r4, #56	; 0x38
 808192e:	f001 fb34 	bl	8082f9a <_ZN6StringaSEPKc>
    this->port = port;
    this->keepalive = keepalive;
 8081932:	9b04      	ldr	r3, [sp, #16]

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
    if (buffer != NULL)
 8081934:	69e0      	ldr	r0, [r4, #28]
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
    this->keepalive = keepalive;
 8081936:	6523      	str	r3, [r4, #80]	; 0x50

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 8081938:	9b06      	ldr	r3, [sp, #24]
    this->qoscallback = NULL;
    if (ip != NULL)
        this->ip = ip;
    if (domain != NULL)
        this->domain = domain;
    this->port = port;
 808193a:	f8a4 504c 	strh.w	r5, [r4, #76]	; 0x4c
    this->keepalive = keepalive;

    // if maxpacketsize is over MQTT_MAX_PACKET_SIZE.
    this->maxpacketsize = (maxpacketsize <= MQTT_MAX_PACKET_SIZE ? MQTT_MAX_PACKET_SIZE : maxpacketsize);
 808193e:	2bff      	cmp	r3, #255	; 0xff
 8081940:	bfb8      	it	lt
 8081942:	23ff      	movlt	r3, #255	; 0xff
 8081944:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    if (buffer != NULL)
 8081948:	b108      	cbz	r0, 808194e <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi+0x38>
      delete[] buffer;
 808194a:	f7fe fbac 	bl	80800a6 <_ZdaPv>
    buffer = new uint8_t[this->maxpacketsize];
 808194e:	f8b4 0054 	ldrh.w	r0, [r4, #84]	; 0x54
 8081952:	f7fe fba4 	bl	808009e <_Znaj>
 8081956:	61e0      	str	r0, [r4, #28]
 8081958:	bd38      	pop	{r3, r4, r5, pc}
	...

0808195c <_ZN4MQTTC1EPhtiPFvPcS0_jE>:

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int)) {
 808195c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8081960:	4604      	mov	r4, r0
 8081962:	4617      	mov	r7, r2
 8081964:	4698      	mov	r8, r3
 8081966:	460e      	mov	r6, r1
 8081968:	2500      	movs	r5, #0
 808196a:	f001 fd59 	bl	8083420 <_ZN9TCPClientC1Ev>
 808196e:	61e5      	str	r5, [r4, #28]
 8081970:	490a      	ldr	r1, [pc, #40]	; (808199c <_ZN4MQTTC1EPhtiPFvPcS0_jE+0x40>)
 8081972:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8081976:	f001 fafd 	bl	8082f74 <_ZN6StringC1EPK19__FlashStringHelper>
    this->initialize(NULL, ip, port, keepalive, callback, MQTT_MAX_PACKET_SIZE);
 808197a:	23ff      	movs	r3, #255	; 0xff
 808197c:	9302      	str	r3, [sp, #8]
 808197e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8081980:	4620      	mov	r0, r4
 8081982:	9301      	str	r3, [sp, #4]

MQTT::MQTT(char* domain, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int), int maxpacketsize) {
    this->initialize(domain, NULL, port, keepalive, callback, maxpacketsize);
}

MQTT::MQTT(uint8_t *ip, uint16_t port, int keepalive, void (*callback)(char*,uint8_t*,unsigned int)) {
 8081984:	64a5      	str	r5, [r4, #72]	; 0x48
    this->initialize(NULL, ip, port, keepalive, callback, MQTT_MAX_PACKET_SIZE);
 8081986:	f8cd 8000 	str.w	r8, [sp]
 808198a:	463b      	mov	r3, r7
 808198c:	4632      	mov	r2, r6
 808198e:	4629      	mov	r1, r5
 8081990:	f7ff ffc1 	bl	8081916 <_ZN4MQTT10initializeEPcPhtiPFvS0_S1_jEi>
}
 8081994:	4620      	mov	r0, r4
 8081996:	b004      	add	sp, #16
 8081998:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808199c:	08084a8b 	.word	0x08084a8b

080819a0 <_ZN4MQTT8readByteEv>:
        _client.stop();
    }
    return false;
}

uint8_t MQTT::readByte() {
 80819a0:	b510      	push	{r4, lr}
 80819a2:	4604      	mov	r4, r0
    while(!_client.available()) {}
 80819a4:	4620      	mov	r0, r4
 80819a6:	f001 fbd6 	bl	8083156 <_ZN9TCPClient9availableEv>
 80819aa:	2800      	cmp	r0, #0
 80819ac:	d0fa      	beq.n	80819a4 <_ZN4MQTT8readByteEv+0x4>
    return _client.read();
 80819ae:	4620      	mov	r0, r4
 80819b0:	f001 fb86 	bl	80830c0 <_ZN9TCPClient4readEv>
}
 80819b4:	b2c0      	uxtb	r0, r0
 80819b6:	bd10      	pop	{r4, pc}

080819b8 <_ZN4MQTT10readPacketEPh>:

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80819b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80819bc:	4605      	mov	r5, r0
    uint16_t len = 0;
    buffer[len++] = readByte();
 80819be:	69c4      	ldr	r4, [r0, #28]
uint8_t MQTT::readByte() {
    while(!_client.available()) {}
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
 80819c0:	468a      	mov	sl, r1
    uint16_t len = 0;
    buffer[len++] = readByte();
 80819c2:	f7ff ffed 	bl	80819a0 <_ZN4MQTT8readByteEv>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
 80819c6:	f04f 0801 	mov.w	r8, #1
    return _client.read();
}

uint16_t MQTT::readPacket(uint8_t* lengthLength) {
    uint16_t len = 0;
    buffer[len++] = readByte();
 80819ca:	4646      	mov	r6, r8
 80819cc:	7020      	strb	r0, [r4, #0]
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
 80819ce:	69eb      	ldr	r3, [r5, #28]
    uint32_t multiplier = 1;
    uint16_t length = 0;
 80819d0:	2700      	movs	r7, #0
 80819d2:	f893 9000 	ldrb.w	r9, [r3]
 80819d6:	f009 09f0 	and.w	r9, r9, #240	; 0xf0
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
 80819da:	4628      	mov	r0, r5
 80819dc:	f7ff ffe0 	bl	80819a0 <_ZN4MQTT8readByteEv>
        buffer[len++] = digit;
 80819e0:	69eb      	ldr	r3, [r5, #28]
 80819e2:	1c74      	adds	r4, r6, #1
 80819e4:	5598      	strb	r0, [r3, r6]
        length += (digit & 127) * multiplier;
 80819e6:	f000 037f 	and.w	r3, r0, #127	; 0x7f
 80819ea:	fb03 7708 	mla	r7, r3, r8, r7
        multiplier *= 128;
    } while ((digit & 128) != 0);
 80819ee:	0603      	lsls	r3, r0, #24
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80819f0:	b2a4      	uxth	r4, r4
        length += (digit & 127) * multiplier;
 80819f2:	b2bf      	uxth	r7, r7
        multiplier *= 128;
 80819f4:	ea4f 18c8 	mov.w	r8, r8, lsl #7
    } while ((digit & 128) != 0);
 80819f8:	d501      	bpl.n	80819fe <_ZN4MQTT10readPacketEPh+0x46>
    uint16_t skip = 0;
    uint8_t start = 0;

    do {
        digit = readByte();
        buffer[len++] = digit;
 80819fa:	4626      	mov	r6, r4
 80819fc:	e7ed      	b.n	80819da <_ZN4MQTT10readPacketEPh+0x22>
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 80819fe:	1e63      	subs	r3, r4, #1

    if (isPublish) {
 8081a00:	f1b9 0f30 	cmp.w	r9, #48	; 0x30
        digit = readByte();
        buffer[len++] = digit;
        length += (digit & 127) * multiplier;
        multiplier *= 128;
    } while ((digit & 128) != 0);
    *lengthLength = len-1;
 8081a04:	f88a 3000 	strb.w	r3, [sl]

    if (isPublish) {
 8081a08:	d113      	bne.n	8081a32 <_ZN4MQTT10readPacketEPh+0x7a>
        // Read in topic length to calculate bytes to skip over for Stream writing
        buffer[len++] = readByte();
 8081a0a:	4628      	mov	r0, r5
 8081a0c:	f8d5 801c 	ldr.w	r8, [r5, #28]
 8081a10:	f7ff ffc6 	bl	80819a0 <_ZN4MQTT8readByteEv>
 8081a14:	f808 0004 	strb.w	r0, [r8, r4]
        buffer[len++] = readByte();
 8081a18:	4628      	mov	r0, r5
 8081a1a:	f8d5 801c 	ldr.w	r8, [r5, #28]
 8081a1e:	f7ff ffbf 	bl	80819a0 <_ZN4MQTT8readByteEv>
 8081a22:	1cf4      	adds	r4, r6, #3
 8081a24:	3602      	adds	r6, #2
 8081a26:	b2b6      	uxth	r6, r6
 8081a28:	b2a4      	uxth	r4, r4
 8081a2a:	f808 0006 	strb.w	r0, [r8, r6]
        skip = (buffer[*lengthLength+1]<<8)+buffer[*lengthLength+2];
        start = 2;
 8081a2e:	2302      	movs	r3, #2
 8081a30:	e000      	b.n	8081a34 <_ZN4MQTT10readPacketEPh+0x7c>
    bool isPublish = (buffer[0]&0xF0) == MQTTPUBLISH;
    uint32_t multiplier = 1;
    uint16_t length = 0;
    uint8_t digit = 0;
    uint16_t skip = 0;
    uint8_t start = 0;
 8081a32:	2300      	movs	r3, #0
 8081a34:	1b1b      	subs	r3, r3, r4
 8081a36:	b29e      	uxth	r6, r3
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 8081a38:	19a3      	adds	r3, r4, r6
 8081a3a:	b29b      	uxth	r3, r3
 8081a3c:	429f      	cmp	r7, r3
 8081a3e:	d90b      	bls.n	8081a58 <_ZN4MQTT10readPacketEPh+0xa0>
        digit = readByte();
 8081a40:	4628      	mov	r0, r5
 8081a42:	f7ff ffad 	bl	80819a0 <_ZN4MQTT8readByteEv>
        if (len < this->maxpacketsize) {
 8081a46:	f8b5 3054 	ldrh.w	r3, [r5, #84]	; 0x54
 8081a4a:	42a3      	cmp	r3, r4
            buffer[len] = digit;
 8081a4c:	bf84      	itt	hi
 8081a4e:	69eb      	ldrhi	r3, [r5, #28]
 8081a50:	5518      	strbhi	r0, [r3, r4]
        }
        len++;
 8081a52:	3401      	adds	r4, #1
 8081a54:	b2a4      	uxth	r4, r4
            // skip message id
            skip += 2;
        }
    }

    for (uint16_t i = start;i<length;i++) {
 8081a56:	e7ef      	b.n	8081a38 <_ZN4MQTT10readPacketEPh+0x80>
            buffer[len] = digit;
        }
        len++;
    }

    if (len > this->maxpacketsize) {
 8081a58:	f8b5 0054 	ldrh.w	r0, [r5, #84]	; 0x54
        len = 0; // This will cause the packet to be ignored.
    }

    return len;
}
 8081a5c:	42a0      	cmp	r0, r4
 8081a5e:	bf2c      	ite	cs
 8081a60:	4620      	movcs	r0, r4
 8081a62:	2000      	movcc	r0, #0
 8081a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08081a68 <_ZN4MQTT5writeEhPht>:
        return _client.write(buffer, length);
    }
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
 8081a68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8081a6a:	4607      	mov	r7, r0
 8081a6c:	468e      	mov	lr, r1
 8081a6e:	461e      	mov	r6, r3
    uint8_t lenBuf[4];
    uint8_t llen = 0;
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
 8081a70:	461d      	mov	r5, r3
    return false;
}

bool MQTT::write(uint8_t header, uint8_t* buf, uint16_t length) {
    uint8_t lenBuf[4];
    uint8_t llen = 0;
 8081a72:	2400      	movs	r4, #0
    uint8_t digit;
    uint8_t pos = 0;
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
 8081a74:	f005 037f 	and.w	r3, r5, #127	; 0x7f
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 8081a78:	a902      	add	r1, sp, #8
    uint16_t rc;
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
 8081a7a:	09ed      	lsrs	r5, r5, #7
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 8081a7c:	4421      	add	r1, r4
    uint16_t len = length;
    do {
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
 8081a7e:	bf18      	it	ne
 8081a80:	f043 0380 	orrne.w	r3, r3, #128	; 0x80
        }
        lenBuf[pos++] = digit;
        llen++;
 8081a84:	3401      	adds	r4, #1
        digit = len % 128;
        len = len / 128;
        if (len > 0) {
            digit |= 0x80;
        }
        lenBuf[pos++] = digit;
 8081a86:	f801 3c04 	strb.w	r3, [r1, #-4]
        llen++;
 8081a8a:	b2e4      	uxtb	r4, r4
    } while(len > 0);
 8081a8c:	2d00      	cmp	r5, #0
 8081a8e:	d1f1      	bne.n	8081a74 <_ZN4MQTT5writeEhPht+0xc>

    buf[4-llen] = header;
 8081a90:	f1c4 0304 	rsb	r3, r4, #4
 8081a94:	18d1      	adds	r1, r2, r3
 8081a96:	f802 e003 	strb.w	lr, [r2, r3]
    for (int i = 0; i < llen; i++) {
 8081a9a:	42a5      	cmp	r5, r4
 8081a9c:	da06      	bge.n	8081aac <_ZN4MQTT5writeEhPht+0x44>
        buf[5-llen+i] = lenBuf[i];
 8081a9e:	a801      	add	r0, sp, #4
 8081aa0:	1b2b      	subs	r3, r5, r4
 8081aa2:	5c28      	ldrb	r0, [r5, r0]
 8081aa4:	4413      	add	r3, r2
 8081aa6:	7158      	strb	r0, [r3, #5]
        lenBuf[pos++] = digit;
        llen++;
    } while(len > 0);

    buf[4-llen] = header;
    for (int i = 0; i < llen; i++) {
 8081aa8:	3501      	adds	r5, #1
 8081aaa:	e7f6      	b.n	8081a9a <_ZN4MQTT5writeEhPht+0x32>
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);
 8081aac:	1c72      	adds	r2, r6, #1
 8081aae:	4422      	add	r2, r4
 8081ab0:	4638      	mov	r0, r7
 8081ab2:	f001 fab4 	bl	808301e <_ZN9TCPClient5writeEPKhj>
 8081ab6:	4605      	mov	r5, r0
 8081ab8:	f000 fb20 	bl	80820fc <HAL_Timer_Get_Milli_Seconds>

    lastOutActivity = millis();
    return (rc == 1+llen+length);
 8081abc:	3401      	adds	r4, #1
    for (int i = 0; i < llen; i++) {
        buf[5-llen+i] = lenBuf[i];
    }
    rc = _client.write(buf+(4-llen), length+1+llen);

    lastOutActivity = millis();
 8081abe:	6278      	str	r0, [r7, #36]	; 0x24
    return (rc == 1+llen+length);
 8081ac0:	4434      	add	r4, r6
 8081ac2:	b2a8      	uxth	r0, r5
}
 8081ac4:	1a23      	subs	r3, r4, r0
 8081ac6:	4258      	negs	r0, r3
 8081ac8:	4158      	adcs	r0, r3
 8081aca:	b003      	add	sp, #12
 8081acc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081ace <_ZN4MQTT11writeStringEPKcPht>:
    _client.write(buffer,2);
    _client.stop();
    lastInActivity = lastOutActivity = millis();
}

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
 8081ace:	b5f0      	push	{r4, r5, r6, r7, lr}
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
 8081ad0:	460d      	mov	r5, r1
 8081ad2:	3302      	adds	r3, #2
 8081ad4:	b29b      	uxth	r3, r3
 8081ad6:	1a6c      	subs	r4, r5, r1
    while (*idp && pos < this->maxpacketsize) {
 8081ad8:	f815 6b01 	ldrb.w	r6, [r5], #1
 8081adc:	b2a4      	uxth	r4, r4
 8081ade:	b13e      	cbz	r6, 8081af0 <_ZN4MQTT11writeStringEPKcPht+0x22>
 8081ae0:	f8b0 7054 	ldrh.w	r7, [r0, #84]	; 0x54
 8081ae4:	429f      	cmp	r7, r3
 8081ae6:	d903      	bls.n	8081af0 <_ZN4MQTT11writeStringEPKcPht+0x22>
        buf[pos++] = *idp++;
 8081ae8:	1c5c      	adds	r4, r3, #1
 8081aea:	54d6      	strb	r6, [r2, r3]
 8081aec:	b2a3      	uxth	r3, r4

uint16_t MQTT::writeString(const char* string, uint8_t* buf, uint16_t pos) {
    const char* idp = string;
    uint16_t i = 0;
    pos += 2;
    while (*idp && pos < this->maxpacketsize) {
 8081aee:	e7f2      	b.n	8081ad6 <_ZN4MQTT11writeStringEPKcPht+0x8>
        buf[pos++] = *idp++;
        i++;
    }
    buf[pos-i-2] = (i >> 8);
 8081af0:	1b19      	subs	r1, r3, r4
 8081af2:	440a      	add	r2, r1
 8081af4:	1221      	asrs	r1, r4, #8
 8081af6:	f802 1c02 	strb.w	r1, [r2, #-2]
    buf[pos-i-1] = (i & 0xFF);
 8081afa:	f802 4c01 	strb.w	r4, [r2, #-1]
    return pos;
}
 8081afe:	4618      	mov	r0, r3
 8081b00:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081b02 <_ZN4MQTT11isConnectedEv>:


bool MQTT::isConnected() {
 8081b02:	b538      	push	{r3, r4, r5, lr}
 8081b04:	4605      	mov	r5, r0
    bool rc = (int)_client.connected();
 8081b06:	f001 fc1c 	bl	8083342 <_ZN9TCPClient9connectedEv>
 8081b0a:	2800      	cmp	r0, #0
 8081b0c:	bf14      	ite	ne
 8081b0e:	2401      	movne	r4, #1
 8081b10:	2400      	moveq	r4, #0
    if (!rc) _client.stop();
 8081b12:	d102      	bne.n	8081b1a <_ZN4MQTT11isConnectedEv+0x18>
 8081b14:	4628      	mov	r0, r5
 8081b16:	f001 fb5a 	bl	80831ce <_ZN9TCPClient4stopEv>
    return rc;
}
 8081b1a:	4620      	mov	r0, r4
 8081b1c:	bd38      	pop	{r3, r4, r5, pc}
	...

08081b20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>:

bool MQTT::connect(const char *id, const char *user, const char *pass) {
    return connect(id, user, pass, 0, QOS0, 0, 0, true);
}

bool MQTT::connect(const char *id, const char *user, const char *pass, const char* willTopic, EMQTT_QOS willQos, uint8_t willRetain, const char* willMessage, bool cleanSession, MQTT_VERSION version) {
 8081b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8081b24:	b085      	sub	sp, #20
 8081b26:	4604      	mov	r4, r0
 8081b28:	4689      	mov	r9, r1
 8081b2a:	4617      	mov	r7, r2
 8081b2c:	461e      	mov	r6, r3
 8081b2e:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
    if (!isConnected()) {
 8081b32:	f7ff ffe6 	bl	8081b02 <_ZN4MQTT11isConnectedEv>
 8081b36:	4605      	mov	r5, r0
 8081b38:	2800      	cmp	r0, #0
 8081b3a:	f040 80bd 	bne.w	8081cb8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x198>
        int result = 0;
        if (ip == NULL)
 8081b3e:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8081b40:	b939      	cbnz	r1, 8081b52 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x32>
            result = _client.connect(this->domain.c_str(), this->port);
 8081b42:	4603      	mov	r3, r0
 8081b44:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8081b48:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8081b4a:	4620      	mov	r0, r4
 8081b4c:	f001 fc8a 	bl	8083464 <_ZN9TCPClient7connectEPKctm>
 8081b50:	e009      	b.n	8081b66 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x46>
        else
            result = _client.connect(this->ip, this->port);
 8081b52:	a801      	add	r0, sp, #4
 8081b54:	f001 f8bc 	bl	8082cd0 <_ZN9IPAddressC1EPKh>
 8081b58:	462b      	mov	r3, r5
 8081b5a:	f8b4 204c 	ldrh.w	r2, [r4, #76]	; 0x4c
 8081b5e:	a901      	add	r1, sp, #4
 8081b60:	4620      	mov	r0, r4
 8081b62:	f001 fb4d 	bl	8083200 <_ZN9TCPClient7connectE9IPAddresstm>

        if (result) {
 8081b66:	2800      	cmp	r0, #0
 8081b68:	f000 80a2 	beq.w	8081cb0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
            nextMsgId = 1;
 8081b6c:	2301      	movs	r3, #1
 8081b6e:	8423      	strh	r3, [r4, #32]
            uint16_t length = 5;

            if (version == MQTT_V311) {
 8081b70:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
 8081b74:	2b04      	cmp	r3, #4
 8081b76:	d115      	bne.n	8081ba4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x84>
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 8081b78:	4b52      	ldr	r3, [pc, #328]	; (8081cc4 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a4>)
 8081b7a:	6818      	ldr	r0, [r3, #0]
 8081b7c:	889a      	ldrh	r2, [r3, #4]
 8081b7e:	9001      	str	r0, [sp, #4]
 8081b80:	f8ad 2008 	strh.w	r2, [sp, #8]
 8081b84:	799b      	ldrb	r3, [r3, #6]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 8081b86:	69e2      	ldr	r2, [r4, #28]
 8081b88:	9801      	ldr	r0, [sp, #4]
        if (result) {
            nextMsgId = 1;
            uint16_t length = 5;

            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
 8081b8a:	f88d 300a 	strb.w	r3, [sp, #10]
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
 8081b8e:	f8c2 0005 	str.w	r0, [r2, #5]
 8081b92:	1d53      	adds	r3, r2, #5
 8081b94:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8081b98:	f89d 200a 	ldrb.w	r2, [sp, #10]
 8081b9c:	8099      	strh	r1, [r3, #4]
 8081b9e:	719a      	strb	r2, [r3, #6]
                length+=sizeof(MQTT_HEADER_V311);
 8081ba0:	230c      	movs	r3, #12
 8081ba2:	e012      	b.n	8081bca <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xaa>
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 8081ba4:	4b48      	ldr	r3, [pc, #288]	; (8081cc8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x1a8>)
 8081ba6:	aa01      	add	r2, sp, #4
 8081ba8:	6818      	ldr	r0, [r3, #0]
 8081baa:	6859      	ldr	r1, [r3, #4]
 8081bac:	7a1b      	ldrb	r3, [r3, #8]
 8081bae:	c203      	stmia	r2!, {r0, r1}
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 8081bb0:	f8d4 c01c 	ldr.w	ip, [r4, #28]
            if (version == MQTT_V311) {
                const uint8_t MQTT_HEADER_V311[] = {0x00,0x04,'M','Q','T','T',MQTT_V311};
                memcpy(buffer + length, MQTT_HEADER_V311, sizeof(MQTT_HEADER_V311));
                length+=sizeof(MQTT_HEADER_V311);
            } else {
                const uint8_t MQTT_HEADER_V31[] = {0x00,0x06,'M','Q','I','s','d','p', MQTT_V31};
 8081bb4:	7013      	strb	r3, [r2, #0]
                memcpy(buffer + length, MQTT_HEADER_V31, sizeof(MQTT_HEADER_V31));
 8081bb6:	ab01      	add	r3, sp, #4
 8081bb8:	cb03      	ldmia	r3!, {r0, r1}
 8081bba:	f8cc 0005 	str.w	r0, [ip, #5]
 8081bbe:	f8cc 1009 	str.w	r1, [ip, #9]
 8081bc2:	7813      	ldrb	r3, [r2, #0]
 8081bc4:	f88c 300d 	strb.w	r3, [ip, #13]
                length+=sizeof(MQTT_HEADER_V31);
 8081bc8:	230e      	movs	r3, #14
            }

            uint8_t v = 0;
            if (willTopic) {
 8081bca:	f1b8 0f00 	cmp.w	r8, #0
 8081bce:	d00a      	beq.n	8081be6 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc6>
                v = 0x06|(willQos<<3)|(willRetain<<5);
 8081bd0:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
 8081bd4:	f89d 1034 	ldrb.w	r1, [sp, #52]	; 0x34
 8081bd8:	0152      	lsls	r2, r2, #5
 8081bda:	f042 0206 	orr.w	r2, r2, #6
 8081bde:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 8081be2:	b2d2      	uxtb	r2, r2
 8081be4:	e000      	b.n	8081be8 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xc8>
            } else {
                v = 0x02;
 8081be6:	2202      	movs	r2, #2
            }

            if (!cleanSession) {
 8081be8:	f89d 1040 	ldrb.w	r1, [sp, #64]	; 0x40
 8081bec:	b909      	cbnz	r1, 8081bf2 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xd2>
              v = v&0xfd;
 8081bee:	f002 02fd 	and.w	r2, r2, #253	; 0xfd
            }

            if(user != NULL) {
 8081bf2:	b12f      	cbz	r7, 8081c00 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>
                v = v|0x80;

                if(pass != NULL) {
 8081bf4:	b916      	cbnz	r6, 8081bfc <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xdc>
            if (!cleanSession) {
              v = v&0xfd;
            }

            if(user != NULL) {
                v = v|0x80;
 8081bf6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8081bfa:	e001      	b.n	8081c00 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0xe0>

                if(pass != NULL) {
                    v = v|(0x80>>1);
 8081bfc:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
                }
            }

            buffer[length++] = v;
 8081c00:	69e1      	ldr	r1, [r4, #28]

            buffer[length++] = ((this->keepalive) >> 8);
 8081c02:	1c58      	adds	r0, r3, #1
                if(pass != NULL) {
                    v = v|(0x80>>1);
                }
            }

            buffer[length++] = v;
 8081c04:	54ca      	strb	r2, [r1, r3]

            buffer[length++] = ((this->keepalive) >> 8);
 8081c06:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8081c08:	69e1      	ldr	r1, [r4, #28]
 8081c0a:	1212      	asrs	r2, r2, #8
 8081c0c:	540a      	strb	r2, [r1, r0]
            buffer[length++] = ((this->keepalive) & 0xFF);
 8081c0e:	69e1      	ldr	r1, [r4, #28]
 8081c10:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8081c12:	1c9a      	adds	r2, r3, #2
 8081c14:	5488      	strb	r0, [r1, r2]
            length = writeString(id, buffer, length);
 8081c16:	3303      	adds	r3, #3
 8081c18:	69e2      	ldr	r2, [r4, #28]
 8081c1a:	4649      	mov	r1, r9
 8081c1c:	4620      	mov	r0, r4
 8081c1e:	f7ff ff56 	bl	8081ace <_ZN4MQTT11writeStringEPKcPht>
            if (willTopic) {
 8081c22:	f1b8 0f00 	cmp.w	r8, #0
 8081c26:	d00b      	beq.n	8081c40 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x120>
                length = writeString(willTopic, buffer, length);
 8081c28:	4603      	mov	r3, r0
 8081c2a:	69e2      	ldr	r2, [r4, #28]
 8081c2c:	4641      	mov	r1, r8
 8081c2e:	4620      	mov	r0, r4
 8081c30:	f7ff ff4d 	bl	8081ace <_ZN4MQTT11writeStringEPKcPht>
                length = writeString(willMessage, buffer, length);
 8081c34:	69e2      	ldr	r2, [r4, #28]
 8081c36:	4603      	mov	r3, r0
 8081c38:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8081c3a:	4620      	mov	r0, r4
 8081c3c:	f7ff ff47 	bl	8081ace <_ZN4MQTT11writeStringEPKcPht>
            }

            if(user != NULL) {
 8081c40:	b167      	cbz	r7, 8081c5c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                length = writeString(user,buffer,length);
 8081c42:	4603      	mov	r3, r0
 8081c44:	69e2      	ldr	r2, [r4, #28]
 8081c46:	4639      	mov	r1, r7
 8081c48:	4620      	mov	r0, r4
 8081c4a:	f7ff ff40 	bl	8081ace <_ZN4MQTT11writeStringEPKcPht>
                if(pass != NULL) {
 8081c4e:	b12e      	cbz	r6, 8081c5c <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x13c>
                    length = writeString(pass,buffer,length);
 8081c50:	4603      	mov	r3, r0
 8081c52:	69e2      	ldr	r2, [r4, #28]
 8081c54:	4631      	mov	r1, r6
 8081c56:	4620      	mov	r0, r4
 8081c58:	f7ff ff39 	bl	8081ace <_ZN4MQTT11writeStringEPKcPht>
                }
            }

            write(MQTTCONNECT, buffer, length-5);
 8081c5c:	1f43      	subs	r3, r0, #5
 8081c5e:	b29b      	uxth	r3, r3
 8081c60:	69e2      	ldr	r2, [r4, #28]
 8081c62:	2110      	movs	r1, #16
 8081c64:	4620      	mov	r0, r4
 8081c66:	f7ff feff 	bl	8081a68 <_ZN4MQTT5writeEhPht>
 8081c6a:	f000 fa47 	bl	80820fc <HAL_Timer_Get_Milli_Seconds>
            lastInActivity = lastOutActivity = millis();

            while (!_client.available()) {
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 8081c6e:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
                    length = writeString(pass,buffer,length);
                }
            }

            write(MQTTCONNECT, buffer, length-5);
            lastInActivity = lastOutActivity = millis();
 8081c72:	6260      	str	r0, [r4, #36]	; 0x24
 8081c74:	62a0      	str	r0, [r4, #40]	; 0x28

            while (!_client.available()) {
 8081c76:	4620      	mov	r0, r4
 8081c78:	f001 fa6d 	bl	8083156 <_ZN9TCPClient9availableEv>
 8081c7c:	b940      	cbnz	r0, 8081c90 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x170>
 8081c7e:	f000 fa3d 	bl	80820fc <HAL_Timer_Get_Milli_Seconds>
                unsigned long t = millis();
                if (t-lastInActivity > this->keepalive*1000UL) {
 8081c82:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8081c84:	1ac0      	subs	r0, r0, r3
 8081c86:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8081c88:	4373      	muls	r3, r6
 8081c8a:	4298      	cmp	r0, r3
 8081c8c:	d9f3      	bls.n	8081c76 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x156>
 8081c8e:	e00f      	b.n	8081cb0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                    _client.stop();
                    return false;
                }
            }
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 8081c90:	a901      	add	r1, sp, #4
 8081c92:	4620      	mov	r0, r4
 8081c94:	f7ff fe90 	bl	80819b8 <_ZN4MQTT10readPacketEPh>

            if (len == 4) {
 8081c98:	2804      	cmp	r0, #4
 8081c9a:	d109      	bne.n	8081cb0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
                if (buffer[3] == CONN_ACCEPT) {
 8081c9c:	69e3      	ldr	r3, [r4, #28]
 8081c9e:	78de      	ldrb	r6, [r3, #3]
 8081ca0:	b936      	cbnz	r6, 8081cb0 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x190>
 8081ca2:	f000 fa2b 	bl	80820fc <HAL_Timer_Get_Milli_Seconds>
                    lastInActivity = millis();
                    pingOutstanding = false;
                    debug_print(" Connect success\n");
                    return true;
 8081ca6:	2501      	movs	r5, #1
            uint8_t llen;
            uint16_t len = readPacket(&llen);

            if (len == 4) {
                if (buffer[3] == CONN_ACCEPT) {
                    lastInActivity = millis();
 8081ca8:	62a0      	str	r0, [r4, #40]	; 0x28
                    pingOutstanding = false;
 8081caa:	f884 602c 	strb.w	r6, [r4, #44]	; 0x2c
 8081cae:	e004      	b.n	8081cba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
                    // check EMQTT_CONNACK_RESPONSE code.
                    debug_print(" Connect fail. code = [%d]\n", buffer[3]);
                }
            }
        }
        _client.stop();
 8081cb0:	4620      	mov	r0, r4
 8081cb2:	f001 fa8c 	bl	80831ce <_ZN9TCPClient4stopEv>
 8081cb6:	e000      	b.n	8081cba <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE+0x19a>
    }
    return false;
 8081cb8:	2500      	movs	r5, #0
}
 8081cba:	4628      	mov	r0, r5
 8081cbc:	b005      	add	sp, #20
 8081cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8081cc2:	bf00      	nop
 8081cc4:	08084ae9 	.word	0x08084ae9
 8081cc8:	08084af0 	.word	0x08084af0

08081ccc <_ZN4MQTT7connectEPKc>:
void MQTT::addQosCallback(void (*qoscallback)(unsigned int)) {
    this->qoscallback = qoscallback;
}


bool MQTT::connect(const char *id) {
 8081ccc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    return connect(id, NULL, NULL, 0, QOS0, 0, 0, true);
 8081cce:	2304      	movs	r3, #4
 8081cd0:	9305      	str	r3, [sp, #20]
 8081cd2:	2301      	movs	r3, #1
 8081cd4:	9304      	str	r3, [sp, #16]
 8081cd6:	2300      	movs	r3, #0
 8081cd8:	9303      	str	r3, [sp, #12]
 8081cda:	9302      	str	r3, [sp, #8]
 8081cdc:	9301      	str	r3, [sp, #4]
 8081cde:	9300      	str	r3, [sp, #0]
 8081ce0:	461a      	mov	r2, r3
 8081ce2:	f7ff ff1d 	bl	8081b20 <_ZN4MQTT7connectEPKcS1_S1_S1_NS_9EMQTT_QOSEhS1_bNS_12MQTT_VERSIONE>
}
 8081ce6:	b007      	add	sp, #28
 8081ce8:	f85d fb04 	ldr.w	pc, [sp], #4

08081cec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 8081cec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081cf0:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8081cf2:	4604      	mov	r4, r0
 8081cf4:	468b      	mov	fp, r1
 8081cf6:	4691      	mov	r9, r2
 8081cf8:	469a      	mov	sl, r3
 8081cfa:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8081cfe:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
 8081d02:	f89d 7030 	ldrb.w	r7, [sp, #48]	; 0x30
    if (isConnected()) {
 8081d06:	f7ff fefc 	bl	8081b02 <_ZN4MQTT11isConnectedEv>
 8081d0a:	2800      	cmp	r0, #0
 8081d0c:	d04b      	beq.n	8081da6 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xba>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        memset(buffer, 0, this->maxpacketsize);
 8081d0e:	f8b4 2054 	ldrh.w	r2, [r4, #84]	; 0x54
 8081d12:	2100      	movs	r1, #0
 8081d14:	69e0      	ldr	r0, [r4, #28]
 8081d16:	f002 fdec 	bl	80848f2 <memset>

        length = writeString(topic, buffer, length);
 8081d1a:	2305      	movs	r3, #5
 8081d1c:	69e2      	ldr	r2, [r4, #28]
 8081d1e:	4659      	mov	r1, fp
 8081d20:	4620      	mov	r0, r4
 8081d22:	f7ff fed4 	bl	8081ace <_ZN4MQTT11writeStringEPKcPht>

        if (qos == QOS2 || qos == QOS1) {
 8081d26:	1e6b      	subs	r3, r5, #1
 8081d28:	2b01      	cmp	r3, #1
 8081d2a:	d812      	bhi.n	8081d52 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
            nextMsgId += 1;
 8081d2c:	8c23      	ldrh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 8081d2e:	69e2      	ldr	r2, [r4, #28]
        memset(buffer, 0, this->maxpacketsize);

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
 8081d30:	3301      	adds	r3, #1
 8081d32:	b29b      	uxth	r3, r3
 8081d34:	8423      	strh	r3, [r4, #32]
            buffer[length++] = (nextMsgId >> 8);
 8081d36:	121b      	asrs	r3, r3, #8
 8081d38:	5413      	strb	r3, [r2, r0]
 8081d3a:	1c41      	adds	r1, r0, #1
            buffer[length++] = (nextMsgId & 0xFF);
 8081d3c:	69e3      	ldr	r3, [r4, #28]
 8081d3e:	8c22      	ldrh	r2, [r4, #32]

        length = writeString(topic, buffer, length);

        if (qos == QOS2 || qos == QOS1) {
            nextMsgId += 1;
            buffer[length++] = (nextMsgId >> 8);
 8081d40:	b289      	uxth	r1, r1
            buffer[length++] = (nextMsgId & 0xFF);
 8081d42:	3002      	adds	r0, #2
 8081d44:	b280      	uxth	r0, r0
 8081d46:	545a      	strb	r2, [r3, r1]
            if (messageid != NULL)
 8081d48:	b11e      	cbz	r6, 8081d52 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x66>
                *messageid = nextMsgId++;
 8081d4a:	8c23      	ldrh	r3, [r4, #32]
 8081d4c:	1c5a      	adds	r2, r3, #1
 8081d4e:	8422      	strh	r2, [r4, #32]
 8081d50:	8033      	strh	r3, [r6, #0]

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
    return publish(topic, payload, plength, retain, qos, false, messageid);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, bool dup, uint16_t *messageid) {
 8081d52:	2200      	movs	r2, #0
            buffer[length++] = (nextMsgId & 0xFF);
            if (messageid != NULL)
                *messageid = nextMsgId++;
        }

        for (uint16_t i=0; i < plength && length < this->maxpacketsize; i++) {
 8081d54:	b291      	uxth	r1, r2
 8081d56:	1883      	adds	r3, r0, r2
 8081d58:	458a      	cmp	sl, r1
 8081d5a:	b29b      	uxth	r3, r3
 8081d5c:	d909      	bls.n	8081d72 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
 8081d5e:	f8b4 6054 	ldrh.w	r6, [r4, #84]	; 0x54
 8081d62:	3201      	adds	r2, #1
 8081d64:	429e      	cmp	r6, r3
 8081d66:	d904      	bls.n	8081d72 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x86>
            buffer[length++] = payload[i];
 8081d68:	f819 6001 	ldrb.w	r6, [r9, r1]
 8081d6c:	69e1      	ldr	r1, [r4, #28]
 8081d6e:	54ce      	strb	r6, [r1, r3]
 8081d70:	e7f0      	b.n	8081d54 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x68>
        }

        uint8_t header = MQTTPUBLISH;
        if (retain) {
            header |= 1;
 8081d72:	f1b8 0f00 	cmp.w	r8, #0
 8081d76:	bf0c      	ite	eq
 8081d78:	2130      	moveq	r1, #48	; 0x30
 8081d7a:	2131      	movne	r1, #49	; 0x31
        }

        if (dup) {
 8081d7c:	b10f      	cbz	r7, 8081d82 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0x96>
            header |= DUP_FLAG_ON_MASK;
 8081d7e:	f041 0108 	orr.w	r1, r1, #8
        }

        if (qos == QOS2)
 8081d82:	2d02      	cmp	r5, #2
 8081d84:	d102      	bne.n	8081d8c <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa0>
            header |= MQTTQOS2_HEADER_MASK;
 8081d86:	f041 0104 	orr.w	r1, r1, #4
 8081d8a:	e003      	b.n	8081d94 <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt+0xa8>
        else if (qos == QOS1)
 8081d8c:	2d01      	cmp	r5, #1
            header |= MQTTQOS1_HEADER_MASK;
 8081d8e:	bf08      	it	eq
 8081d90:	f041 0102 	orreq.w	r1, r1, #2
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 8081d94:	4620      	mov	r0, r4
 8081d96:	3b05      	subs	r3, #5
 8081d98:	69e2      	ldr	r2, [r4, #28]
 8081d9a:	b29b      	uxth	r3, r3
    }
    return false;
}
 8081d9c:	b001      	add	sp, #4
 8081d9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        else if (qos == QOS1)
            header |= MQTTQOS1_HEADER_MASK;
        else
            header |= MQTTQOS0_HEADER_MASK;

        return write(header, buffer, length-5);
 8081da2:	f7ff be61 	b.w	8081a68 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 8081da6:	b001      	add	sp, #4
 8081da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08081dac <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>:

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain) {
    return publish(topic, payload, plength, retain, QOS0, NULL);
}

bool MQTT::publish(const char* topic, const uint8_t* payload, unsigned int plength, bool retain, EMQTT_QOS qos, uint16_t *messageid) {
 8081dac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return publish(topic, payload, plength, retain, qos, false, messageid);
 8081dae:	9c08      	ldr	r4, [sp, #32]
 8081db0:	9403      	str	r4, [sp, #12]
 8081db2:	2400      	movs	r4, #0
 8081db4:	9402      	str	r4, [sp, #8]
 8081db6:	f89d 401c 	ldrb.w	r4, [sp, #28]
 8081dba:	9401      	str	r4, [sp, #4]
 8081dbc:	f89d 4018 	ldrb.w	r4, [sp, #24]
 8081dc0:	9400      	str	r4, [sp, #0]
 8081dc2:	f7ff ff93 	bl	8081cec <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEbPt>
}
 8081dc6:	b004      	add	sp, #16
 8081dc8:	bd10      	pop	{r4, pc}

08081dca <_ZN4MQTT7publishEPKcS1_>:
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 8081dca:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8081dcc:	4605      	mov	r5, r0
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 8081dce:	4610      	mov	r0, r2
        return true;
    }
    return false;
}

bool MQTT::publish(const char* topic, const char* payload) {
 8081dd0:	460e      	mov	r6, r1
 8081dd2:	4614      	mov	r4, r2
    return publish(topic, (uint8_t*)payload, strlen(payload), false, QOS0, NULL);
 8081dd4:	f002 fdfb 	bl	80849ce <strlen>
 8081dd8:	2300      	movs	r3, #0
 8081dda:	9302      	str	r3, [sp, #8]
 8081ddc:	9301      	str	r3, [sp, #4]
 8081dde:	9300      	str	r3, [sp, #0]
 8081de0:	4622      	mov	r2, r4
 8081de2:	4603      	mov	r3, r0
 8081de4:	4631      	mov	r1, r6
 8081de6:	4628      	mov	r0, r5
 8081de8:	f7ff ffe0 	bl	8081dac <_ZN4MQTT7publishEPKcPKhjbNS_9EMQTT_QOSEPt>
}
 8081dec:	b004      	add	sp, #16
 8081dee:	bd70      	pop	{r4, r5, r6, pc}

08081df0 <_ZN4MQTT14publishReleaseEt>:
        return write(header, buffer, length-5);
    }
    return false;
}

bool MQTT::publishRelease(uint16_t messageid) {
 8081df0:	b538      	push	{r3, r4, r5, lr}
 8081df2:	4604      	mov	r4, r0
 8081df4:	460d      	mov	r5, r1
    if (isConnected()) {
 8081df6:	f7ff fe84 	bl	8081b02 <_ZN4MQTT11isConnectedEv>
 8081dfa:	b190      	cbz	r0, 8081e22 <_ZN4MQTT14publishReleaseEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
 8081dfc:	69e3      	ldr	r3, [r4, #28]
 8081dfe:	2262      	movs	r2, #98	; 0x62
 8081e00:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 8081e02:	69e3      	ldr	r3, [r4, #28]
 8081e04:	2202      	movs	r2, #2
 8081e06:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 8081e08:	69e3      	ldr	r3, [r4, #28]
 8081e0a:	122a      	asrs	r2, r5, #8
 8081e0c:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 8081e0e:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 8081e10:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBREL | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 8081e12:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 8081e14:	69e1      	ldr	r1, [r4, #28]
 8081e16:	4620      	mov	r0, r4
 8081e18:	f001 f901 	bl	808301e <_ZN9TCPClient5writeEPKhj>
 8081e1c:	3000      	adds	r0, #0
 8081e1e:	bf18      	it	ne
 8081e20:	2001      	movne	r0, #1
    }
    return false;
}
 8081e22:	bd38      	pop	{r3, r4, r5, pc}

08081e24 <_ZN4MQTT15publishCompleteEt>:

bool MQTT::publishComplete(uint16_t messageid) {
 8081e24:	b538      	push	{r3, r4, r5, lr}
 8081e26:	4604      	mov	r4, r0
 8081e28:	460d      	mov	r5, r1
    if (isConnected()) {
 8081e2a:	f7ff fe6a 	bl	8081b02 <_ZN4MQTT11isConnectedEv>
 8081e2e:	b190      	cbz	r0, 8081e56 <_ZN4MQTT15publishCompleteEt+0x32>
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
 8081e30:	69e3      	ldr	r3, [r4, #28]
 8081e32:	2272      	movs	r2, #114	; 0x72
 8081e34:	701a      	strb	r2, [r3, #0]
        buffer[length++] = 2;
 8081e36:	69e3      	ldr	r3, [r4, #28]
 8081e38:	2202      	movs	r2, #2
 8081e3a:	705a      	strb	r2, [r3, #1]
        buffer[length++] = (messageid >> 8);
 8081e3c:	69e3      	ldr	r3, [r4, #28]
 8081e3e:	122a      	asrs	r2, r5, #8
 8081e40:	709a      	strb	r2, [r3, #2]
        buffer[length++] = (messageid & 0xFF);
 8081e42:	69e3      	ldr	r3, [r4, #28]
        return _client.write(buffer, length);
 8081e44:	2204      	movs	r2, #4
        uint16_t length = 0;
        // reserved bits in MQTT v3.1.1
        buffer[length++] = MQTTPUBCOMP | MQTTQOS1_HEADER_MASK;
        buffer[length++] = 2;
        buffer[length++] = (messageid >> 8);
        buffer[length++] = (messageid & 0xFF);
 8081e46:	70dd      	strb	r5, [r3, #3]
        return _client.write(buffer, length);
 8081e48:	69e1      	ldr	r1, [r4, #28]
 8081e4a:	4620      	mov	r0, r4
 8081e4c:	f001 f8e7 	bl	808301e <_ZN9TCPClient5writeEPKhj>
 8081e50:	3000      	adds	r0, #0
 8081e52:	bf18      	it	ne
 8081e54:	2001      	movne	r0, #1
    }
    return false;
}
 8081e56:	bd38      	pop	{r3, r4, r5, pc}

08081e58 <_ZN4MQTT4loopEv>:
    }

    return len;
}

bool MQTT::loop() {
 8081e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8081e5c:	b083      	sub	sp, #12
 8081e5e:	af00      	add	r7, sp, #0
 8081e60:	4604      	mov	r4, r0
    if (isConnected()) {
 8081e62:	f7ff fe4e 	bl	8081b02 <_ZN4MQTT11isConnectedEv>
 8081e66:	4681      	mov	r9, r0
 8081e68:	2800      	cmp	r0, #0
 8081e6a:	f000 80f6 	beq.w	808205a <_ZN4MQTT4loopEv+0x202>
 8081e6e:	f000 f945 	bl	80820fc <HAL_Timer_Get_Milli_Seconds>
        unsigned long t = millis();
        if ((t - lastInActivity > this->keepalive*1000UL) || (t - lastOutActivity > this->keepalive*1000UL)) {
 8081e72:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8081e74:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8081e78:	4353      	muls	r3, r2
 8081e7a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8081e7c:	4605      	mov	r5, r0
 8081e7e:	1a82      	subs	r2, r0, r2
 8081e80:	429a      	cmp	r2, r3
 8081e82:	d803      	bhi.n	8081e8c <_ZN4MQTT4loopEv+0x34>
 8081e84:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8081e86:	1a82      	subs	r2, r0, r2
 8081e88:	4293      	cmp	r3, r2
 8081e8a:	d217      	bcs.n	8081ebc <_ZN4MQTT4loopEv+0x64>
            if (pingOutstanding) {
 8081e8c:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8081e90:	b12b      	cbz	r3, 8081e9e <_ZN4MQTT4loopEv+0x46>
                _client.stop();
 8081e92:	4620      	mov	r0, r4
 8081e94:	f001 f99b 	bl	80831ce <_ZN9TCPClient4stopEv>
                return false;
 8081e98:	f04f 0900 	mov.w	r9, #0
 8081e9c:	e0dd      	b.n	808205a <_ZN4MQTT4loopEv+0x202>
            } else {
                buffer[0] = MQTTPINGREQ;
 8081e9e:	69e2      	ldr	r2, [r4, #28]
 8081ea0:	21c0      	movs	r1, #192	; 0xc0
 8081ea2:	7011      	strb	r1, [r2, #0]
                buffer[1] = 0;
 8081ea4:	69e2      	ldr	r2, [r4, #28]
                _client.write(buffer,2);
 8081ea6:	4620      	mov	r0, r4
            if (pingOutstanding) {
                _client.stop();
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
 8081ea8:	7053      	strb	r3, [r2, #1]
                _client.write(buffer,2);
 8081eaa:	69e1      	ldr	r1, [r4, #28]
 8081eac:	2202      	movs	r2, #2
 8081eae:	f001 f8b6 	bl	808301e <_ZN9TCPClient5writeEPKhj>
                lastOutActivity = t;
                lastInActivity = t;
                pingOutstanding = true;
 8081eb2:	2301      	movs	r3, #1
                return false;
            } else {
                buffer[0] = MQTTPINGREQ;
                buffer[1] = 0;
                _client.write(buffer,2);
                lastOutActivity = t;
 8081eb4:	6265      	str	r5, [r4, #36]	; 0x24
                lastInActivity = t;
 8081eb6:	62a5      	str	r5, [r4, #40]	; 0x28
                pingOutstanding = true;
 8081eb8:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
            }
        }
        if (_client.available()) {
 8081ebc:	4620      	mov	r0, r4
 8081ebe:	f001 f94a 	bl	8083156 <_ZN9TCPClient9availableEv>
 8081ec2:	2800      	cmp	r0, #0
 8081ec4:	f000 80c9 	beq.w	808205a <_ZN4MQTT4loopEv+0x202>
            uint8_t llen;
            uint16_t len = readPacket(&llen);
 8081ec8:	1df9      	adds	r1, r7, #7
 8081eca:	4620      	mov	r0, r4
 8081ecc:	f7ff fd74 	bl	80819b8 <_ZN4MQTT10readPacketEPh>
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
 8081ed0:	4602      	mov	r2, r0
 8081ed2:	2800      	cmp	r0, #0
 8081ed4:	f000 80c1 	beq.w	808205a <_ZN4MQTT4loopEv+0x202>
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
 8081ed8:	69e3      	ldr	r3, [r4, #28]
            uint8_t llen;
            uint16_t len = readPacket(&llen);
            uint16_t msgId = 0;
            uint8_t *payload;
            if (len > 0) {
                lastInActivity = t;
 8081eda:	62a5      	str	r5, [r4, #40]	; 0x28
                uint8_t type = buffer[0]&0xF0;
 8081edc:	7818      	ldrb	r0, [r3, #0]
 8081ede:	f000 01f0 	and.w	r1, r0, #240	; 0xf0
                if (type == MQTTPUBLISH) {
 8081ee2:	2930      	cmp	r1, #48	; 0x30
 8081ee4:	d17d      	bne.n	8081fe2 <_ZN4MQTT4loopEv+0x18a>
                    if (callback) {
 8081ee6:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
 8081eea:	f1bb 0f00 	cmp.w	fp, #0
 8081eee:	f000 80b4 	beq.w	808205a <_ZN4MQTT4loopEv+0x202>
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 8081ef2:	f897 c007 	ldrb.w	ip, [r7, #7]
              							_client.write(buffer, 4);
              							lastOutActivity = t;
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
                        }
 8081ef6:	46ea      	mov	sl, sp
            if (len > 0) {
                lastInActivity = t;
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
 8081ef8:	eb03 000c 	add.w	r0, r3, ip
 8081efc:	7881      	ldrb	r1, [r0, #2]
 8081efe:	f890 e001 	ldrb.w	lr, [r0, #1]
 8081f02:	eb01 2e0e 	add.w	lr, r1, lr, lsl #8
 8081f06:	fa1f fe8e 	uxth.w	lr, lr
                        char topic[tl+1];
 8081f0a:	f10e 0108 	add.w	r1, lr, #8
 8081f0e:	f021 0107 	bic.w	r1, r1, #7
 8081f12:	ebad 0d01 	sub.w	sp, sp, r1
 8081f16:	4668      	mov	r0, sp
 8081f18:	2100      	movs	r1, #0
                        for (uint16_t i=0;i<tl;i++) {
 8081f1a:	b28e      	uxth	r6, r1
 8081f1c:	45b6      	cmp	lr, r6
 8081f1e:	d906      	bls.n	8081f2e <_ZN4MQTT4loopEv+0xd6>
                            topic[i] = buffer[llen+3+i];
 8081f20:	eb0c 0601 	add.w	r6, ip, r1
 8081f24:	441e      	add	r6, r3
 8081f26:	78f6      	ldrb	r6, [r6, #3]
 8081f28:	5446      	strb	r6, [r0, r1]
 8081f2a:	3101      	adds	r1, #1
                uint8_t type = buffer[0]&0xF0;
                if (type == MQTTPUBLISH) {
                    if (callback) {
                        uint16_t tl = (buffer[llen+1]<<8)+buffer[llen+2]; // topic length
                        char topic[tl+1];
                        for (uint16_t i=0;i<tl;i++) {
 8081f2c:	e7f5      	b.n	8081f1a <_ZN4MQTT4loopEv+0xc2>
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
 8081f2e:	2100      	movs	r1, #0
 8081f30:	f800 100e 	strb.w	r1, [r0, lr]
 8081f34:	781e      	ldrb	r6, [r3, #0]
 8081f36:	f10c 0103 	add.w	r1, ip, #3
 8081f3a:	f006 0606 	and.w	r6, r6, #6
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
 8081f3e:	2e02      	cmp	r6, #2
 8081f40:	ebcc 0202 	rsb	r2, ip, r2
 8081f44:	d11e      	bne.n	8081f84 <_ZN4MQTT4loopEv+0x12c>
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 8081f46:	4471      	add	r1, lr
 8081f48:	f813 8001 	ldrb.w	r8, [r3, r1]
 8081f4c:	4419      	add	r1, r3
 8081f4e:	7849      	ldrb	r1, [r1, #1]
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 8081f50:	ebce 0202 	rsb	r2, lr, r2
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 8081f54:	eb01 2808 	add.w	r8, r1, r8, lsl #8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);
 8081f58:	f10c 0105 	add.w	r1, ip, #5
 8081f5c:	4471      	add	r1, lr
 8081f5e:	3a05      	subs	r2, #5
 8081f60:	4419      	add	r1, r3
 8081f62:	47d8      	blx	fp

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
 8081f64:	69e3      	ldr	r3, [r4, #28]
 8081f66:	2240      	movs	r2, #64	; 0x40
 8081f68:	701a      	strb	r2, [r3, #0]
                            buffer[1] = 2;
 8081f6a:	69e3      	ldr	r3, [r4, #28]
                            topic[i] = buffer[llen+3+i];
                        }
                        topic[tl] = 0;
                        // msgId only present for QOS>0
                        if ((buffer[0]&0x06) == MQTTQOS1_HEADER_MASK) { // QoS=1
                            msgId = (buffer[llen+3+tl]<<8)+buffer[llen+3+tl+1];
 8081f6c:	fa1f f888 	uxth.w	r8, r8
                            payload = buffer+llen+3+tl+2;
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
 8081f70:	705e      	strb	r6, [r3, #1]
                            buffer[2] = (msgId >> 8);
 8081f72:	69e3      	ldr	r3, [r4, #28]
 8081f74:	ea4f 2228 	mov.w	r2, r8, asr #8
 8081f78:	709a      	strb	r2, [r3, #2]
                            buffer[3] = (msgId & 0xFF);
 8081f7a:	69e3      	ldr	r3, [r4, #28]
                            _client.write(buffer,4);
 8081f7c:	2204      	movs	r2, #4
                            callback(topic,payload,len-llen-3-tl-2);

                            buffer[0] = MQTTPUBACK; // respond with PUBACK
                            buffer[1] = 2;
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
 8081f7e:	f883 8003 	strb.w	r8, [r3, #3]
 8081f82:	e020      	b.n	8081fc6 <_ZN4MQTT4loopEv+0x16e>
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
 8081f84:	2e04      	cmp	r6, #4
 8081f86:	d124      	bne.n	8081fd2 <_ZN4MQTT4loopEv+0x17a>
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 8081f88:	4471      	add	r1, lr
 8081f8a:	f813 8001 	ldrb.w	r8, [r3, r1]
 8081f8e:	4419      	add	r1, r3
 8081f90:	7849      	ldrb	r1, [r1, #1]
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 8081f92:	ebce 0202 	rsb	r2, lr, r2
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 8081f96:	eb01 2808 	add.w	r8, r1, r8, lsl #8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);
 8081f9a:	f10c 0105 	add.w	r1, ip, #5
 8081f9e:	4471      	add	r1, lr
 8081fa0:	3a05      	subs	r2, #5
 8081fa2:	4419      	add	r1, r3
 8081fa4:	47d8      	blx	fp

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
 8081fa6:	69e3      	ldr	r3, [r4, #28]
 8081fa8:	2250      	movs	r2, #80	; 0x50
 8081faa:	701a      	strb	r2, [r3, #0]
              							buffer[1] = 2;
 8081fac:	69e3      	ldr	r3, [r4, #28]
 8081fae:	2202      	movs	r2, #2
 8081fb0:	705a      	strb	r2, [r3, #1]
              							buffer[2] = (msgId >> 8);
 8081fb2:	69e3      	ldr	r3, [r4, #28]
                            buffer[2] = (msgId >> 8);
                            buffer[3] = (msgId & 0xFF);
                            _client.write(buffer,4);
                            lastOutActivity = t;
        						    } else if ((buffer[0] & 0x06) == MQTTQOS2_HEADER_MASK) { // QoS=2
							              msgId = (buffer[llen + 3 + tl] << 8) + buffer[llen + 3 + tl + 1];
 8081fb4:	fa1f f888 	uxth.w	r8, r8
							              payload = buffer + llen + 3 + tl + 2;
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
 8081fb8:	ea4f 2228 	mov.w	r2, r8, asr #8
 8081fbc:	709a      	strb	r2, [r3, #2]
              							buffer[3] = (msgId & 0xFF);
              							_client.write(buffer, 4);
 8081fbe:	4632      	mov	r2, r6
							              callback(topic, payload, len - llen - 3 - tl - 2);

              							buffer[0] = MQTTPUBREC; // respond with PUBREC
              							buffer[1] = 2;
              							buffer[2] = (msgId >> 8);
              							buffer[3] = (msgId & 0xFF);
 8081fc0:	69e3      	ldr	r3, [r4, #28]
 8081fc2:	f883 8003 	strb.w	r8, [r3, #3]
              							_client.write(buffer, 4);
 8081fc6:	69e1      	ldr	r1, [r4, #28]
 8081fc8:	4620      	mov	r0, r4
 8081fca:	f001 f828 	bl	808301e <_ZN9TCPClient5writeEPKhj>
              							lastOutActivity = t;
 8081fce:	6265      	str	r5, [r4, #36]	; 0x24
 8081fd0:	e005      	b.n	8081fde <_ZN4MQTT4loopEv+0x186>
            						} else {
                            payload = buffer+llen+3+tl;
                            callback(topic,payload,len-llen-3-tl);
 8081fd2:	3a03      	subs	r2, #3
 8081fd4:	4471      	add	r1, lr
 8081fd6:	ebce 0202 	rsb	r2, lr, r2
 8081fda:	4419      	add	r1, r3
 8081fdc:	47d8      	blx	fp
 8081fde:	46d5      	mov	sp, sl
 8081fe0:	e03b      	b.n	808205a <_ZN4MQTT4loopEv+0x202>
                        }
                    }
                } else if (type == MQTTPUBREC) {
 8081fe2:	2950      	cmp	r1, #80	; 0x50
 8081fe4:	d108      	bne.n	8081ff8 <_ZN4MQTT4loopEv+0x1a0>
                    // check for the situation that QoS2 receive PUBREC, should return PUBREL
                    msgId = (buffer[2] << 8) + buffer[3];
                    this->publishRelease(msgId);
 8081fe6:	7899      	ldrb	r1, [r3, #2]
 8081fe8:	78db      	ldrb	r3, [r3, #3]
 8081fea:	4620      	mov	r0, r4
 8081fec:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 8081ff0:	b289      	uxth	r1, r1
 8081ff2:	f7ff fefd 	bl	8081df0 <_ZN4MQTT14publishReleaseEt>
 8081ff6:	e030      	b.n	808205a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBACK) {
 8081ff8:	2940      	cmp	r1, #64	; 0x40
 8081ffa:	d00c      	beq.n	8082016 <_ZN4MQTT4loopEv+0x1be>
                        if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
                            msgId = (buffer[2]<<8)+buffer[3];
                            this->qoscallback(msgId);
                        }
                    }
                } else if (type == MQTTPUBREL) {
 8081ffc:	2960      	cmp	r1, #96	; 0x60
 8081ffe:	d108      	bne.n	8082012 <_ZN4MQTT4loopEv+0x1ba>
                  msgId = (buffer[2] << 8) + buffer[3];
                  this->publishComplete(msgId);
 8082000:	7899      	ldrb	r1, [r3, #2]
 8082002:	78db      	ldrb	r3, [r3, #3]
 8082004:	4620      	mov	r0, r4
 8082006:	eb03 2101 	add.w	r1, r3, r1, lsl #8
 808200a:	b289      	uxth	r1, r1
 808200c:	f7ff ff0a 	bl	8081e24 <_ZN4MQTT15publishCompleteEt>
 8082010:	e023      	b.n	808205a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPUBCOMP) {
 8082012:	2970      	cmp	r1, #112	; 0x70
 8082014:	d10d      	bne.n	8082032 <_ZN4MQTT4loopEv+0x1da>
                  if (qoscallback) {
 8082016:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8082018:	b1f9      	cbz	r1, 808205a <_ZN4MQTT4loopEv+0x202>
                      // msgId only present for QOS==0
                      if (len == 4 && (buffer[0]&0x06) == MQTTQOS0_HEADER_MASK) {
 808201a:	2a04      	cmp	r2, #4
 808201c:	d11d      	bne.n	808205a <_ZN4MQTT4loopEv+0x202>
 808201e:	f010 0f06 	tst.w	r0, #6
 8082022:	d11a      	bne.n	808205a <_ZN4MQTT4loopEv+0x202>
                          msgId = (buffer[2]<<8)+buffer[3];
                          this->qoscallback(msgId);
 8082024:	7898      	ldrb	r0, [r3, #2]
 8082026:	78db      	ldrb	r3, [r3, #3]
 8082028:	eb03 2000 	add.w	r0, r3, r0, lsl #8
 808202c:	b280      	uxth	r0, r0
 808202e:	4788      	blx	r1
 8082030:	e013      	b.n	808205a <_ZN4MQTT4loopEv+0x202>
                      }
                  }
                } else if (type == MQTTSUBACK) {
 8082032:	2990      	cmp	r1, #144	; 0x90
 8082034:	d011      	beq.n	808205a <_ZN4MQTT4loopEv+0x202>
                    // if something...
                } else if (type == MQTTPINGREQ) {
 8082036:	29c0      	cmp	r1, #192	; 0xc0
 8082038:	d10a      	bne.n	8082050 <_ZN4MQTT4loopEv+0x1f8>
                    buffer[0] = MQTTPINGRESP;
 808203a:	22d0      	movs	r2, #208	; 0xd0
 808203c:	701a      	strb	r2, [r3, #0]
                    buffer[1] = 0;
 808203e:	69e3      	ldr	r3, [r4, #28]
 8082040:	2200      	movs	r2, #0
 8082042:	705a      	strb	r2, [r3, #1]
                    _client.write(buffer,2);
 8082044:	69e1      	ldr	r1, [r4, #28]
 8082046:	2202      	movs	r2, #2
 8082048:	4620      	mov	r0, r4
 808204a:	f000 ffe8 	bl	808301e <_ZN9TCPClient5writeEPKhj>
 808204e:	e004      	b.n	808205a <_ZN4MQTT4loopEv+0x202>
                } else if (type == MQTTPINGRESP) {
 8082050:	29d0      	cmp	r1, #208	; 0xd0
                    pingOutstanding = false;
 8082052:	bf04      	itt	eq
 8082054:	2300      	moveq	r3, #0
 8082056:	f884 302c 	strbeq.w	r3, [r4, #44]	; 0x2c
            }
        }
        return true;
    }
    return false;
}
 808205a:	4648      	mov	r0, r9
 808205c:	370c      	adds	r7, #12
 808205e:	46bd      	mov	sp, r7
 8082060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08082064 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>:

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
}

bool MQTT::subscribe(const char* topic, EMQTT_QOS qos) {
 8082064:	b570      	push	{r4, r5, r6, lr}
 8082066:	4604      	mov	r4, r0
 8082068:	460e      	mov	r6, r1
 808206a:	4615      	mov	r5, r2

    if (isConnected()) {
 808206c:	f7ff fd49 	bl	8081b02 <_ZN4MQTT11isConnectedEv>
 8082070:	b1e8      	cbz	r0, 80820ae <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x4a>
        // Leave room in the buffer for header and variable length field
        uint16_t length = 5;
        nextMsgId++;
 8082072:	8c23      	ldrh	r3, [r4, #32]
 8082074:	3301      	adds	r3, #1
 8082076:	b29b      	uxth	r3, r3
        if (nextMsgId == 0) {
 8082078:	b903      	cbnz	r3, 808207c <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE+0x18>
            nextMsgId = 1;
 808207a:	2301      	movs	r3, #1
 808207c:	8423      	strh	r3, [r4, #32]
        }
        buffer[length++] = (nextMsgId >> 8);
 808207e:	8c23      	ldrh	r3, [r4, #32]
 8082080:	69e2      	ldr	r2, [r4, #28]
 8082082:	121b      	asrs	r3, r3, #8
 8082084:	7153      	strb	r3, [r2, #5]
        buffer[length++] = (nextMsgId & 0xFF);
 8082086:	69e3      	ldr	r3, [r4, #28]
 8082088:	8c22      	ldrh	r2, [r4, #32]
        length = writeString(topic, buffer,length);
 808208a:	4631      	mov	r1, r6
        nextMsgId++;
        if (nextMsgId == 0) {
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
 808208c:	719a      	strb	r2, [r3, #6]
        length = writeString(topic, buffer,length);
 808208e:	69e2      	ldr	r2, [r4, #28]
 8082090:	2307      	movs	r3, #7
 8082092:	4620      	mov	r0, r4
 8082094:	f7ff fd1b 	bl	8081ace <_ZN4MQTT11writeStringEPKcPht>
        buffer[length++] = qos;
 8082098:	69e3      	ldr	r3, [r4, #28]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 808209a:	2182      	movs	r1, #130	; 0x82
            nextMsgId = 1;
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
 808209c:	541d      	strb	r5, [r3, r0]
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 808209e:	1f03      	subs	r3, r0, #4
 80820a0:	69e2      	ldr	r2, [r4, #28]
 80820a2:	4620      	mov	r0, r4
    }
    return false;
}
 80820a4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        }
        buffer[length++] = (nextMsgId >> 8);
        buffer[length++] = (nextMsgId & 0xFF);
        length = writeString(topic, buffer,length);
        buffer[length++] = qos;
        return write(MQTTSUBSCRIBE | MQTTQOS1_HEADER_MASK,buffer,length-5);
 80820a8:	b29b      	uxth	r3, r3
 80820aa:	f7ff bcdd 	b.w	8081a68 <_ZN4MQTT5writeEhPht>
    }
    return false;
}
 80820ae:	bd70      	pop	{r4, r5, r6, pc}

080820b0 <_ZN4MQTT9subscribeEPKc>:
    lastOutActivity = millis();
    return (rc == 1+llen+length);
}

bool MQTT::subscribe(const char* topic) {
    return subscribe(topic, QOS0);
 80820b0:	2200      	movs	r2, #0
 80820b2:	f7ff bfd7 	b.w	8082064 <_ZN4MQTT9subscribeEPKcNS_9EMQTT_QOSE>

080820b6 <_GLOBAL__sub_I__ZN4MQTTC2EPctPFvS0_PhjE>:
 80820b6:	f000 b829 	b.w	808210c <HAL_Pin_Map>
	...

080820bc <HAL_NET_SetNetWatchDog>:
DYNALIB_FN(9, hal_cellular, cellular_device_info, cellular_result_t(CellularDevice*, void*))
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
 80820bc:	b508      	push	{r3, lr}
 80820be:	4b02      	ldr	r3, [pc, #8]	; (80820c8 <HAL_NET_SetNetWatchDog+0xc>)
 80820c0:	681b      	ldr	r3, [r3, #0]
 80820c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80820c4:	9301      	str	r3, [sp, #4]
 80820c6:	bd08      	pop	{r3, pc}
 80820c8:	08060020 	.word	0x08060020

080820cc <inet_gethostbyname>:
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80820cc:	b508      	push	{r3, lr}
 80820ce:	4b02      	ldr	r3, [pc, #8]	; (80820d8 <inet_gethostbyname+0xc>)
 80820d0:	681b      	ldr	r3, [r3, #0]
 80820d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80820d4:	9301      	str	r3, [sp, #4]
 80820d6:	bd08      	pop	{r3, pc}
 80820d8:	08060020 	.word	0x08060020

080820dc <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 80820dc:	b508      	push	{r3, lr}
 80820de:	4b02      	ldr	r3, [pc, #8]	; (80820e8 <os_mutex_create+0xc>)
 80820e0:	681b      	ldr	r3, [r3, #0]
 80820e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80820e4:	9301      	str	r3, [sp, #4]
 80820e6:	bd08      	pop	{r3, pc}
 80820e8:	080401d0 	.word	0x080401d0

080820ec <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 80820ec:	b508      	push	{r3, lr}
 80820ee:	4b02      	ldr	r3, [pc, #8]	; (80820f8 <HAL_RNG_GetRandomNumber+0xc>)
 80820f0:	681b      	ldr	r3, [r3, #0]
 80820f2:	685b      	ldr	r3, [r3, #4]
 80820f4:	9301      	str	r3, [sp, #4]
 80820f6:	bd08      	pop	{r3, pc}
 80820f8:	0804019c 	.word	0x0804019c

080820fc <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 80820fc:	b508      	push	{r3, lr}
 80820fe:	4b02      	ldr	r3, [pc, #8]	; (8082108 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8082100:	681b      	ldr	r3, [r3, #0]
 8082102:	695b      	ldr	r3, [r3, #20]
 8082104:	9301      	str	r3, [sp, #4]
 8082106:	bd08      	pop	{r3, pc}
 8082108:	0804019c 	.word	0x0804019c

0808210c <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 808210c:	b508      	push	{r3, lr}
 808210e:	4b02      	ldr	r3, [pc, #8]	; (8082118 <HAL_Pin_Map+0xc>)
 8082110:	681b      	ldr	r3, [r3, #0]
 8082112:	681b      	ldr	r3, [r3, #0]
 8082114:	9301      	str	r3, [sp, #4]
 8082116:	bd08      	pop	{r3, pc}
 8082118:	080401b0 	.word	0x080401b0

0808211c <HAL_Validate_Pin_Function>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
 808211c:	b508      	push	{r3, lr}
 808211e:	4b02      	ldr	r3, [pc, #8]	; (8082128 <HAL_Validate_Pin_Function+0xc>)
 8082120:	681b      	ldr	r3, [r3, #0]
 8082122:	685b      	ldr	r3, [r3, #4]
 8082124:	9301      	str	r3, [sp, #4]
 8082126:	bd08      	pop	{r3, pc}
 8082128:	080401b0 	.word	0x080401b0

0808212c <HAL_Pin_Mode>:
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 808212c:	b508      	push	{r3, lr}
 808212e:	4b02      	ldr	r3, [pc, #8]	; (8082138 <HAL_Pin_Mode+0xc>)
 8082130:	681b      	ldr	r3, [r3, #0]
 8082132:	689b      	ldr	r3, [r3, #8]
 8082134:	9301      	str	r3, [sp, #4]
 8082136:	bd08      	pop	{r3, pc}
 8082138:	080401b0 	.word	0x080401b0

0808213c <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 808213c:	b508      	push	{r3, lr}
 808213e:	4b02      	ldr	r3, [pc, #8]	; (8082148 <HAL_Get_Pin_Mode+0xc>)
 8082140:	681b      	ldr	r3, [r3, #0]
 8082142:	68db      	ldr	r3, [r3, #12]
 8082144:	9301      	str	r3, [sp, #4]
 8082146:	bd08      	pop	{r3, pc}
 8082148:	080401b0 	.word	0x080401b0

0808214c <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 808214c:	b508      	push	{r3, lr}
 808214e:	4b02      	ldr	r3, [pc, #8]	; (8082158 <HAL_GPIO_Write+0xc>)
 8082150:	681b      	ldr	r3, [r3, #0]
 8082152:	691b      	ldr	r3, [r3, #16]
 8082154:	9301      	str	r3, [sp, #4]
 8082156:	bd08      	pop	{r3, pc}
 8082158:	080401b0 	.word	0x080401b0

0808215c <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 808215c:	b508      	push	{r3, lr}
 808215e:	4b02      	ldr	r3, [pc, #8]	; (8082168 <HAL_GPIO_Read+0xc>)
 8082160:	681b      	ldr	r3, [r3, #0]
 8082162:	695b      	ldr	r3, [r3, #20]
 8082164:	9301      	str	r3, [sp, #4]
 8082166:	bd08      	pop	{r3, pc}
 8082168:	080401b0 	.word	0x080401b0

0808216c <HAL_ADC_Read>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))

DYNALIB_FN(10, hal_gpio, HAL_DAC_Write, void(pin_t, uint16_t))
DYNALIB_FN(11, hal_gpio, HAL_ADC_Set_Sample_Time, void(uint8_t))
DYNALIB_FN(12, hal_gpio, HAL_ADC_Read, int32_t(uint16_t))
 808216c:	b508      	push	{r3, lr}
 808216e:	4b02      	ldr	r3, [pc, #8]	; (8082178 <HAL_ADC_Read+0xc>)
 8082170:	681b      	ldr	r3, [r3, #0]
 8082172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082174:	9301      	str	r3, [sp, #4]
 8082176:	bd08      	pop	{r3, pc}
 8082178:	080401b0 	.word	0x080401b0

0808217c <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 808217c:	b508      	push	{r3, lr}
 808217e:	4b02      	ldr	r3, [pc, #8]	; (8082188 <HAL_I2C_Write_Data+0xc>)
 8082180:	681b      	ldr	r3, [r3, #0]
 8082182:	6a1b      	ldr	r3, [r3, #32]
 8082184:	9301      	str	r3, [sp, #4]
 8082186:	bd08      	pop	{r3, pc}
 8082188:	080401ac 	.word	0x080401ac

0808218c <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 808218c:	b508      	push	{r3, lr}
 808218e:	4b02      	ldr	r3, [pc, #8]	; (8082198 <HAL_I2C_Available_Data+0xc>)
 8082190:	681b      	ldr	r3, [r3, #0]
 8082192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8082194:	9301      	str	r3, [sp, #4]
 8082196:	bd08      	pop	{r3, pc}
 8082198:	080401ac 	.word	0x080401ac

0808219c <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 808219c:	b508      	push	{r3, lr}
 808219e:	4b02      	ldr	r3, [pc, #8]	; (80821a8 <HAL_I2C_Read_Data+0xc>)
 80821a0:	681b      	ldr	r3, [r3, #0]
 80821a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80821a4:	9301      	str	r3, [sp, #4]
 80821a6:	bd08      	pop	{r3, pc}
 80821a8:	080401ac 	.word	0x080401ac

080821ac <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 80821ac:	b508      	push	{r3, lr}
 80821ae:	4b02      	ldr	r3, [pc, #8]	; (80821b8 <HAL_I2C_Peek_Data+0xc>)
 80821b0:	681b      	ldr	r3, [r3, #0]
 80821b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80821b4:	9301      	str	r3, [sp, #4]
 80821b6:	bd08      	pop	{r3, pc}
 80821b8:	080401ac 	.word	0x080401ac

080821bc <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 80821bc:	b508      	push	{r3, lr}
 80821be:	4b02      	ldr	r3, [pc, #8]	; (80821c8 <HAL_I2C_Flush_Data+0xc>)
 80821c0:	681b      	ldr	r3, [r3, #0]
 80821c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80821c4:	9301      	str	r3, [sp, #4]
 80821c6:	bd08      	pop	{r3, pc}
 80821c8:	080401ac 	.word	0x080401ac

080821cc <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 80821cc:	b508      	push	{r3, lr}
 80821ce:	4b02      	ldr	r3, [pc, #8]	; (80821d8 <HAL_I2C_Is_Enabled+0xc>)
 80821d0:	681b      	ldr	r3, [r3, #0]
 80821d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80821d4:	9301      	str	r3, [sp, #4]
 80821d6:	bd08      	pop	{r3, pc}
 80821d8:	080401ac 	.word	0x080401ac

080821dc <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 80821dc:	b508      	push	{r3, lr}
 80821de:	4b02      	ldr	r3, [pc, #8]	; (80821e8 <HAL_I2C_Init+0xc>)
 80821e0:	681b      	ldr	r3, [r3, #0]
 80821e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80821e4:	9301      	str	r3, [sp, #4]
 80821e6:	bd08      	pop	{r3, pc}
 80821e8:	080401ac 	.word	0x080401ac

080821ec <socket_active_status>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_socket)

DYNALIB_FN(0, hal_socket, socket_active_status, uint8_t(sock_handle_t))
 80821ec:	b508      	push	{r3, lr}
 80821ee:	4b02      	ldr	r3, [pc, #8]	; (80821f8 <socket_active_status+0xc>)
 80821f0:	681b      	ldr	r3, [r3, #0]
 80821f2:	681b      	ldr	r3, [r3, #0]
 80821f4:	9301      	str	r3, [sp, #4]
 80821f6:	bd08      	pop	{r3, pc}
 80821f8:	08060024 	.word	0x08060024

080821fc <socket_handle_valid>:
DYNALIB_FN(1, hal_socket, socket_handle_valid, uint8_t(sock_handle_t))
 80821fc:	b508      	push	{r3, lr}
 80821fe:	4b02      	ldr	r3, [pc, #8]	; (8082208 <socket_handle_valid+0xc>)
 8082200:	681b      	ldr	r3, [r3, #0]
 8082202:	685b      	ldr	r3, [r3, #4]
 8082204:	9301      	str	r3, [sp, #4]
 8082206:	bd08      	pop	{r3, pc}
 8082208:	08060024 	.word	0x08060024

0808220c <socket_create>:
DYNALIB_FN(2, hal_socket, socket_create, sock_handle_t(uint8_t, uint8_t, uint8_t, uint16_t, network_interface_t))
 808220c:	b508      	push	{r3, lr}
 808220e:	4b02      	ldr	r3, [pc, #8]	; (8082218 <socket_create+0xc>)
 8082210:	681b      	ldr	r3, [r3, #0]
 8082212:	689b      	ldr	r3, [r3, #8]
 8082214:	9301      	str	r3, [sp, #4]
 8082216:	bd08      	pop	{r3, pc}
 8082218:	08060024 	.word	0x08060024

0808221c <socket_connect>:
DYNALIB_FN(3, hal_socket, socket_connect, int32_t(sock_handle_t, const sockaddr_t*, long))
 808221c:	b508      	push	{r3, lr}
 808221e:	4b02      	ldr	r3, [pc, #8]	; (8082228 <socket_connect+0xc>)
 8082220:	681b      	ldr	r3, [r3, #0]
 8082222:	68db      	ldr	r3, [r3, #12]
 8082224:	9301      	str	r3, [sp, #4]
 8082226:	bd08      	pop	{r3, pc}
 8082228:	08060024 	.word	0x08060024

0808222c <socket_receive>:
DYNALIB_FN(4, hal_socket, socket_receive, sock_result_t(sock_handle_t, void*, socklen_t, system_tick_t))
 808222c:	b508      	push	{r3, lr}
 808222e:	4b02      	ldr	r3, [pc, #8]	; (8082238 <socket_receive+0xc>)
 8082230:	681b      	ldr	r3, [r3, #0]
 8082232:	691b      	ldr	r3, [r3, #16]
 8082234:	9301      	str	r3, [sp, #4]
 8082236:	bd08      	pop	{r3, pc}
 8082238:	08060024 	.word	0x08060024

0808223c <socket_close>:
DYNALIB_FN(5, hal_socket, socket_receivefrom, sock_result_t(sock_handle_t, void*, socklen_t, uint32_t, sockaddr_t*, socklen_t*))
DYNALIB_FN(6, hal_socket, socket_send, sock_result_t(sock_handle_t, const void*, socklen_t))
DYNALIB_FN(7, hal_socket, socket_sendto, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, sockaddr_t*, socklen_t))
DYNALIB_FN(8, hal_socket, socket_close, sock_result_t(sock_handle_t))
 808223c:	b508      	push	{r3, lr}
 808223e:	4b02      	ldr	r3, [pc, #8]	; (8082248 <socket_close+0xc>)
 8082240:	681b      	ldr	r3, [r3, #0]
 8082242:	6a1b      	ldr	r3, [r3, #32]
 8082244:	9301      	str	r3, [sp, #4]
 8082246:	bd08      	pop	{r3, pc}
 8082248:	08060024 	.word	0x08060024

0808224c <socket_handle_invalid>:
DYNALIB_FN(9, hal_socket, socket_reset_blocking_call, sock_result_t(void))
DYNALIB_FN(10, hal_socket, socket_create_tcp_server, sock_result_t(uint16_t, network_interface_t))
DYNALIB_FN(11, hal_socket, socket_accept, sock_result_t(sock_handle_t))
DYNALIB_FN(12, hal_socket, socket_handle_invalid, sock_handle_t(void))
 808224c:	b508      	push	{r3, lr}
 808224e:	4b02      	ldr	r3, [pc, #8]	; (8082258 <socket_handle_invalid+0xc>)
 8082250:	681b      	ldr	r3, [r3, #0]
 8082252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8082254:	9301      	str	r3, [sp, #4]
 8082256:	bd08      	pop	{r3, pc}
 8082258:	08060024 	.word	0x08060024

0808225c <socket_send_ex>:
DYNALIB_FN(13, hal_socket, socket_join_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(14, hal_socket, socket_leave_multicast, sock_result_t(const HAL_IPAddress*, network_interface_t, socket_multicast_info_t*))
DYNALIB_FN(15, hal_socket, socket_peer, sock_result_t(sock_handle_t, sock_peer_t*, void*))
DYNALIB_FN(16, hal_socket, socket_shutdown, sock_result_t(sock_handle_t, int))
DYNALIB_FN(17, hal_socket, socket_send_ex, sock_result_t(sock_handle_t, const void*, socklen_t, uint32_t, system_tick_t, void*))
 808225c:	b508      	push	{r3, lr}
 808225e:	4b02      	ldr	r3, [pc, #8]	; (8082268 <socket_send_ex+0xc>)
 8082260:	681b      	ldr	r3, [r3, #0]
 8082262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8082264:	9301      	str	r3, [sp, #4]
 8082266:	bd08      	pop	{r3, pc}
 8082268:	08060024 	.word	0x08060024

0808226c <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 808226c:	b508      	push	{r3, lr}
 808226e:	4b02      	ldr	r3, [pc, #8]	; (8082278 <HAL_SPI_Init+0xc>)
 8082270:	681b      	ldr	r3, [r3, #0]
 8082272:	69db      	ldr	r3, [r3, #28]
 8082274:	9301      	str	r3, [sp, #4]
 8082276:	bd08      	pop	{r3, pc}
 8082278:	080401b4 	.word	0x080401b4

0808227c <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 808227c:	b508      	push	{r3, lr}
 808227e:	4b02      	ldr	r3, [pc, #8]	; (8082288 <HAL_SPI_Is_Enabled+0xc>)
 8082280:	681b      	ldr	r3, [r3, #0]
 8082282:	6a1b      	ldr	r3, [r3, #32]
 8082284:	9301      	str	r3, [sp, #4]
 8082286:	bd08      	pop	{r3, pc}
 8082288:	080401b4 	.word	0x080401b4

0808228c <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 808228c:	b508      	push	{r3, lr}
 808228e:	4b02      	ldr	r3, [pc, #8]	; (8082298 <HAL_USART_Init+0xc>)
 8082290:	681b      	ldr	r3, [r3, #0]
 8082292:	699b      	ldr	r3, [r3, #24]
 8082294:	9301      	str	r3, [sp, #4]
 8082296:	bd08      	pop	{r3, pc}
 8082298:	080401c4 	.word	0x080401c4

0808229c <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 808229c:	b508      	push	{r3, lr}
 808229e:	4b02      	ldr	r3, [pc, #8]	; (80822a8 <HAL_USART_Write_Data+0xc>)
 80822a0:	681b      	ldr	r3, [r3, #0]
 80822a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80822a4:	9301      	str	r3, [sp, #4]
 80822a6:	bd08      	pop	{r3, pc}
 80822a8:	080401c4 	.word	0x080401c4

080822ac <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80822ac:	b508      	push	{r3, lr}
 80822ae:	4b02      	ldr	r3, [pc, #8]	; (80822b8 <HAL_USART_Available_Data+0xc>)
 80822b0:	681b      	ldr	r3, [r3, #0]
 80822b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80822b4:	9301      	str	r3, [sp, #4]
 80822b6:	bd08      	pop	{r3, pc}
 80822b8:	080401c4 	.word	0x080401c4

080822bc <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80822bc:	b508      	push	{r3, lr}
 80822be:	4b02      	ldr	r3, [pc, #8]	; (80822c8 <HAL_USART_Read_Data+0xc>)
 80822c0:	681b      	ldr	r3, [r3, #0]
 80822c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80822c4:	9301      	str	r3, [sp, #4]
 80822c6:	bd08      	pop	{r3, pc}
 80822c8:	080401c4 	.word	0x080401c4

080822cc <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80822cc:	b508      	push	{r3, lr}
 80822ce:	4b02      	ldr	r3, [pc, #8]	; (80822d8 <HAL_USART_Peek_Data+0xc>)
 80822d0:	681b      	ldr	r3, [r3, #0]
 80822d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80822d4:	9301      	str	r3, [sp, #4]
 80822d6:	bd08      	pop	{r3, pc}
 80822d8:	080401c4 	.word	0x080401c4

080822dc <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80822dc:	b508      	push	{r3, lr}
 80822de:	4b02      	ldr	r3, [pc, #8]	; (80822e8 <HAL_USART_Flush_Data+0xc>)
 80822e0:	681b      	ldr	r3, [r3, #0]
 80822e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80822e4:	9301      	str	r3, [sp, #4]
 80822e6:	bd08      	pop	{r3, pc}
 80822e8:	080401c4 	.word	0x080401c4

080822ec <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80822ec:	b508      	push	{r3, lr}
 80822ee:	4b02      	ldr	r3, [pc, #8]	; (80822f8 <HAL_USART_Is_Enabled+0xc>)
 80822f0:	681b      	ldr	r3, [r3, #0]
 80822f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80822f4:	9301      	str	r3, [sp, #4]
 80822f6:	bd08      	pop	{r3, pc}
 80822f8:	080401c4 	.word	0x080401c4

080822fc <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 80822fc:	b508      	push	{r3, lr}
 80822fe:	4b02      	ldr	r3, [pc, #8]	; (8082308 <HAL_USART_Available_Data_For_Write+0xc>)
 8082300:	681b      	ldr	r3, [r3, #0]
 8082302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8082304:	9301      	str	r3, [sp, #4]
 8082306:	bd08      	pop	{r3, pc}
 8082308:	080401c4 	.word	0x080401c4

0808230c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 808230c:	b508      	push	{r3, lr}
 808230e:	4b02      	ldr	r3, [pc, #8]	; (8082318 <HAL_USB_USART_Init+0xc>)
 8082310:	681b      	ldr	r3, [r3, #0]
 8082312:	681b      	ldr	r3, [r3, #0]
 8082314:	9301      	str	r3, [sp, #4]
 8082316:	bd08      	pop	{r3, pc}
 8082318:	0806001c 	.word	0x0806001c

0808231c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 808231c:	b508      	push	{r3, lr}
 808231e:	4b02      	ldr	r3, [pc, #8]	; (8082328 <HAL_USB_USART_Available_Data+0xc>)
 8082320:	681b      	ldr	r3, [r3, #0]
 8082322:	691b      	ldr	r3, [r3, #16]
 8082324:	9301      	str	r3, [sp, #4]
 8082326:	bd08      	pop	{r3, pc}
 8082328:	0806001c 	.word	0x0806001c

0808232c <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 808232c:	b508      	push	{r3, lr}
 808232e:	4b02      	ldr	r3, [pc, #8]	; (8082338 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8082330:	681b      	ldr	r3, [r3, #0]
 8082332:	695b      	ldr	r3, [r3, #20]
 8082334:	9301      	str	r3, [sp, #4]
 8082336:	bd08      	pop	{r3, pc}
 8082338:	0806001c 	.word	0x0806001c

0808233c <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808233c:	b508      	push	{r3, lr}
 808233e:	4b02      	ldr	r3, [pc, #8]	; (8082348 <HAL_USB_USART_Receive_Data+0xc>)
 8082340:	681b      	ldr	r3, [r3, #0]
 8082342:	699b      	ldr	r3, [r3, #24]
 8082344:	9301      	str	r3, [sp, #4]
 8082346:	bd08      	pop	{r3, pc}
 8082348:	0806001c 	.word	0x0806001c

0808234c <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 808234c:	b508      	push	{r3, lr}
 808234e:	4b02      	ldr	r3, [pc, #8]	; (8082358 <HAL_USB_USART_Send_Data+0xc>)
 8082350:	681b      	ldr	r3, [r3, #0]
 8082352:	69db      	ldr	r3, [r3, #28]
 8082354:	9301      	str	r3, [sp, #4]
 8082356:	bd08      	pop	{r3, pc}
 8082358:	0806001c 	.word	0x0806001c

0808235c <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 808235c:	b508      	push	{r3, lr}
 808235e:	4b02      	ldr	r3, [pc, #8]	; (8082368 <HAL_USB_USART_Flush_Data+0xc>)
 8082360:	681b      	ldr	r3, [r3, #0]
 8082362:	6a1b      	ldr	r3, [r3, #32]
 8082364:	9301      	str	r3, [sp, #4]
 8082366:	bd08      	pop	{r3, pc}
 8082368:	0806001c 	.word	0x0806001c

0808236c <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
 808236c:	b508      	push	{r3, lr}
 808236e:	4b02      	ldr	r3, [pc, #8]	; (8082378 <log_message+0xc>)
 8082370:	681b      	ldr	r3, [r3, #0]
 8082372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8082374:	9301      	str	r3, [sp, #4]
 8082376:	bd08      	pop	{r3, pc}
 8082378:	080201a0 	.word	0x080201a0

0808237c <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 808237c:	b508      	push	{r3, lr}
 808237e:	4b02      	ldr	r3, [pc, #8]	; (8082388 <set_system_mode+0xc>)
 8082380:	681b      	ldr	r3, [r3, #0]
 8082382:	685b      	ldr	r3, [r3, #4]
 8082384:	9301      	str	r3, [sp, #4]
 8082386:	bd08      	pop	{r3, pc}
 8082388:	080401a4 	.word	0x080401a4

0808238c <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 808238c:	b508      	push	{r3, lr}
 808238e:	4b02      	ldr	r3, [pc, #8]	; (8082398 <application_thread_current+0xc>)
 8082390:	681b      	ldr	r3, [r3, #0]
 8082392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8082394:	9301      	str	r3, [sp, #4]
 8082396:	bd08      	pop	{r3, pc}
 8082398:	080401a4 	.word	0x080401a4

0808239c <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 808239c:	b508      	push	{r3, lr}
 808239e:	4b02      	ldr	r3, [pc, #8]	; (80823a8 <application_thread_invoke+0xc>)
 80823a0:	681b      	ldr	r3, [r3, #0]
 80823a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80823a4:	9301      	str	r3, [sp, #4]
 80823a6:	bd08      	pop	{r3, pc}
 80823a8:	080401a4 	.word	0x080401a4

080823ac <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80823ac:	b508      	push	{r3, lr}
 80823ae:	4b03      	ldr	r3, [pc, #12]	; (80823bc <system_ctrl_set_app_request_handler+0x10>)
 80823b0:	681b      	ldr	r3, [r3, #0]
 80823b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80823b6:	9301      	str	r3, [sp, #4]
 80823b8:	bd08      	pop	{r3, pc}
 80823ba:	0000      	.short	0x0000
 80823bc:	080401a4 	.word	0x080401a4

080823c0 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 80823c0:	b508      	push	{r3, lr}
 80823c2:	4b03      	ldr	r3, [pc, #12]	; (80823d0 <system_ctrl_set_result+0x10>)
 80823c4:	681b      	ldr	r3, [r3, #0]
 80823c6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80823ca:	9301      	str	r3, [sp, #4]
 80823cc:	bd08      	pop	{r3, pc}
 80823ce:	0000      	.short	0x0000
 80823d0:	080401a4 	.word	0x080401a4

080823d4 <spark_deviceID>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 80823d4:	b508      	push	{r3, lr}
 80823d6:	4b02      	ldr	r3, [pc, #8]	; (80823e0 <spark_deviceID+0xc>)
 80823d8:	681b      	ldr	r3, [r3, #0]
 80823da:	69db      	ldr	r3, [r3, #28]
 80823dc:	9301      	str	r3, [sp, #4]
 80823de:	bd08      	pop	{r3, pc}
 80823e0:	080401cc 	.word	0x080401cc

080823e4 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 80823e4:	b508      	push	{r3, lr}
 80823e6:	4b02      	ldr	r3, [pc, #8]	; (80823f0 <spark_send_event+0xc>)
 80823e8:	681b      	ldr	r3, [r3, #0]
 80823ea:	6a1b      	ldr	r3, [r3, #32]
 80823ec:	9301      	str	r3, [sp, #4]
 80823ee:	bd08      	pop	{r3, pc}
 80823f0:	080401cc 	.word	0x080401cc

080823f4 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 80823f4:	b508      	push	{r3, lr}
 80823f6:	4b02      	ldr	r3, [pc, #8]	; (8082400 <spark_subscribe+0xc>)
 80823f8:	681b      	ldr	r3, [r3, #0]
 80823fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80823fc:	9301      	str	r3, [sp, #4]
 80823fe:	bd08      	pop	{r3, pc}
 8082400:	080401cc 	.word	0x080401cc

08082404 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8082404:	b508      	push	{r3, lr}
 8082406:	4b02      	ldr	r3, [pc, #8]	; (8082410 <spark_set_random_seed_from_cloud_handler+0xc>)
 8082408:	681b      	ldr	r3, [r3, #0]
 808240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 808240c:	9301      	str	r3, [sp, #4]
 808240e:	bd08      	pop	{r3, pc}
 8082410:	080401cc 	.word	0x080401cc

08082414 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8082414:	b508      	push	{r3, lr}
 8082416:	4b02      	ldr	r3, [pc, #8]	; (8082420 <network_connect+0xc>)
 8082418:	681b      	ldr	r3, [r3, #0]
 808241a:	685b      	ldr	r3, [r3, #4]
 808241c:	9301      	str	r3, [sp, #4]
 808241e:	bd08      	pop	{r3, pc}
 8082420:	080401c8 	.word	0x080401c8

08082424 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8082424:	b508      	push	{r3, lr}
 8082426:	4b02      	ldr	r3, [pc, #8]	; (8082430 <network_connecting+0xc>)
 8082428:	681b      	ldr	r3, [r3, #0]
 808242a:	689b      	ldr	r3, [r3, #8]
 808242c:	9301      	str	r3, [sp, #4]
 808242e:	bd08      	pop	{r3, pc}
 8082430:	080401c8 	.word	0x080401c8

08082434 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8082434:	b508      	push	{r3, lr}
 8082436:	4b02      	ldr	r3, [pc, #8]	; (8082440 <network_disconnect+0xc>)
 8082438:	681b      	ldr	r3, [r3, #0]
 808243a:	68db      	ldr	r3, [r3, #12]
 808243c:	9301      	str	r3, [sp, #4]
 808243e:	bd08      	pop	{r3, pc}
 8082440:	080401c8 	.word	0x080401c8

08082444 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8082444:	b508      	push	{r3, lr}
 8082446:	4b02      	ldr	r3, [pc, #8]	; (8082450 <network_ready+0xc>)
 8082448:	681b      	ldr	r3, [r3, #0]
 808244a:	691b      	ldr	r3, [r3, #16]
 808244c:	9301      	str	r3, [sp, #4]
 808244e:	bd08      	pop	{r3, pc}
 8082450:	080401c8 	.word	0x080401c8

08082454 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8082454:	b508      	push	{r3, lr}
 8082456:	4b02      	ldr	r3, [pc, #8]	; (8082460 <network_on+0xc>)
 8082458:	681b      	ldr	r3, [r3, #0]
 808245a:	695b      	ldr	r3, [r3, #20]
 808245c:	9301      	str	r3, [sp, #4]
 808245e:	bd08      	pop	{r3, pc}
 8082460:	080401c8 	.word	0x080401c8

08082464 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8082464:	b508      	push	{r3, lr}
 8082466:	4b02      	ldr	r3, [pc, #8]	; (8082470 <network_off+0xc>)
 8082468:	681b      	ldr	r3, [r3, #0]
 808246a:	699b      	ldr	r3, [r3, #24]
 808246c:	9301      	str	r3, [sp, #4]
 808246e:	bd08      	pop	{r3, pc}
 8082470:	080401c8 	.word	0x080401c8

08082474 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8082474:	b508      	push	{r3, lr}
 8082476:	4b02      	ldr	r3, [pc, #8]	; (8082480 <network_listen+0xc>)
 8082478:	681b      	ldr	r3, [r3, #0]
 808247a:	69db      	ldr	r3, [r3, #28]
 808247c:	9301      	str	r3, [sp, #4]
 808247e:	bd08      	pop	{r3, pc}
 8082480:	080401c8 	.word	0x080401c8

08082484 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8082484:	b508      	push	{r3, lr}
 8082486:	4b02      	ldr	r3, [pc, #8]	; (8082490 <network_listening+0xc>)
 8082488:	681b      	ldr	r3, [r3, #0]
 808248a:	6a1b      	ldr	r3, [r3, #32]
 808248c:	9301      	str	r3, [sp, #4]
 808248e:	bd08      	pop	{r3, pc}
 8082490:	080401c8 	.word	0x080401c8

08082494 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8082494:	b508      	push	{r3, lr}
 8082496:	4b02      	ldr	r3, [pc, #8]	; (80824a0 <network_set_listen_timeout+0xc>)
 8082498:	681b      	ldr	r3, [r3, #0]
 808249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808249c:	9301      	str	r3, [sp, #4]
 808249e:	bd08      	pop	{r3, pc}
 80824a0:	080401c8 	.word	0x080401c8

080824a4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 80824a4:	b508      	push	{r3, lr}
 80824a6:	4b02      	ldr	r3, [pc, #8]	; (80824b0 <network_get_listen_timeout+0xc>)
 80824a8:	681b      	ldr	r3, [r3, #0]
 80824aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80824ac:	9301      	str	r3, [sp, #4]
 80824ae:	bd08      	pop	{r3, pc}
 80824b0:	080401c8 	.word	0x080401c8

080824b4 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 80824b4:	b508      	push	{r3, lr}
 80824b6:	4b02      	ldr	r3, [pc, #8]	; (80824c0 <malloc+0xc>)
 80824b8:	681b      	ldr	r3, [r3, #0]
 80824ba:	681b      	ldr	r3, [r3, #0]
 80824bc:	9301      	str	r3, [sp, #4]
 80824be:	bd08      	pop	{r3, pc}
 80824c0:	080401a0 	.word	0x080401a0

080824c4 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 80824c4:	b508      	push	{r3, lr}
 80824c6:	4b02      	ldr	r3, [pc, #8]	; (80824d0 <free+0xc>)
 80824c8:	681b      	ldr	r3, [r3, #0]
 80824ca:	685b      	ldr	r3, [r3, #4]
 80824cc:	9301      	str	r3, [sp, #4]
 80824ce:	bd08      	pop	{r3, pc}
 80824d0:	080401a0 	.word	0x080401a0

080824d4 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 80824d4:	b508      	push	{r3, lr}
 80824d6:	4b02      	ldr	r3, [pc, #8]	; (80824e0 <realloc+0xc>)
 80824d8:	681b      	ldr	r3, [r3, #0]
 80824da:	689b      	ldr	r3, [r3, #8]
 80824dc:	9301      	str	r3, [sp, #4]
 80824de:	bd08      	pop	{r3, pc}
 80824e0:	080401a0 	.word	0x080401a0

080824e4 <sscanf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
 80824e4:	b508      	push	{r3, lr}
 80824e6:	4b02      	ldr	r3, [pc, #8]	; (80824f0 <sscanf+0xc>)
 80824e8:	681b      	ldr	r3, [r3, #0]
 80824ea:	695b      	ldr	r3, [r3, #20]
 80824ec:	9301      	str	r3, [sp, #4]
 80824ee:	bd08      	pop	{r3, pc}
 80824f0:	080401a0 	.word	0x080401a0

080824f4 <abort>:
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 80824f4:	b508      	push	{r3, lr}
 80824f6:	4b02      	ldr	r3, [pc, #8]	; (8082500 <abort+0xc>)
 80824f8:	681b      	ldr	r3, [r3, #0]
 80824fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80824fc:	9301      	str	r3, [sp, #4]
 80824fe:	bd08      	pop	{r3, pc}
 8082500:	080401a0 	.word	0x080401a0

08082504 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8082504:	b508      	push	{r3, lr}
 8082506:	4b02      	ldr	r3, [pc, #8]	; (8082510 <_malloc_r+0xc>)
 8082508:	681b      	ldr	r3, [r3, #0]
 808250a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808250c:	9301      	str	r3, [sp, #4]
 808250e:	bd08      	pop	{r3, pc}
 8082510:	080401a0 	.word	0x080401a0

08082514 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8082514:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082516:	6883      	ldr	r3, [r0, #8]
 8082518:	4604      	mov	r4, r0
 808251a:	b90b      	cbnz	r3, 8082520 <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 808251c:	f001 fa83 	bl	8083a26 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082520:	68c3      	ldr	r3, [r0, #12]
 8082522:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8082524:	68a3      	ldr	r3, [r4, #8]
 8082526:	b11b      	cbz	r3, 8082530 <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8082528:	2203      	movs	r2, #3
 808252a:	4621      	mov	r1, r4
 808252c:	4620      	mov	r0, r4
 808252e:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8082530:	4620      	mov	r0, r4
}
 8082532:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8082536:	f7fd bdb4 	b.w	80800a2 <_ZdlPv>

0808253a <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808253a:	2200      	movs	r2, #0
 808253c:	4611      	mov	r1, r2
 808253e:	6840      	ldr	r0, [r0, #4]
 8082540:	f7ff bf80 	b.w	8082444 <network_ready>

08082544 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082544:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8082548:	2600      	movs	r6, #0
 808254a:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 808254c:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808254e:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8082550:	4688      	mov	r8, r1
 8082552:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8082554:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082558:	f002 fa39 	bl	80849ce <strlen>
 808255c:	9600      	str	r6, [sp, #0]
 808255e:	b281      	uxth	r1, r0
 8082560:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8082564:	4622      	mov	r2, r4
 8082566:	4638      	mov	r0, r7
 8082568:	f7ff fdb0 	bl	80820cc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 808256c:	b120      	cbz	r0, 8082578 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 808256e:	4631      	mov	r1, r6
 8082570:	4628      	mov	r0, r5
 8082572:	f000 fb83 	bl	8082c7c <_ZN9IPAddressC1Em>
 8082576:	e003      	b.n	8082580 <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8082578:	4621      	mov	r1, r4
 808257a:	4628      	mov	r0, r5
 808257c:	f000 fb76 	bl	8082c6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8082580:	4628      	mov	r0, r5
 8082582:	b004      	add	sp, #16
 8082584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082588 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8082588:	2200      	movs	r2, #0
 808258a:	4611      	mov	r1, r2
 808258c:	6840      	ldr	r0, [r0, #4]
 808258e:	f7ff bf79 	b.w	8082484 <network_listening>

08082592 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8082592:	2200      	movs	r2, #0
 8082594:	4611      	mov	r1, r2
 8082596:	6840      	ldr	r0, [r0, #4]
 8082598:	f7ff bf84 	b.w	80824a4 <network_get_listen_timeout>

0808259c <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 808259c:	2200      	movs	r2, #0
 808259e:	6840      	ldr	r0, [r0, #4]
 80825a0:	f7ff bf78 	b.w	8082494 <network_set_listen_timeout>

080825a4 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 80825a4:	2200      	movs	r2, #0
 80825a6:	f081 0101 	eor.w	r1, r1, #1
 80825aa:	6840      	ldr	r0, [r0, #4]
 80825ac:	f7ff bf62 	b.w	8082474 <network_listen>

080825b0 <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 80825b0:	2300      	movs	r3, #0
 80825b2:	461a      	mov	r2, r3
 80825b4:	4619      	mov	r1, r3
 80825b6:	6840      	ldr	r0, [r0, #4]
 80825b8:	f7ff bf54 	b.w	8082464 <network_off>

080825bc <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80825bc:	2300      	movs	r3, #0
 80825be:	461a      	mov	r2, r3
 80825c0:	4619      	mov	r1, r3
 80825c2:	6840      	ldr	r0, [r0, #4]
 80825c4:	f7ff bf46 	b.w	8082454 <network_on>

080825c8 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 80825c8:	2200      	movs	r2, #0
 80825ca:	4611      	mov	r1, r2
 80825cc:	6840      	ldr	r0, [r0, #4]
 80825ce:	f7ff bf29 	b.w	8082424 <network_connecting>

080825d2 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 80825d2:	2200      	movs	r2, #0
 80825d4:	2102      	movs	r1, #2
 80825d6:	6840      	ldr	r0, [r0, #4]
 80825d8:	f7ff bf2c 	b.w	8082434 <network_disconnect>

080825dc <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 80825dc:	2300      	movs	r3, #0
 80825de:	461a      	mov	r2, r3
 80825e0:	6840      	ldr	r0, [r0, #4]
 80825e2:	f7ff bf17 	b.w	8082414 <network_connect>
	...

080825e8 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 80825e8:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 80825ea:	4c0c      	ldr	r4, [pc, #48]	; (808261c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 80825ec:	2528      	movs	r5, #40	; 0x28
 80825ee:	462a      	mov	r2, r5
 80825f0:	2100      	movs	r1, #0
 80825f2:	4620      	mov	r0, r4
 80825f4:	f002 f97d 	bl	80848f2 <memset>
        cid = -1;
 80825f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80825fc:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 80825fe:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8082600:	4c07      	ldr	r4, [pc, #28]	; (8082620 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8082602:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8082604:	4620      	mov	r0, r4
 8082606:	6063      	str	r3, [r4, #4]
 8082608:	4b06      	ldr	r3, [pc, #24]	; (8082624 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 808260a:	252c      	movs	r5, #44	; 0x2c
 808260c:	f840 3b08 	str.w	r3, [r0], #8
 8082610:	462a      	mov	r2, r5
 8082612:	2100      	movs	r1, #0
 8082614:	f002 f96d 	bl	80848f2 <memset>
        size = sizeof(*this);
 8082618:	8125      	strh	r5, [r4, #8]
 808261a:	bd38      	pop	{r3, r4, r5, pc}
 808261c:	20000d38 	.word	0x20000d38
 8082620:	20000d04 	.word	0x20000d04
 8082624:	08084b04 	.word	0x08084b04

08082628 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8082628:	4770      	bx	lr

0808262a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 808262a:	2000      	movs	r0, #0
 808262c:	4770      	bx	lr

0808262e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 808262e:	b510      	push	{r4, lr}
 8082630:	4604      	mov	r4, r0
 8082632:	f7fd fd36 	bl	80800a2 <_ZdlPv>
 8082636:	4620      	mov	r0, r4
 8082638:	bd10      	pop	{r4, pc}

0808263a <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 808263a:	b508      	push	{r3, lr}
      { delete this; }
 808263c:	b108      	cbz	r0, 8082642 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 808263e:	f7ff fff6 	bl	808262e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8082642:	bd08      	pop	{r3, pc}

08082644 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8082644:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8082646:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8082648:	4604      	mov	r4, r0
    {
      if (_M_manager)
 808264a:	b113      	cbz	r3, 8082652 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 808264c:	2203      	movs	r2, #3
 808264e:	4601      	mov	r1, r0
 8082650:	4798      	blx	r3
    }
 8082652:	4620      	mov	r0, r4
 8082654:	bd10      	pop	{r4, pc}

08082656 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8082656:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8082658:	68c4      	ldr	r4, [r0, #12]
 808265a:	b1d4      	cbz	r4, 8082692 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 808265c:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 808265e:	2b02      	cmp	r3, #2
 8082660:	d102      	bne.n	8082668 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8082662:	68e0      	ldr	r0, [r4, #12]
 8082664:	f7ff ff2e 	bl	80824c4 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8082668:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 808266a:	b12d      	cbz	r5, 8082678 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808266c:	4628      	mov	r0, r5
 808266e:	f7ff ffe9 	bl	8082644 <_ZNSt14_Function_baseD1Ev>
 8082672:	4628      	mov	r0, r5
 8082674:	f7fd fd15 	bl	80800a2 <_ZdlPv>
 8082678:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 808267a:	b12d      	cbz	r5, 8082688 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 808267c:	4628      	mov	r0, r5
 808267e:	f7ff ffe1 	bl	8082644 <_ZNSt14_Function_baseD1Ev>
 8082682:	4628      	mov	r0, r5
 8082684:	f7fd fd0d 	bl	80800a2 <_ZdlPv>
 8082688:	4620      	mov	r0, r4
 808268a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808268e:	f7fd bd08 	b.w	80800a2 <_ZdlPv>
 8082692:	bd38      	pop	{r3, r4, r5, pc}

08082694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8082694:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 8082696:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 8082698:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 808269a:	b17c      	cbz	r4, 80826bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 808269c:	6863      	ldr	r3, [r4, #4]
 808269e:	3b01      	subs	r3, #1
 80826a0:	6063      	str	r3, [r4, #4]
 80826a2:	b95b      	cbnz	r3, 80826bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80826a4:	6823      	ldr	r3, [r4, #0]
 80826a6:	4620      	mov	r0, r4
 80826a8:	689b      	ldr	r3, [r3, #8]
 80826aa:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80826ac:	68a3      	ldr	r3, [r4, #8]
 80826ae:	3b01      	subs	r3, #1
 80826b0:	60a3      	str	r3, [r4, #8]
 80826b2:	b91b      	cbnz	r3, 80826bc <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80826b4:	6823      	ldr	r3, [r4, #0]
 80826b6:	4620      	mov	r0, r4
 80826b8:	68db      	ldr	r3, [r3, #12]
 80826ba:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80826bc:	4628      	mov	r0, r5
 80826be:	bd38      	pop	{r3, r4, r5, pc}

080826c0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 80826c0:	b513      	push	{r0, r1, r4, lr}
 80826c2:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 80826c4:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 80826c8:	2300      	movs	r3, #0
 80826ca:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80826cc:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 80826ce:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80826d0:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80826d2:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80826d4:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 80826d6:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80826d8:	f7ff ffdc 	bl	8082694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80826dc:	4620      	mov	r0, r4
 80826de:	b002      	add	sp, #8
 80826e0:	bd10      	pop	{r4, pc}

080826e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 80826e2:	680b      	ldr	r3, [r1, #0]
 80826e4:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 80826e6:	b113      	cbz	r3, 80826ee <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 80826e8:	685a      	ldr	r2, [r3, #4]
 80826ea:	3201      	adds	r2, #1
 80826ec:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 80826ee:	4770      	bx	lr

080826f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 80826f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80826f2:	460c      	mov	r4, r1
 80826f4:	4606      	mov	r6, r0
 80826f6:	460f      	mov	r7, r1
 80826f8:	f854 3b04 	ldr.w	r3, [r4], #4
 80826fc:	ad02      	add	r5, sp, #8
 80826fe:	f845 3d08 	str.w	r3, [r5, #-8]!
 8082702:	4621      	mov	r1, r4
 8082704:	a801      	add	r0, sp, #4
 8082706:	f7ff ffec 	bl	80826e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 808270a:	4629      	mov	r1, r5
 808270c:	4630      	mov	r0, r6
 808270e:	f7ff ffd7 	bl	80826c0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082712:	a801      	add	r0, sp, #4
 8082714:	f7ff ffbe 	bl	8082694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082718:	4620      	mov	r0, r4
 808271a:	f7ff ffbb 	bl	8082694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 808271e:	4638      	mov	r0, r7
 8082720:	f7fd fcbf 	bl	80800a2 <_ZdlPv>
        return p;
    }
 8082724:	4630      	mov	r0, r6
 8082726:	b003      	add	sp, #12
 8082728:	bdf0      	pop	{r4, r5, r6, r7, pc}

0808272a <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 808272a:	b513      	push	{r0, r1, r4, lr}
 808272c:	460b      	mov	r3, r1
 808272e:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082730:	c803      	ldmia	r0, {r0, r1}
 8082732:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8082736:	e893 0003 	ldmia.w	r3, {r0, r1}
 808273a:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 808273e:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8082742:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8082746:	b002      	add	sp, #8
 8082748:	bd10      	pop	{r4, pc}

0808274a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808274a:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808274c:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808274e:	b90a      	cbnz	r2, 8082754 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8082750:	f001 f969 	bl	8083a26 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082754:	68c3      	ldr	r3, [r0, #12]
    }
 8082756:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808275a:	4718      	bx	r3

0808275c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808275c:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808275e:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082760:	f100 0110 	add.w	r1, r0, #16
 8082764:	f7ff fff1 	bl	808274a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8082768:	bd08      	pop	{r3, pc}

0808276a <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808276a:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 808276c:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 808276e:	b90a      	cbnz	r2, 8082774 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8082770:	f001 f959 	bl	8083a26 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082774:	68c3      	ldr	r3, [r0, #12]
    }
 8082776:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808277a:	4718      	bx	r3

0808277c <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808277c:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808277e:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082780:	f100 0110 	add.w	r1, r0, #16
 8082784:	f7ff fff1 	bl	808276a <_ZNKSt8functionIFvRKbEEclES1_>
 8082788:	bd08      	pop	{r3, pc}

0808278a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808278a:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808278c:	2300      	movs	r3, #0
 808278e:	6083      	str	r3, [r0, #8]
 8082790:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082792:	4604      	mov	r4, r0
 8082794:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8082796:	b12b      	cbz	r3, 80827a4 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082798:	2202      	movs	r2, #2
 808279a:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808279c:	68eb      	ldr	r3, [r5, #12]
 808279e:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80827a0:	68ab      	ldr	r3, [r5, #8]
 80827a2:	60a3      	str	r3, [r4, #8]
	}
    }
 80827a4:	4620      	mov	r0, r4
 80827a6:	bd38      	pop	{r3, r4, r5, pc}

080827a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 80827a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 80827ac:	f64f 739c 	movw	r3, #65436	; 0xff9c
 80827b0:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80827b2:	f04f 0002 	mov.w	r0, #2
 80827b6:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80827b8:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 80827bc:	808b      	strh	r3, [r1, #4]
 80827be:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80827c0:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80827c2:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 80827c6:	600b      	str	r3, [r1, #0]
 80827c8:	e8d4 1f4f 	ldrexb	r1, [r4]
 80827cc:	4299      	cmp	r1, r3
 80827ce:	d103      	bne.n	80827d8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 80827d0:	e8c4 0f45 	strexb	r5, r0, [r4]
 80827d4:	2d00      	cmp	r5, #0
 80827d6:	d1f7      	bne.n	80827c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 80827d8:	d002      	beq.n	80827e0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 80827da:	f88d 1000 	strb.w	r1, [sp]
 80827de:	e06b      	b.n	80828b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 80827e0:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 80827e4:	bf1c      	itt	ne
 80827e6:	60e7      	strne	r7, [r4, #12]
 80827e8:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 80827ea:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 80827ee:	bf18      	it	ne
 80827f0:	461f      	movne	r7, r3
 80827f2:	2301      	movs	r3, #1
 80827f4:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 80827f6:	f3bf 8f5f 	dmb	sy
 80827fa:	f104 0308 	add.w	r3, r4, #8
 80827fe:	2000      	movs	r0, #0
 8082800:	e853 6f00 	ldrex	r6, [r3]
 8082804:	e843 0200 	strex	r2, r0, [r3]
 8082808:	2a00      	cmp	r2, #0
 808280a:	d1f9      	bne.n	8082800 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 808280c:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082810:	2e00      	cmp	r6, #0
 8082812:	d051      	beq.n	80828b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082814:	f7ff fdba 	bl	808238c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8082818:	b120      	cbz	r0, 8082824 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808281a:	4629      	mov	r1, r5
 808281c:	4630      	mov	r0, r6
 808281e:	f7ff ff94 	bl	808274a <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8082822:	e043      	b.n	80828ac <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082824:	4631      	mov	r1, r6
 8082826:	4668      	mov	r0, sp
 8082828:	f7ff ffaf 	bl	808278a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 808282c:	68e0      	ldr	r0, [r4, #12]
 808282e:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8082832:	b108      	cbz	r0, 8082838 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 8082834:	f002 f8b0 	bl	8084998 <strdup>
 8082838:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 808283a:	2010      	movs	r0, #16
 808283c:	f8ad 5014 	strh.w	r5, [sp, #20]
 8082840:	f7fd fc2b 	bl	808009a <_Znwj>
 8082844:	4605      	mov	r5, r0
 8082846:	b330      	cbz	r0, 8082896 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082848:	f04f 0800 	mov.w	r8, #0
 808284c:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082850:	2018      	movs	r0, #24
 8082852:	f7fd fc22 	bl	808009a <_Znwj>
 8082856:	4604      	mov	r4, r0
 8082858:	b1c0      	cbz	r0, 808288c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808285a:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808285e:	4601      	mov	r1, r0
 8082860:	4668      	mov	r0, sp
 8082862:	f7ff ff62 	bl	808272a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082866:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8082868:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808286a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808286c:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808286e:	9202      	str	r2, [sp, #8]
 8082870:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082872:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082874:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8082878:	9203      	str	r2, [sp, #12]
 808287a:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 808287c:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8082880:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082884:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 8082886:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808288a:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808288c:	4b0d      	ldr	r3, [pc, #52]	; (80828c4 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808288e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082890:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082892:	4b0d      	ldr	r3, [pc, #52]	; (80828c8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 8082894:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8082896:	9804      	ldr	r0, [sp, #16]
 8082898:	f7ff fe14 	bl	80824c4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808289c:	4668      	mov	r0, sp
 808289e:	f7ff fed1 	bl	8082644 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 80828a2:	2200      	movs	r2, #0
 80828a4:	4629      	mov	r1, r5
 80828a6:	4809      	ldr	r0, [pc, #36]	; (80828cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 80828a8:	f7ff fd78 	bl	808239c <application_thread_invoke>
 80828ac:	4630      	mov	r0, r6
 80828ae:	f7ff fec9 	bl	8082644 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80828b2:	4630      	mov	r0, r6
 80828b4:	f7fd fbf5 	bl	80800a2 <_ZdlPv>
 80828b8:	4638      	mov	r0, r7
 80828ba:	f7ff fe03 	bl	80824c4 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 80828be:	b006      	add	sp, #24
 80828c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80828c4:	0808275d 	.word	0x0808275d
 80828c8:	080829b9 	.word	0x080829b9
 80828cc:	08082515 	.word	0x08082515

080828d0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80828d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80828d4:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80828d6:	ad07      	add	r5, sp, #28
 80828d8:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80828dc:	4606      	mov	r6, r0
 80828de:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 80828e0:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80828e2:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 80828e4:	460f      	mov	r7, r1
 80828e6:	4690      	mov	r8, r2
 80828e8:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 80828ec:	f8c5 b004 	str.w	fp, [r5, #4]
 80828f0:	f8c5 b008 	str.w	fp, [r5, #8]
 80828f4:	9307      	str	r3, [sp, #28]
 80828f6:	f7fd fbd0 	bl	808009a <_Znwj>
 80828fa:	4604      	mov	r4, r0
 80828fc:	b138      	cbz	r0, 808290e <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 80828fe:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082902:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 8082906:	f8c0 b004 	str.w	fp, [r0, #4]
 808290a:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 808290e:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082910:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 8082912:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 8082914:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 8082916:	f7fd fbc0 	bl	808009a <_Znwj>
 808291a:	b128      	cbz	r0, 8082928 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 808291c:	2301      	movs	r3, #1
 808291e:	6043      	str	r3, [r0, #4]
 8082920:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 8082922:	4b23      	ldr	r3, [pc, #140]	; (80829b0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 8082924:	60c4      	str	r4, [r0, #12]
 8082926:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 8082928:	4b22      	ldr	r3, [pc, #136]	; (80829b4 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 808292a:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 808292c:	2008      	movs	r0, #8
 808292e:	9308      	str	r3, [sp, #32]
 8082930:	f7fd fbb3 	bl	808009a <_Znwj>
 8082934:	4604      	mov	r4, r0
 8082936:	b128      	cbz	r0, 8082944 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082938:	9b03      	ldr	r3, [sp, #12]
 808293a:	a904      	add	r1, sp, #16
 808293c:	f840 3b04 	str.w	r3, [r0], #4
 8082940:	f7ff fecf 	bl	80826e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082944:	9500      	str	r5, [sp, #0]
 8082946:	fa5f f38a 	uxtb.w	r3, sl
 808294a:	464a      	mov	r2, r9
 808294c:	4641      	mov	r1, r8
 808294e:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 8082950:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 8082952:	f7ff fd47 	bl	80823e4 <spark_send_event>
 8082956:	b9b8      	cbnz	r0, 8082988 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 8082958:	9b03      	ldr	r3, [sp, #12]
 808295a:	785b      	ldrb	r3, [r3, #1]
 808295c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8082960:	b993      	cbnz	r3, 8082988 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 8082962:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 8082966:	a905      	add	r1, sp, #20
 8082968:	a803      	add	r0, sp, #12
 808296a:	9205      	str	r2, [sp, #20]
 808296c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082970:	f7ff ff1a 	bl	80827a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8082974:	9805      	ldr	r0, [sp, #20]
 8082976:	f7ff fda5 	bl	80824c4 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808297a:	a805      	add	r0, sp, #20
 808297c:	9909      	ldr	r1, [sp, #36]	; 0x24
 808297e:	f7ff feb7 	bl	80826f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082982:	a806      	add	r0, sp, #24
 8082984:	f7ff fe86 	bl	8082694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082988:	9b03      	ldr	r3, [sp, #12]
 808298a:	a904      	add	r1, sp, #16
 808298c:	a806      	add	r0, sp, #24
 808298e:	9305      	str	r3, [sp, #20]
 8082990:	f7ff fea7 	bl	80826e2 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8082994:	a905      	add	r1, sp, #20
 8082996:	4630      	mov	r0, r6
 8082998:	f7ff fe92 	bl	80826c0 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808299c:	a806      	add	r0, sp, #24
 808299e:	f7ff fe79 	bl	8082694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80829a2:	a804      	add	r0, sp, #16
 80829a4:	f7ff fe76 	bl	8082694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 80829a8:	4630      	mov	r0, r6
 80829aa:	b00b      	add	sp, #44	; 0x2c
 80829ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80829b0:	08084b38 	.word	0x08084b38
 80829b4:	08082b21 	.word	0x08082b21

080829b8 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80829b8:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80829ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80829bc:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80829be:	d006      	beq.n	80829ce <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 80829c0:	2a03      	cmp	r2, #3
 80829c2:	d017      	beq.n	80829f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 80829c4:	2a01      	cmp	r2, #1
 80829c6:	d120      	bne.n	8082a0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80829c8:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80829ca:	6003      	str	r3, [r0, #0]
	      break;
 80829cc:	e01d      	b.n	8082a0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80829ce:	2018      	movs	r0, #24
 80829d0:	680e      	ldr	r6, [r1, #0]
 80829d2:	f7fd fb62 	bl	808009a <_Znwj>
 80829d6:	4605      	mov	r5, r0
 80829d8:	b150      	cbz	r0, 80829f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80829da:	4631      	mov	r1, r6
 80829dc:	f7ff fed5 	bl	808278a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80829e0:	6930      	ldr	r0, [r6, #16]
 80829e2:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80829e6:	b108      	cbz	r0, 80829ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 80829e8:	f001 ffd6 	bl	8084998 <strdup>
 80829ec:	6128      	str	r0, [r5, #16]
 80829ee:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80829f0:	6025      	str	r5, [r4, #0]
 80829f2:	e00a      	b.n	8082a0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80829f4:	6804      	ldr	r4, [r0, #0]
 80829f6:	b144      	cbz	r4, 8082a0a <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80829f8:	6920      	ldr	r0, [r4, #16]
 80829fa:	f7ff fd63 	bl	80824c4 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80829fe:	4620      	mov	r0, r4
 8082a00:	f7ff fe20 	bl	8082644 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082a04:	4620      	mov	r0, r4
 8082a06:	f7fd fb4c 	bl	80800a2 <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082a0a:	2000      	movs	r0, #0
 8082a0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082a0e <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082a0e:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082a10:	2300      	movs	r3, #0
 8082a12:	6083      	str	r3, [r0, #8]
 8082a14:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082a16:	4604      	mov	r4, r0
 8082a18:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8082a1a:	b12b      	cbz	r3, 8082a28 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 8082a1c:	2202      	movs	r2, #2
 8082a1e:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082a20:	68eb      	ldr	r3, [r5, #12]
 8082a22:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082a24:	68ab      	ldr	r3, [r5, #8]
 8082a26:	60a3      	str	r3, [r4, #8]
	}
    }
 8082a28:	4620      	mov	r0, r4
 8082a2a:	bd38      	pop	{r3, r4, r5, pc}

08082a2c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082a2c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082a2e:	b570      	push	{r4, r5, r6, lr}
 8082a30:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082a32:	d006      	beq.n	8082a42 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 8082a34:	2a03      	cmp	r2, #3
 8082a36:	d011      	beq.n	8082a5c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 8082a38:	2a01      	cmp	r2, #1
 8082a3a:	d117      	bne.n	8082a6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082a3c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082a3e:	6003      	str	r3, [r0, #0]
	      break;
 8082a40:	e014      	b.n	8082a6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082a42:	2014      	movs	r0, #20
 8082a44:	680e      	ldr	r6, [r1, #0]
 8082a46:	f7fd fb28 	bl	808009a <_Znwj>
 8082a4a:	4605      	mov	r5, r0
 8082a4c:	b120      	cbz	r0, 8082a58 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082a4e:	4631      	mov	r1, r6
 8082a50:	f7ff ffdd 	bl	8082a0e <_ZNSt8functionIFvRKbEEC1ERKS3_>
 8082a54:	7c33      	ldrb	r3, [r6, #16]
 8082a56:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082a58:	6025      	str	r5, [r4, #0]
 8082a5a:	e007      	b.n	8082a6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082a5c:	6804      	ldr	r4, [r0, #0]
 8082a5e:	b12c      	cbz	r4, 8082a6c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082a60:	4620      	mov	r0, r4
 8082a62:	f7ff fdef 	bl	8082644 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082a66:	4620      	mov	r0, r4
 8082a68:	f7fd fb1b 	bl	80800a2 <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082a6c:	2000      	movs	r0, #0
 8082a6e:	bd70      	pop	{r4, r5, r6, pc}

08082a70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8082a70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082a72:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8082a74:	f3bf 8f5f 	dmb	sy
 8082a78:	b087      	sub	sp, #28
 8082a7a:	2300      	movs	r3, #0
 8082a7c:	e850 6f00 	ldrex	r6, [r0]
 8082a80:	e840 3200 	strex	r2, r3, [r0]
 8082a84:	2a00      	cmp	r2, #0
 8082a86:	d1f9      	bne.n	8082a7c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8082a88:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082a8c:	2e00      	cmp	r6, #0
 8082a8e:	d03e      	beq.n	8082b0e <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082a90:	4618      	mov	r0, r3
 8082a92:	f7ff fc7b 	bl	808238c <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 8082a96:	4607      	mov	r7, r0
 8082a98:	b120      	cbz	r0, 8082aa4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082a9a:	4621      	mov	r1, r4
 8082a9c:	4630      	mov	r0, r6
 8082a9e:	f7ff fe64 	bl	808276a <_ZNKSt8functionIFvRKbEEclES1_>
 8082aa2:	e02e      	b.n	8082b02 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082aa4:	4631      	mov	r1, r6
 8082aa6:	a801      	add	r0, sp, #4
 8082aa8:	f7ff ffb1 	bl	8082a0e <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082aac:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082aae:	2010      	movs	r0, #16
 8082ab0:	f88d 3014 	strb.w	r3, [sp, #20]
 8082ab4:	f7fd faf1 	bl	808009a <_Znwj>
 8082ab8:	4605      	mov	r5, r0
 8082aba:	b1d0      	cbz	r0, 8082af2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082abc:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082abe:	2014      	movs	r0, #20
 8082ac0:	f7fd faeb 	bl	808009a <_Znwj>
 8082ac4:	4604      	mov	r4, r0
 8082ac6:	b178      	cbz	r0, 8082ae8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082ac8:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082aca:	4601      	mov	r1, r0
 8082acc:	a801      	add	r0, sp, #4
 8082ace:	f7ff fe2c 	bl	808272a <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082ad2:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8082ad4:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082ad6:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082ad8:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082ada:	9203      	str	r2, [sp, #12]
 8082adc:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082ade:	60e3      	str	r3, [r4, #12]
 8082ae0:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082ae4:	9204      	str	r2, [sp, #16]
 8082ae6:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082ae8:	4b0a      	ldr	r3, [pc, #40]	; (8082b14 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082aea:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082aec:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082aee:	4b0a      	ldr	r3, [pc, #40]	; (8082b18 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8082af0:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082af2:	a801      	add	r0, sp, #4
 8082af4:	f7ff fda6 	bl	8082644 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082af8:	2200      	movs	r2, #0
 8082afa:	4629      	mov	r1, r5
 8082afc:	4807      	ldr	r0, [pc, #28]	; (8082b1c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8082afe:	f7ff fc4d 	bl	808239c <application_thread_invoke>
 8082b02:	4630      	mov	r0, r6
 8082b04:	f7ff fd9e 	bl	8082644 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8082b08:	4630      	mov	r0, r6
 8082b0a:	f7fd faca 	bl	80800a2 <_ZdlPv>
        }
    }
 8082b0e:	b007      	add	sp, #28
 8082b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082b12:	bf00      	nop
 8082b14:	0808277d 	.word	0x0808277d
 8082b18:	08082a2d 	.word	0x08082a2d
 8082b1c:	08082515 	.word	0x08082515

08082b20 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 8082b20:	b530      	push	{r4, r5, lr}
 8082b22:	4604      	mov	r4, r0
 8082b24:	b085      	sub	sp, #20
 8082b26:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 8082b28:	4668      	mov	r0, sp
 8082b2a:	4611      	mov	r1, r2
 8082b2c:	f7ff fde0 	bl	80826f0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 8082b30:	b17c      	cbz	r4, 8082b52 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 8082b32:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 8082b34:	4628      	mov	r0, r5
 8082b36:	b10d      	cbz	r5, 8082b3c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 8082b38:	f001 ff2e 	bl	8084998 <strdup>
 8082b3c:	9002      	str	r0, [sp, #8]
 8082b3e:	a902      	add	r1, sp, #8
 8082b40:	4668      	mov	r0, sp
 8082b42:	f8ad 400c 	strh.w	r4, [sp, #12]
 8082b46:	f7ff fe2f 	bl	80827a8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8082b4a:	9802      	ldr	r0, [sp, #8]
 8082b4c:	f7ff fcba 	bl	80824c4 <free>
 8082b50:	e01d      	b.n	8082b8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8082b52:	f04f 0201 	mov.w	r2, #1
 8082b56:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8082b58:	f88d 4008 	strb.w	r4, [sp, #8]
 8082b5c:	e8d0 3f4f 	ldrexb	r3, [r0]
 8082b60:	42a3      	cmp	r3, r4
 8082b62:	d103      	bne.n	8082b6c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 8082b64:	e8c0 2f41 	strexb	r1, r2, [r0]
 8082b68:	2900      	cmp	r1, #0
 8082b6a:	d1f7      	bne.n	8082b5c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8082b6c:	d002      	beq.n	8082b74 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8082b6e:	f88d 3008 	strb.w	r3, [sp, #8]
 8082b72:	e00c      	b.n	8082b8e <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8082b74:	f110 010c 	adds.w	r1, r0, #12
 8082b78:	f04f 0301 	mov.w	r3, #1
 8082b7c:	bf18      	it	ne
 8082b7e:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082b80:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8082b84:	3004      	adds	r0, #4
 8082b86:	f800 3c03 	strb.w	r3, [r0, #-3]
 8082b8a:	f7ff ff71 	bl	8082a70 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8082b8e:	a801      	add	r0, sp, #4
 8082b90:	f7ff fd80 	bl	8082694 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8082b94:	b005      	add	sp, #20
 8082b96:	bd30      	pop	{r4, r5, pc}

08082b98 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8082b98:	4770      	bx	lr

08082b9a <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8082b9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082b9c:	4606      	mov	r6, r0
 8082b9e:	4615      	mov	r5, r2
 8082ba0:	460c      	mov	r4, r1
 8082ba2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082ba4:	42bc      	cmp	r4, r7
 8082ba6:	d006      	beq.n	8082bb6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8082ba8:	6833      	ldr	r3, [r6, #0]
 8082baa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8082bae:	689b      	ldr	r3, [r3, #8]
 8082bb0:	4630      	mov	r0, r6
 8082bb2:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082bb4:	e7f6      	b.n	8082ba4 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 8082bb6:	4628      	mov	r0, r5
 8082bb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082bba <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8082bba:	2200      	movs	r2, #0
 8082bbc:	7c00      	ldrb	r0, [r0, #16]
 8082bbe:	f7ff badd 	b.w	808217c <HAL_I2C_Write_Data>

08082bc2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8082bc2:	2100      	movs	r1, #0
 8082bc4:	7c00      	ldrb	r0, [r0, #16]
 8082bc6:	f7ff bae1 	b.w	808218c <HAL_I2C_Available_Data>

08082bca <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8082bca:	2100      	movs	r1, #0
 8082bcc:	7c00      	ldrb	r0, [r0, #16]
 8082bce:	f7ff bae5 	b.w	808219c <HAL_I2C_Read_Data>

08082bd2 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8082bd2:	2100      	movs	r1, #0
 8082bd4:	7c00      	ldrb	r0, [r0, #16]
 8082bd6:	f7ff bae9 	b.w	80821ac <HAL_I2C_Peek_Data>

08082bda <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8082bda:	2100      	movs	r1, #0
 8082bdc:	7c00      	ldrb	r0, [r0, #16]
 8082bde:	f7ff baed 	b.w	80821bc <HAL_I2C_Flush_Data>

08082be2 <_ZN7TwoWireD0Ev>:
 8082be2:	b510      	push	{r4, lr}
 8082be4:	4604      	mov	r4, r0
 8082be6:	f7fd fa5c 	bl	80800a2 <_ZdlPv>
 8082bea:	4620      	mov	r0, r4
 8082bec:	bd10      	pop	{r4, pc}
	...

08082bf0 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8082bf0:	b510      	push	{r4, lr}
 8082bf2:	4604      	mov	r4, r0
 8082bf4:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 8082bf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082bfa:	60a3      	str	r3, [r4, #8]
 8082bfc:	4b04      	ldr	r3, [pc, #16]	; (8082c10 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082bfe:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8082c00:	7420      	strb	r0, [r4, #16]
 8082c02:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8082c04:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 8082c06:	f7ff fae9 	bl	80821dc <HAL_I2C_Init>

}
 8082c0a:	4620      	mov	r0, r4
 8082c0c:	bd10      	pop	{r4, pc}
 8082c0e:	bf00      	nop
 8082c10:	08084b54 	.word	0x08084b54

08082c14 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 8082c14:	2100      	movs	r1, #0
 8082c16:	7c00      	ldrb	r0, [r0, #16]
 8082c18:	f7ff bad8 	b.w	80821cc <HAL_I2C_Is_Enabled>

08082c1c <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082c1c:	4770      	bx	lr

08082c1e <_ZN9IPAddressD0Ev>:
 8082c1e:	b510      	push	{r4, lr}
 8082c20:	4604      	mov	r4, r0
 8082c22:	f7fd fa3e 	bl	80800a2 <_ZdlPv>
 8082c26:	4620      	mov	r0, r4
 8082c28:	bd10      	pop	{r4, pc}

08082c2a <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082c2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082c2c:	460f      	mov	r7, r1
 8082c2e:	f100 0608 	add.w	r6, r0, #8
 8082c32:	1d05      	adds	r5, r0, #4
 8082c34:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082c36:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8082c3a:	220a      	movs	r2, #10
 8082c3c:	4638      	mov	r0, r7
 8082c3e:	f000 f91c 	bl	8082e7a <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082c42:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082c44:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082c46:	d007      	beq.n	8082c58 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8082c48:	2c00      	cmp	r4, #0
 8082c4a:	d0f4      	beq.n	8082c36 <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082c4c:	212e      	movs	r1, #46	; 0x2e
 8082c4e:	4638      	mov	r0, r7
 8082c50:	f000 f8e6 	bl	8082e20 <_ZN5Print5printEc>
 8082c54:	4404      	add	r4, r0
 8082c56:	e7ee      	b.n	8082c36 <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8082c58:	4620      	mov	r0, r4
 8082c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082c5c <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8082c5c:	4a02      	ldr	r2, [pc, #8]	; (8082c68 <_ZN9IPAddressC1Ev+0xc>)
 8082c5e:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082c60:	2200      	movs	r2, #0
 8082c62:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8082c64:	4770      	bx	lr
 8082c66:	bf00      	nop
 8082c68:	08084b7c 	.word	0x08084b7c

08082c6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 8082c6c:	4a02      	ldr	r2, [pc, #8]	; (8082c78 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 8082c6e:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 8082c70:	680a      	ldr	r2, [r1, #0]
 8082c72:	6042      	str	r2, [r0, #4]
}
 8082c74:	4770      	bx	lr
 8082c76:	bf00      	nop
 8082c78:	08084b7c 	.word	0x08084b7c

08082c7c <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082c7c:	4a01      	ldr	r2, [pc, #4]	; (8082c84 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 8082c7e:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 8082c80:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 8082c82:	4770      	bx	lr
 8082c84:	08084b7c 	.word	0x08084b7c

08082c88 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 8082c88:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 8082c8a:	f89d 4008 	ldrb.w	r4, [sp, #8]
 8082c8e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 8082c92:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8082c96:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 8082c9a:	6041      	str	r1, [r0, #4]
 8082c9c:	bd10      	pop	{r4, pc}
	...

08082ca0 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 8082ca0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082ca2:	4d04      	ldr	r5, [pc, #16]	; (8082cb4 <_ZN9IPAddressC1Ehhhh+0x14>)
 8082ca4:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 8082ca6:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8082caa:	9500      	str	r5, [sp, #0]
 8082cac:	f7ff ffec 	bl	8082c88 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 8082cb0:	b003      	add	sp, #12
 8082cb2:	bd30      	pop	{r4, r5, pc}
 8082cb4:	08084b7c 	.word	0x08084b7c

08082cb8 <_ZN9IPAddressaSEPKh>:
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
 8082cb8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
 8082cba:	780d      	ldrb	r5, [r1, #0]
 8082cbc:	788b      	ldrb	r3, [r1, #2]
 8082cbe:	784a      	ldrb	r2, [r1, #1]
 8082cc0:	78c9      	ldrb	r1, [r1, #3]
 8082cc2:	9100      	str	r1, [sp, #0]
 8082cc4:	4629      	mov	r1, r5
 8082cc6:	f7ff ffdf 	bl	8082c88 <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
 8082cca:	b003      	add	sp, #12
 8082ccc:	bd30      	pop	{r4, r5, pc}
	...

08082cd0 <_ZN9IPAddressC1EPKh>:
IPAddress::IPAddress(uint32_t address)
{
    *this = address;
}

IPAddress::IPAddress(const uint8_t* address)
 8082cd0:	b510      	push	{r4, lr}
 8082cd2:	4604      	mov	r4, r0
 8082cd4:	4b02      	ldr	r3, [pc, #8]	; (8082ce0 <_ZN9IPAddressC1EPKh+0x10>)
 8082cd6:	6003      	str	r3, [r0, #0]
{
    *this = address;
 8082cd8:	f7ff ffee 	bl	8082cb8 <_ZN9IPAddressaSEPKh>
}
 8082cdc:	4620      	mov	r0, r4
 8082cde:	bd10      	pop	{r4, pc}
 8082ce0:	08084b7c 	.word	0x08084b7c

08082ce4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 8082ce4:	4a01      	ldr	r2, [pc, #4]	; (8082cec <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 8082ce6:	4b02      	ldr	r3, [pc, #8]	; (8082cf0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 8082ce8:	601a      	str	r2, [r3, #0]
 8082cea:	4770      	bx	lr
 8082cec:	08084c3c 	.word	0x08084c3c
 8082cf0:	20000d60 	.word	0x20000d60

08082cf4 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8082cf4:	2300      	movs	r3, #0
 8082cf6:	461a      	mov	r2, r3
 8082cf8:	6840      	ldr	r0, [r0, #4]
 8082cfa:	f7ff bb8b 	b.w	8082414 <network_connect>

08082cfe <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8082cfe:	2200      	movs	r2, #0
 8082d00:	2102      	movs	r1, #2
 8082d02:	6840      	ldr	r0, [r0, #4]
 8082d04:	f7ff bb96 	b.w	8082434 <network_disconnect>

08082d08 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8082d08:	2200      	movs	r2, #0
 8082d0a:	4611      	mov	r1, r2
 8082d0c:	6840      	ldr	r0, [r0, #4]
 8082d0e:	f7ff bb89 	b.w	8082424 <network_connecting>

08082d12 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 8082d12:	2200      	movs	r2, #0
 8082d14:	4611      	mov	r1, r2
 8082d16:	6840      	ldr	r0, [r0, #4]
 8082d18:	f7ff bb94 	b.w	8082444 <network_ready>

08082d1c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8082d1c:	2300      	movs	r3, #0
 8082d1e:	461a      	mov	r2, r3
 8082d20:	4619      	mov	r1, r3
 8082d22:	6840      	ldr	r0, [r0, #4]
 8082d24:	f7ff bb96 	b.w	8082454 <network_on>

08082d28 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082d28:	2300      	movs	r3, #0
 8082d2a:	461a      	mov	r2, r3
 8082d2c:	4619      	mov	r1, r3
 8082d2e:	6840      	ldr	r0, [r0, #4]
 8082d30:	f7ff bb98 	b.w	8082464 <network_off>

08082d34 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8082d34:	2200      	movs	r2, #0
 8082d36:	f081 0101 	eor.w	r1, r1, #1
 8082d3a:	6840      	ldr	r0, [r0, #4]
 8082d3c:	f7ff bb9a 	b.w	8082474 <network_listen>

08082d40 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082d40:	2200      	movs	r2, #0
 8082d42:	6840      	ldr	r0, [r0, #4]
 8082d44:	f7ff bba6 	b.w	8082494 <network_set_listen_timeout>

08082d48 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082d48:	2200      	movs	r2, #0
 8082d4a:	4611      	mov	r1, r2
 8082d4c:	6840      	ldr	r0, [r0, #4]
 8082d4e:	f7ff bba9 	b.w	80824a4 <network_get_listen_timeout>

08082d52 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 8082d52:	2200      	movs	r2, #0
 8082d54:	4611      	mov	r1, r2
 8082d56:	6840      	ldr	r0, [r0, #4]
 8082d58:	f7ff bb94 	b.w	8082484 <network_listening>

08082d5c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8082d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082d5e:	4617      	mov	r7, r2
 8082d60:	b087      	sub	sp, #28
 8082d62:	4605      	mov	r5, r0
    IPAddress addr;
 8082d64:	a804      	add	r0, sp, #16
 8082d66:	f7ff ff79 	bl	8082c5c <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082d6a:	2600      	movs	r6, #0
 8082d6c:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082d6e:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082d70:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082d74:	f001 fe2b 	bl	80849ce <strlen>
 8082d78:	4b0a      	ldr	r3, [pc, #40]	; (8082da4 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8082d7a:	9600      	str	r6, [sp, #0]
 8082d7c:	b281      	uxth	r1, r0
 8082d7e:	685b      	ldr	r3, [r3, #4]
 8082d80:	4622      	mov	r2, r4
 8082d82:	4638      	mov	r0, r7
 8082d84:	f7ff f9a2 	bl	80820cc <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082d88:	b120      	cbz	r0, 8082d94 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8082d8a:	4631      	mov	r1, r6
 8082d8c:	4628      	mov	r0, r5
 8082d8e:	f7ff ff75 	bl	8082c7c <_ZN9IPAddressC1Em>
 8082d92:	e003      	b.n	8082d9c <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 8082d94:	4621      	mov	r1, r4
 8082d96:	4628      	mov	r0, r5
 8082d98:	f7ff ff68 	bl	8082c6c <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 8082d9c:	4628      	mov	r0, r5
 8082d9e:	b007      	add	sp, #28
 8082da0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082da2:	bf00      	nop
 8082da4:	20000d04 	.word	0x20000d04

08082da8 <_ZN5spark12NetworkClass4fromEm>:
        return Cellular;
#endif
    default:
        return Network;
    }
}
 8082da8:	4b03      	ldr	r3, [pc, #12]	; (8082db8 <_ZN5spark12NetworkClass4fromEm+0x10>)
 8082daa:	4a04      	ldr	r2, [pc, #16]	; (8082dbc <_ZN5spark12NetworkClass4fromEm+0x14>)
 8082dac:	2804      	cmp	r0, #4
 8082dae:	bf0c      	ite	eq
 8082db0:	4610      	moveq	r0, r2
 8082db2:	4618      	movne	r0, r3
 8082db4:	4770      	bx	lr
 8082db6:	bf00      	nop
 8082db8:	20000d64 	.word	0x20000d64
 8082dbc:	20000d04 	.word	0x20000d04

08082dc0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 8082dc0:	4b02      	ldr	r3, [pc, #8]	; (8082dcc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 8082dc2:	4a03      	ldr	r2, [pc, #12]	; (8082dd0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 8082dc4:	601a      	str	r2, [r3, #0]
 8082dc6:	2200      	movs	r2, #0
 8082dc8:	605a      	str	r2, [r3, #4]
 8082dca:	4770      	bx	lr
 8082dcc:	20000d64 	.word	0x20000d64
 8082dd0:	08084c70 	.word	0x08084c70

08082dd4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082dd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082dd6:	4606      	mov	r6, r0
 8082dd8:	460d      	mov	r5, r1
 8082dda:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8082ddc:	2400      	movs	r4, #0
  while (size--) {
 8082dde:	42bd      	cmp	r5, r7
 8082de0:	d00c      	beq.n	8082dfc <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8082de2:	6833      	ldr	r3, [r6, #0]
 8082de4:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082de8:	689b      	ldr	r3, [r3, #8]
 8082dea:	4630      	mov	r0, r6
 8082dec:	4798      	blx	r3
     if (chunk>=0)
 8082dee:	2800      	cmp	r0, #0
 8082df0:	db01      	blt.n	8082df6 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082df2:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8082df4:	e7f3      	b.n	8082dde <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8082df6:	2c00      	cmp	r4, #0
 8082df8:	bf08      	it	eq
 8082dfa:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8082dfc:	4620      	mov	r0, r4
 8082dfe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082e00 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082e00:	b570      	push	{r4, r5, r6, lr}
 8082e02:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082e04:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8082e06:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8082e08:	b149      	cbz	r1, 8082e1e <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082e0a:	f001 fde0 	bl	80849ce <strlen>
 8082e0e:	682b      	ldr	r3, [r5, #0]
 8082e10:	4602      	mov	r2, r0
 8082e12:	4621      	mov	r1, r4
 8082e14:	4628      	mov	r0, r5
    }
 8082e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8082e1a:	68db      	ldr	r3, [r3, #12]
 8082e1c:	4718      	bx	r3
    }
 8082e1e:	bd70      	pop	{r4, r5, r6, pc}

08082e20 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082e20:	6803      	ldr	r3, [r0, #0]
 8082e22:	689b      	ldr	r3, [r3, #8]
 8082e24:	4718      	bx	r3

08082e26 <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082e26:	2a01      	cmp	r2, #1
 8082e28:	bf98      	it	ls
 8082e2a:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082e2c:	b530      	push	{r4, r5, lr}
 8082e2e:	460b      	mov	r3, r1
 8082e30:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082e32:	2100      	movs	r1, #0
 8082e34:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8082e38:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8082e3c:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8082e40:	fb05 3312 	mls	r3, r5, r2, r3
 8082e44:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082e46:	2b09      	cmp	r3, #9
 8082e48:	bf94      	ite	ls
 8082e4a:	3330      	addls	r3, #48	; 0x30
 8082e4c:	3337      	addhi	r3, #55	; 0x37
 8082e4e:	b2db      	uxtb	r3, r3
 8082e50:	4621      	mov	r1, r4
 8082e52:	f804 3901 	strb.w	r3, [r4], #-1
 8082e56:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8082e58:	2d00      	cmp	r5, #0
 8082e5a:	d1ef      	bne.n	8082e3c <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8082e5c:	f7ff ffd0 	bl	8082e00 <_ZN5Print5writeEPKc>
}
 8082e60:	b00b      	add	sp, #44	; 0x2c
 8082e62:	bd30      	pop	{r4, r5, pc}

08082e64 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8082e64:	b410      	push	{r4}
  if (base == 0) return write(n);
 8082e66:	b922      	cbnz	r2, 8082e72 <_ZN5Print5printEmi+0xe>
 8082e68:	6803      	ldr	r3, [r0, #0]
 8082e6a:	b2c9      	uxtb	r1, r1
 8082e6c:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8082e6e:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8082e70:	4718      	bx	r3
  else return printNumber(n, base);
 8082e72:	b2d2      	uxtb	r2, r2
}
 8082e74:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8082e76:	f7ff bfd6 	b.w	8082e26 <_ZN5Print11printNumberEmh>

08082e7a <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8082e7a:	f7ff bff3 	b.w	8082e64 <_ZN5Print5printEmi>

08082e7e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8082e7e:	b510      	push	{r4, lr}
 8082e80:	4604      	mov	r4, r0
 8082e82:	f7ff fbdf 	bl	8082644 <_ZNSt14_Function_baseD1Ev>
 8082e86:	4620      	mov	r0, r4
 8082e88:	bd10      	pop	{r4, pc}
	...

08082e8c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082e8c:	4803      	ldr	r0, [pc, #12]	; (8082e9c <_GLOBAL__sub_I_RGB+0x10>)
 8082e8e:	2300      	movs	r3, #0
 8082e90:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8082e92:	4a03      	ldr	r2, [pc, #12]	; (8082ea0 <_GLOBAL__sub_I_RGB+0x14>)
 8082e94:	4903      	ldr	r1, [pc, #12]	; (8082ea4 <_GLOBAL__sub_I_RGB+0x18>)
 8082e96:	f000 bdc1 	b.w	8083a1c <__aeabi_atexit>
 8082e9a:	bf00      	nop
 8082e9c:	20000d6c 	.word	0x20000d6c
 8082ea0:	200004f8 	.word	0x200004f8
 8082ea4:	08082e7f 	.word	0x08082e7f

08082ea8 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8082ea8:	4770      	bx	lr

08082eaa <_ZN8SPIClassD0Ev>:
 8082eaa:	b510      	push	{r4, lr}
 8082eac:	4604      	mov	r4, r0
 8082eae:	f7fd f8f8 	bl	80800a2 <_ZdlPv>
 8082eb2:	4620      	mov	r0, r4
 8082eb4:	bd10      	pop	{r4, pc}
	...

08082eb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8082eb8:	b570      	push	{r4, r5, r6, lr}
 8082eba:	4604      	mov	r4, r0
 8082ebc:	460e      	mov	r6, r1
 8082ebe:	4b07      	ldr	r3, [pc, #28]	; (8082edc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8082ec0:	2500      	movs	r5, #0
 8082ec2:	6003      	str	r3, [r0, #0]
 8082ec4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8082ec8:	f7ff f908 	bl	80820dc <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8082ecc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8082ece:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8082ed0:	f7ff f9cc 	bl	808226c <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8082ed4:	60a5      	str	r5, [r4, #8]
}
 8082ed6:	4620      	mov	r0, r4
 8082ed8:	bd70      	pop	{r4, r5, r6, pc}
 8082eda:	bf00      	nop
 8082edc:	08084ca4 	.word	0x08084ca4

08082ee0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8082ee0:	7900      	ldrb	r0, [r0, #4]
 8082ee2:	f7ff b9cb 	b.w	808227c <HAL_SPI_Is_Enabled>

08082ee6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082ee6:	b510      	push	{r4, lr}
 8082ee8:	4604      	mov	r4, r0
{
	free(buffer);
 8082eea:	6800      	ldr	r0, [r0, #0]
 8082eec:	f7ff faea 	bl	80824c4 <free>
}
 8082ef0:	4620      	mov	r0, r4
 8082ef2:	bd10      	pop	{r4, pc}

08082ef4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082ef4:	b510      	push	{r4, lr}
 8082ef6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8082ef8:	6800      	ldr	r0, [r0, #0]
 8082efa:	b108      	cbz	r0, 8082f00 <_ZN6String10invalidateEv+0xc>
 8082efc:	f7ff fae2 	bl	80824c4 <free>
	buffer = NULL;
 8082f00:	2300      	movs	r3, #0
 8082f02:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8082f04:	60a3      	str	r3, [r4, #8]
 8082f06:	6063      	str	r3, [r4, #4]
 8082f08:	bd10      	pop	{r4, pc}

08082f0a <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8082f0a:	b538      	push	{r3, r4, r5, lr}
 8082f0c:	4604      	mov	r4, r0
 8082f0e:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8082f10:	6800      	ldr	r0, [r0, #0]
 8082f12:	3101      	adds	r1, #1
 8082f14:	f7ff fade 	bl	80824d4 <realloc>
	if (newbuffer) {
 8082f18:	b110      	cbz	r0, 8082f20 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8082f1a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8082f1e:	2001      	movs	r0, #1
	}
	return 0;
}
 8082f20:	bd38      	pop	{r3, r4, r5, pc}

08082f22 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082f22:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082f24:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082f26:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082f28:	b113      	cbz	r3, 8082f30 <_ZN6String7reserveEj+0xe>
 8082f2a:	6843      	ldr	r3, [r0, #4]
 8082f2c:	428b      	cmp	r3, r1
 8082f2e:	d207      	bcs.n	8082f40 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8082f30:	4620      	mov	r0, r4
 8082f32:	f7ff ffea 	bl	8082f0a <_ZN6String12changeBufferEj>
 8082f36:	b120      	cbz	r0, 8082f42 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8082f38:	68a3      	ldr	r3, [r4, #8]
 8082f3a:	b90b      	cbnz	r3, 8082f40 <_ZN6String7reserveEj+0x1e>
 8082f3c:	6822      	ldr	r2, [r4, #0]
 8082f3e:	7013      	strb	r3, [r2, #0]
 8082f40:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8082f42:	bd10      	pop	{r4, pc}

08082f44 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082f44:	b570      	push	{r4, r5, r6, lr}
 8082f46:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8082f48:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082f4a:	4604      	mov	r4, r0
 8082f4c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8082f4e:	f7ff ffe8 	bl	8082f22 <_ZN6String7reserveEj>
 8082f52:	b918      	cbnz	r0, 8082f5c <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8082f54:	4620      	mov	r0, r4
 8082f56:	f7ff ffcd 	bl	8082ef4 <_ZN6String10invalidateEv>
		return *this;
 8082f5a:	e009      	b.n	8082f70 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8082f5c:	462a      	mov	r2, r5
 8082f5e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8082f60:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082f62:	6820      	ldr	r0, [r4, #0]
 8082f64:	f001 fcba 	bl	80848dc <memcpy>
	buffer[len] = 0;
 8082f68:	6822      	ldr	r2, [r4, #0]
 8082f6a:	68a3      	ldr	r3, [r4, #8]
 8082f6c:	2100      	movs	r1, #0
 8082f6e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8082f70:	4620      	mov	r0, r4
 8082f72:	bd70      	pop	{r4, r5, r6, pc}

08082f74 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082f74:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082f76:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082f78:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082f7a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082f7c:	6043      	str	r3, [r0, #4]
	len = 0;
 8082f7e:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082f80:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8082f82:	460d      	mov	r5, r1
 8082f84:	b139      	cbz	r1, 8082f96 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8082f86:	4608      	mov	r0, r1
 8082f88:	f001 fd21 	bl	80849ce <strlen>
 8082f8c:	4629      	mov	r1, r5
 8082f8e:	4602      	mov	r2, r0
 8082f90:	4620      	mov	r0, r4
 8082f92:	f7ff ffd7 	bl	8082f44 <_ZN6String4copyEPKcj>
}
 8082f96:	4620      	mov	r0, r4
 8082f98:	bd38      	pop	{r3, r4, r5, pc}

08082f9a <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
 8082f9a:	b538      	push	{r3, r4, r5, lr}
 8082f9c:	4605      	mov	r5, r0
	if (cstr) copy(cstr, strlen(cstr));
 8082f9e:	460c      	mov	r4, r1
 8082fa0:	b141      	cbz	r1, 8082fb4 <_ZN6StringaSEPKc+0x1a>
 8082fa2:	4608      	mov	r0, r1
 8082fa4:	f001 fd13 	bl	80849ce <strlen>
 8082fa8:	4621      	mov	r1, r4
 8082faa:	4602      	mov	r2, r0
 8082fac:	4628      	mov	r0, r5
 8082fae:	f7ff ffc9 	bl	8082f44 <_ZN6String4copyEPKcj>
 8082fb2:	e001      	b.n	8082fb8 <_ZN6StringaSEPKc+0x1e>
	else invalidate();
 8082fb4:	f7ff ff9e 	bl	8082ef4 <_ZN6String10invalidateEv>

	return *this;
}
 8082fb8:	4628      	mov	r0, r5
 8082fba:	bd38      	pop	{r3, r4, r5, pc}

08082fbc <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8082fbc:	b570      	push	{r4, r5, r6, lr}
 8082fbe:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8082fc0:	b19a      	cbz	r2, 8082fea <_ZNK6String8getBytesEPhjj+0x2e>
 8082fc2:	b191      	cbz	r1, 8082fea <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 8082fc4:	6885      	ldr	r5, [r0, #8]
 8082fc6:	429d      	cmp	r5, r3
 8082fc8:	d802      	bhi.n	8082fd0 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8082fca:	2300      	movs	r3, #0
 8082fcc:	700b      	strb	r3, [r1, #0]
		return;
 8082fce:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 8082fd0:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 8082fd2:	1aed      	subs	r5, r5, r3
 8082fd4:	42ac      	cmp	r4, r5
 8082fd6:	bf28      	it	cs
 8082fd8:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 8082fda:	6801      	ldr	r1, [r0, #0]
 8082fdc:	4622      	mov	r2, r4
 8082fde:	4419      	add	r1, r3
 8082fe0:	4630      	mov	r0, r6
 8082fe2:	f001 fcfc 	bl	80849de <strncpy>
	buf[n] = 0;
 8082fe6:	2300      	movs	r3, #0
 8082fe8:	5533      	strb	r3, [r6, r4]
 8082fea:	bd70      	pop	{r4, r5, r6, pc}

08082fec <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8082fec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082ff0:	4b03      	ldr	r3, [pc, #12]	; (8083000 <_GLOBAL__sub_I_System+0x14>)
 8082ff2:	2000      	movs	r0, #0
 8082ff4:	7018      	strb	r0, [r3, #0]
 8082ff6:	8058      	strh	r0, [r3, #2]
 8082ff8:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8082ffa:	f7ff b9bf 	b.w	808237c <set_system_mode>
 8082ffe:	bf00      	nop
 8083000:	20000d7c 	.word	0x20000d7c

08083004 <_ZN9TCPClient5writeEh>:
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 8083004:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8083006:	ac02      	add	r4, sp, #8
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8083008:	6803      	ldr	r3, [r0, #0]
        }
        return connected;
}

size_t TCPClient::write(uint8_t b)
{
 808300a:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 808300e:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8083010:	2201      	movs	r2, #1
 8083012:	f247 5330 	movw	r3, #30000	; 0x7530
 8083016:	4621      	mov	r1, r4
 8083018:	47a8      	blx	r5
}
 808301a:	b003      	add	sp, #12
 808301c:	bd30      	pop	{r4, r5, pc}

0808301e <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
 808301e:	b410      	push	{r4}
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 8083020:	6803      	ldr	r3, [r0, #0]
 8083022:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
 8083024:	f247 5330 	movw	r3, #30000	; 0x7530
 8083028:	46a4      	mov	ip, r4
}
 808302a:	bc10      	pop	{r4}
    return write(&b, 1, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size)
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
 808302c:	4760      	bx	ip

0808302e <_ZN9TCPClient5writeEhm>:
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 808302e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8083030:	ac02      	add	r4, sp, #8
    return write(&b, 1, timeout);
 8083032:	6803      	ldr	r3, [r0, #0]
{
    return write(buffer, size, SPARK_WIRING_TCPCLIENT_DEFAULT_SEND_TIMEOUT);
}

size_t TCPClient::write(uint8_t b, system_tick_t timeout)
{
 8083034:	f804 1d01 	strb.w	r1, [r4, #-1]!
    return write(&b, 1, timeout);
 8083038:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 808303a:	4621      	mov	r1, r4
 808303c:	4613      	mov	r3, r2
 808303e:	2201      	movs	r2, #1
 8083040:	47a8      	blx	r5
}
 8083042:	b003      	add	sp, #12
 8083044:	bd30      	pop	{r4, r5, pc}

08083046 <_ZN9TCPClient5flushEv>:
  d_->offset = 0;
  d_->total = 0;
}

void TCPClient::flush()
{
 8083046:	4770      	bx	lr

08083048 <_ZN9TCPClient8remoteIPEv>:
{
   return (status()!=0);
}

IPAddress TCPClient::remoteIP()
{
 8083048:	694a      	ldr	r2, [r1, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 808304a:	4903      	ldr	r1, [pc, #12]	; (8083058 <_ZN9TCPClient8remoteIPEv+0x10>)
 808304c:	6001      	str	r1, [r0, #0]
 808304e:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 8083052:	6042      	str	r2, [r0, #4]
    return d_->remoteIP;
}
 8083054:	4770      	bx	lr
 8083056:	bf00      	nop
 8083058:	08084b7c 	.word	0x08084b7c

0808305c <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED1Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 808305c:	4770      	bx	lr

0808305e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE14_M_get_deleterERKSt9type_info>:
	  ? std::__addressof(_M_impl._M_del())
	  : nullptr;
#else
        return nullptr;
#endif
      }
 808305e:	2000      	movs	r0, #0
 8083060:	4770      	bx	lr

08083062 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EED0Ev>:

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }
 8083062:	b510      	push	{r4, lr}
 8083064:	4604      	mov	r4, r0
 8083066:	f7fd f81c 	bl	80800a2 <_ZdlPv>
 808306a:	4620      	mov	r0, r4
 808306c:	bd10      	pop	{r4, pc}

0808306e <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_destroyEv>:
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 808306e:	f7fd b818 	b.w	80800a2 <_ZdlPv>

08083072 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>:
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
 8083072:	b510      	push	{r4, lr}
 8083074:	4604      	mov	r4, r0
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
 8083076:	6803      	ldr	r3, [r0, #0]
 8083078:	689b      	ldr	r3, [r3, #8]
 808307a:	4798      	blx	r3
          if (--_M_weak_count == 0)
 808307c:	68a3      	ldr	r3, [r4, #8]
 808307e:	3b01      	subs	r3, #1
 8083080:	60a3      	str	r3, [r4, #8]
 8083082:	b92b      	cbnz	r3, 8083090 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30+0x1e>
            _M_destroy();
 8083084:	6823      	ldr	r3, [r4, #0]
 8083086:	4620      	mov	r0, r4
        }
    }
 8083088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    {
      if (--_M_use_count == 0)
        {
          _M_dispose();
          if (--_M_weak_count == 0)
            _M_destroy();
 808308c:	68db      	ldr	r3, [r3, #12]
 808308e:	4718      	bx	r3
 8083090:	bd10      	pop	{r4, pc}

08083092 <_ZN9TCPClient4peekEv>:
        }
        return read;
}

int TCPClient::peek()
{
 8083092:	b510      	push	{r4, lr}
 8083094:	6943      	ldr	r3, [r0, #20]
 8083096:	4604      	mov	r4, r0
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
 8083098:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 808309c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80830a0:	429a      	cmp	r2, r3
 80830a2:	d005      	beq.n	80830b0 <_ZN9TCPClient4peekEv+0x1e>
 80830a4:	6962      	ldr	r2, [r4, #20]
 80830a6:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80830aa:	4413      	add	r3, r2
 80830ac:	7918      	ldrb	r0, [r3, #4]
 80830ae:	bd10      	pop	{r4, pc}
 80830b0:	6803      	ldr	r3, [r0, #0]
 80830b2:	691b      	ldr	r3, [r3, #16]
 80830b4:	4798      	blx	r3
 80830b6:	2800      	cmp	r0, #0
 80830b8:	d1f4      	bne.n	80830a4 <_ZN9TCPClient4peekEv+0x12>
 80830ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80830be:	bd10      	pop	{r4, pc}

080830c0 <_ZN9TCPClient4readEv>:
    avail = bufferCount();
    return avail;
}

int TCPClient::read()
{
 80830c0:	b510      	push	{r4, lr}
 80830c2:	6943      	ldr	r3, [r0, #20]
 80830c4:	4604      	mov	r4, r0
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
 80830c6:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80830ca:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
 80830ce:	429a      	cmp	r2, r3
 80830d0:	d008      	beq.n	80830e4 <_ZN9TCPClient4readEv+0x24>
 80830d2:	6962      	ldr	r2, [r4, #20]
 80830d4:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 80830d8:	1c59      	adds	r1, r3, #1
 80830da:	f8a2 1084 	strh.w	r1, [r2, #132]	; 0x84
 80830de:	4413      	add	r3, r2
 80830e0:	7918      	ldrb	r0, [r3, #4]
 80830e2:	bd10      	pop	{r4, pc}
 80830e4:	6803      	ldr	r3, [r0, #0]
 80830e6:	691b      	ldr	r3, [r3, #16]
 80830e8:	4798      	blx	r3
 80830ea:	2800      	cmp	r0, #0
 80830ec:	d1f1      	bne.n	80830d2 <_ZN9TCPClient4readEv+0x12>
 80830ee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
 80830f2:	bd10      	pop	{r4, pc}

080830f4 <_ZN9TCPClient4readEPhj>:

int TCPClient::read(uint8_t *buffer, size_t size)
{
 80830f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80830f6:	6943      	ldr	r3, [r0, #20]
 80830f8:	4617      	mov	r7, r2
        int read = -1;
        if (bufferCount() || available())
 80830fa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80830fe:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8083102:	4605      	mov	r5, r0
        int read = -1;
        if (bufferCount() || available())
 8083104:	429a      	cmp	r2, r3
{
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
 8083106:	460e      	mov	r6, r1
        int read = -1;
        if (bufferCount() || available())
 8083108:	d106      	bne.n	8083118 <_ZN9TCPClient4readEPhj+0x24>
 808310a:	6803      	ldr	r3, [r0, #0]
 808310c:	691b      	ldr	r3, [r3, #16]
 808310e:	4798      	blx	r3
 8083110:	b910      	cbnz	r0, 8083118 <_ZN9TCPClient4readEPhj+0x24>
  return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
}

int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
 8083112:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8083116:	e014      	b.n	8083142 <_ZN9TCPClient4readEPhj+0x4e>
 8083118:	6969      	ldr	r1, [r5, #20]
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 808311a:	4630      	mov	r0, r6
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 808311c:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
 8083120:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
          memcpy(buffer, &d_->buffer[d_->offset], read);
 8083124:	4419      	add	r1, r3
    return ret;
}

int TCPClient::bufferCount()
{
  return d_->total - d_->offset;
 8083126:	1ae4      	subs	r4, r4, r3
int TCPClient::read(uint8_t *buffer, size_t size)
{
        int read = -1;
        if (bufferCount() || available())
        {
          read = (size > (size_t) bufferCount()) ? bufferCount() : size;
 8083128:	42bc      	cmp	r4, r7
 808312a:	bf28      	it	cs
 808312c:	463c      	movcs	r4, r7
          memcpy(buffer, &d_->buffer[d_->offset], read);
 808312e:	3104      	adds	r1, #4
 8083130:	4622      	mov	r2, r4
 8083132:	f001 fbd3 	bl	80848dc <memcpy>
 8083136:	696a      	ldr	r2, [r5, #20]
          d_->offset += read;
 8083138:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
 808313c:	4423      	add	r3, r4
 808313e:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
        }
        return read;
}
 8083142:	4620      	mov	r0, r4
 8083144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08083146 <_ZN9TCPClient12flush_bufferEv>:
{
  return  (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
}

void TCPClient::flush_buffer()
{
 8083146:	6942      	ldr	r2, [r0, #20]
  d_->offset = 0;
 8083148:	2300      	movs	r3, #0
 808314a:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
 808314e:	6942      	ldr	r2, [r0, #20]
  d_->total = 0;
 8083150:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
 8083154:	4770      	bx	lr

08083156 <_ZN9TCPClient9availableEv>:
{
  return d_->total - d_->offset;
}

int TCPClient::available()
{
 8083156:	b538      	push	{r3, r4, r5, lr}
 8083158:	6942      	ldr	r2, [r0, #20]
 808315a:	4604      	mov	r4, r0
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
 808315c:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 8083160:	b11b      	cbz	r3, 808316a <_ZN9TCPClient9availableEv+0x14>
 8083162:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
 8083166:	429a      	cmp	r2, r3
 8083168:	d00c      	beq.n	8083184 <_ZN9TCPClient9availableEv+0x2e>
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 808316a:	6920      	ldr	r0, [r4, #16]
 808316c:	f7ff fe1c 	bl	8082da8 <_ZN5spark12NetworkClass4fromEm>
 8083170:	6803      	ldr	r3, [r0, #0]
 8083172:	68db      	ldr	r3, [r3, #12]
 8083174:	4798      	blx	r3
 8083176:	b318      	cbz	r0, 80831c0 <_ZN9TCPClient9availableEv+0x6a>
 8083178:	6963      	ldr	r3, [r4, #20]

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 808317a:	6818      	ldr	r0, [r3, #0]
 808317c:	f7ff f83e 	bl	80821fc <socket_handle_valid>
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
 8083180:	b918      	cbnz	r0, 808318a <_ZN9TCPClient9availableEv+0x34>
 8083182:	e01d      	b.n	80831c0 <_ZN9TCPClient9availableEv+0x6a>
    int avail = 0;

    // At EOB => Flush it
    if (d_->total && (d_->offset == d_->total))
    {
        flush_buffer();
 8083184:	f7ff ffdf 	bl	8083146 <_ZN9TCPClient12flush_bufferEv>
 8083188:	e7ef      	b.n	808316a <_ZN9TCPClient9availableEv+0x14>
 808318a:	6960      	ldr	r0, [r4, #20]
    }

    if(Network.from(nif).ready() && isOpen(d_->sock))
    {
        // Have room
        if ( d_->total < arraySize(d_->buffer))
 808318c:	f8b0 1086 	ldrh.w	r1, [r0, #134]	; 0x86
 8083190:	297f      	cmp	r1, #127	; 0x7f
 8083192:	d815      	bhi.n	80831c0 <_ZN9TCPClient9availableEv+0x6a>
        {
            int ret = socket_receive(d_->sock, d_->buffer + d_->total , arraySize(d_->buffer)-d_->total, 0);
 8083194:	1d05      	adds	r5, r0, #4
 8083196:	f1c1 0280 	rsb	r2, r1, #128	; 0x80
 808319a:	2300      	movs	r3, #0
 808319c:	4429      	add	r1, r5
 808319e:	6800      	ldr	r0, [r0, #0]
 80831a0:	f7ff f844 	bl	808222c <socket_receive>
            if (ret > 0)
 80831a4:	2800      	cmp	r0, #0
 80831a6:	dd0b      	ble.n	80831c0 <_ZN9TCPClient9availableEv+0x6a>
 80831a8:	6963      	ldr	r3, [r4, #20]
            {
                DEBUG("recv(=%d)",ret);
                if (d_->total == 0) d_->offset = 0;
 80831aa:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
 80831ae:	b90a      	cbnz	r2, 80831b4 <_ZN9TCPClient9availableEv+0x5e>
 80831b0:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
 80831b4:	6962      	ldr	r2, [r4, #20]
                d_->total += ret;
 80831b6:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80831ba:	4418      	add	r0, r3
 80831bc:	f8a2 0086 	strh.w	r0, [r2, #134]	; 0x86
 80831c0:	6962      	ldr	r2, [r4, #20]
            }
        } // Have Space
    } // WiFi.ready() && isOpen(d_->sock)
    avail = bufferCount();
    return avail;
 80831c2:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
 80831c6:	f8b2 0084 	ldrh.w	r0, [r2, #132]	; 0x84
 80831ca:	1a18      	subs	r0, r3, r0
}
 80831cc:	bd38      	pop	{r3, r4, r5, pc}

080831ce <_ZN9TCPClient4stopEv>:
{
}


void TCPClient::stop()
{
 80831ce:	b538      	push	{r3, r4, r5, lr}
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80831d0:	6943      	ldr	r3, [r0, #20]
{
}


void TCPClient::stop()
{
 80831d2:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80831d4:	6818      	ldr	r0, [r3, #0]
 80831d6:	f7ff f811 	bl	80821fc <socket_handle_valid>
void TCPClient::stop()
{
  // This log line pollutes the log too much
  // DEBUG("sock %d closesocket", d_->sock);

  if (isOpen(d_->sock))
 80831da:	b118      	cbz	r0, 80831e4 <_ZN9TCPClient4stopEv+0x16>
      socket_close(d_->sock);
 80831dc:	6963      	ldr	r3, [r4, #20]
 80831de:	6818      	ldr	r0, [r3, #0]
 80831e0:	f7ff f82c 	bl	808223c <socket_close>
 80831e4:	6965      	ldr	r5, [r4, #20]
  d_->sock = socket_handle_invalid();
 80831e6:	f7ff f831 	bl	808224c <socket_handle_invalid>
 80831ea:	6028      	str	r0, [r5, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 80831ec:	6963      	ldr	r3, [r4, #20]
 80831ee:	2200      	movs	r2, #0
 80831f0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  d_->remoteIP.clear();
  flush_buffer();
 80831f4:	4620      	mov	r0, r4
}
 80831f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}

  if (isOpen(d_->sock))
      socket_close(d_->sock);
  d_->sock = socket_handle_invalid();
  d_->remoteIP.clear();
  flush_buffer();
 80831fa:	f7ff bfa4 	b.w	8083146 <_ZN9TCPClient12flush_bufferEv>
	...

08083200 <_ZN9TCPClient7connectE9IPAddresstm>:
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8083200:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8083204:	461e      	mov	r6, r3
    stop();
 8083206:	6803      	ldr	r3, [r0, #0]
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 8083208:	b08a      	sub	sp, #40	; 0x28
    stop();
 808320a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      }
      return rv;
}

int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif)
{
 808320c:	4604      	mov	r4, r0
 808320e:	460d      	mov	r5, r1
 8083210:	4617      	mov	r7, r2
    stop();
 8083212:	4798      	blx	r3
        int connected = 0;
        if(Network.from(nif).ready())
 8083214:	4630      	mov	r0, r6
 8083216:	f7ff fdc7 	bl	8082da8 <_ZN5spark12NetworkClass4fromEm>
 808321a:	6803      	ldr	r3, [r0, #0]
 808321c:	68db      	ldr	r3, [r3, #12]
 808321e:	4798      	blx	r3
 8083220:	2800      	cmp	r0, #0
 8083222:	d050      	beq.n	80832c6 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 8083224:	9600      	str	r6, [sp, #0]
 8083226:	463b      	mov	r3, r7
 8083228:	2206      	movs	r2, #6
 808322a:	2101      	movs	r1, #1
 808322c:	2002      	movs	r0, #2
 808322e:	f8d4 8014 	ldr.w	r8, [r4, #20]
 8083232:	f7fe ffeb 	bl	808220c <socket_create>
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 8083236:	2320      	movs	r3, #32
    stop();
        int connected = 0;
        if(Network.from(nif).ready())
        {
          sockaddr_t tSocketAddr;
          d_->sock = socket_create(AF_INET, SOCK_STREAM, IPPROTO_TCP, port, nif);
 8083238:	f8c8 0000 	str.w	r0, [r8]
          LOG(TRACE, "TCPClient socket=%x", d_->sock);
 808323c:	2600      	movs	r6, #0
 808323e:	9302      	str	r3, [sp, #8]
 8083240:	6963      	ldr	r3, [r4, #20]
 8083242:	9603      	str	r6, [sp, #12]
 8083244:	681b      	ldr	r3, [r3, #0]
 8083246:	2001      	movs	r0, #1
 8083248:	9301      	str	r3, [sp, #4]
 808324a:	4b20      	ldr	r3, [pc, #128]	; (80832cc <_ZN9TCPClient7connectE9IPAddresstm+0xcc>)
 808324c:	aa02      	add	r2, sp, #8
 808324e:	9300      	str	r3, [sp, #0]
 8083250:	491f      	ldr	r1, [pc, #124]	; (80832d0 <_ZN9TCPClient7connectE9IPAddresstm+0xd0>)
 8083252:	4633      	mov	r3, r6
 8083254:	f7ff f88a 	bl	808236c <log_message>

          if (socket_handle_valid(d_->sock))
 8083258:	6963      	ldr	r3, [r4, #20]
 808325a:	6818      	ldr	r0, [r3, #0]
 808325c:	f7fe ffce 	bl	80821fc <socket_handle_valid>
 8083260:	b388      	cbz	r0, 80832c6 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
          {
            flush_buffer();
 8083262:	4620      	mov	r0, r4
 8083264:	f7ff ff6f 	bl	8083146 <_ZN9TCPClient12flush_bufferEv>

            tSocketAddr.sa_family = AF_INET;
 8083268:	2302      	movs	r3, #2
 808326a:	f8ad 3008 	strh.w	r3, [sp, #8]

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
 808326e:	0a3b      	lsrs	r3, r7, #8
 8083270:	f88d 300a 	strb.w	r3, [sp, #10]
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 8083274:	79eb      	ldrb	r3, [r5, #7]
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8083276:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
 808327a:	f88d 300c 	strb.w	r3, [sp, #12]
            tSocketAddr.sa_data[3] = ip[1];
 808327e:	79ab      	ldrb	r3, [r5, #6]
            flush_buffer();

            tSocketAddr.sa_family = AF_INET;

            tSocketAddr.sa_data[0] = (port & 0xFF00) >> 8;
            tSocketAddr.sa_data[1] = (port & 0x00FF);
 8083280:	f88d 700b 	strb.w	r7, [sp, #11]

            tSocketAddr.sa_data[2] = ip[0];        // Todo IPv6
            tSocketAddr.sa_data[3] = ip[1];
 8083284:	f88d 300d 	strb.w	r3, [sp, #13]
            tSocketAddr.sa_data[4] = ip[2];
 8083288:	796b      	ldrb	r3, [r5, #5]
 808328a:	f88d 300e 	strb.w	r3, [sp, #14]
            tSocketAddr.sa_data[5] = ip[3];
 808328e:	792b      	ldrb	r3, [r5, #4]
 8083290:	f88d 300f 	strb.w	r3, [sp, #15]


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 8083294:	f7fe ff12 	bl	80820bc <HAL_NET_SetNetWatchDog>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 8083298:	6963      	ldr	r3, [r4, #20]
 808329a:	2210      	movs	r2, #16
            tSocketAddr.sa_data[3] = ip[1];
            tSocketAddr.sa_data[4] = ip[2];
            tSocketAddr.sa_data[5] = ip[3];


            uint32_t ot = HAL_NET_SetNetWatchDog(S2M(MAX_SEC_WAIT_CONNECT));
 808329c:	4680      	mov	r8, r0
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
 808329e:	a902      	add	r1, sp, #8
 80832a0:	6818      	ldr	r0, [r3, #0]
 80832a2:	f7fe ffbb 	bl	808221c <socket_connect>
 80832a6:	4607      	mov	r7, r0
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
 80832a8:	4640      	mov	r0, r8
 80832aa:	f7fe ff07 	bl	80820bc <HAL_NET_SetNetWatchDog>
 80832ae:	6963      	ldr	r3, [r4, #20]

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
 80832b0:	686a      	ldr	r2, [r5, #4]
 80832b2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
            d_->remoteIP = ip;
            if(!connected)
 80832b6:	b12f      	cbz	r7, 80832c4 <_ZN9TCPClient7connectE9IPAddresstm+0xc4>
            {
                stop();
 80832b8:	6823      	ldr	r3, [r4, #0]
 80832ba:	4620      	mov	r0, r4
 80832bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80832be:	4798      	blx	r3
 80832c0:	4630      	mov	r0, r6
 80832c2:	e000      	b.n	80832c6 <_ZN9TCPClient7connectE9IPAddresstm+0xc6>
            DEBUG("sock %d connect",d_->sock);
            connected = (socket_connect(d_->sock, &tSocketAddr, sizeof(tSocketAddr)) == 0 ? 1 : 0);
            DEBUG("sock %d connected=%d",d_->sock, connected);
            HAL_NET_SetNetWatchDog(ot);
            d_->remoteIP = ip;
            if(!connected)
 80832c4:	2001      	movs	r0, #1
                stop();
            }
          }
        }
        return connected;
}
 80832c6:	b00a      	add	sp, #40	; 0x28
 80832c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80832cc:	08084d1b 	.word	0x08084d1b
 80832d0:	08084d14 	.word	0x08084d14

080832d4 <_ZN9TCPClient6statusEv>:
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80832d4:	b510      	push	{r4, lr}
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80832d6:	6943      	ldr	r3, [r0, #20]
  }
  return rv;
}

uint8_t TCPClient::status()
{
 80832d8:	4604      	mov	r4, r0

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 80832da:	6818      	ldr	r0, [r3, #0]
 80832dc:	f7fe ff8e 	bl	80821fc <socket_handle_valid>
  return rv;
}

uint8_t TCPClient::status()
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
 80832e0:	b908      	cbnz	r0, 80832e6 <_ZN9TCPClient6statusEv+0x12>
 80832e2:	2000      	movs	r0, #0
 80832e4:	bd10      	pop	{r4, pc}
 80832e6:	6920      	ldr	r0, [r4, #16]
 80832e8:	f7ff fd5e 	bl	8082da8 <_ZN5spark12NetworkClass4fromEm>
 80832ec:	6803      	ldr	r3, [r0, #0]
 80832ee:	68db      	ldr	r3, [r3, #12]
 80832f0:	4798      	blx	r3
 80832f2:	2800      	cmp	r0, #0
 80832f4:	d0f5      	beq.n	80832e2 <_ZN9TCPClient6statusEv+0xe>
 80832f6:	6963      	ldr	r3, [r4, #20]
 80832f8:	6818      	ldr	r0, [r3, #0]
 80832fa:	f7fe ff77 	bl	80821ec <socket_active_status>
 80832fe:	fab0 f080 	clz	r0, r0
 8083302:	0940      	lsrs	r0, r0, #5
}
 8083304:	bd10      	pop	{r4, pc}

08083306 <_ZN9TCPClient5writeEPKhjm>:
{
    return write(&b, 1, timeout);
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
 8083306:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  private:
    int write_error;
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
 808330a:	2500      	movs	r5, #0
 808330c:	6045      	str	r5, [r0, #4]
 808330e:	4604      	mov	r4, r0
 8083310:	460e      	mov	r6, r1
 8083312:	4617      	mov	r7, r2
 8083314:	4698      	mov	r8, r3
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 8083316:	f7ff ffdd 	bl	80832d4 <_ZN9TCPClient6statusEv>
 808331a:	b160      	cbz	r0, 8083336 <_ZN9TCPClient5writeEPKhjm+0x30>
 808331c:	6960      	ldr	r0, [r4, #20]
 808331e:	9501      	str	r5, [sp, #4]
 8083320:	f8cd 8000 	str.w	r8, [sp]
 8083324:	462b      	mov	r3, r5
 8083326:	463a      	mov	r2, r7
 8083328:	4631      	mov	r1, r6
 808332a:	6800      	ldr	r0, [r0, #0]
 808332c:	f7fe ff96 	bl	808225c <socket_send_ex>
    if (ret < 0) {
 8083330:	2800      	cmp	r0, #0
 8083332:	da03      	bge.n	808333c <_ZN9TCPClient5writeEPKhjm+0x36>
 8083334:	e001      	b.n	808333a <_ZN9TCPClient5writeEPKhjm+0x34>
}

size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout)
{
    clearWriteError();
    int ret = status() ? socket_send_ex(d_->sock, buffer, size, 0, timeout, nullptr) : -1;
 8083336:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 808333a:	6060      	str	r0, [r4, #4]

    /*
     * FIXME: We should not be returning negative numbers here
     */
    return ret;
}
 808333c:	b002      	add	sp, #8
 808333e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08083342 <_ZN9TCPClient9connectedEv>:
  d_->remoteIP.clear();
  flush_buffer();
}

uint8_t TCPClient::connected()
{
 8083342:	b538      	push	{r3, r4, r5, lr}
 8083344:	4604      	mov	r4, r0
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 8083346:	f7ff ffc5 	bl	80832d4 <_ZN9TCPClient6statusEv>
 808334a:	bb00      	cbnz	r0, 808338e <_ZN9TCPClient9connectedEv+0x4c>
 808334c:	6963      	ldr	r3, [r4, #20]
 808334e:	f8b3 1086 	ldrh.w	r1, [r3, #134]	; 0x86
 8083352:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
 8083356:	4291      	cmp	r1, r2
 8083358:	d119      	bne.n	808338e <_ZN9TCPClient9connectedEv+0x4c>

using namespace spark;

static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
 808335a:	6818      	ldr	r0, [r3, #0]
 808335c:	f7fe ff4e 	bl	80821fc <socket_handle_valid>
uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
 8083360:	b128      	cbz	r0, 808336e <_ZN9TCPClient9connectedEv+0x2c>
 8083362:	6963      	ldr	r3, [r4, #20]
 8083364:	6818      	ldr	r0, [r3, #0]
 8083366:	f7fe ff41 	bl	80821ec <socket_active_status>
 808336a:	2801      	cmp	r0, #1
 808336c:	d001      	beq.n	8083372 <_ZN9TCPClient9connectedEv+0x30>
}

uint8_t TCPClient::connected()
{
  // Wlan up, open and not in CLOSE_WAIT or data still in the local buffer
  bool rv = (status() || bufferCount());
 808336e:	2500      	movs	r5, #0
 8083370:	e00e      	b.n	8083390 <_ZN9TCPClient9connectedEv+0x4e>
  // no data in the local buffer, Socket open but my be in CLOSE_WAIT yet the CC3000 may have data in its buffer
  if(!rv && isOpen(d_->sock) && (SOCKET_STATUS_INACTIVE == socket_active_status(d_->sock)))
    {
      rv = available(); // Try CC3000
 8083372:	6823      	ldr	r3, [r4, #0]
 8083374:	4620      	mov	r0, r4
 8083376:	691b      	ldr	r3, [r3, #16]
 8083378:	4798      	blx	r3
 808337a:	2800      	cmp	r0, #0
 808337c:	bf14      	ite	ne
 808337e:	2501      	movne	r5, #1
 8083380:	2500      	moveq	r5, #0
      if (!rv) {        // No more Data and CLOSE_WAIT
 8083382:	d105      	bne.n	8083390 <_ZN9TCPClient9connectedEv+0x4e>
          DEBUG("caling Stop No more Data and in CLOSE_WAIT");
          stop();       // Close our side
 8083384:	6823      	ldr	r3, [r4, #0]
 8083386:	4620      	mov	r0, r4
 8083388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808338a:	4798      	blx	r3
 808338c:	e000      	b.n	8083390 <_ZN9TCPClient9connectedEv+0x4e>
 808338e:	2501      	movs	r5, #1
      }
  }
  return rv;
}
 8083390:	4628      	mov	r0, r5
 8083392:	bd38      	pop	{r3, r4, r5, pc}

08083394 <_ZN9TCPClientcvbEv>:
{
  return (isOpen(d_->sock) && Network.from(nif).ready() && (SOCKET_STATUS_ACTIVE == socket_active_status(d_->sock)));
}

TCPClient::operator bool()
{
 8083394:	b508      	push	{r3, lr}
   return (status()!=0);
 8083396:	f7ff ff9d 	bl	80832d4 <_ZN9TCPClient6statusEv>
}
 808339a:	3000      	adds	r0, #0
 808339c:	bf18      	it	ne
 808339e:	2001      	movne	r0, #1
 80833a0:	bd08      	pop	{r3, pc}

080833a2 <_ZN9TCPClient4DataC1Em>:
IPAddress TCPClient::remoteIP()
{
    return d_->remoteIP;
}

TCPClient::Data::Data(sock_handle_t sock)
 80833a2:	b510      	push	{r4, lr}
 80833a4:	4604      	mov	r4, r0
        : sock(sock),
          offset(0),
          total(0) {
 80833a6:	2300      	movs	r3, #0
 80833a8:	6001      	str	r1, [r0, #0]
 80833aa:	f8a0 3084 	strh.w	r3, [r0, #132]	; 0x84
 80833ae:	f8a0 3086 	strh.w	r3, [r0, #134]	; 0x86
 80833b2:	3088      	adds	r0, #136	; 0x88
 80833b4:	f7ff fc52 	bl	8082c5c <_ZN9IPAddressC1Ev>
}
 80833b8:	4620      	mov	r0, r4
 80833ba:	bd10      	pop	{r4, pc}

080833bc <_ZN9TCPClientC1Em>:
 80833bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80833c0:	b570      	push	{r4, r5, r6, lr}
 80833c2:	6082      	str	r2, [r0, #8]
        d_(std::make_shared<Data>(sock))
 80833c4:	4a14      	ldr	r2, [pc, #80]	; (8083418 <_ZN9TCPClientC1Em+0x5c>)
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 80833c6:	2300      	movs	r3, #0
 80833c8:	6043      	str	r3, [r0, #4]
 80833ca:	6002      	str	r2, [r0, #0]
        };

      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_make_shared_tag __tag, const _Alloc& __a,
		     _Args&&... __args)
	: _M_ptr(), _M_refcount()
 80833cc:	6143      	str	r3, [r0, #20]

  template<_Lock_policy _Lp>
    class __shared_count
    {
    public:
      constexpr __shared_count() noexcept : _M_pi(0)
 80833ce:	6183      	str	r3, [r0, #24]

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
{
}

TCPClient::TCPClient(sock_handle_t sock) :
 80833d0:	4604      	mov	r4, r0
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80833d2:	2090      	movs	r0, #144	; 0x90
 80833d4:	460e      	mov	r6, r1
 80833d6:	f7fc fe60 	bl	808009a <_Znwj>

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
        void
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80833da:	4605      	mov	r5, r0
 80833dc:	b110      	cbz	r0, 80833e4 <_ZN9TCPClientC1Em+0x28>
 80833de:	4631      	mov	r1, r6
 80833e0:	f7ff ffdf 	bl	80833a2 <_ZN9TCPClient4DataC1Em>
      allocate(size_type __n, const void* = 0)
      { 
	if (__n > this->max_size())
	  std::__throw_bad_alloc();

	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80833e4:	2014      	movs	r0, #20
 80833e6:	f7fc fe58 	bl	808009a <_Znwj>
	  __try
	    {
	      typename _Sp_cd_type::__allocator_type __a2(__a);
	      auto __guard = std::__allocate_guarded(__a2);
	      _Sp_cd_type* __mem = __guard.get();
	      ::new (__mem) _Sp_cd_type(__p, std::move(__d), std::move(__a));
 80833ea:	4603      	mov	r3, r0
 80833ec:	b128      	cbz	r0, 80833fa <_ZN9TCPClientC1Em+0x3e>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80833ee:	2201      	movs	r2, #1
 80833f0:	6042      	str	r2, [r0, #4]
 80833f2:	6082      	str	r2, [r0, #8]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80833f4:	4a09      	ldr	r2, [pc, #36]	; (808341c <_ZN9TCPClientC1Em+0x60>)
	typedef _Sp_ebo_helper<0, _Deleter>	_Del_base;
	typedef _Sp_ebo_helper<1, _Alloc>	_Alloc_base;

      public:
	_Impl(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
	: _M_ptr(__p), _Del_base(__d), _Alloc_base(__a)
 80833f6:	6105      	str	r5, [r0, #16]
      _Sp_counted_deleter(_Ptr __p, _Deleter __d) noexcept
      : _M_impl(__p, __d, _Alloc()) { }

      // __d(__p) must not throw.
      _Sp_counted_deleter(_Ptr __p, _Deleter __d, const _Alloc& __a) noexcept
      : _M_impl(__p, __d, __a) { }
 80833f8:	6002      	str	r2, [r0, #0]

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 80833fa:	69a0      	ldr	r0, [r4, #24]
	  __traits::construct(__del._M_alloc, __ptr,
			      std::forward<_Args>(__args)...);
	  __guard = nullptr;
	  __shared_count<_Lp> __count(__ptr, __del, __del._M_alloc);
	  _M_refcount._M_swap(__count);
	  _M_ptr = __ptr;
 80833fc:	6165      	str	r5, [r4, #20]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 80833fe:	61a3      	str	r3, [r4, #24]
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
 8083400:	b128      	cbz	r0, 808340e <_ZN9TCPClientC1Em+0x52>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 8083402:	6843      	ldr	r3, [r0, #4]
 8083404:	3b01      	subs	r3, #1
 8083406:	6043      	str	r3, [r0, #4]
 8083408:	b90b      	cbnz	r3, 808340e <_ZN9TCPClientC1Em+0x52>
 808340a:	f7ff fe32 	bl	8083072 <_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE0EE10_M_releaseEv.part.2.constprop.30>
        d_(std::make_shared<Data>(sock))
{
  flush_buffer();
 808340e:	4620      	mov	r0, r4
 8083410:	f7ff fe99 	bl	8083146 <_ZN9TCPClient12flush_bufferEv>
}
 8083414:	4620      	mov	r0, r4
 8083416:	bd70      	pop	{r4, r5, r6, pc}
 8083418:	08084cd0 	.word	0x08084cd0
 808341c:	08084cb4 	.word	0x08084cb4

08083420 <_ZN9TCPClientC1Ev>:
static bool inline isOpen(sock_handle_t sd)
{
   return socket_handle_valid(sd);
}

TCPClient::TCPClient() : TCPClient(socket_handle_invalid())
 8083420:	b510      	push	{r4, lr}
 8083422:	4604      	mov	r4, r0
 8083424:	f7fe ff12 	bl	808224c <socket_handle_invalid>
 8083428:	4601      	mov	r1, r0
 808342a:	4620      	mov	r0, r4
 808342c:	f7ff ffc6 	bl	80833bc <_ZN9TCPClientC1Em>
{
}
 8083430:	4620      	mov	r0, r4
 8083432:	bd10      	pop	{r4, pc}

08083434 <_ZN9TCPClient4DataD1Ev>:
        : sock(sock),
          offset(0),
          total(0) {
}

TCPClient::Data::~Data() {
 8083434:	b510      	push	{r4, lr}
 8083436:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
 8083438:	6800      	ldr	r0, [r0, #0]
 808343a:	f7fe fedf 	bl	80821fc <socket_handle_valid>
 808343e:	b110      	cbz	r0, 8083446 <_ZN9TCPClient4DataD1Ev+0x12>
        socket_close(sock);
 8083440:	6820      	ldr	r0, [r4, #0]
 8083442:	f7fe fefb 	bl	808223c <socket_close>
    }
}
 8083446:	4620      	mov	r0, r4
 8083448:	bd10      	pop	{r4, pc}

0808344a <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv>:
      : _M_impl(__p, __d, __a) { }

      ~_Sp_counted_deleter() noexcept { }

      virtual void
      _M_dispose() noexcept
 808344a:	b510      	push	{r4, lr}
      { _M_impl._M_del()(_M_impl._M_ptr); }
 808344c:	6904      	ldr	r4, [r0, #16]
        construct(_Up* __p, _Args&&... __args)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }

      template<typename _Up>
        void 
        destroy(_Up* __p) { __p->~_Up(); }
 808344e:	4620      	mov	r0, r4
 8083450:	f7ff fff0 	bl	8083434 <_ZN9TCPClient4DataD1Ev>
      { __gd._M_ptr = nullptr; }

      /// Deallocate the owned pointer
      ~__allocated_ptr()
      {
	if (_M_ptr != nullptr)
 8083454:	b124      	cbz	r4, 8083460 <_ZNSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE10_M_disposeEv+0x16>
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
      { ::operator delete(__p); }
 8083456:	4620      	mov	r0, r4
 8083458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808345c:	f7fc be21 	b.w	80800a2 <_ZdlPv>
 8083460:	bd10      	pop	{r4, pc}
	...

08083464 <_ZN9TCPClient7connectEPKctm>:
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 8083464:	b5f0      	push	{r4, r5, r6, r7, lr}
 8083466:	461d      	mov	r5, r3
    stop();
 8083468:	6803      	ldr	r3, [r0, #0]
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 808346a:	b087      	sub	sp, #28
    stop();
 808346c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
{
  flush_buffer();
}

int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif)
{
 808346e:	4604      	mov	r4, r0
 8083470:	460e      	mov	r6, r1
 8083472:	4617      	mov	r7, r2
    stop();
 8083474:	4798      	blx	r3
      int rv = 0;
      if(Network.ready())
 8083476:	4810      	ldr	r0, [pc, #64]	; (80834b8 <_ZN9TCPClient7connectEPKctm+0x54>)
 8083478:	f7ff fc4b 	bl	8082d12 <_ZN5spark12NetworkClass5readyEv>
 808347c:	b1c8      	cbz	r0, 80834b2 <_ZN9TCPClient7connectEPKctm+0x4e>
      {
        IPAddress ip_addr;
 808347e:	a802      	add	r0, sp, #8
 8083480:	f7ff fbec 	bl	8082c5c <_ZN9IPAddressC1Ev>

        if((rv = inet_gethostbyname(host, strlen(host), ip_addr, nif, NULL)) == 0)
 8083484:	4630      	mov	r0, r6
 8083486:	f001 faa2 	bl	80849ce <strlen>
 808348a:	2300      	movs	r3, #0
 808348c:	9300      	str	r3, [sp, #0]
 808348e:	b281      	uxth	r1, r0
 8083490:	462b      	mov	r3, r5
 8083492:	aa03      	add	r2, sp, #12
 8083494:	4630      	mov	r0, r6
 8083496:	f7fe fe19 	bl	80820cc <inet_gethostbyname>
 808349a:	b950      	cbnz	r0, 80834b2 <_ZN9TCPClient7connectEPKctm+0x4e>
        {
                return connect(ip_addr, port, nif);
 808349c:	6823      	ldr	r3, [r4, #0]
 808349e:	463a      	mov	r2, r7
 80834a0:	6a1e      	ldr	r6, [r3, #32]
 80834a2:	4b06      	ldr	r3, [pc, #24]	; (80834bc <_ZN9TCPClient7connectEPKctm+0x58>)
 80834a4:	a904      	add	r1, sp, #16
 80834a6:	9304      	str	r3, [sp, #16]
 80834a8:	9b03      	ldr	r3, [sp, #12]
 80834aa:	4620      	mov	r0, r4
 80834ac:	9305      	str	r3, [sp, #20]
 80834ae:	462b      	mov	r3, r5
 80834b0:	47b0      	blx	r6
        }
        else
            DEBUG("unable to get IP for hostname");
      }
      return rv;
}
 80834b2:	b007      	add	sp, #28
 80834b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80834b6:	bf00      	nop
 80834b8:	20000d64 	.word	0x20000d64
 80834bc:	08084b7c 	.word	0x08084b7c

080834c0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80834c0:	4b02      	ldr	r3, [pc, #8]	; (80834cc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80834c2:	681a      	ldr	r2, [r3, #0]
 80834c4:	4b02      	ldr	r3, [pc, #8]	; (80834d0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80834c6:	601a      	str	r2, [r3, #0]
 80834c8:	4770      	bx	lr
 80834ca:	bf00      	nop
 80834cc:	20000490 	.word	0x20000490
 80834d0:	20000d84 	.word	0x20000d84

080834d4 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 80834d4:	4770      	bx	lr

080834d6 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80834d6:	7441      	strb	r1, [r0, #17]
 80834d8:	4770      	bx	lr

080834da <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 80834da:	7c00      	ldrb	r0, [r0, #16]
 80834dc:	f7fe bf0e 	b.w	80822fc <HAL_USART_Available_Data_For_Write>

080834e0 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 80834e0:	7c00      	ldrb	r0, [r0, #16]
 80834e2:	f7fe bee3 	b.w	80822ac <HAL_USART_Available_Data>

080834e6 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 80834e6:	7c00      	ldrb	r0, [r0, #16]
 80834e8:	f7fe bef0 	b.w	80822cc <HAL_USART_Peek_Data>

080834ec <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 80834ec:	7c00      	ldrb	r0, [r0, #16]
 80834ee:	f7fe bee5 	b.w	80822bc <HAL_USART_Read_Data>

080834f2 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 80834f2:	7c00      	ldrb	r0, [r0, #16]
 80834f4:	f7fe bef2 	b.w	80822dc <HAL_USART_Flush_Data>

080834f8 <_ZN11USARTSerialD0Ev>:
 80834f8:	b510      	push	{r4, lr}
 80834fa:	4604      	mov	r4, r0
 80834fc:	f7fc fdd1 	bl	80800a2 <_ZdlPv>
 8083500:	4620      	mov	r0, r4
 8083502:	bd10      	pop	{r4, pc}

08083504 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8083504:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8083506:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8083508:	4604      	mov	r4, r0
 808350a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808350c:	b925      	cbnz	r5, 8083518 <_ZN11USARTSerial5writeEh+0x14>
 808350e:	7c00      	ldrb	r0, [r0, #16]
 8083510:	f7fe fef4 	bl	80822fc <HAL_USART_Available_Data_For_Write>
 8083514:	2800      	cmp	r0, #0
 8083516:	dd05      	ble.n	8083524 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8083518:	4631      	mov	r1, r6
 808351a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808351c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8083520:	f7fe bebc 	b.w	808229c <HAL_USART_Write_Data>
  }
  return 0;
}
 8083524:	4628      	mov	r0, r5
 8083526:	bd70      	pop	{r4, r5, r6, pc}

08083528 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8083528:	b510      	push	{r4, lr}
 808352a:	4604      	mov	r4, r0
 808352c:	4608      	mov	r0, r1
 808352e:	4611      	mov	r1, r2
 8083530:	2200      	movs	r2, #0
 8083532:	6062      	str	r2, [r4, #4]
 8083534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8083538:	60a2      	str	r2, [r4, #8]
 808353a:	4a05      	ldr	r2, [pc, #20]	; (8083550 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 808353c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808353e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8083540:	2201      	movs	r2, #1
 8083542:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8083544:	461a      	mov	r2, r3
 8083546:	f7fe fea1 	bl	808228c <HAL_USART_Init>
}
 808354a:	4620      	mov	r0, r4
 808354c:	bd10      	pop	{r4, pc}
 808354e:	bf00      	nop
 8083550:	08084d60 	.word	0x08084d60

08083554 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8083554:	7c00      	ldrb	r0, [r0, #16]
 8083556:	f7fe bec9 	b.w	80822ec <HAL_USART_Is_Enabled>
	...

0808355c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808355c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
#else
  if (!serial1_rx_buffer) {
 808355e:	4c19      	ldr	r4, [pc, #100]	; (80835c4 <_Z22__fetch_global_Serial1v+0x68>)
 8083560:	6825      	ldr	r5, [r4, #0]
 8083562:	b94d      	cbnz	r5, 8083578 <_Z22__fetch_global_Serial1v+0x1c>
    serial1_rx_buffer = new Ring_Buffer();
 8083564:	2084      	movs	r0, #132	; 0x84
 8083566:	f7fc fd98 	bl	808009a <_Znwj>
 808356a:	4606      	mov	r6, r0
 808356c:	b118      	cbz	r0, 8083576 <_Z22__fetch_global_Serial1v+0x1a>
 808356e:	2284      	movs	r2, #132	; 0x84
 8083570:	4629      	mov	r1, r5
 8083572:	f001 f9be 	bl	80848f2 <memset>
 8083576:	6026      	str	r6, [r4, #0]
  }
  if (!serial1_tx_buffer) {
 8083578:	4d13      	ldr	r5, [pc, #76]	; (80835c8 <_Z22__fetch_global_Serial1v+0x6c>)
 808357a:	682e      	ldr	r6, [r5, #0]
 808357c:	b94e      	cbnz	r6, 8083592 <_Z22__fetch_global_Serial1v+0x36>
    serial1_tx_buffer = new Ring_Buffer();
 808357e:	2084      	movs	r0, #132	; 0x84
 8083580:	f7fc fd8b 	bl	808009a <_Znwj>
 8083584:	4607      	mov	r7, r0
 8083586:	b118      	cbz	r0, 8083590 <_Z22__fetch_global_Serial1v+0x34>
 8083588:	2284      	movs	r2, #132	; 0x84
 808358a:	4631      	mov	r1, r6
 808358c:	f001 f9b1 	bl	80848f2 <memset>
 8083590:	602f      	str	r7, [r5, #0]
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
 8083592:	4f0e      	ldr	r7, [pc, #56]	; (80835cc <_Z22__fetch_global_Serial1v+0x70>)
 8083594:	6839      	ldr	r1, [r7, #0]
 8083596:	f011 0601 	ands.w	r6, r1, #1
 808359a:	d111      	bne.n	80835c0 <_Z22__fetch_global_Serial1v+0x64>
 808359c:	4638      	mov	r0, r7
 808359e:	f7fc fd84 	bl	80800aa <__cxa_guard_acquire>
 80835a2:	b168      	cbz	r0, 80835c0 <_Z22__fetch_global_Serial1v+0x64>
 80835a4:	6822      	ldr	r2, [r4, #0]
 80835a6:	4631      	mov	r1, r6
 80835a8:	682b      	ldr	r3, [r5, #0]
 80835aa:	4809      	ldr	r0, [pc, #36]	; (80835d0 <_Z22__fetch_global_Serial1v+0x74>)
 80835ac:	f7ff ffbc 	bl	8083528 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80835b0:	4638      	mov	r0, r7
 80835b2:	f7fc fd7f 	bl	80800b4 <__cxa_guard_release>
 80835b6:	4a07      	ldr	r2, [pc, #28]	; (80835d4 <_Z22__fetch_global_Serial1v+0x78>)
 80835b8:	4907      	ldr	r1, [pc, #28]	; (80835d8 <_Z22__fetch_global_Serial1v+0x7c>)
 80835ba:	4805      	ldr	r0, [pc, #20]	; (80835d0 <_Z22__fetch_global_Serial1v+0x74>)
 80835bc:	f000 fa2e 	bl	8083a1c <__aeabi_atexit>
#endif
	return serial1;
}
 80835c0:	4803      	ldr	r0, [pc, #12]	; (80835d0 <_Z22__fetch_global_Serial1v+0x74>)
 80835c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80835c4:	20000da4 	.word	0x20000da4
 80835c8:	20000d9c 	.word	0x20000d9c
 80835cc:	20000da0 	.word	0x20000da0
 80835d0:	20000d88 	.word	0x20000d88
 80835d4:	200004f8 	.word	0x200004f8
 80835d8:	080834d5 	.word	0x080834d5

080835dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80835dc:	7441      	strb	r1, [r0, #17]
 80835de:	4770      	bx	lr

080835e0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80835e0:	4770      	bx	lr

080835e2 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80835e2:	2100      	movs	r1, #0
 80835e4:	7c00      	ldrb	r0, [r0, #16]
 80835e6:	f7fe bea9 	b.w	808233c <HAL_USB_USART_Receive_Data>

080835ea <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80835ea:	2101      	movs	r1, #1
 80835ec:	7c00      	ldrb	r0, [r0, #16]
 80835ee:	f7fe bea5 	b.w	808233c <HAL_USB_USART_Receive_Data>

080835f2 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80835f2:	7c00      	ldrb	r0, [r0, #16]
 80835f4:	f7fe be9a 	b.w	808232c <HAL_USB_USART_Available_Data_For_Write>

080835f8 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80835f8:	7c00      	ldrb	r0, [r0, #16]
 80835fa:	f7fe be8f 	b.w	808231c <HAL_USB_USART_Available_Data>

080835fe <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80835fe:	b538      	push	{r3, r4, r5, lr}
 8083600:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083602:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8083604:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083606:	f7fe fe91 	bl	808232c <HAL_USB_USART_Available_Data_For_Write>
 808360a:	2800      	cmp	r0, #0
 808360c:	dc01      	bgt.n	8083612 <_ZN9USBSerial5writeEh+0x14>
 808360e:	7c60      	ldrb	r0, [r4, #17]
 8083610:	b120      	cbz	r0, 808361c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 8083612:	4629      	mov	r1, r5
 8083614:	7c20      	ldrb	r0, [r4, #16]
 8083616:	f7fe fe99 	bl	808234c <HAL_USB_USART_Send_Data>
    return 1;
 808361a:	2001      	movs	r0, #1
  }
  return 0;
}
 808361c:	bd38      	pop	{r3, r4, r5, pc}

0808361e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808361e:	7c00      	ldrb	r0, [r0, #16]
 8083620:	f7fe be9c 	b.w	808235c <HAL_USB_USART_Flush_Data>

08083624 <_ZN9USBSerialD0Ev>:
 8083624:	b510      	push	{r4, lr}
 8083626:	4604      	mov	r4, r0
 8083628:	f7fc fd3b 	bl	80800a2 <_ZdlPv>
 808362c:	4620      	mov	r0, r4
 808362e:	bd10      	pop	{r4, pc}

08083630 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8083630:	b510      	push	{r4, lr}
 8083632:	4604      	mov	r4, r0
 8083634:	2300      	movs	r3, #0
 8083636:	6063      	str	r3, [r4, #4]
 8083638:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808363c:	60a3      	str	r3, [r4, #8]
 808363e:	4b05      	ldr	r3, [pc, #20]	; (8083654 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8083640:	4608      	mov	r0, r1
 8083642:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8083644:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8083646:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8083648:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808364a:	4611      	mov	r1, r2
 808364c:	f7fe fe5e 	bl	808230c <HAL_USB_USART_Init>
}
 8083650:	4620      	mov	r0, r4
 8083652:	bd10      	pop	{r4, pc}
 8083654:	08084d90 	.word	0x08084d90

08083658 <_Z19acquireSerialBufferv>:
 8083658:	b510      	push	{r4, lr}
 808365a:	4604      	mov	r4, r0
 808365c:	2214      	movs	r2, #20
 808365e:	2100      	movs	r1, #0
 8083660:	f001 f947 	bl	80848f2 <memset>
 8083664:	4620      	mov	r0, r4
 8083666:	bd10      	pop	{r4, pc}

08083668 <_Z16_fetch_usbserialv>:

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8083668:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808366a:	4d0e      	ldr	r5, [pc, #56]	; (80836a4 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 808366c:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808366e:	a801      	add	r0, sp, #4
 8083670:	f7ff fff2 	bl	8083658 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083674:	6829      	ldr	r1, [r5, #0]
 8083676:	f011 0401 	ands.w	r4, r1, #1
 808367a:	d110      	bne.n	808369e <_Z16_fetch_usbserialv+0x36>
 808367c:	4628      	mov	r0, r5
 808367e:	f7fc fd14 	bl	80800aa <__cxa_guard_acquire>
 8083682:	b160      	cbz	r0, 808369e <_Z16_fetch_usbserialv+0x36>
 8083684:	aa01      	add	r2, sp, #4
 8083686:	4621      	mov	r1, r4
 8083688:	4807      	ldr	r0, [pc, #28]	; (80836a8 <_Z16_fetch_usbserialv+0x40>)
 808368a:	f7ff ffd1 	bl	8083630 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808368e:	4628      	mov	r0, r5
 8083690:	f7fc fd10 	bl	80800b4 <__cxa_guard_release>
 8083694:	4a05      	ldr	r2, [pc, #20]	; (80836ac <_Z16_fetch_usbserialv+0x44>)
 8083696:	4906      	ldr	r1, [pc, #24]	; (80836b0 <_Z16_fetch_usbserialv+0x48>)
 8083698:	4803      	ldr	r0, [pc, #12]	; (80836a8 <_Z16_fetch_usbserialv+0x40>)
 808369a:	f000 f9bf 	bl	8083a1c <__aeabi_atexit>
	return _usbserial;
}
 808369e:	4802      	ldr	r0, [pc, #8]	; (80836a8 <_Z16_fetch_usbserialv+0x40>)
 80836a0:	b007      	add	sp, #28
 80836a2:	bd30      	pop	{r4, r5, pc}
 80836a4:	20000da8 	.word	0x20000da8
 80836a8:	20000db0 	.word	0x20000db0
 80836ac:	200004f8 	.word	0x200004f8
 80836b0:	080835e1 	.word	0x080835e1

080836b4 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80836b4:	b510      	push	{r4, lr}
 80836b6:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80836b8:	2214      	movs	r2, #20
 80836ba:	2100      	movs	r1, #0
 80836bc:	f001 f919 	bl	80848f2 <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80836c0:	4620      	mov	r0, r4
 80836c2:	bd10      	pop	{r4, pc}

080836c4 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80836c4:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80836c6:	4c0e      	ldr	r4, [pc, #56]	; (8083700 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80836c8:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80836ca:	a801      	add	r0, sp, #4
 80836cc:	f7ff fff2 	bl	80836b4 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80836d0:	6823      	ldr	r3, [r4, #0]
 80836d2:	07db      	lsls	r3, r3, #31
 80836d4:	d410      	bmi.n	80836f8 <_Z17_fetch_usbserial1v+0x34>
 80836d6:	4620      	mov	r0, r4
 80836d8:	f7fc fce7 	bl	80800aa <__cxa_guard_acquire>
 80836dc:	b160      	cbz	r0, 80836f8 <_Z17_fetch_usbserial1v+0x34>
 80836de:	aa01      	add	r2, sp, #4
 80836e0:	2101      	movs	r1, #1
 80836e2:	4808      	ldr	r0, [pc, #32]	; (8083704 <_Z17_fetch_usbserial1v+0x40>)
 80836e4:	f7ff ffa4 	bl	8083630 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80836e8:	4620      	mov	r0, r4
 80836ea:	f7fc fce3 	bl	80800b4 <__cxa_guard_release>
 80836ee:	4a06      	ldr	r2, [pc, #24]	; (8083708 <_Z17_fetch_usbserial1v+0x44>)
 80836f0:	4906      	ldr	r1, [pc, #24]	; (808370c <_Z17_fetch_usbserial1v+0x48>)
 80836f2:	4804      	ldr	r0, [pc, #16]	; (8083704 <_Z17_fetch_usbserial1v+0x40>)
 80836f4:	f000 f992 	bl	8083a1c <__aeabi_atexit>
  return _usbserial1;
}
 80836f8:	4802      	ldr	r0, [pc, #8]	; (8083704 <_Z17_fetch_usbserial1v+0x40>)
 80836fa:	b006      	add	sp, #24
 80836fc:	bd10      	pop	{r4, pc}
 80836fe:	bf00      	nop
 8083700:	20000dac 	.word	0x20000dac
 8083704:	20000dc4 	.word	0x20000dc4
 8083708:	200004f8 	.word	0x200004f8
 808370c:	080835e1 	.word	0x080835e1

08083710 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8083710:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8083712:	4b18      	ldr	r3, [pc, #96]	; (8083774 <serialEventRun+0x64>)
 8083714:	b133      	cbz	r3, 8083724 <serialEventRun+0x14>
 8083716:	f7ff ffa7 	bl	8083668 <_Z16_fetch_usbserialv>
 808371a:	6803      	ldr	r3, [r0, #0]
 808371c:	691b      	ldr	r3, [r3, #16]
 808371e:	4798      	blx	r3
 8083720:	2800      	cmp	r0, #0
 8083722:	dc1e      	bgt.n	8083762 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8083724:	4b14      	ldr	r3, [pc, #80]	; (8083778 <serialEventRun+0x68>)
 8083726:	b133      	cbz	r3, 8083736 <serialEventRun+0x26>
 8083728:	f7ff ff18 	bl	808355c <_Z22__fetch_global_Serial1v>
 808372c:	6803      	ldr	r3, [r0, #0]
 808372e:	691b      	ldr	r3, [r3, #16]
 8083730:	4798      	blx	r3
 8083732:	2800      	cmp	r0, #0
 8083734:	dc18      	bgt.n	8083768 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 8083736:	4b11      	ldr	r3, [pc, #68]	; (808377c <serialEventRun+0x6c>)
 8083738:	b10b      	cbz	r3, 808373e <serialEventRun+0x2e>
 808373a:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 808373e:	4b10      	ldr	r3, [pc, #64]	; (8083780 <serialEventRun+0x70>)
 8083740:	b10b      	cbz	r3, 8083746 <serialEventRun+0x36>
 8083742:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 8083746:	4b0f      	ldr	r3, [pc, #60]	; (8083784 <serialEventRun+0x74>)
 8083748:	b10b      	cbz	r3, 808374e <serialEventRun+0x3e>
 808374a:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 808374e:	4b0e      	ldr	r3, [pc, #56]	; (8083788 <serialEventRun+0x78>)
 8083750:	b17b      	cbz	r3, 8083772 <serialEventRun+0x62>
 8083752:	f7ff ffb7 	bl	80836c4 <_Z17_fetch_usbserial1v>
 8083756:	6803      	ldr	r3, [r0, #0]
 8083758:	691b      	ldr	r3, [r3, #16]
 808375a:	4798      	blx	r3
 808375c:	2800      	cmp	r0, #0
 808375e:	dc06      	bgt.n	808376e <serialEventRun+0x5e>
 8083760:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8083762:	f3af 8000 	nop.w
 8083766:	e7dd      	b.n	8083724 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 8083768:	f3af 8000 	nop.w
 808376c:	e7e3      	b.n	8083736 <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 808376e:	f3af 8000 	nop.w
 8083772:	bd08      	pop	{r3, pc}
	...

0808378c <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 808378c:	b508      	push	{r3, lr}
	serialEventRun();
 808378e:	f7ff ffbf 	bl	8083710 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 8083792:	f7fe fcb3 	bl	80820fc <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8083796:	4b01      	ldr	r3, [pc, #4]	; (808379c <_post_loop+0x10>)
 8083798:	6018      	str	r0, [r3, #0]
 808379a:	bd08      	pop	{r3, pc}
 808379c:	20000de0 	.word	0x20000de0

080837a0 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80837a0:	4802      	ldr	r0, [pc, #8]	; (80837ac <_Z33system_initialize_user_backup_ramv+0xc>)
 80837a2:	4a03      	ldr	r2, [pc, #12]	; (80837b0 <_Z33system_initialize_user_backup_ramv+0x10>)
 80837a4:	4903      	ldr	r1, [pc, #12]	; (80837b4 <_Z33system_initialize_user_backup_ramv+0x14>)
 80837a6:	1a12      	subs	r2, r2, r0
 80837a8:	f001 b898 	b.w	80848dc <memcpy>
 80837ac:	40024000 	.word	0x40024000
 80837b0:	40024004 	.word	0x40024004
 80837b4:	08084e68 	.word	0x08084e68

080837b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80837b8:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80837ba:	2300      	movs	r3, #0
 80837bc:	9300      	str	r3, [sp, #0]
 80837be:	461a      	mov	r2, r3
 80837c0:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80837c4:	f7fe fdfc 	bl	80823c0 <system_ctrl_set_result>
}
 80837c8:	b003      	add	sp, #12
 80837ca:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080837d0 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 80837d0:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 80837d2:	8843      	ldrh	r3, [r0, #2]
 80837d4:	2b0a      	cmp	r3, #10
 80837d6:	d008      	beq.n	80837ea <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 80837d8:	2b50      	cmp	r3, #80	; 0x50
 80837da:	d109      	bne.n	80837f0 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 80837dc:	4b09      	ldr	r3, [pc, #36]	; (8083804 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 80837de:	681b      	ldr	r3, [r3, #0]
 80837e0:	b13b      	cbz	r3, 80837f2 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 80837e2:	b003      	add	sp, #12
 80837e4:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 80837e8:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 80837ea:	f7ff ffe5 	bl	80837b8 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 80837ee:	e006      	b.n	80837fe <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80837f0:	2300      	movs	r3, #0
 80837f2:	9300      	str	r3, [sp, #0]
 80837f4:	461a      	mov	r2, r3
 80837f6:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80837fa:	f7fe fde1 	bl	80823c0 <system_ctrl_set_result>
        break;
    }
}
 80837fe:	b003      	add	sp, #12
 8083800:	f85d fb04 	ldr.w	pc, [sp], #4
 8083804:	20000dd8 	.word	0x20000dd8

08083808 <module_user_init_hook>:

void module_user_init_hook()
{
 8083808:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808380a:	4c10      	ldr	r4, [pc, #64]	; (808384c <module_user_init_hook+0x44>)
 808380c:	4d10      	ldr	r5, [pc, #64]	; (8083850 <module_user_init_hook+0x48>)
 808380e:	6823      	ldr	r3, [r4, #0]
 8083810:	42ab      	cmp	r3, r5
 8083812:	4b10      	ldr	r3, [pc, #64]	; (8083854 <module_user_init_hook+0x4c>)
 8083814:	bf0c      	ite	eq
 8083816:	2201      	moveq	r2, #1
 8083818:	2200      	movne	r2, #0
 808381a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 808381c:	d002      	beq.n	8083824 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 808381e:	f7ff ffbf 	bl	80837a0 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8083822:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8083824:	f7fe fc62 	bl	80820ec <HAL_RNG_GetRandomNumber>
 8083828:	4604      	mov	r4, r0
    srand(seed);
 808382a:	f001 f86b 	bl	8084904 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 808382e:	4b0a      	ldr	r3, [pc, #40]	; (8083858 <module_user_init_hook+0x50>)
 8083830:	b113      	cbz	r3, 8083838 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8083832:	4620      	mov	r0, r4
 8083834:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8083838:	2100      	movs	r1, #0
 808383a:	4807      	ldr	r0, [pc, #28]	; (8083858 <module_user_init_hook+0x50>)
 808383c:	f7fe fde2 	bl	8082404 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8083840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8083844:	2100      	movs	r1, #0
 8083846:	4805      	ldr	r0, [pc, #20]	; (808385c <module_user_init_hook+0x54>)
 8083848:	f7fe bdb0 	b.w	80823ac <system_ctrl_set_app_request_handler>
 808384c:	40024000 	.word	0x40024000
 8083850:	9a271c1e 	.word	0x9a271c1e
 8083854:	20000ddc 	.word	0x20000ddc
 8083858:	00000000 	.word	0x00000000
 808385c:	080837d1 	.word	0x080837d1

08083860 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8083860:	b510      	push	{r4, lr}
 8083862:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8083864:	480f      	ldr	r0, [pc, #60]	; (80838a4 <pinAvailable+0x44>)
 8083866:	f7ff fb3b 	bl	8082ee0 <_ZN8SPIClass9isEnabledEv>
 808386a:	b128      	cbz	r0, 8083878 <pinAvailable+0x18>
 808386c:	f1a4 030d 	sub.w	r3, r4, #13
 8083870:	2b02      	cmp	r3, #2
 8083872:	d801      	bhi.n	8083878 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 8083874:	2000      	movs	r0, #0
 8083876:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 8083878:	f000 f86a 	bl	8083950 <_Z19__fetch_global_Wirev>
 808387c:	f7ff f9ca 	bl	8082c14 <_ZN7TwoWire9isEnabledEv>
 8083880:	b108      	cbz	r0, 8083886 <pinAvailable+0x26>
 8083882:	2c01      	cmp	r4, #1
 8083884:	d9f6      	bls.n	8083874 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 8083886:	f7ff fe69 	bl	808355c <_Z22__fetch_global_Serial1v>
 808388a:	f7ff fe63 	bl	8083554 <_ZN11USARTSerial9isEnabledEv>
 808388e:	b118      	cbz	r0, 8083898 <pinAvailable+0x38>
 8083890:	f1a4 0312 	sub.w	r3, r4, #18
 8083894:	2b01      	cmp	r3, #1
 8083896:	d9ed      	bls.n	8083874 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 8083898:	2c2e      	cmp	r4, #46	; 0x2e
 808389a:	bf8c      	ite	hi
 808389c:	2000      	movhi	r0, #0
 808389e:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80838a0:	bd10      	pop	{r4, pc}
 80838a2:	bf00      	nop
 80838a4:	20000e04 	.word	0x20000e04

080838a8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80838a8:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80838aa:	b538      	push	{r3, r4, r5, lr}
 80838ac:	4604      	mov	r4, r0
 80838ae:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80838b0:	d80a      	bhi.n	80838c8 <pinMode+0x20>
 80838b2:	29ff      	cmp	r1, #255	; 0xff
 80838b4:	d008      	beq.n	80838c8 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80838b6:	f7ff ffd3 	bl	8083860 <pinAvailable>
 80838ba:	b128      	cbz	r0, 80838c8 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80838bc:	4629      	mov	r1, r5
 80838be:	4620      	mov	r0, r4
}
 80838c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80838c4:	f7fe bc32 	b.w	808212c <HAL_Pin_Mode>
 80838c8:	bd38      	pop	{r3, r4, r5, pc}

080838ca <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80838ca:	b538      	push	{r3, r4, r5, lr}
 80838cc:	4604      	mov	r4, r0
 80838ce:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 80838d0:	f7fe fc34 	bl	808213c <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 80838d4:	28ff      	cmp	r0, #255	; 0xff
 80838d6:	d010      	beq.n	80838fa <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 80838d8:	2806      	cmp	r0, #6
 80838da:	d804      	bhi.n	80838e6 <digitalWrite+0x1c>
 80838dc:	234d      	movs	r3, #77	; 0x4d
 80838de:	fa23 f000 	lsr.w	r0, r3, r0
 80838e2:	07c3      	lsls	r3, r0, #31
 80838e4:	d409      	bmi.n	80838fa <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 80838e6:	4620      	mov	r0, r4
 80838e8:	f7ff ffba 	bl	8083860 <pinAvailable>
 80838ec:	b128      	cbz	r0, 80838fa <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 80838ee:	4629      	mov	r1, r5
 80838f0:	4620      	mov	r0, r4
}
 80838f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 80838f6:	f7fe bc29 	b.w	808214c <HAL_GPIO_Write>
 80838fa:	bd38      	pop	{r3, r4, r5, pc}

080838fc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 80838fc:	b510      	push	{r4, lr}
 80838fe:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083900:	f7fe fc1c 	bl	808213c <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8083904:	3804      	subs	r0, #4
 8083906:	b2c0      	uxtb	r0, r0
 8083908:	2801      	cmp	r0, #1
 808390a:	d908      	bls.n	808391e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 808390c:	4620      	mov	r0, r4
 808390e:	f7ff ffa7 	bl	8083860 <pinAvailable>
 8083912:	b120      	cbz	r0, 808391e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8083914:	4620      	mov	r0, r4
}
 8083916:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808391a:	f7fe bc1f 	b.w	808215c <HAL_GPIO_Read>
}
 808391e:	2000      	movs	r0, #0
 8083920:	bd10      	pop	{r4, pc}

08083922 <analogRead>:
 * @brief Read the analog value of a pin.
 * Should return a 16-bit value, 0-65536 (0 = LOW, 65536 = HIGH)
 * Note: ADC is 12-bit. Currently it returns 0-4095
 */
int32_t analogRead(pin_t pin)
{
 8083922:	b510      	push	{r4, lr}
 8083924:	4604      	mov	r4, r0
  // Allow people to use 0-7 to define analog pins by checking to see if the values are too low.
  if(pin < FIRST_ANALOG_PIN)
 8083926:	2809      	cmp	r0, #9
  {
    pin = pin + FIRST_ANALOG_PIN;
 8083928:	bf9c      	itt	ls
 808392a:	340a      	addls	r4, #10
 808392c:	b2a4      	uxthls	r4, r4
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 808392e:	4620      	mov	r0, r4
 8083930:	f7ff ff96 	bl	8083860 <pinAvailable>
 8083934:	b150      	cbz	r0, 808394c <analogRead+0x2a>
    return LOW;
  }

  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
 8083936:	2103      	movs	r1, #3
 8083938:	4620      	mov	r0, r4
 808393a:	f7fe fbef 	bl	808211c <HAL_Validate_Pin_Function>
 808393e:	2803      	cmp	r0, #3
 8083940:	d104      	bne.n	808394c <analogRead+0x2a>
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8083942:	4620      	mov	r0, r4
}
 8083944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  if(HAL_Validate_Pin_Function(pin, PF_ADC)!=PF_ADC)
  {
    return LOW;
  }

  return HAL_ADC_Read(pin);
 8083948:	f7fe bc10 	b.w	808216c <HAL_ADC_Read>
}
 808394c:	2000      	movs	r0, #0
 808394e:	bd10      	pop	{r4, pc}

08083950 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8083950:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8083952:	4d0b      	ldr	r5, [pc, #44]	; (8083980 <_Z19__fetch_global_Wirev+0x30>)
 8083954:	6829      	ldr	r1, [r5, #0]
 8083956:	f011 0401 	ands.w	r4, r1, #1
 808395a:	d10f      	bne.n	808397c <_Z19__fetch_global_Wirev+0x2c>
 808395c:	4628      	mov	r0, r5
 808395e:	f7fc fba4 	bl	80800aa <__cxa_guard_acquire>
 8083962:	b158      	cbz	r0, 808397c <_Z19__fetch_global_Wirev+0x2c>
 8083964:	4621      	mov	r1, r4
 8083966:	4807      	ldr	r0, [pc, #28]	; (8083984 <_Z19__fetch_global_Wirev+0x34>)
 8083968:	f7ff f942 	bl	8082bf0 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808396c:	4628      	mov	r0, r5
 808396e:	f7fc fba1 	bl	80800b4 <__cxa_guard_release>
 8083972:	4a05      	ldr	r2, [pc, #20]	; (8083988 <_Z19__fetch_global_Wirev+0x38>)
 8083974:	4905      	ldr	r1, [pc, #20]	; (808398c <_Z19__fetch_global_Wirev+0x3c>)
 8083976:	4803      	ldr	r0, [pc, #12]	; (8083984 <_Z19__fetch_global_Wirev+0x34>)
 8083978:	f000 f850 	bl	8083a1c <__aeabi_atexit>
	return wire;
}
 808397c:	4801      	ldr	r0, [pc, #4]	; (8083984 <_Z19__fetch_global_Wirev+0x34>)
 808397e:	bd38      	pop	{r3, r4, r5, pc}
 8083980:	20000de4 	.word	0x20000de4
 8083984:	20000de8 	.word	0x20000de8
 8083988:	200004f8 	.word	0x200004f8
 808398c:	08082b99 	.word	0x08082b99

08083990 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8083990:	b513      	push	{r0, r1, r4, lr}
 8083992:	4c08      	ldr	r4, [pc, #32]	; (80839b4 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8083994:	2300      	movs	r3, #0
 8083996:	461a      	mov	r2, r3
 8083998:	4619      	mov	r1, r3
 808399a:	9300      	str	r3, [sp, #0]
 808399c:	4620      	mov	r0, r4
 808399e:	f7ff f97f 	bl	8082ca0 <_ZN9IPAddressC1Ehhhh>
 80839a2:	4620      	mov	r0, r4
 80839a4:	4a04      	ldr	r2, [pc, #16]	; (80839b8 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 80839a6:	4905      	ldr	r1, [pc, #20]	; (80839bc <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 80839a8:	b002      	add	sp, #8
 80839aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80839ae:	f000 b835 	b.w	8083a1c <__aeabi_atexit>
 80839b2:	bf00      	nop
 80839b4:	20000dfc 	.word	0x20000dfc
 80839b8:	200004f8 	.word	0x200004f8
 80839bc:	08082c1d 	.word	0x08082c1d

080839c0 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80839c0:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80839c2:	4e11      	ldr	r6, [pc, #68]	; (8083a08 <_GLOBAL__sub_I_SPI+0x48>)
 80839c4:	4d11      	ldr	r5, [pc, #68]	; (8083a0c <_GLOBAL__sub_I_SPI+0x4c>)
 80839c6:	4c12      	ldr	r4, [pc, #72]	; (8083a10 <_GLOBAL__sub_I_SPI+0x50>)
 80839c8:	2100      	movs	r1, #0
 80839ca:	4630      	mov	r0, r6
 80839cc:	f7ff fa74 	bl	8082eb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80839d0:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80839d2:	4e10      	ldr	r6, [pc, #64]	; (8083a14 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 80839d4:	462a      	mov	r2, r5
 80839d6:	4621      	mov	r1, r4
 80839d8:	f000 f820 	bl	8083a1c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80839dc:	2101      	movs	r1, #1
 80839de:	4630      	mov	r0, r6
 80839e0:	f7ff fa6a 	bl	8082eb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80839e4:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80839e6:	4e0c      	ldr	r6, [pc, #48]	; (8083a18 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 80839e8:	462a      	mov	r2, r5
 80839ea:	4621      	mov	r1, r4
 80839ec:	f000 f816 	bl	8083a1c <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 80839f0:	2102      	movs	r1, #2
 80839f2:	4630      	mov	r0, r6
 80839f4:	f7ff fa60 	bl	8082eb8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 80839f8:	462a      	mov	r2, r5
 80839fa:	4621      	mov	r1, r4
 80839fc:	4630      	mov	r0, r6
 80839fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8083a02:	f000 b80b 	b.w	8083a1c <__aeabi_atexit>
 8083a06:	bf00      	nop
 8083a08:	20000e04 	.word	0x20000e04
 8083a0c:	200004f8 	.word	0x200004f8
 8083a10:	08082ea9 	.word	0x08082ea9
 8083a14:	20000e14 	.word	0x20000e14
 8083a18:	20000e24 	.word	0x20000e24

08083a1c <__aeabi_atexit>:
 8083a1c:	460b      	mov	r3, r1
 8083a1e:	4601      	mov	r1, r0
 8083a20:	4618      	mov	r0, r3
 8083a22:	f000 bf4d 	b.w	80848c0 <__cxa_atexit>

08083a26 <_ZSt25__throw_bad_function_callv>:
 8083a26:	b508      	push	{r3, lr}
 8083a28:	f7fe fd64 	bl	80824f4 <abort>

08083a2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 8083a2c:	4b24      	ldr	r3, [pc, #144]	; (8083ac0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 8083a2e:	681a      	ldr	r2, [r3, #0]
 8083a30:	07d0      	lsls	r0, r2, #31
 8083a32:	bf5c      	itt	pl
 8083a34:	2201      	movpl	r2, #1
 8083a36:	601a      	strpl	r2, [r3, #0]
 8083a38:	4b22      	ldr	r3, [pc, #136]	; (8083ac4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 8083a3a:	681a      	ldr	r2, [r3, #0]
 8083a3c:	07d1      	lsls	r1, r2, #31
 8083a3e:	bf5c      	itt	pl
 8083a40:	2201      	movpl	r2, #1
 8083a42:	601a      	strpl	r2, [r3, #0]
 8083a44:	4b20      	ldr	r3, [pc, #128]	; (8083ac8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 8083a46:	681a      	ldr	r2, [r3, #0]
 8083a48:	07d2      	lsls	r2, r2, #31
 8083a4a:	bf5c      	itt	pl
 8083a4c:	2201      	movpl	r2, #1
 8083a4e:	601a      	strpl	r2, [r3, #0]
 8083a50:	4b1e      	ldr	r3, [pc, #120]	; (8083acc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 8083a52:	681a      	ldr	r2, [r3, #0]
 8083a54:	07d0      	lsls	r0, r2, #31
 8083a56:	bf5c      	itt	pl
 8083a58:	2201      	movpl	r2, #1
 8083a5a:	601a      	strpl	r2, [r3, #0]
 8083a5c:	4b1c      	ldr	r3, [pc, #112]	; (8083ad0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 8083a5e:	681a      	ldr	r2, [r3, #0]
 8083a60:	07d1      	lsls	r1, r2, #31
 8083a62:	bf5c      	itt	pl
 8083a64:	2201      	movpl	r2, #1
 8083a66:	601a      	strpl	r2, [r3, #0]
 8083a68:	4b1a      	ldr	r3, [pc, #104]	; (8083ad4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 8083a6a:	681a      	ldr	r2, [r3, #0]
 8083a6c:	07d2      	lsls	r2, r2, #31
 8083a6e:	bf5c      	itt	pl
 8083a70:	2201      	movpl	r2, #1
 8083a72:	601a      	strpl	r2, [r3, #0]
 8083a74:	4b18      	ldr	r3, [pc, #96]	; (8083ad8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 8083a76:	681a      	ldr	r2, [r3, #0]
 8083a78:	07d0      	lsls	r0, r2, #31
 8083a7a:	bf5c      	itt	pl
 8083a7c:	2201      	movpl	r2, #1
 8083a7e:	601a      	strpl	r2, [r3, #0]
 8083a80:	4b16      	ldr	r3, [pc, #88]	; (8083adc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 8083a82:	681a      	ldr	r2, [r3, #0]
 8083a84:	07d1      	lsls	r1, r2, #31
 8083a86:	bf5c      	itt	pl
 8083a88:	2201      	movpl	r2, #1
 8083a8a:	601a      	strpl	r2, [r3, #0]
 8083a8c:	4b14      	ldr	r3, [pc, #80]	; (8083ae0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8083a8e:	681a      	ldr	r2, [r3, #0]
 8083a90:	07d2      	lsls	r2, r2, #31
 8083a92:	bf5c      	itt	pl
 8083a94:	2201      	movpl	r2, #1
 8083a96:	601a      	strpl	r2, [r3, #0]
 8083a98:	4b12      	ldr	r3, [pc, #72]	; (8083ae4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8083a9a:	681a      	ldr	r2, [r3, #0]
 8083a9c:	07d0      	lsls	r0, r2, #31
 8083a9e:	bf5c      	itt	pl
 8083aa0:	2201      	movpl	r2, #1
 8083aa2:	601a      	strpl	r2, [r3, #0]
 8083aa4:	4b10      	ldr	r3, [pc, #64]	; (8083ae8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8083aa6:	681a      	ldr	r2, [r3, #0]
 8083aa8:	07d1      	lsls	r1, r2, #31
 8083aaa:	bf5c      	itt	pl
 8083aac:	2201      	movpl	r2, #1
 8083aae:	601a      	strpl	r2, [r3, #0]
 8083ab0:	4b0e      	ldr	r3, [pc, #56]	; (8083aec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8083ab2:	681a      	ldr	r2, [r3, #0]
 8083ab4:	07d2      	lsls	r2, r2, #31
 8083ab6:	bf5c      	itt	pl
 8083ab8:	2201      	movpl	r2, #1
 8083aba:	601a      	strpl	r2, [r3, #0]
 8083abc:	4770      	bx	lr
 8083abe:	bf00      	nop
 8083ac0:	20000e60 	.word	0x20000e60
 8083ac4:	20000e5c 	.word	0x20000e5c
 8083ac8:	20000e58 	.word	0x20000e58
 8083acc:	20000e54 	.word	0x20000e54
 8083ad0:	20000e50 	.word	0x20000e50
 8083ad4:	20000e4c 	.word	0x20000e4c
 8083ad8:	20000e48 	.word	0x20000e48
 8083adc:	20000e44 	.word	0x20000e44
 8083ae0:	20000e40 	.word	0x20000e40
 8083ae4:	20000e3c 	.word	0x20000e3c
 8083ae8:	20000e38 	.word	0x20000e38
 8083aec:	20000e34 	.word	0x20000e34

08083af0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083af0:	4b18      	ldr	r3, [pc, #96]	; (8083b54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083af2:	681a      	ldr	r2, [r3, #0]
 8083af4:	07d1      	lsls	r1, r2, #31
 8083af6:	bf5c      	itt	pl
 8083af8:	2201      	movpl	r2, #1
 8083afa:	601a      	strpl	r2, [r3, #0]
 8083afc:	4b16      	ldr	r3, [pc, #88]	; (8083b58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8083afe:	681a      	ldr	r2, [r3, #0]
 8083b00:	07d2      	lsls	r2, r2, #31
 8083b02:	bf5c      	itt	pl
 8083b04:	2201      	movpl	r2, #1
 8083b06:	601a      	strpl	r2, [r3, #0]
 8083b08:	4b14      	ldr	r3, [pc, #80]	; (8083b5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8083b0a:	681a      	ldr	r2, [r3, #0]
 8083b0c:	07d0      	lsls	r0, r2, #31
 8083b0e:	bf5c      	itt	pl
 8083b10:	2201      	movpl	r2, #1
 8083b12:	601a      	strpl	r2, [r3, #0]
 8083b14:	4b12      	ldr	r3, [pc, #72]	; (8083b60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083b16:	681a      	ldr	r2, [r3, #0]
 8083b18:	07d1      	lsls	r1, r2, #31
 8083b1a:	bf5c      	itt	pl
 8083b1c:	2201      	movpl	r2, #1
 8083b1e:	601a      	strpl	r2, [r3, #0]
 8083b20:	4b10      	ldr	r3, [pc, #64]	; (8083b64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083b22:	681a      	ldr	r2, [r3, #0]
 8083b24:	07d2      	lsls	r2, r2, #31
 8083b26:	bf5c      	itt	pl
 8083b28:	2201      	movpl	r2, #1
 8083b2a:	601a      	strpl	r2, [r3, #0]
 8083b2c:	4b0e      	ldr	r3, [pc, #56]	; (8083b68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8083b2e:	681a      	ldr	r2, [r3, #0]
 8083b30:	07d0      	lsls	r0, r2, #31
 8083b32:	bf5c      	itt	pl
 8083b34:	2201      	movpl	r2, #1
 8083b36:	601a      	strpl	r2, [r3, #0]
 8083b38:	4b0c      	ldr	r3, [pc, #48]	; (8083b6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8083b3a:	681a      	ldr	r2, [r3, #0]
 8083b3c:	07d1      	lsls	r1, r2, #31
 8083b3e:	bf5c      	itt	pl
 8083b40:	2201      	movpl	r2, #1
 8083b42:	601a      	strpl	r2, [r3, #0]
 8083b44:	4b0a      	ldr	r3, [pc, #40]	; (8083b70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083b46:	681a      	ldr	r2, [r3, #0]
 8083b48:	07d2      	lsls	r2, r2, #31
 8083b4a:	bf5c      	itt	pl
 8083b4c:	2201      	movpl	r2, #1
 8083b4e:	601a      	strpl	r2, [r3, #0]
 8083b50:	4770      	bx	lr
 8083b52:	bf00      	nop
 8083b54:	20000e80 	.word	0x20000e80
 8083b58:	20000e7c 	.word	0x20000e7c
 8083b5c:	20000e78 	.word	0x20000e78
 8083b60:	20000e74 	.word	0x20000e74
 8083b64:	20000e70 	.word	0x20000e70
 8083b68:	20000e6c 	.word	0x20000e6c
 8083b6c:	20000e68 	.word	0x20000e68
 8083b70:	20000e64 	.word	0x20000e64

08083b74 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083b74:	4b18      	ldr	r3, [pc, #96]	; (8083bd8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083b76:	681a      	ldr	r2, [r3, #0]
 8083b78:	07d1      	lsls	r1, r2, #31
 8083b7a:	bf5c      	itt	pl
 8083b7c:	2201      	movpl	r2, #1
 8083b7e:	601a      	strpl	r2, [r3, #0]
 8083b80:	4b16      	ldr	r3, [pc, #88]	; (8083bdc <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8083b82:	681a      	ldr	r2, [r3, #0]
 8083b84:	07d2      	lsls	r2, r2, #31
 8083b86:	bf5c      	itt	pl
 8083b88:	2201      	movpl	r2, #1
 8083b8a:	601a      	strpl	r2, [r3, #0]
 8083b8c:	4b14      	ldr	r3, [pc, #80]	; (8083be0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8083b8e:	681a      	ldr	r2, [r3, #0]
 8083b90:	07d0      	lsls	r0, r2, #31
 8083b92:	bf5c      	itt	pl
 8083b94:	2201      	movpl	r2, #1
 8083b96:	601a      	strpl	r2, [r3, #0]
 8083b98:	4b12      	ldr	r3, [pc, #72]	; (8083be4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083b9a:	681a      	ldr	r2, [r3, #0]
 8083b9c:	07d1      	lsls	r1, r2, #31
 8083b9e:	bf5c      	itt	pl
 8083ba0:	2201      	movpl	r2, #1
 8083ba2:	601a      	strpl	r2, [r3, #0]
 8083ba4:	4b10      	ldr	r3, [pc, #64]	; (8083be8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083ba6:	681a      	ldr	r2, [r3, #0]
 8083ba8:	07d2      	lsls	r2, r2, #31
 8083baa:	bf5c      	itt	pl
 8083bac:	2201      	movpl	r2, #1
 8083bae:	601a      	strpl	r2, [r3, #0]
 8083bb0:	4b0e      	ldr	r3, [pc, #56]	; (8083bec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8083bb2:	681a      	ldr	r2, [r3, #0]
 8083bb4:	07d0      	lsls	r0, r2, #31
 8083bb6:	bf5c      	itt	pl
 8083bb8:	2201      	movpl	r2, #1
 8083bba:	601a      	strpl	r2, [r3, #0]
 8083bbc:	4b0c      	ldr	r3, [pc, #48]	; (8083bf0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8083bbe:	681a      	ldr	r2, [r3, #0]
 8083bc0:	07d1      	lsls	r1, r2, #31
 8083bc2:	bf5c      	itt	pl
 8083bc4:	2201      	movpl	r2, #1
 8083bc6:	601a      	strpl	r2, [r3, #0]
 8083bc8:	4b0a      	ldr	r3, [pc, #40]	; (8083bf4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083bca:	681a      	ldr	r2, [r3, #0]
 8083bcc:	07d2      	lsls	r2, r2, #31
 8083bce:	bf5c      	itt	pl
 8083bd0:	2201      	movpl	r2, #1
 8083bd2:	601a      	strpl	r2, [r3, #0]
 8083bd4:	4770      	bx	lr
 8083bd6:	bf00      	nop
 8083bd8:	20000ea0 	.word	0x20000ea0
 8083bdc:	20000e9c 	.word	0x20000e9c
 8083be0:	20000e98 	.word	0x20000e98
 8083be4:	20000e94 	.word	0x20000e94
 8083be8:	20000e90 	.word	0x20000e90
 8083bec:	20000e8c 	.word	0x20000e8c
 8083bf0:	20000e88 	.word	0x20000e88
 8083bf4:	20000e84 	.word	0x20000e84

08083bf8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8083bf8:	4b24      	ldr	r3, [pc, #144]	; (8083c8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8083bfa:	681a      	ldr	r2, [r3, #0]
 8083bfc:	07d0      	lsls	r0, r2, #31
 8083bfe:	bf5c      	itt	pl
 8083c00:	2201      	movpl	r2, #1
 8083c02:	601a      	strpl	r2, [r3, #0]
 8083c04:	4b22      	ldr	r3, [pc, #136]	; (8083c90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8083c06:	681a      	ldr	r2, [r3, #0]
 8083c08:	07d1      	lsls	r1, r2, #31
 8083c0a:	bf5c      	itt	pl
 8083c0c:	2201      	movpl	r2, #1
 8083c0e:	601a      	strpl	r2, [r3, #0]
 8083c10:	4b20      	ldr	r3, [pc, #128]	; (8083c94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8083c12:	681a      	ldr	r2, [r3, #0]
 8083c14:	07d2      	lsls	r2, r2, #31
 8083c16:	bf5c      	itt	pl
 8083c18:	2201      	movpl	r2, #1
 8083c1a:	601a      	strpl	r2, [r3, #0]
 8083c1c:	4b1e      	ldr	r3, [pc, #120]	; (8083c98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8083c1e:	681a      	ldr	r2, [r3, #0]
 8083c20:	07d0      	lsls	r0, r2, #31
 8083c22:	bf5c      	itt	pl
 8083c24:	2201      	movpl	r2, #1
 8083c26:	601a      	strpl	r2, [r3, #0]
 8083c28:	4b1c      	ldr	r3, [pc, #112]	; (8083c9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 8083c2a:	681a      	ldr	r2, [r3, #0]
 8083c2c:	07d1      	lsls	r1, r2, #31
 8083c2e:	bf5c      	itt	pl
 8083c30:	2201      	movpl	r2, #1
 8083c32:	601a      	strpl	r2, [r3, #0]
 8083c34:	4b1a      	ldr	r3, [pc, #104]	; (8083ca0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 8083c36:	681a      	ldr	r2, [r3, #0]
 8083c38:	07d2      	lsls	r2, r2, #31
 8083c3a:	bf5c      	itt	pl
 8083c3c:	2201      	movpl	r2, #1
 8083c3e:	601a      	strpl	r2, [r3, #0]
 8083c40:	4b18      	ldr	r3, [pc, #96]	; (8083ca4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 8083c42:	681a      	ldr	r2, [r3, #0]
 8083c44:	07d0      	lsls	r0, r2, #31
 8083c46:	bf5c      	itt	pl
 8083c48:	2201      	movpl	r2, #1
 8083c4a:	601a      	strpl	r2, [r3, #0]
 8083c4c:	4b16      	ldr	r3, [pc, #88]	; (8083ca8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 8083c4e:	681a      	ldr	r2, [r3, #0]
 8083c50:	07d1      	lsls	r1, r2, #31
 8083c52:	bf5c      	itt	pl
 8083c54:	2201      	movpl	r2, #1
 8083c56:	601a      	strpl	r2, [r3, #0]
 8083c58:	4b14      	ldr	r3, [pc, #80]	; (8083cac <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 8083c5a:	681a      	ldr	r2, [r3, #0]
 8083c5c:	07d2      	lsls	r2, r2, #31
 8083c5e:	bf5c      	itt	pl
 8083c60:	2201      	movpl	r2, #1
 8083c62:	601a      	strpl	r2, [r3, #0]
 8083c64:	4b12      	ldr	r3, [pc, #72]	; (8083cb0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 8083c66:	681a      	ldr	r2, [r3, #0]
 8083c68:	07d0      	lsls	r0, r2, #31
 8083c6a:	bf5c      	itt	pl
 8083c6c:	2201      	movpl	r2, #1
 8083c6e:	601a      	strpl	r2, [r3, #0]
 8083c70:	4b10      	ldr	r3, [pc, #64]	; (8083cb4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 8083c72:	681a      	ldr	r2, [r3, #0]
 8083c74:	07d1      	lsls	r1, r2, #31
 8083c76:	bf5c      	itt	pl
 8083c78:	2201      	movpl	r2, #1
 8083c7a:	601a      	strpl	r2, [r3, #0]
 8083c7c:	4b0e      	ldr	r3, [pc, #56]	; (8083cb8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 8083c7e:	681a      	ldr	r2, [r3, #0]
 8083c80:	07d2      	lsls	r2, r2, #31
 8083c82:	bf5c      	itt	pl
 8083c84:	2201      	movpl	r2, #1
 8083c86:	601a      	strpl	r2, [r3, #0]
 8083c88:	4770      	bx	lr
 8083c8a:	bf00      	nop
 8083c8c:	20000ed0 	.word	0x20000ed0
 8083c90:	20000ecc 	.word	0x20000ecc
 8083c94:	20000ec8 	.word	0x20000ec8
 8083c98:	20000ec4 	.word	0x20000ec4
 8083c9c:	20000ec0 	.word	0x20000ec0
 8083ca0:	20000ebc 	.word	0x20000ebc
 8083ca4:	20000eb8 	.word	0x20000eb8
 8083ca8:	20000eb4 	.word	0x20000eb4
 8083cac:	20000eb0 	.word	0x20000eb0
 8083cb0:	20000eac 	.word	0x20000eac
 8083cb4:	20000ea8 	.word	0x20000ea8
 8083cb8:	20000ea4 	.word	0x20000ea4

08083cbc <__aeabi_drsub>:
 8083cbc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8083cc0:	e002      	b.n	8083cc8 <__adddf3>
 8083cc2:	bf00      	nop

08083cc4 <__aeabi_dsub>:
 8083cc4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08083cc8 <__adddf3>:
 8083cc8:	b530      	push	{r4, r5, lr}
 8083cca:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8083cce:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8083cd2:	ea94 0f05 	teq	r4, r5
 8083cd6:	bf08      	it	eq
 8083cd8:	ea90 0f02 	teqeq	r0, r2
 8083cdc:	bf1f      	itttt	ne
 8083cde:	ea54 0c00 	orrsne.w	ip, r4, r0
 8083ce2:	ea55 0c02 	orrsne.w	ip, r5, r2
 8083ce6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8083cea:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083cee:	f000 80e2 	beq.w	8083eb6 <__adddf3+0x1ee>
 8083cf2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8083cf6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8083cfa:	bfb8      	it	lt
 8083cfc:	426d      	neglt	r5, r5
 8083cfe:	dd0c      	ble.n	8083d1a <__adddf3+0x52>
 8083d00:	442c      	add	r4, r5
 8083d02:	ea80 0202 	eor.w	r2, r0, r2
 8083d06:	ea81 0303 	eor.w	r3, r1, r3
 8083d0a:	ea82 0000 	eor.w	r0, r2, r0
 8083d0e:	ea83 0101 	eor.w	r1, r3, r1
 8083d12:	ea80 0202 	eor.w	r2, r0, r2
 8083d16:	ea81 0303 	eor.w	r3, r1, r3
 8083d1a:	2d36      	cmp	r5, #54	; 0x36
 8083d1c:	bf88      	it	hi
 8083d1e:	bd30      	pophi	{r4, r5, pc}
 8083d20:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083d24:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083d28:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8083d2c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8083d30:	d002      	beq.n	8083d38 <__adddf3+0x70>
 8083d32:	4240      	negs	r0, r0
 8083d34:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083d38:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8083d3c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083d40:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8083d44:	d002      	beq.n	8083d4c <__adddf3+0x84>
 8083d46:	4252      	negs	r2, r2
 8083d48:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8083d4c:	ea94 0f05 	teq	r4, r5
 8083d50:	f000 80a7 	beq.w	8083ea2 <__adddf3+0x1da>
 8083d54:	f1a4 0401 	sub.w	r4, r4, #1
 8083d58:	f1d5 0e20 	rsbs	lr, r5, #32
 8083d5c:	db0d      	blt.n	8083d7a <__adddf3+0xb2>
 8083d5e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8083d62:	fa22 f205 	lsr.w	r2, r2, r5
 8083d66:	1880      	adds	r0, r0, r2
 8083d68:	f141 0100 	adc.w	r1, r1, #0
 8083d6c:	fa03 f20e 	lsl.w	r2, r3, lr
 8083d70:	1880      	adds	r0, r0, r2
 8083d72:	fa43 f305 	asr.w	r3, r3, r5
 8083d76:	4159      	adcs	r1, r3
 8083d78:	e00e      	b.n	8083d98 <__adddf3+0xd0>
 8083d7a:	f1a5 0520 	sub.w	r5, r5, #32
 8083d7e:	f10e 0e20 	add.w	lr, lr, #32
 8083d82:	2a01      	cmp	r2, #1
 8083d84:	fa03 fc0e 	lsl.w	ip, r3, lr
 8083d88:	bf28      	it	cs
 8083d8a:	f04c 0c02 	orrcs.w	ip, ip, #2
 8083d8e:	fa43 f305 	asr.w	r3, r3, r5
 8083d92:	18c0      	adds	r0, r0, r3
 8083d94:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8083d98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083d9c:	d507      	bpl.n	8083dae <__adddf3+0xe6>
 8083d9e:	f04f 0e00 	mov.w	lr, #0
 8083da2:	f1dc 0c00 	rsbs	ip, ip, #0
 8083da6:	eb7e 0000 	sbcs.w	r0, lr, r0
 8083daa:	eb6e 0101 	sbc.w	r1, lr, r1
 8083dae:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8083db2:	d31b      	bcc.n	8083dec <__adddf3+0x124>
 8083db4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8083db8:	d30c      	bcc.n	8083dd4 <__adddf3+0x10c>
 8083dba:	0849      	lsrs	r1, r1, #1
 8083dbc:	ea5f 0030 	movs.w	r0, r0, rrx
 8083dc0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8083dc4:	f104 0401 	add.w	r4, r4, #1
 8083dc8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8083dcc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8083dd0:	f080 809a 	bcs.w	8083f08 <__adddf3+0x240>
 8083dd4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083dd8:	bf08      	it	eq
 8083dda:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083dde:	f150 0000 	adcs.w	r0, r0, #0
 8083de2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083de6:	ea41 0105 	orr.w	r1, r1, r5
 8083dea:	bd30      	pop	{r4, r5, pc}
 8083dec:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8083df0:	4140      	adcs	r0, r0
 8083df2:	eb41 0101 	adc.w	r1, r1, r1
 8083df6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083dfa:	f1a4 0401 	sub.w	r4, r4, #1
 8083dfe:	d1e9      	bne.n	8083dd4 <__adddf3+0x10c>
 8083e00:	f091 0f00 	teq	r1, #0
 8083e04:	bf04      	itt	eq
 8083e06:	4601      	moveq	r1, r0
 8083e08:	2000      	moveq	r0, #0
 8083e0a:	fab1 f381 	clz	r3, r1
 8083e0e:	bf08      	it	eq
 8083e10:	3320      	addeq	r3, #32
 8083e12:	f1a3 030b 	sub.w	r3, r3, #11
 8083e16:	f1b3 0220 	subs.w	r2, r3, #32
 8083e1a:	da0c      	bge.n	8083e36 <__adddf3+0x16e>
 8083e1c:	320c      	adds	r2, #12
 8083e1e:	dd08      	ble.n	8083e32 <__adddf3+0x16a>
 8083e20:	f102 0c14 	add.w	ip, r2, #20
 8083e24:	f1c2 020c 	rsb	r2, r2, #12
 8083e28:	fa01 f00c 	lsl.w	r0, r1, ip
 8083e2c:	fa21 f102 	lsr.w	r1, r1, r2
 8083e30:	e00c      	b.n	8083e4c <__adddf3+0x184>
 8083e32:	f102 0214 	add.w	r2, r2, #20
 8083e36:	bfd8      	it	le
 8083e38:	f1c2 0c20 	rsble	ip, r2, #32
 8083e3c:	fa01 f102 	lsl.w	r1, r1, r2
 8083e40:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083e44:	bfdc      	itt	le
 8083e46:	ea41 010c 	orrle.w	r1, r1, ip
 8083e4a:	4090      	lslle	r0, r2
 8083e4c:	1ae4      	subs	r4, r4, r3
 8083e4e:	bfa2      	ittt	ge
 8083e50:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8083e54:	4329      	orrge	r1, r5
 8083e56:	bd30      	popge	{r4, r5, pc}
 8083e58:	ea6f 0404 	mvn.w	r4, r4
 8083e5c:	3c1f      	subs	r4, #31
 8083e5e:	da1c      	bge.n	8083e9a <__adddf3+0x1d2>
 8083e60:	340c      	adds	r4, #12
 8083e62:	dc0e      	bgt.n	8083e82 <__adddf3+0x1ba>
 8083e64:	f104 0414 	add.w	r4, r4, #20
 8083e68:	f1c4 0220 	rsb	r2, r4, #32
 8083e6c:	fa20 f004 	lsr.w	r0, r0, r4
 8083e70:	fa01 f302 	lsl.w	r3, r1, r2
 8083e74:	ea40 0003 	orr.w	r0, r0, r3
 8083e78:	fa21 f304 	lsr.w	r3, r1, r4
 8083e7c:	ea45 0103 	orr.w	r1, r5, r3
 8083e80:	bd30      	pop	{r4, r5, pc}
 8083e82:	f1c4 040c 	rsb	r4, r4, #12
 8083e86:	f1c4 0220 	rsb	r2, r4, #32
 8083e8a:	fa20 f002 	lsr.w	r0, r0, r2
 8083e8e:	fa01 f304 	lsl.w	r3, r1, r4
 8083e92:	ea40 0003 	orr.w	r0, r0, r3
 8083e96:	4629      	mov	r1, r5
 8083e98:	bd30      	pop	{r4, r5, pc}
 8083e9a:	fa21 f004 	lsr.w	r0, r1, r4
 8083e9e:	4629      	mov	r1, r5
 8083ea0:	bd30      	pop	{r4, r5, pc}
 8083ea2:	f094 0f00 	teq	r4, #0
 8083ea6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8083eaa:	bf06      	itte	eq
 8083eac:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8083eb0:	3401      	addeq	r4, #1
 8083eb2:	3d01      	subne	r5, #1
 8083eb4:	e74e      	b.n	8083d54 <__adddf3+0x8c>
 8083eb6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083eba:	bf18      	it	ne
 8083ebc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083ec0:	d029      	beq.n	8083f16 <__adddf3+0x24e>
 8083ec2:	ea94 0f05 	teq	r4, r5
 8083ec6:	bf08      	it	eq
 8083ec8:	ea90 0f02 	teqeq	r0, r2
 8083ecc:	d005      	beq.n	8083eda <__adddf3+0x212>
 8083ece:	ea54 0c00 	orrs.w	ip, r4, r0
 8083ed2:	bf04      	itt	eq
 8083ed4:	4619      	moveq	r1, r3
 8083ed6:	4610      	moveq	r0, r2
 8083ed8:	bd30      	pop	{r4, r5, pc}
 8083eda:	ea91 0f03 	teq	r1, r3
 8083ede:	bf1e      	ittt	ne
 8083ee0:	2100      	movne	r1, #0
 8083ee2:	2000      	movne	r0, #0
 8083ee4:	bd30      	popne	{r4, r5, pc}
 8083ee6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8083eea:	d105      	bne.n	8083ef8 <__adddf3+0x230>
 8083eec:	0040      	lsls	r0, r0, #1
 8083eee:	4149      	adcs	r1, r1
 8083ef0:	bf28      	it	cs
 8083ef2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8083ef6:	bd30      	pop	{r4, r5, pc}
 8083ef8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8083efc:	bf3c      	itt	cc
 8083efe:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8083f02:	bd30      	popcc	{r4, r5, pc}
 8083f04:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083f08:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8083f0c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083f10:	f04f 0000 	mov.w	r0, #0
 8083f14:	bd30      	pop	{r4, r5, pc}
 8083f16:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083f1a:	bf1a      	itte	ne
 8083f1c:	4619      	movne	r1, r3
 8083f1e:	4610      	movne	r0, r2
 8083f20:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083f24:	bf1c      	itt	ne
 8083f26:	460b      	movne	r3, r1
 8083f28:	4602      	movne	r2, r0
 8083f2a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083f2e:	bf06      	itte	eq
 8083f30:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083f34:	ea91 0f03 	teqeq	r1, r3
 8083f38:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083f3c:	bd30      	pop	{r4, r5, pc}
 8083f3e:	bf00      	nop

08083f40 <__aeabi_ui2d>:
 8083f40:	f090 0f00 	teq	r0, #0
 8083f44:	bf04      	itt	eq
 8083f46:	2100      	moveq	r1, #0
 8083f48:	4770      	bxeq	lr
 8083f4a:	b530      	push	{r4, r5, lr}
 8083f4c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083f50:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083f54:	f04f 0500 	mov.w	r5, #0
 8083f58:	f04f 0100 	mov.w	r1, #0
 8083f5c:	e750      	b.n	8083e00 <__adddf3+0x138>
 8083f5e:	bf00      	nop

08083f60 <__aeabi_i2d>:
 8083f60:	f090 0f00 	teq	r0, #0
 8083f64:	bf04      	itt	eq
 8083f66:	2100      	moveq	r1, #0
 8083f68:	4770      	bxeq	lr
 8083f6a:	b530      	push	{r4, r5, lr}
 8083f6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083f70:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083f74:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083f78:	bf48      	it	mi
 8083f7a:	4240      	negmi	r0, r0
 8083f7c:	f04f 0100 	mov.w	r1, #0
 8083f80:	e73e      	b.n	8083e00 <__adddf3+0x138>
 8083f82:	bf00      	nop

08083f84 <__aeabi_f2d>:
 8083f84:	0042      	lsls	r2, r0, #1
 8083f86:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8083f8a:	ea4f 0131 	mov.w	r1, r1, rrx
 8083f8e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8083f92:	bf1f      	itttt	ne
 8083f94:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083f98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083f9c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083fa0:	4770      	bxne	lr
 8083fa2:	f092 0f00 	teq	r2, #0
 8083fa6:	bf14      	ite	ne
 8083fa8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083fac:	4770      	bxeq	lr
 8083fae:	b530      	push	{r4, r5, lr}
 8083fb0:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083fb4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083fb8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083fbc:	e720      	b.n	8083e00 <__adddf3+0x138>
 8083fbe:	bf00      	nop

08083fc0 <__aeabi_ul2d>:
 8083fc0:	ea50 0201 	orrs.w	r2, r0, r1
 8083fc4:	bf08      	it	eq
 8083fc6:	4770      	bxeq	lr
 8083fc8:	b530      	push	{r4, r5, lr}
 8083fca:	f04f 0500 	mov.w	r5, #0
 8083fce:	e00a      	b.n	8083fe6 <__aeabi_l2d+0x16>

08083fd0 <__aeabi_l2d>:
 8083fd0:	ea50 0201 	orrs.w	r2, r0, r1
 8083fd4:	bf08      	it	eq
 8083fd6:	4770      	bxeq	lr
 8083fd8:	b530      	push	{r4, r5, lr}
 8083fda:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8083fde:	d502      	bpl.n	8083fe6 <__aeabi_l2d+0x16>
 8083fe0:	4240      	negs	r0, r0
 8083fe2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083fe6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083fea:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083fee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8083ff2:	f43f aedc 	beq.w	8083dae <__adddf3+0xe6>
 8083ff6:	f04f 0203 	mov.w	r2, #3
 8083ffa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083ffe:	bf18      	it	ne
 8084000:	3203      	addne	r2, #3
 8084002:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8084006:	bf18      	it	ne
 8084008:	3203      	addne	r2, #3
 808400a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 808400e:	f1c2 0320 	rsb	r3, r2, #32
 8084012:	fa00 fc03 	lsl.w	ip, r0, r3
 8084016:	fa20 f002 	lsr.w	r0, r0, r2
 808401a:	fa01 fe03 	lsl.w	lr, r1, r3
 808401e:	ea40 000e 	orr.w	r0, r0, lr
 8084022:	fa21 f102 	lsr.w	r1, r1, r2
 8084026:	4414      	add	r4, r2
 8084028:	e6c1      	b.n	8083dae <__adddf3+0xe6>
 808402a:	bf00      	nop

0808402c <__aeabi_dmul>:
 808402c:	b570      	push	{r4, r5, r6, lr}
 808402e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084032:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8084036:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808403a:	bf1d      	ittte	ne
 808403c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8084040:	ea94 0f0c 	teqne	r4, ip
 8084044:	ea95 0f0c 	teqne	r5, ip
 8084048:	f000 f8de 	bleq	8084208 <__aeabi_dmul+0x1dc>
 808404c:	442c      	add	r4, r5
 808404e:	ea81 0603 	eor.w	r6, r1, r3
 8084052:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8084056:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 808405a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 808405e:	bf18      	it	ne
 8084060:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8084064:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 808406c:	d038      	beq.n	80840e0 <__aeabi_dmul+0xb4>
 808406e:	fba0 ce02 	umull	ip, lr, r0, r2
 8084072:	f04f 0500 	mov.w	r5, #0
 8084076:	fbe1 e502 	umlal	lr, r5, r1, r2
 808407a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 808407e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8084082:	f04f 0600 	mov.w	r6, #0
 8084086:	fbe1 5603 	umlal	r5, r6, r1, r3
 808408a:	f09c 0f00 	teq	ip, #0
 808408e:	bf18      	it	ne
 8084090:	f04e 0e01 	orrne.w	lr, lr, #1
 8084094:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8084098:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 808409c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80840a0:	d204      	bcs.n	80840ac <__aeabi_dmul+0x80>
 80840a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80840a6:	416d      	adcs	r5, r5
 80840a8:	eb46 0606 	adc.w	r6, r6, r6
 80840ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80840b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80840b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80840b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80840bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80840c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80840c4:	bf88      	it	hi
 80840c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80840ca:	d81e      	bhi.n	808410a <__aeabi_dmul+0xde>
 80840cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80840d0:	bf08      	it	eq
 80840d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80840d6:	f150 0000 	adcs.w	r0, r0, #0
 80840da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80840de:	bd70      	pop	{r4, r5, r6, pc}
 80840e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80840e4:	ea46 0101 	orr.w	r1, r6, r1
 80840e8:	ea40 0002 	orr.w	r0, r0, r2
 80840ec:	ea81 0103 	eor.w	r1, r1, r3
 80840f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80840f4:	bfc2      	ittt	gt
 80840f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80840fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80840fe:	bd70      	popgt	{r4, r5, r6, pc}
 8084100:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084104:	f04f 0e00 	mov.w	lr, #0
 8084108:	3c01      	subs	r4, #1
 808410a:	f300 80ab 	bgt.w	8084264 <__aeabi_dmul+0x238>
 808410e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8084112:	bfde      	ittt	le
 8084114:	2000      	movle	r0, #0
 8084116:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 808411a:	bd70      	pople	{r4, r5, r6, pc}
 808411c:	f1c4 0400 	rsb	r4, r4, #0
 8084120:	3c20      	subs	r4, #32
 8084122:	da35      	bge.n	8084190 <__aeabi_dmul+0x164>
 8084124:	340c      	adds	r4, #12
 8084126:	dc1b      	bgt.n	8084160 <__aeabi_dmul+0x134>
 8084128:	f104 0414 	add.w	r4, r4, #20
 808412c:	f1c4 0520 	rsb	r5, r4, #32
 8084130:	fa00 f305 	lsl.w	r3, r0, r5
 8084134:	fa20 f004 	lsr.w	r0, r0, r4
 8084138:	fa01 f205 	lsl.w	r2, r1, r5
 808413c:	ea40 0002 	orr.w	r0, r0, r2
 8084140:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8084144:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8084148:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 808414c:	fa21 f604 	lsr.w	r6, r1, r4
 8084150:	eb42 0106 	adc.w	r1, r2, r6
 8084154:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8084158:	bf08      	it	eq
 808415a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808415e:	bd70      	pop	{r4, r5, r6, pc}
 8084160:	f1c4 040c 	rsb	r4, r4, #12
 8084164:	f1c4 0520 	rsb	r5, r4, #32
 8084168:	fa00 f304 	lsl.w	r3, r0, r4
 808416c:	fa20 f005 	lsr.w	r0, r0, r5
 8084170:	fa01 f204 	lsl.w	r2, r1, r4
 8084174:	ea40 0002 	orr.w	r0, r0, r2
 8084178:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808417c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8084180:	f141 0100 	adc.w	r1, r1, #0
 8084184:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8084188:	bf08      	it	eq
 808418a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 808418e:	bd70      	pop	{r4, r5, r6, pc}
 8084190:	f1c4 0520 	rsb	r5, r4, #32
 8084194:	fa00 f205 	lsl.w	r2, r0, r5
 8084198:	ea4e 0e02 	orr.w	lr, lr, r2
 808419c:	fa20 f304 	lsr.w	r3, r0, r4
 80841a0:	fa01 f205 	lsl.w	r2, r1, r5
 80841a4:	ea43 0302 	orr.w	r3, r3, r2
 80841a8:	fa21 f004 	lsr.w	r0, r1, r4
 80841ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80841b0:	fa21 f204 	lsr.w	r2, r1, r4
 80841b4:	ea20 0002 	bic.w	r0, r0, r2
 80841b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80841bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80841c0:	bf08      	it	eq
 80841c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80841c6:	bd70      	pop	{r4, r5, r6, pc}
 80841c8:	f094 0f00 	teq	r4, #0
 80841cc:	d10f      	bne.n	80841ee <__aeabi_dmul+0x1c2>
 80841ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80841d2:	0040      	lsls	r0, r0, #1
 80841d4:	eb41 0101 	adc.w	r1, r1, r1
 80841d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80841dc:	bf08      	it	eq
 80841de:	3c01      	subeq	r4, #1
 80841e0:	d0f7      	beq.n	80841d2 <__aeabi_dmul+0x1a6>
 80841e2:	ea41 0106 	orr.w	r1, r1, r6
 80841e6:	f095 0f00 	teq	r5, #0
 80841ea:	bf18      	it	ne
 80841ec:	4770      	bxne	lr
 80841ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80841f2:	0052      	lsls	r2, r2, #1
 80841f4:	eb43 0303 	adc.w	r3, r3, r3
 80841f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80841fc:	bf08      	it	eq
 80841fe:	3d01      	subeq	r5, #1
 8084200:	d0f7      	beq.n	80841f2 <__aeabi_dmul+0x1c6>
 8084202:	ea43 0306 	orr.w	r3, r3, r6
 8084206:	4770      	bx	lr
 8084208:	ea94 0f0c 	teq	r4, ip
 808420c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8084210:	bf18      	it	ne
 8084212:	ea95 0f0c 	teqne	r5, ip
 8084216:	d00c      	beq.n	8084232 <__aeabi_dmul+0x206>
 8084218:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 808421c:	bf18      	it	ne
 808421e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084222:	d1d1      	bne.n	80841c8 <__aeabi_dmul+0x19c>
 8084224:	ea81 0103 	eor.w	r1, r1, r3
 8084228:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 808422c:	f04f 0000 	mov.w	r0, #0
 8084230:	bd70      	pop	{r4, r5, r6, pc}
 8084232:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084236:	bf06      	itte	eq
 8084238:	4610      	moveq	r0, r2
 808423a:	4619      	moveq	r1, r3
 808423c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8084240:	d019      	beq.n	8084276 <__aeabi_dmul+0x24a>
 8084242:	ea94 0f0c 	teq	r4, ip
 8084246:	d102      	bne.n	808424e <__aeabi_dmul+0x222>
 8084248:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 808424c:	d113      	bne.n	8084276 <__aeabi_dmul+0x24a>
 808424e:	ea95 0f0c 	teq	r5, ip
 8084252:	d105      	bne.n	8084260 <__aeabi_dmul+0x234>
 8084254:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8084258:	bf1c      	itt	ne
 808425a:	4610      	movne	r0, r2
 808425c:	4619      	movne	r1, r3
 808425e:	d10a      	bne.n	8084276 <__aeabi_dmul+0x24a>
 8084260:	ea81 0103 	eor.w	r1, r1, r3
 8084264:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8084268:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808426c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8084270:	f04f 0000 	mov.w	r0, #0
 8084274:	bd70      	pop	{r4, r5, r6, pc}
 8084276:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 808427a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 808427e:	bd70      	pop	{r4, r5, r6, pc}

08084280 <__aeabi_ddiv>:
 8084280:	b570      	push	{r4, r5, r6, lr}
 8084282:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084286:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 808428a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 808428e:	bf1d      	ittte	ne
 8084290:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8084294:	ea94 0f0c 	teqne	r4, ip
 8084298:	ea95 0f0c 	teqne	r5, ip
 808429c:	f000 f8a7 	bleq	80843ee <__aeabi_ddiv+0x16e>
 80842a0:	eba4 0405 	sub.w	r4, r4, r5
 80842a4:	ea81 0e03 	eor.w	lr, r1, r3
 80842a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80842ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80842b0:	f000 8088 	beq.w	80843c4 <__aeabi_ddiv+0x144>
 80842b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80842b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80842bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80842c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80842c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80842c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80842cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80842d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80842d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80842d8:	429d      	cmp	r5, r3
 80842da:	bf08      	it	eq
 80842dc:	4296      	cmpeq	r6, r2
 80842de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80842e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80842e6:	d202      	bcs.n	80842ee <__aeabi_ddiv+0x6e>
 80842e8:	085b      	lsrs	r3, r3, #1
 80842ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80842ee:	1ab6      	subs	r6, r6, r2
 80842f0:	eb65 0503 	sbc.w	r5, r5, r3
 80842f4:	085b      	lsrs	r3, r3, #1
 80842f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80842fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80842fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8084302:	ebb6 0e02 	subs.w	lr, r6, r2
 8084306:	eb75 0e03 	sbcs.w	lr, r5, r3
 808430a:	bf22      	ittt	cs
 808430c:	1ab6      	subcs	r6, r6, r2
 808430e:	4675      	movcs	r5, lr
 8084310:	ea40 000c 	orrcs.w	r0, r0, ip
 8084314:	085b      	lsrs	r3, r3, #1
 8084316:	ea4f 0232 	mov.w	r2, r2, rrx
 808431a:	ebb6 0e02 	subs.w	lr, r6, r2
 808431e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084322:	bf22      	ittt	cs
 8084324:	1ab6      	subcs	r6, r6, r2
 8084326:	4675      	movcs	r5, lr
 8084328:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808432c:	085b      	lsrs	r3, r3, #1
 808432e:	ea4f 0232 	mov.w	r2, r2, rrx
 8084332:	ebb6 0e02 	subs.w	lr, r6, r2
 8084336:	eb75 0e03 	sbcs.w	lr, r5, r3
 808433a:	bf22      	ittt	cs
 808433c:	1ab6      	subcs	r6, r6, r2
 808433e:	4675      	movcs	r5, lr
 8084340:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084344:	085b      	lsrs	r3, r3, #1
 8084346:	ea4f 0232 	mov.w	r2, r2, rrx
 808434a:	ebb6 0e02 	subs.w	lr, r6, r2
 808434e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8084352:	bf22      	ittt	cs
 8084354:	1ab6      	subcs	r6, r6, r2
 8084356:	4675      	movcs	r5, lr
 8084358:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808435c:	ea55 0e06 	orrs.w	lr, r5, r6
 8084360:	d018      	beq.n	8084394 <__aeabi_ddiv+0x114>
 8084362:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8084366:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 808436a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 808436e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8084372:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8084376:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 808437a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 808437e:	d1c0      	bne.n	8084302 <__aeabi_ddiv+0x82>
 8084380:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084384:	d10b      	bne.n	808439e <__aeabi_ddiv+0x11e>
 8084386:	ea41 0100 	orr.w	r1, r1, r0
 808438a:	f04f 0000 	mov.w	r0, #0
 808438e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8084392:	e7b6      	b.n	8084302 <__aeabi_ddiv+0x82>
 8084394:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084398:	bf04      	itt	eq
 808439a:	4301      	orreq	r1, r0
 808439c:	2000      	moveq	r0, #0
 808439e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80843a2:	bf88      	it	hi
 80843a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80843a8:	f63f aeaf 	bhi.w	808410a <__aeabi_dmul+0xde>
 80843ac:	ebb5 0c03 	subs.w	ip, r5, r3
 80843b0:	bf04      	itt	eq
 80843b2:	ebb6 0c02 	subseq.w	ip, r6, r2
 80843b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80843ba:	f150 0000 	adcs.w	r0, r0, #0
 80843be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80843c2:	bd70      	pop	{r4, r5, r6, pc}
 80843c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80843c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80843cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80843d0:	bfc2      	ittt	gt
 80843d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80843d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80843da:	bd70      	popgt	{r4, r5, r6, pc}
 80843dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80843e0:	f04f 0e00 	mov.w	lr, #0
 80843e4:	3c01      	subs	r4, #1
 80843e6:	e690      	b.n	808410a <__aeabi_dmul+0xde>
 80843e8:	ea45 0e06 	orr.w	lr, r5, r6
 80843ec:	e68d      	b.n	808410a <__aeabi_dmul+0xde>
 80843ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80843f2:	ea94 0f0c 	teq	r4, ip
 80843f6:	bf08      	it	eq
 80843f8:	ea95 0f0c 	teqeq	r5, ip
 80843fc:	f43f af3b 	beq.w	8084276 <__aeabi_dmul+0x24a>
 8084400:	ea94 0f0c 	teq	r4, ip
 8084404:	d10a      	bne.n	808441c <__aeabi_ddiv+0x19c>
 8084406:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 808440a:	f47f af34 	bne.w	8084276 <__aeabi_dmul+0x24a>
 808440e:	ea95 0f0c 	teq	r5, ip
 8084412:	f47f af25 	bne.w	8084260 <__aeabi_dmul+0x234>
 8084416:	4610      	mov	r0, r2
 8084418:	4619      	mov	r1, r3
 808441a:	e72c      	b.n	8084276 <__aeabi_dmul+0x24a>
 808441c:	ea95 0f0c 	teq	r5, ip
 8084420:	d106      	bne.n	8084430 <__aeabi_ddiv+0x1b0>
 8084422:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8084426:	f43f aefd 	beq.w	8084224 <__aeabi_dmul+0x1f8>
 808442a:	4610      	mov	r0, r2
 808442c:	4619      	mov	r1, r3
 808442e:	e722      	b.n	8084276 <__aeabi_dmul+0x24a>
 8084430:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8084434:	bf18      	it	ne
 8084436:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 808443a:	f47f aec5 	bne.w	80841c8 <__aeabi_dmul+0x19c>
 808443e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8084442:	f47f af0d 	bne.w	8084260 <__aeabi_dmul+0x234>
 8084446:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 808444a:	f47f aeeb 	bne.w	8084224 <__aeabi_dmul+0x1f8>
 808444e:	e712      	b.n	8084276 <__aeabi_dmul+0x24a>

08084450 <__gedf2>:
 8084450:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8084454:	e006      	b.n	8084464 <__cmpdf2+0x4>
 8084456:	bf00      	nop

08084458 <__ledf2>:
 8084458:	f04f 0c01 	mov.w	ip, #1
 808445c:	e002      	b.n	8084464 <__cmpdf2+0x4>
 808445e:	bf00      	nop

08084460 <__cmpdf2>:
 8084460:	f04f 0c01 	mov.w	ip, #1
 8084464:	f84d cd04 	str.w	ip, [sp, #-4]!
 8084468:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 808446c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8084470:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8084474:	bf18      	it	ne
 8084476:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 808447a:	d01b      	beq.n	80844b4 <__cmpdf2+0x54>
 808447c:	b001      	add	sp, #4
 808447e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8084482:	bf0c      	ite	eq
 8084484:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8084488:	ea91 0f03 	teqne	r1, r3
 808448c:	bf02      	ittt	eq
 808448e:	ea90 0f02 	teqeq	r0, r2
 8084492:	2000      	moveq	r0, #0
 8084494:	4770      	bxeq	lr
 8084496:	f110 0f00 	cmn.w	r0, #0
 808449a:	ea91 0f03 	teq	r1, r3
 808449e:	bf58      	it	pl
 80844a0:	4299      	cmppl	r1, r3
 80844a2:	bf08      	it	eq
 80844a4:	4290      	cmpeq	r0, r2
 80844a6:	bf2c      	ite	cs
 80844a8:	17d8      	asrcs	r0, r3, #31
 80844aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80844ae:	f040 0001 	orr.w	r0, r0, #1
 80844b2:	4770      	bx	lr
 80844b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80844b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80844bc:	d102      	bne.n	80844c4 <__cmpdf2+0x64>
 80844be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80844c2:	d107      	bne.n	80844d4 <__cmpdf2+0x74>
 80844c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80844c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80844cc:	d1d6      	bne.n	808447c <__cmpdf2+0x1c>
 80844ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80844d2:	d0d3      	beq.n	808447c <__cmpdf2+0x1c>
 80844d4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80844d8:	4770      	bx	lr
 80844da:	bf00      	nop

080844dc <__aeabi_cdrcmple>:
 80844dc:	4684      	mov	ip, r0
 80844de:	4610      	mov	r0, r2
 80844e0:	4662      	mov	r2, ip
 80844e2:	468c      	mov	ip, r1
 80844e4:	4619      	mov	r1, r3
 80844e6:	4663      	mov	r3, ip
 80844e8:	e000      	b.n	80844ec <__aeabi_cdcmpeq>
 80844ea:	bf00      	nop

080844ec <__aeabi_cdcmpeq>:
 80844ec:	b501      	push	{r0, lr}
 80844ee:	f7ff ffb7 	bl	8084460 <__cmpdf2>
 80844f2:	2800      	cmp	r0, #0
 80844f4:	bf48      	it	mi
 80844f6:	f110 0f00 	cmnmi.w	r0, #0
 80844fa:	bd01      	pop	{r0, pc}

080844fc <__aeabi_dcmpeq>:
 80844fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084500:	f7ff fff4 	bl	80844ec <__aeabi_cdcmpeq>
 8084504:	bf0c      	ite	eq
 8084506:	2001      	moveq	r0, #1
 8084508:	2000      	movne	r0, #0
 808450a:	f85d fb08 	ldr.w	pc, [sp], #8
 808450e:	bf00      	nop

08084510 <__aeabi_dcmplt>:
 8084510:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084514:	f7ff ffea 	bl	80844ec <__aeabi_cdcmpeq>
 8084518:	bf34      	ite	cc
 808451a:	2001      	movcc	r0, #1
 808451c:	2000      	movcs	r0, #0
 808451e:	f85d fb08 	ldr.w	pc, [sp], #8
 8084522:	bf00      	nop

08084524 <__aeabi_dcmple>:
 8084524:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084528:	f7ff ffe0 	bl	80844ec <__aeabi_cdcmpeq>
 808452c:	bf94      	ite	ls
 808452e:	2001      	movls	r0, #1
 8084530:	2000      	movhi	r0, #0
 8084532:	f85d fb08 	ldr.w	pc, [sp], #8
 8084536:	bf00      	nop

08084538 <__aeabi_dcmpge>:
 8084538:	f84d ed08 	str.w	lr, [sp, #-8]!
 808453c:	f7ff ffce 	bl	80844dc <__aeabi_cdrcmple>
 8084540:	bf94      	ite	ls
 8084542:	2001      	movls	r0, #1
 8084544:	2000      	movhi	r0, #0
 8084546:	f85d fb08 	ldr.w	pc, [sp], #8
 808454a:	bf00      	nop

0808454c <__aeabi_dcmpgt>:
 808454c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084550:	f7ff ffc4 	bl	80844dc <__aeabi_cdrcmple>
 8084554:	bf34      	ite	cc
 8084556:	2001      	movcc	r0, #1
 8084558:	2000      	movcs	r0, #0
 808455a:	f85d fb08 	ldr.w	pc, [sp], #8
 808455e:	bf00      	nop

08084560 <__aeabi_d2uiz>:
 8084560:	004a      	lsls	r2, r1, #1
 8084562:	d211      	bcs.n	8084588 <__aeabi_d2uiz+0x28>
 8084564:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8084568:	d211      	bcs.n	808458e <__aeabi_d2uiz+0x2e>
 808456a:	d50d      	bpl.n	8084588 <__aeabi_d2uiz+0x28>
 808456c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8084570:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8084574:	d40e      	bmi.n	8084594 <__aeabi_d2uiz+0x34>
 8084576:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808457a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808457e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8084582:	fa23 f002 	lsr.w	r0, r3, r2
 8084586:	4770      	bx	lr
 8084588:	f04f 0000 	mov.w	r0, #0
 808458c:	4770      	bx	lr
 808458e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8084592:	d102      	bne.n	808459a <__aeabi_d2uiz+0x3a>
 8084594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8084598:	4770      	bx	lr
 808459a:	f04f 0000 	mov.w	r0, #0
 808459e:	4770      	bx	lr

080845a0 <__aeabi_uldivmod>:
 80845a0:	b953      	cbnz	r3, 80845b8 <__aeabi_uldivmod+0x18>
 80845a2:	b94a      	cbnz	r2, 80845b8 <__aeabi_uldivmod+0x18>
 80845a4:	2900      	cmp	r1, #0
 80845a6:	bf08      	it	eq
 80845a8:	2800      	cmpeq	r0, #0
 80845aa:	bf1c      	itt	ne
 80845ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80845b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80845b4:	f000 b982 	b.w	80848bc <__aeabi_idiv0>
 80845b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80845bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80845c0:	f000 f806 	bl	80845d0 <__udivmoddi4>
 80845c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80845c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80845cc:	b004      	add	sp, #16
 80845ce:	4770      	bx	lr

080845d0 <__udivmoddi4>:
 80845d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80845d4:	468c      	mov	ip, r1
 80845d6:	460c      	mov	r4, r1
 80845d8:	4605      	mov	r5, r0
 80845da:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80845dc:	2b00      	cmp	r3, #0
 80845de:	d14f      	bne.n	8084680 <__udivmoddi4+0xb0>
 80845e0:	428a      	cmp	r2, r1
 80845e2:	4617      	mov	r7, r2
 80845e4:	d96b      	bls.n	80846be <__udivmoddi4+0xee>
 80845e6:	fab2 fe82 	clz	lr, r2
 80845ea:	f1be 0f00 	cmp.w	lr, #0
 80845ee:	d00b      	beq.n	8084608 <__udivmoddi4+0x38>
 80845f0:	f1ce 0520 	rsb	r5, lr, #32
 80845f4:	fa20 f505 	lsr.w	r5, r0, r5
 80845f8:	fa01 f30e 	lsl.w	r3, r1, lr
 80845fc:	ea45 0c03 	orr.w	ip, r5, r3
 8084600:	fa02 f70e 	lsl.w	r7, r2, lr
 8084604:	fa00 f50e 	lsl.w	r5, r0, lr
 8084608:	0c39      	lsrs	r1, r7, #16
 808460a:	fbbc f0f1 	udiv	r0, ip, r1
 808460e:	b2ba      	uxth	r2, r7
 8084610:	fb01 c310 	mls	r3, r1, r0, ip
 8084614:	fb00 f802 	mul.w	r8, r0, r2
 8084618:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 808461c:	ea4c 4403 	orr.w	r4, ip, r3, lsl #16
 8084620:	45a0      	cmp	r8, r4
 8084622:	d909      	bls.n	8084638 <__udivmoddi4+0x68>
 8084624:	19e4      	adds	r4, r4, r7
 8084626:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 808462a:	f080 8128 	bcs.w	808487e <__udivmoddi4+0x2ae>
 808462e:	45a0      	cmp	r8, r4
 8084630:	f240 8125 	bls.w	808487e <__udivmoddi4+0x2ae>
 8084634:	3802      	subs	r0, #2
 8084636:	443c      	add	r4, r7
 8084638:	ebc8 0404 	rsb	r4, r8, r4
 808463c:	fbb4 f3f1 	udiv	r3, r4, r1
 8084640:	fb01 4c13 	mls	ip, r1, r3, r4
 8084644:	fb03 f202 	mul.w	r2, r3, r2
 8084648:	b2ac      	uxth	r4, r5
 808464a:	ea44 410c 	orr.w	r1, r4, ip, lsl #16
 808464e:	428a      	cmp	r2, r1
 8084650:	d909      	bls.n	8084666 <__udivmoddi4+0x96>
 8084652:	19c9      	adds	r1, r1, r7
 8084654:	f103 34ff 	add.w	r4, r3, #4294967295	; 0xffffffff
 8084658:	f080 810f 	bcs.w	808487a <__udivmoddi4+0x2aa>
 808465c:	428a      	cmp	r2, r1
 808465e:	f240 810c 	bls.w	808487a <__udivmoddi4+0x2aa>
 8084662:	3b02      	subs	r3, #2
 8084664:	4439      	add	r1, r7
 8084666:	1a8a      	subs	r2, r1, r2
 8084668:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 808466c:	2100      	movs	r1, #0
 808466e:	2e00      	cmp	r6, #0
 8084670:	d063      	beq.n	808473a <__udivmoddi4+0x16a>
 8084672:	fa22 f20e 	lsr.w	r2, r2, lr
 8084676:	2300      	movs	r3, #0
 8084678:	e886 000c 	stmia.w	r6, {r2, r3}
 808467c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084680:	428b      	cmp	r3, r1
 8084682:	d907      	bls.n	8084694 <__udivmoddi4+0xc4>
 8084684:	2e00      	cmp	r6, #0
 8084686:	d056      	beq.n	8084736 <__udivmoddi4+0x166>
 8084688:	2100      	movs	r1, #0
 808468a:	e886 0011 	stmia.w	r6, {r0, r4}
 808468e:	4608      	mov	r0, r1
 8084690:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084694:	fab3 f183 	clz	r1, r3
 8084698:	2900      	cmp	r1, #0
 808469a:	f040 8093 	bne.w	80847c4 <__udivmoddi4+0x1f4>
 808469e:	42a3      	cmp	r3, r4
 80846a0:	d302      	bcc.n	80846a8 <__udivmoddi4+0xd8>
 80846a2:	4282      	cmp	r2, r0
 80846a4:	f200 80fe 	bhi.w	80848a4 <__udivmoddi4+0x2d4>
 80846a8:	1a85      	subs	r5, r0, r2
 80846aa:	eb64 0303 	sbc.w	r3, r4, r3
 80846ae:	469c      	mov	ip, r3
 80846b0:	2001      	movs	r0, #1
 80846b2:	2e00      	cmp	r6, #0
 80846b4:	d041      	beq.n	808473a <__udivmoddi4+0x16a>
 80846b6:	e886 1020 	stmia.w	r6, {r5, ip}
 80846ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80846be:	b912      	cbnz	r2, 80846c6 <__udivmoddi4+0xf6>
 80846c0:	2701      	movs	r7, #1
 80846c2:	fbb7 f7f2 	udiv	r7, r7, r2
 80846c6:	fab7 fe87 	clz	lr, r7
 80846ca:	f1be 0f00 	cmp.w	lr, #0
 80846ce:	d136      	bne.n	808473e <__udivmoddi4+0x16e>
 80846d0:	1be4      	subs	r4, r4, r7
 80846d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80846d6:	fa1f f987 	uxth.w	r9, r7
 80846da:	2101      	movs	r1, #1
 80846dc:	fbb4 f3f8 	udiv	r3, r4, r8
 80846e0:	fb08 4413 	mls	r4, r8, r3, r4
 80846e4:	fb09 f203 	mul.w	r2, r9, r3
 80846e8:	ea4f 4c15 	mov.w	ip, r5, lsr #16
 80846ec:	ea4c 4404 	orr.w	r4, ip, r4, lsl #16
 80846f0:	42a2      	cmp	r2, r4
 80846f2:	d907      	bls.n	8084704 <__udivmoddi4+0x134>
 80846f4:	19e4      	adds	r4, r4, r7
 80846f6:	f103 30ff 	add.w	r0, r3, #4294967295	; 0xffffffff
 80846fa:	d202      	bcs.n	8084702 <__udivmoddi4+0x132>
 80846fc:	42a2      	cmp	r2, r4
 80846fe:	f200 80d3 	bhi.w	80848a8 <__udivmoddi4+0x2d8>
 8084702:	4603      	mov	r3, r0
 8084704:	1aa4      	subs	r4, r4, r2
 8084706:	fbb4 f0f8 	udiv	r0, r4, r8
 808470a:	fb08 4810 	mls	r8, r8, r0, r4
 808470e:	fb09 f900 	mul.w	r9, r9, r0
 8084712:	b2ac      	uxth	r4, r5
 8084714:	ea44 4208 	orr.w	r2, r4, r8, lsl #16
 8084718:	4591      	cmp	r9, r2
 808471a:	d907      	bls.n	808472c <__udivmoddi4+0x15c>
 808471c:	19d2      	adds	r2, r2, r7
 808471e:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8084722:	d202      	bcs.n	808472a <__udivmoddi4+0x15a>
 8084724:	4591      	cmp	r9, r2
 8084726:	f200 80ba 	bhi.w	808489e <__udivmoddi4+0x2ce>
 808472a:	4620      	mov	r0, r4
 808472c:	ebc9 0202 	rsb	r2, r9, r2
 8084730:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8084734:	e79b      	b.n	808466e <__udivmoddi4+0x9e>
 8084736:	4631      	mov	r1, r6
 8084738:	4630      	mov	r0, r6
 808473a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808473e:	fa07 f70e 	lsl.w	r7, r7, lr
 8084742:	f1ce 0c20 	rsb	ip, lr, #32
 8084746:	fa24 f30c 	lsr.w	r3, r4, ip
 808474a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 808474e:	fbb3 faf8 	udiv	sl, r3, r8
 8084752:	fa1f f987 	uxth.w	r9, r7
 8084756:	fb08 351a 	mls	r5, r8, sl, r3
 808475a:	fa20 fc0c 	lsr.w	ip, r0, ip
 808475e:	fa04 f40e 	lsl.w	r4, r4, lr
 8084762:	fb0a fb09 	mul.w	fp, sl, r9
 8084766:	ea4c 0c04 	orr.w	ip, ip, r4
 808476a:	ea4f 421c 	mov.w	r2, ip, lsr #16
 808476e:	ea42 4305 	orr.w	r3, r2, r5, lsl #16
 8084772:	459b      	cmp	fp, r3
 8084774:	fa00 f50e 	lsl.w	r5, r0, lr
 8084778:	d90a      	bls.n	8084790 <__udivmoddi4+0x1c0>
 808477a:	19db      	adds	r3, r3, r7
 808477c:	f10a 32ff 	add.w	r2, sl, #4294967295	; 0xffffffff
 8084780:	f080 808b 	bcs.w	808489a <__udivmoddi4+0x2ca>
 8084784:	459b      	cmp	fp, r3
 8084786:	f240 8088 	bls.w	808489a <__udivmoddi4+0x2ca>
 808478a:	f1aa 0a02 	sub.w	sl, sl, #2
 808478e:	443b      	add	r3, r7
 8084790:	ebcb 0303 	rsb	r3, fp, r3
 8084794:	fbb3 f0f8 	udiv	r0, r3, r8
 8084798:	fb08 3310 	mls	r3, r8, r0, r3
 808479c:	fb00 f409 	mul.w	r4, r0, r9
 80847a0:	fa1f fc8c 	uxth.w	ip, ip
 80847a4:	ea4c 4303 	orr.w	r3, ip, r3, lsl #16
 80847a8:	429c      	cmp	r4, r3
 80847aa:	d907      	bls.n	80847bc <__udivmoddi4+0x1ec>
 80847ac:	19db      	adds	r3, r3, r7
 80847ae:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80847b2:	d26e      	bcs.n	8084892 <__udivmoddi4+0x2c2>
 80847b4:	429c      	cmp	r4, r3
 80847b6:	d96c      	bls.n	8084892 <__udivmoddi4+0x2c2>
 80847b8:	3802      	subs	r0, #2
 80847ba:	443b      	add	r3, r7
 80847bc:	1b1c      	subs	r4, r3, r4
 80847be:	ea40 410a 	orr.w	r1, r0, sl, lsl #16
 80847c2:	e78b      	b.n	80846dc <__udivmoddi4+0x10c>
 80847c4:	f1c1 0e20 	rsb	lr, r1, #32
 80847c8:	408b      	lsls	r3, r1
 80847ca:	fa22 fc0e 	lsr.w	ip, r2, lr
 80847ce:	ea4c 0c03 	orr.w	ip, ip, r3
 80847d2:	fa24 f70e 	lsr.w	r7, r4, lr
 80847d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80847da:	fbb7 faf9 	udiv	sl, r7, r9
 80847de:	fa1f f38c 	uxth.w	r3, ip
 80847e2:	fb09 771a 	mls	r7, r9, sl, r7
 80847e6:	fa20 f80e 	lsr.w	r8, r0, lr
 80847ea:	408c      	lsls	r4, r1
 80847ec:	fb0a f503 	mul.w	r5, sl, r3
 80847f0:	ea48 0404 	orr.w	r4, r8, r4
 80847f4:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80847f8:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80847fc:	42bd      	cmp	r5, r7
 80847fe:	fa02 f201 	lsl.w	r2, r2, r1
 8084802:	fa00 fb01 	lsl.w	fp, r0, r1
 8084806:	d909      	bls.n	808481c <__udivmoddi4+0x24c>
 8084808:	eb17 070c 	adds.w	r7, r7, ip
 808480c:	f10a 30ff 	add.w	r0, sl, #4294967295	; 0xffffffff
 8084810:	d241      	bcs.n	8084896 <__udivmoddi4+0x2c6>
 8084812:	42bd      	cmp	r5, r7
 8084814:	d93f      	bls.n	8084896 <__udivmoddi4+0x2c6>
 8084816:	f1aa 0a02 	sub.w	sl, sl, #2
 808481a:	4467      	add	r7, ip
 808481c:	1b7f      	subs	r7, r7, r5
 808481e:	fbb7 f5f9 	udiv	r5, r7, r9
 8084822:	fb09 7715 	mls	r7, r9, r5, r7
 8084826:	fb05 f303 	mul.w	r3, r5, r3
 808482a:	b2a4      	uxth	r4, r4
 808482c:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8084830:	42bb      	cmp	r3, r7
 8084832:	d908      	bls.n	8084846 <__udivmoddi4+0x276>
 8084834:	eb17 070c 	adds.w	r7, r7, ip
 8084838:	f105 30ff 	add.w	r0, r5, #4294967295	; 0xffffffff
 808483c:	d227      	bcs.n	808488e <__udivmoddi4+0x2be>
 808483e:	42bb      	cmp	r3, r7
 8084840:	d925      	bls.n	808488e <__udivmoddi4+0x2be>
 8084842:	3d02      	subs	r5, #2
 8084844:	4467      	add	r7, ip
 8084846:	ea45 400a 	orr.w	r0, r5, sl, lsl #16
 808484a:	fba0 8902 	umull	r8, r9, r0, r2
 808484e:	1aff      	subs	r7, r7, r3
 8084850:	454f      	cmp	r7, r9
 8084852:	4645      	mov	r5, r8
 8084854:	464c      	mov	r4, r9
 8084856:	d314      	bcc.n	8084882 <__udivmoddi4+0x2b2>
 8084858:	d029      	beq.n	80848ae <__udivmoddi4+0x2de>
 808485a:	b366      	cbz	r6, 80848b6 <__udivmoddi4+0x2e6>
 808485c:	ebbb 0305 	subs.w	r3, fp, r5
 8084860:	eb67 0704 	sbc.w	r7, r7, r4
 8084864:	fa07 fe0e 	lsl.w	lr, r7, lr
 8084868:	40cb      	lsrs	r3, r1
 808486a:	40cf      	lsrs	r7, r1
 808486c:	ea4e 0303 	orr.w	r3, lr, r3
 8084870:	e886 0088 	stmia.w	r6, {r3, r7}
 8084874:	2100      	movs	r1, #0
 8084876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808487a:	4623      	mov	r3, r4
 808487c:	e6f3      	b.n	8084666 <__udivmoddi4+0x96>
 808487e:	4618      	mov	r0, r3
 8084880:	e6da      	b.n	8084638 <__udivmoddi4+0x68>
 8084882:	ebb8 0502 	subs.w	r5, r8, r2
 8084886:	eb69 040c 	sbc.w	r4, r9, ip
 808488a:	3801      	subs	r0, #1
 808488c:	e7e5      	b.n	808485a <__udivmoddi4+0x28a>
 808488e:	4605      	mov	r5, r0
 8084890:	e7d9      	b.n	8084846 <__udivmoddi4+0x276>
 8084892:	4610      	mov	r0, r2
 8084894:	e792      	b.n	80847bc <__udivmoddi4+0x1ec>
 8084896:	4682      	mov	sl, r0
 8084898:	e7c0      	b.n	808481c <__udivmoddi4+0x24c>
 808489a:	4692      	mov	sl, r2
 808489c:	e778      	b.n	8084790 <__udivmoddi4+0x1c0>
 808489e:	3802      	subs	r0, #2
 80848a0:	443a      	add	r2, r7
 80848a2:	e743      	b.n	808472c <__udivmoddi4+0x15c>
 80848a4:	4608      	mov	r0, r1
 80848a6:	e704      	b.n	80846b2 <__udivmoddi4+0xe2>
 80848a8:	3b02      	subs	r3, #2
 80848aa:	443c      	add	r4, r7
 80848ac:	e72a      	b.n	8084704 <__udivmoddi4+0x134>
 80848ae:	45c3      	cmp	fp, r8
 80848b0:	d3e7      	bcc.n	8084882 <__udivmoddi4+0x2b2>
 80848b2:	463c      	mov	r4, r7
 80848b4:	e7d1      	b.n	808485a <__udivmoddi4+0x28a>
 80848b6:	4631      	mov	r1, r6
 80848b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080848bc <__aeabi_idiv0>:
 80848bc:	4770      	bx	lr
 80848be:	bf00      	nop

080848c0 <__cxa_atexit>:
 80848c0:	b510      	push	{r4, lr}
 80848c2:	4c05      	ldr	r4, [pc, #20]	; (80848d8 <__cxa_atexit+0x18>)
 80848c4:	4613      	mov	r3, r2
 80848c6:	b12c      	cbz	r4, 80848d4 <__cxa_atexit+0x14>
 80848c8:	460a      	mov	r2, r1
 80848ca:	4601      	mov	r1, r0
 80848cc:	2002      	movs	r0, #2
 80848ce:	f3af 8000 	nop.w
 80848d2:	bd10      	pop	{r4, pc}
 80848d4:	4620      	mov	r0, r4
 80848d6:	bd10      	pop	{r4, pc}
 80848d8:	00000000 	.word	0x00000000

080848dc <memcpy>:
 80848dc:	b510      	push	{r4, lr}
 80848de:	1e43      	subs	r3, r0, #1
 80848e0:	440a      	add	r2, r1
 80848e2:	4291      	cmp	r1, r2
 80848e4:	d004      	beq.n	80848f0 <memcpy+0x14>
 80848e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80848ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80848ee:	e7f8      	b.n	80848e2 <memcpy+0x6>
 80848f0:	bd10      	pop	{r4, pc}

080848f2 <memset>:
 80848f2:	4603      	mov	r3, r0
 80848f4:	4402      	add	r2, r0
 80848f6:	4293      	cmp	r3, r2
 80848f8:	d002      	beq.n	8084900 <memset+0xe>
 80848fa:	f803 1b01 	strb.w	r1, [r3], #1
 80848fe:	e7fa      	b.n	80848f6 <memset+0x4>
 8084900:	4770      	bx	lr
	...

08084904 <srand>:
 8084904:	b538      	push	{r3, r4, r5, lr}
 8084906:	4b12      	ldr	r3, [pc, #72]	; (8084950 <srand+0x4c>)
 8084908:	4605      	mov	r5, r0
 808490a:	681c      	ldr	r4, [r3, #0]
 808490c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808490e:	b9d3      	cbnz	r3, 8084946 <srand+0x42>
 8084910:	2018      	movs	r0, #24
 8084912:	f7fd fdcf 	bl	80824b4 <malloc>
 8084916:	f243 330e 	movw	r3, #13070	; 0x330e
 808491a:	63a0      	str	r0, [r4, #56]	; 0x38
 808491c:	8003      	strh	r3, [r0, #0]
 808491e:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8084922:	8043      	strh	r3, [r0, #2]
 8084924:	f241 2334 	movw	r3, #4660	; 0x1234
 8084928:	8083      	strh	r3, [r0, #4]
 808492a:	f24e 636d 	movw	r3, #58989	; 0xe66d
 808492e:	80c3      	strh	r3, [r0, #6]
 8084930:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8084934:	8103      	strh	r3, [r0, #8]
 8084936:	2305      	movs	r3, #5
 8084938:	8143      	strh	r3, [r0, #10]
 808493a:	230b      	movs	r3, #11
 808493c:	8183      	strh	r3, [r0, #12]
 808493e:	2201      	movs	r2, #1
 8084940:	2300      	movs	r3, #0
 8084942:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8084946:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8084948:	2200      	movs	r2, #0
 808494a:	611d      	str	r5, [r3, #16]
 808494c:	615a      	str	r2, [r3, #20]
 808494e:	bd38      	pop	{r3, r4, r5, pc}
 8084950:	200004f4 	.word	0x200004f4

08084954 <strcat>:
 8084954:	4602      	mov	r2, r0
 8084956:	b510      	push	{r4, lr}
 8084958:	4613      	mov	r3, r2
 808495a:	781c      	ldrb	r4, [r3, #0]
 808495c:	3201      	adds	r2, #1
 808495e:	2c00      	cmp	r4, #0
 8084960:	d1fa      	bne.n	8084958 <strcat+0x4>
 8084962:	3b01      	subs	r3, #1
 8084964:	f811 2b01 	ldrb.w	r2, [r1], #1
 8084968:	f803 2f01 	strb.w	r2, [r3, #1]!
 808496c:	2a00      	cmp	r2, #0
 808496e:	d1f9      	bne.n	8084964 <strcat+0x10>
 8084970:	bd10      	pop	{r4, pc}

08084972 <strcmp>:
 8084972:	f810 2b01 	ldrb.w	r2, [r0], #1
 8084976:	f811 3b01 	ldrb.w	r3, [r1], #1
 808497a:	2a01      	cmp	r2, #1
 808497c:	bf28      	it	cs
 808497e:	429a      	cmpcs	r2, r3
 8084980:	d0f7      	beq.n	8084972 <strcmp>
 8084982:	1ad0      	subs	r0, r2, r3
 8084984:	4770      	bx	lr

08084986 <strcpy>:
 8084986:	4603      	mov	r3, r0
 8084988:	f811 2b01 	ldrb.w	r2, [r1], #1
 808498c:	f803 2b01 	strb.w	r2, [r3], #1
 8084990:	2a00      	cmp	r2, #0
 8084992:	d1f9      	bne.n	8084988 <strcpy+0x2>
 8084994:	4770      	bx	lr
	...

08084998 <strdup>:
 8084998:	4b02      	ldr	r3, [pc, #8]	; (80849a4 <strdup+0xc>)
 808499a:	4601      	mov	r1, r0
 808499c:	6818      	ldr	r0, [r3, #0]
 808499e:	f000 b803 	b.w	80849a8 <_strdup_r>
 80849a2:	bf00      	nop
 80849a4:	200004f4 	.word	0x200004f4

080849a8 <_strdup_r>:
 80849a8:	b570      	push	{r4, r5, r6, lr}
 80849aa:	4606      	mov	r6, r0
 80849ac:	4608      	mov	r0, r1
 80849ae:	460c      	mov	r4, r1
 80849b0:	f000 f80d 	bl	80849ce <strlen>
 80849b4:	1c45      	adds	r5, r0, #1
 80849b6:	4629      	mov	r1, r5
 80849b8:	4630      	mov	r0, r6
 80849ba:	f7fd fda3 	bl	8082504 <_malloc_r>
 80849be:	4606      	mov	r6, r0
 80849c0:	b118      	cbz	r0, 80849ca <_strdup_r+0x22>
 80849c2:	462a      	mov	r2, r5
 80849c4:	4621      	mov	r1, r4
 80849c6:	f7ff ff89 	bl	80848dc <memcpy>
 80849ca:	4630      	mov	r0, r6
 80849cc:	bd70      	pop	{r4, r5, r6, pc}

080849ce <strlen>:
 80849ce:	4603      	mov	r3, r0
 80849d0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80849d4:	2a00      	cmp	r2, #0
 80849d6:	d1fb      	bne.n	80849d0 <strlen+0x2>
 80849d8:	1a18      	subs	r0, r3, r0
 80849da:	3801      	subs	r0, #1
 80849dc:	4770      	bx	lr

080849de <strncpy>:
 80849de:	4603      	mov	r3, r0
 80849e0:	b510      	push	{r4, lr}
 80849e2:	b142      	cbz	r2, 80849f6 <strncpy+0x18>
 80849e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80849e8:	3a01      	subs	r2, #1
 80849ea:	f803 4b01 	strb.w	r4, [r3], #1
 80849ee:	2c00      	cmp	r4, #0
 80849f0:	d1f7      	bne.n	80849e2 <strncpy+0x4>
 80849f2:	441a      	add	r2, r3
 80849f4:	e000      	b.n	80849f8 <strncpy+0x1a>
 80849f6:	bd10      	pop	{r4, pc}
 80849f8:	4293      	cmp	r3, r2
 80849fa:	d002      	beq.n	8084a02 <strncpy+0x24>
 80849fc:	f803 4b01 	strb.w	r4, [r3], #1
 8084a00:	e7fa      	b.n	80849f8 <strncpy+0x1a>
 8084a02:	bd10      	pop	{r4, pc}

08084a04 <dynalib_user>:
 8084a04:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 8084a14:	0000 0000 7525 252e 2e75 7525 252e 0075     ....%u.%u.%u.%u.
 8084a24:	6170 7472 6369 656c 642f 7665 6369 2f65     particle/device/
 8084a34:	616e 656d 5000 7261 6974 6c63 4465 7665     name.ParticleDev
 8084a44:	6369 0065 3331 2e37 3131 2e37 3833 322e     ice.137.117.38.2
 8084a54:	3535 4400 7461 5461 706f 6369 5200 7365     55.DataTopic.Res
 8084a64:	6f70 736e 5465 706f 6369 4300 6d6f 616d     ponseTopic.Comma
 8084a74:	646e 6f54 6970 5f63 2200 5c22 625c 6608     ndTopic_.""\\b.f
 8084a84:	6e0c 720a 740d 0009 756e 6c6c 6500 002d     .n.r.t..null.e-.
 8084a94:	7274 6575 6600 6c61 6573 6400 7665 6369     true.false.devic
 8084aa4:	4965 0064 6d63 0064 694c 6867 5374 6e65     eId.cmd.LightSen
 8084ab4:	6f73 0072 656d 6874 646f 6700 7465 5200     sor.method.get.R
 8084ac4:	746f 7261 4179 676e 656c 6553 736e 726f     otaryAngleSensor
 8084ad4:	4200 7475 6f74 006e 654c 0064 7575 6469     .Button.Led.uuid
 8084ae4:	7300 7465 0000 4d04 5451 0454 0600 514d     .set...MQTT...MQ
 8084af4:	7349 7064 0003 0000                         Isdp....

08084afc <_ZTVN5spark13CellularClassE>:
	...
 8084b04:	25dd 0808 25d3 0808 25c9 0808 253b 0808     .%...%...%..;%..
 8084b14:	25bd 0808 25b1 0808 25a5 0808 259d 0808     .%...%...%...%..
 8084b24:	2593 0808 2589 0808 2545 0808               .%...%..E%..

08084b30 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8084b38:	2629 0808 262f 0808 2657 0808 263b 0808     )&../&..W&..;&..
 8084b48:	262b 0808                                   +&..

08084b4c <_ZTV7TwoWire>:
	...
 8084b54:	2b99 0808 2be3 0808 2bbb 0808 2b9b 0808     .+...+...+...+..
 8084b64:	2bc3 0808 2bcb 0808 2bd3 0808 2bdb 0808     .+...+...+...+..

08084b74 <_ZTV9IPAddress>:
	...
 8084b7c:	2c2b 0808 2c1d 0808 2c1f 0808 0066 6e6c     +,...,...,..f.ln
 8084b8c:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 8084b9c:	0a0d 2500 3130 7530 0020 205d 2500 0064     ...%010u .] .%d.
 8084bac:	202c 2800 3a29 0020 5b20 6300 646f 2065     , .(): . [.code 
 8084bbc:	203d 2500 0069 6564 6174 6c69 2073 203d     = .%i.details = 
 8084bcc:	6200 7561 0064 6553 6972 6c61 5500 4253     .baud.Serial.USB
 8084bdc:	6553 6972 6c61 0031 7974 6570 7000 7261     Serial1.type.par
 8084bec:	6d61 6800 646e 7300 7274 006d 6966 746c     am.hnd.strm.filt
 8084bfc:	6c00 6c76 6100 6464 6148 646e 656c 0072     .lvl.addHandler.
 8084c0c:	6572 6f6d 6576 6148 646e 656c 0072 6e65     removeHandler.en
 8084c1c:	6d75 6148 646e 656c 7372 4a00 4f53 534e     umHandlers.JSONS
 8084c2c:	7274 6165 4c6d 676f 6148 646e 656c 0072     treamLogHandler.
 8084c3c:	7061 0070 6f6e 656e 7400 6172 6563 6900     app.none.trace.i
 8084c4c:	666e 006f 6177 6e72 6500 7272 726f 7000     nfo.warn.error.p
 8084c5c:	6e61 6369 6100 6c6c 0000 0000               anic.all....

08084c68 <_ZTVN5spark12NetworkClassE>:
	...
 8084c70:	2cf5 0808 2cff 0808 2d09 0808 2d13 0808     .,...,...-...-..
 8084c80:	2d1d 0808 2d29 0808 2d35 0808 2d41 0808     .-..)-..5-..A-..
 8084c90:	2d49 0808 2d53 0808 2d5d 0808               I-..S-..]-..

08084c9c <_ZTV8SPIClass>:
	...
 8084ca4:	2ea9 0808 2eab 0808                         ........

08084cac <_ZTVSt19_Sp_counted_deleterIPN9TCPClient4DataENSt12__shared_ptrIS1_LN9__gnu_cxx12_Lock_policyE0EE8_DeleterISaIS1_EEES8_LS5_0EE>:
	...
 8084cb4:	305d 0808 3063 0808 344b 0808 306f 0808     ]0..c0..K4..o0..
 8084cc4:	305f 0808                                   _0..

08084cc8 <_ZTV9TCPClient>:
	...
 8084cd0:	18d1 0808 1905 0808 3005 0808 301f 0808     .........0...0..
 8084ce0:	3157 0808 30c1 0808 3093 0808 3047 0808     W1...0...0..G0..
 8084cf0:	3201 0808 3465 0808 30f5 0808 31cf 0808     .2..e4...0...1..
 8084d00:	3343 0808 3395 0808 302f 0808 3307 0808     C3...3../0...3..
 8084d10:	3049 0808 6977 6972 676e 5400 5043 6c43     I0..wiring.TCPCl
 8084d20:	6569 746e 7320 636f 656b 3d74 7825 5a00     ient socket=%x.Z
 8084d30:	2500 302b 6433 253a 3230 0075 5925 252d     .%+03d:%02u.%Y-%
 8084d40:	2d6d 6425 2554 3a48 4d25 253a 2553 007a     m-%dT%H:%M:%S%z.
 8084d50:	7361 7463 6d69 0065                         asctime.

08084d58 <_ZTV11USARTSerial>:
	...
 8084d60:	34d5 0808 34f9 0808 3505 0808 2dd5 0808     .4...4...5...-..
 8084d70:	34e1 0808 34ed 0808 34e7 0808 34f3 0808     .4...4...4...4..
 8084d80:	34d7 0808 34db 0808                         .4...4..

08084d88 <_ZTV9USBSerial>:
	...
 8084d90:	35e1 0808 3625 0808 35ff 0808 2dd5 0808     .5..%6...5...-..
 8084da0:	35f9 0808 35e3 0808 35eb 0808 361f 0808     .5...5...5...6..
 8084db0:	35f3 0808 35dd 0808                         .5...5..

08084db8 <__sf_fake_stdin>:
	...

08084dd8 <__sf_fake_stdout>:
	...

08084df8 <__sf_fake_stderr>:
	...
 8084e18:	0043                                        C.

08084e1a <link_const_variable_data_end>:
	...

08084e1c <link_constructors_location>:
 8084e1c:	080818c1 	.word	0x080818c1
 8084e20:	080820b7 	.word	0x080820b7
 8084e24:	080825e9 	.word	0x080825e9
 8084e28:	08082ce5 	.word	0x08082ce5
 8084e2c:	08082dc1 	.word	0x08082dc1
 8084e30:	08082e8d 	.word	0x08082e8d
 8084e34:	08082fed 	.word	0x08082fed
 8084e38:	080834c1 	.word	0x080834c1
 8084e3c:	08083991 	.word	0x08083991
 8084e40:	080839c1 	.word	0x080839c1
 8084e44:	08083a2d 	.word	0x08083a2d
 8084e48:	08083af1 	.word	0x08083af1
 8084e4c:	08083b75 	.word	0x08083b75
 8084e50:	08083bf9 	.word	0x08083bf9

08084e54 <link_constructors_end>:
	...
