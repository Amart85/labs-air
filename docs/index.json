[{"body":"Introduction The following steps will guide you to login and get started with TIBCO Project AIR™ UI.\nPrerequisites Prerequisite 1: TIBCO Cloud™ Account Sign up for a TIBCO Cloud™ Account\n TIBCO Cloud™ Account  Prerequisite 2: Activate TIBCO Cloud™ Account Check your email and activate your account\nPrerequisite 3: Make sure TIBCO Project AIR™ UI is running Login Steps Step 1: Open TIBCO Project AIR™ UI web page Open TIBCO Project AIR™ UI by clicking the link below:\n TIBCO Project AIR™ UI  Step 2: Enter your TIBCO Cloud™ Account credentials Step 3: Once you are in, click the Get started button. Step 4: You are ready to manage your devices. ","excerpt":"Introduction The following steps will guide you to login and get started with TIBCO Project AIR™ UI. …","ref":"https://tibcosoftware.github.io/labs-air/docs/users-guide/login-to-ui/","title":"Login to UI"},{"body":"First steps to start\n","excerpt":"First steps to start","ref":"https://tibcosoftware.github.io/labs-air/docs/getting-started-minikube/","title":"Getting Started on Minikube"},{"body":"Introduction Project Air\u0026rsquo;s infrastructure is mainly composed of helm charts that run on a kubernetes cluster, which makes overriding the default configuration very simple.\nHow to override configuration During \u0026ldquo;air install\u0026rdquo; or \u0026ldquo;air upgrade-charts\u0026rdquo; commands a values.yml file can be passed as a parameter that will override the default configuration (more information about helm values files here).\nIn order to pass the values.yml file 2 things are needed:\n1.- Mount your \u0026ldquo;values.yml\u0026rdquo; file using the docker option -v, more info about docker volumes here\n2.- Pass \u0026ndash;values flag to \u0026ldquo;air install\u0026rdquo; or \u0026ldquo;air upgrade-charts\u0026rdquo; command\nFor example to increase the mosquitto pod number create a file called override-values.yml\nmosquitto: deployment: replicaCount: 2 Then use that file when calling \u0026ldquo;air install\u0026rdquo; or \u0026ldquo;air upgrade-charts\u0026rdquo;\nCommand example overriding default values:\ndocker run -e MINIKUBE_IP=$(minikube ip) -it --network host -v ${HOME}/.minikube:/.minikube -v ${HOME}/.kube:/.kube -v /path/to/override-values/folder:/values -e MINIKUBE_HOST_OS=mac tibcosoftware/labs-air-minikube-cli air install --values /values/override-values.yaml  Note: -v /path/to/override-values/folder:/values (Will mount your override-values.yml inside the container)\n  Note: \u0026ndash;values /values/override-values.yaml (Parameter with the file path that will override the helm values)\n ","excerpt":"Introduction Project Air\u0026rsquo;s infrastructure is mainly composed of helm charts that run on a …","ref":"https://tibcosoftware.github.io/labs-air/docs/configuration/infrastructure-config/","title":"Infrastructure Config"},{"body":"Introduction The following steps will guide you through the full infrastructure installation on Amazon Web Services.\nPrerequisites Prerequisite 1: Docker Air\u0026rsquo;s CLI is wrapped in a docker container to ease the installation process:\n Docker  Prerequisite 2: AWS Account Information All the infrastructure components needed for Project Air will be installed in your provided AWS account, you will need the following information to install it:\nYour AWS access and secret keys: More information here\nInstallation Steps Step 1: pull aws cli docker pull tibcosoftware/labs-air-aws-cli Step 2: call install command on cli Note: This installation installs a Kubernetes cluster using EKS in your aws account so it takes around ~20minutes to finish.\ndocker run -it tibcosoftware/labs-air-aws-cli air install Enter the AWS information when prompted (Note: To avoid prompt look at the Advanced install configuration section here)\nPlease enter your AWS_ACCESS_KEY_ID: Please enter your AWS_SECRET_ACCESS_KEY: Step 3 [optional]: check installation This command will allow you to connect to the kubernetes cluster to see the different components\ndocker run -it -p 8001:8001 tibcosoftware/labs-air-aws-cli air dashboard Copy the token printed in the terminal\nAnd follow the dashboard link also printed in the terminal\nCongratulations!! Project Air infrastructure has been installed\nAdvanced install configuration There is a way to avoid being prompted for your credentials as well as adding advanced configuration.\nYou need to create a config.yaml file with the following content:\naws: AWS_ACCESS_KEY_ID: \u0026lt;YOUR ACCESS KEY ID HERE\u0026gt; AWS_SECRET_ACCESS_KEY: \u0026lt;YOUR SECRET ACCESS KEY ID HERE\u0026gt; AWS_DEFAULT_REGION: \u0026lt;YOUR DEFAULT REGION HERE\u0026gt; Then just mount a volume with the config.yaml file when calling the cli for example:\ndocker run -it -v /path/to/config/file/:/configuration tibcosoftware/labs-air-aws-cli air install Advanced configuration for Assuming a different role Add the following entry to the config.yaml file:\naws: ...\u0026lt;Your previous configuration goes here\u0026gt;... AWS_ASSUME_ROLE_ARN: \u0026quot;\u0026lt;Add your Role ARN\u0026gt;\u0026quot; AWS_ASSUME_ROLE_SESSION_DURATION: \u0026quot;\u0026lt;Add your session duration for example 3600\u0026gt;\u0026quot; Note that the role session duration also implies how often you need to \u0026ldquo;air upgrade-charts\u0026rdquo; refresh the token\nAdvanced configuration for choosing a different cluster name Sometimes if you are shareing an AWS account you want to choose a different kubernetes cluster name.\naws: ...\u0026lt;Your previous configuration goes here\u0026gt;... KUBE_CLUSTER_NAME: \u0026quot;\u0026lt;Your cluster name\u0026gt;\u0026quot; Uninstallation Steps Step 1: pull aws cli docker pull tibcosoftware/labs-air-aws-cli Step 2: call delete command on cli Note: This installation deletes the Kubernetes cluster.\ndocker run -it tibcosoftware/labs-air-aws-cli air delete Enter the AWS information when prompted (Note: To avoid prompt look at the Advanced install configuration section here)\nPlease enter your AWS_ACCESS_KEY_ID: Please enter your AWS_SECRET_ACCESS_KEY: Troubleshooting AlreadyExistException If you get a message similar to this\n[✖] creating CloudFormation stack \u0026quot;eksctl-air-cluster-cluster\u0026quot;: AlreadyExistsException: Stack [eksctl-air-cluster-cluster] already exists status code: 400, request id: a4eba6b2-bd4a-475d-b3a1-93fc6cfd5d1f This means that there is an already existing cluster with that name the solution is:\n1.- Delete the cluster, go here for more information.\n2.- Create a cluster with a different name, go here for more information.\n","excerpt":"Introduction The following steps will guide you through the full infrastructure installation on …","ref":"https://tibcosoftware.github.io/labs-air/docs/getting-started-aws/install-the-infrastructure/","title":"Install infrastructure on AWS"},{"body":"Introduction The following steps will guide you through the full infrastructure installation on Minikube.\nPrerequisites Prerequisite 1: Docker Air\u0026rsquo;s CLI is wrapped in a docker container to ease the installation process:\n Docker  Prerequisite 2: Minikube All the infrastructure components needed for Project Air will be installed in your provided minikube cluster\nMore information to install minikube here\nInstallation Steps Step 1: start minikube minikube start Note: make sure your driver is correct and that the minikube installation is correct as indicated here\nStep 2: enable ingress minikube addons enable ingress IMPORTANT: Make sure your ingress-nginx-controller is running!!, you can wait a couple of minutes or you can check it by running:\nkubectl get pods -n kube-system Step 3: pull minikube cli docker pull tibcosoftware/labs-air-minikube-cli Step 4 [FOR MAC USERS]: call install command on cli In one terminal\nkubectl proxy --port=8080 --disable-filter=true In a different terminal\ndocker run -e MINIKUBE_IP=$(minikube ip) -it --network host -v ${HOME}/.minikube:/.minikube -v ${HOME}/.kube:/.kube -e MINIKUBE_HOST_OS=mac tibcosoftware/labs-air-minikube-cli air install Step 4 [FOR LINUX USERS]: call install command on cli In one terminal\nkubectl proxy --port=8080 In a different terminal\ndocker run -e MINIKUBE_IP=$(minikube ip) -it --network host -v ${HOME}/.minikube:/.minikube -v ${HOME}/.kube:/.kube tibcosoftware/labs-air-minikube-cli air install Step 4 [FOR WINDOWS USERS]: call install command on cli In one terminal\nkubectl proxy --port=8080 --disable-filter=true In a different terminal\ndocker run -e MINIKUBE_IP=$(minikube ip) -it --network host -v ${HOME}/.minikube:/.minikube -v ${HOME}/.kube:/.kube -e MINIKUBE_HOST_OS=windows tibcosoftware/labs-air-minikube-cli air install Step 5 [optional]: check installation This command will allow you to connect to the kubernetes cluster to see the different components\nminikube dashboard Congratulations!! Project Air infrastructure has been installed\nUninstallation Steps Step 1: pull minikube cli docker pull tibcosoftware/labs-air-minikube-cli Step 2: call delete command on cli docker run -it -v ${HOME}/.minikube:/.minikube -v ${HOME}/.kube:/.kube tibcosoftware/labs-air-minikube-cli air delete Step 3: delete minikube Note: This installation deletes the Kubernetes cluster.\nminikube delete ","excerpt":"Introduction The following steps will guide you through the full infrastructure installation on …","ref":"https://tibcosoftware.github.io/labs-air/docs/getting-started-minikube/install-the-infrastructure/","title":"Install infrastructure on Minikube"},{"body":"Introduction The following steps will guide you through the creation and management of device groups. A device group represent a number of edge devices controlled and managed by the Edgex platform.\nPrerequisites Prerequisite 1: Edgex Edgex is a vendor neutral open source platform at the edge of the network that interacts with physical devices, sensors, actuators and other IoT objects. It enables the interoperability between devices and applications at the edge and at the cloud.\n Edgex  From a running instance of Edgex, gather the following information:\n Edgex Instance Name Overall gps coordinates of where the Edgex platform is running Edgex gateway api security token  Prerequisite 2: Project AIR UI Login to TIBCO Project AIR™ UI\nAdding Device Groups Steps Step 1: Click the IoT Management menu on the top left corner and select Gateways. Step 2: On the Gateways page, enter the following information and then click Add Gateway:  Device Group Id: the grouping name from Edgex Description: a description for the group of devices Address: the ip address of the machine where Edgex Gateway is running. Latitude: Edgex machine latitude Longitude: Edgex machine longitude Access Token: The Edgex security token  Step 3: Verify connection to Edgex Once the grouping has been added, click the grouping on the Device Groups table on the top-left corner, and then click Ping Gateway. If the connection is succesful, you should see a Success banner. Otherwise, a Failure banner is displayed and you should review that Edgex is running or make sure the Address and Access Token parameters are correct.\nUpdating Device Group Steps Step 1: Select grouping to be updated from the Device Groups table. Step 2: Modify groupin parameters as required. Note that the Device Group Id can not be modified. Step 3: Click the Update Gateway button. Removing Device Group Steps Step 1: Select grouping to be removed from the Device Groups table. Step 3: Click the Delete Gateway button. Step 3: Verify removed gateway is not longer in the Device Groups table. ","excerpt":"Introduction The following steps will guide you through the creation and management of device …","ref":"https://tibcosoftware.github.io/labs-air/docs/users-guide/manage-device-groups/","title":"Manage Device Groups"},{"body":"Introduction Project Air provides with basic authentication out of the box, this basic auth can be configured and even removed if desired.\n Note: It is highly encouraged to change the default basic authentication secrets to your own secrets.\n How to override default basic auth configuration In order to override the basic auth configuration the following is needed\nStep 1.- Create a new secret overriding the basic auth values\nTo create your new secret in a terminal create the auth file (Replace  with your username for example admin)\nhtpasswd -c auth \u0026lt;YourDesiredUsername\u0026gt; base64 auth Step 2.- Override secret on install or upgrade\nIn this step we are going to use secret created in Step 1.\nCreate a new override-values.yml file as defined in here with the current content:\nbasicauth: secret: \u0026lt;AddYourSecretHere\u0026gt; Step 3.- Use the new override-values.yaml to install or upgrade air infrastructure\n More information about overriding values here\n Step 4.- Change UI to use new BasicAuth http headers\nOpen labs-air-ui/src/app/services/auth/auth.service.ts and replace the line  with your base64 header.\nthis.basicAuthHeaders = { 'Authorization': 'Basic \u0026lt;AddYourBase64BasicAuthHere\u0026gt;' } ","excerpt":"Introduction Project Air provides with basic authentication out of the box, this basic auth can be …","ref":"https://tibcosoftware.github.io/labs-air/docs/configuration/basic-auth/","title":"Basic Authentication"},{"body":"First steps to start\n","excerpt":"First steps to start","ref":"https://tibcosoftware.github.io/labs-air/docs/getting-started-aws/","title":"Getting Started on AWS"},{"body":"Introduction The following steps will guide you through the configuration and how to run the edge elements locally.\nPrerequisites Prerequisite 1: Docker Air\u0026rsquo;s CLI is wrapped in a docker container to ease the installation process:\n Docker  Running Steps Step 1: Get Project AIR Infrastructure endpoints Query the endpoints. Take note of the returned information as it will be used to configure AIR Edge components in subsequent steps.\ndocker run -it tibcosoftware/labs-air-aws-cli air show-endpoints You should see 3 endpoints being displayed something like:\n{'service_name': 'core-air-cors-anywhere-service', 'hostname': '\u0026lt;someawsdns\u0026gt;.us-west-2.elb.amazonaws.com', 'ports': [80]} {'service_name': 'core-ingress-nginx-controller', 'hostname': '\u0026lt;someawsdns\u0026gt;.us-west-2.elb.amazonaws.com', 'ports': [80, 443]} {'service_name': 'core-mosquitto-service', 'hostname': '\u0026lt;someawsdns\u0026gt;.us-west-2.elb.amazonaws.com', 'ports': [443]} Step 2: Download basic demo Download the basic demo file\nUnzip basicdemo.zip\nThen, change to the folder just unzipped\ncd basicdemo Step 3: Start Edgex Core components Inside your basicdemo folder run\n./startEdgex.sh Step 4: Get Edgex Gateway API security token Inside your basicdemo folder run\n./getSecurityToken.sh Copy the access token for tibuser, you will need it to configure AIR components.\nStep 5: Configure Edgex AIR Components Use the information from step 1 (endpoints) and step 4 (security token) to modify the basicdemo/.env file. This file is used to provide AIR environment variables to docker-compose.\nOpen the file and replace the following variables using values for your environment and the information returned from the service list:\nGATEWAY_ID=changeme GATEWAY_DESCRIPTION=changeme GATEWAY_HOSTNAME=localhost GATEWAY_LATITUDE=36.0 GATEWAY_LONGITUDE=-98.0 GATEWAY_ACCESS_TOKEN=changeme GATEWAY_METADATA_PUBLISH_INTERVAL_SECS=30 AIR_MQTT_HOSTNAME=changeme AIR_MQTT_PORT=changeme AIR_MQTT_USER=mqtt_admin AIR_MQTT_PASSWORD=mqtt_admin AIR_MQTT_DATA_TOPIC=EdgexGatewayData AIR_MQTT_NOTIFICATION_TOPIC=EdgexGatewayNotification Please note that the GATEWAY_ID is the identifier that will be used to identify your deployment in the AIR UI.\nStep 6: Start Edgex AIR components Inside your basicdemo folder run\n./startEdgeAIR.sh Congratulations!! Project Air edge basic demo is running\nUninstallation Steps Step 1: stop the demo Inside your basicdemo folder run\n./stopEdgex.sh ","excerpt":"Introduction The following steps will guide you through the configuration and how to run the edge …","ref":"https://tibcosoftware.github.io/labs-air/docs/getting-started-aws/start-the-edge/","title":"Start the Edge"},{"body":"Introduction The following steps will guide you through the configuration and how to run the edge elements locally.\nPrerequisites Prerequisite 1: Docker Air\u0026rsquo;s CLI is wrapped in a docker container to ease the installation process:\n Docker  Running Steps Step 1: Get Project AIR Infrastructure endpoints Query the service list. Take note of the returned information as it will be used to configure AIR Edge components in subsequent steps.\nminikube service list You should see something like this:\n|----------------------|------------------------------------|--------------------|-----------------------------| | NAMESPACE | NAME | TARGET PORT | URL | |----------------------|------------------------------------|--------------------|-----------------------------| | default | kubernetes | No node port | | default | minikube-air-app-manager-service | appmanager-http/80 | http://192.168.99.117:30640 | | default | minikube-air-cors-anywhe-service | ca-http/80 | http://192.168.99.117:31118 | | default | minikube-dgraph-alpha | No node port | | default | minikube-dgraph-alpha-headless | No node port | | default | minikube-dgraph-ratel | No node port | | default | minikube-dgraph-zero | No node port | | default | minikube-dgraph-zero-headless | No node port | | default | minikube-mosquitto-service | mosquitto/443 | http://192.168.99.117:30987 | | kube-system | ingress-nginx-controller-admission | No node port | | kube-system | kube-dns | No node port | | kubernetes-dashboard | dashboard-metrics-scraper | No node port | | kubernetes-dashboard | kubernetes-dashboard | No node port | |----------------------|------------------------------------|--------------------|-----------------------------| Step 2: Download basic demo Download the basic demo file\nUnzip basicdemo.zip\nThen, change to the folder just unzipped\ncd basicdemo Step 3: Start Edgex Core components Inside your basicdemo folder run\n./startEdgex.sh Step 4: Get Edgex Gateway API security token Inside your basicdemo folder run\n./getSecurityToken.sh Copy the access token for tibuser, you will need it to configure AIR components.\nStep 5: Configure Edgex AIR Components Use the information from step 1 (endpoints) and step 4 (security token) to modify the basicdemo/.env file. This file is used to provide AIR environment variables to docker-compose.\nOpen the file and replace the following variables using values for your environment and the information returned from the service list:\nGATEWAY_ID=changeme GATEWAY_DESCRIPTION=changeme GATEWAY_HOSTNAME=localhost GATEWAY_LATITUDE=36.0 GATEWAY_LONGITUDE=-98.0 GATEWAY_ACCESS_TOKEN=changeme GATEWAY_METADATA_PUBLISH_INTERVAL_SECS=30 AIR_MQTT_HOSTNAME=changeme AIR_MQTT_PORT=changeme AIR_MQTT_USER=mqtt_admin AIR_MQTT_PASSWORD=mqtt_admin AIR_MQTT_DATA_TOPIC=EdgexGatewayData AIR_MQTT_NOTIFICATION_TOPIC=EdgexGatewayNotification Please note that the GATEWAY_ID is the identifier that will be used to identify your deployment in the AIR UI.\nStep 6: Start Edgex AIR components Inside your basicdemo folder run\n./startEdgeAIR.sh Congratulations!! Project Air edge basic demo is running\nUninstallation Steps Step 1: stop the demo Inside your basicdemo folder run\n./stopEdgex.sh ","excerpt":"Introduction The following steps will guide you through the configuration and how to run the edge …","ref":"https://tibcosoftware.github.io/labs-air/docs/getting-started-minikube/start-the-edge/","title":"Start the Edge"},{"body":"Introduction Once a Device Grouping has been created, a connection has been established with Edgex devices and now we wil show you how to configure Messaging Protocos and Data Stores that will be used to receive and store data from devices. The following steps will guide you through the configuration of messaging protocols and data stores.\nPrerequisites Prerequisite 1: Edgex Edgex is a vendor neutral open source platform at the edge of the network that interacts with physical devices, sensors, actuators and other IoT objects. It enables the interoperability between devices and applications at the edge and at the cloud.\n Edgex  Every running Edgex platform will provide one or more Service to export data from the edge. From a running instance of Edgex, gather the following information from each of the available Export Services:\n Transport used: MQTT, Kafka or TCM Connection URL Connection credentials  Prerequisite 2: Data Store Information Device data can be stored in one or several data stores depending on the use case requirements. Gather the following information for each data store:\n Connection URL Connection Credentials  Prerequisite 3: Data Store Table Setup For each required data store, the user needs to configure the datastate and create tables to store the data. Project AIR provides scripts with SQL commands to create the required artifacts.\nFollowing is an example sql script to create the artifact for a Postgres Database. Postgres SQL script\nAccessing Endpoints Configuration Step 1: From the Gateways page, select the Device Group you want to configure. Step 2: Click the Endpoints Configuration button. Step 3: The Endpoint configuration page should be displayed. Adding Messaging Protocols Step 1: Select the desired protocol from the pulldown menu under the Protocol Details panel Step 2: Enter required information for the selected protocol Step 2: Click the Add Protocol button. The new protocol configuration should be shown in the Inbound Protocols panel Adding Data Stores Step 1: Click the Data Stores tab Step 2: Select the desired data store from the pulldown menu under the DataStore Details panel Step 3: Enter required information for the selected data store Step 4: Click the Add Data Store button. The new data store configuration should be shown in the Data Stores panel ","excerpt":"Introduction Once a Device Grouping has been created, a connection has been established with Edgex …","ref":"https://tibcosoftware.github.io/labs-air/docs/users-guide/configuring-device-groups/","title":"Configuring Device Groups"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/labs-air/docs/configuration/","title":"Configuration Guide"},{"body":"Introduction The following steps will guide you through the configuration and how to run the UI locally.\nPrerequisites Prerequisite 1: Git Air\u0026rsquo;s UI is located in a github repository:\n Git  Prerequisite 2: npm Air\u0026rsquo;s UI is an angular application that uses npm to install dependencies:\n npm  Prerequisite 3: TIBCO Live Apps subscription (Free trial available) Project Air makes use of TIBCO Live Apps user management and application hosting capabilities, for a free trial please go to the page:\n TIBCO Cloud™ Live Apps  Running Steps Step 1: clone UI git clone https://github.com/TIBCOSoftware/labs-air-ui.git Step 2: configure UI endpoints In this steps we are connecting the UI to Air\u0026rsquo;s infrastructure endpoints\nFirst let\u0026rsquo;s query the endpoints\ndocker run -it tibcosoftware/labs-air-aws-cli air show-endpoints You should see 3 endpoints being displayed something like:\n{'service_name': 'core-air-cors-anywhere-service', 'hostname': '\u0026lt;someawsdns\u0026gt;.us-west-2.elb.amazonaws.com', 'ports': [80]} {'service_name': 'core-ingress-nginx-controller', 'hostname': '\u0026lt;someawsdns\u0026gt;.us-west-2.elb.amazonaws.com', 'ports': [80, 443]} {'service_name': 'core-mosquitto-service', 'hostname': '\u0026lt;someawsdns\u0026gt;.us-west-2.elb.amazonaws.com', 'ports': [443]} Then, let\u0026rsquo;s use those endpoints to configure the UI.\nOpen the file proxy.conf.prod.us.json and replace the following entries at the end of the json file with the endpoints from previous step.\n \u0026quot;/edgex/remotegateway/*\u0026quot;: { \u0026quot;target\u0026quot;: \u0026quot;http://\u0026lt;Add-Your-air-cors-anywhere-service-Enpoint-Here\u0026gt;\u0026quot;, \u0026quot;secure\u0026quot;: false, \u0026quot;changeOrigin\u0026quot;: true, \u0026quot;logLevel\u0026quot;: \u0026quot;info\u0026quot;, \u0026quot;pathRewrite\u0026quot;:{\u0026quot;^/edgex/remotegateway\u0026quot; : \u0026quot;\u0026quot;} }, \u0026quot;/airEndpoint/*\u0026quot;: { \u0026quot;target\u0026quot;: \u0026quot;http://\u0026lt;Add-Your-ingress-nginx-controller-Enpoint-Here\u0026gt;\u0026quot;, \u0026quot;secure\u0026quot;: \u0026quot;false\u0026quot;, \u0026quot;changeOrigin\u0026quot;: true, \u0026quot;logLevel\u0026quot;: \u0026quot;info\u0026quot;, \u0026quot;pathRewrite\u0026quot;:{\u0026quot;^/airEndpoint\u0026quot; : \u0026quot;\u0026quot;} } Step 3: npm install cd labs-air-ui npm install Step 4: start the UI npm run serve_us Congratulations!! Project Air UI is started on https://localhost:4200\n","excerpt":"Introduction The following steps will guide you through the configuration and how to run the UI …","ref":"https://tibcosoftware.github.io/labs-air/docs/getting-started-aws/start-the-ui/","title":"Start the UI"},{"body":"Introduction The following steps will guide you through the configuration and how to run the UI locally.\nPrerequisites Prerequisite 1: Git Air\u0026rsquo;s UI is located in a github repository:\n Git  Prerequisite 2: npm Air\u0026rsquo;s UI is an angular application that uses npm to install dependencies:\n npm  Prerequisite 3: TIBCO Live Apps subscription (Free trial available) Project Air makes use of TIBCO Live Apps user management and application hosting capabilities, for a free trial please go to the page:\n TIBCO Cloud™ Live Apps  Running Steps Step 1: clone UI git clone https://github.com/TIBCOSoftware/labs-air-ui.git Step 2: configure UI endpoints In this steps we are connecting the UI to Air\u0026rsquo;s infrastructure endpoints\nFirst: Get minikube ip\nminikube ip Second: Get the service list\nminikube service list You should see something like this:\n|----------------------|------------------------------------|--------------------|-----------------------------| | NAMESPACE | NAME | TARGET PORT | URL | |----------------------|------------------------------------|--------------------|-----------------------------| | default | kubernetes | No node port | | default | minikube-air-app-manager-service | appmanager-http/80 | http://192.168.99.117:30640 | | default | minikube-air-cors-anywhe-service | ca-http/80 | http://192.168.99.117:31118 | | default | minikube-dgraph-alpha | No node port | | default | minikube-dgraph-alpha-headless | No node port | | default | minikube-dgraph-ratel | No node port | | default | minikube-dgraph-zero | No node port | | default | minikube-dgraph-zero-headless | No node port | | default | minikube-mosquitto-service | mosquitto/443 | http://192.168.99.117:30987 | | kube-system | ingress-nginx-controller-admission | No node port | | kube-system | kube-dns | No node port | | kubernetes-dashboard | dashboard-metrics-scraper | No node port | | kubernetes-dashboard | kubernetes-dashboard | No node port | |----------------------|------------------------------------|--------------------|-----------------------------| Then, let\u0026rsquo;s use those endpoints to configure the UI.\nOpen the file proxy.conf.prod.us.json and replace the following entries at the end of the json file with the endpoints from previous step.\nReplace \u0026lt;Add-Your-ingress-nginx-controller-Enpoint-Here\u0026gt; with the ip you got from \u0026lsquo;minikube ip\u0026rsquo; command in step 2.\n \u0026quot;/edgex/remotegateway/*\u0026quot;: { \u0026quot;target\u0026quot;: \u0026quot;http://\u0026lt;Add-Your-air-cors-anywhere-service-Enpoint-Here\u0026gt;\u0026quot;, \u0026quot;secure\u0026quot;: false, \u0026quot;changeOrigin\u0026quot;: true, \u0026quot;logLevel\u0026quot;: \u0026quot;info\u0026quot;, \u0026quot;pathRewrite\u0026quot;:{\u0026quot;^/edgex/remotegateway\u0026quot; : \u0026quot;\u0026quot;} }, \u0026quot;/airEndpoint/*\u0026quot;: { \u0026quot;target\u0026quot;: \u0026quot;http://\u0026lt;Add-Your-ingress-nginx-controller-Enpoint-Here\u0026gt;\u0026quot;, \u0026quot;secure\u0026quot;: \u0026quot;false\u0026quot;, \u0026quot;changeOrigin\u0026quot;: true, \u0026quot;logLevel\u0026quot;: \u0026quot;info\u0026quot;, \u0026quot;pathRewrite\u0026quot;:{\u0026quot;^/airEndpoint\u0026quot; : \u0026quot;\u0026quot;} } Step 3: npm install cd labs-air-ui npm install Step 4: start the UI npm run serve_us Congratulations!! Project Air UI is started on https://localhost:4200\n","excerpt":"Introduction The following steps will guide you through the configuration and how to run the UI …","ref":"https://tibcosoftware.github.io/labs-air/docs/getting-started-minikube/start-the-ui/","title":"Start the UI"},{"body":"Introduction TIBCO Project AIR enables users to configure what to do with data from edge devices. Users can configure a Data Pipeline to sequence, filter, stream data and specify a data store based on your business logic. A typical pipeline configuration consists of activities that define the messaging protocol to receive data, define operations on the data (filtering, streaming, rules) and the data stores. This section will guide you through all the steps required to create data pipelines.\nPrerequisites Prerequisite 1: Device Groups Configuration Before you begin, make sure the messaging protocols and data stores configuration for device groups have been configured. See Configuring Device Groups.\nAdding Data Pipelines Step 1: From the Gateways page, select the Device Group you want to configure and click Data Pipelines. Step 2: The Data Pipelines page should be displayed. Step 3: On the Steps Panel, select the type of Pipeline and then click Next. You can configure pipelines for device data as well as pipelines for notificatios.\nStep 4: Select and review the messaging protocol and then click Next All the messaging protocols that have previously been configured in the Device Groups Configuration will be available for selection\nStep 5: Select the devices to filter and then click Next. Data can be filtered from going through the pipeline.\nStep 6: Configure streaming operations for a device instrument and then click Next TIBCO Project AIR allows users to perform streaming operations on instrument data. For example you can aggregate the values on a time window and prapagate only the results of the aggregation operation.\nStep 7: Select and review the data store and then click Next All the data stores that have previously been configured in the Device Groups Configuration will be available for selection\nStep 8: Click Save Data Pipeline button. Save the pipeline configuration. The configuration can then be deployed to a Kubernetes cluster either local or on the cloud.\nDeploying Data Pipelines Once data pipelines have been configured, they can be deployed dynamically to Kubernetes cluster running locally or on the cloud.\nStep 1: Select the desired pipeline from the Pipelines table and then click Deploy Pipeline Step 2: The pipeline is deployed and should show the Status as Deployed/Ready Updeploying Data Pipelines If data from a device is not longer required or if needs to be modified, you can undeploy the pipeline. Undeploying will remove the engine processing the data from the Kubernetes cluster.\nStep 1: Select the desired pipeline from the Pipelines table and then click Undeploy Pipeline Step 2: The pipeline is undeployed and should show the Status as Undeployed Deleting Data Pipelines If data pipelines are not longer required, you can delete the pipeline. Notice that deployed pipelines can\u0026rsquo;t be deleted. They need to be undeployed first.\nStep 1: Select the desired pipeline from the Pipelines table and then click Delete Pipeline Step 2: The pipeline is deleted and should not appear in the Pipelines table. ","excerpt":"Introduction TIBCO Project AIR enables users to configure what to do with data from edge devices. …","ref":"https://tibcosoftware.github.io/labs-air/docs/users-guide/adding-data-pipelines/","title":"Data Pipelines"},{"body":"Welcome to the Using TIBCO Project AIR™ Guide.\nThis guide contains the following:\n","excerpt":"Welcome to the Using TIBCO Project AIR™ Guide.\nThis guide contains the following:","ref":"https://tibcosoftware.github.io/labs-air/docs/users-guide/","title":"Using TIBCO Project AIR™ Guide"},{"body":"TIBCO Project AIR has the capabilities to inspect edge devices metadata as well as data generated by those devices. Device Metadata provides information about the device and all the instruments (sensors, actuators) associated with the device. It provides information on all the operations available on the devices as well as the type of data generated by the devices. This section will guide you through all the steps to inspect device metadata as well as how to visualize data generated by the devices.\nPrerequisites Prerequisite 1: Edgex Connection In order to access device metadata, Project AIR needs to be configured to access an Edgex Gateway. See Manage Device Groups\nPrerequisite 2: Device Groups Configuration Before you can see device data, make sure the messaging protocols and data stores configuration for device groups have been configured. See Configuring Device Groups.\nInspecting Device Metadata Step 1: From the Main Menu, select Devices. Step 2: Select the Device Group for the devices you want to inspect. Step 3: Viewing all devices The list of devices available will be displayed. Now you can select any of those devices to see the metadata and data details\nStep 4: Inspect Device Latest Data and Metadata Select a device from the Devices table (1) to see a summary of the current data sent by the device instruments (2) and a list of the instrument with a description for each of them (3)\nStep 5: Inspecting Device Metadata Select an instrument from the Instruments table (1) to view the device metadata information (2) like data value type, minimun value, maximun value, etc.\nStep 6: Visualizing Data Data will also be visualized. Data is viewved depending the data type. For example, for an instrument emitting status information (discrete value), a timeline is displayed showing the different states and times the instrument has been on that state.\nStep 7: Visualizing time series data Selecting a different instrument, the metadata and data information will be displayed. For example, the Voltage instrument emits numeric data. In that case, a chart with a history of values is displayed.\nStep 8: Viewing Streaming Data If the device is transmitting data, the last chart will display an streaming chart with the latest values transmitted by the device\nStep 9: Visualization for different data types As indicated previously, different visualization can be used for different data types. In this example, data from a vehicle will be shown\nStep 10: Visualizing geo location data Selecting an instrument with geo location data will display the position of the instrument on a map.\n","excerpt":"TIBCO Project AIR has the capabilities to inspect edge devices metadata as well as data generated by …","ref":"https://tibcosoftware.github.io/labs-air/docs/users-guide/inspecting-devices/","title":"Inspecting Devices"},{"body":"Introduction TIBCO Project AIR enables users to work with data at the edge. The user can configure rules that can be applied to device data before it is sent to the cloud. It also provides capabilities to configure rules to trigger actions on other devices if a condition is met. A typical rule configuration consists of conditions on the values of a device, and actions to be taken when the conditions are met. This section will guide you through all the steps required to create edge rules.\nPrerequisites Prerequisite 1: Device Groups Configuration Before you begin, make sure the messaging protocols and data stores configuration for device groups have been configured. This is required if the rule will be configured to send notifications to the cloud. See Configuring Device Groups.\nAdding Edge Rules Step 1: From the Main Menu, select Edge Rules. Step 2: Select the Device Group for which the rule is going to be configured for. Step 3: On the Rule Definition panel, configure the rule by enter the following information and then click Add Rule  Rule Name Rule Description Enter conditions  Select Device Select a metric (instrument) on the device Select the conditions to apply and configure the operation and values to compare to.   Enter actions  Select the actions to apply and configure the notification or action to be sent to another device.    The configuration can then be deployed dynamically to the edge.\nStep 4: Rule is saved for later use and deployment. Deploying Rules Once the rules have been configured, they can be deployed dynamically to a rules engine running at the edge.\nStep 1: Select the desired rule from the Rules table Step 2: Review rule and click the Deploy Rule button. Viewing Notifications Rules can be configured to send notifications to cloud applications and data stores. The followin steps show how to view notifications.\nStep 1: From the Main Menu, select Notifications. Step 2: Review all notifications Updating Rules If a rule needs to be modified, make sure the rule is first undeployed and then update conditions and actions.\nStep 1: Select the desired rule from the Rules table and then click Update Rule Step 2: The rule is updated Updeploying Rules If a rule is not longer required or if needs to be modified, you can undeploy the rule. Undeploying will remove the rule from the rule engine running on the edge.\nStep 1: Select the desired rule from the Rules table and then click Undeploy Rule Step 2: The rule is undeployed Deleting Rules If rules are not longer required, you can delete the rule. Notice that deployed rules can\u0026rsquo;t be deleted. They need to be undeployed first.\nStep 1: Select the desired rule from the Rules table and then click Delete Rule Step 2: The rule is deleted and should not appear in the Rules table. ","excerpt":"Introduction TIBCO Project AIR enables users to work with data at the edge. The user can configure …","ref":"https://tibcosoftware.github.io/labs-air/docs/users-guide/adding-edge-rules/","title":"Edge Rules"},{"body":"Coming soon!\n","excerpt":"Coming soon!","ref":"https://tibcosoftware.github.io/labs-air/docs/users-guide/onboarding-new-devices/","title":"Onboarding New Devices"},{"body":"TIBCO LABS Project AIR™ Details\n","excerpt":"TIBCO LABS Project AIR™ Details","ref":"https://tibcosoftware.github.io/labs-air/docs/","title":"Documentation"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/labs-air/blog/releases/","title":"New Releases"},{"body":"first public Implementation of the TIBCO LABS™ Project AIR™, containing:\n used EdgeX Foundry Assets TIBCO Flogo Services DGraph configurations ComputeDB Datastore configuration IoT UI as Cloud Starter Implementation Spotfire Dashboard   please have a look back soon here.\n ","excerpt":"first public Implementation of the TIBCO LABS™ Project AIR™, containing:\n used EdgeX Foundry Assets …","ref":"https://tibcosoftware.github.io/labs-air/blog/2020/02/26/initial-release/","title":"Initial Release"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/labs-air/index.json","title":""},{"body":"  #td-cover-block-0 { background-image: url(/labs-air/about/featured-background_hu0bf202e9b0c50adb82b333dd3f6f434d_393591_960x540_fill_q75_catmullrom_bottom.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/labs-air/about/featured-background_hu0bf202e9b0c50adb82b333dd3f6f434d_393591_1920x1080_fill_q75_catmullrom_bottom.jpg); } }  Project AIR™ by TIBCO LABS™ UI and more for EdgeX Foundry API's        More Details about this Initiative here TIBCO LABS™ Project AIR™ Wiki, on     --  TIBCO LABS™ is a program designed to provide customers and partners with a mechanism for actively participating in TIBCO’s history of innovation. TIBCO has always been at the forefront of innovation, and TIBCO LABS™ allows participants to share in this history by collaboratively building solutions to today’s challenging problems, previewing new capabilities, and accessing emerging technologies in areas such as blockchain, AI / ML and IoT. Through TIBCO LABS™, customers and partners can gain insight into TIBCO’s innovation activities, participate in shaping the form of these activities in the years to come, and benefit from TIBCO’s leadership position in integration and analytics. \n    \n     BSD 3-Clause License  Copyright © 2020 TIBCO Software Inc. Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n  Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n  Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n  Neither the name of TIBCO Software Inc. nor the names of any contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT OWNER AND CONTRIBUTORS \u0026ldquo;AS IS\u0026rdquo; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n    ","excerpt":"#td-cover-block-0 { background-image: …","ref":"https://tibcosoftware.github.io/labs-air/about/","title":"About Project AIR™"},{"body":"This is the blog section. It has two categories: News and Releases.\nEntries in these directories are listed in reverse chronological order.\n","excerpt":"This is the blog section. It has two categories: News and Releases.\nEntries in these directories are …","ref":"https://tibcosoftware.github.io/labs-air/blog/","title":"Blog"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/labs-air/community/","title":"Community"},{"body":"  #td-cover-block-0 { background-image: url(/labs-air/featured-background-org_hu54644cfbb8309b58f400117071f34abd_6110735_960x540_fill_q75_catmullrom_top.jpg); } @media only screen and (min-width: 1200px) { #td-cover-block-0 { background-image: url(/labs-air/featured-background-org_hu54644cfbb8309b58f400117071f34abd_6110735_1920x1080_fill_q75_catmullrom_top.jpg); } }  Project AIR™ Learn More   Download   Intelligent insights from device to boardroom\n\n        Project AIR™ by TIBCO LABS™\nWith Project AIR™, you can register and interact with IoT Device Farm to process derived data anywhere that is needed and store the data as needed to analyze and address a large number of analytical use cases extending any layer of its architecture as needed. Connect your IoT Device Farm and take action in TIBCO\u0026rsquo;s connected intelligence cloud.\n      Get Started Follow the documentation, and start today !\nRead more …\n   User Guide How we benefit from TIBCO Cloud™.\nRead more …\n   Releases Find latest release details in our Blog.\nRead more …\n \n       Contact us! Reach us for more details, or engage us today !\nRead more …\n   Contributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\n   Follow us on Twitter! For announcement of latest features etc\u0026hellip;\nRead more …\n    ","excerpt":"#td-cover-block-0 { background-image: …","ref":"https://tibcosoftware.github.io/labs-air/","title":"Project AIR™"},{"body":"","excerpt":"","ref":"https://tibcosoftware.github.io/labs-air/search/","title":"Search Results"}]