# AWS Serverless Application Model (SAM)
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: ConvUI Services.
Parameters:
  CrossStackName:
    Type: String
  Stage:
    Type: String
    Default: dev
  LambdaTimeout:
    Type: Number
    Default: 3
  JwtSecret:
    Type: String
  JwtPassword:
    Type: String
  TscSessionKey:
    Type: String
  ConvuiPassword:
    Type: String
  TenantUrl:
    Type: String
  ExtAccountTenantId:
    Type: String
  SessionTimeout:
    Type: Number
    Default: 1800
  TscIntegration:
    Type: String
    Default: FALSE
Globals:
  Function:
    Runtime: nodejs6.10
    Timeout: !Ref LambdaTimeout
    VpcConfig:
      SecurityGroupIds:
        - Fn::ImportValue:
            !Sub "${CrossStackName}-ClusterSecGroupId"
      SubnetIds:
        - Fn::ImportValue:
            !Sub "${CrossStackName}-PrivateSubnetId"
    Environment:
      Variables:
        STAGE: !Ref Stage
        JWT_SECRET: !Ref JwtSecret
        JWT_PASSWORD: !Ref JwtPassword
        TSC_SESSION_KEY: !Ref TscSessionKey
        CONVUI_PASSWORD: !Ref ConvuiPassword
        TENANT_URL: !Ref TenantUrl
        EXTACCOUNT_TENANT_ID: !Ref ExtAccountTenantId
        SESSION_TIMEOUT: !Ref SessionTimeout
        TSC_INTEGRATION: !Ref TscIntegration
        DOMAINS_TABLE: !Sub 'convui-${Stage}-domains'
        TRANSITIONS_TABLE: !Sub 'convui-${Stage}-transitions'
        OBJECTIVES_TABLE: !Sub 'convui-${Stage}-objectives'
        USERS_TABLE: !Sub 'convui-${Stage}-users'
        INTENT_HISTORY_TABLE: !Sub 'convui-${Stage}-intentHistory'
        PROFILES_TABLE: !Sub 'convui-${Stage}-profiles'
        USERLOGS_TABLE: !Sub 'convui-${Stage}-userlogs'

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        paths:
          "authenticate":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${login.Arn}/invocations
              response: {}
          "api/start":
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${start.Arn}/invocations
                response: {}
              security:
                - AuthorizeCustom: []
          "api/message":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${message.Arn}/invocations
                response: {}
              security:
                - AuthorizeCustom: []
          "api/intent":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${intent.Arn}/invocations
                response: {}
              security:
                - AuthorizeCustom: []
          "api/context":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${context.Arn}/invocations
                response: {}
              security:
                - AuthorizeCustom: []
          "admin/ping":
            get:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ping.Arn}/invocations
                response: {}
              security:
                - AuthorizeBasic: []
          "admin/domain":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${saveDomain.Arn}/invocations
                response: {}
              security:
                - AuthorizeBasic: []
          "admin/adduser":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${addUser.Arn}/invocations
                response: {}
              security:
                - AuthorizeBasic: []
        securityDefinitions:
          AuthorizeCustom:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "oauth2"
            x-amazon-apigateway-authorizer:
              type: "request"
              identitySource: "method.request.header.cookie"
              authorizerUri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${authorize.Arn}/invocations"
              authorizerCredentials:
                Fn::Sub: ${ApiGatewayAuthorizerRole.Arn}
              authorizerResultTtlInSeconds: 60
          AuthorizeBasic:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "oauth2"
            x-amazon-apigateway-authorizer:
              type: "token"
              authorizerUri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${authorizeBasic.Arn}/invocations"
              authorizerCredentials:
                Fn::Sub: ${ApiGatewayAuthorizerRole.Arn}
              authorizerResultTtlInSeconds: 60
  ApiGatewayAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: "InvokeAuthorizerFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                  - iam:PassRole
                Resource:
                  - Fn::Sub: ${authorize.Arn}
                  - Fn::Sub: ${authorizeBasic.Arn}
  CustomAuthorizerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"
  login:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/login.handler
      CodeUri: ./../Lambda/graphbot.zip
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        PostAuthenticate:
          Type: Api
          Properties:
            Path: authenticate
            Method: post
            RestApiId: !Ref ApiGateway
  loginConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref login
      Principal: apigateway.amazonaws.com
  authorize:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/authorize.handler
      CodeUri: ./../Lambda/graphbot.zip
      Policies: AWSLambdaVPCAccessExecutionRole
      Role:
        Fn::Sub: ${CustomAuthorizerFunctionRole.Arn}
  authorizeBasic:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/authorizeBasic.handler
      CodeUri: ./../Lambda/graphbot.zip
      Policies: AWSLambdaVPCAccessExecutionRole
      Role:
        Fn::Sub: ${CustomAuthorizerFunctionRole.Arn}
  ping:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/ping.handler
      CodeUri: ./../Lambda/graphbot.zip
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        GetPing:
          Type: Api
          Properties:
            Path: admin/ping
            Method: ANY
            RestApiId: !Ref ApiGateway
  pingConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ping
      Principal: apigateway.amazonaws.com
  saveDomain:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/saveDomain.handler
      CodeUri: ./../Lambda/graphbot.zip
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        PostSaveDomain:
          Type: Api
          Properties:
            Path: admin/domain
            Method: post
            RestApiId: !Ref ApiGateway
  saveDomainConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref saveDomain
      Principal: apigateway.amazonaws.com
  addUser:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/createUser.handler
      CodeUri: ./../Lambda/graphbot.zip
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        PostUser:
          Type: Api
          Properties:
            Path: admin/adduser
            Method: post
            RestApiId: !Ref ApiGateway
  addUserConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref addUser
      Principal: apigateway.amazonaws.com
  start:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/start.handler
      CodeUri: ./../Lambda/graphbot.zip
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        GetStart:
          Type: Api
          Properties:
            Path: api/start
            Method: ANY
            RestApiId: !Ref ApiGateway
  startConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref start
      Principal: apigateway.amazonaws.com
  message:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/message.handler
      CodeUri: ./../Lambda/graphbot.zip
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        PostMessage:
          Type: Api
          Properties:
            Path: api/message
            Method: post
            RestApiId: !Ref ApiGateway
  messageConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref message
      Principal: apigateway.amazonaws.com
  intent:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/intent.handler
      CodeUri: ./../Lambda/graphbot.zip
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        PostIntent:
          Type: Api
          Properties:
            Path: api/intent
            Method: post
            RestApiId: !Ref ApiGateway
  intentConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref intent
      Principal: apigateway.amazonaws.com
  context:
    Type: AWS::Serverless::Function
    Properties:
      Handler: functions/saveContext.handler
      CodeUri: ./../Lambda/graphbot.zip
      Policies:
        - AmazonDynamoDBFullAccess
        - AWSLambdaVPCAccessExecutionRole
      Events:
        PostContext:
          Type: Api
          Properties:
            Path: api/context
            Method: post
            RestApiId: !Ref ApiGateway
  contextConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref context
      Principal: apigateway.amazonaws.com

Outputs:
  ApiGatewayId:
    Description: Api Id
    Value: !Sub "${ApiGateway}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiGatewayId"
  ApiGatewayInvokeURL:
    Description: URL to invoke the API
    Value: !Sub "https://${ApiGateway}.execute-api.us-east-1.amazonaws.com/${Stage}"
