# AWS Serverless Application Model (SAM)
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: TSC Services.
Parameters:
  CrossStackName:
    Type: String
  Stage:
    Type: String
    Default: dev
  LambdaTimeout:
    Type: Number
    Default: 3
  JwtSecret:
    Type: String
  AccountUrl:
    Type: String
  TenantUrl:
    Type: String
  ExtAccountUrl:
    Type: String
  ExtAccountTenantId:
    Type: String
  ExtAccountTenantAuth:
    Type: String
  ExtAccountTenantPassw:
    Type: String
  JwtPassword:
    Type: String
  TscSessionKey:
    Type: String
Globals:
  Function:
    Runtime: nodejs6.10
    Timeout: !Ref LambdaTimeout
    VpcConfig:
      SecurityGroupIds:
        - Fn::ImportValue:
            !Sub "${CrossStackName}-ClusterSecGroupId"
      SubnetIds:
        - Fn::ImportValue:
            !Sub "${CrossStackName}-PrivateSubnetId"
    Environment:
      Variables:
        STAGE: !Ref Stage
        JWT_SECRET: !Ref JwtSecret
        ACCOUNT_URL: !Ref AccountUrl
        TENANT_URL: !Ref TenantUrl
        EXTACCOUNT_URL: !Ref ExtAccountUrl
        EXTACCOUNT_TENANT_ID: ! Ref ExtAccountTenantId
        EXTACCOUNT_TENANT_AUTH: !Ref ExtAccountTenantAuth
        EXTACCOUNT_TENANT_PASSW: !Ref ExtAccountTenantPassw
        JWT_PASSWORD: !Ref JwtPassword
        TSC_SESSION_KEY: !Ref TscSessionKey
Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Stage
      DefinitionBody:
        swagger: 2.0
        info:
          title:
            Ref: AWS::StackName
        paths:
          "api/test":
            get:
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${test.Arn}/invocations
                response: {}
              security:
                - AuthorizeCustom: []
          "/idm/v1/cookie":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${cookie.Arn}/invocations
                response: {}
          "/idm/v1/delete-cookie":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${deletecookie.Arn}/invocations
                response: {}
          "/idm/v1/reauthorize":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${reauthorize.Arn}/invocations
                response: {}
          "/idm/logout":
            post:
              x-amazon-apigateway-integration:
                httpMethod: POST
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${logout.Arn}/invocations
                response: {}
          "/idm/v1/login-saml":
            get:
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${getloginsaml.Arn}/invocations
                response: {}
          "griddetails":
            post:
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${griddetails.Arn}/invocations
                response: {}
          "tsc/{proxy+}":
            post:
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tsc.Arn}/invocations
                response: {}
          "tsc-ws/{proxy+}":
            post:
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tscws.Arn}/invocations
                response: {}
          "tsc-ws-content/{proxy+}":
            post:
              x-amazon-apigateway-integration:
                httpMethod: GET
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tscwscontent.Arn}/invocations
                response: {}
        securityDefinitions:
          AuthorizeCustom:
            type: "apiKey"
            name: "Authorization"
            in: "header"
            x-amazon-apigateway-authtype: "custom"
            x-amazon-apigateway-authorizer:
              type: "token"
              authorizerUri:
                Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${tscauthorize.Arn}/invocations"
              authorizerCredentials:
                Fn::Sub: ${ApiGatewayAuthorizerRole.Arn}
              authorizerResultTtlInSeconds: 60
  ApiGatewayAuthorizerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "apigateway.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: "InvokeAuthorizerFunction"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - lambda:InvokeAsync
                  - lambda:InvokeFunction
                Resource:
                  - Fn::Sub: ${tscauthorize.Arn}
  CustomAuthorizerFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action: "*"
                Resource: "*"
  tscauthorize:
    Type: AWS::Serverless::Function
    Properties:
      Handler: authorize.handler
      CodeUri: ./../Lambda/tsclambda.zip
      Policies: AWSLambdaVPCAccessExecutionRole
      Role:
        Fn::Sub: ${CustomAuthorizerFunctionRole.Arn}
  test:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: ./../Lambda/tsclambda.zip
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        GetTest:
          Type: Api
          Properties:
            Path: api/test
            Method: ANY
            RestApiId: !Ref ApiGateway
  testConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref test
      Principal: apigateway.amazonaws.com
  cookie:
    Type: AWS::Serverless::Function
    Properties:
      Handler: idm/cookie.handler
      CodeUri: ./../Lambda/tsclambda.zip
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        PostCookie:
          Type: Api
          Properties:
            Path: /idm/v1/cookie
            Method: post
            RestApiId: !Ref ApiGateway
  cookieConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref cookie
      Principal: apigateway.amazonaws.com
  deletecookie:
    Type: AWS::Serverless::Function
    Properties:
      Handler: gnb/gnb-passthrough.handler
      CodeUri: ./../Lambda/tsclambda.zip
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        PostDeleteCookie:
          Type: Api
          Properties:
            Path: /idm/v1/delete-cookie
            Method: post
            RestApiId: !Ref ApiGateway
  deletecookieConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref deletecookie
      Principal: apigateway.amazonaws.com
  reauthorize:
    Type: AWS::Serverless::Function
    Properties:
      Handler: gnb/gnb-passthrough.handler
      CodeUri: ./../Lambda/tsclambda.zip
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        PostDeleteCookie:
          Type: Api
          Properties:
            Path: /idm/v1/reauthorize
            Method: post
            RestApiId: !Ref ApiGateway
  reauthorizeConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref reauthorize
      Principal: apigateway.amazonaws.com
  logout:
    Type: AWS::Serverless::Function
    Properties:
      Handler: idm/logout.handler
      CodeUri: ./../Lambda/tsclambda.zip
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        PostLogout:
          Type: Api
          Properties:
            Path: /idm/logout
            Method: post
            RestApiId: !Ref ApiGateway
  logoutConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref logout
      Principal: apigateway.amazonaws.com
  getloginsaml:
    Type: AWS::Serverless::Function
    Properties:
      Handler: idm/redirect.handler
      CodeUri: ./../Lambda/tsclambda.zip
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        GetLogingSaml:
          Type: Api
          Properties:
            Path: /idm/v1/login-saml
            Method: ANY
            RestApiId: !Ref ApiGateway
  getloginsamlConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref getloginsaml
      Principal: apigateway.amazonaws.com
  griddetails:
    Type: AWS::Serverless::Function
    Properties:
      Handler: gnb/gnb-passthrough.handler
      CodeUri: ./../Lambda/tsclambda.zip
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        GetGridDetails:
          Type: Api
          Properties:
            Path: griddetails
            Method: ANY
            RestApiId: !Ref ApiGateway
  griddetailsConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref griddetails
      Principal: apigateway.amazonaws.com
  tsc:
    Type: AWS::Serverless::Function
    Properties:
      Handler: gnb/gnb-passthrough.handler
      CodeUri: ./../Lambda/tsclambda.zip
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        GetTsc:
          Type: Api
          Properties:
            Path: tsc/{proxy+}
            Method: ANY
            RestApiId: !Ref ApiGateway
  tscConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref tsc
      Principal: apigateway.amazonaws.com
  tscws:
    Type: AWS::Serverless::Function
    Properties:
      Handler: gnb/gnb-passthrough.handler
      CodeUri: ./../Lambda/tsclambda.zip
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        GetTscWsContent:
          Type: Api
          Properties:
            Path: tsc-ws/{proxy+}
            Method: ANY
            RestApiId: !Ref ApiGateway
  tscwsConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref tscws
      Principal: apigateway.amazonaws.com
  tscwscontent:
    Type: AWS::Serverless::Function
    Properties:
      Handler: gnb/gnb-passthrough.handler
      CodeUri: ./../Lambda/tsclambda.zip
      Policies:
        - AWSLambdaVPCAccessExecutionRole
      Events:
        GetTscWsContent:
          Type: Api
          Properties:
            Path: tsc-ws-content/{proxy+}
            Method: ANY
            RestApiId: !Ref ApiGateway
  tscwscontentConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref tscwscontent
      Principal: apigateway.amazonaws.com

Outputs:
  ApiGatewayId:
    Description: Api Id
    Value: !Sub "${ApiGateway}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiGatewayId"
  ApiGatewayInvokeURL:
    Description: URL to invoke the API
    Value: !Sub "https://${ApiGateway}.execute-api.us-east-1.amazonaws.com/${Stage}"
