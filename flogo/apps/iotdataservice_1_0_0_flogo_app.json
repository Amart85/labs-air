{
    "imports": [
        "github.com/project-flogo/flow",
        "git.tibco.com/git/product/ipaas/wi-contrib.git/contributions/General/activity/log",
        "git.tibco.com/git/product/ipaas/wi-contrib.git/contributions/General/activity/mapper",
        "git.tibco.com/git/product/ipaas/wi-mqtt.git/Mqtt/activity/publish",
        "github.com/project-flogo/contrib/activity/actreturn",
        "git.tibco.com/git/product/ipaas/wi-contrib.git/contributions/General/trigger/rest"
    ],
    "name": "iotdataservice_1_0_0_flogo_app",
    "description": " ",
    "version": "1.1.0",
    "type": "flogo:app",
    "appModel": "1.1.0",
    "triggers": [
        {
            "ref": "#rest",
            "name": "ReceiveHTTPMessage",
            "description": "",
            "settings": {
                "port": 9999,
                "secureConnection": false,
                "serverKey": "",
                "caCertificate": "",
                "swagger": ""
            },
            "id": "ReceiveHTTPMessage",
            "handlers": [
                {
                    "description": "",
                    "settings": {
                        "Method": "POST",
                        "Path": "/iotdataservice",
                        "OutputValidation": false
                    },
                    "action": {
                        "ref": "github.com/project-flogo/flow",
                        "settings": {
                            "flowURI": "res://flow:postIotdataservice_POST"
                        },
                        "input": {
                            "id": "=$.body.id",
                            "device": "=$.body.device",
                            "origin": "=$.body.origin",
                            "readings": {
                                "mapping": {
                                    "@foreach($.body.readings)": {
                                        "=": "$loop"
                                    }
                                }
                            }
                        },
                        "output": {
                            "code": 200
                        }
                    },
                    "reply": {
                        "code": 200,
                        "message": ""
                    },
                    "schemas": {
                        "reply": {},
                        "output": {
                            "queryParams": {
                                "type": "json",
                                "value": "{\"type\":\"object\",\"properties\":{}}",
                                "fe_metadata": "[]"
                            },
                            "headers": {
                                "type": "json",
                                "value": "{\"type\":\"object\",\"properties\":{}}",
                                "fe_metadata": "[]"
                            },
                            "body": {
                                "type": "json",
                                "value": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\",\n      \"default\": \"b710ad27-4eb0-417f-96b8-02830642d8a1\"\n    },\n    \"device\": {\n      \"type\": \"string\",\n      \"default\": \"Random-Integer-Device\"\n    },\n    \"origin\": {\n      \"type\": \"integer\",\n      \"default\": 1564113092999608300\n    },\n    \"readings\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"origin\": {\n            \"type\": \"integer\",\n            \"default\": 1564113092992998000\n          },\n          \"device\": {\n            \"type\": \"string\",\n            \"default\": \"Random-Integer-Device\"\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"default\": \"RandomValue_Int64\"\n          },\n          \"value\": {\n            \"type\": \"string\",\n            \"default\": \"-6427502364192134104\"\n          }\n        }\n      }\n    }\n  }\n}",
                                "fe_metadata": "{\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\",\n      \"default\": \"b710ad27-4eb0-417f-96b8-02830642d8a1\"\n    },\n    \"device\": {\n      \"type\": \"string\",\n      \"default\": \"Random-Integer-Device\"\n    },\n    \"origin\": {\n      \"type\": \"integer\",\n      \"default\": 1564113092999608300\n    },\n    \"readings\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"origin\": {\n            \"type\": \"integer\",\n            \"default\": 1564113092992998000\n          },\n          \"device\": {\n            \"type\": \"string\",\n            \"default\": \"Random-Integer-Device\"\n          },\n          \"name\": {\n            \"type\": \"string\",\n            \"default\": \"RandomValue_Int64\"\n          },\n          \"value\": {\n            \"type\": \"string\",\n            \"default\": \"-6427502364192134104\"\n          }\n        }\n      }\n    }\n  }\n}"
                            }
                        }
                    }
                }
            ]
        }
    ],
    "resources": [
        {
            "id": "flow:postIotdataservice_POST",
            "data": {
                "name": "postIotdataservice_POST",
                "description": "",
                "links": [
                    {
                        "id": 1,
                        "from": "LogMessage",
                        "to": "Mapper",
                        "type": "default"
                    },
                    {
                        "id": 2,
                        "from": "Mapper",
                        "to": "Mapper1",
                        "type": "default"
                    },
                    {
                        "id": 3,
                        "from": "Mapper1",
                        "to": "LogMessage1",
                        "type": "default"
                    },
                    {
                        "id": 4,
                        "from": "LogMessage1",
                        "to": "MQTTPub",
                        "type": "default"
                    },
                    {
                        "id": 5,
                        "from": "MQTTPub",
                        "to": "Return",
                        "type": "default"
                    }
                ],
                "tasks": [
                    {
                        "id": "LogMessage",
                        "name": "LogMessage",
                        "settings": {
                            "iterate": "=$flow.readings"
                        },
                        "type": "iterator",
                        "activity": {
                            "ref": "#log",
                            "input": {
                                "Log Level": "INFO",
                                "flowInfo": false,
                                "message": "=\"IoT Data Service : \"+$flow.id+\",\"+$flow.device+\",\"+$flow.origin+\",\"+$iteration[value].origin+\",\"+$iteration[value].device+\",\"+$iteration[value].name+\",\"+$iteration[value].value"
                            }
                        }
                    },
                    {
                        "id": "Mapper",
                        "name": "Mapper",
                        "activity": {
                            "ref": "#mapper",
                            "input": {
                                "input": {
                                    "mapping": {
                                        "id": "=$flow.id",
                                        "device": "=$flow.device",
                                        "origin": "=$flow.origin",
                                        "readings": {
                                            "@foreach($flow.readings)": {
                                                "=": "$loop"
                                            }
                                        }
                                    }
                                }
                            },
                            "schemas": {
                                "input": {
                                    "input": {
                                        "type": "json",
                                        "value": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"object\",\"properties\":{\"id\":{\"type\":\"string\"},\"device\":{\"type\":\"string\"},\"origin\":{\"type\":\"number\"},\"readings\":{\"type\":\"array\",\"items\":{\"type\":\"object\",\"properties\":{\"origin\":{\"type\":\"number\"},\"device\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}}}}}}",
                                        "fe_metadata": "{\n    \"id\": \"b710ad27-4eb0-417f-96b8-02830642d8a1\",\n    \"device\": \"Random-Integer-Device\",\n    \"origin\": 1564113092999608300,\n    \"readings\": [\n        {\n            \"origin\": 1564113092992998000,\n            \"device\": \"Random-Integer-Device\",\n            \"name\": \"RandomValue_Int64\",\n            \"value\": \"-6427502364192134104\"\n        }\n    ]\n}"
                                    }
                                },
                                "output": {
                                    "output": {
                                        "type": "json",
                                        "value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"device\": {\n      \"type\": \"string\"\n    },\n    \"origin\": {\n      \"type\": \"number\"\n    },\n    \"readings\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"origin\": {\n            \"type\": \"number\"\n          },\n          \"device\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"value\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}",
                                        "fe_metadata": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\": {\n      \"type\": \"string\"\n    },\n    \"device\": {\n      \"type\": \"string\"\n    },\n    \"origin\": {\n      \"type\": \"number\"\n    },\n    \"readings\": {\n      \"type\": \"array\",\n      \"items\": {\n        \"type\": \"object\",\n        \"properties\": {\n          \"origin\": {\n            \"type\": \"number\"\n          },\n          \"device\": {\n            \"type\": \"string\"\n          },\n          \"name\": {\n            \"type\": \"string\"\n          },\n          \"value\": {\n            \"type\": \"string\"\n          }\n        }\n      }\n    }\n  }\n}"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "Mapper1",
                        "name": "Mapper1",
                        "activity": {
                            "ref": "#mapper",
                            "input": {
                                "input": {
                                    "mapping": {
                                        "message": "=string.tostring($activity[Mapper].output)"
                                    }
                                }
                            },
                            "schemas": {
                                "input": {
                                    "input": {
                                        "type": "json",
                                        "value": "{\"$schema\":\"http://json-schema.org/draft-04/schema#\",\"type\":\"object\",\"properties\":{\"message\":{\"type\":\"string\"}}}",
                                        "fe_metadata": "{\n    \"message\":\"value\"\n}"
                                    }
                                },
                                "output": {
                                    "output": {
                                        "type": "json",
                                        "value": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}",
                                        "fe_metadata": "{\n  \"$schema\": \"http://json-schema.org/draft-04/schema#\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"message\": {\n      \"type\": \"string\"\n    }\n  }\n}"
                                    }
                                }
                            }
                        }
                    },
                    {
                        "id": "LogMessage1",
                        "name": "LogMessage1",
                        "activity": {
                            "ref": "#log",
                            "input": {
                                "Log Level": "INFO",
                                "flowInfo": false,
                                "message": "=$activity[Mapper1].output.message"
                            }
                        }
                    },
                    {
                        "id": "MQTTPub",
                        "name": "MQTTPub",
                        "activity": {
                            "ref": "#publish",
                            "input": {
                                "Connection": {
                                    "id": "a52886f0-af4d-11e9-920f-49d703a919c0",
                                    "type": "flogo:connector",
                                    "version": "1.0.0",
                                    "name": "connection",
                                    "hashTags": [],
                                    "inputMappings": {},
                                    "outputMappings": {},
                                    "iteratorMappings": {},
                                    "title": "MQTT Connector",
                                    "description": "MQTT Connector",
                                    "ref": "git.tibco.com/git/product/ipaas/wi-mqtt.git/Mqtt/connector/connection",
                                    "settings": [
                                        {
                                            "name": "name",
                                            "type": "string",
                                            "required": true,
                                            "display": {
                                                "name": "Connection Name",
                                                "visible": true
                                            },
                                            "value": "tibcolabs-air-mqtt"
                                        },
                                        {
                                            "name": "description",
                                            "type": "string",
                                            "display": {
                                                "name": "Description",
                                                "visible": true
                                            },
                                            "value": ""
                                        },
                                        {
                                            "name": "broker",
                                            "type": "string",
                                            "required": true,
                                            "display": {
                                                "name": "Broker URL",
                                                "visible": true,
                                                "Description": "Enter a broker URL in the form '<protocol>://<host>:<port>'"
                                            },
                                            "value": "tcp://3.218.102.175:1883"
                                        },
                                        {
                                            "name": "user",
                                            "type": "string",
                                            "required": false,
                                            "display": {
                                                "name": "Username",
                                                "visible": true,
                                                "Description": "Enter a username if this connection requires one"
                                            },
                                            "value": ""
                                        },
                                        {
                                            "name": "password",
                                            "type": "string",
                                            "required": false,
                                            "display": {
                                                "name": "Password",
                                                "visible": true,
                                                "type": "password",
                                                "encryptable": true,
                                                "Description": "Enter a password if this connection requires one"
                                            },
                                            "value": "SECRET:6mGqRt3BdQdiI3QKSAjrqA=="
                                        },
                                        {
                                            "name": "encryptionMode",
                                            "type": "string",
                                            "display": {
                                                "name": "Encryption Mode",
                                                "description": "Choose the type of authentication to use"
                                            },
                                            "allowed": [
                                                "None",
                                                "TLS-Cert",
                                                "TLS-ClientAuth"
                                            ],
                                            "value": "None"
                                        },
                                        {
                                            "name": "cacert",
                                            "type": "string",
                                            "required": false,
                                            "display": {
                                                "name": "Cacert",
                                                "description": "Select the CA certificate file used to sign the broker's certificate",
                                                "visible": false,
                                                "type": "fileselector",
                                                "fileExtensions": [
                                                    ".crt",
                                                    ".cert",
                                                    ".pem"
                                                ],
                                                "readonly": false,
                                                "valid": true
                                            },
                                            "value": ""
                                        },
                                        {
                                            "name": "clientcert",
                                            "type": "string",
                                            "required": false,
                                            "display": {
                                                "name": "Client Cert",
                                                "description": "Select the client certificate file for connections requiring client auth",
                                                "visible": false,
                                                "type": "fileselector",
                                                "fileExtensions": [
                                                    ".crt",
                                                    ".cert",
                                                    ".pem"
                                                ],
                                                "readonly": false,
                                                "valid": true
                                            },
                                            "value": ""
                                        },
                                        {
                                            "name": "clientkey",
                                            "type": "string",
                                            "required": false,
                                            "display": {
                                                "name": "Client Key",
                                                "description": "Select the client key file used for connections requiring client auth",
                                                "visible": false,
                                                "type": "fileselector",
                                                "fileExtensions": [
                                                    ".key",
                                                    ".pem"
                                                ],
                                                "readonly": false,
                                                "valid": true
                                            },
                                            "value": ""
                                        }
                                    ],
                                    "outputs": [],
                                    "inputs": [],
                                    "handler": {
                                        "settings": []
                                    },
                                    "reply": [],
                                    "s3Prefix": "Tibco",
                                    "key": "Tibco/Mqtt/connector/connection/connector.json",
                                    "display": {
                                        "description": "MQTT Connector",
                                        "category": "Mqtt",
                                        "smallIcon": "icons/mqtt.png",
                                        "largeIcon": "icons/mqtt.png",
                                        "visible": true
                                    },
                                    "actions": [
                                        {
                                            "name": "Save"
                                        }
                                    ],
                                    "feature": {},
                                    "propertyMap": {},
                                    "keyfield": "name",
                                    "isValid": true,
                                    "lastUpdatedTime": 1564109916862,
                                    "user": "eihkymzngv24drdfeyg3otoucgynht2q",
                                    "connectorName": "tibcolabs-air-mqtt",
                                    "connectorDescription": " "
                                },
                                "topic": "EdgeXDataTopic1",
                                "retain": false,
                                "qos": 2,
                                "valueType": "String",
                                "stringValue": "=$activity[Mapper1].output.message"
                            }
                        }
                    },
                    {
                        "id": "Return",
                        "name": "Return",
                        "activity": {
                            "ref": "#actreturn"
                        }
                    }
                ],
                "metadata": {
                    "input": [
                        {
                            "name": "id",
                            "type": "string"
                        },
                        {
                            "name": "device",
                            "type": "string"
                        },
                        {
                            "name": "origin",
                            "type": "float64"
                        },
                        {
                            "name": "readings",
                            "type": "array",
                            "schema": {
                                "type": "json",
                                "value": "{\"type\":\"object\",\"properties\":{\"origin\":{\"type\":\"number\"},\"device\":{\"type\":\"string\"},\"name\":{\"type\":\"string\"},\"value\":{\"type\":\"string\"}}}"
                            }
                        }
                    ],
                    "output": [
                        {
                            "name": "code",
                            "type": "integer"
                        }
                    ],
                    "fe_metadata": {
                        "input": "{\n    \"id\": \"b710ad27-4eb0-417f-96b8-02830642d8a1\",\n    \"device\": \"Random-Integer-Device\",\n    \"origin\": 1564113092999608300,\n    \"readings\": [\n        {\n            \"origin\": 1564113092992998000,\n            \"device\": \"Random-Integer-Device\",\n            \"name\": \"RandomValue_Int64\",\n            \"value\": \"-6427502364192134104\"\n        }\n    ]\n}",
                        "output": "{\"type\":\"object\",\"title\":\"Inputs\",\"properties\":{\"code\":{\"type\":\"integer\",\"required\":false}},\"required\":[]}"
                    }
                },
                "explicitReply": true
            }
        }
    ],
    "properties": [],
    "contrib": "W3sicmVmIjoiZ2l0LnRpYmNvLmNvbS9naXQvcHJvZHVjdC9pcGFhcy93aS1jb250cmliLmdpdC9jb250cmlidXRpb25zL0dlbmVyYWwiLCJzM2xvY2F0aW9uIjoiVGliY28vR2VuZXJhbCJ9LHsicmVmIjoiZ2l0LnRpYmNvLmNvbS9naXQvcHJvZHVjdC9pcGFhcy93aS1tcXR0LmdpdC9NcXR0IiwiczNsb2NhdGlvbiI6IlRpYmNvL01xdHQifV0=",
    "fe_metadata": "UEsDBAoAAAAIADFEE0+rqSRGFQAAABMAAAAIAAAAYXBwLmpzb26rViopykxPTy1yy8kvL1ayio6tBQBQSwECFAAKAAAACAAxRBNPq6kkRhUAAAATAAAACAAAAAAAAAAAAAAAAAAAAAAAYXBwLmpzb25QSwUGAAAAAAEAAQA2AAAAOwAAAAAA"
}