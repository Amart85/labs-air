/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Copyright (c) 2018-2018. TIBCO Software Inc. All Rights Reserved. Confidential & Proprietary.
import { Injectable } from '@angular/core';
import { delay, map, mergeMap, tap } from 'rxjs/operators';
import { Observable, forkJoin } from 'rxjs';
import { LazyLoadingLibraryService } from './lazy-loading-library.service';
import { Application } from './spotfire-webplayer';
import * as i0 from "@angular/core";
import * as i1 from "./lazy-loading-library.service";
export class DocumentService {
    /**
     * @param {?} lazySvc
     */
    constructor(lazySvc) {
        this.lazySvc = lazySvc;
        this.doConsole = (/**
         * @param {...?} args
         * @return {?}
         */
        (...args) => console.log('[DOCUMENT-SERVICE]', ...args));
        // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        //
        this.getMetadata$ = (/**
         * @param {?} params
         * @return {?}
         */
        (params) => this.openWebPlayer$(params).pipe(mergeMap((/**
         * @param {?} doc
         * @return {?}
         */
        doc => forkJoin([
            doc.getDocumentMetadata$(),
            doc.getData().getTables$(),
            doc.getMarking().getMarkingNames$()
        ]))), map((/**
         * @param {?} __0
         * @return {?}
         */
        ([metadata, tables, markings]) => ({ metadata, tables, markings })))));
        /**
         * \@description
         * Callback played if Spotfire requires some login
         *
         */
        this.onCreateLoginElement = (/**
         * @return {?}
         */
        () => {
            this.doConsole('Creating the login element');
            // Optionally create and return a div to host the login button
            console.warn(`Cannot login`);
            return null;
        });
    }
    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //
    /**
     * @param {?} params
     * @return {?}
     */
    openWebPlayer$(params) {
        this.doConsole(`openWebPlayer(${params.domid}, ${params.url})`, params);
        // lazy load the spotfire js API
        //
        /** @type {?} */
        const sfLoaderUrl = `${params.url}/spotfire/js-api/loader.js`;
        return this.lazySvc.loadJs(sfLoaderUrl).pipe(delay(1000), tap((/**
         * @param {?} f
         * @return {?}
         */
        f => this.doConsole(`Spotfire ${sfLoaderUrl} is LOADED !!!`, params.domid, f, spotfire, params.page, params.customization))), mergeMap((/**
         * @param {?} _
         * @return {?}
         */
        _ => this.openPath$(params))));
    }
    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //
    /**
     * @param {?} params
     * @return {?}
     */
    openPath$(params) {
        this.doConsole(`openPath(${params.path})`, params);
        if (params.document) {
            params.document.close();
        }
        // FIXTHIS, we might need to wait for onClosed callback
        params.document = null;
        // Prepare Spotfire app with path/page/customization
        //
        params.app = new Application(params.url, params.customization, params.path, params._parameters, params.reloadAnalysisInstance, params.version, this.onCreateLoginElement);
        /**
         * Callback played once Spotfire API responds to Application creation
         *
         * Will open the target page
         */
        return params.app.onApplicationReady$.pipe(tap((/**
         * @param {?} f
         * @return {?}
         */
        f => this.doConsole('onApplicationReady$ is done'))), mergeMap((/**
         * @param {?} _
         * @return {?}
         */
        _ => this.openPage$(params))));
    }
    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //
    /**
     * @param {?} params
     * @return {?}
     */
    openPage$(params) {
        this.doConsole(`openPage(${params.page})`, params);
        // Ask Spotfire library to display this path/page (with optional customization)
        //
        if (!params.app || !(params.app instanceof Application)) {
            throw new Error('Spotfire webapp is not created yet');
        }
        //    const idDom = `is${new Date().getTime()}`;
        this.doConsole('getDocument', params.domid, `cnf=${params.page}`, params.app, params.document, params.customization);
        // Here is the call to 'spotfire.webPlayer.createApplication'
        //
        if (params.document) {
            this.doConsole(`SpotfireViewerComponent setActivePage(${params.page})`);
            params.document.setActivePage(params.page);
            return new Observable((/**
             * @param {?} o
             * @return {?}
             */
            o => {
                o.next((/** @type {?} */ (params.document)));
                o.complete();
            }));
        }
        else {
            params.document = params.app.getDocument(params.domid, params.page, (/** @type {?} */ (params.customization)));
            return params.document.onDocumentReady$().pipe(map((/**
             * @param {?} f
             * @return {?}
             */
            f => (/** @type {?} */ (params.document)))), tap((/**
             * @param {?} f
             * @return {?}
             */
            f => this.doConsole('onDocumentReady$ is done', f))));
        }
    }
}
DocumentService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
DocumentService.ctorParameters = () => [
    { type: LazyLoadingLibraryService }
];
/** @nocollapse */ DocumentService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function DocumentService_Factory() { return new DocumentService(i0.ɵɵinject(i1.LazyLoadingLibraryService)); }, token: DocumentService, providedIn: "root" });
if (false) {
    /** @type {?} */
    DocumentService.prototype.doConsole;
    /** @type {?} */
    DocumentService.prototype.getMetadata$;
    /**
     * \@description
     * Callback played if Spotfire requires some login
     *
     * @type {?}
     * @private
     */
    DocumentService.prototype.onCreateLoginElement;
    /** @type {?} */
    DocumentService.prototype.lazySvc;
}
//# sourceMappingURL=data:application/json;base64,