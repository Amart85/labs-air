/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Copyright (c) 2018-2018. TIBCO Software Inc. All Rights Reserved. Confidential & Proprietary.
import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
// https://stackoverflow.com/questions/46240293/how-to-lazyload-library-in-angular-4-module
export class LazyLoadingLibraryService {
    /**
     * @param {?} document
     */
    constructor(document) {
        this.document = document;
        this.loadedLibraries = {};
    }
    /**
     * @param {?} url
     * @return {?}
     */
    loadJs(url) {
        if (this.loadedLibraries[url]) {
            return this.loadedLibraries[url].asObservable();
        }
        this.loadedLibraries[url] = new ReplaySubject();
        /** @type {?} */
        const script = this.document.createElement('script');
        script.type = 'text/javascript';
        script.src = url;
        script.onload = (/**
         * @return {?}
         */
        () => {
            this.loadedLibraries[url].next('');
            this.loadedLibraries[url].complete();
        });
        script.onerror = (/**
         * @return {?}
         */
        () => {
            console.error(`Library ${url} is not loaded !`);
            this.loadedLibraries[url].error(`Cannot load Spotfire JS library from ${url}. Check the URL !`);
        });
        this.document.body.appendChild(script);
        return this.loadedLibraries[url].asObservable();
    }
}
LazyLoadingLibraryService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LazyLoadingLibraryService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/** @nocollapse */ LazyLoadingLibraryService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LazyLoadingLibraryService_Factory() { return new LazyLoadingLibraryService(i0.ɵɵinject(i1.DOCUMENT)); }, token: LazyLoadingLibraryService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    LazyLoadingLibraryService.prototype.loadedLibraries;
    /**
     * @type {?}
     * @private
     */
    LazyLoadingLibraryService.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1sb2FkaW5nLWxpYnJhcnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby9zcG90ZmlyZS13cmFwcGVyLyIsInNvdXJjZXMiOlsibGliL2xhenktbG9hZGluZy1saWJyYXJ5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGFBQWEsRUFBYyxNQUFNLE1BQU0sQ0FBQzs7OztBQU1qRCxNQUFNLE9BQU8seUJBQXlCOzs7O0lBR3BDLFlBQStDLFFBQWE7UUFBYixhQUFRLEdBQVIsUUFBUSxDQUFLO1FBRnBELG9CQUFlLEdBQTBDLEVBQUUsQ0FBQztJQUVKLENBQUM7Ozs7O0lBRTFELE1BQU0sQ0FBQyxHQUFXO1FBQ3ZCLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUM3QixPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7U0FDakQ7UUFFRCxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxHQUFHLElBQUksYUFBYSxFQUFFLENBQUM7O2NBRTFDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUM7UUFDcEQsTUFBTSxDQUFDLElBQUksR0FBRyxpQkFBaUIsQ0FBQztRQUNoQyxNQUFNLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQztRQUNqQixNQUFNLENBQUMsTUFBTTs7O1FBQUcsR0FBRyxFQUFFO1lBQ25CLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ25DLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdkMsQ0FBQyxDQUFBLENBQUM7UUFDRixNQUFNLENBQUMsT0FBTzs7O1FBQUcsR0FBRyxFQUFFO1lBQ3BCLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxHQUFHLGtCQUFrQixDQUFDLENBQUM7WUFDaEQsSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxLQUFLLENBQUMsd0NBQXdDLEdBQUcsbUJBQW1CLENBQUMsQ0FBQztRQUNsRyxDQUFDLENBQUEsQ0FBQztRQUVGLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QyxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDbEQsQ0FBQzs7O1lBN0JGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7Ozs0Q0FJYyxNQUFNLFNBQUMsUUFBUTs7Ozs7Ozs7SUFGNUIsb0RBQW9FOzs7OztJQUV4RCw2Q0FBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgKGMpIDIwMTgtMjAxOC4gVElCQ08gU29mdHdhcmUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLiBDb25maWRlbnRpYWwgJiBQcm9wcmlldGFyeS5cbmltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgRE9DVU1FTlQgfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0LCBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5cbi8vIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzQ2MjQwMjkzL2hvdy10by1sYXp5bG9hZC1saWJyYXJ5LWluLWFuZ3VsYXItNC1tb2R1bGVcbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIExhenlMb2FkaW5nTGlicmFyeVNlcnZpY2Uge1xuICBwcml2YXRlIGxvYWRlZExpYnJhcmllczogeyBbdXJsOiBzdHJpbmddOiBSZXBsYXlTdWJqZWN0PGFueT4gfSA9IHt9O1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoRE9DVU1FTlQpIHByaXZhdGUgcmVhZG9ubHkgZG9jdW1lbnQ6IGFueSkgeyB9XG5cbiAgcHVibGljIGxvYWRKcyh1cmw6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgaWYgKHRoaXMubG9hZGVkTGlicmFyaWVzW3VybF0pIHtcbiAgICAgIHJldHVybiB0aGlzLmxvYWRlZExpYnJhcmllc1t1cmxdLmFzT2JzZXJ2YWJsZSgpO1xuICAgIH1cblxuICAgIHRoaXMubG9hZGVkTGlicmFyaWVzW3VybF0gPSBuZXcgUmVwbGF5U3ViamVjdCgpO1xuXG4gICAgY29uc3Qgc2NyaXB0ID0gdGhpcy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xuICAgIHNjcmlwdC5zcmMgPSB1cmw7XG4gICAgc2NyaXB0Lm9ubG9hZCA9ICgpID0+IHtcbiAgICAgIHRoaXMubG9hZGVkTGlicmFyaWVzW3VybF0ubmV4dCgnJyk7XG4gICAgICB0aGlzLmxvYWRlZExpYnJhcmllc1t1cmxdLmNvbXBsZXRlKCk7XG4gICAgfTtcbiAgICBzY3JpcHQub25lcnJvciA9ICgpID0+IHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoYExpYnJhcnkgJHt1cmx9IGlzIG5vdCBsb2FkZWQgIWApO1xuICAgICAgdGhpcy5sb2FkZWRMaWJyYXJpZXNbdXJsXS5lcnJvcihgQ2Fubm90IGxvYWQgU3BvdGZpcmUgSlMgbGlicmFyeSBmcm9tICR7dXJsfS4gQ2hlY2sgdGhlIFVSTCAhYCk7XG4gICAgfTtcblxuICAgIHRoaXMuZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzY3JpcHQpO1xuICAgIHJldHVybiB0aGlzLmxvYWRlZExpYnJhcmllc1t1cmxdLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG59XG4iXX0=