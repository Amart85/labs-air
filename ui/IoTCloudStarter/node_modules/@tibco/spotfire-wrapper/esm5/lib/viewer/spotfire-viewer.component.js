/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Copyright (c) 2018-2018. TIBCO Software Inc. All Rights Reserved. Confidential & Proprietary.
import { Component, Input, EventEmitter, ViewChild, ElementRef, Output, ViewEncapsulation } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import { tap } from 'rxjs/operators';
import { SpotfireCustomization, SpotfireFilter } from '../spotfire-customization';
import { DocMetadata, SpotfireParameters } from '../spotfire-webplayer';
import { DocumentService } from '../document.service';
var SpotfireViewerComponent = /** @class */ (function () {
    function SpotfireViewerComponent(docSvc) {
        var _this = this;
        this.docSvc = docSvc;
        /**
         * \@description
         * print debug logs to JS console. Default to false
         */
        this.debug = false;
        this.maxRows = 10;
        this.spotParams = new SpotfireParameters();
        this.errorMessages = [];
        this.edit = false;
        /* Filtering observables, emitter and subject*/
        this.filterSubject = new BehaviorSubject([]);
        this.filter$ = this.filterSubject.asObservable();
        /**
         * \@description
         * Optional. emit filters set by user in dashboard
         */
        this.filteringEvent = new EventEmitter(false);
        /* Marking observables, emitter and subject*/
        this.markerSubject = new BehaviorSubject({});
        this.marker$ = this.markerSubject.asObservable();
        /**
         * \@description
         * Optional. emit marking set by user in dashboard
         */
        this.markingEvent = new EventEmitter(false);
        this.markedRows = {};
        this.longTime = false;
        this.doConsole = (/**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return _this.debug && console.log.apply(console, tslib_1.__spread(['[SPOTFIRE-VIEWER]'], args));
        });
        this.ngOnChanges = (/**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (!!changes) {
                _this.display(changes);
            }
        });
        this.stopPropagation = (/**
         * @param {?} e
         * @return {?}
         */
        function (e) { return e.stopPropagation(); });
        this.isMarkingWiredUp = (/**
         * @return {?}
         */
        function () { return _this.markingEvent.observers.length > 0; });
        this.isFiltingWiredUp = (/**
         * @return {?}
         */
        function () { return _this.filteringEvent.observers.length > 0; });
        this.displayErrorMessage = (/**
         * @param {?} message
         * @return {?}
         */
        function (message) {
            console.error('ERROR:', message);
            _this.errorMessages.push(message);
            if (!_this.spotParams.document) {
                // Do not display the info Message when document is running
                _this.spot.nativeElement.style.fontFamily = 'monospace';
                _this.spot.nativeElement.style.color = '#e82127';
                _this.spot.nativeElement.style.textAlign = 'center';
                _this.spot.nativeElement.style.padding = '30px';
                _this.spot.nativeElement.textContent = _this.errorMessages.join('<br>');
            }
        });
        this.displayInfoMessage = (/**
         * @param {?} message
         * @return {?}
         */
        function (message) {
            console.log(message);
            if (!_this.spotParams.document && _this.debug) {
                // Do not display the info Message when document is running
                _this.spot.nativeElement.style.fontFamily = 'monospace';
                _this.spot.nativeElement.style.color = 'black';
                _this.spot.nativeElement.style.textAlign = 'center';
                _this.spot.nativeElement.textContent = message;
            }
        });
        this.afterDisplay = (/**
         * @param {?} doc
         * @return {?}
         */
        function (doc) {
            _this.doConsole("SpotfireViewerComponent openPage(" + _this.spotParams.page + ") returns", doc);
            _this.document = doc;
            if (_this.filters && _this.document.getFiltering()) {
                /** @type {?} */
                var flt = _this.document.getFiltering();
                flt.resetAllFilters();
                /*
                this.doConsole(`SpotfireViewerComponent set Filter(avant)`, this.filters);
                (this.filters as Array<SpotfireFilter>).forEach(t => t.setFilterType(spotfire));
                this.doConsole(`SpotfireViewerComponent set Filter(apres)`, this.filters);
              */
                flt.set(_this.filters);
                _this.loadFilters();
                _this.doConsole('FILTER', _this.filters);
            }
            _this.doForm(_this.document);
            if (_this.markingOn) {
                // Clear marking
                _this.markerSubject.next({});
                _this.document.getData().getTables$()
                    .pipe(tap((/**
                 * @param {?} allTableNames
                 * @return {?}
                 */
                function (allTableNames) { return _this.doConsole("All tables and column names:", allTableNames); })))
                    .subscribe((/**
                 * @param {?} allTableNames
                 * @return {?}
                 */
                function (allTableNames) { return _this.document.getMarking().getMarkingNames$()
                    .pipe(tap((/**
                 * @param {?} markingNames
                 * @return {?}
                 */
                function (markingNames) { return _this.doConsole("All marking names:", markingNames); })))
                    .subscribe((/**
                 * @param {?} markingNames
                 * @return {?}
                 */
                function (markingNames) { return markingNames.forEach((/**
                 * @param {?} markingName
                 * @return {?}
                 */
                function (markingName) {
                    /** @type {?} */
                    var tableNames = _this.markingOn === '*' ? allTableNames : _this.markingOn;
                    Object.keys(tableNames).forEach((/**
                     * @param {?} tName
                     * @return {?}
                     */
                    function (tName) {
                        /** @type {?} */
                        var columnNames = _this.markingOn === '*' ? allTableNames[tName] : tableNames[tName];
                        if (columnNames.length === 1 && columnNames[0] === '*') {
                            columnNames = allTableNames[tName];
                        }
                        _this.doConsole("marking.onChanged(" + markingName + ", " + tName + ", " + JSON.stringify(columnNames) + ", " + _this.maxRows + ")");
                        _this.document.getMarking().onChanged$(markingName, tName, columnNames, _this.maxRows)
                            .subscribe((/**
                         * @param {?} f
                         * @return {?}
                         */
                        function (f) { return _this.updateMarking(tName, markingName, f); }));
                    }));
                })); })); }));
            }
            if (_this.isFiltingWiredUp()) {
                _this.doConsole('we have observers for filtering');
                // Subscribe to filteringEvent and emit the result to the Output if filter panel is displayed
                //
                _this.filter$.pipe(tap((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return _this.doConsole('Emit filter', f); })))
                    .subscribe((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return _this.filteringEvent.emit(f); }));
            }
            if (_this.isMarkingWiredUp()) {
                _this.doConsole('we have observers for marking');
                // Subscribe to markingEvent and emit the result to the Output
                //
                _this.marker$.pipe(tap((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return _this.doConsole('Emit marking', f); })))
                    .subscribe((/**
                 * @param {?} f
                 * @return {?}
                 */
                function (f) { return _this.markingEvent.emit(f); }));
            }
            // console.log('YES loadFilters');
            // setInterval(() => this.loadFilters(), 3000);
        });
        /**
         * \@description
         * Callback method played when marking changes are detected.
         *
         * Will gather all marking and emit an event back to caller.
         *
         * @param tName Table name
         * @param mName Maring name
         * @param res marked rows returned by Spotfire
         */
        this.updateMarking = (/**
         * @param {?} tName
         * @param {?} mName
         * @param {?} res
         * @return {?}
         */
        function (tName, mName, res) {
            if (Object.keys(res).length > 0) {
                _this.doConsole("We have marked rows on marking '" + mName + "' for table '" + tName + "':", res);
                // update the marked row if partial selection
                //
                if (!_this.markedRows[mName]) {
                    _this.markedRows[mName] = {};
                }
                if (!_this.markedRows[mName][tName]) {
                    _this.markedRows[mName][tName] = res;
                }
                else {
                    _this.markedRows[mName][tName] = Object.assign(_this.markedRows[mName][tName], res);
                }
                //   this.doConsole('[MARKING] on publie', this.markedRows);
                _this.markerSubject.next(_this.markedRows);
            }
            else if (_this.markedRows[mName] && _this.markedRows[mName][tName]) {
                // remove the marked row if no marking
                //
                delete _this.markedRows[mName][tName];
                if (Object.keys(_this.markedRows[mName]).length === 0) {
                    delete _this.markedRows[mName];
                }
                _this.markerSubject.next(_this.markedRows);
            }
            else {
                //  this.doConsole(`No rows are marked on marking '${mName}' for table '${tName}'`);
            }
            _this.loadFilters();
        });
        console.log('SPOTFIRE WRAPPER - 10 juillet - Angular 8');
        this.doConsole('Welcome !');
        setTimeout((/**
         * @return {?}
         */
        function () { return _this.longTime = true; }), 6000);
    }
    Object.defineProperty(SpotfireViewerComponent.prototype, "parameters", {
        /**
          * @description
          * Optional. Load parameters for the analysis.
          */
        set: /**
         * \@description
         * Optional. Load parameters for the analysis.
         * @param {?} value
         * @return {?}
         */
        function (value) {
            this._parameters = value;
            this.spotParams._parameters = value;
            if (this.app) {
                this.openPath(this.path);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    SpotfireViewerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.doConsole('OnInit', this.url, this.path);
        this.display();
    };
    /**
     * @description
     * Redraw the dashboard.
     * Depending on nature of change (url/path/page) the dashboard is fully refreshed or adjusted accordingly
     * @param changes The list of changes to apply
     */
    /**
     * \@description
     * Redraw the dashboard.
     * Depending on nature of change (url/path/page) the dashboard is fully refreshed or adjusted accordingly
     * @param {?=} changes The list of changes to apply
     * @return {?}
     */
    SpotfireViewerComponent.prototype.display = /**
     * \@description
     * Redraw the dashboard.
     * Depending on nature of change (url/path/page) the dashboard is fully refreshed or adjusted accordingly
     * @param {?=} changes The list of changes to apply
     * @return {?}
     */
    function (changes) {
        this.doConsole('Display', changes);
        if (typeof this.customization === 'string') {
            this.customization = new SpotfireCustomization(JSON.parse(this.customization));
        }
        else {
            this.customization = new SpotfireCustomization(this.customization);
        }
        if (typeof this.filters === 'string') {
            /** @type {?} */
            var allFilters_1 = [];
            JSON.parse(this.filters).forEach((/**
             * @param {?} m
             * @return {?}
             */
            function (m) { return allFilters_1.push(new SpotfireFilter(m)); }));
            this.filters = allFilters_1;
        }
        if (typeof this.markingOn === 'string' && this.markingOn !== '*') {
            this.markingOn = JSON.parse(this.markingOn);
        }
        this.doConsole('display', changes, this.url, this.path, 'PAGE=', this.page, this.customization, this.maxRows, this.app, this.markingOn);
        if (!changes || changes.url) {
            this.openWebPlayer(this.url, this.path, this.customization);
        }
        else if (this.app && changes.page) {
            this.openPage(this.page);
        }
        else {
            this.doConsole("The Url attribute is not provided, flip the dashboard and display form!");
            this.edit = true;
            this.metadata = new DocMetadata();
        }
    };
    /**
     * @description
     * Get Spotfire JavaScript API (webPlayer) from url
     *
     * When a componenet is initiated or url is updated, it lazy loads the library
     * Once loaded it opens the path.
     *
     * @param url the webPlayer server url
     * @param path the path to the page
     * @param custo the initial customization info
     */
    /**
     * \@description
     * Get Spotfire JavaScript API (webPlayer) from url
     *
     * When a componenet is initiated or url is updated, it lazy loads the library
     * Once loaded it opens the path.
     *
     * @protected
     * @param {?} url the webPlayer server url
     * @param {?} path the path to the page
     * @param {?} customization
     * @return {?}
     */
    SpotfireViewerComponent.prototype.openWebPlayer = /**
     * \@description
     * Get Spotfire JavaScript API (webPlayer) from url
     *
     * When a componenet is initiated or url is updated, it lazy loads the library
     * Once loaded it opens the path.
     *
     * @protected
     * @param {?} url the webPlayer server url
     * @param {?} path the path to the page
     * @param {?} customization
     * @return {?}
     */
    function (url, path, customization) {
        var _this = this;
        this.edit = false;
        this.url = url;
        this.path = path;
        this.customization = customization;
        this.doConsole("SpotfireViewerComponent openWebPlayer(" + url + ")");
        this.displayInfoMessage(this.url + "...");
        // Create a Unique ID for this Spotfire dashboard
        //
        this.spot.nativeElement.id = this.sid ? this.sid : new Date().getTime();
        this.spotParams = tslib_1.__assign({}, this.spotParams, { path: path, url: url, customization: customization, domid: this.spot.nativeElement.id, page: this.page });
        this.docSvc.openWebPlayer$(this.spotParams).subscribe((/**
         * @param {?} doc
         * @return {?}
         */
        function (doc) { return _this.afterDisplay(doc); }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.displayErrorMessage(err); }));
    };
    /**
     * @description
     * Open the path using JavaScript API (spotfire.webPlayer.createApplication)
     *
     * @param path the absolute analysis path
     */
    /**
     * \@description
     * Open the path using JavaScript API (spotfire.webPlayer.createApplication)
     *
     * @protected
     * @param {?} path the absolute analysis path
     * @return {?}
     */
    SpotfireViewerComponent.prototype.openPath = /**
     * \@description
     * Open the path using JavaScript API (spotfire.webPlayer.createApplication)
     *
     * @protected
     * @param {?} path the absolute analysis path
     * @return {?}
     */
    function (path) {
        var _this = this;
        this.path = path;
        this.displayInfoMessage(this.url + "/" + path + "...");
        this.doConsole("SpotfireViewerComponent openPath(" + path + ")", this.sid);
        this.spotParams = tslib_1.__assign({}, this.spotParams, { path: path, domid: this.spot.nativeElement.id });
        this.docSvc.openPath$(this.spotParams).subscribe((/**
         * @param {?} doc
         * @return {?}
         */
        function (doc) { return _this.afterDisplay(doc); }), (/**
         * @param {?} err
         * @return {?}
         */
        function (err) { return _this.displayErrorMessage(err); }));
    };
    /**
     * @protected
     * @param {?} doc
     * @return {?}
     */
    SpotfireViewerComponent.prototype.doForm = /**
     * @protected
     * @param {?} doc
     * @return {?}
     */
    function (doc) { };
    /**
     * @description
     * Open the Document page
     *
     * @param page the document page that will be displayed
     */
    /**
     * \@description
     * Open the Document page
     *
     * @param {?} page the document page that will be displayed
     * @return {?}
     */
    SpotfireViewerComponent.prototype.openPage = /**
     * \@description
     * Open the Document page
     *
     * @param {?} page the document page that will be displayed
     * @return {?}
     */
    function (page) {
        var _this = this;
        this.displayInfoMessage(this.url + "/" + this.path + "/" + (page ? page : '') + "...");
        this.doConsole("SpotfireViewerComponent openPage(" + page + ")");
        this.page = page;
        this.spotParams = tslib_1.__assign({}, this.spotParams, { page: page });
        /** @type {?} */
        var p = this.spotParams;
        this.docSvc.openPage$(p).subscribe((/**
         * @param {?} doc
         * @return {?}
         */
        function (doc) { return _this.afterDisplay(doc); }));
    };
    /**
     * @description
     * Emit to caller the filters
     */
    /**
     * \@description
     * Emit to caller the filters
     * @private
     * @return {?}
     */
    SpotfireViewerComponent.prototype.loadFilters = /**
     * \@description
     * Emit to caller the filters
     * @private
     * @return {?}
     */
    function () {
        var _this = this;
        //  console.log('AA Nicolas loadFilters BLOUP ! (19 juin 2019)');
        if (this.isFiltingWiredUp()) {
            this.document.getFiltering().getAllModifiedFilterColumns()
                .subscribe((/**
             * @param {?} fs
             * @return {?}
             */
            function (fs) { return _this.filterSubject.next(fs); }));
        }
        //    this.document.getFiltering().getAllModifiedFilterColumns()
        //      .subscribe(fs => console.log('les FILTERS:', fs));
    };
    SpotfireViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'spotfire-viewer',
                    exportAs: 'spotfireViewer',
                    template: "<div style='height:100%; border:2px dashed green; border-radius:8px' #spot></div>",
                    encapsulation: ViewEncapsulation.None
                }] }
    ];
    /** @nocollapse */
    SpotfireViewerComponent.ctorParameters = function () { return [
        { type: DocumentService }
    ]; };
    SpotfireViewerComponent.propDecorators = {
        debug: [{ type: Input }],
        url: [{ type: Input }],
        path: [{ type: Input }],
        page: [{ type: Input }],
        sid: [{ type: Input }],
        customization: [{ type: Input }],
        filters: [{ type: Input }],
        markingOn: [{ type: Input }],
        maxRows: [{ type: Input }],
        parameters: [{ type: Input }],
        spot: [{ type: ViewChild, args: ['spot', { static: true, read: ElementRef },] }],
        filteringEvent: [{ type: Output }],
        markingEvent: [{ type: Output }]
    };
    return SpotfireViewerComponent;
}());
export { SpotfireViewerComponent };
if (false) {
    /**
     * \@description
     * print debug logs to JS console. Default to false
     * @type {?}
     */
    SpotfireViewerComponent.prototype.debug;
    /**
     * \@description
     * The URL to the Web Player server
     * @type {?}
     */
    SpotfireViewerComponent.prototype.url;
    /**
     * \@description
     * The path in the library to the analysis to open.
     * @type {?}
     */
    SpotfireViewerComponent.prototype.path;
    /**
     * \@description
     * Optional initial page. The page can either be expressed
     * as an integer (0-based page index) or as a string (page name).
     * @type {?}
     */
    SpotfireViewerComponent.prototype.page;
    /**
     * \@description
     * Optional unique id to read/write settings from local storage
     * @type {?}
     */
    SpotfireViewerComponent.prototype.sid;
    /**
     * \@description
     * Optional instance of a Customization instance.
     * If set, this will override the customizationInfo instance held by the application.
     * @type {?}
     */
    SpotfireViewerComponent.prototype.customization;
    /**
     * \@description
     * Optional. Array of filters that will be applied once page is loaded.
     * @type {?}
     */
    SpotfireViewerComponent.prototype.filters;
    /** @type {?} */
    SpotfireViewerComponent.prototype.markingOn;
    /** @type {?} */
    SpotfireViewerComponent.prototype.maxRows;
    /**
     * @type {?}
     * @protected
     */
    SpotfireViewerComponent.prototype.spotParams;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype._parameters;
    /** @type {?} */
    SpotfireViewerComponent.prototype.spot;
    /** @type {?} */
    SpotfireViewerComponent.prototype.errorMessages;
    /** @type {?} */
    SpotfireViewerComponent.prototype.metadata;
    /** @type {?} */
    SpotfireViewerComponent.prototype.edit;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.document;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.app;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.filterSubject;
    /** @type {?} */
    SpotfireViewerComponent.prototype.filter$;
    /**
     * \@description
     * Optional. emit filters set by user in dashboard
     * @type {?}
     */
    SpotfireViewerComponent.prototype.filteringEvent;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.markerSubject;
    /** @type {?} */
    SpotfireViewerComponent.prototype.marker$;
    /**
     * \@description
     * Optional. emit marking set by user in dashboard
     * @type {?}
     */
    SpotfireViewerComponent.prototype.markingEvent;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.markedRows;
    /** @type {?} */
    SpotfireViewerComponent.prototype.view;
    /** @type {?} */
    SpotfireViewerComponent.prototype.longTime;
    /** @type {?} */
    SpotfireViewerComponent.prototype.doConsole;
    /** @type {?} */
    SpotfireViewerComponent.prototype.ngOnChanges;
    /** @type {?} */
    SpotfireViewerComponent.prototype.stopPropagation;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.isMarkingWiredUp;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.isFiltingWiredUp;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.displayErrorMessage;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.displayInfoMessage;
    /**
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.afterDisplay;
    /**
     * \@description
     * Callback method played when marking changes are detected.
     *
     * Will gather all marking and emit an event back to caller.
     *
     * \@param tName Table name
     * \@param mName Maring name
     * \@param res marked rows returned by Spotfire
     * @type {?}
     * @private
     */
    SpotfireViewerComponent.prototype.updateMarking;
    /** @type {?} */
    SpotfireViewerComponent.prototype.docSvc;
}
//# sourceMappingURL=data:application/json;base64,