/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// Copyright (c) 2018-2018. TIBCO Software Inc. All Rights Reserved. Confidential & Proprietary.
import { Observable, forkJoin, of as observableOf, zip, BehaviorSubject, throwError, TimeoutError } from 'rxjs';
import { mergeMap, tap, pluck, map, filter, timeout, catchError } from 'rxjs/operators';
/** @type {?} */
export var CUSTLABELS = {
    showAbout: 'Show the about menu item',
    showAnalysisInformationTool: 'Show the analysis information tool menu item',
    showAuthor: 'Show the button for enabling authoring',
    showClose: 'Show the analysis close menu item',
    showCustomizableHeader: 'Show the customizable header',
    showDodPanel: 'Show the details on demand panel in the visualization.',
    showExportFile: 'Show the export file menu item',
    showFilterPanel: 'Show the filter panel.',
    showHelp: 'Show the help menu item',
    showLogout: 'Show the logout menu item',
    showPageNavigation: 'Show the page navigation controls in the analysis',
    showStatusBar: 'Show status bar in the Web Player',
    showToolBar: 'Show the analysis toolbar and menu',
    showUndoRedo: 'Show the undo/redo menu item'
};
/**
 * @param {...?} args
 * @return {?}
 */
function doConsole() {
    var args = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        args[_i] = arguments[_i];
    }
    // console.log('[SPOTFIRE-WEBPLAYER]', ...args);
}
var PageState = /** @class */ (function () {
    function PageState() {
    }
    return PageState;
}());
if (false) {
    /** @type {?} */
    PageState.prototype.index;
    /** @type {?} */
    PageState.prototype.pageTitle;
}
var DataTable = /** @class */ (function () {
    function DataTable() {
    }
    return DataTable;
}());
if (false) {
    /** @type {?} */
    DataTable.prototype.dataTableName;
}
var DataColumn = /** @class */ (function () {
    function DataColumn() {
    }
    return DataColumn;
}());
if (false) {
    /** @type {?} */
    DataColumn.prototype.dataColumnName;
    /** @type {?} */
    DataColumn.prototype.dataTableName;
    /** @type {?} */
    DataColumn.prototype.dataType;
    /** @type {?} */
    DataColumn.prototype.values;
}
var DistinctValues = /** @class */ (function () {
    function DistinctValues() {
    }
    return DistinctValues;
}());
if (false) {
    /** @type {?} */
    DistinctValues.prototype.count;
    /** @type {?} */
    DistinctValues.prototype.values;
}
var Marking = /** @class */ (function () {
    function Marking(_marking) {
        var _this = this;
        this._marking = _marking;
        this.getMarkingNames$ = (/**
         * @return {?}
         */
        function () { return doCall(_this._marking, 'getMarkingNames'); });
        this.onChanged$ = (/**
         * @param {?} m
         * @param {?} t
         * @param {?} c
         * @param {?} n
         * @return {?}
         */
        function (m, t, c, n) { return doCall(_this._marking, 'onChanged', m, t, c, n); });
    }
    return Marking;
}());
export { Marking };
if (false) {
    /** @type {?} */
    Marking.prototype.getMarkingNames$;
    /** @type {?} */
    Marking.prototype.onChanged$;
    /** @type {?} */
    Marking.prototype._marking;
}
var Filtering = /** @class */ (function () {
    function Filtering(_filtering) {
        var _this = this;
        this._filtering = _filtering;
        this.set = (/**
         * @param {?} flts
         * @return {?}
         */
        function (flts) { return _this._filtering.setFilters(flts, spotfire.webPlayer.filteringOperation.REPLACE); });
        this.resetAllFilters = (/**
         * @return {?}
         */
        function () { return _this._filtering.resetAllFilters(); });
        this.getAllModifiedFilterColumns = (/**
         * @return {?}
         */
        function () { return doCall(_this._filtering, 'getAllModifiedFilterColumns', spotfire.webPlayer.includedFilterSettings.ALL_WITH_CHECKED_HIERARCHY_NODES); });
    }
    return Filtering;
}());
if (false) {
    /** @type {?} */
    Filtering.prototype.set;
    /** @type {?} */
    Filtering.prototype.resetAllFilters;
    /** @type {?} */
    Filtering.prototype.getAllModifiedFilterColumns;
    /** @type {?} */
    Filtering.prototype._filtering;
}
var SpotfireParameters = /** @class */ (function () {
    function SpotfireParameters(vars) {
        var _this = this;
        this.version = '7.14';
        this.debug = false;
        this.reloadAnalysisInstance = false;
        console.log('CONSTR SpotfireParameters', vars, this);
        if (vars) {
            Object.keys(vars).forEach((/**
             * @param {?} key
             * @return {?}
             */
            function (key) { return _this[key] = vars[key]; }));
        }
        // Create a Unique ID for this Spotfire dashboard
        //
        this.domid = this.domid ? this.domid : this.sid ? "" + this.sid : "" + new Date().getTime();
    }
    return SpotfireParameters;
}());
export { SpotfireParameters };
if (false) {
    /** @type {?} */
    SpotfireParameters.prototype.url;
    /** @type {?} */
    SpotfireParameters.prototype.path;
    /** @type {?} */
    SpotfireParameters.prototype.page;
    /** @type {?} */
    SpotfireParameters.prototype.domid;
    /** @type {?} */
    SpotfireParameters.prototype.sid;
    /** @type {?} */
    SpotfireParameters.prototype.customization;
    /** @type {?} */
    SpotfireParameters.prototype.version;
    /** @type {?} */
    SpotfireParameters.prototype.debug;
    /** @type {?} */
    SpotfireParameters.prototype.reloadAnalysisInstance;
    /** @type {?} */
    SpotfireParameters.prototype.document;
    /** @type {?} */
    SpotfireParameters.prototype.app;
    /** @type {?} */
    SpotfireParameters.prototype._parameters;
}
var Data = /** @class */ (function () {
    function Data(_data) {
        var _this = this;
        this._data = _data;
        this.allTables = {};
        // A Spotfire analysis contains one or more data tables, retrieved by the getDataTable,
        // getActiveDataTable and getDataTables methods.
        this.getDataTables$ = (/**
         * @return {?}
         */
        function () { return doCall(_this._data, 'getDataTables'); });
        this.getDataTableColNames$ = (/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return doCall(_this._data, 'getDataTable', t)
            .pipe(mergeMap((/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return _this.getDataColumns$(f); })), map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) {
            var _a;
            return (_a = {}, _a[t] = d, _a);
        }))); });
        this.getDataTable$ = (/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return doCall(_this._data, 'getDataTable', t)
            .pipe(mergeMap((/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return _this.getDataColumns$(f); }))); });
        // Each data table contains one or more data columns, retrieved by the getDataColumn,
        // getDataColumns and searchDataColumns.
        this.getDataColumns$ = (/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return doCall(t, 'getDataColumns').pipe(mergeMap((/**
         * @param {?} columns
         * @return {?}
         */
        function (columns) {
            /** @type {?} */
            var obs = [];
            columns.forEach((/**
             * @param {?} col
             * @return {?}
             */
            function (col) { return obs.push(zip.apply(void 0, tslib_1.__spread([observableOf(col)], [(/**
                 * @param {?} a
                 * @param {?} b
                 * @return {?}
                 */
                function (a, b) { return a.dataColumnName; })]))); }));
            return forkJoin(obs);
        }))); });
        // From the DataColumn class it is possible to retrieve metadata, such as column name and data type.
        // It is also possible to get a list of the unique values in the data column with the getDistinctValues method.
        this.getDistinctValues$ = (/**
         * @param {?} t
         * @return {?}
         */
        function (t) { return doCall(t, 'getDistinctValues', 0, 20).pipe(tap((/**
         * @param {?} g
         * @return {?}
         */
        function (g) { return doConsole('Data.DistinctValues$', t, g, g.count > 0 && g.count < 25); })), 
        // filter(g => g.count > 0 && g.count < 25),
        //  tap(g => doConsole('[OBS]', 'DistinctValues filtres', g)),
        pluck('values')); });
        this.getTables$ = (/**
         * @return {?}
         */
        function () { return _this.getDataTables$().pipe(mergeMap((/**
         * @param {?} tables
         * @return {?}
         */
        function (tables) {
            /** @type {?} */
            var obs = [];
            tables.forEach((/**
             * @param {?} table
             * @return {?}
             */
            function (table) { return obs.push(_this.getDataTableColNames$(table.dataTableName)); }));
            return forkJoin(obs);
        })), map((/**
         * @param {?} k
         * @return {?}
         */
        function (k) {
            /** @type {?} */
            var z = {};
            k.forEach((/**
             * @param {?} p
             * @return {?}
             */
            function (p) { return z = tslib_1.__assign({}, z, p); }));
            return z;
        }))); });
        this.getAllTables$ = (/**
         * @return {?}
         */
        function () { return _this.getDataTables$().pipe(mergeMap((/**
         * @param {?} tables
         * @return {?}
         */
        function (tables) {
            /** @type {?} */
            var obs = [];
            tables.forEach((/**
             * @param {?} table
             * @return {?}
             */
            function (table) { return obs.push(_this.getDataTable$(table.dataTableName)); }));
            return forkJoin(obs);
        })), map((/**
         * @param {?} tables
         * @return {?}
         */
        function (tables) {
            /** @type {?} */
            var dataTables = [];
            ((/** @type {?} */ (tables[0]))).forEach((/**
             * @param {?} columns
             * @return {?}
             */
            function (columns) {
                /** @type {?} */
                var tname = columns['tabName'];
                if (!dataTables[tname]) {
                    dataTables[tname] = {};
                }
                dataTables[tname][columns['colName']] = columns['vals'];
            }));
            return dataTables;
        }))); });
    }
    return Data;
}());
export { Data };
if (false) {
    /** @type {?} */
    Data.prototype.allTables;
    /**
     * @type {?}
     * @private
     */
    Data.prototype.getDataTables$;
    /**
     * @type {?}
     * @private
     */
    Data.prototype.getDataTableColNames$;
    /**
     * @type {?}
     * @private
     */
    Data.prototype.getDataTable$;
    /**
     * @type {?}
     * @private
     */
    Data.prototype.getDataColumns$;
    /**
     * @type {?}
     * @private
     */
    Data.prototype.getDistinctValues$;
    /** @type {?} */
    Data.prototype.getTables$;
    /** @type {?} */
    Data.prototype.getAllTables$;
    /**
     * @type {?}
     * @private
     */
    Data.prototype._data;
}
var DocMetadata = /** @class */ (function () {
    function DocMetadata(p) {
        this.sizeUnit = 'B';
        if (p) {
            this.contentSize = parseInt(p['contentSize'], 10);
            if (this.contentSize > (1024 * 1024)) {
                this.size = this.contentSize / (1024 * 1024);
                this.sizeUnit = 'MB';
            }
            else if (this.contentSize > 1024) {
                this.size = this.contentSize / 1024;
                this.sizeUnit = 'KB';
            }
            this.created = new Date(p.created);
            this.lastModified = new Date(p.lastModified);
            this.description = p.description;
            this.path = p.path;
            this.title = p.title;
        }
    }
    return DocMetadata;
}());
export { DocMetadata };
if (false) {
    /** @type {?} */
    DocMetadata.prototype.size;
    /** @type {?} */
    DocMetadata.prototype.sizeUnit;
    /** @type {?} */
    DocMetadata.prototype.contentSize;
    /** @type {?} */
    DocMetadata.prototype.created;
    /** @type {?} */
    DocMetadata.prototype.description;
    /** @type {?} */
    DocMetadata.prototype.lastModified;
    /** @type {?} */
    DocMetadata.prototype.path;
    /** @type {?} */
    DocMetadata.prototype.title;
}
var Document = /** @class */ (function () {
    function Document(app, id, page, custo) {
        var _this = this;
        this.onActivePageChangedCallback = (/**
         * @param {?} pageState
         * @return {?}
         */
        function (pageState) { return console.log('onActivePageChangedCallback', pageState); });
        this.do = (/**
         * @template T
         * @param {?} m
         * @return {?}
         */
        function (m) { return doCall(_this._doc, m); });
        this.getDocumentMetadata$ = (/**
         * @return {?}
         */
        function () { return _this.do('getDocumentMetadata').pipe(map((/**
         * @param {?} g
         * @return {?}
         */
        function (g) { return new DocMetadata(g); }))); });
        this.getPages$ = (/**
         * @return {?}
         */
        function () { return _this.do('getPages').pipe(map((/**
         * @param {?} m
         * @return {?}
         */
        function (m) { return Object.keys(m).map((/**
         * @param {?} f
         * @return {?}
         */
        function (f) { return m[f].pageTitle; })); }))); });
        // getDocumentProperties$ = () => this.do('getDocumentProperties');
        // getBookmarks$ = () => this.do('getBookmarks');
        // getBookmarkNames$ = () => this.do('getBookmarkNames');
        // getReports$ = () => this.do('getReports');
        this.getActivePage$ = (/**
         * @return {?}
         */
        function () { return _this.do('getActivePage'); });
        this.setActivePage = (/**
         * @param {?} p
         * @return {?}
         */
        function (p) { return _this._doc.setActivePage(p); });
        this.getData = (/**
         * @return {?}
         */
        function () { return _this.data; });
        this.getMarking = (/**
         * @return {?}
         */
        function () { return _this.marking; });
        this.getFiltering = (/**
         * @return {?}
         */
        function () { return _this.filtering; });
        this.onDocumentReady$ = (/**
         * @return {?}
         */
        function () { return doCall(_this._doc, 'onDocumentReady'); });
        this.close = (/**
         * @return {?}
         */
        function () { return _this._doc ? _this._doc.close() : null; });
        this.onActivePageChanged$ = (/**
         * @return {?}
         */
        function () { return doCall(_this._doc, 'onActivePageChanged'); });
        this._doc = app.openDocument(id, page, custo);
        app.onOpened$().subscribe((/**
         * @param {?} doc
         * @return {?}
         */
        function (doc) {
            doConsole("Document.onOpened$: page is now opened:", doc);
            _this._doc = doc;
            // Register event handler for page change events.
            _this.onActivePageChanged$().subscribe(_this.onActivePageChangedCallback);
            _this.marking = new Marking(_this._doc.marking);
            _this.filtering = new Filtering(_this._doc.filtering);
            _this.data = new Data(_this._doc.data);
        }));
    }
    return Document;
}());
export { Document };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Document.prototype._doc;
    /**
     * @type {?}
     * @private
     */
    Document.prototype.marking;
    /**
     * @type {?}
     * @private
     */
    Document.prototype.filtering;
    /**
     * @type {?}
     * @private
     */
    Document.prototype.data;
    /**
     * @type {?}
     * @private
     */
    Document.prototype.onActivePageChangedCallback;
    /**
     * @type {?}
     * @private
     */
    Document.prototype.do;
    /** @type {?} */
    Document.prototype.getDocumentMetadata$;
    /** @type {?} */
    Document.prototype.getPages$;
    /** @type {?} */
    Document.prototype.getActivePage$;
    /** @type {?} */
    Document.prototype.setActivePage;
    /** @type {?} */
    Document.prototype.getData;
    /** @type {?} */
    Document.prototype.getMarking;
    /** @type {?} */
    Document.prototype.getFiltering;
    /** @type {?} */
    Document.prototype.onDocumentReady$;
    /** @type {?} */
    Document.prototype.close;
    /**
     * @type {?}
     * @private
     */
    Document.prototype.onActivePageChanged$;
}
/**
 * \@description
 * Turn async calls into Observables.
 *
 * For methods which name starts with 'on', the observable continues providing data it's received.
 * Otherwise the observable stops sending data at first buffer received.
 * An error is raised when the 50min timeout expires.
 *
 * @template T
 * @param {?} obj the object against we call method
 * @param {?} m the name of method
 * @param {...?} a
 * @return {?} Observable<T> an observable that corresponds to the original callback
 *
 */
function doCall(obj, m) {
    var a = [];
    for (var _i = 2; _i < arguments.length; _i++) {
        a[_i - 2] = arguments[_i];
    }
    return new Observable((/**
     * @param {?} observer
     * @return {?}
     */
    function (observer) {
        /** @type {?} */
        var oneShot = ['onDocumentReady'];
        // doConsole('[OBS]', 'doCall obj=', obj, ', m=', m, ', arg=', args, typeof obj);
        if (typeof obj[m] !== 'function' || !obj) {
            console.error('[OBS]', "function '" + m + "' does not exist on ", obj);
            observer.error("function '" + m + "' does not exist on objet " + JSON.stringify(obj));
        }
        try {
            // doConsole('[OBS]', `Call ${m}(${a.join(',')})`, a.length);
            /** @type {?} */
            var q = (/**
             * @param {?} g
             * @return {?}
             */
            function (g) { return observer.next(g); });
            /** @type {?} */
            var p = (/**
             * @param {?} g
             * @return {?}
             */
            function (g) { observer.next(g); observer.complete(); });
            return m.startsWith('on') && oneShot.indexOf(m) === -1 ? obj[m].apply(obj, tslib_1.__spread(a, [q])) : obj[m].apply(obj, tslib_1.__spread(a, [p]));
        }
        catch (err) {
            console.warn('[OBS]', 'doCall erreur: ', err);
            observer.error(err);
        }
    })).pipe(timeout(3001000), catchError((/**
     * @param {?} e
     * @return {?}
     */
    function (e) {
        if (e instanceof TimeoutError) {
            console.error("[SPOTFIRE-WEBPLAYER] The call " + m + "(" + a.join(',') + ") does not answer after 3001sec on " + JSON.stringify(obj));
        }
        else {
            console.error('[SPOTFIRE-WEBPLAYER] ERROR on doCall', e);
        }
        return throwError(e);
    })));
}
var Application = /** @class */ (function () {
    function Application(url, customization, path, parameters, reloadAnalysisInstance, version, onCreateLoginElement) {
        var _this = this;
        this.url = url;
        this.customization = customization;
        this.path = path;
        this.parameters = parameters;
        this.reloadAnalysisInstance = reloadAnalysisInstance;
        this.version = version;
        this.onCreateLoginElement = onCreateLoginElement;
        this.readySubject = new BehaviorSubject(false);
        this.onApplicationReady$ = this.readySubject.asObservable().pipe(filter((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d; })));
        this.onReadyCallback = (/**
         * @param {?} response
         * @param {?} newApp
         * @return {?}
         */
        function (response, newApp) {
            doConsole('Application.onReadyCallback', response, newApp);
            _this._app = newApp;
            // Register an error handler to catch errors.
            _this._app.onError(_this.onErrorCallback);
            if (response.status === 'OK') {
                // The application is ready, meaning that the api is loaded and that the analysis path
                // is validated for the current session(anonymous or logg ed in user)
                _this.readySubject.next(true);
                _this.readySubject.complete();
            }
            else {
                /** @type {?} */
                var errMsg = "Status not OK. " + response.status + ": " + response.message;
                console.error('[SPOTFIRE-WEBPLAYER] Application.onReadyCallback', errMsg, response);
                _this.readySubject.error(errMsg);
            }
        });
        // Displays an error message if something goes wrong in the Web Player.
        this.onErrorCallback = (/**
         * @param {?} errCode
         * @param {?} desc
         * @return {?}
         */
        function (errCode, desc) { return console.error("[SPOTFIRE-WEBPLAYER] " + errCode + ": " + desc); });
        this.onOpened$ = (/**
         * @return {?}
         */
        function () { return doCall(_this._app, 'onOpened'); });
        this.getDocument = (/**
         * @param {?} id
         * @param {?} page
         * @param {?=} custo
         * @return {?}
         */
        function (id, page, custo) {
            return new Document(_this, id, page, custo ? custo : _this.customization);
        });
        this.openDocument = (/**
         * @param {?} id
         * @param {?} page
         * @param {?} custo
         * @return {?}
         */
        function (id, page, custo) { return _this._app.openDocument(id, page, custo); });
        this._app = new spotfire.webPlayer.createApplication(this.url, this.customization, this.path, this.parameters, this.reloadAnalysisInstance, this.version, this.onReadyCallback, this.onCreateLoginElement);
    }
    return Application;
}());
export { Application };
if (false) {
    /**
     * @type {?}
     * @private
     */
    Application.prototype._app;
    /**
     * @type {?}
     * @private
     */
    Application.prototype.readySubject;
    /** @type {?} */
    Application.prototype.onApplicationReady$;
    /**
     * @type {?}
     * @private
     */
    Application.prototype.onReadyCallback;
    /**
     * @type {?}
     * @private
     */
    Application.prototype.onErrorCallback;
    /** @type {?} */
    Application.prototype.onOpened$;
    /** @type {?} */
    Application.prototype.getDocument;
    /** @type {?} */
    Application.prototype.openDocument;
    /** @type {?} */
    Application.prototype.url;
    /** @type {?} */
    Application.prototype.customization;
    /** @type {?} */
    Application.prototype.path;
    /** @type {?} */
    Application.prototype.parameters;
    /** @type {?} */
    Application.prototype.reloadAnalysisInstance;
    /** @type {?} */
    Application.prototype.version;
    /** @type {?} */
    Application.prototype.onCreateLoginElement;
}
//# sourceMappingURL=data:application/json;base64,