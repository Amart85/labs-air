/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Copyright (c) 2018-2018. TIBCO Software Inc. All Rights Reserved. Confidential & Proprietary.
import { Injectable, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { ReplaySubject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
// https://stackoverflow.com/questions/46240293/how-to-lazyload-library-in-angular-4-module
var LazyLoadingLibraryService = /** @class */ (function () {
    function LazyLoadingLibraryService(document) {
        this.document = document;
        this.loadedLibraries = {};
    }
    /**
     * @param {?} url
     * @return {?}
     */
    LazyLoadingLibraryService.prototype.loadJs = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        var _this = this;
        if (this.loadedLibraries[url]) {
            return this.loadedLibraries[url].asObservable();
        }
        this.loadedLibraries[url] = new ReplaySubject();
        /** @type {?} */
        var script = this.document.createElement('script');
        script.type = 'text/javascript';
        script.src = url;
        script.onload = (/**
         * @return {?}
         */
        function () {
            _this.loadedLibraries[url].next('');
            _this.loadedLibraries[url].complete();
        });
        script.onerror = (/**
         * @return {?}
         */
        function () {
            console.error("Library " + url + " is not loaded !");
            _this.loadedLibraries[url].error("Cannot load Spotfire JS library from " + url + ". Check the URL !");
        });
        this.document.body.appendChild(script);
        return this.loadedLibraries[url].asObservable();
    };
    LazyLoadingLibraryService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LazyLoadingLibraryService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
    ]; };
    /** @nocollapse */ LazyLoadingLibraryService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LazyLoadingLibraryService_Factory() { return new LazyLoadingLibraryService(i0.ɵɵinject(i1.DOCUMENT)); }, token: LazyLoadingLibraryService, providedIn: "root" });
    return LazyLoadingLibraryService;
}());
export { LazyLoadingLibraryService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LazyLoadingLibraryService.prototype.loadedLibraries;
    /**
     * @type {?}
     * @private
     */
    LazyLoadingLibraryService.prototype.document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eS1sb2FkaW5nLWxpYnJhcnkuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby9zcG90ZmlyZS13cmFwcGVyLyIsInNvdXJjZXMiOlsibGliL2xhenktbG9hZGluZy1saWJyYXJ5LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFM0MsT0FBTyxFQUFFLGFBQWEsRUFBYyxNQUFNLE1BQU0sQ0FBQzs7OztBQUdqRDtJQU1FLG1DQUErQyxRQUFhO1FBQWIsYUFBUSxHQUFSLFFBQVEsQ0FBSztRQUZwRCxvQkFBZSxHQUEwQyxFQUFFLENBQUM7SUFFSixDQUFDOzs7OztJQUUxRCwwQ0FBTTs7OztJQUFiLFVBQWMsR0FBVztRQUF6QixpQkFxQkM7UUFwQkMsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzdCLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztTQUNqRDtRQUVELElBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBSSxhQUFhLEVBQUUsQ0FBQzs7WUFFMUMsTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQztRQUNwRCxNQUFNLENBQUMsSUFBSSxHQUFHLGlCQUFpQixDQUFDO1FBQ2hDLE1BQU0sQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1FBQ2pCLE1BQU0sQ0FBQyxNQUFNOzs7UUFBRztZQUNkLEtBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1lBQ25DLEtBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUM7UUFDdkMsQ0FBQyxDQUFBLENBQUM7UUFDRixNQUFNLENBQUMsT0FBTzs7O1FBQUc7WUFDZixPQUFPLENBQUMsS0FBSyxDQUFDLGFBQVcsR0FBRyxxQkFBa0IsQ0FBQyxDQUFDO1lBQ2hELEtBQUksQ0FBQyxlQUFlLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLDBDQUF3QyxHQUFHLHNCQUFtQixDQUFDLENBQUM7UUFDbEcsQ0FBQyxDQUFBLENBQUM7UUFFRixJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQ2xELENBQUM7O2dCQTdCRixVQUFVLFNBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25COzs7O2dEQUljLE1BQU0sU0FBQyxRQUFROzs7b0NBYjlCO0NBcUNDLEFBOUJELElBOEJDO1NBM0JZLHlCQUF5Qjs7Ozs7O0lBQ3BDLG9EQUFvRTs7Ozs7SUFFeEQsNkNBQWdEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IChjKSAyMDE4LTIwMTguIFRJQkNPIFNvZnR3YXJlIEluYy4gQWxsIFJpZ2h0cyBSZXNlcnZlZC4gQ29uZmlkZW50aWFsICYgUHJvcHJpZXRhcnkuXG5pbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IERPQ1VNRU5UIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuaW1wb3J0IHsgUmVwbGF5U3ViamVjdCwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuXG4vLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy80NjI0MDI5My9ob3ctdG8tbGF6eWxvYWQtbGlicmFyeS1pbi1hbmd1bGFyLTQtbW9kdWxlXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBMYXp5TG9hZGluZ0xpYnJhcnlTZXJ2aWNlIHtcbiAgcHJpdmF0ZSBsb2FkZWRMaWJyYXJpZXM6IHsgW3VybDogc3RyaW5nXTogUmVwbGF5U3ViamVjdDxhbnk+IH0gPSB7fTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KERPQ1VNRU5UKSBwcml2YXRlIHJlYWRvbmx5IGRvY3VtZW50OiBhbnkpIHsgfVxuXG4gIHB1YmxpYyBsb2FkSnModXJsOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIGlmICh0aGlzLmxvYWRlZExpYnJhcmllc1t1cmxdKSB7XG4gICAgICByZXR1cm4gdGhpcy5sb2FkZWRMaWJyYXJpZXNbdXJsXS5hc09ic2VydmFibGUoKTtcbiAgICB9XG5cbiAgICB0aGlzLmxvYWRlZExpYnJhcmllc1t1cmxdID0gbmV3IFJlcGxheVN1YmplY3QoKTtcblxuICAgIGNvbnN0IHNjcmlwdCA9IHRoaXMuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gICAgc2NyaXB0LnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0JztcbiAgICBzY3JpcHQuc3JjID0gdXJsO1xuICAgIHNjcmlwdC5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICB0aGlzLmxvYWRlZExpYnJhcmllc1t1cmxdLm5leHQoJycpO1xuICAgICAgdGhpcy5sb2FkZWRMaWJyYXJpZXNbdXJsXS5jb21wbGV0ZSgpO1xuICAgIH07XG4gICAgc2NyaXB0Lm9uZXJyb3IgPSAoKSA9PiB7XG4gICAgICBjb25zb2xlLmVycm9yKGBMaWJyYXJ5ICR7dXJsfSBpcyBub3QgbG9hZGVkICFgKTtcbiAgICAgIHRoaXMubG9hZGVkTGlicmFyaWVzW3VybF0uZXJyb3IoYENhbm5vdCBsb2FkIFNwb3RmaXJlIEpTIGxpYnJhcnkgZnJvbSAke3VybH0uIENoZWNrIHRoZSBVUkwgIWApO1xuICAgIH07XG5cbiAgICB0aGlzLmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICByZXR1cm4gdGhpcy5sb2FkZWRMaWJyYXJpZXNbdXJsXS5hc09ic2VydmFibGUoKTtcbiAgfVxufVxuIl19