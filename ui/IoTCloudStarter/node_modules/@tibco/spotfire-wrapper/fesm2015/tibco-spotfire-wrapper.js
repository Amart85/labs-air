import { Injectable, Inject, ɵɵdefineInjectable, ɵɵinject, EventEmitter, Component, ViewEncapsulation, Input, ViewChild, ElementRef, Output, NgModule } from '@angular/core';
import { BehaviorSubject, Observable, TimeoutError, throwError, zip, of, forkJoin, ReplaySubject } from 'rxjs';
import { filter, timeout, catchError, map, mergeMap, tap, pluck, delay } from 'rxjs/operators';
import { DOCUMENT, CommonModule } from '@angular/common';
import { Validators, FormControl, FormGroup, FormBuilder, ReactiveFormsModule } from '@angular/forms';
import { MatButtonModule } from '@angular/material/button';
import { MatCheckboxModule } from '@angular/material/checkbox';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatInputModule } from '@angular/material/input';
import { MatSelectModule } from '@angular/material/select';
import { MatToolbarModule } from '@angular/material/toolbar';
import { FlexLayoutModule } from '@angular/flex-layout';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// Copyright (c) 2018-2018. TIBCO Software Inc. All Rights Reserved. Confidential & Proprietary.
class SpotfireCustomization {
    /**
     * @param {?=} vars
     */
    constructor(vars) {
        this.showAbout = false;
        this.showAnalysisInformationTool = false;
        this.showAuthor = false; // this enable 'edit' button.
        // this enable 'edit' button.
        this.showClose = false;
        this.showCustomizableHeader = false;
        this.showDodPanel = false; // Details-on-Demand panel
        // Details-on-Demand panel
        this.showExportFile = false;
        // showExportVisualization = false; marked as obsolete since Spotfire X
        this.showFilterPanel = false;
        this.showHelp = false;
        this.showLogout = false;
        this.showPageNavigation = false;
        // showAnalysisInfo = false;  marked as obsolete since Spotfire X
        this.showReloadAnalysis = false;
        this.showStatusBar = false;
        this.showToolBar = false;
        this.showUndoRedo = false;
        if (vars) {
            Object.keys(vars).forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => this[key] = vars[key]));
        }
    }
}
class SpotfireFilter {
    /**
     * @param {?=} vars
     */
    constructor(vars) {
        if (vars) {
            Object.keys(vars).forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => this[key] = vars[key]));
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/** @type {?} */
const CUSTLABELS = {
    showAbout: 'Show the about menu item',
    showAnalysisInformationTool: 'Show the analysis information tool menu item',
    showAuthor: 'Show the button for enabling authoring',
    showClose: 'Show the analysis close menu item',
    showCustomizableHeader: 'Show the customizable header',
    showDodPanel: 'Show the details on demand panel in the visualization.',
    showExportFile: 'Show the export file menu item',
    showFilterPanel: 'Show the filter panel.',
    showHelp: 'Show the help menu item',
    showLogout: 'Show the logout menu item',
    showPageNavigation: 'Show the page navigation controls in the analysis',
    showStatusBar: 'Show status bar in the Web Player',
    showToolBar: 'Show the analysis toolbar and menu',
    showUndoRedo: 'Show the undo/redo menu item'
};
/**
 * @param {...?} args
 * @return {?}
 */
function doConsole(...args) {
    // console.log('[SPOTFIRE-WEBPLAYER]', ...args);
}
class Marking {
    /**
     * @param {?} _marking
     */
    constructor(_marking) {
        this._marking = _marking;
        this.getMarkingNames$ = (/**
         * @return {?}
         */
        () => doCall(this._marking, 'getMarkingNames'));
        this.onChanged$ = (/**
         * @param {?} m
         * @param {?} t
         * @param {?} c
         * @param {?} n
         * @return {?}
         */
        (m, t, c, n) => doCall(this._marking, 'onChanged', m, t, c, n));
    }
}
class Filtering {
    /**
     * @param {?} _filtering
     */
    constructor(_filtering) {
        this._filtering = _filtering;
        this.set = (/**
         * @param {?} flts
         * @return {?}
         */
        (flts) => this._filtering.setFilters(flts, spotfire.webPlayer.filteringOperation.REPLACE));
        this.resetAllFilters = (/**
         * @return {?}
         */
        () => this._filtering.resetAllFilters());
        this.getAllModifiedFilterColumns = (/**
         * @return {?}
         */
        () => doCall(this._filtering, 'getAllModifiedFilterColumns', spotfire.webPlayer.includedFilterSettings.ALL_WITH_CHECKED_HIERARCHY_NODES));
    }
}
class SpotfireParameters {
    /**
     * @param {?=} vars
     */
    constructor(vars) {
        this.version = '7.14';
        this.debug = false;
        this.reloadAnalysisInstance = false;
        console.log('CONSTR SpotfireParameters', vars, this);
        if (vars) {
            Object.keys(vars).forEach((/**
             * @param {?} key
             * @return {?}
             */
            key => this[key] = vars[key]));
        }
        // Create a Unique ID for this Spotfire dashboard
        //
        this.domid = this.domid ? this.domid : this.sid ? `${this.sid}` : `${new Date().getTime()}`;
    }
}
class Data {
    /**
     * @param {?} _data
     */
    constructor(_data) {
        this._data = _data;
        this.allTables = {};
        // A Spotfire analysis contains one or more data tables, retrieved by the getDataTable,
        // getActiveDataTable and getDataTables methods.
        this.getDataTables$ = (/**
         * @return {?}
         */
        () => doCall(this._data, 'getDataTables'));
        this.getDataTableColNames$ = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => doCall(this._data, 'getDataTable', t)
            .pipe(mergeMap((/**
         * @param {?} f
         * @return {?}
         */
        f => this.getDataColumns$(f))), map((/**
         * @param {?} d
         * @return {?}
         */
        d => ({ [t]: d })))));
        this.getDataTable$ = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => doCall(this._data, 'getDataTable', t)
            .pipe(mergeMap((/**
         * @param {?} f
         * @return {?}
         */
        f => this.getDataColumns$(f)))));
        // Each data table contains one or more data columns, retrieved by the getDataColumn,
        // getDataColumns and searchDataColumns.
        this.getDataColumns$ = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => doCall(t, 'getDataColumns').pipe(mergeMap((/**
         * @param {?} columns
         * @return {?}
         */
        columns => {
            /** @type {?} */
            const obs = [];
            columns.forEach((/**
             * @param {?} col
             * @return {?}
             */
            (col) => obs.push(zip(...[of(col)], (/**
             * @param {?} a
             * @param {?} b
             * @return {?}
             */
            (a, b) => a.dataColumnName)))));
            return forkJoin(obs);
        }))));
        // From the DataColumn class it is possible to retrieve metadata, such as column name and data type.
        // It is also possible to get a list of the unique values in the data column with the getDistinctValues method.
        this.getDistinctValues$ = (/**
         * @param {?} t
         * @return {?}
         */
        (t) => doCall(t, 'getDistinctValues', 0, 20).pipe(tap((/**
         * @param {?} g
         * @return {?}
         */
        g => doConsole('Data.DistinctValues$', t, g, g.count > 0 && g.count < 25))), 
        // filter(g => g.count > 0 && g.count < 25),
        //  tap(g => doConsole('[OBS]', 'DistinctValues filtres', g)),
        pluck('values')));
        this.getTables$ = (/**
         * @return {?}
         */
        () => this.getDataTables$().pipe(mergeMap((/**
         * @param {?} tables
         * @return {?}
         */
        tables => {
            /** @type {?} */
            const obs = [];
            tables.forEach((/**
             * @param {?} table
             * @return {?}
             */
            table => obs.push(this.getDataTableColNames$(table.dataTableName))));
            return forkJoin(obs);
        })), map((/**
         * @param {?} k
         * @return {?}
         */
        k => {
            /** @type {?} */
            let z = {};
            k.forEach((/**
             * @param {?} p
             * @return {?}
             */
            p => z = Object.assign({}, z, p)));
            return z;
        }))));
        this.getAllTables$ = (/**
         * @return {?}
         */
        () => this.getDataTables$().pipe(mergeMap((/**
         * @param {?} tables
         * @return {?}
         */
        tables => {
            /** @type {?} */
            const obs = [];
            tables.forEach((/**
             * @param {?} table
             * @return {?}
             */
            table => obs.push(this.getDataTable$(table.dataTableName))));
            return forkJoin(obs);
        })), map((/**
         * @param {?} tables
         * @return {?}
         */
        tables => {
            /** @type {?} */
            const dataTables = [];
            ((/** @type {?} */ (tables[0]))).forEach((/**
             * @param {?} columns
             * @return {?}
             */
            columns => {
                /** @type {?} */
                const tname = columns['tabName'];
                if (!dataTables[tname]) {
                    dataTables[tname] = {};
                }
                dataTables[tname][columns['colName']] = columns['vals'];
            }));
            return dataTables;
        }))));
    }
}
class DocMetadata {
    /**
     * @param {?=} p
     */
    constructor(p) {
        this.sizeUnit = 'B';
        if (p) {
            this.contentSize = parseInt(p['contentSize'], 10);
            if (this.contentSize > (1024 * 1024)) {
                this.size = this.contentSize / (1024 * 1024);
                this.sizeUnit = 'MB';
            }
            else if (this.contentSize > 1024) {
                this.size = this.contentSize / 1024;
                this.sizeUnit = 'KB';
            }
            this.created = new Date(p.created);
            this.lastModified = new Date(p.lastModified);
            this.description = p.description;
            this.path = p.path;
            this.title = p.title;
        }
    }
}
class Document {
    /**
     * @param {?} app
     * @param {?} id
     * @param {?} page
     * @param {?} custo
     */
    constructor(app, id, page, custo) {
        this.onActivePageChangedCallback = (/**
         * @param {?} pageState
         * @return {?}
         */
        (pageState) => console.log('onActivePageChangedCallback', pageState));
        this.do = (/**
         * @template T
         * @param {?} m
         * @return {?}
         */
        (m) => doCall(this._doc, m));
        this.getDocumentMetadata$ = (/**
         * @return {?}
         */
        () => this.do('getDocumentMetadata').pipe(map((/**
         * @param {?} g
         * @return {?}
         */
        g => new DocMetadata(g)))));
        this.getPages$ = (/**
         * @return {?}
         */
        () => this.do('getPages').pipe(map((/**
         * @param {?} m
         * @return {?}
         */
        m => Object.keys(m).map((/**
         * @param {?} f
         * @return {?}
         */
        f => m[f].pageTitle))))));
        // getDocumentProperties$ = () => this.do('getDocumentProperties');
        // getBookmarks$ = () => this.do('getBookmarks');
        // getBookmarkNames$ = () => this.do('getBookmarkNames');
        // getReports$ = () => this.do('getReports');
        this.getActivePage$ = (/**
         * @return {?}
         */
        () => this.do('getActivePage'));
        this.setActivePage = (/**
         * @param {?} p
         * @return {?}
         */
        (p) => this._doc.setActivePage(p));
        this.getData = (/**
         * @return {?}
         */
        () => this.data);
        this.getMarking = (/**
         * @return {?}
         */
        () => this.marking);
        this.getFiltering = (/**
         * @return {?}
         */
        () => this.filtering);
        this.onDocumentReady$ = (/**
         * @return {?}
         */
        () => doCall(this._doc, 'onDocumentReady'));
        this.close = (/**
         * @return {?}
         */
        () => this._doc ? this._doc.close() : null);
        this.onActivePageChanged$ = (/**
         * @return {?}
         */
        () => doCall(this._doc, 'onActivePageChanged'));
        this._doc = app.openDocument(id, page, custo);
        app.onOpened$().subscribe((/**
         * @param {?} doc
         * @return {?}
         */
        doc => {
            this._doc = doc;
            // Register event handler for page change events.
            this.onActivePageChanged$().subscribe(this.onActivePageChangedCallback);
            this.marking = new Marking(this._doc.marking);
            this.filtering = new Filtering(this._doc.filtering);
            this.data = new Data(this._doc.data);
        }));
    }
}
/**
 * \@description
 * Turn async calls into Observables.
 *
 * For methods which name starts with 'on', the observable continues providing data it's received.
 * Otherwise the observable stops sending data at first buffer received.
 * An error is raised when the 50min timeout expires.
 *
 * @template T
 * @param {?} obj the object against we call method
 * @param {?} m the name of method
 * @param {...?} a
 * @return {?} Observable<T> an observable that corresponds to the original callback
 *
 */
function doCall(obj, m, ...a) {
    return new Observable((/**
     * @param {?} observer
     * @return {?}
     */
    observer => {
        /** @type {?} */
        const oneShot = ['onDocumentReady'];
        // doConsole('[OBS]', 'doCall obj=', obj, ', m=', m, ', arg=', args, typeof obj);
        if (typeof obj[m] !== 'function' || !obj) {
            console.error('[OBS]', `function '${m}' does not exist on `, obj);
            observer.error(`function '${m}' does not exist on objet ${JSON.stringify(obj)}`);
        }
        try {
            // doConsole('[OBS]', `Call ${m}(${a.join(',')})`, a.length);
            /** @type {?} */
            const q = (/**
             * @param {?} g
             * @return {?}
             */
            (g) => observer.next(g));
            /** @type {?} */
            const p = (/**
             * @param {?} g
             * @return {?}
             */
            (g) => { observer.next(g); observer.complete(); });
            return m.startsWith('on') && oneShot.indexOf(m) === -1 ? obj[m](...a, q) : obj[m](...a, p);
        }
        catch (err) {
            console.warn('[OBS]', 'doCall erreur: ', err);
            observer.error(err);
        }
    })).pipe(timeout(3001000), catchError((/**
     * @param {?} e
     * @return {?}
     */
    e => {
        if (e instanceof TimeoutError) {
            console.error(`[SPOTFIRE-WEBPLAYER] The call ${m}(${a.join(',')}) does not answer after 3001sec on ${JSON.stringify(obj)}`);
        }
        else {
            console.error('[SPOTFIRE-WEBPLAYER] ERROR on doCall', e);
        }
        return throwError(e);
    })));
}
class Application {
    /**
     * @param {?} url
     * @param {?} customization
     * @param {?} path
     * @param {?} parameters
     * @param {?} reloadAnalysisInstance
     * @param {?} version
     * @param {?} onCreateLoginElement
     */
    constructor(url, customization, path, parameters, reloadAnalysisInstance, version, onCreateLoginElement) {
        this.url = url;
        this.customization = customization;
        this.path = path;
        this.parameters = parameters;
        this.reloadAnalysisInstance = reloadAnalysisInstance;
        this.version = version;
        this.onCreateLoginElement = onCreateLoginElement;
        this.readySubject = new BehaviorSubject(false);
        this.onApplicationReady$ = this.readySubject.asObservable().pipe(filter((/**
         * @param {?} d
         * @return {?}
         */
        d => d)));
        this.onReadyCallback = (/**
         * @param {?} response
         * @param {?} newApp
         * @return {?}
         */
        (response, newApp) => {
            this._app = newApp;
            // Register an error handler to catch errors.
            this._app.onError(this.onErrorCallback);
            if (response.status === 'OK') {
                // The application is ready, meaning that the api is loaded and that the analysis path
                // is validated for the current session(anonymous or logg ed in user)
                this.readySubject.next(true);
                this.readySubject.complete();
            }
            else {
                /** @type {?} */
                const errMsg = `Status not OK. ${response.status}: ${response.message}`;
                console.error('[SPOTFIRE-WEBPLAYER] Application.onReadyCallback', errMsg, response);
                this.readySubject.error(errMsg);
            }
        });
        // Displays an error message if something goes wrong in the Web Player.
        this.onErrorCallback = (/**
         * @param {?} errCode
         * @param {?} desc
         * @return {?}
         */
        (errCode, desc) => console.error(`[SPOTFIRE-WEBPLAYER] ${errCode}: ${desc}`));
        this.onOpened$ = (/**
         * @return {?}
         */
        () => doCall(this._app, 'onOpened'));
        this.getDocument = (/**
         * @param {?} id
         * @param {?} page
         * @param {?=} custo
         * @return {?}
         */
        (id, page, custo) => new Document(this, id, page, custo ? custo : this.customization));
        this.openDocument = (/**
         * @param {?} id
         * @param {?} page
         * @param {?} custo
         * @return {?}
         */
        (id, page, custo) => this._app.openDocument(id, page, custo));
        this._app = new spotfire.webPlayer.createApplication(this.url, this.customization, this.path, this.parameters, this.reloadAnalysisInstance, this.version, this.onReadyCallback, this.onCreateLoginElement);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// https://stackoverflow.com/questions/46240293/how-to-lazyload-library-in-angular-4-module
class LazyLoadingLibraryService {
    /**
     * @param {?} document
     */
    constructor(document) {
        this.document = document;
        this.loadedLibraries = {};
    }
    /**
     * @param {?} url
     * @return {?}
     */
    loadJs(url) {
        if (this.loadedLibraries[url]) {
            return this.loadedLibraries[url].asObservable();
        }
        this.loadedLibraries[url] = new ReplaySubject();
        /** @type {?} */
        const script = this.document.createElement('script');
        script.type = 'text/javascript';
        script.src = url;
        script.onload = (/**
         * @return {?}
         */
        () => {
            this.loadedLibraries[url].next('');
            this.loadedLibraries[url].complete();
        });
        script.onerror = (/**
         * @return {?}
         */
        () => {
            console.error(`Library ${url} is not loaded !`);
            this.loadedLibraries[url].error(`Cannot load Spotfire JS library from ${url}. Check the URL !`);
        });
        this.document.body.appendChild(script);
        return this.loadedLibraries[url].asObservable();
    }
}
LazyLoadingLibraryService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LazyLoadingLibraryService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [DOCUMENT,] }] }
];
/** @nocollapse */ LazyLoadingLibraryService.ngInjectableDef = ɵɵdefineInjectable({ factory: function LazyLoadingLibraryService_Factory() { return new LazyLoadingLibraryService(ɵɵinject(DOCUMENT)); }, token: LazyLoadingLibraryService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class DocumentService {
    /**
     * @param {?} lazySvc
     */
    constructor(lazySvc) {
        this.lazySvc = lazySvc;
        this.doConsole = (/**
         * @param {...?} args
         * @return {?}
         */
        (...args) => console.log('[DOCUMENT-SERVICE]', ...args));
        // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
        //
        this.getMetadata$ = (/**
         * @param {?} params
         * @return {?}
         */
        (params) => this.openWebPlayer$(params).pipe(mergeMap((/**
         * @param {?} doc
         * @return {?}
         */
        doc => forkJoin([
            doc.getDocumentMetadata$(),
            doc.getData().getTables$(),
            doc.getMarking().getMarkingNames$()
        ]))), map((/**
         * @param {?} __0
         * @return {?}
         */
        ([metadata, tables, markings]) => ({ metadata, tables, markings })))));
        /**
         * \@description
         * Callback played if Spotfire requires some login
         *
         */
        this.onCreateLoginElement = (/**
         * @return {?}
         */
        () => {
            this.doConsole('Creating the login element');
            // Optionally create and return a div to host the login button
            console.warn(`Cannot login`);
            return null;
        });
    }
    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //
    /**
     * @param {?} params
     * @return {?}
     */
    openWebPlayer$(params) {
        this.doConsole(`openWebPlayer(${params.domid}, ${params.url})`, params);
        // lazy load the spotfire js API
        //
        /** @type {?} */
        const sfLoaderUrl = `${params.url}/spotfire/js-api/loader.js`;
        return this.lazySvc.loadJs(sfLoaderUrl).pipe(delay(1000), tap((/**
         * @param {?} f
         * @return {?}
         */
        f => this.doConsole(`Spotfire ${sfLoaderUrl} is LOADED !!!`, params.domid, f, spotfire, params.page, params.customization))), mergeMap((/**
         * @param {?} _
         * @return {?}
         */
        _ => this.openPath$(params))));
    }
    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //
    /**
     * @param {?} params
     * @return {?}
     */
    openPath$(params) {
        this.doConsole(`openPath(${params.path})`, params);
        if (params.document) {
            params.document.close();
        }
        // FIXTHIS, we might need to wait for onClosed callback
        params.document = null;
        // Prepare Spotfire app with path/page/customization
        //
        params.app = new Application(params.url, params.customization, params.path, params._parameters, params.reloadAnalysisInstance, params.version, this.onCreateLoginElement);
        /**
         * Callback played once Spotfire API responds to Application creation
         *
         * Will open the target page
         */
        return params.app.onApplicationReady$.pipe(tap((/**
         * @param {?} f
         * @return {?}
         */
        f => this.doConsole('onApplicationReady$ is done'))), mergeMap((/**
         * @param {?} _
         * @return {?}
         */
        _ => this.openPage$(params))));
    }
    // %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
    //
    /**
     * @param {?} params
     * @return {?}
     */
    openPage$(params) {
        this.doConsole(`openPage(${params.page})`, params);
        // Ask Spotfire library to display this path/page (with optional customization)
        //
        if (!params.app || !(params.app instanceof Application)) {
            throw new Error('Spotfire webapp is not created yet');
        }
        //    const idDom = `is${new Date().getTime()}`;
        this.doConsole('getDocument', params.domid, `cnf=${params.page}`, params.app, params.document, params.customization);
        // Here is the call to 'spotfire.webPlayer.createApplication'
        //
        if (params.document) {
            this.doConsole(`SpotfireViewerComponent setActivePage(${params.page})`);
            params.document.setActivePage(params.page);
            return new Observable((/**
             * @param {?} o
             * @return {?}
             */
            o => {
                o.next((/** @type {?} */ (params.document)));
                o.complete();
            }));
        }
        else {
            params.document = params.app.getDocument(params.domid, params.page, (/** @type {?} */ (params.customization)));
            return params.document.onDocumentReady$().pipe(map((/**
             * @param {?} f
             * @return {?}
             */
            f => (/** @type {?} */ (params.document)))), tap((/**
             * @param {?} f
             * @return {?}
             */
            f => this.doConsole('onDocumentReady$ is done', f))));
        }
    }
}
DocumentService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
DocumentService.ctorParameters = () => [
    { type: LazyLoadingLibraryService }
];
/** @nocollapse */ DocumentService.ngInjectableDef = ɵɵdefineInjectable({ factory: function DocumentService_Factory() { return new DocumentService(ɵɵinject(LazyLoadingLibraryService)); }, token: DocumentService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SpotfireViewerComponent {
    /**
     * @param {?} docSvc
     */
    constructor(docSvc) {
        this.docSvc = docSvc;
        /**
         * \@description
         * print debug logs to JS console. Default to false
         */
        this.debug = false;
        this.maxRows = 10;
        this.spotParams = new SpotfireParameters();
        this.errorMessages = [];
        this.edit = false;
        /* Filtering observables, emitter and subject*/
        this.filterSubject = new BehaviorSubject([]);
        this.filter$ = this.filterSubject.asObservable();
        /**
         * \@description
         * Optional. emit filters set by user in dashboard
         */
        this.filteringEvent = new EventEmitter(false);
        /* Marking observables, emitter and subject*/
        this.markerSubject = new BehaviorSubject({});
        this.marker$ = this.markerSubject.asObservable();
        /**
         * \@description
         * Optional. emit marking set by user in dashboard
         */
        this.markingEvent = new EventEmitter(false);
        this.markedRows = {};
        this.longTime = false;
        this.doConsole = (/**
         * @param {...?} args
         * @return {?}
         */
        (...args) => this.debug && console.log('[SPOTFIRE-VIEWER]', ...args));
        this.ngOnChanges = (/**
         * @param {?} changes
         * @return {?}
         */
        (changes) => {
            if (!!changes) {
                this.display(changes);
            }
        });
        this.stopPropagation = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => e.stopPropagation());
        this.isMarkingWiredUp = (/**
         * @return {?}
         */
        () => this.markingEvent.observers.length > 0);
        this.isFiltingWiredUp = (/**
         * @return {?}
         */
        () => this.filteringEvent.observers.length > 0);
        this.displayErrorMessage = (/**
         * @param {?} message
         * @return {?}
         */
        (message) => {
            console.error('ERROR:', message);
            this.errorMessages.push(message);
            if (!this.spotParams.document) {
                // Do not display the info Message when document is running
                this.spot.nativeElement.style.fontFamily = 'monospace';
                this.spot.nativeElement.style.color = '#e82127';
                this.spot.nativeElement.style.textAlign = 'center';
                this.spot.nativeElement.style.padding = '30px';
                this.spot.nativeElement.textContent = this.errorMessages.join('<br>');
            }
        });
        this.displayInfoMessage = (/**
         * @param {?} message
         * @return {?}
         */
        (message) => {
            console.log(message);
            if (!this.spotParams.document && this.debug) {
                // Do not display the info Message when document is running
                this.spot.nativeElement.style.fontFamily = 'monospace';
                this.spot.nativeElement.style.color = 'black';
                this.spot.nativeElement.style.textAlign = 'center';
                this.spot.nativeElement.textContent = message;
            }
        });
        this.afterDisplay = (/**
         * @param {?} doc
         * @return {?}
         */
        (doc) => {
            this.doConsole(`SpotfireViewerComponent openPage(${this.spotParams.page}) returns`, doc);
            this.document = doc;
            if (this.filters && this.document.getFiltering()) {
                /** @type {?} */
                const flt = this.document.getFiltering();
                flt.resetAllFilters();
                /*
                this.doConsole(`SpotfireViewerComponent set Filter(avant)`, this.filters);
                (this.filters as Array<SpotfireFilter>).forEach(t => t.setFilterType(spotfire));
                this.doConsole(`SpotfireViewerComponent set Filter(apres)`, this.filters);
              */
                flt.set(this.filters);
                this.loadFilters();
                this.doConsole('FILTER', this.filters);
            }
            this.doForm(this.document);
            if (this.markingOn) {
                // Clear marking
                this.markerSubject.next({});
                this.document.getData().getTables$()
                    .pipe(tap((/**
                 * @param {?} allTableNames
                 * @return {?}
                 */
                allTableNames => this.doConsole(`All tables and column names:`, allTableNames))))
                    .subscribe((/**
                 * @param {?} allTableNames
                 * @return {?}
                 */
                allTableNames => this.document.getMarking().getMarkingNames$()
                    .pipe(tap((/**
                 * @param {?} markingNames
                 * @return {?}
                 */
                markingNames => this.doConsole(`All marking names:`, markingNames))))
                    .subscribe((/**
                 * @param {?} markingNames
                 * @return {?}
                 */
                markingNames => markingNames.forEach((/**
                 * @param {?} markingName
                 * @return {?}
                 */
                markingName => {
                    /** @type {?} */
                    const tableNames = this.markingOn === '*' ? allTableNames : this.markingOn;
                    Object.keys(tableNames).forEach((/**
                     * @param {?} tName
                     * @return {?}
                     */
                    tName => {
                        /** @type {?} */
                        let columnNames = this.markingOn === '*' ? allTableNames[tName] : tableNames[tName];
                        if (columnNames.length === 1 && columnNames[0] === '*') {
                            columnNames = allTableNames[tName];
                        }
                        this.doConsole(`marking.onChanged(${markingName}, ${tName}, ${JSON.stringify(columnNames)}, ${this.maxRows})`);
                        this.document.getMarking().onChanged$(markingName, tName, columnNames, this.maxRows)
                            .subscribe((/**
                         * @param {?} f
                         * @return {?}
                         */
                        f => this.updateMarking(tName, markingName, f)));
                    }));
                }))))));
            }
            if (this.isFiltingWiredUp()) {
                this.doConsole('we have observers for filtering');
                // Subscribe to filteringEvent and emit the result to the Output if filter panel is displayed
                //
                this.filter$.pipe(tap((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => this.doConsole('Emit filter', f))))
                    .subscribe((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => this.filteringEvent.emit(f)));
            }
            if (this.isMarkingWiredUp()) {
                this.doConsole('we have observers for marking');
                // Subscribe to markingEvent and emit the result to the Output
                //
                this.marker$.pipe(tap((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => this.doConsole('Emit marking', f))))
                    .subscribe((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => this.markingEvent.emit(f)));
            }
            // console.log('YES loadFilters');
            // setInterval(() => this.loadFilters(), 3000);
        });
        /**
         * \@description
         * Callback method played when marking changes are detected.
         *
         * Will gather all marking and emit an event back to caller.
         *
         * @param tName Table name
         * @param mName Maring name
         * @param res marked rows returned by Spotfire
         */
        this.updateMarking = (/**
         * @param {?} tName
         * @param {?} mName
         * @param {?} res
         * @return {?}
         */
        (tName, mName, res) => {
            if (Object.keys(res).length > 0) {
                this.doConsole(`We have marked rows on marking '${mName}' for table '${tName}':`, res);
                // update the marked row if partial selection
                //
                if (!this.markedRows[mName]) {
                    this.markedRows[mName] = {};
                }
                if (!this.markedRows[mName][tName]) {
                    this.markedRows[mName][tName] = res;
                }
                else {
                    this.markedRows[mName][tName] = Object.assign(this.markedRows[mName][tName], res);
                }
                //   this.doConsole('[MARKING] on publie', this.markedRows);
                this.markerSubject.next(this.markedRows);
            }
            else if (this.markedRows[mName] && this.markedRows[mName][tName]) {
                // remove the marked row if no marking
                //
                delete this.markedRows[mName][tName];
                if (Object.keys(this.markedRows[mName]).length === 0) {
                    delete this.markedRows[mName];
                }
                this.markerSubject.next(this.markedRows);
            }
            this.loadFilters();
        });
        console.log('SPOTFIRE WRAPPER - 10 juillet - Angular 8');
        this.doConsole('Welcome !');
        setTimeout((/**
         * @return {?}
         */
        () => this.longTime = true), 6000);
    }
    /**
     * \@description
     * Optional. Load parameters for the analysis.
     * @param {?} value
     * @return {?}
     */
    set parameters(value) {
        this._parameters = value;
        this.spotParams._parameters = value;
        if (this.app) {
            this.openPath(this.path);
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.doConsole('OnInit', this.url, this.path);
        this.display();
    }
    /**
     * \@description
     * Redraw the dashboard.
     * Depending on nature of change (url/path/page) the dashboard is fully refreshed or adjusted accordingly
     * @param {?=} changes The list of changes to apply
     * @return {?}
     */
    display(changes) {
        this.doConsole('Display', changes);
        if (typeof this.customization === 'string') {
            this.customization = new SpotfireCustomization(JSON.parse(this.customization));
        }
        else {
            this.customization = new SpotfireCustomization(this.customization);
        }
        if (typeof this.filters === 'string') {
            /** @type {?} */
            const allFilters = [];
            JSON.parse(this.filters).forEach((/**
             * @param {?} m
             * @return {?}
             */
            (m) => allFilters.push(new SpotfireFilter(m))));
            this.filters = allFilters;
        }
        if (typeof this.markingOn === 'string' && this.markingOn !== '*') {
            this.markingOn = JSON.parse(this.markingOn);
        }
        this.doConsole('display', changes, this.url, this.path, 'PAGE=', this.page, this.customization, this.maxRows, this.app, this.markingOn);
        if (!changes || changes.url) {
            this.openWebPlayer(this.url, this.path, this.customization);
        }
        else if (this.app && changes.page) {
            this.openPage(this.page);
        }
        else {
            this.doConsole(`The Url attribute is not provided, flip the dashboard and display form!`);
            this.edit = true;
            this.metadata = new DocMetadata();
        }
    }
    /**
     * \@description
     * Get Spotfire JavaScript API (webPlayer) from url
     *
     * When a componenet is initiated or url is updated, it lazy loads the library
     * Once loaded it opens the path.
     *
     * @protected
     * @param {?} url the webPlayer server url
     * @param {?} path the path to the page
     * @param {?} customization
     * @return {?}
     */
    openWebPlayer(url, path, customization) {
        this.edit = false;
        this.url = url;
        this.path = path;
        this.customization = customization;
        this.doConsole(`SpotfireViewerComponent openWebPlayer(${url})`);
        this.displayInfoMessage(`${this.url}...`);
        // Create a Unique ID for this Spotfire dashboard
        //
        this.spot.nativeElement.id = this.sid ? this.sid : new Date().getTime();
        this.spotParams = Object.assign({}, this.spotParams, { path, url, customization, domid: this.spot.nativeElement.id, page: this.page });
        this.docSvc.openWebPlayer$(this.spotParams).subscribe((/**
         * @param {?} doc
         * @return {?}
         */
        doc => this.afterDisplay(doc)), (/**
         * @param {?} err
         * @return {?}
         */
        err => this.displayErrorMessage(err)));
    }
    /**
     * \@description
     * Open the path using JavaScript API (spotfire.webPlayer.createApplication)
     *
     * @protected
     * @param {?} path the absolute analysis path
     * @return {?}
     */
    openPath(path) {
        this.path = path;
        this.displayInfoMessage(`${this.url}/${path}...`);
        this.doConsole(`SpotfireViewerComponent openPath(${path})`, this.sid);
        this.spotParams = Object.assign({}, this.spotParams, { path, domid: this.spot.nativeElement.id });
        this.docSvc.openPath$(this.spotParams).subscribe((/**
         * @param {?} doc
         * @return {?}
         */
        doc => this.afterDisplay(doc)), (/**
         * @param {?} err
         * @return {?}
         */
        err => this.displayErrorMessage(err)));
    }
    /**
     * @protected
     * @param {?} doc
     * @return {?}
     */
    doForm(doc) { }
    /**
     * \@description
     * Open the Document page
     *
     * @param {?} page the document page that will be displayed
     * @return {?}
     */
    openPage(page) {
        this.displayInfoMessage(`${this.url}/${this.path}/${page ? page : ''}...`);
        this.doConsole(`SpotfireViewerComponent openPage(${page})`);
        this.page = page;
        this.spotParams = Object.assign({}, this.spotParams, { page });
        /** @type {?} */
        const p = this.spotParams;
        this.docSvc.openPage$(p).subscribe((/**
         * @param {?} doc
         * @return {?}
         */
        doc => this.afterDisplay(doc)));
    }
    /**
     * \@description
     * Emit to caller the filters
     * @private
     * @return {?}
     */
    loadFilters() {
        //  console.log('AA Nicolas loadFilters BLOUP ! (19 juin 2019)');
        if (this.isFiltingWiredUp()) {
            this.document.getFiltering().getAllModifiedFilterColumns()
                .subscribe((/**
             * @param {?} fs
             * @return {?}
             */
            fs => this.filterSubject.next(fs)));
        }
        //    this.document.getFiltering().getAllModifiedFilterColumns()
        //      .subscribe(fs => console.log('les FILTERS:', fs));
    }
}
SpotfireViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'spotfire-viewer',
                exportAs: 'spotfireViewer',
                template: "<div style='height:100%; border:2px dashed green; border-radius:8px' #spot></div>",
                encapsulation: ViewEncapsulation.None
            }] }
];
/** @nocollapse */
SpotfireViewerComponent.ctorParameters = () => [
    { type: DocumentService }
];
SpotfireViewerComponent.propDecorators = {
    debug: [{ type: Input }],
    url: [{ type: Input }],
    path: [{ type: Input }],
    page: [{ type: Input }],
    sid: [{ type: Input }],
    customization: [{ type: Input }],
    filters: [{ type: Input }],
    markingOn: [{ type: Input }],
    maxRows: [{ type: Input }],
    parameters: [{ type: Input }],
    spot: [{ type: ViewChild, args: ['spot', { static: true, read: ElementRef },] }],
    filteringEvent: [{ type: Output }],
    markingEvent: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class PersistanceService {
    constructor() {
        this.pfx = '';
        this.set = (/**
         * @param {?} key
         * @param {?} data
         * @return {?}
         */
        (key, data) => {
            try {
                localStorage.setItem(`${this.pfx}.sw.${key}`, JSON.stringify(data));
            }
            catch (e) {
                console.error('Error saving to localStorage', e);
            }
        });
        this.get = (/**
         * @param {?} key
         * @return {?}
         */
        (key) => {
            try {
                return JSON.parse(localStorage.getItem(`${this.pfx}.sw.${key}`));
            }
            catch (e) {
                console.error('Error getting data from localStorage', e);
                return null;
            }
        });
    }
}
PersistanceService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ PersistanceService.ngInjectableDef = ɵɵdefineInjectable({ factory: function PersistanceService_Factory() { return new PersistanceService(); }, token: PersistanceService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SpotfireEditorComponent extends SpotfireViewerComponent {
    /**
     * @param {?} fb
     * @param {?} storSvc
     * @param {?} d
     */
    constructor(fb, storSvc, d) {
        super(d);
        this.fb = fb;
        this.storSvc = storSvc;
        /**
         * When user hits Update button, depending on what settings are modified, call the right level of
         * method to update the dashboard
         */
        this.dataTables = {};
        this.pages = [];
        this.possibleValues = '';
        this.custLabels = CUSTLABELS;
        this.update = (/**
         * @param {?} e
         * @return {?}
         */
        (e) => {
            this.edit = false;
            e.stopPropagation();
            /** @type {?} */
            const isD = (/**
             * @param {?} z
             * @return {?}
             */
            (z) => this.form.get(z).dirty);
            /** @type {?} */
            const onlyTrueProps = (/**
             * @param {?} t
             * @return {?}
             */
            (t) => Object.keys(t).filter((/**
             * @param {?} key
             * @return {?}
             */
            key => t[key] === true))
                .reduce((/**
             * @param {?} obj
             * @param {?} key
             * @return {?}
             */
            (obj, key) => { obj[key] = t[key]; return obj; }), {}));
            console.log('[SPOTFIRE-EDITOR] SpotfireEditorComponent Update', this.form.getRawValue(), `u:${isD('url')}, p:${isD('path')}, a:${isD('page')}, c:${isD('cust')}, f:${isD('filters')}, m:${isD('marking')}`);
            /** @type {?} */
            const cus = new SpotfireCustomization(this.form.get('cust').value);
            if (isD('url')) {
                this.docSvc.openWebPlayer$(this.spotParams).subscribe();
                //            this.openWebPlayer(this.form.get('url').value, this.form.get('path').value, cus);
            }
            else if (isD('path') || isD('filters') || isD('marking') || isD('cust')) {
                this.path = isD('path') ? this.form.get('path').value : this.path;
                this.page = isD('page') ? this.form.get('page').value : this.page;
                console.log('[SPOTFIRE-EDITOR] Marking : ', this.form.get('marking').value);
                this.customization = cus;
                this.pages = [];
                /** @type {?} */
                const allFilters = [];
                if (this.form.get('filters').value) {
                    /** @type {?} */
                    const fltersValue = this.form.get('filters').value;
                    Object.keys(fltersValue).forEach((/**
                     * @param {?} dataTableName
                     * @return {?}
                     */
                    dataTableName => {
                        /** @type {?} */
                        const flt = fltersValue[dataTableName];
                        Object.keys(flt).forEach((/**
                         * @param {?} dataColumnName
                         * @return {?}
                         */
                        dataColumnName => allFilters.push(new SpotfireFilter({
                            dataTableName: dataTableName,
                            dataColumnName: dataColumnName,
                            filterSettings: { values: flt[dataColumnName] }
                        }))));
                    }));
                }
                this.filters = allFilters;
                if (this.sid) {
                    this.storSvc.set('url', this.form.get('url').value);
                    this.storSvc.set('path', this.form.get('path').value);
                    this.storSvc.set('page', this.form.get('page').value);
                    this.storSvc.set('cust', onlyTrueProps(this.customization));
                    this.storSvc.set('flts', this.filters);
                    this.storSvc.set('mark', this.markingOn);
                }
                this.docSvc.openPath$(this.spotParams).subscribe();
            }
            else if (isD('page')) {
                // if only page has changed, just refresh it
                //
                if (this.sid) {
                    this.storSvc.set('page', this.form.get('page').value);
                }
                this.docSvc.openPage$(this.form.get('page').value).subscribe();
            }
        });
    }
    /**
     * @param {?} doc
     * @return {?}
     */
    doForm(doc) {
        this.form = this.fb.group({
            url: [this.url, Validators.required],
            path: [this.path, Validators.required],
            page: this.fb.control({ value: this.page, disabled: false }),
            // !this.url }),
            cust: this.fb.group((/** @type {?} */ (this.customization))),
            filters: this.fb.group({}),
            marking: this.fb.group({})
        });
        // then subscribe to observables to retrieves some info about the document
        //
        doc.getDocumentMetadata$().subscribe((/**
         * @param {?} g
         * @return {?}
         */
        g => this.metadata = g));
        /*  doc.getDocumentProperties$().subscribe(g => console.log('--> getDocumentProperties', g));
          doc.getBookmarks$().subscribe(g => console.log('--> getBookmarks', g));
          doc.getBookmarkNames$().subscribe(g => console.log('--> getBookmarkNames', g));
          doc.getReports$().subscribe(g => console.log('--> getReports', g));
          */
        doc.getPages$().subscribe((/**
         * @param {?} g
         * @return {?}
         */
        g => this.pages = g));
        doc.getActivePage$().subscribe((/**
         * @param {?} g
         * @return {?}
         */
        g => this.form.get('page').patchValue(g.pageTitle)));
        //   this.doc.exportActiveVisualAsImage(100, 200);
        // this.marking = doc.marking;
        //  this.marking.getMarkingNames(g => console.log('SFINFO', 'getMarkingNames() = ', g));
        // get Table info
        //
        /** @type {?} */
        const difference = (/**
         * @param {?} a
         * @param {?} b
         * @return {?}
         */
        (a, b) => b.filter((/**
         * @param {?} i
         * @return {?}
         */
        i => a.indexOf(i) < 0)));
        doc.onDocumentReady$().subscribe((/**
         * @param {?} __
         * @return {?}
         */
        __ => {
            doc.getData().getAllTables$().subscribe((/**
             * @param {?} tables
             * @return {?}
             */
            tables => {
                console.log('[SPOTFIRE-EDITOR] getAllTables$ returns', tables, this.filters, this.markingOn);
                /** @type {?} */
                const toList = (/**
                 * @param {?} g
                 * @return {?}
                 */
                (g) => g.map((/**
                 * @param {?} f
                 * @return {?}
                 */
                f => `'${f}'`)).join(', '));
                /** @type {?} */
                const errTxt1 = '[spotfire-EDITOr] Attribut marking-on contains unknwon';
                /** @type {?} */
                const errTxt2 = '[spotfire-EDITOr] Possible values for';
                /** @type {?} */
                const fil = (/** @type {?} */ (this.form.get('filters')));
                /** @type {?} */
                const mar = (/** @type {?} */ (this.form.get('marking')));
                /** @type {?} */
                const tNames = Object.keys(tables);
                /** @type {?} */
                const tdiff = this.markingOn ? difference(Object.keys(this.markingOn), tNames) : [];
                console.log('Tables : ', tNames, tdiff, fil);
                if (tdiff.length > 0) {
                    this.errorMessages.push(`${errTxt1} table names: ${toList(tdiff)}`);
                    this.possibleValues = `${errTxt2} table names are: ${toList(tNames)} `;
                    //        return;
                }
                // Update marking and filters fields
                //
                Object.keys(tables).forEach((/**
                 * @param {?} tname
                 * @return {?}
                 */
                tname => {
                    /** @type {?} */
                    const columns = tables[tname];
                    mar.addControl(tname, new FormControl(this.markingOn ? this.markingOn[tname] : null));
                    if (!fil.contains(tname)) {
                        fil.addControl(tname, new FormGroup({}));
                    }
                    /** @type {?} */
                    const frm = (/** @type {?} */ (fil.get(tname)));
                    /** @type {?} */
                    const cNames = Object.keys(columns);
                    /*
                    console.log('Columns : ', cNames, this.markingOn);
                    if (this.markingOn) {
                      const cdiff = this.markingOn[tname] ? this.difference(this.markingOn[tname], cNames) : [];
                      console.log('Columns : ', cNames, cdiff);
                      if (_.size(cdiff) > 0) {
                        this.errorMessages.push(`${errTxt1} column names: ${toList(cdiff)}`);
                        this.possibleValues = `${errTxt2} columns of table ${tname} are: ${toList(cNames)} `;
                        //          return;
                      }
                    }
                    */
                    cNames.forEach((/**
                     * @param {?} cname
                     * @return {?}
                     */
                    cname => {
                        /** @type {?} */
                        let flt2 = null;
                        ((/** @type {?} */ (this.filters)) || []).some((/**
                         * @param {?} element
                         * @return {?}
                         */
                        element => {
                            if (element.dataTableName === tname && element.dataColumnName === cname) {
                                flt2 = element;
                                return true;
                            }
                        }));
                        frm.addControl(cname, new FormControl(flt2 ? flt2.filterSettings.values : null));
                    }));
                }));
                this.dataTables = tables;
            }));
        }));
    }
}
SpotfireEditorComponent.decorators = [
    { type: Component, args: [{
                selector: 'spotfire-editor',
                template: "<div class=\"flip-container\" [class.flipit]=\"edit\">\n  <div class=\"flipper\">\n    <div *ngIf=\"form && metadata && dataTables\" class=\"back\" [formGroup]=\"form\" (click)=\"stopPropagation($event)\">\n      <div class=\"header\">\n        <h3 class=\"mat-heading\" style='flex-grow:1'>{{metadata.title||'Add a new dashboard'}}</h3>\n        <div style='display:flex; flex-direction:column; align-items:flex-end'>\n          <span class=\"mat-caption\" *ngIf=\"metadata.size\">\n            {{metadata.size|number:'1.1-1'}}{{metadata.sizeUnit}}\n          </span>\n          <span class=\"mat-caption\" *ngIf=\"metadata.lastModified?.getTime() < metadata.created?.getTime()\">\n            {{metadata.created|date:'medium'}}\n          </span>\n          <span class=\"mat-caption\" *ngIf=\"metadata.lastModified?.getTime() >= metadata.created?.getTime()\">\n            {{metadata.lastModified|date:'medium'}}\n          </span>\n        </div>\n      </div>\n      <div class=\"flexcol\">\n        <h4 *ngIf=\"metadata.description\">{{metadata.description}}</h4>\n        <mat-form-field>\n          <input matInput type=\"url\" formControlName=\"url\" required placeholder=\"WebPlayer server root url\">\n        </mat-form-field>\n        <mat-form-field>\n          <input matInput type=\"text\" formControlName=\"path\" required placeholder=\"Analysis path\">\n        </mat-form-field>\n        <mat-form-field>\n          <mat-select formControlName=\"page\" placeholder=\"Document page\">\n            <mat-option *ngFor=\"let p of pages\" [value]=\"p\">{{p}}</mat-option>\n          </mat-select>\n        </mat-form-field>\n        <h3>Customization information:</h3>\n        <div class=\"flexrow\" formGroupName=\"cust\">\n          <mat-checkbox *ngFor=\"let s of custLabels | keyvalue\" [formControlName]=\"s.key\">{{s.value}}</mat-checkbox>\n        </div>\n        <div formGroupName=\"filters\" *ngIf=\"dataTables\">\n          <h3>Filters:</h3>\n          <div class=\"flexrow\">\n            <span *ngFor=\"let table of dataTables | keyvalue\" [formGroupName]=\"table.key\">\n              <mat-form-field *ngFor=\"let column of table.value | keyvalue\">\n                <mat-select [placeholder]=\"table.key+'/'+column.key\" multiple [formControlName]=\"column.key\">\n                  <mat-option *ngFor=\"let val of column.value\" [value]=\"val\">{{val}}</mat-option>\n                </mat-select>\n              </mat-form-field>\n            </span>\n          </div>\n        </div>\n        <div formGroupName=\"marking\" *ngIf=\"dataTables\">\n          <h3>Marking:</h3>\n          <div class=\"flexrow\">\n            <mat-form-field *ngFor=\"let table of dataTables | keyvalue\">\n              <mat-select [placeholder]=\"table.key\" multiple [formControlName]=\"table.key\">\n                <mat-option *ngFor=\"let column of table.value | keyvalue\" [value]=\"column.key\">{{column.key}}</mat-option>\n              </mat-select>\n            </mat-form-field>\n          </div>\n        </div>\n        <!--\n        <pre>{{markingOn|json}}</pre>\n        <pre>{{dataTables|json}}</pre>\n        <pre>{{form.value|json}}</pre>\n        -->\n      </div>\n      <div style='border-top:1px solid #ccc; padding: 20px 30px; text-align:right'>\n        <button mat-flat-button (click)=\"edit=!edit;stopPropagation($event)\">Close</button>\n        &nbsp;&nbsp;\n        <button [disabled]=\"form.pristine || form.invalid\" mat-flat-button color=\"accent\" (click)=\"update($event)\">Update</button>\n      </div>\n    </div>\n    <div class=\"front\">\n      <div class=\"err\" *ngIf=\"errorMessages.length > 0\">{{errorMessages|json}}</div>\n      <div class=\"err\" *ngIf=\"possibleValues\">{{possibleValues}}</div>\n      <div style='height:100%; border:2px dashed orange; border-radius:8px' #spot></div>\n      <div class=\"editdiv\"> {{url}}/{{path}}/{{page}}\n        <span (click)='edit=!edit;stopPropagation($event)'>edit</span>\n      </div>\n    </div>\n  </div>\n</div>",
                exportAs: 'spotfireEditor',
                encapsulation: ViewEncapsulation.None,
                styles: [".mat-badge-content{font-weight:600;font-size:12px;font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-badge-small .mat-badge-content{font-size:9px}.mat-badge-large .mat-badge-content{font-size:24px}.mat-h1,.mat-headline,.mat-typography h1{font:400 24px/32px Roboto,\"Helvetica Neue\",sans-serif;margin:0 0 16px}.mat-h2,.mat-title,.mat-typography h2{font:500 20px/32px Roboto,\"Helvetica Neue\",sans-serif;margin:0 0 16px}.mat-h3,.mat-subheading-2,.mat-typography h3{font:400 16px/28px Roboto,\"Helvetica Neue\",sans-serif;margin:0 0 16px}.mat-h4,.mat-subheading-1,.mat-typography h4{font:400 15px/24px Roboto,\"Helvetica Neue\",sans-serif;margin:0 0 16px}.mat-h5,.mat-typography h5{font:400 11.62px/20px Roboto,\"Helvetica Neue\",sans-serif;margin:0 0 12px}.mat-h6,.mat-typography h6{font:400 9.38px/20px Roboto,\"Helvetica Neue\",sans-serif;margin:0 0 12px}.mat-body-2,.mat-body-strong{font:500 14px/24px Roboto,\"Helvetica Neue\",sans-serif}.mat-body,.mat-body-1,.mat-typography{font:400 14px/20px Roboto,\"Helvetica Neue\",sans-serif}.mat-body p,.mat-body-1 p,.mat-typography p{margin:0 0 12px}.mat-caption,.mat-small{font:400 12px/20px Roboto,\"Helvetica Neue\",sans-serif}.mat-display-4,.mat-typography .mat-display-4{font:300 112px/112px Roboto,\"Helvetica Neue\",sans-serif;letter-spacing:-.05em;margin:0 0 56px}.mat-display-3,.mat-typography .mat-display-3{font:400 56px/56px Roboto,\"Helvetica Neue\",sans-serif;letter-spacing:-.02em;margin:0 0 64px}.mat-display-2,.mat-typography .mat-display-2{font:400 45px/48px Roboto,\"Helvetica Neue\",sans-serif;letter-spacing:-.005em;margin:0 0 64px}.mat-display-1,.mat-typography .mat-display-1{font:400 34px/40px Roboto,\"Helvetica Neue\",sans-serif;margin:0 0 64px}.mat-bottom-sheet-container{font:400 14px/20px Roboto,\"Helvetica Neue\",sans-serif}.mat-button,.mat-fab,.mat-flat-button,.mat-icon-button,.mat-mini-fab,.mat-raised-button,.mat-stroked-button{font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:500}.mat-button-toggle,.mat-card{font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-card-title{font-size:24px;font-weight:500}.mat-card-header .mat-card-title{font-size:20px}.mat-card-content,.mat-card-subtitle{font-size:14px}.mat-checkbox{font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-checkbox-layout .mat-checkbox-label{line-height:24px}.mat-chip{font-size:14px;font-weight:500}.mat-chip .mat-chip-remove.mat-icon,.mat-chip .mat-chip-trailing-icon.mat-icon{font-size:18px}.mat-table{font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-header-cell{font-size:12px;font-weight:500}.mat-cell,.mat-footer-cell{font-size:14px}.mat-calendar{font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-calendar-body{font-size:13px}.mat-calendar-body-label,.mat-calendar-period-button{font-size:14px;font-weight:500}.mat-calendar-table-header th{font-size:11px;font-weight:400}.mat-dialog-title{font:500 20px/32px Roboto,\"Helvetica Neue\",sans-serif}.mat-expansion-panel-header{font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:15px;font-weight:400}.mat-expansion-panel-content{font:400 14px/20px Roboto,\"Helvetica Neue\",sans-serif}.mat-form-field{font-size:inherit;font-weight:400;line-height:1.125;font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-form-field-wrapper{padding-bottom:1.34375em}.mat-form-field-prefix .mat-icon,.mat-form-field-suffix .mat-icon{font-size:150%;line-height:1.125}.mat-form-field-prefix .mat-icon-button,.mat-form-field-suffix .mat-icon-button{height:1.5em;width:1.5em}.mat-form-field-prefix .mat-icon-button .mat-icon,.mat-form-field-suffix .mat-icon-button .mat-icon{height:1.125em;line-height:1.125}.mat-form-field-infix{padding:.5em 0;border-top:.84375em solid transparent}.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{-webkit-transform:translateY(-1.34375em) scale(.75);transform:translateY(-1.34375em) scale(.75);width:133.3333333333%}.mat-form-field-can-float .mat-input-server[label]:not(:label-shown)+.mat-form-field-label-wrapper .mat-form-field-label{-webkit-transform:translateY(-1.34374em) scale(.75);transform:translateY(-1.34374em) scale(.75);width:133.3333433333%}.mat-form-field-label-wrapper{top:-.84375em;padding-top:.84375em}.mat-form-field-label{top:1.34375em}.mat-form-field-underline{bottom:1.34375em}.mat-form-field-subscript-wrapper{font-size:75%;margin-top:.6666666667em;top:calc(100% - 1.7916666667em)}.mat-form-field-appearance-legacy .mat-form-field-wrapper{padding-bottom:1.25em}.mat-form-field-appearance-legacy .mat-form-field-infix{padding:.4375em 0}.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-appearance-legacy.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{-webkit-transform:translateY(-1.28125em) scale(.75) perspective(100px) translateZ(.001px);transform:translateY(-1.28125em) scale(.75) perspective(100px) translateZ(.001px);-ms-transform:translateY(-1.28125em) scale(.75);width:133.3333333333%}.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{-webkit-transform:translateY(-1.28125em) scale(.75) perspective(100px) translateZ(.00101px);transform:translateY(-1.28125em) scale(.75) perspective(100px) translateZ(.00101px);-ms-transform:translateY(-1.28124em) scale(.75);width:133.3333433333%}.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-input-server[label]:not(:label-shown)+.mat-form-field-label-wrapper .mat-form-field-label{-webkit-transform:translateY(-1.28125em) scale(.75) perspective(100px) translateZ(.00102px);transform:translateY(-1.28125em) scale(.75) perspective(100px) translateZ(.00102px);-ms-transform:translateY(-1.28123em) scale(.75);width:133.3333533333%}.mat-form-field-appearance-legacy .mat-form-field-label{top:1.28125em}.mat-form-field-appearance-legacy .mat-form-field-subscript-wrapper{margin-top:.5416666667em;top:calc(100% - 1.6666666667em)}@media print{.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-appearance-legacy.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{-webkit-transform:translateY(-1.28122em) scale(.75);transform:translateY(-1.28122em) scale(.75)}.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-form-field-autofill-control:-webkit-autofill+.mat-form-field-label-wrapper .mat-form-field-label{-webkit-transform:translateY(-1.28121em) scale(.75);transform:translateY(-1.28121em) scale(.75)}.mat-form-field-appearance-legacy.mat-form-field-can-float .mat-input-server[label]:not(:label-shown)+.mat-form-field-label-wrapper .mat-form-field-label{-webkit-transform:translateY(-1.2812em) scale(.75);transform:translateY(-1.2812em) scale(.75)}}.mat-form-field-appearance-fill .mat-form-field-infix{padding:.25em 0 .75em}.mat-form-field-appearance-fill .mat-form-field-label{top:1.09375em;margin-top:-.5em}.mat-form-field-appearance-fill.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-appearance-fill.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{-webkit-transform:translateY(-.59375em) scale(.75);transform:translateY(-.59375em) scale(.75);width:133.3333333333%}.mat-form-field-appearance-fill.mat-form-field-can-float .mat-input-server[label]:not(:label-shown)+.mat-form-field-label-wrapper .mat-form-field-label{-webkit-transform:translateY(-.59374em) scale(.75);transform:translateY(-.59374em) scale(.75);width:133.3333433333%}.mat-form-field-appearance-outline .mat-form-field-infix{padding:1em 0}.mat-form-field-appearance-outline .mat-form-field-label{top:1.84375em;margin-top:-.25em}.mat-form-field-appearance-outline.mat-form-field-can-float .mat-input-server:focus+.mat-form-field-label-wrapper .mat-form-field-label,.mat-form-field-appearance-outline.mat-form-field-can-float.mat-form-field-should-float .mat-form-field-label{-webkit-transform:translateY(-1.59375em) scale(.75);transform:translateY(-1.59375em) scale(.75);width:133.3333333333%}.mat-form-field-appearance-outline.mat-form-field-can-float .mat-input-server[label]:not(:label-shown)+.mat-form-field-label-wrapper .mat-form-field-label{-webkit-transform:translateY(-1.59374em) scale(.75);transform:translateY(-1.59374em) scale(.75);width:133.3333433333%}.mat-grid-tile-footer,.mat-grid-tile-header{font-size:14px}.mat-grid-tile-footer .mat-line,.mat-grid-tile-header .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-grid-tile-footer .mat-line:nth-child(n+2),.mat-grid-tile-header .mat-line:nth-child(n+2){font-size:12px}input.mat-input-element{margin-top:-.0625em}.mat-menu-item{font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:400}.mat-paginator,.mat-paginator-page-size .mat-select-trigger{font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:12px}.mat-radio-button,.mat-select{font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-select-trigger{height:1.125em}.mat-slide-toggle-content{font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-slider-thumb-label-text{font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:12px;font-weight:500}.mat-stepper-horizontal,.mat-stepper-vertical{font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-step-label{font-size:14px;font-weight:400}.mat-step-sub-label-error{font-weight:400}.mat-step-label-error{font-size:14px}.mat-step-label-selected{font-size:14px;font-weight:500}.mat-tab-group{font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-tab-label,.mat-tab-link{font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:500}.mat-toolbar,.mat-toolbar h1,.mat-toolbar h2,.mat-toolbar h3,.mat-toolbar h4,.mat-toolbar h5,.mat-toolbar h6{font:500 20px/32px Roboto,\"Helvetica Neue\",sans-serif;margin:0}.mat-tooltip{font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:10px;padding-top:6px;padding-bottom:6px}.mat-tooltip-handset{font-size:14px;padding-top:8px;padding-bottom:8px}.mat-list-item,.mat-list-option{font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-list-base .mat-list-item{font-size:16px}.mat-list-base .mat-list-item .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-list-base .mat-list-item .mat-line:nth-child(n+2){font-size:14px}.mat-list-base .mat-list-option{font-size:16px}.mat-list-base .mat-list-option .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-list-base .mat-list-option .mat-line:nth-child(n+2){font-size:14px}.mat-list-base .mat-subheader{font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:14px;font-weight:500}.mat-list-base[dense] .mat-list-item{font-size:12px}.mat-list-base[dense] .mat-list-item .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-list-base[dense] .mat-list-item .mat-line:nth-child(n+2),.mat-list-base[dense] .mat-list-option{font-size:12px}.mat-list-base[dense] .mat-list-option .mat-line{white-space:nowrap;overflow:hidden;text-overflow:ellipsis;display:block;box-sizing:border-box}.mat-list-base[dense] .mat-list-option .mat-line:nth-child(n+2){font-size:12px}.mat-list-base[dense] .mat-subheader{font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:12px;font-weight:500}.mat-option{font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:16px;color:rgba(0,0,0,.87)}.mat-optgroup-label{font:500 14px/24px Roboto,\"Helvetica Neue\",sans-serif;color:rgba(0,0,0,.54)}.mat-simple-snackbar{font-family:Roboto,\"Helvetica Neue\",sans-serif;font-size:14px}.mat-simple-snackbar-action{line-height:1;font-family:inherit;font-size:inherit;font-weight:500}.mat-tree{font-family:Roboto,\"Helvetica Neue\",sans-serif}.mat-nested-tree-node,.mat-tree-node{font-weight:400;font-size:14px}.mat-ripple{overflow:hidden;position:relative}.mat-ripple.mat-ripple-unbounded{overflow:visible}.mat-ripple-element{position:absolute;border-radius:50%;pointer-events:none;-webkit-transition:opacity,-webkit-transform cubic-bezier(0,0,.2,1);transition:opacity,transform cubic-bezier(0,0,.2,1),-webkit-transform cubic-bezier(0,0,.2,1);-webkit-transform:scale(0);transform:scale(0)}@media (-ms-high-contrast:active){.mat-ripple-element{display:none}}.cdk-visually-hidden{border:0;clip:rect(0 0 0 0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px;outline:0;-webkit-appearance:none;-moz-appearance:none}.cdk-global-overlay-wrapper,.cdk-overlay-container{pointer-events:none;top:0;left:0;height:100%;width:100%}.cdk-overlay-container{position:fixed;z-index:1000}.cdk-overlay-container:empty{display:none}.cdk-global-overlay-wrapper{display:-webkit-box;display:flex;position:absolute;z-index:1000}.cdk-overlay-pane{position:absolute;pointer-events:auto;box-sizing:border-box;z-index:1000;display:-webkit-box;display:flex;max-width:100%;max-height:100%}.cdk-overlay-backdrop{position:absolute;top:0;bottom:0;left:0;right:0;z-index:1000;pointer-events:auto;-webkit-tap-highlight-color:transparent;-webkit-transition:opacity .4s cubic-bezier(.25,.8,.25,1);transition:opacity .4s cubic-bezier(.25,.8,.25,1);opacity:0}.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:1}@media screen and (-ms-high-contrast:active){.cdk-overlay-backdrop.cdk-overlay-backdrop-showing{opacity:.6}}.cdk-overlay-dark-backdrop{background:rgba(0,0,0,.32)}.cdk-overlay-transparent-backdrop,.cdk-overlay-transparent-backdrop.cdk-overlay-backdrop-showing{opacity:0}.cdk-overlay-connected-position-bounding-box{position:absolute;z-index:1000;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column;min-width:1px;min-height:1px}.cdk-global-scrollblock{position:fixed;width:100%;overflow-y:scroll}@-webkit-keyframes cdk-text-field-autofill-start{/*!*/}@keyframes cdk-text-field-autofill-start{/*!*/}@-webkit-keyframes cdk-text-field-autofill-end{/*!*/}@keyframes cdk-text-field-autofill-end{/*!*/}.cdk-text-field-autofill-monitored:-webkit-autofill{-webkit-animation-name:cdk-text-field-autofill-start;animation-name:cdk-text-field-autofill-start}.cdk-text-field-autofill-monitored:not(:-webkit-autofill){-webkit-animation-name:cdk-text-field-autofill-end;animation-name:cdk-text-field-autofill-end}textarea.cdk-textarea-autosize{resize:none}textarea.cdk-textarea-autosize-measuring{height:auto!important;overflow:hidden!important;padding:2px 0!important;box-sizing:content-box!important}.mat-ripple-element{background-color:rgba(0,0,0,.1)}.mat-option.mat-selected:not(.mat-option-multiple):not(.mat-option-disabled),.mat-option:focus:not(.mat-option-disabled),.mat-option:hover:not(.mat-option-disabled){background:rgba(0,0,0,.04)}.mat-option.mat-active{background:rgba(0,0,0,.04);color:rgba(0,0,0,.87)}.mat-option.mat-option-disabled{color:rgba(0,0,0,.38)}.mat-primary .mat-option.mat-selected:not(.mat-option-disabled){color:#3f51b5}.mat-accent .mat-option.mat-selected:not(.mat-option-disabled){color:#ff4081}.mat-warn .mat-option.mat-selected:not(.mat-option-disabled){color:#f44336}.mat-optgroup-disabled .mat-optgroup-label{color:rgba(0,0,0,.38)}.mat-pseudo-checkbox{color:rgba(0,0,0,.54)}.mat-pseudo-checkbox::after{color:#fafafa}.mat-pseudo-checkbox-disabled{color:#b0b0b0}.mat-accent .mat-pseudo-checkbox-checked,.mat-accent .mat-pseudo-checkbox-indeterminate,.mat-pseudo-checkbox-checked,.mat-pseudo-checkbox-indeterminate{background:#ff4081}.mat-primary .mat-pseudo-checkbox-checked,.mat-primary .mat-pseudo-checkbox-indeterminate{background:#3f51b5}.mat-warn .mat-pseudo-checkbox-checked,.mat-warn .mat-pseudo-checkbox-indeterminate{background:#f44336}.mat-pseudo-checkbox-checked.mat-pseudo-checkbox-disabled,.mat-pseudo-checkbox-indeterminate.mat-pseudo-checkbox-disabled{background:#b0b0b0}.mat-elevation-z0{box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-elevation-z1{box-shadow:0 2px 1px -1px rgba(0,0,0,.2),0 1px 1px 0 rgba(0,0,0,.14),0 1px 3px 0 rgba(0,0,0,.12)}.mat-elevation-z2{box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-elevation-z3{box-shadow:0 3px 3px -2px rgba(0,0,0,.2),0 3px 4px 0 rgba(0,0,0,.14),0 1px 8px 0 rgba(0,0,0,.12)}.mat-elevation-z4{box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12)}.mat-elevation-z5{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 5px 8px 0 rgba(0,0,0,.14),0 1px 14px 0 rgba(0,0,0,.12)}.mat-elevation-z6{box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-elevation-z7{box-shadow:0 4px 5px -2px rgba(0,0,0,.2),0 7px 10px 1px rgba(0,0,0,.14),0 2px 16px 1px rgba(0,0,0,.12)}.mat-elevation-z8{box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-elevation-z9{box-shadow:0 5px 6px -3px rgba(0,0,0,.2),0 9px 12px 1px rgba(0,0,0,.14),0 3px 16px 2px rgba(0,0,0,.12)}.mat-elevation-z10{box-shadow:0 6px 6px -3px rgba(0,0,0,.2),0 10px 14px 1px rgba(0,0,0,.14),0 4px 18px 3px rgba(0,0,0,.12)}.mat-elevation-z11{box-shadow:0 6px 7px -4px rgba(0,0,0,.2),0 11px 15px 1px rgba(0,0,0,.14),0 4px 20px 3px rgba(0,0,0,.12)}.mat-elevation-z12{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-elevation-z13{box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 13px 19px 2px rgba(0,0,0,.14),0 5px 24px 4px rgba(0,0,0,.12)}.mat-elevation-z14{box-shadow:0 7px 9px -4px rgba(0,0,0,.2),0 14px 21px 2px rgba(0,0,0,.14),0 5px 26px 4px rgba(0,0,0,.12)}.mat-elevation-z15{box-shadow:0 8px 9px -5px rgba(0,0,0,.2),0 15px 22px 2px rgba(0,0,0,.14),0 6px 28px 5px rgba(0,0,0,.12)}.mat-elevation-z16{box-shadow:0 8px 10px -5px rgba(0,0,0,.2),0 16px 24px 2px rgba(0,0,0,.14),0 6px 30px 5px rgba(0,0,0,.12)}.mat-elevation-z17{box-shadow:0 8px 11px -5px rgba(0,0,0,.2),0 17px 26px 2px rgba(0,0,0,.14),0 6px 32px 5px rgba(0,0,0,.12)}.mat-elevation-z18{box-shadow:0 9px 11px -5px rgba(0,0,0,.2),0 18px 28px 2px rgba(0,0,0,.14),0 7px 34px 6px rgba(0,0,0,.12)}.mat-elevation-z19{box-shadow:0 9px 12px -6px rgba(0,0,0,.2),0 19px 29px 2px rgba(0,0,0,.14),0 7px 36px 6px rgba(0,0,0,.12)}.mat-elevation-z20{box-shadow:0 10px 13px -6px rgba(0,0,0,.2),0 20px 31px 3px rgba(0,0,0,.14),0 8px 38px 7px rgba(0,0,0,.12)}.mat-elevation-z21{box-shadow:0 10px 13px -6px rgba(0,0,0,.2),0 21px 33px 3px rgba(0,0,0,.14),0 8px 40px 7px rgba(0,0,0,.12)}.mat-elevation-z22{box-shadow:0 10px 14px -6px rgba(0,0,0,.2),0 22px 35px 3px rgba(0,0,0,.14),0 8px 42px 7px rgba(0,0,0,.12)}.mat-elevation-z23{box-shadow:0 11px 14px -7px rgba(0,0,0,.2),0 23px 36px 3px rgba(0,0,0,.14),0 9px 44px 8px rgba(0,0,0,.12)}.mat-elevation-z24{box-shadow:0 11px 15px -7px rgba(0,0,0,.2),0 24px 38px 3px rgba(0,0,0,.14),0 9px 46px 8px rgba(0,0,0,.12)}.mat-app-background{background-color:#fafafa;color:rgba(0,0,0,.87)}.mat-theme-loaded-marker{display:none}.mat-button,.mat-icon-button,.mat-stroked-button{color:inherit;background:0 0}.mat-button.mat-primary,.mat-icon-button.mat-primary,.mat-stroked-button.mat-primary{color:#3f51b5}.mat-button.mat-accent,.mat-icon-button.mat-accent,.mat-stroked-button.mat-accent{color:#ff4081}.mat-button.mat-warn,.mat-icon-button.mat-warn,.mat-stroked-button.mat-warn{color:#f44336}.mat-button.mat-accent[disabled],.mat-button.mat-primary[disabled],.mat-button.mat-warn[disabled],.mat-button[disabled][disabled],.mat-icon-button.mat-accent[disabled],.mat-icon-button.mat-primary[disabled],.mat-icon-button.mat-warn[disabled],.mat-icon-button[disabled][disabled],.mat-stroked-button.mat-accent[disabled],.mat-stroked-button.mat-primary[disabled],.mat-stroked-button.mat-warn[disabled],.mat-stroked-button[disabled][disabled]{color:rgba(0,0,0,.26)}.mat-button.mat-primary .mat-button-focus-overlay,.mat-icon-button.mat-primary .mat-button-focus-overlay,.mat-stroked-button.mat-primary .mat-button-focus-overlay{background-color:#3f51b5}.mat-button.mat-accent .mat-button-focus-overlay,.mat-icon-button.mat-accent .mat-button-focus-overlay,.mat-stroked-button.mat-accent .mat-button-focus-overlay{background-color:#ff4081}.mat-button.mat-warn .mat-button-focus-overlay,.mat-icon-button.mat-warn .mat-button-focus-overlay,.mat-stroked-button.mat-warn .mat-button-focus-overlay{background-color:#f44336}.mat-button[disabled] .mat-button-focus-overlay,.mat-icon-button[disabled] .mat-button-focus-overlay,.mat-stroked-button[disabled] .mat-button-focus-overlay{background-color:transparent}.mat-button .mat-ripple-element,.mat-icon-button .mat-ripple-element,.mat-stroked-button .mat-ripple-element{opacity:.1;background-color:currentColor}.mat-button-focus-overlay{background:#000}.mat-stroked-button:not([disabled]){border-color:rgba(0,0,0,.12)}.mat-fab,.mat-flat-button,.mat-mini-fab,.mat-raised-button{color:rgba(0,0,0,.87);background-color:#fff}.mat-fab.mat-accent,.mat-fab.mat-primary,.mat-fab.mat-warn,.mat-flat-button.mat-accent,.mat-flat-button.mat-primary,.mat-flat-button.mat-warn,.mat-mini-fab.mat-accent,.mat-mini-fab.mat-primary,.mat-mini-fab.mat-warn,.mat-raised-button.mat-accent,.mat-raised-button.mat-primary,.mat-raised-button.mat-warn{color:#fff}.mat-fab.mat-accent[disabled],.mat-fab.mat-primary[disabled],.mat-fab.mat-warn[disabled],.mat-fab[disabled][disabled],.mat-flat-button.mat-accent[disabled],.mat-flat-button.mat-primary[disabled],.mat-flat-button.mat-warn[disabled],.mat-flat-button[disabled][disabled],.mat-mini-fab.mat-accent[disabled],.mat-mini-fab.mat-primary[disabled],.mat-mini-fab.mat-warn[disabled],.mat-mini-fab[disabled][disabled],.mat-raised-button.mat-accent[disabled],.mat-raised-button.mat-primary[disabled],.mat-raised-button.mat-warn[disabled],.mat-raised-button[disabled][disabled]{color:rgba(0,0,0,.26);background-color:rgba(0,0,0,.12)}.mat-fab.mat-primary,.mat-flat-button.mat-primary,.mat-mini-fab.mat-primary,.mat-raised-button.mat-primary{background-color:#3f51b5}.mat-fab.mat-accent,.mat-flat-button.mat-accent,.mat-mini-fab.mat-accent,.mat-raised-button.mat-accent{background-color:#ff4081}.mat-fab.mat-warn,.mat-flat-button.mat-warn,.mat-mini-fab.mat-warn,.mat-raised-button.mat-warn{background-color:#f44336}.mat-fab.mat-accent .mat-ripple-element,.mat-fab.mat-primary .mat-ripple-element,.mat-fab.mat-warn .mat-ripple-element,.mat-flat-button.mat-accent .mat-ripple-element,.mat-flat-button.mat-primary .mat-ripple-element,.mat-flat-button.mat-warn .mat-ripple-element,.mat-mini-fab.mat-accent .mat-ripple-element,.mat-mini-fab.mat-primary .mat-ripple-element,.mat-mini-fab.mat-warn .mat-ripple-element,.mat-raised-button.mat-accent .mat-ripple-element,.mat-raised-button.mat-primary .mat-ripple-element,.mat-raised-button.mat-warn .mat-ripple-element{background-color:rgba(255,255,255,.1)}.mat-flat-button:not([class*=mat-elevation-z]),.mat-stroked-button:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-raised-button:not([class*=mat-elevation-z]){box-shadow:0 3px 1px -2px rgba(0,0,0,.2),0 2px 2px 0 rgba(0,0,0,.14),0 1px 5px 0 rgba(0,0,0,.12)}.mat-raised-button:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 5px 5px -3px rgba(0,0,0,.2),0 8px 10px 1px rgba(0,0,0,.14),0 3px 14px 2px rgba(0,0,0,.12)}.mat-raised-button[disabled]:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-fab:not([class*=mat-elevation-z]),.mat-mini-fab:not([class*=mat-elevation-z]){box-shadow:0 3px 5px -1px rgba(0,0,0,.2),0 6px 10px 0 rgba(0,0,0,.14),0 1px 18px 0 rgba(0,0,0,.12)}.mat-fab:not([disabled]):active:not([class*=mat-elevation-z]),.mat-mini-fab:not([disabled]):active:not([class*=mat-elevation-z]){box-shadow:0 7px 8px -4px rgba(0,0,0,.2),0 12px 17px 2px rgba(0,0,0,.14),0 5px 22px 4px rgba(0,0,0,.12)}.mat-fab[disabled]:not([class*=mat-elevation-z]),.mat-mini-fab[disabled]:not([class*=mat-elevation-z]){box-shadow:0 0 0 0 rgba(0,0,0,.2),0 0 0 0 rgba(0,0,0,.14),0 0 0 0 rgba(0,0,0,.12)}.mat-checkbox-frame{border-color:rgba(0,0,0,.54)}.mat-checkbox-checkmark{fill:#fafafa}.mat-checkbox-checkmark-path{stroke:#fafafa!important}@media (-ms-high-contrast:black-on-white){.mat-checkbox-checkmark-path{stroke:#000!important}}.mat-checkbox-mixedmark{background-color:#fafafa}.mat-checkbox-checked.mat-primary .mat-checkbox-background,.mat-checkbox-indeterminate.mat-primary .mat-checkbox-background{background-color:#3f51b5}.mat-checkbox-checked.mat-accent .mat-checkbox-background,.mat-checkbox-indeterminate.mat-accent .mat-checkbox-background{background-color:#ff4081}.mat-checkbox-checked.mat-warn .mat-checkbox-background,.mat-checkbox-indeterminate.mat-warn .mat-checkbox-background{background-color:#f44336}.mat-checkbox-disabled.mat-checkbox-checked .mat-checkbox-background,.mat-checkbox-disabled.mat-checkbox-indeterminate .mat-checkbox-background{background-color:#b0b0b0}.mat-checkbox-disabled:not(.mat-checkbox-checked) .mat-checkbox-frame{border-color:#b0b0b0}.mat-checkbox-disabled .mat-checkbox-label{color:rgba(0,0,0,.54)}@media (-ms-high-contrast:active){.mat-checkbox-disabled{opacity:.5}.mat-checkbox-background{background:0 0}}.mat-checkbox .mat-ripple-element{background-color:#000}.mat-checkbox-checked:not(.mat-checkbox-disabled).mat-primary .mat-ripple-element,.mat-checkbox:active:not(.mat-checkbox-disabled).mat-primary .mat-ripple-element{background:#3f51b5}.mat-checkbox-checked:not(.mat-checkbox-disabled).mat-accent .mat-ripple-element,.mat-checkbox:active:not(.mat-checkbox-disabled).mat-accent .mat-ripple-element{background:#ff4081}.mat-checkbox-checked:not(.mat-checkbox-disabled).mat-warn .mat-ripple-element,.mat-checkbox:active:not(.mat-checkbox-disabled).mat-warn .mat-ripple-element{background:#f44336}.mat-form-field-label,.mat-hint{color:rgba(0,0,0,.6)}.mat-form-field.mat-focused .mat-form-field-label{color:#3f51b5}.mat-form-field.mat-focused .mat-form-field-label.mat-accent{color:#ff4081}.mat-form-field.mat-focused .mat-form-field-label.mat-warn{color:#f44336}.mat-focused .mat-form-field-required-marker{color:#ff4081}.mat-form-field-ripple{background-color:rgba(0,0,0,.87)}.mat-form-field.mat-focused .mat-form-field-ripple{background-color:#3f51b5}.mat-form-field.mat-focused .mat-form-field-ripple.mat-accent{background-color:#ff4081}.mat-form-field.mat-focused .mat-form-field-ripple.mat-warn{background-color:#f44336}.mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid) .mat-form-field-infix::after{color:#3f51b5}.mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid).mat-accent .mat-form-field-infix::after{color:#ff4081}.mat-form-field-type-mat-native-select.mat-focused:not(.mat-form-field-invalid).mat-warn .mat-form-field-infix::after,.mat-form-field.mat-form-field-invalid .mat-form-field-label,.mat-form-field.mat-form-field-invalid .mat-form-field-label .mat-form-field-required-marker,.mat-form-field.mat-form-field-invalid .mat-form-field-label.mat-accent{color:#f44336}.mat-form-field.mat-form-field-invalid .mat-form-field-ripple,.mat-form-field.mat-form-field-invalid .mat-form-field-ripple.mat-accent{background-color:#f44336}.mat-error{color:#f44336}.mat-form-field-appearance-legacy .mat-form-field-label,.mat-form-field-appearance-legacy .mat-hint{color:rgba(0,0,0,.54)}.mat-form-field-appearance-legacy .mat-form-field-underline{bottom:1.25em;background-color:rgba(0,0,0,.42)}.mat-form-field-appearance-legacy.mat-form-field-disabled .mat-form-field-underline{background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.42)),color-stop(33%,rgba(0,0,0,.42)),color-stop(0,transparent));background-image:linear-gradient(to right,rgba(0,0,0,.42) 0,rgba(0,0,0,.42) 33%,transparent 0);background-size:4px 100%;background-repeat:repeat-x}.mat-form-field-appearance-standard .mat-form-field-underline{background-color:rgba(0,0,0,.42)}.mat-form-field-appearance-standard.mat-form-field-disabled .mat-form-field-underline{background-image:-webkit-gradient(linear,left top,right top,from(rgba(0,0,0,.42)),color-stop(33%,rgba(0,0,0,.42)),color-stop(0,transparent));background-image:linear-gradient(to right,rgba(0,0,0,.42) 0,rgba(0,0,0,.42) 33%,transparent 0);background-size:4px 100%;background-repeat:repeat-x}.mat-form-field-appearance-fill .mat-form-field-flex{background-color:rgba(0,0,0,.04)}.mat-form-field-appearance-fill.mat-form-field-disabled .mat-form-field-flex{background-color:rgba(0,0,0,.02)}.mat-form-field-appearance-fill .mat-form-field-underline::before{background-color:rgba(0,0,0,.42)}.mat-form-field-appearance-fill.mat-form-field-disabled .mat-form-field-label{color:rgba(0,0,0,.38)}.mat-form-field-appearance-fill.mat-form-field-disabled .mat-form-field-underline::before{background-color:transparent}.mat-form-field-appearance-outline .mat-form-field-outline{color:rgba(0,0,0,.12)}.mat-form-field-appearance-outline .mat-form-field-outline-thick{color:rgba(0,0,0,.87)}.mat-form-field-appearance-outline.mat-focused .mat-form-field-outline-thick{color:#3f51b5}.mat-form-field-appearance-outline.mat-focused.mat-accent .mat-form-field-outline-thick{color:#ff4081}.mat-form-field-appearance-outline.mat-focused.mat-warn .mat-form-field-outline-thick,.mat-form-field-appearance-outline.mat-form-field-invalid.mat-form-field-invalid .mat-form-field-outline-thick{color:#f44336}.mat-form-field-appearance-outline.mat-form-field-disabled .mat-form-field-label{color:rgba(0,0,0,.38)}.mat-form-field-appearance-outline.mat-form-field-disabled .mat-form-field-outline{color:rgba(0,0,0,.06)}.mat-form-field-type-mat-native-select .mat-form-field-infix::after{color:rgba(0,0,0,.54)}.mat-form-field-type-mat-native-select.mat-form-field-disabled .mat-form-field-infix::after,.mat-input-element:disabled{color:rgba(0,0,0,.38)}.mat-input-element{caret-color:#3f51b5}.mat-input-element::-ms-input-placeholder{color:rgba(0,0,0,.42)}.mat-input-element::placeholder{color:rgba(0,0,0,.42)}.mat-input-element::-moz-placeholder{color:rgba(0,0,0,.42)}.mat-input-element::-webkit-input-placeholder{color:rgba(0,0,0,.42)}.mat-input-element:-ms-input-placeholder{color:rgba(0,0,0,.42)}.mat-accent .mat-input-element{caret-color:#ff4081}.mat-form-field-invalid .mat-input-element,.mat-warn .mat-input-element{caret-color:#f44336}.mat-form-field-type-mat-native-select.mat-form-field-invalid .mat-form-field-infix::after{color:#f44336}.mat-select-value{color:rgba(0,0,0,.87)}.mat-select-placeholder{color:rgba(0,0,0,.42)}.mat-select-disabled .mat-select-value{color:rgba(0,0,0,.38)}.mat-select-arrow{color:rgba(0,0,0,.54)}.mat-select-panel{background:#fff}.mat-select-panel:not([class*=mat-elevation-z]){box-shadow:0 2px 4px -1px rgba(0,0,0,.2),0 4px 5px 0 rgba(0,0,0,.14),0 1px 10px 0 rgba(0,0,0,.12)}.mat-select-panel .mat-option.mat-selected:not(.mat-option-multiple){background:rgba(0,0,0,.12)}.mat-form-field.mat-focused.mat-primary .mat-select-arrow{color:#3f51b5}.mat-form-field.mat-focused.mat-accent .mat-select-arrow{color:#ff4081}.mat-form-field .mat-select.mat-select-invalid .mat-select-arrow,.mat-form-field.mat-focused.mat-warn .mat-select-arrow{color:#f44336}.mat-form-field .mat-select.mat-select-disabled .mat-select-arrow{color:rgba(0,0,0,.38)}", ".flip-container{-webkit-perspective:1000px;perspective:1000px}.flip-container.flipit .flipper{-webkit-transform:rotateY(180deg);transform:rotateY(180deg)}.flip-container,.flip-container .back,.flip-container .front{width:100%;height:900px}.flip-container .flipper{-webkit-transition:1s ease-out;transition:1s ease-out;-webkit-transform-style:preserve-3d;transform-style:preserve-3d;position:relative}.flip-container .back,.flip-container .front{-webkit-backface-visibility:hidden;backface-visibility:hidden;position:absolute;top:0;left:0}.flip-container .front{z-index:2;-webkit-transform:rotateY(0);transform:rotateY(0)}.flip-container .front .err{font-size:10px;color:red;font-family:monospace}.flip-container .back{-webkit-transform:rotateY(180deg);transform:rotateY(180deg);box-shadow:inset 0 0 7px #000;overflow:scroll}.flexcol{margin:20px 30px;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-flow:column}.flexcol>*{margin-top:10px;-webkit-box-flex:1;flex-grow:1}.flexrow{display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-flow:row wrap}.flexrow>*{margin-top:10px;-webkit-box-flex:0;flex:0 0 48%;margin-right:2%}.flexrow>button{margin-top:10px;margin-left:20px;-webkit-box-flex:0;flex:0 0 1}.header{background:#0081cb;color:#fff;padding:5px 30px;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center}.editdiv{font-size:9px;color:#666;float:right;padding:10px;font-family:monospace}.editdiv span{font-size:10px;border:1px solid #0081cb;border-radius:5px;padding:0 5px;color:#0081cb}.editdiv span:hover{cursor:pointer;color:#fff;background-color:#0081cb}"]
            }] }
];
/** @nocollapse */
SpotfireEditorComponent.ctorParameters = () => [
    { type: FormBuilder },
    { type: PersistanceService },
    { type: DocumentService }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SpotfireViewerModule {
}
SpotfireViewerModule.decorators = [
    { type: NgModule, args: [{
                imports: [CommonModule],
                declarations: [SpotfireViewerComponent],
                entryComponents: [SpotfireViewerComponent],
                exports: [SpotfireViewerComponent, CommonModule]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SpotfireEditorModule {
}
SpotfireEditorModule.decorators = [
    { type: NgModule, args: [{
                imports: [SpotfireViewerModule, ReactiveFormsModule, FlexLayoutModule,
                    MatSelectModule, MatToolbarModule, MatCheckboxModule,
                    MatButtonModule, MatFormFieldModule, MatInputModule],
                declarations: [SpotfireEditorComponent],
                entryComponents: [SpotfireEditorComponent],
                exports: [SpotfireEditorComponent]
            },] }
];

export { DocumentService, SpotfireCustomization, SpotfireEditorComponent, SpotfireEditorModule, SpotfireParameters, SpotfireViewerComponent, SpotfireViewerModule, LazyLoadingLibraryService as ɵa, PersistanceService as ɵb };
//# sourceMappingURL=tibco-spotfire-wrapper.js.map
