import { Observable } from 'rxjs';
import { SpotfireCustomization as Customization, SpotfireFilter } from './spotfire-customization';
export declare const CUSTLABELS: {
    showAbout: string;
    showAnalysisInformationTool: string;
    showAuthor: string;
    showClose: string;
    showCustomizableHeader: string;
    showDodPanel: string;
    showExportFile: string;
    showFilterPanel: string;
    showHelp: string;
    showLogout: string;
    showPageNavigation: string;
    showStatusBar: string;
    showToolBar: string;
    showUndoRedo: string;
};
declare class PageState {
    index: number;
    pageTitle: string;
}
export declare class Marking {
    _marking: any;
    constructor(_marking: any);
    getMarkingNames$: () => Observable<string[]>;
    onChanged$: (m: any, t: any, c: any, n: any) => Observable<{}>;
}
declare class Filtering {
    _filtering: any;
    constructor(_filtering: any);
    set: (flts: any) => any;
    resetAllFilters: () => any;
    getAllModifiedFilterColumns: () => Observable<SpotfireFilter[]>;
}
export declare class SpotfireParameters {
    url: string;
    path: string;
    page: string | number;
    domid: string;
    sid: string;
    customization: Customization;
    version: string;
    debug: boolean;
    reloadAnalysisInstance: boolean;
    document: any;
    app: any;
    _parameters: string;
    constructor(vars?: {});
}
export declare class Data {
    private _data;
    allTables: {};
    constructor(_data: any);
    private getDataTables$;
    private getDataTableColNames$;
    private getDataTable$;
    private getDataColumns$;
    private getDistinctValues$;
    getTables$: () => Observable<{}>;
    getAllTables$: () => Observable<any[]>;
}
export declare class DocMetadata {
    size: number;
    sizeUnit: string;
    contentSize: number;
    created: Date;
    description: string;
    lastModified: Date;
    path: string;
    title: string;
    constructor(p?: any);
}
export declare class Document {
    private _doc;
    private marking;
    private filtering;
    private data;
    constructor(app: any, id: any, page: any, custo: any);
    private onActivePageChangedCallback;
    private do;
    getDocumentMetadata$: () => Observable<DocMetadata>;
    getPages$: () => Observable<any[]>;
    getActivePage$: () => Observable<PageState>;
    setActivePage: (p: string | number) => any;
    getData: () => Data;
    getMarking: () => Marking;
    getFiltering: () => Filtering;
    onDocumentReady$: () => Observable<{}>;
    close: () => any;
    private onActivePageChanged$;
}
export declare class Application {
    url: string;
    customization: Customization;
    path: string;
    parameters: string;
    reloadAnalysisInstance: boolean;
    version: string;
    onCreateLoginElement: any;
    private _app;
    private readySubject;
    onApplicationReady$: Observable<boolean>;
    constructor(url: string, customization: Customization, path: string, parameters: string, reloadAnalysisInstance: boolean, version: string, onCreateLoginElement: any);
    private onReadyCallback;
    private onErrorCallback;
    onOpened$: () => Observable<{}>;
    getDocument: (id: string, page: string | number, custo?: Customization) => Document;
    openDocument: (id: string, page: string | number, custo: Customization) => any;
}
export {};
