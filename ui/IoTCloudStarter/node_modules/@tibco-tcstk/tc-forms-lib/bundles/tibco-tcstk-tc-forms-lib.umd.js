(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('angular6-json-schema-form'), require('@angular/router'), require('@angular/material'), require('@angular/forms'), require('@angular/flex-layout'), require('@angular/cdk/scrolling'), require('@angular/platform-browser/animations'), require('@angular/platform-browser'), require('@angular/common/http'), require('@angular/common'), require('@tibco-tcstk/tc-core-lib'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('@tibco-tcstk/tc-forms-lib', ['exports', '@angular/core', 'angular6-json-schema-form', '@angular/router', '@angular/material', '@angular/forms', '@angular/flex-layout', '@angular/cdk/scrolling', '@angular/platform-browser/animations', '@angular/platform-browser', '@angular/common/http', '@angular/common', '@tibco-tcstk/tc-core-lib', 'rxjs/operators'], factory) :
    (global = global || self, factory((global['tibco-tcstk'] = global['tibco-tcstk'] || {}, global['tibco-tcstk']['tc-forms-lib'] = {}), global.ng.core, global.angular6JsonSchemaForm, global.ng.router, global.ng.material, global.ng.forms, global.ng['flex-layout'], global.ng.cdk.scrolling, global.ng.platformBrowser.animations, global.ng.platformBrowser, global.ng.common.http, global.ng.common, global.tcCoreLib, global.rxjs.operators));
}(this, function (exports, core, angular6JsonSchemaForm, router, material, forms, flexLayout, scrolling, animations, platformBrowser, http, common, tcCoreLib, operators) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CustomFormDefs = /** @class */ (function () {
        function CustomFormDefs() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CustomFormDefs.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CustomFormDefs;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RenderedFormComponent = /** @class */ (function () {
        function RenderedFormComponent(route) {
            var _this = this;
            this.route = route;
            this.schema = {};
            this.layout = [];
            this.data = {};
            /**
             * ~event formSubmit : form submitted
             * ~payload any : data submitted from the form on submit (type=any)
             */
            this.formSubmit = new core.EventEmitter();
            this.formData = {};
            this.submitForm = (/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.formSubmit.emit(data);
            });
            this.handleLayoutOutput = (/**
             * @param {?} layout
             * @return {?}
             */
            function (layout) {
                console.log('Layout:');
                console.log(JSON.stringify(layout));
            });
        }
        /**
         * @return {?}
         */
        RenderedFormComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        RenderedFormComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            // handle input param changes
            if (this.customFormDefs && changes.formRef && changes.formRef.currentValue && (changes.formRef.currentValue !== changes.formRef.previousValue)) {
                // check if this is a custom form
                this.useCustomForm = (this.customFormDefs.customForms.findIndex((/**
                 * @param {?} form
                 * @return {?}
                 */
                function (form) {
                    return (form === changes.formRef.currentValue);
                })) !== -1);
            }
            if (changes.schema && changes.schema.currentValue && (changes.schema.currentValue !== changes.schema.previousValue)) {
                /** @type {?} */
                var tmpSchema = changes.schema.currentValue;
                // json-schema-form doesnt like the $schema and wont parse the schema if it is present. So remove it.
                if (changes.schema.currentValue.$schema) {
                    delete tmpSchema.$schema;
                }
                this.formSchema = tmpSchema;
                console.log(JSON.stringify(this.formSchema));
            }
            if (changes.data && changes.data.currentValue && (changes.data.currentValue !== changes.data.previousValue)) {
                this.formData = this.data;
                console.log('Initial Form Data:');
                console.log(this.formData);
                console.log(JSON.stringify(this.formData));
            }
            if (changes.layout && changes.layout.currentValue && (changes.layout.currentValue !== changes.layout.previousValue)) {
                this.formLayout = this.layout;
            }
        };
        RenderedFormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcfrm-rendered-form',
                        template: "<div fxFill fxLayout=\"row\" fxLayoutAlign = \"center start\">\n  <div class=\"tcs-rendered-form\">\n    <json-schema-form #renderedForm *ngIf=\"!useCustomForm && formSchema\"\n      loadExternalAssets=\"false\"\n      framework=\"material-design\"\n      [schema]=\"formSchema\"\n      [layout]=\"formLayout\"\n      [(data)]=\"formData\"\n      [options]=\"options\"\n      (onSubmit)=\"submitForm($event)\"\n      (formLayout)=\"handleLayoutOutput($event)\"\n    >\n    </json-schema-form>\n\n    <!-- form-app=\"''\" - this is to work around an issue where the element doesnt display the form properly unless we pass in an additional input - angular bug? -->\n    <custom-form *ngIf=\"useCustomForm && formRef && formData && appId\" form-app=\"''\" [formRef]=\"formRef\" [caseRef]=\"caseRef\" [appId]=\"appId\" [data]=\"formData\" (formSubmitted)=\"submitForm($event.detail)\"></custom-form>\n    <span *ngIf=\"!formSchema && !useCustomForm\">A form cannot be generated as no schema is available. Use a supported form or register a custom form app.</span>\n  </div>\n</div>\n",
                        styles: [".tcs-rendered-form{box-shadow:0 2px 8px 0 #dedede;background-color:#fff;width:100%;padding:20px}"]
                    }] }
        ];
        /** @nocollapse */
        RenderedFormComponent.ctorParameters = function () { return [
            { type: router.ActivatedRoute }
        ]; };
        RenderedFormComponent.propDecorators = {
            schema: [{ type: core.Input }],
            layout: [{ type: core.Input }],
            data: [{ type: core.Input }],
            options: [{ type: core.Input }],
            formRef: [{ type: core.Input }],
            caseRef: [{ type: core.Input }],
            appId: [{ type: core.Input }],
            customFormDefs: [{ type: core.Input }],
            formSubmit: [{ type: core.Output }]
        };
        return RenderedFormComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TcFormsLibModule = /** @class */ (function () {
        function TcFormsLibModule() {
        }
        TcFormsLibModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            RenderedFormComponent
                        ],
                        imports: [
                            platformBrowser.BrowserModule,
                            animations.BrowserAnimationsModule,
                            flexLayout.FlexLayoutModule,
                            forms.FormsModule,
                            material.MatButtonModule,
                            material.MatCardModule,
                            material.MatCheckboxModule,
                            material.MatIconModule,
                            material.MatMenuModule,
                            material.MatSelectModule,
                            material.MatToolbarModule,
                            angular6JsonSchemaForm.MaterialDesignFrameworkModule,
                            material.MatButtonModule,
                            material.MatCardModule,
                            material.MatCheckboxModule,
                            material.MatListModule,
                            material.MatFormFieldModule,
                            material.MatInputModule,
                            material.MatIconModule,
                            material.MatSelectModule,
                            material.MatOptionModule,
                            material.MatDialogModule,
                            material.MatMenuModule,
                            material.MatCardModule,
                            material.MatTooltipModule,
                            forms.FormsModule,
                            flexLayout.FlexLayoutModule,
                            scrolling.ScrollingModule,
                            forms.FormsModule,
                            forms.ReactiveFormsModule
                        ],
                        schemas: [core.CUSTOM_ELEMENTS_SCHEMA],
                        exports: [
                            RenderedFormComponent
                        ],
                        entryComponents: []
                    },] }
        ];
        return TcFormsLibModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormResolver = /** @class */ (function () {
        function FormResolver(http, location) {
            this.http = http;
            this.location = location;
            this.CUSTOM_FORMS_CONFIG_URL = 'assets/config/customForms.json';
        }
        /**
         * @return {?}
         */
        FormResolver.prototype.resolve = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var headers = new http.HttpHeaders().set('cacheResponse', 'true');
            return this.http.get(tcCoreLib.TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, this.CUSTOM_FORMS_CONFIG_URL), { headers: headers }).pipe(operators.map((/**
             * @param {?} formsConfig
             * @return {?}
             */
            function (formsConfig) {
                return new CustomFormDefs().deserialize(formsConfig);
            })));
        };
        FormResolver.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        FormResolver.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: common.Location }
        ]; };
        return FormResolver;
    }());

    exports.CustomFormDefs = CustomFormDefs;
    exports.FormResolver = FormResolver;
    exports.RenderedFormComponent = RenderedFormComponent;
    exports.TcFormsLibModule = TcFormsLibModule;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=tibco-tcstk-tc-forms-lib.umd.js.map
