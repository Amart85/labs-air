/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @ngdoc component
 * @name RenderedFormComponent
 *
 * @description
 * `<tcfrm-rendered-form>` is a component providing the ability to reneder a form using the third party angular6-json-form library.
 *
 * @usage
 *
 * This component is used by tc--liveapps-lib to render forms based on a JSON schema that is supplied by the liveapps API
 *
 * It is located into this dedicated library to make it easier to plug in an alternative form rendering library
 *
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { CustomFormDefs } from '../../models/tc-custom-forms';
var RenderedFormComponent = /** @class */ (function () {
    function RenderedFormComponent(route) {
        var _this = this;
        this.route = route;
        this.schema = {};
        this.layout = [];
        this.data = {};
        /**
         * ~event formSubmit : form submitted
         * ~payload any : data submitted from the form on submit (type=any)
         */
        this.formSubmit = new EventEmitter();
        this.formData = {};
        this.submitForm = (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.formSubmit.emit(data);
        });
        this.handleLayoutOutput = (/**
         * @param {?} layout
         * @return {?}
         */
        function (layout) {
            console.log('Layout:');
            console.log(JSON.stringify(layout));
        });
    }
    /**
     * @return {?}
     */
    RenderedFormComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    RenderedFormComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // handle input param changes
        if (this.customFormDefs && changes.formRef && changes.formRef.currentValue && (changes.formRef.currentValue !== changes.formRef.previousValue)) {
            // check if this is a custom form
            this.useCustomForm = (this.customFormDefs.customForms.findIndex((/**
             * @param {?} form
             * @return {?}
             */
            function (form) {
                return (form === changes.formRef.currentValue);
            })) !== -1);
        }
        if (changes.schema && changes.schema.currentValue && (changes.schema.currentValue !== changes.schema.previousValue)) {
            /** @type {?} */
            var tmpSchema = changes.schema.currentValue;
            // json-schema-form doesnt like the $schema and wont parse the schema if it is present. So remove it.
            if (changes.schema.currentValue.$schema) {
                delete tmpSchema.$schema;
            }
            this.formSchema = tmpSchema;
            console.log(JSON.stringify(this.formSchema));
        }
        if (changes.data && changes.data.currentValue && (changes.data.currentValue !== changes.data.previousValue)) {
            this.formData = this.data;
            console.log('Initial Form Data:');
            console.log(this.formData);
            console.log(JSON.stringify(this.formData));
        }
        if (changes.layout && changes.layout.currentValue && (changes.layout.currentValue !== changes.layout.previousValue)) {
            this.formLayout = this.layout;
        }
    };
    RenderedFormComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcfrm-rendered-form',
                    template: "<div fxFill fxLayout=\"row\" fxLayoutAlign = \"center start\">\n  <div class=\"tcs-rendered-form\">\n    <json-schema-form #renderedForm *ngIf=\"!useCustomForm && formSchema\"\n      loadExternalAssets=\"false\"\n      framework=\"material-design\"\n      [schema]=\"formSchema\"\n      [layout]=\"formLayout\"\n      [(data)]=\"formData\"\n      [options]=\"options\"\n      (onSubmit)=\"submitForm($event)\"\n      (formLayout)=\"handleLayoutOutput($event)\"\n    >\n    </json-schema-form>\n\n    <!-- form-app=\"''\" - this is to work around an issue where the element doesnt display the form properly unless we pass in an additional input - angular bug? -->\n    <custom-form *ngIf=\"useCustomForm && formRef && formData && appId\" form-app=\"''\" [formRef]=\"formRef\" [caseRef]=\"caseRef\" [appId]=\"appId\" [data]=\"formData\" (formSubmitted)=\"submitForm($event.detail)\"></custom-form>\n    <span *ngIf=\"!formSchema && !useCustomForm\">A form cannot be generated as no schema is available. Use a supported form or register a custom form app.</span>\n  </div>\n</div>\n",
                    styles: [".tcs-rendered-form{box-shadow:0 2px 8px 0 #dedede;background-color:#fff;width:100%;padding:20px}"]
                }] }
    ];
    /** @nocollapse */
    RenderedFormComponent.ctorParameters = function () { return [
        { type: ActivatedRoute }
    ]; };
    RenderedFormComponent.propDecorators = {
        schema: [{ type: Input }],
        layout: [{ type: Input }],
        data: [{ type: Input }],
        options: [{ type: Input }],
        formRef: [{ type: Input }],
        caseRef: [{ type: Input }],
        appId: [{ type: Input }],
        customFormDefs: [{ type: Input }],
        formSubmit: [{ type: Output }]
    };
    return RenderedFormComponent;
}());
export { RenderedFormComponent };
if (false) {
    /** @type {?} */
    RenderedFormComponent.prototype.schema;
    /** @type {?} */
    RenderedFormComponent.prototype.layout;
    /** @type {?} */
    RenderedFormComponent.prototype.data;
    /** @type {?} */
    RenderedFormComponent.prototype.options;
    /** @type {?} */
    RenderedFormComponent.prototype.formRef;
    /** @type {?} */
    RenderedFormComponent.prototype.caseRef;
    /** @type {?} */
    RenderedFormComponent.prototype.appId;
    /** @type {?} */
    RenderedFormComponent.prototype.customFormDefs;
    /**
     * ~event formSubmit : form submitted
     * ~payload any : data submitted from the form on submit (type=any)
     * @type {?}
     */
    RenderedFormComponent.prototype.formSubmit;
    /** @type {?} */
    RenderedFormComponent.prototype.formSchema;
    /** @type {?} */
    RenderedFormComponent.prototype.formLayout;
    /** @type {?} */
    RenderedFormComponent.prototype.formData;
    /** @type {?} */
    RenderedFormComponent.prototype.test;
    /** @type {?} */
    RenderedFormComponent.prototype.useCustomForm;
    /** @type {?} */
    RenderedFormComponent.prototype.submitForm;
    /** @type {?} */
    RenderedFormComponent.prototype.handleLayoutOutput;
    /**
     * @type {?}
     * @private
     */
    RenderedFormComponent.prototype.route;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZWQtZm9ybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtZm9ybXMtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcmVuZGVyZWQtZm9ybS9yZW5kZXJlZC1mb3JtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQXFCLE1BQU0sRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFFdkcsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQUU1RDtJQW1DRSwrQkFBb0IsS0FBcUI7UUFBekMsaUJBQThDO1FBQTFCLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBN0JoQyxXQUFNLEdBQVEsRUFBRSxDQUFDO1FBQ2pCLFdBQU0sR0FBVSxFQUFFLENBQUM7UUFDbkIsU0FBSSxHQUFRLEVBQUUsQ0FBQzs7Ozs7UUFVZCxlQUFVLEdBQXNCLElBQUksWUFBWSxFQUFPLENBQUM7UUFJbEUsYUFBUSxHQUFRLEVBQUUsQ0FBQztRQUluQixlQUFVOzs7O1FBQUcsVUFBQyxJQUFTO1lBQ3JCLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzdCLENBQUMsRUFBQTtRQUVELHVCQUFrQjs7OztRQUFHLFVBQUMsTUFBVztZQUMvQixPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsRUFBQTtJQUU0QyxDQUFDOzs7O0lBRTlDLHdDQUFROzs7SUFBUjtJQUNBLENBQUM7Ozs7O0lBRUQsMkNBQVc7Ozs7SUFBWCxVQUFZLE9BQXNC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ZG9jIGNvbXBvbmVudFxuICogQG5hbWUgUmVuZGVyZWRGb3JtQ29tcG9uZW50XG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBgPHRjZnJtLXJlbmRlcmVkLWZvcm0+YCBpcyBhIGNvbXBvbmVudCBwcm92aWRpbmcgdGhlIGFiaWxpdHkgdG8gcmVuZWRlciBhIGZvcm0gdXNpbmcgdGhlIHRoaXJkIHBhcnR5IGFuZ3VsYXI2LWpzb24tZm9ybSBsaWJyYXJ5LlxuICpcbiAqIEB1c2FnZVxuICpcbiAqIFRoaXMgY29tcG9uZW50IGlzIHVzZWQgYnkgdGMtLWxpdmVhcHBzLWxpYiB0byByZW5kZXIgZm9ybXMgYmFzZWQgb24gYSBKU09OIHNjaGVtYSB0aGF0IGlzIHN1cHBsaWVkIGJ5IHRoZSBsaXZlYXBwcyBBUElcbiAqXG4gKiBJdCBpcyBsb2NhdGVkIGludG8gdGhpcyBkZWRpY2F0ZWQgbGlicmFyeSB0byBtYWtlIGl0IGVhc2llciB0byBwbHVnIGluIGFuIGFsdGVybmF0aXZlIGZvcm0gcmVuZGVyaW5nIGxpYnJhcnlcbiAqXG4gKi9cblxuaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBPdXRwdXQsIFNpbXBsZUNoYW5nZXN9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtKc29uU2NoZW1hRm9ybUNvbXBvbmVudCwgTWF0ZXJpYWxEZXNpZ25GcmFtZXdvcmtNb2R1bGV9IGZyb20gJ2FuZ3VsYXI2LWpzb24tc2NoZW1hLWZvcm0nO1xuaW1wb3J0IHtBY3RpdmF0ZWRSb3V0ZX0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7Q3VzdG9tRm9ybURlZnN9IGZyb20gJy4uLy4uL21vZGVscy90Yy1jdXN0b20tZm9ybXMnO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0Y2ZybS1yZW5kZXJlZC1mb3JtJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3JlbmRlcmVkLWZvcm0uY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9yZW5kZXJlZC1mb3JtLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBSZW5kZXJlZEZvcm1Db21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIEBJbnB1dCgpIHNjaGVtYTogYW55ID0ge307XG4gIEBJbnB1dCgpIGxheW91dDogYW55W10gPSBbXTtcbiAgQElucHV0KCkgZGF0YTogYW55ID0ge307XG4gIEBJbnB1dCgpIG9wdGlvbnM6IGFueVtdO1xuICBASW5wdXQoKSBmb3JtUmVmOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNhc2VSZWY6IHN0cmluZztcbiAgQElucHV0KCkgYXBwSWQ6IHN0cmluZztcbiAgQElucHV0KCkgY3VzdG9tRm9ybURlZnM6IEN1c3RvbUZvcm1EZWZzO1xuICAvKipcbiAgICogfmV2ZW50IGZvcm1TdWJtaXQgOiBmb3JtIHN1Ym1pdHRlZFxuICAgKiB+cGF5bG9hZCBhbnkgOiBkYXRhIHN1Ym1pdHRlZCBmcm9tIHRoZSBmb3JtIG9uIHN1Ym1pdCAodHlwZT1hbnkpXG4gICAqL1xuICBAT3V0cHV0KCkgZm9ybVN1Ym1pdDogRXZlbnRFbWl0dGVyPGFueT4gPSBuZXcgRXZlbnRFbWl0dGVyPGFueT4oKTtcblxuICBmb3JtU2NoZW1hOiBhbnk7XG4gIGZvcm1MYXlvdXQ6IGFueVtdO1xuICBmb3JtRGF0YTogYW55ID0ge307XG4gIHRlc3Q6IHN0cmluZztcbiAgdXNlQ3VzdG9tRm9ybTogYm9vbGVhbjtcblxuICBzdWJtaXRGb3JtID0gKGRhdGE6IGFueSkgPT4ge1xuICAgIHRoaXMuZm9ybVN1Ym1pdC5lbWl0KGRhdGEpO1xuICB9XG5cbiAgaGFuZGxlTGF5b3V0T3V0cHV0ID0gKGxheW91dDogYW55KSA9PiB7XG4gICAgY29uc29sZS5sb2coJ0xheW91dDonKTtcbiAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeShsYXlvdXQpKTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAvLyBoYW5kbGUgaW5wdXQgcGFyYW0gY2hhbmdlc1xuICAgIGlmICh0aGlzLmN1c3RvbUZvcm1EZWZzICYmIGNoYW5nZXMuZm9ybVJlZiAmJiBjaGFuZ2VzLmZvcm1SZWYuY3VycmVudFZhbHVlICYmIChjaGFuZ2VzLmZvcm1SZWYuY3VycmVudFZhbHVlICE9PSBjaGFuZ2VzLmZvcm1SZWYucHJldmlvdXNWYWx1ZSkpIHtcbiAgICAgIC8vIGNoZWNrIGlmIHRoaXMgaXMgYSBjdXN0b20gZm9ybVxuICAgICAgdGhpcy51c2VDdXN0b21Gb3JtID0gKHRoaXMuY3VzdG9tRm9ybURlZnMuY3VzdG9tRm9ybXMuZmluZEluZGV4KChmb3JtKSA9PiB7XG4gICAgICAgIHJldHVybiAoZm9ybSA9PT0gY2hhbmdlcy5mb3JtUmVmLmN1cnJlbnRWYWx1ZSk7XG4gICAgICB9KSAhPT0gLTEpO1xuICAgIH1cbiAgICBpZiAoY2hhbmdlcy5zY2hlbWEgJiYgY2hhbmdlcy5zY2hlbWEuY3VycmVudFZhbHVlICYmIChjaGFuZ2VzLnNjaGVtYS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXMuc2NoZW1hLnByZXZpb3VzVmFsdWUpKSB7XG4gICAgICBjb25zdCB0bXBTY2hlbWEgPSBjaGFuZ2VzLnNjaGVtYS5jdXJyZW50VmFsdWU7XG4gICAgICAvLyBqc29uLXNjaGVtYS1mb3JtIGRvZXNudCBsaWtlIHRoZSAkc2NoZW1hIGFuZCB3b250IHBhcnNlIHRoZSBzY2hlbWEgaWYgaXQgaXMgcHJlc2VudC4gU28gcmVtb3ZlIGl0LlxuICAgICAgaWYgKGNoYW5nZXMuc2NoZW1hLmN1cnJlbnRWYWx1ZS4kc2NoZW1hKSB7XG4gICAgICAgIGRlbGV0ZSB0bXBTY2hlbWEuJHNjaGVtYTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZm9ybVNjaGVtYSA9IHRtcFNjaGVtYTtcbiAgICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KHRoaXMuZm9ybVNjaGVtYSkpO1xuICAgIH1cbiAgICBpZiAoY2hhbmdlcy5kYXRhICYmIGNoYW5nZXMuZGF0YS5jdXJyZW50VmFsdWUgJiYgKGNoYW5nZXMuZGF0YS5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXMuZGF0YS5wcmV2aW91c1ZhbHVlKSkge1xuICAgICAgdGhpcy5mb3JtRGF0YSA9IHRoaXMuZGF0YTtcbiAgICAgIGNvbnNvbGUubG9nKCdJbml0aWFsIEZvcm0gRGF0YTonKTtcbiAgICAgIGNvbnNvbGUubG9nKHRoaXMuZm9ybURhdGEpO1xuICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkodGhpcy5mb3JtRGF0YSkpO1xuICAgIH1cbiAgICBpZiAoY2hhbmdlcy5sYXlvdXQgJiYgY2hhbmdlcy5sYXlvdXQuY3VycmVudFZhbHVlICYmIChjaGFuZ2VzLmxheW91dC5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXMubGF5b3V0LnByZXZpb3VzVmFsdWUpKSB7XG4gICAgICB0aGlzLmZvcm1MYXlvdXQgPSB0aGlzLmxheW91dDtcbiAgICB9XG4gIH1cblxuXG59XG4iXX0=