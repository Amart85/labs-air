/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Location } from '@angular/common';
import { TcCoreCommonFunctions } from '@tibco-tcstk/tc-core-lib';
import { map } from 'rxjs/operators';
import { CustomFormDefs } from '../models/tc-custom-forms';
var FormResolver = /** @class */ (function () {
    function FormResolver(http, location) {
        this.http = http;
        this.location = location;
        this.CUSTOM_FORMS_CONFIG_URL = 'assets/config/customForms.json';
    }
    /**
     * @return {?}
     */
    FormResolver.prototype.resolve = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, this.CUSTOM_FORMS_CONFIG_URL), { headers: headers }).pipe(map((/**
         * @param {?} formsConfig
         * @return {?}
         */
        function (formsConfig) {
            return new CustomFormDefs().deserialize(formsConfig);
        })));
    };
    FormResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    FormResolver.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Location }
    ]; };
    return FormResolver;
}());
export { FormResolver };
if (false) {
    /** @type {?} */
    FormResolver.prototype.CUSTOM_FORMS_CONFIG_URL;
    /**
     * @type {?}
     * @private
     */
    FormResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    FormResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZm9ybS5yZXNvbHZlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1mb3Jtcy1saWIvIiwic291cmNlcyI6WyJsaWIvcmVzb2x2ZXJzL2Zvcm0ucmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFJekMsT0FBTyxFQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUM3RCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ25DLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUV6RDtJQUtFLHNCQUFvQixJQUFnQixFQUFVLFFBQWtCO1FBQTVDLFNBQUksR0FBSixJQUFJLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBRmhFLDRCQUF1QixHQUFHLGdDQUFnQyxDQUFDO0lBRzNELENBQUM7Ozs7SUFFRCw4QkFBTzs7O0lBQVA7O1lBQ1EsT0FBTyxHQUFHLElBQUksV0FBVyxFQUFFLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSxNQUFNLENBQUM7UUFDOUQsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxFQUFFLEVBQUUsT0FBTyxTQUFBLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDcEksR0FBRzs7OztRQUFDLFVBQUEsV0FBVztZQUNiLE9BQU8sSUFBSSxjQUFjLEVBQUUsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7UUFDdkQsQ0FBQyxFQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7O2dCQWZGLFVBQVU7Ozs7Z0JBTkgsVUFBVTtnQkFDVixRQUFROztJQXNCaEIsbUJBQUM7Q0FBQSxBQWpCRCxJQWlCQztTQWhCWSxZQUFZOzs7SUFFdkIsK0NBQTJEOzs7OztJQUUvQyw0QkFBd0I7Ozs7O0lBQUUsZ0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UmVzb2x2ZX0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5cbmltcG9ydCB7SHR0cENsaWVudCwgSHR0cEhlYWRlcnN9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7TG9jYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1RjQ29yZUNvbW1vbkZ1bmN0aW9uc30gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0N1c3RvbUZvcm1EZWZzfSBmcm9tICcuLi9tb2RlbHMvdGMtY3VzdG9tLWZvcm1zJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEZvcm1SZXNvbHZlciBpbXBsZW1lbnRzIFJlc29sdmU8T2JzZXJ2YWJsZTxDdXN0b21Gb3JtRGVmcz4+IHtcblxuICBDVVNUT01fRk9STVNfQ09ORklHX1VSTCA9ICdhc3NldHMvY29uZmlnL2N1c3RvbUZvcm1zLmpzb24nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb24pIHtcbiAgfVxuXG4gIHJlc29sdmUoKTogT2JzZXJ2YWJsZTxDdXN0b21Gb3JtRGVmcz4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKS5zZXQoJ2NhY2hlUmVzcG9uc2UnLCAndHJ1ZScpO1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KFRjQ29yZUNvbW1vbkZ1bmN0aW9ucy5wcmVwYXJlVXJsRm9yU3RhdGljUmVzb3VyY2UodGhpcy5sb2NhdGlvbiwgdGhpcy5DVVNUT01fRk9STVNfQ09ORklHX1VSTCksIHsgaGVhZGVycyB9KS5waXBlKFxuICAgICAgbWFwKGZvcm1zQ29uZmlnID0+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBDdXN0b21Gb3JtRGVmcygpLmRlc2VyaWFsaXplKGZvcm1zQ29uZmlnKTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG59XG4iXX0=