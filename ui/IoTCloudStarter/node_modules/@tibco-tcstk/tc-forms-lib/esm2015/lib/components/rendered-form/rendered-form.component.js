/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @ngdoc component
 * @name RenderedFormComponent
 *
 * @description
 * `<tcfrm-rendered-form>` is a component providing the ability to reneder a form using the third party angular6-json-form library.
 *
 * @usage
 *
 * This component is used by tc--liveapps-lib to render forms based on a JSON schema that is supplied by the liveapps API
 *
 * It is located into this dedicated library to make it easier to plug in an alternative form rendering library
 *
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { CustomFormDefs } from '../../models/tc-custom-forms';
export class RenderedFormComponent {
    /**
     * @param {?} route
     */
    constructor(route) {
        this.route = route;
        this.schema = {};
        this.layout = [];
        this.data = {};
        /**
         * ~event formSubmit : form submitted
         * ~payload any : data submitted from the form on submit (type=any)
         */
        this.formSubmit = new EventEmitter();
        this.formData = {};
        this.submitForm = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.formSubmit.emit(data);
        });
        this.handleLayoutOutput = (/**
         * @param {?} layout
         * @return {?}
         */
        (layout) => {
            console.log('Layout:');
            console.log(JSON.stringify(layout));
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // handle input param changes
        if (this.customFormDefs && changes.formRef && changes.formRef.currentValue && (changes.formRef.currentValue !== changes.formRef.previousValue)) {
            // check if this is a custom form
            this.useCustomForm = (this.customFormDefs.customForms.findIndex((/**
             * @param {?} form
             * @return {?}
             */
            (form) => {
                return (form === changes.formRef.currentValue);
            })) !== -1);
        }
        if (changes.schema && changes.schema.currentValue && (changes.schema.currentValue !== changes.schema.previousValue)) {
            /** @type {?} */
            const tmpSchema = changes.schema.currentValue;
            // json-schema-form doesnt like the $schema and wont parse the schema if it is present. So remove it.
            if (changes.schema.currentValue.$schema) {
                delete tmpSchema.$schema;
            }
            this.formSchema = tmpSchema;
            console.log(JSON.stringify(this.formSchema));
        }
        if (changes.data && changes.data.currentValue && (changes.data.currentValue !== changes.data.previousValue)) {
            this.formData = this.data;
            console.log('Initial Form Data:');
            console.log(this.formData);
            console.log(JSON.stringify(this.formData));
        }
        if (changes.layout && changes.layout.currentValue && (changes.layout.currentValue !== changes.layout.previousValue)) {
            this.formLayout = this.layout;
        }
    }
}
RenderedFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcfrm-rendered-form',
                template: "<div fxFill fxLayout=\"row\" fxLayoutAlign = \"center start\">\n  <div class=\"tcs-rendered-form\">\n    <json-schema-form #renderedForm *ngIf=\"!useCustomForm && formSchema\"\n      loadExternalAssets=\"false\"\n      framework=\"material-design\"\n      [schema]=\"formSchema\"\n      [layout]=\"formLayout\"\n      [(data)]=\"formData\"\n      [options]=\"options\"\n      (onSubmit)=\"submitForm($event)\"\n      (formLayout)=\"handleLayoutOutput($event)\"\n    >\n    </json-schema-form>\n\n    <!-- form-app=\"''\" - this is to work around an issue where the element doesnt display the form properly unless we pass in an additional input - angular bug? -->\n    <custom-form *ngIf=\"useCustomForm && formRef && formData && appId\" form-app=\"''\" [formRef]=\"formRef\" [caseRef]=\"caseRef\" [appId]=\"appId\" [data]=\"formData\" (formSubmitted)=\"submitForm($event.detail)\"></custom-form>\n    <span *ngIf=\"!formSchema && !useCustomForm\">A form cannot be generated as no schema is available. Use a supported form or register a custom form app.</span>\n  </div>\n</div>\n",
                styles: [".tcs-rendered-form{box-shadow:0 2px 8px 0 #dedede;background-color:#fff;width:100%;padding:20px}"]
            }] }
];
/** @nocollapse */
RenderedFormComponent.ctorParameters = () => [
    { type: ActivatedRoute }
];
RenderedFormComponent.propDecorators = {
    schema: [{ type: Input }],
    layout: [{ type: Input }],
    data: [{ type: Input }],
    options: [{ type: Input }],
    formRef: [{ type: Input }],
    caseRef: [{ type: Input }],
    appId: [{ type: Input }],
    customFormDefs: [{ type: Input }],
    formSubmit: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    RenderedFormComponent.prototype.schema;
    /** @type {?} */
    RenderedFormComponent.prototype.layout;
    /** @type {?} */
    RenderedFormComponent.prototype.data;
    /** @type {?} */
    RenderedFormComponent.prototype.options;
    /** @type {?} */
    RenderedFormComponent.prototype.formRef;
    /** @type {?} */
    RenderedFormComponent.prototype.caseRef;
    /** @type {?} */
    RenderedFormComponent.prototype.appId;
    /** @type {?} */
    RenderedFormComponent.prototype.customFormDefs;
    /**
     * ~event formSubmit : form submitted
     * ~payload any : data submitted from the form on submit (type=any)
     * @type {?}
     */
    RenderedFormComponent.prototype.formSubmit;
    /** @type {?} */
    RenderedFormComponent.prototype.formSchema;
    /** @type {?} */
    RenderedFormComponent.prototype.formLayout;
    /** @type {?} */
    RenderedFormComponent.prototype.formData;
    /** @type {?} */
    RenderedFormComponent.prototype.test;
    /** @type {?} */
    RenderedFormComponent.prototype.useCustomForm;
    /** @type {?} */
    RenderedFormComponent.prototype.submitForm;
    /** @type {?} */
    RenderedFormComponent.prototype.handleLayoutOutput;
    /**
     * @type {?}
     * @private
     */
    RenderedFormComponent.prototype.route;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVuZGVyZWQtZm9ybS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtZm9ybXMtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvcmVuZGVyZWQtZm9ybS9yZW5kZXJlZC1mb3JtLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQXFCLE1BQU0sRUFBZ0IsTUFBTSxlQUFlLENBQUM7QUFFdkcsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQy9DLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSw4QkFBOEIsQ0FBQztBQU81RCxNQUFNLE9BQU8scUJBQXFCOzs7O0lBOEJoQyxZQUFvQixLQUFxQjtRQUFyQixVQUFLLEdBQUwsS0FBSyxDQUFnQjtRQTdCaEMsV0FBTSxHQUFRLEVBQUUsQ0FBQztRQUNqQixXQUFNLEdBQVUsRUFBRSxDQUFDO1FBQ25CLFNBQUksR0FBUSxFQUFFLENBQUM7Ozs7O1FBVWQsZUFBVSxHQUFzQixJQUFJLFlBQVksRUFBTyxDQUFDO1FBSWxFLGFBQVEsR0FBUSxFQUFFLENBQUM7UUFJbkIsZUFBVTs7OztRQUFHLENBQUMsSUFBUyxFQUFFLEVBQUU7WUFDekIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDN0IsQ0FBQyxFQUFBO1FBRUQsdUJBQWtCOzs7O1FBQUcsQ0FBQyxNQUFXLEVBQUUsRUFBRTtZQUNuQyxPQUFPLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3ZCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1FBQ3RDLENBQUMsRUFBQTtJQUU0QyxDQUFDOzs7O0lBRTlDLFFBQVE7SUFDUixDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyw2QkFBNkI7UUFDN0IsSUFBSSxJQUFJLENBQUMsY0FBYyxJQUFJLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksS0FBSyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQzlJLGlDQUFpQztZQUNqQyxJQUFJLENBQUMsYUFBYSxHQUFHLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsU0FBUzs7OztZQUFDLENBQUMsSUFBSSxFQUFFLEVBQUU7Z0JBQ3ZFLE9BQU8sQ0FBQyxJQUFJLEtBQUssT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUNqRCxDQUFDLEVBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ1o7UUFDRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksS0FBSyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFOztrQkFDN0csU0FBUyxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsWUFBWTtZQUM3QyxxR0FBcUc7WUFDckcsSUFBSSxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxPQUFPLEVBQUU7Z0JBQ3ZDLE9BQU8sU0FBUyxDQUFDLE9BQU8sQ0FBQzthQUMxQjtZQUNELElBQUksQ0FBQyxVQUFVLEdBQUcsU0FBUyxDQUFDO1lBQzVCLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztTQUM5QztRQUNELElBQUksT0FBTyxDQUFDLElBQUksSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsWUFBWSxLQUFLLE9BQU8sQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDM0csSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzFCLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQztZQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzQixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7U0FDNUM7UUFDRCxJQUFJLE9BQU8sQ0FBQyxNQUFNLElBQUksT0FBTyxDQUFDLE1BQU0sQ0FBQyxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLFlBQVksS0FBSyxPQUFPLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFO1lBQ25ILElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUMvQjtJQUNILENBQUM7OztZQWxFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHFCQUFxQjtnQkFDL0IsbWtDQUE2Qzs7YUFFOUM7Ozs7WUFQTyxjQUFjOzs7cUJBU25CLEtBQUs7cUJBQ0wsS0FBSzttQkFDTCxLQUFLO3NCQUNMLEtBQUs7c0JBQ0wsS0FBSztzQkFDTCxLQUFLO29CQUNMLEtBQUs7NkJBQ0wsS0FBSzt5QkFLTCxNQUFNOzs7O0lBWlAsdUNBQTBCOztJQUMxQix1Q0FBNEI7O0lBQzVCLHFDQUF3Qjs7SUFDeEIsd0NBQXdCOztJQUN4Qix3Q0FBeUI7O0lBQ3pCLHdDQUF5Qjs7SUFDekIsc0NBQXVCOztJQUN2QiwrQ0FBd0M7Ozs7OztJQUt4QywyQ0FBa0U7O0lBRWxFLDJDQUFnQjs7SUFDaEIsMkNBQWtCOztJQUNsQix5Q0FBbUI7O0lBQ25CLHFDQUFhOztJQUNiLDhDQUF1Qjs7SUFFdkIsMkNBRUM7O0lBRUQsbURBR0M7Ozs7O0lBRVcsc0NBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbmdkb2MgY29tcG9uZW50XG4gKiBAbmFtZSBSZW5kZXJlZEZvcm1Db21wb25lbnRcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIGA8dGNmcm0tcmVuZGVyZWQtZm9ybT5gIGlzIGEgY29tcG9uZW50IHByb3ZpZGluZyB0aGUgYWJpbGl0eSB0byByZW5lZGVyIGEgZm9ybSB1c2luZyB0aGUgdGhpcmQgcGFydHkgYW5ndWxhcjYtanNvbi1mb3JtIGxpYnJhcnkuXG4gKlxuICogQHVzYWdlXG4gKlxuICogVGhpcyBjb21wb25lbnQgaXMgdXNlZCBieSB0Yy0tbGl2ZWFwcHMtbGliIHRvIHJlbmRlciBmb3JtcyBiYXNlZCBvbiBhIEpTT04gc2NoZW1hIHRoYXQgaXMgc3VwcGxpZWQgYnkgdGhlIGxpdmVhcHBzIEFQSVxuICpcbiAqIEl0IGlzIGxvY2F0ZWQgaW50byB0aGlzIGRlZGljYXRlZCBsaWJyYXJ5IHRvIG1ha2UgaXQgZWFzaWVyIHRvIHBsdWcgaW4gYW4gYWx0ZXJuYXRpdmUgZm9ybSByZW5kZXJpbmcgbGlicmFyeVxuICpcbiAqL1xuXG5pbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25DaGFuZ2VzLCBPbkluaXQsIE91dHB1dCwgU2ltcGxlQ2hhbmdlc30gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0pzb25TY2hlbWFGb3JtQ29tcG9uZW50LCBNYXRlcmlhbERlc2lnbkZyYW1ld29ya01vZHVsZX0gZnJvbSAnYW5ndWxhcjYtanNvbi1zY2hlbWEtZm9ybSc7XG5pbXBvcnQge0FjdGl2YXRlZFJvdXRlfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtDdXN0b21Gb3JtRGVmc30gZnJvbSAnLi4vLi4vbW9kZWxzL3RjLWN1c3RvbS1mb3Jtcyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RjZnJtLXJlbmRlcmVkLWZvcm0nLFxuICB0ZW1wbGF0ZVVybDogJy4vcmVuZGVyZWQtZm9ybS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL3JlbmRlcmVkLWZvcm0uY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIFJlbmRlcmVkRm9ybUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkgc2NoZW1hOiBhbnkgPSB7fTtcbiAgQElucHV0KCkgbGF5b3V0OiBhbnlbXSA9IFtdO1xuICBASW5wdXQoKSBkYXRhOiBhbnkgPSB7fTtcbiAgQElucHV0KCkgb3B0aW9uczogYW55W107XG4gIEBJbnB1dCgpIGZvcm1SZWY6IHN0cmluZztcbiAgQElucHV0KCkgY2FzZVJlZjogc3RyaW5nO1xuICBASW5wdXQoKSBhcHBJZDogc3RyaW5nO1xuICBASW5wdXQoKSBjdXN0b21Gb3JtRGVmczogQ3VzdG9tRm9ybURlZnM7XG4gIC8qKlxuICAgKiB+ZXZlbnQgZm9ybVN1Ym1pdCA6IGZvcm0gc3VibWl0dGVkXG4gICAqIH5wYXlsb2FkIGFueSA6IGRhdGEgc3VibWl0dGVkIGZyb20gdGhlIGZvcm0gb24gc3VibWl0ICh0eXBlPWFueSlcbiAgICovXG4gIEBPdXRwdXQoKSBmb3JtU3VibWl0OiBFdmVudEVtaXR0ZXI8YW55PiA9IG5ldyBFdmVudEVtaXR0ZXI8YW55PigpO1xuXG4gIGZvcm1TY2hlbWE6IGFueTtcbiAgZm9ybUxheW91dDogYW55W107XG4gIGZvcm1EYXRhOiBhbnkgPSB7fTtcbiAgdGVzdDogc3RyaW5nO1xuICB1c2VDdXN0b21Gb3JtOiBib29sZWFuO1xuXG4gIHN1Ym1pdEZvcm0gPSAoZGF0YTogYW55KSA9PiB7XG4gICAgdGhpcy5mb3JtU3VibWl0LmVtaXQoZGF0YSk7XG4gIH1cblxuICBoYW5kbGVMYXlvdXRPdXRwdXQgPSAobGF5b3V0OiBhbnkpID0+IHtcbiAgICBjb25zb2xlLmxvZygnTGF5b3V0OicpO1xuICAgIGNvbnNvbGUubG9nKEpTT04uc3RyaW5naWZ5KGxheW91dCkpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUpIHsgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbiAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcykge1xuICAgIC8vIGhhbmRsZSBpbnB1dCBwYXJhbSBjaGFuZ2VzXG4gICAgaWYgKHRoaXMuY3VzdG9tRm9ybURlZnMgJiYgY2hhbmdlcy5mb3JtUmVmICYmIGNoYW5nZXMuZm9ybVJlZi5jdXJyZW50VmFsdWUgJiYgKGNoYW5nZXMuZm9ybVJlZi5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXMuZm9ybVJlZi5wcmV2aW91c1ZhbHVlKSkge1xuICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBhIGN1c3RvbSBmb3JtXG4gICAgICB0aGlzLnVzZUN1c3RvbUZvcm0gPSAodGhpcy5jdXN0b21Gb3JtRGVmcy5jdXN0b21Gb3Jtcy5maW5kSW5kZXgoKGZvcm0pID0+IHtcbiAgICAgICAgcmV0dXJuIChmb3JtID09PSBjaGFuZ2VzLmZvcm1SZWYuY3VycmVudFZhbHVlKTtcbiAgICAgIH0pICE9PSAtMSk7XG4gICAgfVxuICAgIGlmIChjaGFuZ2VzLnNjaGVtYSAmJiBjaGFuZ2VzLnNjaGVtYS5jdXJyZW50VmFsdWUgJiYgKGNoYW5nZXMuc2NoZW1hLmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlcy5zY2hlbWEucHJldmlvdXNWYWx1ZSkpIHtcbiAgICAgIGNvbnN0IHRtcFNjaGVtYSA9IGNoYW5nZXMuc2NoZW1hLmN1cnJlbnRWYWx1ZTtcbiAgICAgIC8vIGpzb24tc2NoZW1hLWZvcm0gZG9lc250IGxpa2UgdGhlICRzY2hlbWEgYW5kIHdvbnQgcGFyc2UgdGhlIHNjaGVtYSBpZiBpdCBpcyBwcmVzZW50LiBTbyByZW1vdmUgaXQuXG4gICAgICBpZiAoY2hhbmdlcy5zY2hlbWEuY3VycmVudFZhbHVlLiRzY2hlbWEpIHtcbiAgICAgICAgZGVsZXRlIHRtcFNjaGVtYS4kc2NoZW1hO1xuICAgICAgfVxuICAgICAgdGhpcy5mb3JtU2NoZW1hID0gdG1wU2NoZW1hO1xuICAgICAgY29uc29sZS5sb2coSlNPTi5zdHJpbmdpZnkodGhpcy5mb3JtU2NoZW1hKSk7XG4gICAgfVxuICAgIGlmIChjaGFuZ2VzLmRhdGEgJiYgY2hhbmdlcy5kYXRhLmN1cnJlbnRWYWx1ZSAmJiAoY2hhbmdlcy5kYXRhLmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlcy5kYXRhLnByZXZpb3VzVmFsdWUpKSB7XG4gICAgICB0aGlzLmZvcm1EYXRhID0gdGhpcy5kYXRhO1xuICAgICAgY29uc29sZS5sb2coJ0luaXRpYWwgRm9ybSBEYXRhOicpO1xuICAgICAgY29uc29sZS5sb2codGhpcy5mb3JtRGF0YSk7XG4gICAgICBjb25zb2xlLmxvZyhKU09OLnN0cmluZ2lmeSh0aGlzLmZvcm1EYXRhKSk7XG4gICAgfVxuICAgIGlmIChjaGFuZ2VzLmxheW91dCAmJiBjaGFuZ2VzLmxheW91dC5jdXJyZW50VmFsdWUgJiYgKGNoYW5nZXMubGF5b3V0LmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlcy5sYXlvdXQucHJldmlvdXNWYWx1ZSkpIHtcbiAgICAgIHRoaXMuZm9ybUxheW91dCA9IHRoaXMubGF5b3V0O1xuICAgIH1cbiAgfVxuXG5cbn1cbiJdfQ==