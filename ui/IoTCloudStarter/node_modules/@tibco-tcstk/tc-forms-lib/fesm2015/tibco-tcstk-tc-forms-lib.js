import { EventEmitter, Component, Input, Output, NgModule, CUSTOM_ELEMENTS_SCHEMA, Injectable } from '@angular/core';
import { MaterialDesignFrameworkModule } from 'angular6-json-schema-form';
import { ActivatedRoute } from '@angular/router';
import { MatButtonModule, MatCardModule, MatCheckboxModule, MatIconModule, MatMenuModule, MatSelectModule, MatToolbarModule, MatListModule, MatFormFieldModule, MatInputModule, MatOptionModule, MatDialogModule, MatTooltipModule } from '@angular/material';
import { FormsModule, ReactiveFormsModule } from '@angular/forms';
import { FlexLayoutModule } from '@angular/flex-layout';
import { ScrollingModule } from '@angular/cdk/scrolling';
import { BrowserAnimationsModule } from '@angular/platform-browser/animations';
import { BrowserModule } from '@angular/platform-browser';
import { HttpHeaders, HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { TcCoreCommonFunctions } from '@tibco-tcstk/tc-core-lib';
import { map } from 'rxjs/operators';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class CustomFormDefs {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class RenderedFormComponent {
    /**
     * @param {?} route
     */
    constructor(route) {
        this.route = route;
        this.schema = {};
        this.layout = [];
        this.data = {};
        /**
         * ~event formSubmit : form submitted
         * ~payload any : data submitted from the form on submit (type=any)
         */
        this.formSubmit = new EventEmitter();
        this.formData = {};
        this.submitForm = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.formSubmit.emit(data);
        });
        this.handleLayoutOutput = (/**
         * @param {?} layout
         * @return {?}
         */
        (layout) => {
            console.log('Layout:');
            console.log(JSON.stringify(layout));
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // handle input param changes
        if (this.customFormDefs && changes.formRef && changes.formRef.currentValue && (changes.formRef.currentValue !== changes.formRef.previousValue)) {
            // check if this is a custom form
            this.useCustomForm = (this.customFormDefs.customForms.findIndex((/**
             * @param {?} form
             * @return {?}
             */
            (form) => {
                return (form === changes.formRef.currentValue);
            })) !== -1);
        }
        if (changes.schema && changes.schema.currentValue && (changes.schema.currentValue !== changes.schema.previousValue)) {
            /** @type {?} */
            const tmpSchema = changes.schema.currentValue;
            // json-schema-form doesnt like the $schema and wont parse the schema if it is present. So remove it.
            if (changes.schema.currentValue.$schema) {
                delete tmpSchema.$schema;
            }
            this.formSchema = tmpSchema;
            console.log(JSON.stringify(this.formSchema));
        }
        if (changes.data && changes.data.currentValue && (changes.data.currentValue !== changes.data.previousValue)) {
            this.formData = this.data;
            console.log('Initial Form Data:');
            console.log(this.formData);
            console.log(JSON.stringify(this.formData));
        }
        if (changes.layout && changes.layout.currentValue && (changes.layout.currentValue !== changes.layout.previousValue)) {
            this.formLayout = this.layout;
        }
    }
}
RenderedFormComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcfrm-rendered-form',
                template: "<div fxFill fxLayout=\"row\" fxLayoutAlign = \"center start\">\n  <div class=\"tcs-rendered-form\">\n    <json-schema-form #renderedForm *ngIf=\"!useCustomForm && formSchema\"\n      loadExternalAssets=\"false\"\n      framework=\"material-design\"\n      [schema]=\"formSchema\"\n      [layout]=\"formLayout\"\n      [(data)]=\"formData\"\n      [options]=\"options\"\n      (onSubmit)=\"submitForm($event)\"\n      (formLayout)=\"handleLayoutOutput($event)\"\n    >\n    </json-schema-form>\n\n    <!-- form-app=\"''\" - this is to work around an issue where the element doesnt display the form properly unless we pass in an additional input - angular bug? -->\n    <custom-form *ngIf=\"useCustomForm && formRef && formData && appId\" form-app=\"''\" [formRef]=\"formRef\" [caseRef]=\"caseRef\" [appId]=\"appId\" [data]=\"formData\" (formSubmitted)=\"submitForm($event.detail)\"></custom-form>\n    <span *ngIf=\"!formSchema && !useCustomForm\">A form cannot be generated as no schema is available. Use a supported form or register a custom form app.</span>\n  </div>\n</div>\n",
                styles: [".tcs-rendered-form{box-shadow:0 2px 8px 0 #dedede;background-color:#fff;width:100%;padding:20px}"]
            }] }
];
/** @nocollapse */
RenderedFormComponent.ctorParameters = () => [
    { type: ActivatedRoute }
];
RenderedFormComponent.propDecorators = {
    schema: [{ type: Input }],
    layout: [{ type: Input }],
    data: [{ type: Input }],
    options: [{ type: Input }],
    formRef: [{ type: Input }],
    caseRef: [{ type: Input }],
    appId: [{ type: Input }],
    customFormDefs: [{ type: Input }],
    formSubmit: [{ type: Output }]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class TcFormsLibModule {
}
TcFormsLibModule.decorators = [
    { type: NgModule, args: [{
                declarations: [
                    RenderedFormComponent
                ],
                imports: [
                    BrowserModule,
                    BrowserAnimationsModule,
                    FlexLayoutModule,
                    FormsModule,
                    MatButtonModule,
                    MatCardModule,
                    MatCheckboxModule,
                    MatIconModule,
                    MatMenuModule,
                    MatSelectModule,
                    MatToolbarModule,
                    MaterialDesignFrameworkModule,
                    MatButtonModule,
                    MatCardModule,
                    MatCheckboxModule,
                    MatListModule,
                    MatFormFieldModule,
                    MatInputModule,
                    MatIconModule,
                    MatSelectModule,
                    MatOptionModule,
                    MatDialogModule,
                    MatMenuModule,
                    MatCardModule,
                    MatTooltipModule,
                    FormsModule,
                    FlexLayoutModule,
                    ScrollingModule,
                    FormsModule,
                    ReactiveFormsModule
                ],
                schemas: [CUSTOM_ELEMENTS_SCHEMA],
                exports: [
                    RenderedFormComponent
                ],
                entryComponents: []
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class FormResolver {
    /**
     * @param {?} http
     * @param {?} location
     */
    constructor(http, location) {
        this.http = http;
        this.location = location;
        this.CUSTOM_FORMS_CONFIG_URL = 'assets/config/customForms.json';
    }
    /**
     * @return {?}
     */
    resolve() {
        /** @type {?} */
        const headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, this.CUSTOM_FORMS_CONFIG_URL), { headers }).pipe(map((/**
         * @param {?} formsConfig
         * @return {?}
         */
        formsConfig => {
            return new CustomFormDefs().deserialize(formsConfig);
        })));
    }
}
FormResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
FormResolver.ctorParameters = () => [
    { type: HttpClient },
    { type: Location }
];

export { CustomFormDefs, FormResolver, RenderedFormComponent, TcFormsLibModule };
//# sourceMappingURL=tibco-tcstk-tc-forms-lib.js.map
