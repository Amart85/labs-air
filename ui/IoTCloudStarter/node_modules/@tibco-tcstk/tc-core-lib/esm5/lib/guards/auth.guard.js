/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// This guard will redirect to login when not authenticated against live apps.
// If hosted on Tibco cloud it will not be used since Tibco Cloud/Live Apps WRP resources are protected anyway.
// session is detected if API called in last 30 mins (checks local sessionTimestamp)
// alternative way to achieve this would be to make an API call - eg) live apps claims call
// NOTE: assumes the login route is /login
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
var AuthGuard = /** @class */ (function () {
    function AuthGuard(router) {
        this.router = router;
        this.TIBCO_CLOUD_DOMAIN = 'cloud.tibco.com';
        this.TIBCO_TEST_DOMAIN = 'tenant-integration.tcie.pro';
        this.TIBCO_DEV_DOMAIN = 'emea.tibco.com';
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    AuthGuard.prototype.canActivate = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        // check if we are hosted on tibco.cloud.com
        /** @type {?} */
        var host = window.location.hostname.split('.');
        /** @type {?} */
        var hostDomain = host[host.length - 3] + '.' + host[host.length - 2] + '.' + host[host.length - 1];
        if (hostDomain === this.TIBCO_CLOUD_DOMAIN || hostDomain === this.TIBCO_TEST_DOMAIN || hostDomain === this.TIBCO_DEV_DOMAIN) {
            // delegate handling login/auth to Tibco Cloud since WRP resources are protected anyway
            return true;
        }
        else {
            // use the sessionTimestamp to decide whether to redirect to login (30 mins expiry of token if no API call)
            /** @type {?} */
            var tcsTimestamp = sessionStorage.getItem('tcsTimestamp');
            if (tcsTimestamp && Number(tcsTimestamp) > (Number(Date.now()) - (30 * 60000))) {
                // logged in and api called made in last 30 mins so should be OK
                return true;
            }
            else {
                // not logged in so redirect to login page
                this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });
            }
        }
    };
    AuthGuard.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AuthGuard.ctorParameters = function () { return [
        { type: Router }
    ]; };
    return AuthGuard;
}());
export { AuthGuard };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.TIBCO_CLOUD_DOMAIN;
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.TIBCO_TEST_DOMAIN;
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.TIBCO_DEV_DOMAIN;
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9ndWFyZHMvYXV0aC5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFRQSxPQUFPLEVBQVMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxNQUFNLEVBQTRELE1BQU0saUJBQWlCLENBQUM7QUFFbkc7SUFNRSxtQkFBb0IsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFKMUIsdUJBQWtCLEdBQUcsaUJBQWlCLENBQUM7UUFDdkMsc0JBQWlCLEdBQUcsNkJBQTZCLENBQUM7UUFDbEQscUJBQWdCLEdBQUcsZ0JBQWdCLENBQUM7SUFHNUMsQ0FBQzs7Ozs7O0lBRUQsK0JBQVc7Ozs7O0lBQVgsVUFBWSxLQUE2QixFQUFFLEtBQTBCOzs7WUFFN0QsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O1lBQzFDLFVBQVUsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztRQUNwRyxJQUFJLFVBQVUsS0FBSyxJQUFJLENBQUMsa0JBQWtCLElBQUksVUFBVSxLQUFLLElBQUksQ0FBQyxpQkFBaUIsSUFBSSxVQUFVLEtBQUssSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQzNILHVGQUF1RjtZQUN2RixPQUFPLElBQUksQ0FBQztTQUNiO2FBQU07OztnQkFFQyxZQUFZLEdBQUcsY0FBYyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUM7WUFDM0QsSUFBSSxZQUFZLElBQUksTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUU7Z0JBQzlFLGdFQUFnRTtnQkFDaEUsT0FBTyxJQUFJLENBQUM7YUFDYjtpQkFBTTtnQkFDTCwwQ0FBMEM7Z0JBQzFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBQyxXQUFXLEVBQUUsRUFBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLEdBQUcsRUFBQyxFQUFDLENBQUMsQ0FBQzthQUN6RTtTQUNGO0lBQ0gsQ0FBQzs7Z0JBM0JGLFVBQVU7Ozs7Z0JBRkYsTUFBTTs7SUE4QmYsZ0JBQUM7Q0FBQSxBQTVCRCxJQTRCQztTQTNCWSxTQUFTOzs7Ozs7SUFDcEIsdUNBQStDOzs7OztJQUMvQyxzQ0FBMEQ7Ozs7O0lBQzFELHFDQUE0Qzs7Ozs7SUFFaEMsMkJBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBndWFyZCB3aWxsIHJlZGlyZWN0IHRvIGxvZ2luIHdoZW4gbm90IGF1dGhlbnRpY2F0ZWQgYWdhaW5zdCBsaXZlIGFwcHMuXG4vLyBJZiBob3N0ZWQgb24gVGliY28gY2xvdWQgaXQgd2lsbCBub3QgYmUgdXNlZCBzaW5jZSBUaWJjbyBDbG91ZC9MaXZlIEFwcHMgV1JQIHJlc291cmNlcyBhcmUgcHJvdGVjdGVkIGFueXdheS5cblxuLy8gc2Vzc2lvbiBpcyBkZXRlY3RlZCBpZiBBUEkgY2FsbGVkIGluIGxhc3QgMzAgbWlucyAoY2hlY2tzIGxvY2FsIHNlc3Npb25UaW1lc3RhbXApXG4vLyBhbHRlcm5hdGl2ZSB3YXkgdG8gYWNoaWV2ZSB0aGlzIHdvdWxkIGJlIHRvIG1ha2UgYW4gQVBJIGNhbGwgLSBlZykgbGl2ZSBhcHBzIGNsYWltcyBjYWxsXG5cbi8vIE5PVEU6IGFzc3VtZXMgdGhlIGxvZ2luIHJvdXRlIGlzIC9sb2dpblxuXG5pbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSb3V0ZXIsIENhbkFjdGl2YXRlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSb3V0ZXJTdGF0ZVNuYXBzaG90IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEF1dGhHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcbiAgcHJpdmF0ZSBUSUJDT19DTE9VRF9ET01BSU4gPSAnY2xvdWQudGliY28uY29tJztcbiAgcHJpdmF0ZSBUSUJDT19URVNUX0RPTUFJTiA9ICd0ZW5hbnQtaW50ZWdyYXRpb24udGNpZS5wcm8nO1xuICBwcml2YXRlIFRJQkNPX0RFVl9ET01BSU4gPSAnZW1lYS50aWJjby5jb20nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgcm91dGVyOiBSb3V0ZXIpIHtcbiAgfVxuXG4gIGNhbkFjdGl2YXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCkge1xuICAgIC8vIGNoZWNrIGlmIHdlIGFyZSBob3N0ZWQgb24gdGliY28uY2xvdWQuY29tXG4gICAgY29uc3QgaG9zdCA9IHdpbmRvdy5sb2NhdGlvbi5ob3N0bmFtZS5zcGxpdCgnLicpO1xuICAgIGNvbnN0IGhvc3REb21haW4gPSBob3N0W2hvc3QubGVuZ3RoIC0gM10gKyAnLicgKyBob3N0W2hvc3QubGVuZ3RoIC0gMl0gKyAnLicgKyBob3N0W2hvc3QubGVuZ3RoIC0gMV07XG4gICAgaWYgKGhvc3REb21haW4gPT09IHRoaXMuVElCQ09fQ0xPVURfRE9NQUlOIHx8IGhvc3REb21haW4gPT09IHRoaXMuVElCQ09fVEVTVF9ET01BSU4gfHwgaG9zdERvbWFpbiA9PT0gdGhpcy5USUJDT19ERVZfRE9NQUlOKSB7XG4gICAgICAvLyBkZWxlZ2F0ZSBoYW5kbGluZyBsb2dpbi9hdXRoIHRvIFRpYmNvIENsb3VkIHNpbmNlIFdSUCByZXNvdXJjZXMgYXJlIHByb3RlY3RlZCBhbnl3YXlcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1c2UgdGhlIHNlc3Npb25UaW1lc3RhbXAgdG8gZGVjaWRlIHdoZXRoZXIgdG8gcmVkaXJlY3QgdG8gbG9naW4gKDMwIG1pbnMgZXhwaXJ5IG9mIHRva2VuIGlmIG5vIEFQSSBjYWxsKVxuICAgICAgY29uc3QgdGNzVGltZXN0YW1wID0gc2Vzc2lvblN0b3JhZ2UuZ2V0SXRlbSgndGNzVGltZXN0YW1wJyk7XG4gICAgICBpZiAodGNzVGltZXN0YW1wICYmIE51bWJlcih0Y3NUaW1lc3RhbXApID4gKE51bWJlcihEYXRlLm5vdygpKSAtICgzMCAqIDYwMDAwKSkpIHtcbiAgICAgICAgLy8gbG9nZ2VkIGluIGFuZCBhcGkgY2FsbGVkIG1hZGUgaW4gbGFzdCAzMCBtaW5zIHNvIHNob3VsZCBiZSBPS1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIG5vdCBsb2dnZWQgaW4gc28gcmVkaXJlY3QgdG8gbG9naW4gcGFnZVxuICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy9sb2dpbiddLCB7cXVlcnlQYXJhbXM6IHtyZXR1cm5Vcmw6IHN0YXRlLnVybH19KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiJdfQ==