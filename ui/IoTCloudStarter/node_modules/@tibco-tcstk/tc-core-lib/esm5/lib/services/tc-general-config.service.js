/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { SharedStateContent, SharedStateEntry, SharedStateList } from '../models/tc-shared-state';
import { map } from 'rxjs/operators';
import { Location } from '@angular/common';
import { TcCoreCommonFunctions } from '../common/tc-core-common-functions';
import { GeneralConfig } from '../models/tc-general-config';
import { TcSharedStateService } from './tc-shared-state.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "./tc-shared-state.service";
var TcGeneralConfigService = /** @class */ (function () {
    function TcGeneralConfigService(location, sharedStateService) {
        this.location = location;
        this.sharedStateService = sharedStateService;
    }
    /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} generalConfig
     * @return {?}
     */
    TcGeneralConfigService.prototype.createGeneralConfig = /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} generalConfig
     * @return {?}
     */
    function (sandboxId, uiAppId, generalConfig) {
        /** @type {?} */
        var ssName = uiAppId + '.general.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        var content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(generalConfig));
        return this.sharedStateService.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value; })));
    };
    /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    TcGeneralConfigService.prototype.getGeneralConfig = /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    function (uiAppId, useCache, flushCache) {
        // if useCache is false this will trigger the service to update the cached version with latest
        /** @type {?} */
        var ssName = uiAppId + '.general.config.tibcolabs.client.context.PUBLIC';
        return this.sharedStateService.getSharedState(ssName, 'PUBLIC', useCache, flushCache)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value.sharedStateEntries.length > 0) {
                /** @type {?} */
                var ssresult = new GeneralConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));
                ssresult.id = value.sharedStateEntries[0].id;
                return ssresult;
            }
            else {
                return undefined;
            }
        })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} generalConfig
     * @param {?} id
     * @return {?}
     */
    TcGeneralConfigService.prototype.updateGeneralConfig = /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} generalConfig
     * @param {?} id
     * @return {?}
     */
    function (sandboxId, uiAppId, generalConfig, id) {
        var _this = this;
        /** @type {?} */
        var ssName = uiAppId + '.general.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        var content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(generalConfig));
        /** @type {?} */
        var entry = new SharedStateEntry();
        entry.content = content;
        entry.sandboxId = sandboxId;
        entry.name = ssName;
        entry.type = 'PUBLIC';
        entry.id = id;
        /** @type {?} */
        var ssList = new SharedStateList();
        ssList.sharedStateEntries = [];
        ssList.sharedStateEntries.push(entry);
        return this.sharedStateService.updateSharedState(ssList.sharedStateEntries)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // flush the cache
            _this.getGeneralConfig(uiAppId, true, true).subscribe();
            return new GeneralConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));
        })));
    };
    TcGeneralConfigService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TcGeneralConfigService.ctorParameters = function () { return [
        { type: Location },
        { type: TcSharedStateService }
    ]; };
    /** @nocollapse */ TcGeneralConfigService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcGeneralConfigService_Factory() { return new TcGeneralConfigService(i0.ɵɵinject(i1.Location), i0.ɵɵinject(i2.TcSharedStateService)); }, token: TcGeneralConfigService, providedIn: "root" });
    return TcGeneralConfigService;
}());
export { TcGeneralConfigService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcGeneralConfigService.prototype.location;
    /**
     * @type {?}
     * @private
     */
    TcGeneralConfigService.prototype.sharedStateService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtZ2VuZXJhbC1jb25maWcuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90Yy1nZW5lcmFsLWNvbmZpZy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSxlQUFlLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUVoRyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkMsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLG9DQUFvQyxDQUFDO0FBQ3pFLE9BQU8sRUFBQyxhQUFhLEVBQUMsTUFBTSw2QkFBNkIsQ0FBQztBQUMxRCxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQzs7OztBQUUvRDtJQUtFLGdDQUFvQixRQUFrQixFQUFVLGtCQUF3QztRQUFwRSxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQVUsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFzQjtJQUN4RixDQUFDOzs7Ozs7O0lBRU0sb0RBQW1COzs7Ozs7SUFBMUIsVUFBMkIsU0FBaUIsRUFBRSxPQUFlLEVBQUUsYUFBNEI7O1lBQ25GLE1BQU0sR0FBRyxPQUFPLEdBQUcsaURBQWlEOztZQUNwRSxPQUFPLEdBQXVCLElBQUksa0JBQWtCLEVBQUU7UUFDNUQsT0FBTyxDQUFDLElBQUksR0FBRyxxQkFBcUIsQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBRWpGLE9BQU8sSUFBSSxDQUFDLGtCQUFrQixDQUFDLGlCQUFpQixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsRUFB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Ozs7OztJQUFFLG9EQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U2hhcmVkU3RhdGVDb250ZW50LCBTaGFyZWRTdGF0ZUVudHJ5LCBTaGFyZWRTdGF0ZUxpc3R9IGZyb20gJy4uL21vZGVscy90Yy1zaGFyZWQtc3RhdGUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0xvY2F0aW9ufSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtUY0NvcmVDb21tb25GdW5jdGlvbnN9IGZyb20gJy4uL2NvbW1vbi90Yy1jb3JlLWNvbW1vbi1mdW5jdGlvbnMnO1xuaW1wb3J0IHtHZW5lcmFsQ29uZmlnfSBmcm9tICcuLi9tb2RlbHMvdGMtZ2VuZXJhbC1jb25maWcnO1xuaW1wb3J0IHtUY1NoYXJlZFN0YXRlU2VydmljZX0gZnJvbSAnLi90Yy1zaGFyZWQtc3RhdGUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRjR2VuZXJhbENvbmZpZ1NlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYXRpb246IExvY2F0aW9uLCBwcml2YXRlIHNoYXJlZFN0YXRlU2VydmljZTogVGNTaGFyZWRTdGF0ZVNlcnZpY2UpIHtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVHZW5lcmFsQ29uZmlnKHNhbmRib3hJZDogbnVtYmVyLCB1aUFwcElkOiBzdHJpbmcsIGdlbmVyYWxDb25maWc6IEdlbmVyYWxDb25maWcpIHtcbiAgICBjb25zdCBzc05hbWUgPSB1aUFwcElkICsgJy5nZW5lcmFsLmNvbmZpZy50aWJjb2xhYnMuY2xpZW50LmNvbnRleHQuUFVCTElDJztcbiAgICBjb25zdCBjb250ZW50OiBTaGFyZWRTdGF0ZUNvbnRlbnQgPSBuZXcgU2hhcmVkU3RhdGVDb250ZW50KCk7XG4gICAgY29udGVudC5qc29uID0gVGNDb3JlQ29tbW9uRnVuY3Rpb25zLmVzY2FwZVN0cmluZyhKU09OLnN0cmluZ2lmeShnZW5lcmFsQ29uZmlnKSk7XG5cbiAgICByZXR1cm4gdGhpcy5zaGFyZWRTdGF0ZVNlcnZpY2UuY3JlYXRlU2hhcmVkU3RhdGUoc3NOYW1lLCAnUFVCTElDJywgJycsIHNhbmRib3hJZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGVudClcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAodmFsdWUgPT4gdmFsdWUpXG4gICAgICApO1xuICB9XG5cbiAgcHVibGljIGdldEdlbmVyYWxDb25maWcodWlBcHBJZDogc3RyaW5nLCB1c2VDYWNoZTogYm9vbGVhbiwgZmx1c2hDYWNoZTogYm9vbGVhbik6IE9ic2VydmFibGU8R2VuZXJhbENvbmZpZz4ge1xuICAgIC8vIGlmIHVzZUNhY2hlIGlzIGZhbHNlIHRoaXMgd2lsbCB0cmlnZ2VyIHRoZSBzZXJ2aWNlIHRvIHVwZGF0ZSB0aGUgY2FjaGVkIHZlcnNpb24gd2l0aCBsYXRlc3RcbiAgICBjb25zdCBzc05hbWUgPSB1aUFwcElkICsgJy5nZW5lcmFsLmNvbmZpZy50aWJjb2xhYnMuY2xpZW50LmNvbnRleHQuUFVCTElDJztcblxuICAgIHJldHVybiB0aGlzLnNoYXJlZFN0YXRlU2VydmljZS5nZXRTaGFyZWRTdGF0ZShzc05hbWUsICdQVUJMSUMnLCB1c2VDYWNoZSwgZmx1c2hDYWNoZSlcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAodmFsdWUgPT4ge1xuICAgICAgICAgICAgaWYgKHZhbHVlLnNoYXJlZFN0YXRlRW50cmllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgIGNvbnN0IHNzcmVzdWx0ID0gbmV3IEdlbmVyYWxDb25maWcoKS5kZXNlcmlhbGl6ZShKU09OLnBhcnNlKHZhbHVlLnNoYXJlZFN0YXRlRW50cmllc1swXS5jb250ZW50Lmpzb24pKTtcbiAgICAgICAgICAgICAgc3NyZXN1bHQuaWQgPSB2YWx1ZS5zaGFyZWRTdGF0ZUVudHJpZXNbMF0uaWQ7XG4gICAgICAgICAgICAgIHJldHVybiBzc3Jlc3VsdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICApO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZUdlbmVyYWxDb25maWcoc2FuZGJveElkOiBudW1iZXIsIHVpQXBwSWQ6IHN0cmluZywgZ2VuZXJhbENvbmZpZzogR2VuZXJhbENvbmZpZywgaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHNzTmFtZSA9IHVpQXBwSWQgKyAnLmdlbmVyYWwuY29uZmlnLnRpYmNvbGFicy5jbGllbnQuY29udGV4dC5QVUJMSUMnO1xuICAgIGNvbnN0IGNvbnRlbnQ6IFNoYXJlZFN0YXRlQ29udGVudCA9IG5ldyBTaGFyZWRTdGF0ZUNvbnRlbnQoKTtcbiAgICBjb250ZW50Lmpzb24gPSBUY0NvcmVDb21tb25GdW5jdGlvbnMuZXNjYXBlU3RyaW5nKEpTT04uc3RyaW5naWZ5KGdlbmVyYWxDb25maWcpKTtcbiAgICBjb25zdCBlbnRyeTogU2hhcmVkU3RhdGVFbnRyeSA9IG5ldyBTaGFyZWRTdGF0ZUVudHJ5KCk7XG4gICAgZW50cnkuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgZW50cnkuc2FuZGJveElkID0gc2FuZGJveElkO1xuICAgIGVudHJ5Lm5hbWUgPSBzc05hbWU7XG4gICAgZW50cnkudHlwZSA9ICdQVUJMSUMnO1xuICAgIGVudHJ5LmlkID0gaWQ7XG4gICAgY29uc3Qgc3NMaXN0OiBTaGFyZWRTdGF0ZUxpc3QgPSBuZXcgU2hhcmVkU3RhdGVMaXN0KCk7XG4gICAgc3NMaXN0LnNoYXJlZFN0YXRlRW50cmllcyA9IFtdO1xuICAgIHNzTGlzdC5zaGFyZWRTdGF0ZUVudHJpZXMucHVzaChlbnRyeSk7XG5cbiAgICByZXR1cm4gdGhpcy5zaGFyZWRTdGF0ZVNlcnZpY2UudXBkYXRlU2hhcmVkU3RhdGUoc3NMaXN0LnNoYXJlZFN0YXRlRW50cmllcylcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAodmFsdWUgPT4ge1xuICAgICAgICAgIC8vIGZsdXNoIHRoZSBjYWNoZVxuICAgICAgICAgIHRoaXMuZ2V0R2VuZXJhbENvbmZpZyh1aUFwcElkLCB0cnVlLCB0cnVlKS5zdWJzY3JpYmUoKTtcbiAgICAgICAgICByZXR1cm4gbmV3IEdlbmVyYWxDb25maWcoKS5kZXNlcmlhbGl6ZSgoSlNPTi5wYXJzZSh2YWx1ZS5zaGFyZWRTdGF0ZUVudHJpZXNbMF0uY29udGVudC5qc29uKSkpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxufVxuIl19