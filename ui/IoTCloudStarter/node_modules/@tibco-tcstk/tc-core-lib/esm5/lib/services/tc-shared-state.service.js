/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @ngdoc component
 * @name tcSharedStateService
 *
 * @description
 *
 * tcSharedStateService provides services for managing stored client config using the Tibco Live Apps shared state service.
 *
 * Although this is a live apps service rather than a Tibco Subscriber Cloud Service it is inside the core project since it will
 * be used for all applications to store configuration information.
 *
 * By hosting this service in the core we can avoid a circular dependency to the live apps library.
 *
 * Note: This service will use the http caching interceptor for 'GET' calls based on passed parameters.
 *
 *
 */
import { Injectable } from '@angular/core';
import { SharedStateContent, SharedStateEntry, SharedStateList } from '../models/tc-shared-state';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, tap } from 'rxjs/operators';
import { Location } from '@angular/common';
import { UiAppConfig } from '../models/tc-app-config';
import { TcCoreCommonFunctions } from '../common/tc-core-common-functions';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/common";
var TcSharedStateService = /** @class */ (function () {
    function TcSharedStateService(http, location) {
        this.http = http;
        this.location = location;
    }
    /**
     * @param {?} name
     * @param {?} type
     * @param {?} description
     * @param {?} sandboxId
     * @param {?} attributes
     * @param {?} roles
     * @param {?} links
     * @param {?} content
     * @return {?}
     */
    TcSharedStateService.prototype.createSharedState = /**
     * @param {?} name
     * @param {?} type
     * @param {?} description
     * @param {?} sandboxId
     * @param {?} attributes
     * @param {?} roles
     * @param {?} links
     * @param {?} content
     * @return {?}
     */
    function (name, type, description, sandboxId, attributes, roles, links, content) {
        /** @type {?} */
        var url = '/clientstate/v1/states';
        /** @type {?} */
        var body = {
            'name': name,
            'type': type,
            'description': description,
            'sandboxId': sandboxId,
            'attributes': attributes,
            'roles': roles,
            'links': links,
            content: content
        };
        /** @type {?} */
        var bodyStr = JSON.stringify(body);
        /** @type {?} */
        var headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.post(url, bodyStr, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            return result.toString();
        })));
    };
    /**
     * @param {?} sharedStateList
     * @return {?}
     */
    TcSharedStateService.prototype.updateSharedState = /**
     * @param {?} sharedStateList
     * @return {?}
     */
    function (sharedStateList) {
        /** @type {?} */
        var url = '/clientstate/v1/states';
        /** @type {?} */
        var body = sharedStateList;
        /** @type {?} */
        var bodyStr = JSON.stringify(body);
        /** @type {?} */
        var headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.put(url, bodyStr, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} updatedSharedStateList
         * @return {?}
         */
        function (updatedSharedStateList) { return new SharedStateList().deserialize(updatedSharedStateList); })));
    };
    /**
     * @param {?} name
     * @param {?} type
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    TcSharedStateService.prototype.getSharedState = /**
     * @param {?} name
     * @param {?} type
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    function (name, type, useCache, flushCache) {
        /** @type {?} */
        var url = '/clientstate/v1/states?$filter=type=' + type
            + ' and name=\'' + name + '\'';
        /** @type {?} */
        var options = {}
        // set headers when caching required
        ;
        // set headers when caching required
        /** @type {?} */
        var headers = new HttpHeaders();
        if (useCache) {
            headers = headers.set('cacheResponse', 'true');
        }
        if (flushCache) {
            headers = headers.set('flushCache', 'true');
        }
        options = { headers: headers };
        return this.http.get(url, options)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} sharedStateList
         * @return {?}
         */
        function (sharedStateList) { return new SharedStateList().deserialize(sharedStateList); })));
    };
    /* Ui App Config */
    /* Ui App Config */
    /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    TcSharedStateService.prototype.getUiAppConfig = /* Ui App Config */
    /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    function (uiAppId, useCache, flushCache) {
        // if useCache is false this will trigger the service to update the cached version with latest
        /** @type {?} */
        var ssName = uiAppId + '.config.tibcolabs.client.context.PUBLIC';
        return this.getSharedState(ssName, 'PUBLIC', useCache, flushCache)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value.sharedStateEntries.length > 0) {
                /** @type {?} */
                var ssresult = new UiAppConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));
                ssresult.id = value.sharedStateEntries[0].id;
                return ssresult;
            }
            else {
                return undefined;
            }
        })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} uiAppConfig
     * @param {?} uiAppId
     * @return {?}
     */
    TcSharedStateService.prototype.createUiAppConfig = /**
     * @param {?} sandboxId
     * @param {?} uiAppConfig
     * @param {?} uiAppId
     * @return {?}
     */
    function (sandboxId, uiAppConfig, uiAppId) {
        /** @type {?} */
        var ssName = uiAppId + '.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        var content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(uiAppConfig));
        return this.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value; })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} uiAppConfig
     * @param {?} uiAppId
     * @param {?} id
     * @return {?}
     */
    TcSharedStateService.prototype.updateUiAppConfig = /**
     * @param {?} sandboxId
     * @param {?} uiAppConfig
     * @param {?} uiAppId
     * @param {?} id
     * @return {?}
     */
    function (sandboxId, uiAppConfig, uiAppId, id) {
        /** @type {?} */
        var ssName = uiAppId + '.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        var content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(uiAppConfig));
        /** @type {?} */
        var entry = new SharedStateEntry();
        entry.content = content;
        entry.sandboxId = sandboxId;
        entry.name = ssName;
        entry.type = 'PUBLIC';
        entry.id = id;
        /** @type {?} */
        var ssList = new SharedStateList();
        ssList.sharedStateEntries = [];
        ssList.sharedStateEntries.push(entry);
        return this.updateSharedState(ssList.sharedStateEntries)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return new UiAppConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));
        })));
    };
    /**
     * @param {?} id
     * @return {?}
     */
    TcSharedStateService.prototype.deleteSharedState = /**
     * @param {?} id
     * @return {?}
     */
    function (id) {
        /** @type {?} */
        var url = '/clientstate/v1/states/' + id;
        return this.http.delete(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return 'success'; })));
    };
    TcSharedStateService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TcSharedStateService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Location }
    ]; };
    /** @nocollapse */ TcSharedStateService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcSharedStateService_Factory() { return new TcSharedStateService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Location)); }, token: TcSharedStateService, providedIn: "root" });
    return TcSharedStateService;
}());
export { TcSharedStateService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcSharedStateService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TcSharedStateService.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtc2hhcmVkLXN0YXRlLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtY29yZS1saWIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvdGMtc2hhcmVkLXN0YXRlLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBa0JBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFDLGtCQUFrQixFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBRWhHLE9BQU8sRUFBQyxVQUFVLEVBQUUsV0FBVyxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDN0QsT0FBTyxFQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFDLFdBQVcsRUFBQyxNQUFNLHlCQUF5QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxxQkFBcUIsRUFBQyxNQUFNLG9DQUFvQyxDQUFDOzs7O0FBRXpFO0lBS0UsOEJBQW9CLElBQWdCLEVBQVUsUUFBa0I7UUFBNUMsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDaEUsQ0FBQzs7Ozs7Ozs7Ozs7O0lBRU0sZ0RBQWlCOzs7Ozs7Ozs7OztJQUF4QixVQUF5QixJQUFZLEVBQ1osSUFBWSxFQUNaLFdBQW1CLEVBQ25CLFNBQWlCLEVBQ2pCLFVBQW9CLEVBQ3BCLEtBQWUsRUFDZixLQUFlLEVBQ2YsT0FBMkI7O1lBQzVDLEdBQUcsR0FBRyx3QkFBd0I7O1lBRTlCLElBQUksR0FBRztZQUNYLE1BQU0sRUFBRSxJQUFJO1lBQ1osTUFBTSxFQUFFLElBQUk7WUFDWixhQUFhLEVBQUUsV0FBVztZQUMxQixXQUFXLEVBQUUsU0FBUztZQUN0QixZQUFZLEVB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RUFBQyxDQUNILENBQUM7SUFDTixDQUFDOzs7OztJQUVNLGdEQUFpQjs7OztJQUF4QixVQUF5QixFQUFVOztZQUMzQixHQUFHLEdBQUcseUJBQXlCLEdBQUcsRUFBRTtRQUMxQyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQzthQUN6QixJQUFJLENBQ0gsR0FBRzs7OztRQUFDLFVBQUEsR0FBRyxJQUFJLE9BQUEsY0FBYyxDQUFDLE9BQU8sQ0FBQyxjQUFjLEVBQUUsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxDQUFDLEVBQTdELENBQTZELEVBQUMsRUFDekUsR0FBRzs7OztRQUFDLFVBQUEsTUFBTSxJQUFJLE9BQUEsU0FBUyxFQUFULENBQVMsRUFBQyxDQUN6QixDQUFDO0lBQ04sQ0FBQzs7Z0JBcklGLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBUk8sVUFBVTtnQkFFVixRQUFROzs7K0JBdkJoQjtDQWtLQyxBQXZJRCxJQXVJQztTQXBJWSxvQkFBb0I7Ozs7OztJQUVuQixvQ0FBd0I7Ozs7O0lBQUUsd0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBAbmdkb2MgY29tcG9uZW50XG4gKiBAbmFtZSB0Y1NoYXJlZFN0YXRlU2VydmljZVxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIHRjU2hhcmVkU3RhdGVTZXJ2aWNlIHByb3ZpZGVzIHNlcnZpY2VzIGZvciBtYW5hZ2luZyBzdG9yZWQgY2xpZW50IGNvbmZpZyB1c2luZyB0aGUgVGliY28gTGl2ZSBBcHBzIHNoYXJlZCBzdGF0ZSBzZXJ2aWNlLlxuICpcbiAqIEFsdGhvdWdoIHRoaXMgaXMgYSBsaXZlIGFwcHMgc2VydmljZSByYXRoZXIgdGhhbiBhIFRpYmNvIFN1YnNjcmliZXIgQ2xvdWQgU2VydmljZSBpdCBpcyBpbnNpZGUgdGhlIGNvcmUgcHJvamVjdCBzaW5jZSBpdCB3aWxsXG4gKiBiZSB1c2VkIGZvciBhbGwgYXBwbGljYXRpb25zIHRvIHN0b3JlIGNvbmZpZ3VyYXRpb24gaW5mb3JtYXRpb24uXG4gKlxuICogQnkgaG9zdGluZyB0aGlzIHNlcnZpY2UgaW4gdGhlIGNvcmUgd2UgY2FuIGF2b2lkIGEgY2lyY3VsYXIgZGVwZW5kZW5jeSB0byB0aGUgbGl2ZSBhcHBzIGxpYnJhcnkuXG4gKlxuICogTm90ZTogVGhpcyBzZXJ2aWNlIHdpbGwgdXNlIHRoZSBodHRwIGNhY2hpbmcgaW50ZXJjZXB0b3IgZm9yICdHRVQnIGNhbGxzIGJhc2VkIG9uIHBhc3NlZCBwYXJhbWV0ZXJzLlxuICpcbiAqXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTaGFyZWRTdGF0ZUNvbnRlbnQsIFNoYXJlZFN0YXRlRW50cnksIFNoYXJlZFN0YXRlTGlzdH0gZnJvbSAnLi4vbW9kZWxzL3RjLXNoYXJlZC1zdGF0ZSc7XG5pbXBvcnQge09ic2VydmFibGUsIG9mfSBmcm9tICdyeGpzJztcbmltcG9ydCB7SHR0cENsaWVudCwgSHR0cEhlYWRlcnN9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7bWFwLCB0YXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7TG9jYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1VpQXBwQ29uZmlnfSBmcm9tICcuLi9tb2RlbHMvdGMtYXBwLWNvbmZpZyc7XG5pbXBvcnQge1RjQ29yZUNvbW1vbkZ1bmN0aW9uc30gZnJvbSAnLi4vY29tbW9uL3RjLWNvcmUtY29tbW9uLWZ1bmN0aW9ucyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRjU2hhcmVkU3RhdGVTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgbG9jYXRpb246IExvY2F0aW9uKSB7XG4gIH1cblxuICBwdWJsaWMgY3JlYXRlU2hhcmVkU3RhdGUobmFtZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogc3RyaW5nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IHN0cmluZyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhbmRib3hJZDogbnVtYmVyLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlczogc3RyaW5nW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlczogc3RyaW5nW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBsaW5rczogc3RyaW5nW10sXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjb250ZW50OiBTaGFyZWRTdGF0ZUNvbnRlbnQpOiBPYnNlcnZhYmxlPHN0cmluZz4ge1xuICAgIGNvbnN0IHVybCA9ICcvY2xpZW50c3RhdGUvdjEvc3RhdGVzJztcblxuICAgIGNvbnN0IGJvZHkgPSB7XG4gICAgICAnbmFtZSc6IG5hbWUsXG4gICAgICAndHlwZSc6IHR5cGUsXG4gICAgICAnZGVzY3JpcHRpb24nOiBkZXNjcmlwdGlvbixcbiAgICAgICdzYW5kYm94SWQnOiBzYW5kYm94SWQsXG4gICAgICAnYXR0cmlidXRlcyc6IGF0dHJpYnV0ZXMsXG4gICAgICAncm9sZXMnOiByb2xlcyxcbiAgICAgICdsaW5rcyc6IGxpbmtzLFxuICAgICAgY29udGVudDogY29udGVudFxuICAgIH07XG4gICAgY29uc3QgYm9keVN0ciA9IEpTT04uc3RyaW5naWZ5KGJvZHkpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKVxuICAgICAgLnNldCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICByZXR1cm4gdGhpcy5odHRwLnBvc3QodXJsLCBib2R5U3RyLCB7aGVhZGVyc30pXG4gICAgICAucGlwZShcbiAgICAgICAgdGFwKHZhbCA9PiBzZXNzaW9uU3RvcmFnZS5zZXRJdGVtKCd0Y3NUaW1lc3RhbXAnLCBEYXRlLm5vdygpLnRvU3RyaW5nKCkpKSxcbiAgICAgICAgbWFwKHJlc3VsdCA9PiB7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdC50b1N0cmluZygpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIHB1YmxpYyB1cGRhdGVTaGFyZWRTdGF0ZShzaGFyZWRTdGF0ZUxpc3QpOiBPYnNlcnZhYmxlPFNoYXJlZFN0YXRlTGlzdD4ge1xuICAgIGNvbnN0IHVybCA9ICcvY2xpZW50c3RhdGUvdjEvc3RhdGVzJztcblxuICAgIGNvbnN0IGJvZHkgPSBzaGFyZWRTdGF0ZUxpc3Q7XG4gICAgY29uc3QgYm9keVN0ciA9IEpTT04uc3RyaW5naWZ5KGJvZHkpO1xuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKVxuICAgICAgLnNldCgnQ29udGVudC1UeXBlJywgJ2FwcGxpY2F0aW9uL2pzb24nKTtcbiAgICByZXR1cm4gdGhpcy5odHRwLnB1dCh1cmwsIGJvZHlTdHIsIHtoZWFkZXJzfSlcbiAgICAgIC5waXBlKFxuICAgICAgICB0YXAodmFsID0+IHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ3Rjc1RpbWVzdGFtcCcsIERhdGUubm93KCkudG9TdHJpbmcoKSkpLFxuICAgICAgICBtYXAodXBkYXRlZFNoYXJlZFN0YXRlTGlzdCA9PiBuZXcgU2hhcmVkU3RhdGVMaXN0KCkuZGVzZXJpYWxpemUodXBkYXRlZFNoYXJlZFN0YXRlTGlzdCkpXG4gICAgICApO1xuICB9XG5cbiAgcHVibGljIGdldFNoYXJlZFN0YXRlKG5hbWU6IHN0cmluZywgdHlwZTogc3RyaW5nLCB1c2VDYWNoZTogYm9vbGVhbiwgZmx1c2hDYWNoZTogYm9vbGVhbik6IE9ic2VydmFibGU8U2hhcmVkU3RhdGVMaXN0PiB7XG4gICAgY29uc3QgdXJsID0gJy9jbGllbnRzdGF0ZS92MS9zdGF0ZXM/JGZpbHRlcj10eXBlPScgKyB0eXBlXG4gICAgICArICcgYW5kIG5hbWU9XFwnJyArIG5hbWUgKyAnXFwnJztcbiAgICBsZXQgb3B0aW9ucyA9IHt9XG4gICAgLy8gc2V0IGhlYWRlcnMgd2hlbiBjYWNoaW5nIHJlcXVpcmVkXG4gICAgbGV0IGhlYWRlcnM6IEh0dHBIZWFkZXJzID0gbmV3IEh0dHBIZWFkZXJzKCk7XG4gICAgaWYgKHVzZUNhY2hlKSB7XG4gICAgICBoZWFkZXJzID0gaGVhZGVycy5zZXQoJ2NhY2hlUmVzcG9uc2UnLCAndHJ1ZScpO1xuICAgIH1cbiAgICBpZiAoZmx1c2hDYWNoZSkge1xuICAgICAgaGVhZGVycyA9IGhlYWRlcnMuc2V0KCdmbHVzaENhY2hlJywgJ3RydWUnKTtcbiAgICB9XG4gICAgb3B0aW9ucyA9IHtoZWFkZXJzOiBoZWFkZXJzfTtcblxuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KHVybCwgb3B0aW9ucylcbiAgICAgIC5waXBlKFxuICAgICAgICB0YXAodmFsID0+IHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ3Rjc1RpbWVzdGFtcCcsIERhdGUubm93KCkudG9TdHJpbmcoKSkpLFxuICAgICAgICBtYXAoc2hhcmVkU3RhdGVMaXN0ID0+IG5ldyBTaGFyZWRTdGF0ZUxpc3QoKS5kZXNlcmlhbGl6ZShzaGFyZWRTdGF0ZUxpc3QpKSk7XG4gIH1cblxuICAvKiBVaSBBcHAgQ29uZmlnICovXG5cbiAgcHVibGljIGdldFVpQXBwQ29uZmlnKHVpQXBwSWQ6IHN0cmluZywgdXNlQ2FjaGU6IGJvb2xlYW4sIGZsdXNoQ2FjaGU6IGJvb2xlYW4pOiBPYnNlcnZhYmxlPFVpQXBwQ29uZmlnPiB7XG4gICAgLy8gaWYgdXNlQ2FjaGUgaXMgZmFsc2UgdGhpcyB3aWxsIHRyaWdnZXIgdGhlIHNlcnZpY2UgdG8gdXBkYXRlIHRoZSBjYWNoZWQgdmVyc2lvbiB3aXRoIGxhdGVzdFxuICAgIGNvbnN0IHNzTmFtZSA9IHVpQXBwSWQgKyAnLmNvbmZpZy50aWJjb2xhYnMuY2xpZW50LmNvbnRleHQuUFVCTElDJztcblxuICAgIHJldHVybiB0aGlzLmdldFNoYXJlZFN0YXRlKHNzTmFtZSwgJ1BVQkxJQycsIHVzZUNhY2hlLCBmbHVzaENhY2hlKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcCh2YWx1ZSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWUuc2hhcmVkU3RhdGVFbnRyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgY29uc3Qgc3NyZXN1bHQgPSBuZXcgVWlBcHBDb25maWcoKS5kZXNlcmlhbGl6ZShKU09OLnBhcnNlKHZhbHVlLnNoYXJlZFN0YXRlRW50cmllc1swXS5jb250ZW50Lmpzb24pKTtcbiAgICAgICAgICAgICAgc3NyZXN1bHQuaWQgPSB2YWx1ZS5zaGFyZWRTdGF0ZUVudHJpZXNbMF0uaWQ7XG4gICAgICAgICAgICAgIHJldHVybiBzc3Jlc3VsdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICApO1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZVVpQXBwQ29uZmlnKHNhbmRib3hJZDogbnVtYmVyLCB1aUFwcENvbmZpZzogVWlBcHBDb25maWcsIHVpQXBwSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8c3RyaW5nPiB7XG4gICAgY29uc3Qgc3NOYW1lID0gdWlBcHBJZCArICcuY29uZmlnLnRpYmNvbGFicy5jbGllbnQuY29udGV4dC5QVUJMSUMnO1xuICAgIGNvbnN0IGNvbnRlbnQ6IFNoYXJlZFN0YXRlQ29udGVudCA9IG5ldyBTaGFyZWRTdGF0ZUNvbnRlbnQoKTtcbiAgICBjb250ZW50Lmpzb24gPSBUY0NvcmVDb21tb25GdW5jdGlvbnMuZXNjYXBlU3RyaW5nKEpTT04uc3RyaW5naWZ5KHVpQXBwQ29uZmlnKSk7XG4gICAgcmV0dXJuIHRoaXMuY3JlYXRlU2hhcmVkU3RhdGUoc3NOYW1lLCAnUFVCTElDJywgJycsIHNhbmRib3hJZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGVudClcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAodmFsdWUgPT4gdmFsdWUpXG4gICAgICApO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZVVpQXBwQ29uZmlnKHNhbmRib3hJZDogbnVtYmVyLCB1aUFwcENvbmZpZzogVWlBcHBDb25maWcsIHVpQXBwSWQ6IHN0cmluZywgaWQ6IHN0cmluZyk6IE9ic2VydmFibGU8VWlBcHBDb25maWc+IHtcbiAgICBjb25zdCBzc05hbWUgPSB1aUFwcElkICsgJy5jb25maWcudGliY29sYWJzLmNsaWVudC5jb250ZXh0LlBVQkxJQyc7XG4gICAgY29uc3QgY29udGVudDogU2hhcmVkU3RhdGVDb250ZW50ID0gbmV3IFNoYXJlZFN0YXRlQ29udGVudCgpO1xuICAgIGNvbnRlbnQuanNvbiA9IFRjQ29yZUNvbW1vbkZ1bmN0aW9ucy5lc2NhcGVTdHJpbmcoSlNPTi5zdHJpbmdpZnkodWlBcHBDb25maWcpKTtcbiAgICBjb25zdCBlbnRyeTogU2hhcmVkU3RhdGVFbnRyeSA9IG5ldyBTaGFyZWRTdGF0ZUVudHJ5KCk7XG4gICAgZW50cnkuY29udGVudCA9IGNvbnRlbnQ7XG4gICAgZW50cnkuc2FuZGJveElkID0gc2FuZGJveElkO1xuICAgIGVudHJ5Lm5hbWUgPSBzc05hbWU7XG4gICAgZW50cnkudHlwZSA9ICdQVUJMSUMnO1xuICAgIGVudHJ5LmlkID0gaWQ7XG4gICAgY29uc3Qgc3NMaXN0OiBTaGFyZWRTdGF0ZUxpc3QgPSBuZXcgU2hhcmVkU3RhdGVMaXN0KCk7XG4gICAgc3NMaXN0LnNoYXJlZFN0YXRlRW50cmllcyA9IFtdO1xuICAgIHNzTGlzdC5zaGFyZWRTdGF0ZUVudHJpZXMucHVzaChlbnRyeSk7XG4gICAgcmV0dXJuIHRoaXMudXBkYXRlU2hhcmVkU3RhdGUoc3NMaXN0LnNoYXJlZFN0YXRlRW50cmllcylcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAodmFsdWUgPT4ge1xuICAgICAgICAgIHJldHVybiBuZXcgVWlBcHBDb25maWcoKS5kZXNlcmlhbGl6ZSgoSlNPTi5wYXJzZSh2YWx1ZS5zaGFyZWRTdGF0ZUVudHJpZXNbMF0uY29udGVudC5qc29uKSkpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBkZWxldGVTaGFyZWRTdGF0ZShpZDogbnVtYmVyKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICBjb25zdCB1cmwgPSAnL2NsaWVudHN0YXRlL3YxL3N0YXRlcy8nICsgaWQ7XG4gICAgcmV0dXJuIHRoaXMuaHR0cC5kZWxldGUodXJsKVxuICAgICAgLnBpcGUoXG4gICAgICAgIHRhcCh2YWwgPT4gc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgndGNzVGltZXN0YW1wJywgRGF0ZS5ub3coKS50b1N0cmluZygpKSksXG4gICAgICAgIG1hcChyZXN1bHQgPT4gJ3N1Y2Nlc3MnKVxuICAgICAgKTtcbiAgfVxuXG59XG4iXX0=