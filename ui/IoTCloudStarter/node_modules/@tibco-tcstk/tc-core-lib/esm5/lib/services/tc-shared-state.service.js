/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @ngdoc component
 * @name tcSharedStateService
 *
 * @description
 *
 * tcSharedStateService provides services for managing stored client config using the Tibco Live Apps shared state service.
 *
 * Although this is a live apps service rather than a Tibco Subscriber Cloud Service it is inside the core project since it will
 * be used for all applications to store configuration information.
 *
 * By hosting this service in the core we can avoid a circular dependency to the live apps library.
 *
 * Note: This service will use the http caching interceptor for 'GET' calls based on passed parameters.
 *
 *
 */
import { Injectable } from '@angular/core';
import { SharedStateContent, SharedStateEntry, SharedStateList } from '../models/tc-shared-state';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map, tap } from 'rxjs/operators';
import { Location } from '@angular/common';
import { UiAppConfig } from '../models/tc-app-config';
import { TcCoreCommonFunctions } from '../common/tc-core-common-functions';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/common";
var TcSharedStateService = /** @class */ (function () {
    function TcSharedStateService(http, location) {
        this.http = http;
        this.location = location;
    }
    /**
     * @param {?} name
     * @param {?} type
     * @param {?} description
     * @param {?} sandboxId
     * @param {?} attributes
     * @param {?} roles
     * @param {?} links
     * @param {?} content
     * @return {?}
     */
    TcSharedStateService.prototype.createSharedState = /**
     * @param {?} name
     * @param {?} type
     * @param {?} description
     * @param {?} sandboxId
     * @param {?} attributes
     * @param {?} roles
     * @param {?} links
     * @param {?} content
     * @return {?}
     */
    function (name, type, description, sandboxId, attributes, roles, links, content) {
        /** @type {?} */
        var url = '/clientstate/v1/states';
        /** @type {?} */
        var body = {
            'name': name,
            'type': type,
            'description': description,
            'sandboxId': sandboxId,
            'attributes': attributes,
            'roles': roles,
            'links': links,
            content: content
        };
        /** @type {?} */
        var bodyStr = JSON.stringify(body);
        /** @type {?} */
        var headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.post(url, bodyStr, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            return result.toString();
        })));
    };
    /**
     * @param {?} sharedStateList
     * @return {?}
     */
    TcSharedStateService.prototype.updateSharedState = /**
     * @param {?} sharedStateList
     * @return {?}
     */
    function (sharedStateList) {
        /** @type {?} */
        var url = '/clientstate/v1/states';
        /** @type {?} */
        var body = sharedStateList;
        /** @type {?} */
        var bodyStr = JSON.stringify(body);
        /** @type {?} */
        var headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.put(url, bodyStr, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} updatedSharedStateList
         * @return {?}
         */
        function (updatedSharedStateList) { return new SharedStateList().deserialize(updatedSharedStateList); })));
    };
    /**
     * @param {?} name
     * @param {?} type
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    TcSharedStateService.prototype.getSharedState = /**
     * @param {?} name
     * @param {?} type
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    function (name, type, useCache, flushCache) {
        /** @type {?} */
        var url = '/clientstate/v1/states?$filter=type=' + type
            + ' and name=\'' + name + '\'';
        /** @type {?} */
        var options = {}
        // set headers when caching required
        ;
        // set headers when caching required
        /** @type {?} */
        var headers = new HttpHeaders();
        if (useCache) {
            headers = headers.set('cacheResponse', 'true');
        }
        if (flushCache) {
            headers = headers.set('flushCache', 'true');
        }
        options = { headers: headers };
        return this.http.get(url, options)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} sharedStateList
         * @return {?}
         */
        function (sharedStateList) { return new SharedStateList().deserialize(sharedStateList); })));
    };
    /* Ui App Config */
    /* Ui App Config */
    /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    TcSharedStateService.prototype.getUiAppConfig = /* Ui App Config */
    /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    function (uiAppId, useCache, flushCache) {
        // if useCache is false this will trigger the service to update the cached version with latest
        /** @type {?} */
        var ssName = uiAppId + '.config.tibcolabs.client.context.PUBLIC';
        return this.getSharedState(ssName, 'PUBLIC', useCache, flushCache)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value.sharedStateEntries.length > 0) {
                /** @type {?} */
                var ssresult = new UiAppConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));
                ssresult.id = value.sharedStateEntries[0].id;
                return ssresult;
            }
            else {
                return undefined;
            }
        })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} uiAppConfig
     * @param {?} uiAppId
     * @return {?}
     */
    TcSharedStateService.prototype.createUiAppConfig = /**
     * @param {?} sandboxId
     * @param {?} uiAppConfig
     * @param {?} uiAppId
     * @return {?}
     */
    function (sandboxId, uiAppConfig, uiAppId) {
        /** @type {?} */
        var ssName = uiAppId + '.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        var content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(uiAppConfig));
        return this.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value; })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} uiAppConfig
     * @param {?} uiAppId
     * @param {?} id
     * @return {?}
     */
    TcSharedStateService.prototype.updateUiAppConfig = /**
     * @param {?} sandboxId
     * @param {?} uiAppConfig
     * @param {?} uiAppId
     * @param {?} id
     * @return {?}
     */
    function (sandboxId, uiAppConfig, uiAppId, id) {
        /** @type {?} */
        var ssName = uiAppId + '.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        var content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(uiAppConfig));
        /** @type {?} */
        var entry = new SharedStateEntry();
        entry.content = content;
        entry.sandboxId = sandboxId;
        entry.name = ssName;
        entry.type = 'PUBLIC';
        entry.id = id;
        /** @type {?} */
        var ssList = new SharedStateList();
        ssList.sharedStateEntries = [];
        ssList.sharedStateEntries.push(entry);
        return this.updateSharedState(ssList.sharedStateEntries)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            return new UiAppConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));
        })));
    };
    TcSharedStateService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TcSharedStateService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Location }
    ]; };
    /** @nocollapse */ TcSharedStateService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcSharedStateService_Factory() { return new TcSharedStateService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Location)); }, token: TcSharedStateService, providedIn: "root" });
    return TcSharedStateService;
}());
export { TcSharedStateService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcSharedStateService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TcSharedStateService.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,