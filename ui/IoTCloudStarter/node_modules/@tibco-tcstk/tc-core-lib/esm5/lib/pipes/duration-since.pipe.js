/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// This pipe will display a date based on how long ago it was: eg. 5 mins ago, 1 hour ago, just now etc etc
import { Pipe } from '@angular/core';
var DurationSincePipe = /** @class */ (function () {
    function DurationSincePipe() {
    }
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    DurationSincePipe.prototype.transform = /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    function (value, args) {
        /** @type {?} */
        var seconds = Math.floor((+new Date() - +new Date(value)) / 1000);
        /** @type {?} */
        var interval = Math.floor(seconds / 31536000);
        // years
        if (interval >= 1) {
            if (interval === 1) {
                return interval + ' year ago';
            }
            else {
                return interval + ' years ago';
            }
        }
        // months
        interval = Math.floor(seconds / 2592000);
        if (interval >= 1) {
            if (interval === 1) {
                return interval + ' month ago';
            }
            else {
                return interval + ' months ago';
            }
        }
        // weeks
        interval = Math.floor(seconds / 604800);
        if (interval >= 1) {
            if (interval === 1) {
                return interval + ' week ago';
            }
            else {
                return interval + ' weeks ago';
            }
        }
        // days
        interval = Math.floor(seconds / 86400);
        if (interval >= 1) {
            if (interval === 1) {
                return ' yesterday';
            }
            else {
                return interval + ' days ago';
            }
        }
        // hours
        interval = Math.floor(seconds / 3600);
        if (interval >= 1) {
            if (interval === 1) {
                return interval + ' hour ago';
            }
            else {
                return interval + ' hours ago';
            }
        }
        // minutes
        interval = Math.floor(seconds / 60);
        if (interval >= 1) {
            if (interval === 1) {
                return interval + ' minute ago';
            }
            else {
                return interval + ' minutes ago';
            }
        }
        return 'Just now';
    };
    DurationSincePipe.decorators = [
        { type: Pipe, args: [{
                    name: 'durationSince'
                },] }
    ];
    return DurationSincePipe;
}());
export { DurationSincePipe };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVyYXRpb24tc2luY2UucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9waXBlcy9kdXJhdGlvbi1zaW5jZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFFcEQ7SUFBQTtJQWlFQSxDQUFDOzs7Ozs7SUE1REMscUNBQVM7Ozs7O0lBQVQsVUFBVSxLQUFhLEVBQUUsSUFBVTs7WUFDM0IsT0FBTyxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7WUFDdkUsUUFBUSxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztRQUNyRCxRQUFRO1FBQ1IsSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO1lBQ2pCLElBQUksUUFBUSxLQUFLLENBQUMsRUFBRTtnQkFDbEIsT0FBTyxRQUFRLEdBQUcsV0FBVyxDQUFDO2FBQy9CO2lCQUFNO2dCQUNMLE9BQU8sUUFBUSxHQUFHLFlBQVksQ0FBQzthQUNoQztTQUNGO1FBQ0QsU0FBUztRQUNULFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQztRQUN6QyxJQUFJLFFBQVEsSUFBSSxDQUFDLEVBQUU7WUFDakIsSUFBSSxRQUFRLEtBQUssQ0FBQyxFQUFFO2dCQUNsQixPQUFPLFFBQVEsR0FBRyxZQUFZLENBQUM7YUFDaEM7aUJBQU07Z0JBQ0wsT0FBTyxRQUFRLEdBQUcsYUFBYSxDQUFDO2FBQ2pDO1NBQ0Y7UUFDRCxRQUFRO1FBQ1IsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQ3hDLElBQUksUUFBUSxJQUFJLENBQUMsRUFBRTtZQUNqQixJQUFJLFFBQVEsS0FBSyxDQUFDLEVBQUU7Z0JBQ2xCLE9BQU8sUUFBUSxHQUFHLFdBQVcsQ0FBQzthQUMvQjtpQkFBTTtnQkFDTCxPQUFPLFFBQVEsR0FBRyxZQUFZLENBQUM7YUFDaEM7U0FDRjtRQUNELE9BQU87UUFDUCxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDdkMsSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO1lBQ2pCLElBQUksUUFBUSxLQUFLLENBQUMsRUFBRTtnQkFDbEIsT0FBTyxZQUFZLENBQUM7YUFDckI7aUJBQU07Z0JBQ0wsT0FBTyxRQUFRLEdBQUcsV0FBVyxDQUFDO2FBQy9CO1NBQ0Y7UUFDRCxRQUFRO1FBQ1IsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3RDLElBQUksUUFBUSxJQUFJLENBQUMsRUFBRTtZQUNqQixJQUFJLFFBQVEsS0FBSyxDQUFDLEVBQUU7Z0JBQ2xCLE9BQU8sUUFBUSxHQUFHLFdBQVcsQ0FBQzthQUMvQjtpQkFBTTtnQkFDTCxPQUFPLFFBQVEsR0FBRyxZQUFZLENBQUM7YUFDaEM7U0FDRjtRQUNELFVBQVU7UUFDVixRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDcEMsSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO1lBQ2pCLElBQUksUUFBUSxLQUFLLENBQUMsRUFBRTtnQkFDbEIsT0FBTyxRQUFRLEdBQUcsYUFBYSxDQUFDO2FBQ2pDO2lCQUFNO2dCQUNMLE9BQU8sUUFBUSxHQUFHLGNBQWMsQ0FBQzthQUNsQztTQUNGO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQzs7Z0JBL0RGLElBQUksU0FBQztvQkFDSixJQUFJLEVBQUUsZUFBZTtpQkFDdEI7O0lBK0RELHdCQUFDO0NBQUEsQUFqRUQsSUFpRUM7U0E5RFksaUJBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhpcyBwaXBlIHdpbGwgZGlzcGxheSBhIGRhdGUgYmFzZWQgb24gaG93IGxvbmcgYWdvIGl0IHdhczogZWcuIDUgbWlucyBhZ28sIDEgaG91ciBhZ28sIGp1c3Qgbm93IGV0YyBldGNcblxuaW1wb3J0IHsgUGlwZSwgUGlwZVRyYW5zZm9ybSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdkdXJhdGlvblNpbmNlJ1xufSlcbmV4cG9ydCBjbGFzcyBEdXJhdGlvblNpbmNlUGlwZSBpbXBsZW1lbnRzIFBpcGVUcmFuc2Zvcm0ge1xuXG4gIHRyYW5zZm9ybSh2YWx1ZTogc3RyaW5nLCBhcmdzPzogYW55KTogYW55IHtcbiAgICBjb25zdCBzZWNvbmRzOiBudW1iZXIgPSBNYXRoLmZsb29yKCgrbmV3IERhdGUoKSAtICtuZXcgRGF0ZSh2YWx1ZSkpIC8gMTAwMCk7XG4gICAgbGV0IGludGVydmFsOiBudW1iZXIgPSBNYXRoLmZsb29yKHNlY29uZHMgLyAzMTUzNjAwMCk7XG4gICAgLy8geWVhcnNcbiAgICBpZiAoaW50ZXJ2YWwgPj0gMSkge1xuICAgICAgaWYgKGludGVydmFsID09PSAxKSB7XG4gICAgICAgIHJldHVybiBpbnRlcnZhbCArICcgeWVhciBhZ28nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGludGVydmFsICsgJyB5ZWFycyBhZ28nO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBtb250aHNcbiAgICBpbnRlcnZhbCA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDI1OTIwMDApO1xuICAgIGlmIChpbnRlcnZhbCA+PSAxKSB7XG4gICAgICBpZiAoaW50ZXJ2YWwgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGludGVydmFsICsgJyBtb250aCBhZ28nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGludGVydmFsICsgJyBtb250aHMgYWdvJztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gd2Vla3NcbiAgICBpbnRlcnZhbCA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwNDgwMCk7XG4gICAgaWYgKGludGVydmFsID49IDEpIHtcbiAgICAgIGlmIChpbnRlcnZhbCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gaW50ZXJ2YWwgKyAnIHdlZWsgYWdvJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnRlcnZhbCArICcgd2Vla3MgYWdvJztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZGF5c1xuICAgIGludGVydmFsID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gODY0MDApO1xuICAgIGlmIChpbnRlcnZhbCA+PSAxKSB7XG4gICAgICBpZiAoaW50ZXJ2YWwgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuICcgeWVzdGVyZGF5JztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnRlcnZhbCArICcgZGF5cyBhZ28nO1xuICAgICAgfVxuICAgIH1cbiAgICAvLyBob3Vyc1xuICAgIGludGVydmFsID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gMzYwMCk7XG4gICAgaWYgKGludGVydmFsID49IDEpIHtcbiAgICAgIGlmIChpbnRlcnZhbCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gaW50ZXJ2YWwgKyAnIGhvdXIgYWdvJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnRlcnZhbCArICcgaG91cnMgYWdvJztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gbWludXRlc1xuICAgIGludGVydmFsID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApO1xuICAgIGlmIChpbnRlcnZhbCA+PSAxKSB7XG4gICAgICBpZiAoaW50ZXJ2YWwgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGludGVydmFsICsgJyBtaW51dGUgYWdvJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnRlcnZhbCArICcgbWludXRlcyBhZ28nO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiAnSnVzdCBub3cnO1xuICB9XG5cbn1cbiJdfQ==