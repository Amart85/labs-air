/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* used to highlight search results in a list where search term matches
 *
 * original source from https://gist.github.com/adamrecsko/0f28f474eca63e0279455476cc11eca7
 * post by ankitgrover
*/
import { Pipe } from '@angular/core';
var HighlightPipe = /** @class */ (function () {
    function HighlightPipe() {
    }
    /**
     * @param {?} data
     * @param {?} highlightText
     * @param {?=} option
     * @param {?=} caseSensitive
     * @param {?=} highlightStyleName
     * @return {?}
     */
    HighlightPipe.prototype.transform = /**
     * @param {?} data
     * @param {?} highlightText
     * @param {?=} option
     * @param {?=} caseSensitive
     * @param {?=} highlightStyleName
     * @return {?}
     */
    function (data, highlightText, option, caseSensitive, highlightStyleName) {
        if (option === void 0) { option = 'Single-And-StartsWith-Match'; }
        if (caseSensitive === void 0) { caseSensitive = false; }
        if (highlightStyleName === void 0) { highlightStyleName = 'search-highlight'; }
        if (highlightText && data && option) {
            /** @type {?} */
            var regex = '';
            /** @type {?} */
            var caseFlag = !caseSensitive ? 'i' : '';
            switch (option) {
                case 'Single-Match': {
                    regex = new RegExp(highlightText, caseFlag);
                    break;
                }
                case 'Single-And-StartsWith-Match': {
                    regex = new RegExp('^' + highlightText, caseFlag);
                    break;
                }
                case 'Multi-Match': {
                    regex = new RegExp(highlightText, 'g' + caseFlag);
                    break;
                }
                default: {
                    // default will be a global case-insensitive match
                    regex = new RegExp(highlightText, 'gi');
                }
            }
            return data.replace(regex, (/**
             * @param {?} match
             * @return {?}
             */
            function (match) { return "<span class=\"" + highlightStyleName + "\">" + match + "</span>"; }));
        }
        else {
            return data;
        }
    };
    /* use this for single match search */
    HighlightPipe.SINGLE_MATCH = 'Single-Match';
    /* use this for single match search with a restriction that target should start with search string */
    HighlightPipe.SINGLE_AND_STARTS_WITH_MATCH = 'Single-And-StartsWith-Match';
    /* use this for global search */
    HighlightPipe.MULTI_MATCH = 'Multi-Match';
    HighlightPipe.decorators = [
        { type: Pipe, args: [{
                    name: 'highlight'
                },] }
    ];
    return HighlightPipe;
}());
export { HighlightPipe };
if (false) {
    /** @type {?} */
    HighlightPipe.SINGLE_MATCH;
    /** @type {?} */
    HighlightPipe.SINGLE_AND_STARTS_WITH_MATCH;
    /** @type {?} */
    HighlightPipe.MULTI_MATCH;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtY29yZS1saWIvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvaGlnaGxpZ2h0LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBTUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFHcEQ7SUFBQTtJQTZDQSxDQUFDOzs7Ozs7Ozs7SUFqQ0MsaUNBQVM7Ozs7Ozs7O0lBQVQsVUFBVSxJQUFZLEVBQ1osYUFBcUIsRUFDckIsTUFBOEMsRUFDOUMsYUFBOEIsRUFDOUIsa0JBQStDO1FBRi9DLHVCQUFBLEVBQUEsc0NBQThDO1FBQzlDLDhCQUFBLEVBQUEscUJBQThCO1FBQzlCLG1DQUFBLEVBQUEsdUNBQStDO1FBQ3ZELElBQUksYUFBYSxJQUFJLElBQUksSUFBSSxNQUFNLEVBQUU7O2dCQUMvQixLQUFLLEdBQVEsRUFBRTs7Z0JBQ2IsUUFBUSxHQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDbEQsUUFBUSxNQUFNLEVBQUU7Z0JBQ2QsS0FBSyxjQUFjLENBQUMsQ0FBQztvQkFDbkIsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztvQkFDNUMsTUFBTTtpQkFDUDtnQkFDRCxLQUFLLDZCQUE2QixDQUFDLENBQUM7b0JBQ2xDLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO29CQUNsRCxNQUFNO2lCQUNQO2dCQUNELEtBQUssYUFBYSxDQUFDLENBQUM7b0JBQ2xCLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxhQUFhLEVBQUUsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDO29CQUNsRCxNQUFNO2lCQUNQO2dCQUNELE9BQU8sQ0FBQyxDQUFDO29CQUNQLGtEQUFrRDtvQkFDbEQsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDekM7YUFDRjtZQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLOzs7O1lBQUUsVUFBQyxLQUFLLElBQUssT0FBQSxtQkFBZ0Isa0JBQWtCLFdBQUssS0FBSyxZQUFTLEVBQXJELENBQXFELEVBQUMsQ0FBQztTQUU5RjthQUFNO1lBQ0wsT0FBTyxJQUFJLENBQUM7U0FDYjtJQUNILENBQUM7O0lBckNNLDBCQUFZLEdBQUcsY0FBYyxDQUFDOztJQUU5QiwwQ0FBNEIsR0FBRyw2QkFBNkIsQ0FBQzs7SUFFN0QseUJBQVcsR0FBRyxhQUFhLENBQUM7O2dCQVZwQyxJQUFJLFNBQUM7b0JBQ0osSUFBSSxFQUFFLFdBQVc7aUJBQ2xCOztJQTJDRCxvQkFBQztDQUFBLEFBN0NELElBNkNDO1NBMUNZLGFBQWE7OztJQUd4QiwyQkFBcUM7O0lBRXJDLDJDQUFvRTs7SUFFcEUsMEJBQW1DIiwic291cmNlc0NvbnRlbnQiOlsiLyogdXNlZCB0byBoaWdobGlnaHQgc2VhcmNoIHJlc3VsdHMgaW4gYSBsaXN0IHdoZXJlIHNlYXJjaCB0ZXJtIG1hdGNoZXNcbiAqXG4gKiBvcmlnaW5hbCBzb3VyY2UgZnJvbSBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9hZGFtcmVjc2tvLzBmMjhmNDc0ZWNhNjNlMDI3OTQ1NTQ3NmNjMTFlY2E3XG4gKiBwb3N0IGJ5IGFua2l0Z3JvdmVyXG4qL1xuXG5pbXBvcnQgeyBQaXBlLCBQaXBlVHJhbnNmb3JtIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1NhZmVIdG1sfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcblxuQFBpcGUoe1xuICBuYW1lOiAnaGlnaGxpZ2h0J1xufSlcbmV4cG9ydCBjbGFzcyBIaWdobGlnaHRQaXBlIGltcGxlbWVudHMgUGlwZVRyYW5zZm9ybSB7XG5cbiAgLyogdXNlIHRoaXMgZm9yIHNpbmdsZSBtYXRjaCBzZWFyY2ggKi9cbiAgc3RhdGljIFNJTkdMRV9NQVRDSCA9ICdTaW5nbGUtTWF0Y2gnO1xuICAvKiB1c2UgdGhpcyBmb3Igc2luZ2xlIG1hdGNoIHNlYXJjaCB3aXRoIGEgcmVzdHJpY3Rpb24gdGhhdCB0YXJnZXQgc2hvdWxkIHN0YXJ0IHdpdGggc2VhcmNoIHN0cmluZyAqL1xuICBzdGF0aWMgU0lOR0xFX0FORF9TVEFSVFNfV0lUSF9NQVRDSCA9ICdTaW5nbGUtQW5kLVN0YXJ0c1dpdGgtTWF0Y2gnO1xuICAvKiB1c2UgdGhpcyBmb3IgZ2xvYmFsIHNlYXJjaCAqL1xuICBzdGF0aWMgTVVMVElfTUFUQ0ggPSAnTXVsdGktTWF0Y2gnO1xuXG4gIHRyYW5zZm9ybShkYXRhOiBzdHJpbmcsXG4gICAgICAgICAgICBoaWdobGlnaHRUZXh0OiBzdHJpbmcsXG4gICAgICAgICAgICBvcHRpb246IHN0cmluZyA9ICdTaW5nbGUtQW5kLVN0YXJ0c1dpdGgtTWF0Y2gnLFxuICAgICAgICAgICAgY2FzZVNlbnNpdGl2ZTogYm9vbGVhbiA9IGZhbHNlLFxuICAgICAgICAgICAgaGlnaGxpZ2h0U3R5bGVOYW1lOiBzdHJpbmcgPSAnc2VhcmNoLWhpZ2hsaWdodCcpOiBTYWZlSHRtbCB7XG4gICAgaWYgKGhpZ2hsaWdodFRleHQgJiYgZGF0YSAmJiBvcHRpb24pIHtcbiAgICAgIGxldCByZWdleDogYW55ID0gJyc7XG4gICAgICBjb25zdCBjYXNlRmxhZzogc3RyaW5nID0gIWNhc2VTZW5zaXRpdmUgPyAnaScgOiAnJztcbiAgICAgIHN3aXRjaCAob3B0aW9uKSB7XG4gICAgICAgIGNhc2UgJ1NpbmdsZS1NYXRjaCc6IHtcbiAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAoaGlnaGxpZ2h0VGV4dCwgY2FzZUZsYWcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ1NpbmdsZS1BbmQtU3RhcnRzV2l0aC1NYXRjaCc6IHtcbiAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAoJ14nICsgaGlnaGxpZ2h0VGV4dCwgY2FzZUZsYWcpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICAgIGNhc2UgJ011bHRpLU1hdGNoJzoge1xuICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChoaWdobGlnaHRUZXh0LCAnZycgKyBjYXNlRmxhZyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDoge1xuICAgICAgICAgIC8vIGRlZmF1bHQgd2lsbCBiZSBhIGdsb2JhbCBjYXNlLWluc2Vuc2l0aXZlIG1hdGNoXG4gICAgICAgICAgcmVnZXggPSBuZXcgUmVnRXhwKGhpZ2hsaWdodFRleHQsICdnaScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZGF0YS5yZXBsYWNlKHJlZ2V4LCAobWF0Y2gpID0+IGA8c3BhbiBjbGFzcz1cIiR7aGlnaGxpZ2h0U3R5bGVOYW1lfVwiPiR7bWF0Y2h9PC9zcGFuPmApO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH1cbiAgfVxuXG59XG4iXX0=