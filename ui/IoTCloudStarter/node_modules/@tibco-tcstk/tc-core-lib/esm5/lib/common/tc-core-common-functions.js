/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HashLocationStrategy } from '@angular/common';
// @dynamic
var TcCoreCommonFunctions = /** @class */ (function () {
    function TcCoreCommonFunctions() {
    }
    /**
     * @param {?} text
     * @return {?}
     */
    TcCoreCommonFunctions.escapeString = /**
     * @param {?} text
     * @return {?}
     */
    function (text) {
        return text.replace(/"/g, '\"');
    };
    /**
     * @param {?} size
     * @return {?}
     */
    TcCoreCommonFunctions.fileSizeToHuman = /**
     * @param {?} size
     * @return {?}
     */
    function (size) {
        /** @type {?} */
        var e = (Math.log(size) / Math.log(1e3)) | 0;
        return +(size / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';
    };
    /**
     * @param {?} str
     * @return {?}
     */
    TcCoreCommonFunctions.camelCaseToWords = /**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var re = str.replace(/([a-z])([A-Z])/g, '$1 $2')
            .replace(/([A-Z])([a-z])/g, ' $1$2')
            .replace(/\ +/g, ' ');
        return re;
    };
    /**
     * @param {?} array
     * @return {?}
     */
    TcCoreCommonFunctions.convertToJSON = /**
     * @param {?} array
     * @return {?}
     */
    function (array) {
        /** @type {?} */
        var objArray = [];
        for (var i = 1; i < array.length; i++) {
            objArray[i - 1] = {};
            for (var k = 0; k < array[0].length && k < array[i].length; k++) {
                /** @type {?} */
                var key = array[0][k];
                objArray[i - 1][key] = array[i][k];
            }
        }
        return objArray;
    };
    /**
     * @param {?} array
     * @param {?} arrayLength
     * @return {?}
     */
    TcCoreCommonFunctions.transposeArray = /**
     * @param {?} array
     * @param {?} arrayLength
     * @return {?}
     */
    function (array, arrayLength) {
        // console.log('transposing array) arrayLength: ' + arrayLength );
        /** @type {?} */
        var newArray = [];
        for (var i = 0; i < arrayLength; i++) {
            newArray.push([]);
        }
        for (var i = 0; i < array.length; i++) {
            for (var j = 0; j < arrayLength; j++) {
                newArray[j].push(array[i][j]);
            }
        }
        return newArray;
    };
    TcCoreCommonFunctions.camelize = (/**
     * @param {?} str
     * @return {?}
     */
    function (str) {
        /** @type {?} */
        var newStr = '';
        /** @type {?} */
        var newArr = [];
        if (str.indexOf('-') !== -1) {
            newArr = str.split('-');
            for (var i = 0; i < newArr.length; i++) {
                newArr[i] = newArr[i].charAt(0).toUpperCase() + newArr[i].substr(1);
            }
            newStr = newArr.join(' ');
        }
        return newStr;
    });
    TcCoreCommonFunctions.prepareUrlForNonStaticResource = (/**
     * @param {?} location
     * @param {?} str
     * @return {?}
     */
    function (location, str) {
        // @ts-ignore
        if (location._platformStrategy instanceof HashLocationStrategy) {
            return str;
        }
        else {
            return str;
        }
    });
    TcCoreCommonFunctions.prepareUrlForStaticResource = (/**
     * @param {?} location
     * @param {?} str
     * @return {?}
     */
    function (location, str) {
        // @ts-ignore
        if (location._platformStrategy instanceof HashLocationStrategy) {
            return str;
        }
        else {
            return location.prepareExternalUrl(str);
        }
    });
    return TcCoreCommonFunctions;
}());
export { TcCoreCommonFunctions };
if (false) {
    /** @type {?} */
    TcCoreCommonFunctions.camelize;
    /** @type {?} */
    TcCoreCommonFunctions.prepareUrlForNonStaticResource;
    /** @type {?} */
    TcCoreCommonFunctions.prepareUrlForStaticResource;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtY29yZS1jb21tb24tZnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi90Yy1jb3JlLWNvbW1vbi1mdW5jdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxvQkFBb0IsRUFBVyxNQUFNLGlCQUFpQixDQUFDOztBQUcvRDtJQUFBO0lBNkVBLENBQUM7Ozs7O0lBMUVlLGtDQUFZOzs7O0lBQTFCLFVBQTJCLElBQUk7UUFDN0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUVhLHFDQUFlOzs7O0lBQTdCLFVBQThCLElBQUk7O1lBQzFCLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDOUMsT0FBTyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLFVBQVUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLEdBQUcsR0FBRyxDQUFDO0lBQ3ZGLENBQUM7Ozs7O0lBRWEsc0NBQWdCOzs7O0lBQTlCLFVBQStCLEdBQUc7O1lBQzFCLEVBQUUsR0FBSSxHQUFHLENBQUMsT0FBTyxDQUFDLGlCQUFpQixFQUFFLE9BQU8sQ0FBQzthQUNoRCxPQUFPLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDO2FBQ25DLE9BQU8sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDO1FBQ3ZCLE9BQU8sRUFBRSxDQUFDO0lBQ1osQ0FBQzs7Ozs7SUFFYSxtQ0FBYTs7OztJQUEzQixV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QyxHQUFHLENBQUMsQ0FBQztTQUN6QztJQUNILENBQUMsRUFBQTtJQUVILDRCQUFDO0NBQUEsQUE3RUQsSUE2RUM7U0E3RVkscUJBQXFCOzs7SUE2Q2hDLCtCQVlDOztJQUVELHFEQU9DOztJQUVELGtEQU9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtIYXNoTG9jYXRpb25TdHJhdGVneSwgTG9jYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbi8vIEBkeW5hbWljXG5leHBvcnQgY2xhc3MgVGNDb3JlQ29tbW9uRnVuY3Rpb25zIHtcblxuXG4gIHB1YmxpYyBzdGF0aWMgZXNjYXBlU3RyaW5nKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKC9cIi9nLCAnXFxcIicpO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBmaWxlU2l6ZVRvSHVtYW4oc2l6ZSkge1xuICAgIGNvbnN0IGUgPSAoTWF0aC5sb2coc2l6ZSkgLyBNYXRoLmxvZygxZTMpKSB8IDA7XG4gICAgcmV0dXJuICsoc2l6ZSAvIE1hdGgucG93KDFlMywgZSkpLnRvRml4ZWQoMikgKyAnICcgKyAoJ2tNR1RQRVpZJ1tlIC0gMV0gfHwgJycpICsgJ0InO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBjYW1lbENhc2VUb1dvcmRzKHN0cikge1xuICAgIGNvbnN0IHJlID0gIHN0ci5yZXBsYWNlKC8oW2Etel0pKFtBLVpdKS9nLCAnJDEgJDInKVxuICAgICAgLnJlcGxhY2UoLyhbQS1aXSkoW2Etel0pL2csICcgJDEkMicpXG4gICAgICAucmVwbGFjZSgvXFwgKy9nLCAnICcpO1xuICAgIHJldHVybiByZTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY29udmVydFRvSlNPTihhcnJheSkge1xuICAgIGNvbnN0IG9iakFycmF5ID0gW107XG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xuICAgICAgb2JqQXJyYXlbaSAtIDFdID0ge307XG4gICAgICBmb3IgKGxldCBrID0gMDsgayA8IGFycmF5WzBdLmxlbmd0aCAmJiBrIDwgYXJyYXlbaV0ubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgY29uc3Qga2V5ID0gYXJyYXlbMF1ba107XG4gICAgICAgIG9iakFycmF5W2kgLSAxXVtrZXldID0gYXJyYXlbaV1ba107XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBvYmpBcnJheTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgdHJhbnNwb3NlQXJyYXkoYXJyYXksIGFycmF5TGVuZ3RoKSB7XG4gICAgLy8gY29uc29sZS5sb2coJ3RyYW5zcG9zaW5nIGFycmF5KSBhcnJheUxlbmd0aDogJyArIGFycmF5TGVuZ3RoICk7XG4gICAgY29uc3QgbmV3QXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5TGVuZ3RoOyBpKyspIHtcbiAgICAgIG5ld0FycmF5LnB1c2goW10pO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IGFycmF5TGVuZ3RoOyBqKyspIHtcbiAgICAgICAgbmV3QXJyYXlbal0ucHVzaChhcnJheVtpXVtqXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBuZXdBcnJheTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgY2FtZWxpemUgPSAoc3RyOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgIGxldCBuZXdTdHIgPSAnJztcbiAgICBsZXQgbmV3QXJyID0gW107XG5cbiAgICBpZiAoc3RyLmluZGV4T2YoJy0nKSAhPT0gLTEpIHtcbiAgICAgIG5ld0FyciA9IHN0ci5zcGxpdCgnLScpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBuZXdBcnIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbmV3QXJyW2ldID0gbmV3QXJyW2ldLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgbmV3QXJyW2ldLnN1YnN0cigxKTtcbiAgICAgIH1cbiAgICAgIG5ld1N0ciA9IG5ld0Fyci5qb2luKCcgJyk7XG4gICAgfVxuICAgIHJldHVybiBuZXdTdHI7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHByZXBhcmVVcmxGb3JOb25TdGF0aWNSZXNvdXJjZSA9IChsb2NhdGlvbjogTG9jYXRpb24sIHN0cjogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKGxvY2F0aW9uLl9wbGF0Zm9ybVN0cmF0ZWd5IGluc3RhbmNlb2YgSGFzaExvY2F0aW9uU3RyYXRlZ3kpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHN0YXRpYyBwcmVwYXJlVXJsRm9yU3RhdGljUmVzb3VyY2UgPSAobG9jYXRpb246IExvY2F0aW9uLCBzdHI6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGlmIChsb2NhdGlvbi5fcGxhdGZvcm1TdHJhdGVneSBpbnN0YW5jZW9mIEhhc2hMb2NhdGlvblN0cmF0ZWd5KSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbG9jYXRpb24ucHJlcGFyZUV4dGVybmFsVXJsKHN0cik7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==