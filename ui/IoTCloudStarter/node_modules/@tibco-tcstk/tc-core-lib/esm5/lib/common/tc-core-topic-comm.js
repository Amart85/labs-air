/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
var MessageTopicService = /** @class */ (function () {
    function MessageTopicService() {
        this.topics = [
            { name: 'sample.topic', subject: new BehaviorSubject('init') }
        ];
        console.log('Topic Message service Created...');
    }
    /**
     * @param {?} name
     * @param {?} message
     * @return {?}
     */
    MessageTopicService.prototype.sendMessage = /**
     * @param {?} name
     * @param {?} message
     * @return {?}
     */
    function (name, message) {
        this.createTopicIfNotExists(name, { text: message });
        this.topics.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.name === name; }))[0].subject.next({ text: message });
    };
    /**
     * @param {?} name
     * @return {?}
     */
    MessageTopicService.prototype.clearMessages = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.createTopicIfNotExists(name, { text: 'init' });
        // this.queues.filter(x => x.name === name)[0].subject.next('init');
    };
    /**
     * @param {?} name
     * @return {?}
     */
    MessageTopicService.prototype.getMessage = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        this.createTopicIfNotExists(name, { text: 'init' });
        return this.topics.filter((/**
         * @param {?} x
         * @return {?}
         */
        function (x) { return x.name === name; }))[0].subject.asObservable();
    };
    /**
     * @param {?} name
     * @param {?} init
     * @return {?}
     */
    MessageTopicService.prototype.createTopicIfNotExists = /**
     * @param {?} name
     * @param {?} init
     * @return {?}
     */
    function (name, init) {
        var e_1, _a;
        /** @type {?} */
        var queueExist = false;
        try {
            for (var _b = tslib_1.__values(this.topics), _c = _b.next(); !_c.done; _c = _b.next()) {
                var q = _c.value;
                if (q.name === name) {
                    // console.log('Queue Exist: ' + q.name);
                    queueExist = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        if (!queueExist) {
            console.log('Creating Topic: ' + name);
            /** @type {?} */
            var tempTopic = { name: name, subject: new BehaviorSubject(init) };
            this.topics.push(tempTopic);
        }
    };
    MessageTopicService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    MessageTopicService.ctorParameters = function () { return []; };
    /** @nocollapse */ MessageTopicService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MessageTopicService_Factory() { return new MessageTopicService(); }, token: MessageTopicService, providedIn: "root" });
    return MessageTopicService;
}());
export { MessageTopicService };
if (false) {
    /** @type {?} */
    MessageTopicService.prototype.topics;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtY29yZS10b3BpYy1jb21tLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi90Yy1jb3JlLXRvcGljLWNvbW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxlQUFlLEVBQWEsTUFBTSxNQUFNLENBQUM7O0FBRWpEO0lBT0U7UUFKQSxXQUFNLEdBQTJEO1lBQy9ELEVBQUMsSUFBSSxFQUFFLGNBQWMsRUFBRSxPQUFPLEVBQUUsSUFBSSxlQUFlLENBQU0sTUFBTSxDQUFDLEVBQUM7U0FDbEUsQ0FBQztRQUdBLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0NBQWtDLENBQUMsQ0FBQztJQUNsRCxDQUFDOzs7Ozs7SUFFRCx5Q0FBVzs7Ozs7SUFBWCxVQUFZLElBQVksRUFBRSxPQUFlO1FBQ3ZDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQztRQUNuRCxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFmLENBQWUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQztJQUM1RSxDQUFDOzs7OztJQUVELDJDQUFhOzs7O0lBQWIsVUFBYyxJQUFZO1FBQ3hCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQztRQUNsRCxvRUFBb0U7SUFDdEUsQ0FBQzs7Ozs7SUFFRCx3Q0FBVTs7OztJQUFWLFVBQVcsSUFBWTtRQUNyQixJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7UUFDbEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07Ozs7UUFBQyxVQUFBLENBQUMsSUFBSSxPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFmLENBQWUsRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxZQUFZLEVBQUUsQ0FBQztJQUM1RSxDQUFDOzs7Ozs7SUFFRCxvREFBc0I7Ozs7O0lBQXRCLFVBQXVCLElBQVksRUFBRyxJQUFJOzs7WUFDcEMsVUFBVSxHQUFHLEtBQUs7O1lBQ3RCLEtBQWdCLElBQUEsS0FBQSxpQkFBQSxJQUFJLENBQUMsTUFBTSxDQUFBLGdCQUFBLDRCQUFFO2dCQUF4QixJQUFNLENBQUMsV0FBQTtnQkFDVixJQUFJLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFFO29CQUNuQix5Q0FBeUM7b0JBQ3pDLFVBQVUsR0FBRyxJQUFJLENBQUM7aUJBQ25CO2FBQ0Y7Ozs7Ozs7OztRQUNELElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDZixPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxDQUFDOztnQkFDakMsU0FBUyxHQUFHLEVBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxlQUFlLENBQU0sSUFBSSxDQUFDLEVBQUM7WUFDdkUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDN0I7SUFDSCxDQUFDOztnQkF2Q0YsVUFBVSxTQUFDLEVBQUMsVUFBVSxFQUFFLE1BQU0sRUFBQzs7Ozs7OEJBSGhDO0NBMkNDLEFBeENELElBd0NDO1NBdkNZLG1CQUFtQjs7O0lBRTlCLHFDQUVFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QmVoYXZpb3JTdWJqZWN0LCBPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgTWVzc2FnZVRvcGljU2VydmljZSB7XG5cbiAgdG9waWNzOiBBcnJheTx7IG5hbWU6IHN0cmluZywgc3ViamVjdDogQmVoYXZpb3JTdWJqZWN0PGFueT4gfT4gPSBbXG4gICAge25hbWU6ICdzYW1wbGUudG9waWMnLCBzdWJqZWN0OiBuZXcgQmVoYXZpb3JTdWJqZWN0PGFueT4oJ2luaXQnKX1cbiAgXTtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBjb25zb2xlLmxvZygnVG9waWMgTWVzc2FnZSBzZXJ2aWNlIENyZWF0ZWQuLi4nKTtcbiAgfVxuXG4gIHNlbmRNZXNzYWdlKG5hbWU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgdGhpcy5jcmVhdGVUb3BpY0lmTm90RXhpc3RzKG5hbWUsIHt0ZXh0OiBtZXNzYWdlfSk7XG4gICAgdGhpcy50b3BpY3MuZmlsdGVyKHggPT4geC5uYW1lID09PSBuYW1lKVswXS5zdWJqZWN0Lm5leHQoe3RleHQ6IG1lc3NhZ2V9KTtcbiAgfVxuXG4gIGNsZWFyTWVzc2FnZXMobmFtZTogc3RyaW5nKSB7XG4gICAgdGhpcy5jcmVhdGVUb3BpY0lmTm90RXhpc3RzKG5hbWUsIHt0ZXh0OiAnaW5pdCd9KTtcbiAgICAvLyB0aGlzLnF1ZXVlcy5maWx0ZXIoeCA9PiB4Lm5hbWUgPT09IG5hbWUpWzBdLnN1YmplY3QubmV4dCgnaW5pdCcpO1xuICB9XG5cbiAgZ2V0TWVzc2FnZShuYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHRoaXMuY3JlYXRlVG9waWNJZk5vdEV4aXN0cyhuYW1lLCB7dGV4dDogJ2luaXQnfSk7XG4gICAgcmV0dXJuIHRoaXMudG9waWNzLmZpbHRlcih4ID0+IHgubmFtZSA9PT0gbmFtZSlbMF0uc3ViamVjdC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIGNyZWF0ZVRvcGljSWZOb3RFeGlzdHMobmFtZTogc3RyaW5nICwgaW5pdCkge1xuICAgIGxldCBxdWV1ZUV4aXN0ID0gZmFsc2U7XG4gICAgZm9yIChjb25zdCBxIG9mIHRoaXMudG9waWNzKSB7XG4gICAgICBpZiAocS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIC8vIGNvbnNvbGUubG9nKCdRdWV1ZSBFeGlzdDogJyArIHEubmFtZSk7XG4gICAgICAgIHF1ZXVlRXhpc3QgPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXF1ZXVlRXhpc3QpIHtcbiAgICAgIGNvbnNvbGUubG9nKCdDcmVhdGluZyBUb3BpYzogJyArIG5hbWUpO1xuICAgICAgY29uc3QgdGVtcFRvcGljID0ge25hbWU6IG5hbWUsIHN1YmplY3Q6IG5ldyBCZWhhdmlvclN1YmplY3Q8YW55Pihpbml0KX07XG4gICAgICB0aGlzLnRvcGljcy5wdXNoKHRlbXBUb3BpYyk7XG4gICAgfVxuICB9XG59XG4iXX0=