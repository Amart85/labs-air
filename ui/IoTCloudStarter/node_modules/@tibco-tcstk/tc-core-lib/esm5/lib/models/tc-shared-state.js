/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* models used by shared state services */
var SharedStateContent = /** @class */ (function () {
    function SharedStateContent() {
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    SharedStateContent.prototype.deserialize = /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    function (input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    };
    return SharedStateContent;
}());
export { SharedStateContent };
if (false) {
    /** @type {?} */
    SharedStateContent.prototype.json;
}
var SharedStateEntry = /** @class */ (function () {
    function SharedStateEntry() {
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    SharedStateEntry.prototype.deserialize = /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    function (input) {
        (/** @type {?} */ (this)).attributes = input.attributes;
        (/** @type {?} */ (this)).content = input.content;
        (/** @type {?} */ (this)).createdBy = input.createdBy;
        (/** @type {?} */ (this)).createdByName = input.createdByName;
        (/** @type {?} */ (this)).description = input.description;
        (/** @type {?} */ (this)).id = input.id;
        (/** @type {?} */ (this)).isAbandoned = input.isAbandoned;
        (/** @type {?} */ (this)).isOrphaned = input.isOrphaned;
        (/** @type {?} */ (this)).links = input.links;
        (/** @type {?} */ (this)).modifiedById = input.modifiedById;
        (/** @type {?} */ (this)).modifiedDate = input.modifiedDate;
        (/** @type {?} */ (this)).name = input.name;
        (/** @type {?} */ (this)).roles = input.roles;
        (/** @type {?} */ (this)).sandboxId = input.sandboxId;
        (/** @type {?} */ (this)).scope = input.scope;
        (/** @type {?} */ (this)).type = input.type;
        (/** @type {?} */ (this)).content = input.json.content;
        return (/** @type {?} */ (this));
    };
    return SharedStateEntry;
}());
export { SharedStateEntry };
if (false) {
    /** @type {?} */
    SharedStateEntry.prototype.attributes;
    /** @type {?} */
    SharedStateEntry.prototype.content;
    /** @type {?} */
    SharedStateEntry.prototype.createdBy;
    /** @type {?} */
    SharedStateEntry.prototype.createdByName;
    /** @type {?} */
    SharedStateEntry.prototype.description;
    /** @type {?} */
    SharedStateEntry.prototype.id;
    /** @type {?} */
    SharedStateEntry.prototype.isAbandoned;
    /** @type {?} */
    SharedStateEntry.prototype.isOrphaned;
    /** @type {?} */
    SharedStateEntry.prototype.links;
    /** @type {?} */
    SharedStateEntry.prototype.modifiedById;
    /** @type {?} */
    SharedStateEntry.prototype.modifiedByName;
    /** @type {?} */
    SharedStateEntry.prototype.modifiedDate;
    /** @type {?} */
    SharedStateEntry.prototype.name;
    /** @type {?} */
    SharedStateEntry.prototype.roles;
    /** @type {?} */
    SharedStateEntry.prototype.sandboxId;
    /** @type {?} */
    SharedStateEntry.prototype.scope;
    /** @type {?} */
    SharedStateEntry.prototype.type;
}
var SharedStateList = /** @class */ (function () {
    function SharedStateList() {
    }
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    SharedStateList.prototype.deserialize = /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    function (input) {
        (/** @type {?} */ (this)).sharedStateEntries = [];
        Object.assign((/** @type {?} */ (this)).sharedStateEntries, input);
        return (/** @type {?} */ (this));
    };
    return SharedStateList;
}());
export { SharedStateList };
if (false) {
    /** @type {?} */
    SharedStateList.prototype.sharedStateEntries;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtc2hhcmVkLXN0YXRlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL21vZGVscy90Yy1zaGFyZWQtc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFJQTtJQUFBO0lBTUEsQ0FBQzs7Ozs7OztJQUpDLHdDQUFXOzs7Ozs7SUFBWCxVQUFZLEtBQVU7UUFDcEIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBQSxJQUFJLEVBQUEsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQixPQUFPLG1CQUFBLElBQUksRUFBQSxDQUFDO0lBQ2QsQ0FBQztJQUNILHlCQUFDO0FBQUQsQ0FBQyxBQU5ELElBTUM7Ozs7SUFMQyxrQ0FBYTs7QUFPZjtJQUFBO0lBdUNBLENBQUM7Ozs7Ozs7SUFwQkMsc0NBQVc7Ozs7OztJQUFYLFVBQVksS0FBVTtRQUNwQixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUNuQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLE9BQU8sQ0FBQztRQUM3QixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxhQUFhLEdBQUcsS0FBSyxDQUFDLGFBQWEsQ0FBQztRQUN6QyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztRQUNyQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLEVBQUUsQ0FBQztRQUNuQixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxXQUFXLEdBQUcsS0FBSyxDQUFDLFdBQVcsQ0FBQztRQUNyQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQztRQUNuQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN6QixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztRQUN2QyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxZQUFZLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQztRQUN2QyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN2QixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN6QixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDLFNBQVMsQ0FBQztRQUNqQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUN6QixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQztRQUN2QixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7UUFDbEMsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQztJQUNkLENBQUM7SUFDSCx1QkFBQztBQUFELENBQUMsQUF2Q0QsSUF1Q0M7Ozs7SUF0Q0Msc0NBQXFCOztJQUNyQixtQ0FBNEI7O0lBQzVCLHFDQUFrQjs7SUFDbEIseUNBQXNCOztJQUN0Qix1Q0FBb0I7O0lBQ3BCLDhCQUFXOztJQUNYLHVDQUFxQjs7SUFDckIsc0NBQW9COztJQUNwQixpQ0FBZ0I7O0lBQ2hCLHdDQUFxQjs7SUFDckIsMENBQXVCOztJQUN2Qix3Q0FBcUI7O0lBQ3JCLGdDQUFhOztJQUNiLGlDQUFnQjs7SUFDaEIscUNBQWtCOztJQUNsQixpQ0FBYzs7SUFDZCxnQ0FBYTs7QUF3QmY7SUFBQTtJQU9BLENBQUM7Ozs7Ozs7SUFMQyxxQ0FBVzs7Ozs7O0lBQVgsVUFBWSxLQUFVO1FBQ3BCLG1CQUFBLElBQUksRUFBQSxDQUFDLGtCQUFrQixHQUFHLEVBQUUsQ0FBQztRQUM3QixNQUFNLENBQUMsTUFBTSxDQUFDLG1CQUFBLElBQUksRUFBQSxDQUFDLGtCQUFrQixFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQzlDLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7SUFDZCxDQUFDO0lBQ0gsc0JBQUM7QUFBRCxDQUFDLEFBUEQsSUFPQzs7OztJQU5DLDZDQUF1QyIsInNvdXJjZXNDb250ZW50IjpbIi8qIG1vZGVscyB1c2VkIGJ5IHNoYXJlZCBzdGF0ZSBzZXJ2aWNlcyAqL1xuXG5pbXBvcnQgeyBEZXNlcmlhbGl6YWJsZX0gZnJvbSAnLi9kZXNlcmlhbGl6YWJsZSc7XG5cbmV4cG9ydCBjbGFzcyBTaGFyZWRTdGF0ZUNvbnRlbnQgaW1wbGVtZW50cyBEZXNlcmlhbGl6YWJsZSB7XG4gIGpzb246IHN0cmluZztcbiAgZGVzZXJpYWxpemUoaW5wdXQ6IGFueSkge1xuICAgIE9iamVjdC5hc3NpZ24odGhpcywgaW5wdXQpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTaGFyZWRTdGF0ZUVudHJ5IGltcGxlbWVudHMgRGVzZXJpYWxpemFibGUge1xuICBhdHRyaWJ1dGVzOiBzdHJpbmdbXTtcbiAgY29udGVudDogU2hhcmVkU3RhdGVDb250ZW50O1xuICBjcmVhdGVkQnk6IHN0cmluZztcbiAgY3JlYXRlZEJ5TmFtZTogc3RyaW5nO1xuICBkZXNjcmlwdGlvbjogc3RyaW5nO1xuICBpZDogc3RyaW5nO1xuICBpc0FiYW5kb25lZDogYm9vbGVhbjtcbiAgaXNPcnBoYW5lZDogYm9vbGVhbjtcbiAgbGlua3M6IHN0cmluZ1tdO1xuICBtb2RpZmllZEJ5SWQ6IHN0cmluZztcbiAgbW9kaWZpZWRCeU5hbWU6IHN0cmluZztcbiAgbW9kaWZpZWREYXRlOiBudW1iZXI7XG4gIG5hbWU6IHN0cmluZztcbiAgcm9sZXM6IHN0cmluZ1tdO1xuICBzYW5kYm94SWQ6IG51bWJlcjtcbiAgc2NvcGU6IHN0cmluZztcbiAgdHlwZTogc3RyaW5nO1xuXG4gIGRlc2VyaWFsaXplKGlucHV0OiBhbnkpOiB0aGlzIHtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBpbnB1dC5hdHRyaWJ1dGVzO1xuICAgIHRoaXMuY29udGVudCA9IGlucHV0LmNvbnRlbnQ7XG4gICAgdGhpcy5jcmVhdGVkQnkgPSBpbnB1dC5jcmVhdGVkQnk7XG4gICAgdGhpcy5jcmVhdGVkQnlOYW1lID0gaW5wdXQuY3JlYXRlZEJ5TmFtZTtcbiAgICB0aGlzLmRlc2NyaXB0aW9uID0gaW5wdXQuZGVzY3JpcHRpb247XG4gICAgdGhpcy5pZCA9IGlucHV0LmlkO1xuICAgIHRoaXMuaXNBYmFuZG9uZWQgPSBpbnB1dC5pc0FiYW5kb25lZDtcbiAgICB0aGlzLmlzT3JwaGFuZWQgPSBpbnB1dC5pc09ycGhhbmVkO1xuICAgIHRoaXMubGlua3MgPSBpbnB1dC5saW5rcztcbiAgICB0aGlzLm1vZGlmaWVkQnlJZCA9IGlucHV0Lm1vZGlmaWVkQnlJZDtcbiAgICB0aGlzLm1vZGlmaWVkRGF0ZSA9IGlucHV0Lm1vZGlmaWVkRGF0ZTtcbiAgICB0aGlzLm5hbWUgPSBpbnB1dC5uYW1lO1xuICAgIHRoaXMucm9sZXMgPSBpbnB1dC5yb2xlcztcbiAgICB0aGlzLnNhbmRib3hJZCA9IGlucHV0LnNhbmRib3hJZDtcbiAgICB0aGlzLnNjb3BlID0gaW5wdXQuc2NvcGU7XG4gICAgdGhpcy50eXBlID0gaW5wdXQudHlwZTtcbiAgICB0aGlzLmNvbnRlbnQgPSBpbnB1dC5qc29uLmNvbnRlbnQ7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNoYXJlZFN0YXRlTGlzdCBpbXBsZW1lbnRzIERlc2VyaWFsaXphYmxlIHtcbiAgc2hhcmVkU3RhdGVFbnRyaWVzOiBTaGFyZWRTdGF0ZUVudHJ5W107XG4gIGRlc2VyaWFsaXplKGlucHV0OiBhbnkpOiB0aGlzIHtcbiAgICB0aGlzLnNoYXJlZFN0YXRlRW50cmllcyA9IFtdO1xuICAgIE9iamVjdC5hc3NpZ24odGhpcy5zaGFyZWRTdGF0ZUVudHJpZXMsIGlucHV0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuIl19