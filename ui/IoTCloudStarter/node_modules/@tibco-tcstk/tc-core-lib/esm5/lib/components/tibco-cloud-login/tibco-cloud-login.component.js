/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { LoginPrefill } from '../../models/tc-login';
import { map } from 'rxjs/operators';
import { TcLoginService } from '../../services/tc-login.service';
/**
 * This component will attempt to log the user in.
 *
 * ![alt-text](../Cloud-Login.png "Image")
 *
 * \@example <tc-tibco-cloud-login *ngIf="!loggedIn (loggedIn)="handleLoggedIn($event)"></tc-tibco-cloud-login>
 */
var TibcoCloudLoginComponent = /** @class */ (function () {
    /**
    * The Constructor creates the Login Dialog
    */
    function TibcoCloudLoginComponent(tcLogin) {
        this.tcLogin = tcLogin;
        /**
         * Notify parent that user is logged in ok.
         */
        this.loggedIn = new EventEmitter();
        this.loading = false;
    }
    /**
    * @ignore
    */
    /**
     * @ignore
     * @return {?}
     */
    TibcoCloudLoginComponent.prototype.ngOnInit = /**
     * @ignore
     * @return {?}
     */
    function () {
        console.log('Login Init');
        if (this.loginPrefill) {
            this.name = this.loginPrefill.emailId;
            this.clientId = this.loginPrefill.clientId;
        }
    };
    /**
     * @return {?}
     */
    TibcoCloudLoginComponent.prototype.doLogin = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.loading = true;
        this.loginError = undefined;
        this.auth = this.tcLogin.login(this.name, this.password, this.clientId).pipe(map((/**
         * @param {?} authInfo
         * @return {?}
         */
        function (authInfo) {
            _this.authInfo = authInfo;
            return authInfo;
        })));
        this.auth.subscribe((/**
         * @param {?} authorize
         * @return {?}
         */
        function (authorize) {
            _this.loading = false;
            // ok logged in
            console.log('User logged in...');
            _this.loggedIn.emit({ authInfo: authorize, accessToken: _this.token });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.loading = false;
            _this.loginError = error.error.errorMsg;
            console.error('Login Failed: ');
            console.error(error);
        }));
    };
    TibcoCloudLoginComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tc-tibco-cloud-login',
                    template: "<div fxFill fxLayoutAlign=\"center start\">\n  <div fxFlex.gt-sm=\"grow 75\" class=\"la-login-div\" ngStyle.lt-md=\"height: 100%; width:100%\" ngStyle.gt-sm=\"max-width: 500px; margin-top: 10px;\">\n    <mat-card fxFlex class=\"la-login-card\" fxLayout=\"column\">\n        <div fxflex class=\"la-outer-form-div\" fxLayoutAlign=\"start stretch\">\n          <form #laLoginForm=\"ngForm\" class=\"la-login-form\" (submit)=\"doLogin()\" fxLayout=\"column\" fxFlex disabled=\"loading\">\n            <mat-form-field>\n              <input matInput placeholder=\"Email Address\" [(ngModel)]=\"name\" name=\"email\" required>\n            </mat-form-field>\n            <mat-form-field>\n              <input matInput placeholder=\"Password\" [(ngModel)]=\"password\" type=\"password\" name=\"password\" required>\n            </mat-form-field>\n\n            <mat-accordion>\n              <mat-expansion-panel [expanded]=\"!clientId\">\n                <mat-expansion-panel-header>\n                  <mat-panel-title>API Access Keys</mat-panel-title>\n                </mat-expansion-panel-header>\n                <mat-form-field fxFlex>\n                  <input matInput placeholder=\"Client Id\" [(ngModel)]=\"clientId\"  name=\"ClientID\" required>\n                </mat-form-field>\n              </mat-expansion-panel>\n            </mat-accordion>\n\n            <div class=\"la-login-button-div\" fxFlex fxLayoutAlign=\"center start\">\n              <button ngStyle.lt-md=\"width: 100%;\" type=\"submit\" mat-raised-button color=\"primary\" [disabled]=\"!laLoginForm.form.valid || loading\">Login</button>\n            </div>\n\n          </form>\n        </div>\n\n        <div fxFlex class=\"spacer\"></div>\n\n        <div class=\"la-login-info-pane\">\n          <div *ngIf=\"loading\">\n            Logging in...\n          </div>\n          <div *ngIf=\"loginError\" style=\"color: red\">{{loginError}}</div>\n        </div>\n    </mat-card>\n  </div>\n</div>\n",
                    styles: [".la-login-div{min-width:300px}.la-login-button{width:50px}.la-login-info-pane{min-height:50px;height:50px;max-height:50px;margin-top:10px}.spacer{min-height:0}.la-login-button-div{margin-top:25px}"]
                }] }
    ];
    /** @nocollapse */
    TibcoCloudLoginComponent.ctorParameters = function () { return [
        { type: TcLoginService }
    ]; };
    TibcoCloudLoginComponent.propDecorators = {
        loggedIn: [{ type: Output }],
        loginPrefill: [{ type: Input }]
    };
    return TibcoCloudLoginComponent;
}());
export { TibcoCloudLoginComponent };
if (false) {
    /**
     * Notify parent that user is logged in ok.
     * @type {?}
     */
    TibcoCloudLoginComponent.prototype.loggedIn;
    /**
     * Login Data
     * @type {?}
     */
    TibcoCloudLoginComponent.prototype.loginPrefill;
    /** @type {?} */
    TibcoCloudLoginComponent.prototype.name;
    /** @type {?} */
    TibcoCloudLoginComponent.prototype.password;
    /** @type {?} */
    TibcoCloudLoginComponent.prototype.clientId;
    /** @type {?} */
    TibcoCloudLoginComponent.prototype.loading;
    /** @type {?} */
    TibcoCloudLoginComponent.prototype.accountsInfo;
    /** @type {?} */
    TibcoCloudLoginComponent.prototype.loginError;
    /** @type {?} */
    TibcoCloudLoginComponent.prototype.token;
    /** @type {?} */
    TibcoCloudLoginComponent.prototype.authInfo;
    /** @type {?} */
    TibcoCloudLoginComponent.prototype.auth;
    /**
     * @type {?}
     * @private
     */
    TibcoCloudLoginComponent.prototype.tcLogin;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGliY28tY2xvdWQtbG9naW4uY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGliY28tY2xvdWQtbG9naW4vdGliY28tY2xvdWQtbG9naW4uY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLFlBQVksRUFBRSxLQUFLLEVBQVUsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzdFLE9BQU8sRUFBZSxZQUFZLEVBQWUsTUFBTSx1QkFBdUIsQ0FBQztBQUUvRSxPQUFPLEVBQUMsR0FBRyxFQUFXLE1BQU0sZ0JBQWdCLENBQUM7QUFFN0MsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLGlDQUFpQyxDQUFDOzs7Ozs7OztBQVMvRDtJQTJCRTs7TUFFRTtJQUNGLGtDQUNVLE9BQXVCO1FBQXZCLFlBQU8sR0FBUCxPQUFPLENBQWdCOzs7O1FBcEJ2QixhQUFRLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQVN0QyxZQUFPLEdBQUcsS0FBSyxDQUFDO0lBY2xCLENBQUM7SUFFRDs7TUFFRTs7Ozs7SUFDRiwyQ0FBUTs7OztJQUFSO1FBQ0UsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQztRQUUxQixJQUFJLElBQUksQ0FBQyxZQUFZLEVBQUU7WUFDckIsSUFBSSxDQUFDLElBQUksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztZQUN0QyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsUUFBUSxDQUFDO1NBQzVDO0lBQ0gsQ0FBQzs7OztJQUVELDBDQUFPOzs7SUFBUDtRQUFBLGlCQXdCRztRQXZCRyxJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztRQUNwQixJQUFJLENBQUMsVUFBVSxHQUFHLFNBQVMsQ0FBQztRQUU5QixJQUFJLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUMxRSxHQUFHOzs7O1FBQUMsVUFBQSxRQUFRO1lBQ1IsS0FBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7WUFDekIsT0FBTyxRQUFRLENBQUM7UUFDbEIsQ0FBQyxFQUNGLENBQ0YsQ0FBQztRQUVBLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUzs7OztRQUFDLFVBQUEsU0FBUztZQUN6QixLQUFJLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQztZQUNyQixlQUFlO1lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO1lBQ2pDLEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFFLEVBQUUsUUFBUSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsS0FBSSxDQUFDLEtBQUssRUFBRSxDQUFFLENBQUM7UUFDekUsQ0FBQzs7OztRQUNELFVBQUEsS0FBSztZQUNELEtBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDO1lBQ3JCLEtBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUM7WUFDdkMsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ2hDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDekIsQ0FBQyxFQUFDLENBQUM7SUFDVCxDQUFDOztnQkF4RUosU0FBUyxTQUFDO29CQUNQLFFBQVEsRUFBRSxzQkFBc0I7b0JBQ2hDLG84REFBaUQ7O2lCQUVwRDs7OztnQkFiTyxjQUFjOzs7MkJBb0JuQixNQUFNOytCQUlOLEtBQUs7O0lBMERSLCtCQUFDO0NBQUEsQUF6RUQsSUF5RUM7U0FuRVksd0JBQXdCOzs7Ozs7SUFLbkMsNENBQXdDOzs7OztJQUl4QyxnREFBb0M7O0lBRWxDLHdDQUFhOztJQUNiLDRDQUFpQjs7SUFDakIsNENBQWlCOztJQUNqQiwyQ0FBZ0I7O0lBQ2hCLGdEQUEyQjs7SUFDM0IsOENBQW1COztJQUNuQix5Q0FBbUI7O0lBQ25CLDRDQUFtQjs7SUFDbkIsd0NBQTJCOzs7OztJQU0zQiwyQ0FBK0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBY2NvdW50c0luZm8sIExvZ2luUHJlZmlsbCwgU3Vic2NyaXB0aW9ufSBmcm9tICcuLi8uLi9tb2RlbHMvdGMtbG9naW4nO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBPYnNlcnZhYmxlSW5wdXR9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXAsIG1lcmdlTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0FjY2Vzc1Rva2VuLCBBdXRoSW5mbyB9IGZyb20gJy4uLy4uL21vZGVscy90Yy1sb2dpbic7XG5pbXBvcnQge1RjTG9naW5TZXJ2aWNlfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy90Yy1sb2dpbi5zZXJ2aWNlJztcblxuLyoqXG4gKiBUaGlzIGNvbXBvbmVudCB3aWxsIGF0dGVtcHQgdG8gbG9nIHRoZSB1c2VyIGluLlxuICpcbiAqICFbYWx0LXRleHRdKC4uL0Nsb3VkLUxvZ2luLnBuZyBcIkltYWdlXCIpXG4gKlxuICogIEBleGFtcGxlIDx0Yy10aWJjby1jbG91ZC1sb2dpbiAqbmdJZj1cIiFsb2dnZWRJbiAobG9nZ2VkSW4pPVwiaGFuZGxlTG9nZ2VkSW4oJGV2ZW50KVwiPjwvdGMtdGliY28tY2xvdWQtbG9naW4+XG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndGMtdGliY28tY2xvdWQtbG9naW4nLFxuICAgIHRlbXBsYXRlVXJsOiAnLi90aWJjby1jbG91ZC1sb2dpbi5jb21wb25lbnQuaHRtbCcsXG4gICAgc3R5bGVVcmxzOiBbJy4vdGliY28tY2xvdWQtbG9naW4uY29tcG9uZW50LmNzcyddXG59KVxuXG5leHBvcnQgY2xhc3MgVGliY29DbG91ZExvZ2luQ29tcG9uZW50ICBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgLyoqXG4gICAqIE5vdGlmeSBwYXJlbnQgdGhhdCB1c2VyIGlzIGxvZ2dlZCBpbiBvay5cbiAgICovXG4gIEBPdXRwdXQoKSBsb2dnZWRJbiA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcbiAgLyoqXG4gICAqIExvZ2luIERhdGFcbiAgICovXG4gIEBJbnB1dCgpIGxvZ2luUHJlZmlsbDogTG9naW5QcmVmaWxsO1xuXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIHBhc3N3b3JkOiBzdHJpbmc7XG4gICAgY2xpZW50SWQ6IHN0cmluZztcbiAgICBsb2FkaW5nID0gZmFsc2U7XG4gICAgYWNjb3VudHNJbmZvOiBBY2NvdW50c0luZm87XG4gICAgbG9naW5FcnJvcjogc3RyaW5nO1xuICAgIHRva2VuOiBBY2Nlc3NUb2tlbjtcbiAgICBhdXRoSW5mbzogQXV0aEluZm87XG4gICAgYXV0aDogT2JzZXJ2YWJsZTxBdXRoSW5mbz47XG5cbiAgLyoqXG4gICogVGhlIENvbnN0cnVjdG9yIGNyZWF0ZXMgdGhlIExvZ2luIERpYWxvZ1xuICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICBwcml2YXRlIHRjTG9naW46IFRjTG9naW5TZXJ2aWNlXG4gICkge1xuXG4gIH1cblxuICAvKipcbiAgKiBAaWdub3JlXG4gICovXG4gIG5nT25Jbml0KCkge1xuICAgIGNvbnNvbGUubG9nKCdMb2dpbiBJbml0Jyk7XG5cbiAgICBpZiAodGhpcy5sb2dpblByZWZpbGwpIHtcbiAgICAgIHRoaXMubmFtZSA9IHRoaXMubG9naW5QcmVmaWxsLmVtYWlsSWQ7XG4gICAgICB0aGlzLmNsaWVudElkID0gdGhpcy5sb2dpblByZWZpbGwuY2xpZW50SWQ7XG4gICAgfVxuICB9XG5cbiAgZG9Mb2dpbigpIHtcbiAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5sb2dpbkVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICB0aGlzLmF1dGggPSB0aGlzLnRjTG9naW4ubG9naW4odGhpcy5uYW1lLCB0aGlzLnBhc3N3b3JkLCB0aGlzLmNsaWVudElkKS5waXBlKFxuICAgICAgICBtYXAoYXV0aEluZm8gPT4ge1xuICAgICAgICAgICAgdGhpcy5hdXRoSW5mbyA9IGF1dGhJbmZvO1xuICAgICAgICAgICAgcmV0dXJuIGF1dGhJbmZvO1xuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgKTtcblxuICAgICAgICB0aGlzLmF1dGguc3Vic2NyaWJlKGF1dGhvcml6ZSA9PiB7XG4gICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIC8vIG9rIGxvZ2dlZCBpblxuICAgICAgICAgICAgY29uc29sZS5sb2coJ1VzZXIgbG9nZ2VkIGluLi4uJyk7XG4gICAgICAgICAgICB0aGlzLmxvZ2dlZEluLmVtaXQoIHsgYXV0aEluZm86IGF1dGhvcml6ZSwgYWNjZXNzVG9rZW46IHRoaXMudG9rZW4gfSApO1xuICAgICAgICAgIH0sXG4gICAgICAgICAgZXJyb3IgPT4ge1xuICAgICAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgICAgdGhpcy5sb2dpbkVycm9yID0gZXJyb3IuZXJyb3IuZXJyb3JNc2c7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0xvZ2luIEZhaWxlZDogJyk7XG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoZXJyb3IpO1xuICAgICAgICAgIH0pO1xuICAgIH1cbn1cbiJdfQ==