/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* Used to resolve contents of landing page config file */
/* This resolver will try and read the config from shared state
 * If a shared state entry does NOT exist it will use the defaults from a config file
 * Then update shared state with those contents
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { UiAppIdConfig } from '../models/tc-app-config';
import { flatMap, map, mergeMap, switchMap } from 'rxjs/operators';
import { TcSharedStateService } from '../services/tc-shared-state.service';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { TcCoreCommonFunctions } from '../common/tc-core-common-functions';
import { TcGeneralLandingPageConfigService } from '../services/tc-general-landing-page-config.service';
import { GeneralLandingPageConfig } from '../models/tc-general-landing-page-config';
var GeneralLandingPageConfigResolver = /** @class */ (function () {
    function GeneralLandingPageConfigResolver(tcSharedState, generalLandingPageConfigService, http, location) {
        var _this = this;
        this.tcSharedState = tcSharedState;
        this.generalLandingPageConfigService = generalLandingPageConfigService;
        this.http = http;
        this.location = location;
        this.DEFAULT_CONFIG_URL = 'assets/config/landingPages.json';
        this.APP_ID_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/uiAppId.json');
        // note appConfigResolver will need sandboxId to create app config state record.
        // So we expect this to have been set by caller (done by tc-liveapps-lib/laConfigResolver).
        this.setSandbox = (/**
         * @param {?} sandboxId
         * @return {?}
         */
        function (sandboxId) {
            _this.sandboxId = sandboxId;
        });
        // can be used to load defaultAppConfig from a JSON config
        this.getDefaultAppConfig = (/**
         * @return {?}
         */
        function () {
            return _this.http.get(TcCoreCommonFunctions.prepareUrlForStaticResource(_this.location, _this.DEFAULT_CONFIG_URL));
        });
        // loads uiAppId from json file in assets (appId.json)
        this.getAppId = (/**
         * @return {?}
         */
        function () {
            return _this.http.get(_this.APP_ID_URL).pipe(map((/**
             * @param {?} uiAppId
             * @return {?}
             */
            function (uiAppId) {
                /** @type {?} */
                var uiAppIdConfig = new UiAppIdConfig().deserialize(uiAppId);
                _this.uiAppId = uiAppIdConfig.uiAppId;
                return uiAppIdConfig;
            })));
        });
    }
    /**
     * @return {?}
     */
    GeneralLandingPageConfigResolver.prototype.resolve = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var appConfig = this.getAppId().pipe(switchMap((/**
         * @param {?} uiAppId
         * @return {?}
         */
        function (uiAppId) { return _this.generalLandingPageConfigService.getGeneralLandingPageConfig(uiAppId.uiAppId, true, false)
            .pipe(mergeMap((/**
         * @param {?} generalConfig
         * @return {?}
         */
        function (generalConfig) {
            if (generalConfig === undefined) {
                return _this.getDefaultAppConfig().pipe(flatMap((/**
                 * @param {?} config
                 * @return {?}
                 */
                function (config) {
                    _this.defaultLandingPageConfig = new GeneralLandingPageConfig().deserialize(config);
                    _this.defaultLandingPageConfig.uiAppId = _this.uiAppId;
                    return _this.generalLandingPageConfigService.createGeneralLandingPageConfig(_this.sandboxId, _this.uiAppId, _this.defaultLandingPageConfig)
                        .pipe(flatMap((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        /** @type {?} */
                        var newAppConfig = _this.defaultLandingPageConfig;
                        newAppConfig.id = result;
                        return _this.generalLandingPageConfigService.updateGeneralLandingPageConfig(_this.sandboxId, _this.uiAppId, newAppConfig, result).pipe(flatMap((
                        // trigger a read to flush the cache since we changed it
                        // trigger a read to flush the cache since we changed it
                        /**
                         * @param {?} updatedConf
                         * @return {?}
                         */
                        function (updatedConf) {
                            return _this.generalLandingPageConfigService.getGeneralLandingPageConfig(_this.uiAppId, true, true).pipe(map((/**
                             * @param {?} cachedConfig
                             * @return {?}
                             */
                            function (cachedConfig) {
                                return cachedConfig;
                            })));
                        })));
                        // return newAppConfig;
                    })));
                })));
            }
            else {
                return of(generalConfig);
            }
        }))); })));
        return appConfig;
    };
    GeneralLandingPageConfigResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GeneralLandingPageConfigResolver.ctorParameters = function () { return [
        { type: TcSharedStateService },
        { type: TcGeneralLandingPageConfigService },
        { type: HttpClient },
        { type: Location }
    ]; };
    return GeneralLandingPageConfigResolver;
}());
export { GeneralLandingPageConfigResolver };
if (false) {
    /** @type {?} */
    GeneralLandingPageConfigResolver.prototype.DEFAULT_CONFIG_URL;
    /** @type {?} */
    GeneralLandingPageConfigResolver.prototype.APP_ID_URL;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.sandboxId;
    /** @type {?} */
    GeneralLandingPageConfigResolver.prototype.defaultLandingPageConfig;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.uiAppId;
    /** @type {?} */
    GeneralLandingPageConfigResolver.prototype.setSandbox;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.getDefaultAppConfig;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.getAppId;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.tcSharedState;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.generalLandingPageConfigService;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    GeneralLandingPageConfigResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,