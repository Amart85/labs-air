/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* Used to resolve contents of general config file */
/* This resolver will try and read the config from shared state
 * If a shared state entry does NOT exist it will use the defaults from a config file
 * Then update shared state with those contents
 */
// import {GeneralLandingPageConfigResolver} from '@tibco-tcstk/tc-core-lib';
/** @type {?} */
export var DEFAULT_ADMIN_GROUP = new RoleAttribute().deserialize({
    id: 'Administrator',
    'group': 'System: ADMINISTRATOR',
    'display': 'Administrator',
    'priority': 7
});
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { of } from 'rxjs';
import { UiAppIdConfig } from '../models/tc-app-config';
import { catchError, flatMap, map, mergeMap, switchMap } from 'rxjs/operators';
import { TcSharedStateService } from '../services/tc-shared-state.service';
import { HttpClient } from '@angular/common/http';
import { TcGeneralConfigService } from '../services/tc-general-config.service';
import { GeneralConfig, RoleAttribute } from '../models/tc-general-config';
import { Location } from '@angular/common';
import { TcCoreCommonFunctions } from '../common/tc-core-common-functions';
var GeneralConfigResolver = /** @class */ (function () {
    // tslint:disable-next-line:max-line-length
    function GeneralConfigResolver(tcSharedState, generalConfigService, http, location, router) {
        var _this = this;
        this.tcSharedState = tcSharedState;
        this.generalConfigService = generalConfigService;
        this.http = http;
        this.location = location;
        this.router = router;
        this.DEFAULT_CONFIG_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/generalAppConfig.json');
        this.APP_ID_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/uiAppId.json');
        // note appConfigResolver will need sandboxId to create app config state record.
        // So we expect this to have been set by caller (done by tc-liveapps-lib/laConfigResolver).
        this.setSandbox = (/**
         * @param {?} sandboxId
         * @return {?}
         */
        function (sandboxId) {
            _this.sandboxId = sandboxId;
        });
        // can be used to load defaultAppConfig from a JSON config
        this.getDefaultAppConfig = (/**
         * @return {?}
         */
        function () {
            return _this.http.get(_this.DEFAULT_CONFIG_URL);
        });
        // loads uiAppId from json file in assets (appId.json)
        this.getAppId = (/**
         * @return {?}
         */
        function () {
            return _this.http.get(_this.APP_ID_URL).pipe(map((/**
             * @param {?} uiAppId
             * @return {?}
             */
            function (uiAppId) {
                /** @type {?} */
                var uiAppIdConfig = new UiAppIdConfig().deserialize(uiAppId);
                _this.uiAppId = uiAppIdConfig.uiAppId;
                return uiAppIdConfig;
            })));
        });
    }
    /**
     * @return {?}
     */
    GeneralConfigResolver.prototype.resolve = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var appConfig = this.getAppId().pipe(switchMap((/**
         * @param {?} uiAppId
         * @return {?}
         */
        function (uiAppId) { return _this.generalConfigService.getGeneralConfig(uiAppId.uiAppId, true, false)
            .pipe(mergeMap((/**
         * @param {?} generalConfig
         * @return {?}
         */
        function (generalConfig) {
            if (generalConfig === undefined) {
                return _this.getDefaultAppConfig().pipe(flatMap((/**
                 * @param {?} config
                 * @return {?}
                 */
                function (config) {
                    _this.defaultAppConfig = new GeneralConfig().deserialize(config);
                    // check to see if we have an admin config
                    /** @type {?} */
                    var adminDef = _this.defaultAppConfig.roles.find((/**
                     * @param {?} role
                     * @return {?}
                     */
                    function (role) { return role.id === 'Administrator'; }));
                    // if no admin config then use default
                    if (!adminDef) {
                        _this.defaultAppConfig.roles.push(DEFAULT_ADMIN_GROUP);
                    }
                    _this.defaultAppConfig.uiAppId = _this.uiAppId;
                    return _this.generalConfigService.createGeneralConfig(_this.sandboxId, _this.defaultAppConfig.uiAppId, _this.defaultAppConfig)
                        .pipe(flatMap((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        /** @type {?} */
                        var newAppConfig = _this.defaultAppConfig;
                        newAppConfig.id = result;
                        return _this.generalConfigService.updateGeneralConfig(_this.sandboxId, newAppConfig.uiAppId, newAppConfig, result).pipe(flatMap((
                        // trigger a read to flush the cache since we changed it
                        // trigger a read to flush the cache since we changed it
                        /**
                         * @param {?} updatedConf
                         * @return {?}
                         */
                        function (updatedConf) {
                            return _this.generalConfigService.getGeneralConfig(_this.uiAppId, true, true).pipe(map((/**
                             * @param {?} cachedConfig
                             * @return {?}
                             */
                            function (cachedConfig) {
                                return cachedConfig;
                            })));
                        })));
                        // return newAppConfig;
                    })), catchError((/**
                     * @param {?} err
                     * @return {?}
                     */
                    function (err) {
                        console.error(err);
                        // tslint:disable-next-line:max-line-length
                        /** @type {?} */
                        var errMessage;
                        /** @type {?} */
                        var errCode = 'NOT_ADMIN_INIT';
                        if (err.error && err.error.errorMsg) {
                            errMessage = err.error.errorMsg;
                            // tslint:disable-next-line:max-line-length
                            console.error('NOT_ADMIN_INIT: Unable to create new shared state entry. Login as a user with Admin Group access first to initialize shared state: ');
                        }
                        else {
                            errMessage = 'Unknown Error - check console logs';
                            console.error('Unknown error creating shared state');
                        }
                        _this.router.navigate(['/errorHandler/' + errCode + '/' + errMessage]);
                        return of(err);
                    })));
                })));
            }
            else {
                return of(generalConfig);
            }
        }))); })));
        return appConfig;
    };
    GeneralConfigResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GeneralConfigResolver.ctorParameters = function () { return [
        { type: TcSharedStateService },
        { type: TcGeneralConfigService },
        { type: HttpClient },
        { type: Location },
        { type: Router }
    ]; };
    return GeneralConfigResolver;
}());
export { GeneralConfigResolver };
if (false) {
    /** @type {?} */
    GeneralConfigResolver.prototype.DEFAULT_CONFIG_URL;
    /** @type {?} */
    GeneralConfigResolver.prototype.APP_ID_URL;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.sandboxId;
    /** @type {?} */
    GeneralConfigResolver.prototype.defaultAppConfig;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.uiAppId;
    /** @type {?} */
    GeneralConfigResolver.prototype.setSandbox;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.getDefaultAppConfig;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.getAppId;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.tcSharedState;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.location;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,