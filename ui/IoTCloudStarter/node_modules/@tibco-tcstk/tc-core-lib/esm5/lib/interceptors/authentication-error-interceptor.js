/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpErrorResponse, } from '@angular/common/http';
import { of } from 'rxjs';
import { catchError } from 'rxjs/operators';
import { Router } from '@angular/router';
var AuthErrorInterceptor = /** @class */ (function () {
    function AuthErrorInterceptor(router) {
        this.router = router;
        this.TIBCO_CLOUD_DOMAIN = 'cloud.tibco.com';
        this.TIBCO_TEST_DOMAIN = 'tenant-integration.tcie.pro';
        this.TIBCO_DEV_DOMAIN = 'emea.tibco.com';
        this.TIBCO_CLOUD_LOGIN = 'https://account.cloud.tibco.com/idm/v1/login-saml?relayState=';
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    AuthErrorInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        return next.handle(req).pipe(catchError((/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            if (err instanceof HttpErrorResponse) {
                if (err.status === 419) {
                    // timed out
                    // should only be used if not on tibco cloud (and hence using our login route)
                    // check if we are hosted on tibco.cloud.com
                    /** @type {?} */
                    var host = window.location.hostname.split('.');
                    /** @type {?} */
                    var hostDomain = host[host.length - 3] + '.' + host[host.length - 2] + '.' + host[host.length - 1];
                    if (hostDomain === _this.TIBCO_CLOUD_DOMAIN || hostDomain === _this.TIBCO_TEST_DOMAIN || hostDomain === _this.TIBCO_DEV_DOMAIN) {
                        // redirect to Tibco Cloud Login
                        // supply base64 encoded redirect string
                        /** @type {?} */
                        var reauthUrl = btoa('{ "resumeURL":"' + window.location.href + '", "tenantId":"BPM" }');
                        console.log('redirecting to: ' + _this.TIBCO_CLOUD_LOGIN + reauthUrl);
                        window.location.href = _this.TIBCO_CLOUD_LOGIN + reauthUrl;
                    }
                    else {
                        _this.router.navigate(['/login'], { queryParams: {} });
                    }
                }
                else {
                    throw err;
                }
            }
            return of(err);
        })));
    };
    AuthErrorInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AuthErrorInterceptor.ctorParameters = function () { return [
        { type: Router }
    ]; };
    return AuthErrorInterceptor;
}());
export { AuthErrorInterceptor };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthErrorInterceptor.prototype.TIBCO_CLOUD_DOMAIN;
    /**
     * @type {?}
     * @private
     */
    AuthErrorInterceptor.prototype.TIBCO_TEST_DOMAIN;
    /**
     * @type {?}
     * @private
     */
    AuthErrorInterceptor.prototype.TIBCO_DEV_DOMAIN;
    /**
     * @type {?}
     * @private
     */
    AuthErrorInterceptor.prototype.TIBCO_CLOUD_LOGIN;
    /**
     * @type {?}
     * @private
     */
    AuthErrorInterceptor.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aGVudGljYXRpb24tZXJyb3ItaW50ZXJjZXB0b3IuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtY29yZS1saWIvIiwic291cmNlcyI6WyJsaWIvaW50ZXJjZXB0b3JzL2F1dGhlbnRpY2F0aW9uLWVycm9yLWludGVyY2VwdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFNTCxpQkFBaUIsR0FDbEIsTUFBTSxzQkFBc0IsQ0FBQztBQUU5QixPQUFPLEVBQWMsRUFBRSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3RDLE9BQU8sRUFBQyxVQUFVLEVBQU0sTUFBTSxnQkFBZ0IsQ0FBQztBQUMvQyxPQUFPLEVBQXlCLE1BQU0sRUFBc0IsTUFBTSxpQkFBaUIsQ0FBQztBQUVwRjtJQU9FLDhCQUFvQixNQUFjO1FBQWQsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUwxQix1QkFBa0IsR0FBRyxpQkFBaUIsQ0FBQztRQUN2QyxzQkFBaUIsR0FBRyw2QkFBNkIsQ0FBQztRQUNsRCxxQkFBZ0IsR0FBRyxnQkFBZ0IsQ0FBQztRQUNwQyxzQkFBaUIsR0FBRywrREFBK0QsQ0FBQztJQUV2RCxDQUFDOzs7Ozs7SUFFdEMsd0NBQVM7Ozs7O0lBQVQsVUFBVSxHQUFxQixFQUFFLElBQWlCO1FBQWxELGlCQTJCQztRQTFCQyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUMxQixVQUFVOzs7O1FBQUMsVUFBQyxHQUFRO1lBQ2hCLElBQUksR0FBRyxZQUFZLGlCQUFpQixFQUFFO2dCQUNwQyxJQUFJLEdBQUcsQ0FBQyxNQUFNLEtBQUssR0FBRyxFQUFFOzs7Ozt3QkFJaEIsSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7O3dCQUMxQyxVQUFVLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUM7b0JBQ3BHLElBQUksVUFBVSxLQUFLLEtBQUksQ0FBQyxrQkFBa0IsSUFBSSxVQUFVLEtBQUssS0FBSSxDQUFDLGlCQUFpQixJQUFJLFVBQVUsS0FBSyxLQUFJLENBQUMsZ0JBQWdCLEVBQUU7Ozs7NEJBR3JILFNBQVMsR0FBRyxJQUFJLENBQUMsaUJBQWlCLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxJQUFJLEdBQUcsdUJBQXVCLENBQUM7d0JBQzFGLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEdBQUcsS0FBSSxDQUFDLGlCQUFpQixHQUFHLFNBQVMsQ0FBQyxDQUFDO3dCQUNyRSxNQUFNLENBQUMsUUFBUSxDQUFDLElBQUksR0FBRyxLQUFJLENBQUMsaUJBQWlCLEdBQUcsU0FBUyxDQUFDO3FCQUMzRDt5QkFBTTt3QkFDTCxLQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxFQUFFLEVBQUMsV0FBVyxFQUFFLEVBQUUsRUFBQyxDQUFDLENBQUM7cUJBQ3JEO2lCQUNGO3FCQUFNO29CQUNMLE1BQU0sR0FBRyxDQUFDO2lCQUNYO2FBQ0Y7WUFDRCxPQUFPLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUNqQixDQUFDLEVBQ0YsQ0FDRixDQUFDO0lBQ0osQ0FBQzs7Z0JBcENGLFVBQVU7Ozs7Z0JBRnFCLE1BQU07O0lBdUN0QywyQkFBQztDQUFBLEFBckNELElBcUNDO1NBcENZLG9CQUFvQjs7Ozs7O0lBQy9CLGtEQUErQzs7Ozs7SUFDL0MsaURBQTBEOzs7OztJQUMxRCxnREFBNEM7Ozs7O0lBQzVDLGlEQUE0Rjs7Ozs7SUFFaEYsc0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtcbiAgSHR0cFJlcXVlc3QsXG4gIEh0dHBIYW5kbGVyLFxuICBIdHRwRXZlbnQsXG4gIEh0dHBJbnRlcmNlcHRvcixcbiAgSHR0cFJlc3BvbnNlLFxuICBIdHRwRXJyb3JSZXNwb25zZSxcbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtjYXRjaEVycm9yLCB0YXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7QWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyLCBSb3V0ZXJTdGF0ZVNuYXBzaG90fSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXV0aEVycm9ySW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBwcml2YXRlIFRJQkNPX0NMT1VEX0RPTUFJTiA9ICdjbG91ZC50aWJjby5jb20nO1xuICBwcml2YXRlIFRJQkNPX1RFU1RfRE9NQUlOID0gJ3RlbmFudC1pbnRlZ3JhdGlvbi50Y2llLnBybyc7XG4gIHByaXZhdGUgVElCQ09fREVWX0RPTUFJTiA9ICdlbWVhLnRpYmNvLmNvbSc7XG4gIHByaXZhdGUgVElCQ09fQ0xPVURfTE9HSU4gPSAnaHR0cHM6Ly9hY2NvdW50LmNsb3VkLnRpYmNvLmNvbS9pZG0vdjEvbG9naW4tc2FtbD9yZWxheVN0YXRlPSc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge31cblxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcik6IE9ic2VydmFibGU8SHR0cEV2ZW50PGFueT4+IHtcbiAgICByZXR1cm4gbmV4dC5oYW5kbGUocmVxKS5waXBlKFxuICAgICAgY2F0Y2hFcnJvcigoZXJyOiBhbnkpID0+IHtcbiAgICAgICAgICBpZiAoZXJyIGluc3RhbmNlb2YgSHR0cEVycm9yUmVzcG9uc2UpIHtcbiAgICAgICAgICAgIGlmIChlcnIuc3RhdHVzID09PSA0MTkpIHtcbiAgICAgICAgICAgICAgLy8gdGltZWQgb3V0XG4gICAgICAgICAgICAgIC8vIHNob3VsZCBvbmx5IGJlIHVzZWQgaWYgbm90IG9uIHRpYmNvIGNsb3VkIChhbmQgaGVuY2UgdXNpbmcgb3VyIGxvZ2luIHJvdXRlKVxuICAgICAgICAgICAgICAvLyBjaGVjayBpZiB3ZSBhcmUgaG9zdGVkIG9uIHRpYmNvLmNsb3VkLmNvbVxuICAgICAgICAgICAgICBjb25zdCBob3N0ID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLnNwbGl0KCcuJyk7XG4gICAgICAgICAgICAgIGNvbnN0IGhvc3REb21haW4gPSBob3N0W2hvc3QubGVuZ3RoIC0gM10gKyAnLicgKyBob3N0W2hvc3QubGVuZ3RoIC0gMl0gKyAnLicgKyBob3N0W2hvc3QubGVuZ3RoIC0gMV07XG4gICAgICAgICAgICAgIGlmIChob3N0RG9tYWluID09PSB0aGlzLlRJQkNPX0NMT1VEX0RPTUFJTiB8fCBob3N0RG9tYWluID09PSB0aGlzLlRJQkNPX1RFU1RfRE9NQUlOIHx8IGhvc3REb21haW4gPT09IHRoaXMuVElCQ09fREVWX0RPTUFJTikge1xuICAgICAgICAgICAgICAgIC8vIHJlZGlyZWN0IHRvIFRpYmNvIENsb3VkIExvZ2luXG4gICAgICAgICAgICAgICAgLy8gc3VwcGx5IGJhc2U2NCBlbmNvZGVkIHJlZGlyZWN0IHN0cmluZ1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlYXV0aFVybCA9IGJ0b2EoJ3sgXCJyZXN1bWVVUkxcIjpcIicgKyB3aW5kb3cubG9jYXRpb24uaHJlZiArICdcIiwgXCJ0ZW5hbnRJZFwiOlwiQlBNXCIgfScpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdyZWRpcmVjdGluZyB0bzogJyArIHRoaXMuVElCQ09fQ0xPVURfTE9HSU4gKyByZWF1dGhVcmwpO1xuICAgICAgICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5ocmVmID0gdGhpcy5USUJDT19DTE9VRF9MT0dJTiArIHJlYXV0aFVybDtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy9sb2dpbiddLCB7cXVlcnlQYXJhbXM6IHt9fSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IGVycjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIG9mKGVycik7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuICB9XG59XG4iXX0=