/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @ngdoc component
 * @name mockingInterceptor
 *
 * @description
 * This interceptor attempts to use local json files from the assets directory to mock Tibco Cloud API calls
 *
 * Each mock file can contain either a single response or a "mockedResponses" object that contains specific URLs and responses
 *
 * @usage
 *
 *
 *
 */
import { Injectable } from '@angular/core';
import { HttpRequest, HttpResponse, HttpClient } from '@angular/common/http';
import { throwError } from 'rxjs';
import { map, catchError, delay } from 'rxjs/operators';
var MockingInterceptor = /** @class */ (function () {
    function MockingInterceptor(http) {
        this.http = http;
        this.MOCK_BASE_PATH = '/assets/mocks';
        this.sendRequest = (/**
         * @param {?} req
         * @param {?} next
         * @return {?}
         */
        function (req, next) {
            return next.handle(req);
        });
    }
    /**
     * @param {?} url
     * @return {?}
     */
    MockingInterceptor.prototype.readMockJSON = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        return this.http.get(url);
    };
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    MockingInterceptor.prototype.intercept = /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    function (req, next) {
        var _this = this;
        // save original request
        /** @type {?} */
        var originalReq = req.clone();
        // dont mock anything from assets folder
        /** @type {?} */
        var urlparts = req.url.split('.');
        /** @type {?} */
        var pathparts = urlparts[0].split('/');
        if (pathparts[1] === 'assets') {
            return this.sendRequest(originalReq, next);
        }
        // try and find a mock response
        /** @type {?} */
        var resource = originalReq.url.split('?')[0];
        /** @type {?} */
        var segments = resource.split('/');
        /** @type {?} */
        var seg2 = resource.split('/');
        /** @type {?} */
        var path = this.MOCK_BASE_PATH;
        // ignore the http/url parts if present
        /** @type {?} */
        var responseType = 'json';
        if (segments[0] === 'http:' || segments[0] === 'https:') {
            segments.splice(0, 3);
            // we are getting a webresource (will only work for text based resources like svg)
            if (segments[0] === 'webresource') {
                responseType = 'text';
            }
        }
        else {
            // just remove the blank part
            segments.splice(0, 1);
        }
        segments.splice(0, segments.length).forEach((/**
         * @param {?} seg
         * @return {?}
         */
        function (seg) {
            path = path + '/' + seg;
        }));
        if (responseType !== 'text') {
            path = path + '.json';
        }
        else {
            path = path + '.txt';
        }
        /** @type {?} */
        var options = {};
        if (responseType === 'text') {
            options = { responseType: 'text' };
        }
        /** @type {?} */
        var httpRequest = new HttpRequest((/** @type {?} */ ('GET')), path, options);
        req = Object.assign(req, httpRequest);
        req = req.clone();
        return next.handle(req).pipe(delay(100), map((/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            /** @type {?} */
            var d = (/** @type {?} */ (data));
            if (d.status === 200) {
                // return the body of the cached response loaded from file
                console.log(originalReq.url);
                /** @type {?} */
                var mockedResponse = void 0;
                if (data['body']['mockedResponses']) {
                    // multi mocked response file
                    if (data['body']['mockedResponses'][originalReq.url]) {
                        data['body'] = data['body']['mockedResponses'][originalReq.url];
                        d = (/** @type {?} */ (data));
                        mockedResponse = new HttpResponse(d);
                    }
                    else {
                        // no mock for this URL
                        // todo: there is a bug here that this does not trigger the real call
                        throwError('no mock for this url - no response sent');
                    }
                }
                else {
                    // single mocked response file
                    mockedResponse = new HttpResponse(d);
                }
                return mockedResponse;
            }
            else {
                return data;
            }
        })), catchError((/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            // no mock file so make real request
            return _this.sendRequest(originalReq, next);
        })));
    };
    MockingInterceptor.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    MockingInterceptor.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    return MockingInterceptor;
}());
export { MockingInterceptor };
if (false) {
    /** @type {?} */
    MockingInterceptor.prototype.MOCK_BASE_PATH;
    /** @type {?} */
    MockingInterceptor.prototype.sendRequest;
    /**
     * @type {?}
     * @private
     */
    MockingInterceptor.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,