{"version":3,"sources":["../../../../node_modules/tslib/tslib.es6.js","ng://@tibco-tcstk/tc-core-lib/lib/common/tc-core-common-functions.ts","ng://@tibco-tcstk/tc-core-lib/lib/common/tc-core-topic-comm.ts","ng://@tibco-tcstk/tc-core-lib/lib/components/tibco-cloud-navbar/tibco-cloud-navbar.component.ts","ng://@tibco-tcstk/tc-core-lib/lib/models/tc-login.ts","ng://@tibco-tcstk/tc-core-lib/lib/resolvers/login-prefill.resolver.ts","ng://@tibco-tcstk/tc-core-lib/lib/services/tc-login.service.ts","ng://@tibco-tcstk/tc-core-lib/lib/components/tibco-cloud-login/tibco-cloud-login.component.ts","ng://@tibco-tcstk/tc-core-lib/lib/models/tc-shared-state.ts","ng://@tibco-tcstk/tc-core-lib/lib/models/tc-app-config.ts","ng://@tibco-tcstk/tc-core-lib/lib/services/tc-shared-state.service.ts","ng://@tibco-tcstk/tc-core-lib/lib/services/request-cache.service.ts","ng://@tibco-tcstk/tc-core-lib/lib/interceptors/caching-interceptor.ts","ng://@tibco-tcstk/tc-core-lib/lib/guards/auth.guard.ts","ng://@tibco-tcstk/tc-core-lib/lib/interceptors/authentication-error-interceptor.ts","ng://@tibco-tcstk/tc-core-lib/lib/pipes/ellipsis.pipe.ts","ng://@tibco-tcstk/tc-core-lib/lib/pipes/duration-since.pipe.ts","ng://@tibco-tcstk/tc-core-lib/lib/pipes/highlight.pipe.ts","ng://@tibco-tcstk/tc-core-lib/lib/pipes/order-by-date.pipe.ts","ng://@tibco-tcstk/tc-core-lib/lib/pipes/reverse.pipe.ts","ng://@tibco-tcstk/tc-core-lib/lib/components/tibco-cloud-widget-header/tibco-cloud-widget-header.component.ts","ng://@tibco-tcstk/tc-core-lib/lib/components/tibco-cloud-menu-bar/tibco-cloud-menu-bar.component.ts","ng://@tibco-tcstk/tc-core-lib/lib/models/tc-widget-header.ts","ng://@tibco-tcstk/tc-core-lib/lib/services/tc-buttons-helper.service.ts","ng://@tibco-tcstk/tc-core-lib/lib/components/tibco-cloud-error/tibco-cloud-error.component.ts","ng://@tibco-tcstk/tc-core-lib/lib/directives/on-create.directive.ts","ng://@tibco-tcstk/tc-core-lib/lib/models/tc-general-config.ts","ng://@tibco-tcstk/tc-core-lib/lib/services/tc-general-config.service.ts","ng://@tibco-tcstk/tc-core-lib/lib/components/tibco-cloud-table/tibco-cloud-table-datasource.ts","ng://@tibco-tcstk/tc-core-lib/lib/components/tibco-cloud-table/tibco-cloud-table.component.ts","ng://@tibco-tcstk/tc-core-lib/lib/services/tc-logging.service.ts","ng://@tibco-tcstk/tc-core-lib/lib/components/tibco-cloud-select-table/tibco-cloud-select-table.component.ts","ng://@tibco-tcstk/tc-core-lib/lib/components/tibco-cloud-setting-menu-entry/tibco-cloud-setting-menu-entry.component.ts","ng://@tibco-tcstk/tc-core-lib/lib/components/tibco-cloud-settings-general/tibco-cloud-settings-general.component.ts","ng://@tibco-tcstk/tc-core-lib/lib/models/tc-routing-actions.ts","ng://@tibco-tcstk/tc-core-lib/lib/components/tibco-cloud-configuration/tibco-cloud-configuration.component.ts","ng://@tibco-tcstk/tc-core-lib/lib/components/tibco-cloud-splash-screen/tibco-cloud-splash-screen.component.ts","ng://@tibco-tcstk/tc-core-lib/lib/models/tc-general-landing-page-config.ts","ng://@tibco-tcstk/tc-core-lib/lib/services/tc-general-landing-page-config.service.ts","ng://@tibco-tcstk/tc-core-lib/lib/components/tibco-cloud-new-element/tibco-cloud-new-element.component.ts","ng://@tibco-tcstk/tc-core-lib/lib/components/tibco-cloud-setting-landing/tibco-cloud-setting-landing.component.ts","ng://@tibco-tcstk/tc-core-lib/lib/tc-core-lib.module.ts","ng://@tibco-tcstk/tc-core-lib/lib/services/tc-general-landing-page.service.ts","ng://@tibco-tcstk/tc-core-lib/lib/models/tc-configuration-menu-config.ts","ng://@tibco-tcstk/tc-core-lib/lib/interceptors/mocking-interceptor.ts","ng://@tibco-tcstk/tc-core-lib/lib/resolvers/general-config.resolver.ts","ng://@tibco-tcstk/tc-core-lib/lib/resolvers/configuration-menu-config.resolver.ts","ng://@tibco-tcstk/tc-core-lib/lib/resolvers/general-landing-page-config.resolver.ts","ng://@tibco-tcstk/tc-core-lib/lib/common/tc-core-queue-comm.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","__read","n","r","e","ar","push","error","__spread","arguments","concat","TcCoreCommonFunctions","escapeString","text","replace","fileSizeToHuman","size","Math","log","pow","toFixed","camelCaseToWords","str","convertToJSON","array","objArray","k","key","transposeArray","arrayLength","newArray","j","camelize","newStr","newArr","indexOf","split","charAt","toUpperCase","substr","join","prepareUrlForNonStaticResource","location","_platformStrategy","HashLocationStrategy","prepareUrlForStaticResource","prepareExternalUrl","MessageTopicService","topics","name","subject","BehaviorSubject","console","sendMessage","message","createTopicIfNotExists","filter","x","clearMessages","getMessage","asObservable","init","queueExist","_b","tslib_1.__values","_c","tempTopic","Injectable","args","providedIn","TibcoCloudNavbarComponent","messageService","ms","ngOnInit","_this","docUrl","slice","toLowerCase","navbar","GlobalNavbar","container","textAfterLogo","appName","undefined","iconMenus","search","visible","download","help","notifications","products","customProfilePanel","account","subscriptions","organization","tenants","customizedComponents","template","logoUrl","logoClickTargetUrl","rebrandConfig","style","logo","src","url","backgroundColor","fontColor","fontFamily","iconColor","refreshRebrandingStyle","load","initialHelpURL","urlExists","exists","customizePanel","subscribe","data","findHelpFile","helpUrl","includes","substring","lastIndexOf","callback","http","XMLHttpRequest","open","onload","readyState","status","send","Component","selector","Location","ViewChild","static","Input","Group","id","type","Claim","deserialize","input","assign","groups","subscriptionId","ownerId","SandboxList","sandboxes","AccessToken","AuthInfo","accountId","accountDisplayName","ownerName","loggedInUserRole","regions","Owner","AccountsInfo","accountInfos","LoginPrefill","EMAIL_ID_KEY","CLIENT_ID_KEY","LoginPrefillResolver","getClientId","localStorage","getItem","getEmail","resolve","emailId","clientId","TcLoginService","login","username","password","clientID","setItem","body","HttpParams","set","headers","HttpHeaders","post","toString","pipe","tap","val","sessionStorage","Date","now","map","authInfo","loginV2","accessToken","laAuthorize","access_token","HttpClient","TibcoCloudLoginComponent","tcLogin","loggedIn","EventEmitter","loading","loginPrefill","doLogin","loginError","auth","authorize","emit","token","errorMsg","Output","SharedStateContent","SharedStateEntry","attributes","content","createdBy","createdByName","description","isAbandoned","isOrphaned","links","modifiedById","modifiedDate","roles","sandboxId","scope","json","SharedStateList","sharedStateEntries","UiAppConfig","UiAppIdConfig","TcSharedStateService","createSharedState","bodyStr","JSON","stringify","result","updateSharedState","sharedStateList","put","updatedSharedStateList","getSharedState","useCache","flushCache","options","get","getUiAppConfig","uiAppId","ssName","ssresult","parse","createUiAppConfig","uiAppConfig","updateUiAppConfig","entry","ssList","RequestCacheService","cache","Map","req","urlWithParams","cached","lastRead","response","expired","forEach","expiredEntry","delete","CachingInterceptor","intercept","cachedResponse","of","sendRequest","handle","event","HttpResponse","AuthGuard","router","TIBCO_CLOUD_DOMAIN","TIBCO_TEST_DOMAIN","TIBCO_DEV_DOMAIN","canActivate","route","state","host","window","hostname","hostDomain","tcsTimestamp","Number","navigate","queryParams","returnUrl","Router","AuthErrorInterceptor","TIBCO_CLOUD_LOGIN","catchError","err","HttpErrorResponse","reauthUrl","btoa","href","EllipsisPipe","transform","Pipe","DurationSincePipe","seconds","floor","interval","HighlightPipe","highlightText","option","caseSensitive","highlightStyleName","regex","caseFlag","RegExp","match","SINGLE_MATCH","SINGLE_AND_STARTS_WITH_MATCH","MULTI_MATCH","OrderByDatePipe","field","sort","a","ReversePipe","reverse","pure","TibcoCloudWidgetHeaderComponent","showHeader","toolbarButtonEvent","toolbarButtonClick","TibcoCloudMenuBarComponent","_super","tslib_1.__extends","ToolbarButton","TcButtonsHelperService","createButton","icon","filled","tooltip","enabled","updateButtons","updatedToolbarButtons","toolbarButtons","updatedButton","idx","findIndex","item","addButtons","buttons","button","removeButtons","splice","TibcoCloudErrorComponent","knownErrorList","errorCode","errorTitle","errorMessage","params","code","title","find","ActivatedRoute","OnCreateDirective","fireCreated","Directive","exportAs","RoleAttribute","GeneralConfig","TcGeneralConfigService","sharedStateService","createGeneralConfig","generalConfig","getGeneralConfig","updateGeneralConfig","TibcoCloudTableDataSource","paginator","connect","dataMutations","observableOf","page","sortChange","merge","apply","getPagedData","getSortedData","disconnect","startIndex","pageIndex","pageSize","active","direction","isAsc","compare","DataSource","TibcoCloudTableComponent","random","displayedColumns","columns","updateTable","ngOnChanges","changes","parsedJsonSource","jsonSource","dataSource","myColumns_1","headerName","this_1","cell","element","camelCaseTW","header","MatPaginator","MatSort","LogService","level","LogLevel","All","logWithDate","writeToLog","msg","shouldLog","getLevelString","formatParams","ret","Off","some","params_1","params_1_1","debug","optionalParams","_i","Debug","info","Info","warn","Warn","Error","fatal","Fatal","re","TibcoCloudSelectTableComponent","logger","selectedlines","selected","highlight","highlighted","clicked","row","myData","selectedArray","myData_1","myData_1_1","line","TibcoCloudSettingMenuEntryComponent","configureOption","viewButtonClick","TibcoCloudSettingsGeneralComponent","generalConfigService","snackBar","panelOpenState","runSaveFunction","duration","snapshot","generalConfigHolder","claims","primaryProductionSandbox","valueOf","applicationTitle","displayName","documentationURL","documentationUrl","getRoute","MatSnackBar","RouteAction","action","context","TibcoCloudConfigurationComponent","buttonsHelper","routeAction","createToolbarButtons","handleSelectionEvent","configName","baseRoute","handleToolbarButtonEvent","buttonId","showConfig","TibcoCloudSplashScreenComponent","getStartedEvent","getStartedClick","LandingPageItemConfig","LandingPageConfig","GeneralLandingPageConfig","TcGeneralLandingPageConfigService","createGeneralLandingPageConfig","generalLandingPageConfig","getGeneralLandingPageConfig","updateGeneralLandingPageConfig","TibcoCloudNewElementComponent","dialogRef","elementType","resourceType","onCreate","close","MatDialogRef","Inject","MAT_DIALOG_DATA","TibcoCloudSettingLandingComponent","generalLandingPageConfigService","dialog","runNewConfiguration","width","height","maxWidth","maxHeight","panelClass","afterClosed","newElement","highlights","landingPages","selectedWelcomePage","compareObjects","o1","o2","landingPagesConfig","landingPagesConfigHolder","landingPage","allRoles","allRolesHolder","configuration","runDeleteConfiguration","pages","index","MatDialog","TcCoreLibModule","matIconRegistry","domSanitizer","events","NavigationEnd","addSvgIconLiteral","bypassSecurityTrustHtml","forRoot","ngModule","providers","NgModule","declarations","imports","RouterModule","HttpClientModule","BrowserModule","BrowserAnimationsModule","MatButtonModule","MatCardModule","MatCheckboxModule","MatListModule","MatFormFieldModule","MatInputModule","MatIconModule","MatSelectModule","MatOptionModule","MatDialogModule","MatMenuModule","MatTooltipModule","MatTabsModule","MatExpansionModule","MatToolbarModule","MatButtonToggleModule","FormsModule","FlexLayoutModule","ScrollingModule","ReactiveFormsModule","MatSortModule","MatTableModule","MatPaginatorModule","CommonModule","exports","provide","HTTP_INTERCEPTORS","useClass","multi","entryComponents","MatIconRegistry","DomSanitizer","TcGeneralLandingPageService","getLandingPage","getLandingPageForRole","roleId","candidatePages","ConfigurationMenuConfig","MockingInterceptor","MOCK_BASE_PATH","readMockJSON","originalReq","clone","resource","segments","path","responseType","seg","httpRequest","HttpRequest","delay","mockedResponse","throwError","GeneralConfigResolver","tcSharedState","DEFAULT_CONFIG_URL","APP_ID_URL","setSandbox","getDefaultAppConfig","getAppId","uiAppIdConfig","switchMap","mergeMap","flatMap","config","defaultAppConfig","newAppConfig","updatedConf","cachedConfig","ConfigurationMenuConfigResolver","getConfigurationMenuConfig","routeSnapshot","GeneralLandingPageConfigResolver","defaultLandingPageConfig","MessageQueueService","queues","Subject","createQueueIfNotExists","tempQueue"],"mappings":"6qCAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOA,EAAEM,eAAeD,KAAIN,EAAEM,GAAKL,EAAEK,MACpDN,EAAGC,IAGrB,SAASO,EAAUR,EAAGC,GAEzB,SAASQ,IAAOC,KAAKC,YAAcX,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEY,UAAkB,OAANX,EAAaC,OAAOW,OAAOZ,IAAMQ,EAAGG,UAAYX,EAAEW,UAAW,IAAIH,GAgF5E,SAASK,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWC,EAAI,EAChE,OAAIH,EAAUA,EAAEI,KAAKL,GACd,CACHM,KAAM,WAEF,OADIN,GAAKI,GAAKJ,EAAEO,SAAQP,OAAI,GACrB,CAAEQ,MAAOR,GAAKA,EAAEI,KAAMK,MAAOT,KAKzC,SAASU,EAAOV,EAAGW,GACtB,IAAIV,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UACjD,IAAKF,EAAG,OAAOD,EACf,IAAmBY,EAAYC,EAA3BT,EAAIH,EAAEI,KAAKL,GAAOc,EAAK,GAC3B,IACI,WAAc,IAANH,GAAgBA,KAAM,MAAQC,EAAIR,EAAEE,QAAQG,MAAMK,EAAGC,KAAKH,EAAEJ,OAExE,MAAOQ,GAASH,EAAI,CAAEG,MAAOA,GACjC,QACQ,IACQJ,IAAMA,EAAEH,OAASR,EAAIG,EAAU,YAAIH,EAAEI,KAAKD,GAE1D,QAAkB,GAAIS,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,EAGJ,SAASG,IACZ,IAAK,IAAIH,EAAK,GAAIV,EAAI,EAAGA,EAAIc,UAAUX,OAAQH,IAC3CU,EAAKA,EAAGK,OAAOT,EAAOQ,UAAUd,KACpC,OAAOU,ECtIX,IAAAM,EAAA,WAAA,SAAAA,KA6EA,OA1EgBA,EAAAC,aAAd,SAA2BC,GACzB,OAAOA,EAAKC,QAAQ,KAAM,MAGdH,EAAAI,gBAAd,SAA8BC,OACtBZ,EAAKa,KAAKC,IAAIF,GAAQC,KAAKC,IAAI,KAAQ,EAC7C,QAASF,EAAOC,KAAKE,IAAI,IAAKf,IAAIgB,QAAQ,GAAK,KAAO,WAAWhB,EAAI,IAAM,IAAM,KAGrEO,EAAAU,iBAAd,SAA+BC,GAI7B,OAHYA,EAAIR,QAAQ,kBAAmB,SACxCA,QAAQ,kBAAmB,SAC3BA,QAAQ,OAAQ,MAIPH,EAAAY,cAAd,SAA4BC,GAE1B,QADMC,EAAW,GACR9B,EAAI,EAAGA,EAAI6B,EAAM1B,OAAQH,IAAK,CACrC8B,EAAS9B,EAAI,GAAK,GAClB,IAAK,IAAI+B,EAAI,EAAGA,EAAIF,EAAM,GAAG1B,QAAU4B,EAAIF,EAAM7B,GAAGG,OAAQ4B,IAAK,KACzDC,EAAMH,EAAM,GAAGE,GACrBD,EAAS9B,EAAI,GAAGgC,GAAOH,EAAM7B,GAAG+B,IAGpC,OAAOD,GAGKd,EAAAiB,eAAd,SAA6BJ,EAAOK,GAGlC,QADMC,EAAW,GACRnC,EAAI,EAAGA,EAAIkC,EAAalC,IAC/BmC,EAASxB,KAAK,IAEhB,IAASX,EAAI,EAAGA,EAAI6B,EAAM1B,OAAQH,IAChC,IAAK,IAAIoC,EAAI,EAAGA,EAAIF,EAAaE,IAC/BD,EAASC,GAAGzB,KAAKkB,EAAM7B,GAAGoC,IAG9B,OAAOD,GAGKnB,EAAAqB,SAAQ,SAAIV,OACpBW,EAAS,GACTC,EAAS,GAEb,IAA0B,IAAtBZ,EAAIa,QAAQ,KAAa,CAC3BD,EAASZ,EAAIc,MAAM,KACnB,IAAK,IAAIzC,EAAI,EAAGA,EAAIuC,EAAOpC,OAAQH,IACjCuC,EAAOvC,GAAKuC,EAAOvC,GAAG0C,OAAO,GAAGC,cAAgBJ,EAAOvC,GAAG4C,OAAO,GAEnEN,EAASC,EAAOM,KAAK,KAEvB,OAAOP,GAGKtB,EAAA8B,+BAA8B,SAAIC,EAAoBpB,GAElE,OAAIoB,EAASC,kBAA6BC,EAAAA,qBACjCtB,GAMGX,EAAAkC,4BAA2B,SAAIH,EAAoBpB,GAE/D,OAAIoB,EAASC,6BAA6BC,EAAAA,qBACjCtB,EAEAoB,EAASI,mBAAmBxB,IAIzCX,EA7EA,gBCOE,SAAAoC,IAJA7D,KAAA8D,OAAiE,CAC/D,CAACC,KAAM,eAAgBC,QAAS,IAAIC,EAAAA,gBAAqB,UAIzDC,QAAQlC,IAAI,2CAGd6B,EAAA3D,UAAAiE,YAAA,SAAYJ,EAAcK,GACxBpE,KAAKqE,uBAAuBN,EAAM,CAACpC,KAAMyC,IACzCpE,KAAK8D,OAAOQ,OAAM,SAACC,GAAK,OAAAA,EAAER,OAASA,IAAM,GAAGC,QAAQrD,KAAK,CAACgB,KAAMyC,KAGlEP,EAAA3D,UAAAsE,cAAA,SAAcT,GACZ/D,KAAKqE,uBAAuBN,EAAM,CAACpC,KAAM,UAI3CkC,EAAA3D,UAAAuE,WAAA,SAAWV,GAET,OADA/D,KAAKqE,uBAAuBN,EAAM,CAACpC,KAAM,SAClC3B,KAAK8D,OAAOQ,OAAM,SAACC,GAAK,OAAAA,EAAER,OAASA,IAAM,GAAGC,QAAQU,gBAG7Db,EAAA3D,UAAAmE,uBAAA,SAAuBN,EAAeY,WAChCC,GAAa,MACjB,IAAgB,IAAAC,EAAAC,EAAA9E,KAAK8D,QAAMiB,EAAAF,EAAAlE,QAAAoE,EAAAjE,KAAAiE,EAAAF,EAAAlE,OAAE,CAAjBoE,EAAAlE,MACJkD,OAASA,IAEba,GAAa,wGAGjB,IAAKA,EAAY,CACfV,QAAQlC,IAAI,mBAAqB+B,OAC3BiB,EAAY,CAACjB,KAAMA,EAAMC,QAAS,IAAIC,EAAAA,gBAAqBU,IACjE3E,KAAK8D,OAAO1C,KAAK4D,yBArCtBC,EAAAA,WAAUC,KAAA,CAAC,CAACC,WAAY,2JCYzBC,EAAA,WA8CE,SAAAA,EAAoB5B,EAA4B6B,GAA5BrF,KAAAwD,SAAAA,EAA4BxD,KAAAqF,eAAAA,EAC9CrF,KAAKsF,GAAKD,EA0Id,OApIED,EAAAlF,UAAAqF,SAAA,WAAA,IAAAC,EAAAxF,KAgDE,GA9CIA,KAAKyF,QAAqD,SAA1CzF,KAAKyF,OAAOC,MAAM,EAAG,GAAGC,gBAE1C3F,KAAKyF,OAAShE,EAAsBkC,4BAA4B3D,KAAKwD,SAAUxD,KAAKyF,SAGtFzF,KAAK4F,OAAS,IAAIC,aAAa,CAC7BC,UAAW,UACXC,cAAe/F,KAAKgG,QAAUhG,KAAKgG,QAAUC,UAC7CC,UAAW,CACTC,OAAQ,CACNC,SAAS,GAEXC,SAAU,CACRD,SAAS,GAEXE,KAAM,CACJF,SAAS,GAEXG,cAAe,CACbH,SAAS,GAEXI,SAAU,CACRJ,SAAS,IAGbK,mBAAoB,CAClBC,QAAS,CACPN,SAAS,GAEXO,cAAe,CACbP,SAAS,GAEXQ,aAAc,CACZR,SAAS,GAEXS,QAAS,CACPT,SAAS,IAGbU,qBAAsB,CACpB,CACE/C,KAAM,OACNgD,SAAU,qBAIZ/G,KAAKgH,SAAWhH,KAAKiH,oBAAsBjH,KAAKkH,cAAe,KAC3DC,EAAa,IACfnH,KAAKgH,SAAWhH,KAAKiH,sBACvBE,EAAMC,KAAO,CACXC,IAAOrH,KAAKgH,QACZM,IAAOtH,KAAKiH,qBAGZjH,KAAKkH,gBACHlH,KAAKkH,cAAcK,kBACrBJ,EAAMI,gBAAkBvH,KAAKkH,cAAcK,iBAEzCvH,KAAKkH,cAAcM,YACrBL,EAAMK,UAAYxH,KAAKkH,cAAcM,WAEnCxH,KAAKkH,cAAcO,aACrBN,EAAMM,WAAazH,KAAKkH,cAAcO,YAEpCzH,KAAKkH,cAAcQ,YACrBP,EAAMO,UAAY1H,KAAKkH,cAAcQ,YAGzC1H,KAAK4F,OAAO+B,uBAAuBR,GAErCnH,KAAK4F,OAAOgC,WAENC,EAAiB7H,KAAKyF,OAAS,aAErCzF,KAAK8H,UAAUD,EAAc,SAAEE,GACzBA,EACFvC,EAAKI,OAAOoC,eAAe,OAAQ,eAAiBH,EAAiB,wCAGrErC,EAAKI,OAAOoC,eAAe,OAAQ,gCAKvChI,KAAKsF,GAAGb,WAAW,QAAQwD,UAAS,SAACC,GAEnC1C,EAAK2C,aAAa,eAAiBD,EAAKvG,KAAO,iBAInDyD,EAAAlF,UAAAiI,aAAA,SAAaC,GAAb,IAAA5C,EAAAxF,KACEA,KAAK8H,UAAUM,EAAO,SAAEL,GAElBA,GACF7D,QAAQlC,IAAI,sBAAwBoG,GACpC5C,EAAKI,OAAOoC,eAAe,OAAQ,eAAiBI,EAAU,yCAE1DA,EAAQC,SAAS,MAKnBD,GAFAA,EAAUA,EAAQE,UAAU,EAAGF,EAAQG,YAAY,gBAEjCD,UAAU,EAAGF,EAAQG,YAAY,KAAO,GAE1D/C,EAAK2C,aAAaC,EAAU,eAE5BlE,QAAQlC,IAAI,+BACZwD,EAAKI,OAAOoC,eAAe,OAAQ,kCAS3C5C,EAAAlF,UAAA4H,UAAA,SAAUR,EAAKkB,OACPC,EAAO,IAAIC,eACjBD,EAAKE,KAAK,MAAOrB,GAAK,GACtBmB,EAAKG,OAAM,SAAa1H,GACE,IAApBuH,EAAKI,aACa,MAAhBJ,EAAKK,OACPN,GAAS,GAETA,GAAS,KAIfC,EAAKM,4BAvLRC,EAAAA,UAAS9D,KAAA,CAAC,CACT+D,SAAU,wBACVlC,SAAA,kJAhBMmC,EAAAA,gBAEArF,wCAqBLsF,EAAAA,UAASjE,KAAA,CAAC,SAAU,CAAEkE,UAAQ,qBAI9BC,EAAAA,sBAIAA,EAAAA,uBAMAA,EAAAA,6BAMAA,EAAAA,kCAMAA,EAAAA,SAsJHjE,EAzLA,GCXAkE,EAAA,WAKA,OAJE,SAAmBC,EACAC,GADAxJ,KAAAuJ,GAAAA,EACAvJ,KAAAwJ,KAAAA,GAFrB,gBAOA,SAAAC,KAcA,OAJEA,EAAAvJ,UAAAwJ,YAAA,SAAYC,GAEV,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAEJF,kBAWA,OARE,SAAmBI,EACAN,EACAC,EACAzF,EACA+F,EACAC,GALA/J,KAAA6J,OAAAA,EACA7J,KAAAuJ,GAAAA,EACAvJ,KAAAwJ,KAAAA,EACAxJ,KAAA+D,KAAAA,EACA/D,KAAA8J,eAAAA,EACA9J,KAAA+J,QAAAA,mBAKrB,SAAAC,KAOA,OALEA,EAAA9J,UAAAwJ,YAAA,SAAYC,GAGV,OAFA,KAAKM,UAAY,GACjBzK,OAAOoK,OAAO,KAAKK,UAAWN,GAC9B,MAEJK,kBAEA,SAAAE,KASA,OAJEA,EAAAhK,UAAAwJ,YAAA,SAAYC,GAEV,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAEJO,kBAEA,SAAAC,KAYA,OAJEA,EAAAjK,UAAAwJ,YAAA,SAAYC,GAEV,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAEJQ,kBAUA,OAPE,SACSC,EACAC,EACAC,EACAC,EACAC,GAJAxK,KAAAoK,UAAAA,EACApK,KAAAqK,mBAAAA,EACArK,KAAAsK,UAAAA,EACAtK,KAAAuK,iBAAAA,EACAvK,KAAAwK,QAAAA,mBAIX,SAAAC,KASA,OAJEA,EAAAvK,UAAAwJ,YAAA,SAAYC,GAEV,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAEJc,kBAQA,OANA,6BAQA,SAAAC,KAOA,OALEA,EAAAxK,UAAAwJ,YAAA,SAAYC,GAGV,OAFA,KAAKgB,aAAe,GACpBnL,OAAOoK,OAAO,KAAKe,aAAchB,GACjC,MAEJe,kBAEA,SAAAE,KAOA,OAJEA,EAAA1K,UAAAwJ,YAAA,SAAYC,GAEV,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAEJiB,KC7GaC,EAAe,qBACfC,EAAgB,sBAE7BC,EAAA,WAGE,SAAAA,IAEQ/K,KAAAgL,YAAW,WACjB,OAAOC,aAAaC,QAAQJ,IAGtB9K,KAAAmL,SAAQ,WACd,OAAOF,aAAaC,QAAQL,IAOhC,OAJEE,EAAA7K,UAAAkL,QAAA,WACE,OAAO,IAAIR,GAAelB,YAAY,CAAE2B,QAASrL,KAAKmL,WAAYG,SAAUtL,KAAKgL,qCAdpF/F,EAAAA,mDAiBD8F,EAjBA,gBCmBE,SAAAQ,EAAoB9C,EAA0BjF,GAA1BxD,KAAAyI,KAAAA,EAA0BzI,KAAAwD,SAAAA,SAGvC+H,EAAArL,UAAAsL,MAAP,SAAaC,EAAUC,EAAUC,GAC/BV,aAAaW,QAAQf,EAAcY,GACnCR,aAAaW,QAAQd,EAAea,OAI9BE,GAAO,IAAIC,EAAAA,YACdC,IAAI,QAASN,GACbM,IAAI,WAAYL,GAChBK,IAAI,WAAY,OAChBA,IAAI,WAAYJ,GACbK,GAAU,IAAIC,EAAAA,aACjBF,IAAI,eAAgB,qCAEvB,OAAO/L,KAAKyI,KAAKyD,KATL,sBASeL,EAAKM,WAAY,CAAEH,QAAOA,IAClDI,KACCC,EAAAA,IAAG,SAAEC,GAAO,OAAAC,eAAeX,QAAQ,eAAgBY,KAAKC,MAAMN,cAC9DO,EAAAA,IAAG,SAAEC,GAAY,OAAA,IAAIxC,GAAWT,YAAYiD,OAG3CpB,EAAArL,UAAA0M,QAAP,SAAenB,EAAUC,OAEjBG,GAAO,IAAIC,EAAAA,YACdC,IAAI,WAAYN,GAChBM,IAAI,WAAYL,GAChBK,IAAI,YAAa,cACjBA,IAAI,aAAc,YACfC,GAAU,IAAIC,EAAAA,aACjBF,IAAI,eAAgB,qCAEvB,OAAO/L,KAAKyI,KAAKyD,KATL,mBASeL,EAAKM,WAAY,CAAEH,QAAOA,IAClDI,KACCC,EAAAA,IAAG,SAAEC,GAAO,OAAAC,eAAeX,QAAQ,eAAgBY,KAAKC,MAAMN,cAC9DO,EAAAA,IAAG,SAAEG,GAAe,OAAA,IAAI3C,GAAcR,YAAYmD,OAKjDtB,EAAArL,UAAA4M,YAAP,SAAmBD,EAA0BzC,OAErCyB,GAAO,IAAIC,EAAAA,YACdC,IAAI,cAAec,EAAYE,cAC/BhB,IAAI,WAAY,OAChBA,IAAI,YAAa3B,GAEd4B,GAAU,IAAIC,EAAAA,aACjBF,IAAI,eAAgB,qCAEvB,OAAO/L,KAAKyI,KAAKyD,KATL,sBASeL,EAAKM,WAAY,CAAEH,QAAOA,IAClDI,KACCC,EAAAA,IAAG,SAAEC,GAAO,OAAAC,eAAeX,QAAQ,eAAgBY,KAAKC,MAAMN,cAC9DO,EAAAA,IAAG,SAAEC,GAAY,OAAA,IAAIxC,GAAWT,YAAYiD,2BA5DnD1H,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANN6H,EAAAA,kBAEA9D,EAAAA,uKCPR+D,EAAA,WA8BE,SAAAA,EACUC,GAAAlN,KAAAkN,QAAAA,EApBAlN,KAAAmN,SAAW,IAAIC,EAAAA,aASvBpN,KAAAqN,SAAU,EAqDd,OAlCEJ,EAAA/M,UAAAqF,SAAA,WACErB,QAAQlC,IAAI,cAERhC,KAAKsN,eACPtN,KAAK+D,KAAO/D,KAAKsN,aAAajC,QAC9BrL,KAAKsL,SAAWtL,KAAKsN,aAAahC,WAItC2B,EAAA/M,UAAAqN,QAAA,WAAA,IAAA/H,EAAAxF,KACMA,KAAKqN,SAAU,EACfrN,KAAKwN,WAAavH,UAEpBjG,KAAKyN,KAAOzN,KAAKkN,QAAQ1B,MAAMxL,KAAK+D,KAAM/D,KAAK0L,SAAU1L,KAAKsL,UAAUc,KACtEM,EAAAA,IAAG,SAACC,GAEA,OADAnH,EAAKmH,SAAWA,EACTA,KAKX3M,KAAKyN,KAAKxF,UAAS,SAACyF,GAChBlI,EAAK6H,SAAU,EAEfnJ,QAAQlC,IAAI,qBACZwD,EAAK2H,SAASQ,KAAM,CAAEhB,SAAUe,EAAWb,YAAarH,EAAKoI,SAC9D,SACDvM,GACImE,EAAK6H,SAAU,EACf7H,EAAKgI,WAAanM,EAAMA,MAAMwM,SAC9B3J,QAAQ7C,MAAM,kBACd6C,QAAQ7C,MAAMA,0BAtE3B2H,EAAAA,UAAS9D,KAAA,CAAC,CACP+D,SAAU,uBACVlC,SAAA,gnEAXIwE,uCAoBLuC,EAAAA,6BAIAzE,EAAAA,SA0DH4D,EAzEA,GCVAc,EAAA,WAAA,SAAAA,KAMA,OAJEA,EAAA7N,UAAAwJ,YAAA,SAAYC,GAEV,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAEJoE,EANA,gBAQA,SAAAC,KAuCA,OApBEA,EAAA9N,UAAAwJ,YAAA,SAAYC,GAkBV,OAjBA,KAAKsE,WAAatE,EAAMsE,WACxB,KAAKC,QAAUvE,EAAMuE,QACrB,KAAKC,UAAYxE,EAAMwE,UACvB,KAAKC,cAAgBzE,EAAMyE,cAC3B,KAAKC,YAAc1E,EAAM0E,YACzB,KAAK9E,GAAKI,EAAMJ,GAChB,KAAK+E,YAAc3E,EAAM2E,YACzB,KAAKC,WAAa5E,EAAM4E,WACxB,KAAKC,MAAQ7E,EAAM6E,MACnB,KAAKC,aAAe9E,EAAM8E,aAC1B,KAAKC,aAAe/E,EAAM+E,aAC1B,KAAK3K,KAAO4F,EAAM5F,KAClB,KAAK4K,MAAQhF,EAAMgF,MACnB,KAAKC,UAAYjF,EAAMiF,UACvB,KAAKC,MAAQlF,EAAMkF,MACnB,KAAKrF,KAAOG,EAAMH,KAClB,KAAK0E,QAAUvE,EAAMmF,KAAKZ,QAC1B,MAEJF,kBAEA,SAAAe,KAOA,OALEA,EAAA7O,UAAAwJ,YAAA,SAAYC,GAGV,OAFA,KAAKqF,mBAAqB,GAC1BxP,OAAOoK,OAAO,KAAKoF,mBAAoBrF,GACvC,MAEJoF,KCxDAE,EAAA,WAAA,SAAAA,KAYA,OAJEA,EAAA/O,UAAAwJ,YAAA,SAAYC,GAEV,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAEJsF,EAZA,gBAeA,SAAAC,KAMA,OAJEA,EAAAhP,UAAAwJ,YAAA,SAAYC,GAEV,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAEJuF,kBCOE,SAAAC,EAAoB1G,EAA0BjF,GAA1BxD,KAAAyI,KAAAA,EAA0BzI,KAAAwD,SAAAA,SAGvC2L,EAAAjP,UAAAkP,kBAAP,SAAyBrL,EACAyF,EACA6E,EACAO,EACAX,EACAU,EACAH,EACAN,OAGjBrC,EAAO,CACX9H,KAAQA,EACRyF,KAAQA,EACR6E,YAAeA,EACfO,UAAaA,EACbX,WAAcA,EACdU,MAASA,EACTH,MAASA,EACTN,QAASA,GAELmB,EAAUC,KAAKC,UAAU1D,GACzBG,GAAU,IAAIC,EAAAA,aACjBF,IAAI,eAAgB,oBACvB,OAAO/L,KAAKyI,KAAKyD,KAfL,yBAeemD,EAAS,CAACrD,QAAOA,IACzCI,KACCC,EAAAA,IAAG,SAACC,GAAO,OAAAC,eAAeX,QAAQ,eAAgBY,KAAKC,MAAMN,cAC7DO,EAAAA,IAAG,SAAC8C,GACF,OAAOA,EAAOrD,eAKfgD,EAAAjP,UAAAuP,kBAAP,SAAyBC,OAGjB7D,EAAO6D,EACPL,EAAUC,KAAKC,UAAU1D,GACzBG,GAAU,IAAIC,EAAAA,aACjBF,IAAI,eAAgB,oBACvB,OAAO/L,KAAKyI,KAAKkH,IANL,yBAMcN,EAAS,CAACrD,QAAOA,IACxCI,KACCC,EAAAA,IAAG,SAACC,GAAO,OAAAC,eAAeX,QAAQ,eAAgBY,KAAKC,MAAMN,cAC7DO,EAAAA,IAAG,SAACkD,GAA0B,OAAA,IAAIb,GAAkBrF,YAAYkG,OAI/DT,EAAAjP,UAAA2P,eAAP,SAAsB9L,EAAcyF,EAAcsG,EAAmBC,OAG/DC,EAFE1I,EAAM,uCAAyCkC,EACjD,cAAiBzF,EAAO,IAGxBiI,EAAuB,IAAIC,EAAAA,YAS/B,OARI6D,IACF9D,EAAUA,EAAQD,IAAI,gBAAiB,SAErCgE,IACF/D,EAAUA,EAAQD,IAAI,aAAc,SAEtCiE,EAAU,CAAChE,QAASA,GAEbhM,KAAKyI,KAAKwH,IAAI3I,EAAK0I,GACvB5D,KACCC,EAAAA,IAAG,SAACC,GAAO,OAAAC,eAAeX,QAAQ,eAAgBY,KAAKC,MAAMN,cAC7DO,EAAAA,IAAG,SAACgD,GAAmB,OAAA,IAAIX,GAAkBrF,YAAYgG,OAKxDP,EAAAjP,UAAAgQ,eAAP,SAAsBC,EAAiBL,EAAmBC,OAElDK,EAASD,EAAU,0CAEzB,OAAOnQ,KAAK6P,eAAeO,EAAQ,SAAUN,EAAUC,GACpD3D,KACCM,EAAAA,IAAG,SAAC7L,GACA,GAAIA,EAAMmO,mBAAmBpO,OAAS,EAAG,KACjCyP,GAAW,IAAIpB,GAAcvF,YAAY4F,KAAKgB,MAAMzP,EAAMmO,mBAAmB,GAAGd,QAAQY,OAE9F,OADAuB,EAAS9G,GAAK1I,EAAMmO,mBAAmB,GAAGzF,GACnC8G,EAEP,OAAOpK,cAOZkJ,EAAAjP,UAAAqQ,kBAAP,SAAyB3B,EAAmB4B,EAA0BL,OAC9DC,EAASD,EAAU,0CACnBjC,EAA8B,IAAIH,EAExC,OADAG,EAAQY,KAAOrN,EAAsBC,aAAa4N,KAAKC,UAAUiB,IAC1DxQ,KAAKoP,kBAAkBgB,EAAQ,SAAU,GAAIxB,EAAW3I,UAAWA,UAAWA,UAAWiI,GAC7F9B,KACCM,EAAAA,IAAG,SAAC7L,GAAS,OAAAA,MAIZsO,EAAAjP,UAAAuQ,kBAAP,SAAyB7B,EAAmB4B,EAA0BL,EAAiB5G,OAC/E6G,EAASD,EAAU,0CACnBjC,EAA8B,IAAIH,EACxCG,EAAQY,KAAOrN,EAAsBC,aAAa4N,KAAKC,UAAUiB,QAC3DE,EAA0B,IAAI1C,EACpC0C,EAAMxC,QAAUA,EAChBwC,EAAM9B,UAAYA,EAClB8B,EAAM3M,KAAOqM,EACbM,EAAMlH,KAAO,SACbkH,EAAMnH,GAAKA,MACLoH,EAA0B,IAAI5B,EAGpC,OAFA4B,EAAO3B,mBAAqB,GAC5B2B,EAAO3B,mBAAmB5N,KAAKsP,GACxB1Q,KAAKyP,kBAAkBkB,EAAO3B,oBAClC5C,KACCM,EAAAA,IAAG,SAAC7L,GACF,OAAO,IAAIoO,GAAcvF,YAAa4F,KAAKgB,MAAMzP,EAAMmO,mBAAmB,GAAGd,QAAQY,+BAzH9F7J,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAPN6H,EAAAA,kBAEA9D,EAAAA,uKCNR0H,EAAA,WAAA,SAAAA,IAKE5Q,KAAA6Q,MAAQ,IAAIC,WAEZF,EAAA1Q,UAAA+P,IAAA,SAAIc,OACIzJ,EAAMyJ,EAAIC,cACVC,EAASjR,KAAK6Q,MAAMZ,IAAI3I,GAE9B,IAAK2J,EACH,OAAOhL,UAGSgL,EAAOC,SAAY1E,KAAKC,MAE1C,OAAOwE,EAAOE,UAGhBP,EAAA1Q,UAAAyP,IAAA,SAAIoB,EAAuBI,GAA3B,IAAA3L,EAAAxF,KAEQsH,EAAMyJ,EAAIzJ,IACVoJ,EAAQ,CAAEpJ,IAAGA,EAAE6J,SAAQA,EAAED,SAAU1E,KAAKC,OAC9CzM,KAAK6Q,MAAM9E,IAAIzE,EAAKoJ,OAEdU,EAAU5E,KAAKC,MA5BV,KA6BXzM,KAAK6Q,MAAMQ,QAAO,SAACC,GACbA,EAAaJ,SAAWE,GAC1B5L,EAAKqL,MAAMU,UAAOD,EAAahK,4BA7BtCrC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,kHADd,gBCME,SAAAqM,EAAoBX,GAAA7Q,KAAA6Q,MAAAA,EA+BtB,OA9BEW,EAAAtR,UAAAuR,UAAA,SAAUV,EAAuBpQ,OAC3B+Q,EACJ,OAAIX,EAAI/E,QAAQiE,IAAI,kBAA0D,oBAArCc,EAAIC,cAAc3N,OAAO,EAAG,KAE9D0N,EAAI/E,QAAQiE,IAAI,gBACnByB,EAAiB1R,KAAK6Q,MAAMZ,IAAIc,IAS7BW,EAAiBC,EAAAA,GAAGD,GAAkB1R,KAAK4R,YAAYb,EAAKpQ,EAAMX,KAAK6Q,QAHrE7Q,KAAK4R,YAAYb,EAAKpQ,EAAMsF,YAMvCuL,EAAAtR,UAAA0R,YAAA,SACEb,EACApQ,EACAkQ,GACA,OAAOlQ,EAAKkR,OAAOd,GAChB3E,KACDC,EAAAA,IAAG,SAACyF,GACEA,aAAiBC,EAAAA,cAAgBlB,GACnCA,EAAMlB,IAAIoB,EAAKe,2BA5BxB7M,EAAAA,sDAFQ2L,KAmCTY,kBCrCE,SAAAQ,EAAoBC,GAAAjS,KAAAiS,OAAAA,EAJZjS,KAAAkS,mBAAqB,kBACrBlS,KAAAmS,kBAAoB,8BACpBnS,KAAAoS,iBAAmB,iBAwB7B,OAnBEJ,EAAA9R,UAAAmS,YAAA,SAAYC,EAA+BC,OAEnCC,EAAOC,OAAOjP,SAASkP,SAASxP,MAAM,KACtCyP,EAAaH,EAAKA,EAAK5R,OAAS,GAAK,IAAM4R,EAAKA,EAAK5R,OAAS,GAAK,IAAM4R,EAAKA,EAAK5R,OAAS,GAClG,GAAI+R,IAAe3S,KAAKkS,oBAAsBS,IAAe3S,KAAKmS,mBAAqBQ,IAAe3S,KAAKoS,iBAEzG,OAAO,MAGDQ,EAAerG,eAAerB,QAAQ,gBAC5C,GAAI0H,GAAgBC,OAAOD,GAAiBC,OAAOrG,KAAKC,OAAM,KAE5D,OAAO,EAGPzM,KAAKiS,OAAOa,SAAS,CAAC,UAAW,CAACC,YAAa,CAACC,UAAWT,EAAMjL,4BAxBxErC,EAAAA,sDAFQgO,EAAAA,UA8BTjB,KCvCAkB,EAAA,WAqBE,SAAAA,EAAoBjB,GAAAjS,KAAAiS,OAAAA,EALZjS,KAAAkS,mBAAqB,kBACrBlS,KAAAmS,kBAAoB,8BACpBnS,KAAAoS,iBAAmB,iBACnBpS,KAAAmT,kBAAoB,gEAgC9B,OA5BED,EAAAhT,UAAAuR,UAAA,SAAUV,EAAuBpQ,GAAjC,IAAA6E,EAAAxF,KACE,OAAOW,EAAKkR,OAAOd,GAAK3E,KACtBgH,EAAAA,WAAU,SAAEC,GACR,GAAIA,aAAeC,EAAAA,kBAAmB,CACpC,GAAmB,MAAfD,EAAIvK,OAgBN,MAAMuK,MAZAb,EAAOC,OAAOjP,SAASkP,SAASxP,MAAM,KACtCyP,EAAaH,EAAKA,EAAK5R,OAAS,GAAK,IAAM4R,EAAKA,EAAK5R,OAAS,GAAK,IAAM4R,EAAKA,EAAK5R,OAAS,GAClG,GAAI+R,IAAenN,EAAK0M,oBAAsBS,IAAenN,EAAK2M,mBAAqBQ,IAAenN,EAAK4M,iBAAkB,KAGrHmB,EAAYC,KAAK,kBAAoBf,OAAOjP,SAASiQ,KAAO,yBAClEvP,QAAQlC,IAAI,mBAAqBwD,EAAK2N,kBAAoBI,GAC1Dd,OAAOjP,SAASiQ,KAAOjO,EAAK2N,kBAAoBI,OAEhD/N,EAAKyM,OAAOa,SAAS,CAAC,UAAW,CAACC,YAAa,KAMrD,OAAOpB,EAAAA,GAAG0B,2BAhCnBpO,EAAAA,sDAF+BgO,EAAAA,UAuChCC,EAnDA,gBCIA,SAAAQ,KAiBA,OAZEA,EAAAxT,UAAAyT,UAAA,SAAU9S,EAAYqE,GACpB,OAAIA,IAASe,UACJpF,EAGLA,GAASA,EAAMD,OAASsE,EACnBrE,EAAMyH,UAAU,EAAGpD,GAAQ,MAE3BrE,uBAbZ+S,EAAAA,KAAI1O,KAAA,CAAC,CACJnB,KAAM,eAgBR2P,kBCjBA,SAAAG,KAiEA,OA5DEA,EAAA3T,UAAAyT,UAAA,SAAU9S,EAAeqE,OACjB4O,EAAkB/R,KAAKgS,QAAQ,IAAIvH,MAAU,IAAIA,KAAK3L,IAAU,KAClEmT,EAAmBjS,KAAKgS,MAAMD,EAAU,SAE5C,OAAIE,GAAY,EACG,IAAbA,EACKA,EAAW,YAEXA,EAAW,cAItBA,EAAWjS,KAAKgS,MAAMD,EAAU,UAChB,EACG,IAAbE,EACKA,EAAW,aAEXA,EAAW,eAItBA,EAAWjS,KAAKgS,MAAMD,EAAU,UAChB,EACG,IAAbE,EACKA,EAAW,YAEXA,EAAW,cAItBA,EAAWjS,KAAKgS,MAAMD,EAAU,SAChB,EACG,IAAbE,EACK,aAEAA,EAAW,aAItBA,EAAWjS,KAAKgS,MAAMD,EAAU,QAChB,EACG,IAAbE,EACKA,EAAW,YAEXA,EAAW,cAItBA,EAAWjS,KAAKgS,MAAMD,EAAU,MAChB,EACG,IAAbE,EACKA,EAAW,cAEXA,EAAW,eAIf,gCA9DVJ,EAAAA,KAAI1O,KAAA,CAAC,CACJnB,KAAM,oBAgER8P,kBC5DA,SAAAI,KA6CA,OAjCEA,EAAA/T,UAAAyT,UAAA,SAAUzL,EACAgM,EACAC,EACAC,EACAC,GACR,QAHQ,IAAAF,IAAAA,EAAA,oCACA,IAAAC,IAAAA,GAAA,QACA,IAAAC,IAAAA,EAAA,oBACJH,GAAiBhM,GAAQiM,EAAQ,KAC/BG,EAAa,GACXC,EAAoBH,EAAsB,GAAN,IAC1C,OAAQD,GACN,IAAK,eACHG,EAAQ,IAAIE,OAAON,EAAeK,GAClC,MAEF,IAAK,8BACHD,EAAQ,IAAIE,OAAO,IAAMN,EAAeK,GACxC,MAEF,IAAK,cACHD,EAAQ,IAAIE,OAAON,EAAe,IAAMK,GACxC,MAEF,QAEED,EAAQ,IAAIE,OAAON,EAAe,MAGtC,OAAOhM,EAAKtG,QAAQ0S,EAAK,SAAGG,GAAU,MAAA,gBAAgBJ,EAAkB,KAAKI,EAAK,YAGlF,OAAOvM,GAnCJ+L,EAAAS,aAAe,eAEfT,EAAAU,6BAA+B,8BAE/BV,EAAAW,YAAc,kCAVtBhB,EAAAA,KAAI1O,KAAA,CAAC,CACJnB,KAAM,gBA4CRkQ,kBClDA,SAAAY,KAYA,OAPEA,EAAA3U,UAAAyT,UAAA,SAAUrR,EAAcwS,GACtB,OAAOxS,EAAMyS,KAAI,SAAUC,EAAGzV,GAG1B,OAFAyV,EAAI,IAAIxI,KAAKwI,EAAEF,MACfvV,EAAI,IAAIiN,KAAKjN,EAAEuV,MACC,EAAIE,EAAIzV,EAAI,EAAI,yBATvCqU,EAAAA,KAAI1O,KAAA,CAAC,CACJnB,KAAM,kBAWR8Q,kBCZA,SAAAI,KAUA,OAJEA,EAAA/U,UAAAyT,UAAA,SAAU9S,EAAYqE,GAClB,OAAOrE,EAAM6E,QAAQwP,+BAP1BtB,EAAAA,KAAI1O,KAAA,CAAC,CACJnB,KAAM,UACNoR,MAAM,MAQRF,KCHAG,EAAA,WA+BE,SAAAA,IAPSpV,KAAAqV,YAAsBrV,KAAKqV,YAAarV,KAAKqV,WAM5CrV,KAAAsV,mBAA2C,IAAIlI,EAAAA,aAQ3D,OAJEgI,EAAAlV,UAAAqV,mBAAA,SAAmBhM,GACjBvJ,KAAKsV,mBAAmB3H,KAAKpE,wBAnChCP,EAAAA,UAAS9D,KAAA,CAAC,CACT+D,SAAU,+BACVlC,SAAA,s8DAOCsC,EAAAA,oBAKAA,EAAAA,8BAKAA,EAAAA,0BAKAA,EAAAA,kCAMAyE,EAAAA,UAQHsH,EAtCA,GCAAI,GAAA,SAAAC,GAUI,SAAAD,WACIC,EAAA/U,KAAAV,OAAOA,KAUf,OAhBgD0V,EAAAA,EAAAA,GAY5CF,EAAAtV,UAAAqF,SAAA,iCAjBHyD,EAAAA,UAAS9D,KAAA,CAAC,CACT+D,SAAU,0BACVlC,SAAA,2tDAmBFyO,EArBA,CAKgDJ,GCZhDO,GAAA,WAAA,SAAAA,KAWA,OAJEA,EAAAzV,UAAAwJ,YAAA,SAAYC,GAEV,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAEJgM,EAXA,GCJAC,GAAA,WAQE,SAAAA,IAEO5V,KAAA6V,aAAY,SACjBtM,EAAYuM,EAAcC,EAAiBC,EAAiB5P,EAAkB6P,GAW9E,OAVkB,IAAIN,IAAgBjM,YACpC,CACEH,GAAIA,EACJuM,KAAMA,EACNC,OAAQA,EACRC,QAASA,EACT5P,QAASA,EACT6P,QAASA,KAMRjW,KAAAkW,cAAa,SAAIC,EAAwCC,GAU9D,OATAD,EAAsB9E,QAAO,SAAEgF,OACvBC,EAAMF,EAAeG,UAAS,SAACC,GAAQ,OAAAA,EAAKjN,KAAO8M,EAAc9M,KACnE+M,GAAO,EACTF,EAAeE,GAAOD,EAGtBD,EAAehV,KAAKiV,KAGjBD,GAGFpW,KAAAyW,WAAU,SAAIC,EAA0BN,GAI7C,OAHAM,EAAQrF,QAAO,SAACsF,GACdP,EAAehV,KAAKuV,KAEfP,GAGFpW,KAAA4W,cAAa,SAAIF,EAA0BN,GAKhD,OAJAM,EAAQrF,QAAO,SAACsF,OACRL,EAAMF,EAAeG,UAAS,SAACC,GAAQ,OAAAA,EAAKjN,KAAOoN,EAAOpN,KAChE6M,EAAeS,OAAOP,EAAK,KAEtBF,8BA/CVnR,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,wJAJd,GCgBA2R,GAAA,WAUE,SAAAA,EAAoBxE,GAApB,IAAA9M,EAAAxF,KAAoBA,KAAAsS,MAAAA,EAsBpBtS,KAAA+W,eAAiB,CACf,CACEC,UAAc,UACdC,WAAe,gBACfC,aAAiB,oGAGnB,CACEF,UAAc,YACdC,WAAe,gBACfC,aAAiB,2GAGnB,CACEF,UAAc,kBACdC,WAAe,gBACfC,aAAiB,6HArCnBlX,KAAKoE,QAAU,GACfpE,KAAKsS,MAAM6E,OAAOlP,UAAS,SAACkP,GAC1BjT,QAAQlC,IAAImV,GACZjT,QAAQlC,IAAImV,EAAkB,WAC9BjT,QAAQlC,IAAImV,EAAO,eACQ,MAAvBA,EAAkB,WACpB3R,EAAK4R,KAAOD,EAAkB,UAC9B3R,EAAK6R,MAAQ7R,EAAKuR,eAAeO,KAAI,SAAC/S,GAAK,OAAAA,EAAEyS,YAAcxR,EAAK4R,OAAMH,WACtEzR,EAAKpB,QAAUoB,EAAKuR,eAAeO,KAAI,SAAC/S,GAAK,OAAAA,EAAEyS,YAAcxR,EAAK4R,OAAMF,aACxE1R,EAAK0C,KAAOiP,EAAkB,WAE9B3R,EAAK4R,KAAO,uBAqCpB,OAJEN,EAAA5W,UAAAqF,SAAA,iCAvDDyD,EAAAA,UAAS9D,KAAA,CAAC,CACT+D,SAAU,uBACVlC,SAAA,22BAjBMwQ,EAAAA,kBA0ERT,EA3DA,iBCJE,SAAAU,IAFUxX,KAAAyX,YAAc,IAAIrK,EAAAA,aAS9B,OAJEoK,EAAAtX,UAAAqF,SAAA,WACEvF,KAAKyX,YAAY9J,4BAZpB+J,EAAAA,UAASxS,KAAA,CAAC,CACT+D,SAAU,eACV0O,SAAU,kFAGTtO,EAAAA,2BACAyE,EAAAA,UASH0J,KCfAI,GAAA,WAAA,SAAAA,KAYA,OAJEA,EAAA1X,UAAAwJ,YAAA,SAAYC,GAEV,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAEJiO,EAZA,iBAcA,SAAAC,KAaA,OAJEA,EAAA3X,UAAAwJ,YAAA,SAAYC,GAEV,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAEJkO,KC/BAC,GAAA,WAcE,SAAAA,EAAoBtU,EAA4BuU,GAA5B/X,KAAAwD,SAAAA,EAA4BxD,KAAA+X,mBAAAA,SAGzCD,EAAA5X,UAAA8X,oBAAP,SAA2BpJ,EAAmBuB,EAAiB8H,OACvD7H,EAASD,EAAU,kDACnBjC,EAA8B,IAAIH,EAGxC,OAFAG,EAAQY,KAAOrN,EAAsBC,aAAa4N,KAAKC,UAAU0I,IAE1DjY,KAAK+X,mBAAmB3I,kBAAkBgB,EAAQ,SAAU,GAAIxB,EAAW3I,UAAWA,UAAWA,UAAWiI,GAChH9B,KACCM,EAAAA,IAAG,SAAC7L,GAAS,OAAAA,MAIZiX,EAAA5X,UAAAgY,iBAAP,SAAwB/H,EAAiBL,EAAmBC,OAEpDK,EAASD,EAAU,kDAEzB,OAAOnQ,KAAK+X,mBAAmBlI,eAAeO,EAAQ,SAAUN,EAAUC,GACvE3D,KACCM,EAAAA,IAAG,SAAC7L,GACA,GAAIA,EAAMmO,mBAAmBpO,OAAS,EAAG,KACjCyP,GAAW,IAAIwH,IAAgBnO,YAAY4F,KAAKgB,MAAMzP,EAAMmO,mBAAmB,GAAGd,QAAQY,OAEhG,OADAuB,EAAS9G,GAAK1I,EAAMmO,mBAAmB,GAAGzF,GACnC8G,EAEP,OAAOpK,cAOZ6R,EAAA5X,UAAAiY,oBAAP,SAA2BvJ,EAAmBuB,EAAiB8H,EAA8B1O,GAA7F,IAAA/D,EAAAxF,KACQoQ,EAASD,EAAU,kDACnBjC,EAA8B,IAAIH,EACxCG,EAAQY,KAAOrN,EAAsBC,aAAa4N,KAAKC,UAAU0I,QAC3DvH,EAA0B,IAAI1C,EACpC0C,EAAMxC,QAAUA,EAChBwC,EAAM9B,UAAYA,EAClB8B,EAAM3M,KAAOqM,EACbM,EAAMlH,KAAO,SACbkH,EAAMnH,GAAKA,MACLoH,EAA0B,IAAI5B,EAIpC,OAHA4B,EAAO3B,mBAAqB,GAC5B2B,EAAO3B,mBAAmB5N,KAAKsP,GAExB1Q,KAAK+X,mBAAmBtI,kBAAkBkB,EAAO3B,oBACrD5C,KACCM,EAAAA,IAAG,SAAC7L,GAGF,OADA2E,EAAK0S,iBAAiB/H,GAAS,GAAM,GAAMlI,aACpC,IAAI4P,IAAgBnO,YAAa4F,KAAKgB,MAAMzP,EAAMmO,mBAAmB,GAAGd,QAAQY,+BAzDhG7J,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANN+D,EAAAA,gBAGAiG,kJAPR,kBCcE,SAAAiJ,EAAoBC,EAAiCtD,EAAuBzV,GAA5E,IAAAkG,EACEiQ,EAAA/U,KAAAV,OAAOA,YADWwF,EAAA6S,UAAAA,EAAiC7S,EAAAuP,KAAAA,EAAuBvP,EAAAlG,EAAAA,EAE1EkG,EAAK0C,KAAO5I,IA+DhB,OApE+CoW,EAAAA,EAAAA,GAiB7C0C,EAAAlY,UAAAoY,QAAA,WAAA,IAAA9S,EAAAxF,KAGQuY,EAAgB,CACpBC,EAAAA,GAAaxY,KAAKkI,MAClBlI,KAAKqY,UAAUI,KACfzY,KAAK+U,KAAK2D,YAMZ,OAFA1Y,KAAKqY,UAAUzX,OAASZ,KAAKkI,KAAKtH,OAE3B+X,EAAAA,MAAKC,WAAA,EAAAtX,EAAIiX,IAAenM,KAAKM,EAAAA,IAAG,WACrC,OAAOlH,EAAKqT,aAAarT,EAAKsT,cAAaxX,EAAKkE,EAAK0C,YAQzDkQ,EAAAlY,UAAA6Y,WAAA,aAMQX,EAAAlY,UAAA2Y,aAAR,SAAqB3Q,OACb8Q,EAAahZ,KAAKqY,UAAUY,UAAYjZ,KAAKqY,UAAUa,SAC7D,OAAOhR,EAAK2O,OAAOmC,EAAYhZ,KAAKqY,UAAUa,WAOxCd,EAAAlY,UAAA4Y,cAAR,SAAsB5Q,GAAtB,IAAA1C,EAAAxF,KACE,OAAKA,KAAK+U,KAAKoE,QAAkC,KAAxBnZ,KAAK+U,KAAKqE,UAI5BlR,EAAK6M,KAAI,SAAEC,EAAGzV,OACb8Z,EAAgC,QAAxB7T,EAAKuP,KAAKqE,UAExB,OAAIpE,EAAEnV,eAAe2F,EAAKuP,KAAKoE,SAAW5Z,EAAEM,eAAe2F,EAAKuP,KAAKoE,QAU3E,SAAiBnE,EAAGzV,EAAG8Z,GACrB,OAAQrE,EAAIzV,GAAK,EAAI,IAAM8Z,EAAQ,GAAK,GAV3BC,CAAQtE,EAAExP,EAAKuP,KAAKoE,QAAS5Z,EAAEiG,EAAKuP,KAAKoE,QAASE,GAElD,IATFnR,GAabkQ,GApE+CmB,EAAAA,YCX/C,IAAAC,GAAA,WAKA,SAAAA,IAYExZ,KAAAuJ,GAAa,IAAMxH,KAAK0X,SAAStN,SAAS,IAAI9I,OAAO,EAAG,GAGxDrD,KAAA0Z,iBAAmB,GACnB1Z,KAAA2Z,QAAU,GA2DZ,OAzDEH,EAAAtZ,UAAAqF,SAAA,WACEvF,KAAK4Z,eAIPJ,EAAAtZ,UAAA2Z,YAAA,SAAYC,GACV5V,QAAQlC,IAAI,iBACZhC,KAAK4Z,eAKPJ,EAAAtZ,UAAA0Z,YAAA,eAEQG,EAAmBzK,KAAKgB,MAAMtQ,KAAKga,YAIzC,GAFAha,KAAKia,WAAa,IAAI7B,GAA0BpY,KAAKqY,UAAWrY,KAAK+U,KAAMgF,GAE5C,MAA3BA,EAAiBnZ,QACfmZ,EAAiBnZ,OAAS,GAED,MAAvBmZ,EAAiB,GAAY,KACzBG,EAAY,GACd5Z,EAAI,aACG6Z,GACLJ,EAAiB,GAAGla,eAAesa,KAErCC,EAAKV,iBAAiBtY,KAAK+Y,GAC3BD,EAAU5Z,GAAK,GACf4Z,EAAU5Z,GAAc,UAAI6Z,EAC5BD,EAAU5Z,GAAW,OAAI6Z,EACzBD,EAAU5Z,GAAG+Z,KAAI,SAAaC,GAC5B,MAAO,GAAGA,EAAQH,IAEpBC,EAAKT,QAAUO,GAEjB5Z,YAZF,IAAK,IAAM6Z,KAAcJ,EAAiB,KAA/BI,KA2BnBX,EAAAtZ,UAAAqa,YAAA,SAAYC,GAEV,OAAO/Y,EAAsBU,iBAAiBqY,wBAvEjDxR,EAAAA,UAAS9D,KAAA,CAAC,CACT+D,SAAU,uBACVlC,SAAA,w1CAICsC,EAAAA,yBACAF,EAAAA,UAASjE,KAAA,CAACuV,EAAAA,aAAc,CAAErR,UAAQ,kBAClCD,EAAAA,UAASjE,KAAA,CAACwV,EAAAA,QAAS,CAAEtR,UAAQ,OAmEhCoQ,EAhFA,iBCuBA,SAAAmB,IAGE3a,KAAA4a,MAAkBC,GAASC,IAC3B9a,KAAA+a,aAAc,EAoHhB,OAlHUJ,EAAAza,UAAA8a,WAAR,SAAmBC,EACAL,EACAzD,GACjB,GAAInX,KAAKkb,UAAUN,GAAQ,KACrB/Z,EAAQ,GAGRb,KAAK+a,cACPla,EAAQ,IAAI2L,KAAS,OAEvB3L,GAAS,uBAAyBga,GAAS7a,KAAK4a,OAAS,KAAO5a,KAAKmb,eAAeP,GAAS,IAC7F/Z,GAAS,eAAiBoa,EACtB9D,EAAOvW,SACTC,GAAS,kBACLb,KAAKob,aAAajE,IAIxBjT,QAAQlC,IAAInB,KAIR8Z,EAAAza,UAAAgb,UAAR,SAAkBN,OACZS,GAAM,EAMV,OALKT,GAAS5a,KAAK4a,OACjBA,IAAUC,GAASS,KACnBtb,KAAK4a,QAAUC,GAASC,OACxBO,GAAM,GAEDA,GAGDV,EAAAza,UAAAkb,aAAR,SAAqBjE,WACfkE,EAAclE,EAAO7T,KAAK,KAE9B,GAAI6T,EAAOoE,KAAI,SAAC3b,GAAK,MAAa,iBAANA,IAAiB,CAC3Cyb,EAAM,OAEN,IAAmB,IAAAG,EAAA1W,EAAAqS,GAAMsE,EAAAD,EAAA7a,QAAA8a,EAAA3a,KAAA2a,EAAAD,EAAA7a,OAAE,CAAtB,IAAM6V,EAAIiF,EAAA5a,MACbwa,GAAO/L,KAAKC,UAAUiH,GAAQ,0GAGlC,OAAO6E,GAITV,EAAAza,UAAAwb,MAAA,SAAMT,OAAa,IAAAU,EAAA,GAAAC,EAAA,EAAAA,EAAAra,UAAAX,OAAAgb,IAAAD,EAAAC,EAAA,GAAAra,UAAAqa,GACjB5b,KAAKgb,WAAWC,EAAKJ,GAASgB,MAC5BF,IAGJhB,EAAAza,UAAA4b,KAAA,SAAKb,OAAa,IAAAU,EAAA,GAAAC,EAAA,EAAAA,EAAAra,UAAAX,OAAAgb,IAAAD,EAAAC,EAAA,GAAAra,UAAAqa,GAChB5b,KAAKgb,WAAWC,EAAKJ,GAASkB,KAC5BJ,IAGJhB,EAAAza,UAAA8b,KAAA,SAAKf,OAAa,IAAAU,EAAA,GAAAC,EAAA,EAAAA,EAAAra,UAAAX,OAAAgb,IAAAD,EAAAC,EAAA,GAAAra,UAAAqa,GAChB5b,KAAKgb,WAAWC,EAAKJ,GAASoB,KAC5BN,IAGJhB,EAAAza,UAAAmB,MAAA,SAAM4Z,OAAa,IAAAU,EAAA,GAAAC,EAAA,EAAAA,EAAAra,UAAAX,OAAAgb,IAAAD,EAAAC,EAAA,GAAAra,UAAAqa,GACjB5b,KAAKgb,WAAWC,EAAKJ,GAASqB,MAC5BP,IAGJhB,EAAAza,UAAAic,MAAA,SAAMlB,OAAa,IAAAU,EAAA,GAAAC,EAAA,EAAAA,EAAAra,UAAAX,OAAAgb,IAAAD,EAAAC,EAAA,GAAAra,UAAAqa,GACjB5b,KAAKgb,WAAWC,EAAKJ,GAASuB,MAC5BT,IAGJhB,EAAAza,UAAA8B,IAAA,SAAIiZ,OAAa,IAAAU,EAAA,GAAAC,EAAA,EAAAA,EAAAra,UAAAX,OAAAgb,IAAAD,EAAAC,EAAA,GAAAra,UAAAqa,GACf5b,KAAKgb,WAAWC,EAAKJ,GAASC,IAC5Ba,IAEIhB,EAAAza,UAAAib,eAAR,SAAuBP,OACjByB,EAAK,GACT,OAAQzB,GACN,KAAKC,GAASC,IACZuB,EAAK,MACL,MAEF,KAAKxB,GAASgB,MACZQ,EAAK,QACL,MAEF,KAAKxB,GAASqB,MACZG,EAAK,QACL,MAEF,KAAKxB,GAASuB,MACZC,EAAK,QACL,MAEF,KAAKxB,GAASkB,KACZM,EAAK,OACL,MAEF,KAAKxB,GAASS,IACZe,EAAK,MACL,MAEF,KAAKxB,GAASoB,KACZI,EAAK,OAQT,OAAOA,uBArHVpX,EAAAA,aAwHD0V,SAGEG,IAAA,EACAe,MAAA,EACAE,KAAA,EACAE,KAAA,EACAC,MAAA,EACAE,MAAA,EACAd,IAAA,0IC9IF,IAAAgB,GAAA,SAAA7G,GAoBE,SAAA6G,EAAoBC,GAApB,IAAA/W,EACEiQ,EAAA/U,KAAAV,OAAOA,YADWwF,EAAA+W,OAAAA,EARV/W,EAAAgX,cAAmC,IAAIpP,EAAAA,aAEjD5H,EAAAiX,SAAW,GAQTF,EAAOT,KAAK,8BAwBhB,OAzCoDpG,EAAAA,EAAAA,GAWlD4G,EAAApc,UAAAwc,UAAA,SAAUpC,GACRA,EAAQqC,aAAerC,EAAQqC,aAS1BL,EAAApc,UAAA0c,QAAP,SAAeC,WAEPC,EAASxN,KAAKgB,MAAMhB,KAAKC,UAAUvP,KAAKia,WAAW/R,OAEnD6U,EAAgB,IAAIpd,UAC1B,IAAmB,IAAAqd,EAAAlY,EAAAgY,GAAMG,EAAAD,EAAArc,QAAAsc,EAAAnc,KAAAmc,EAAAD,EAAArc,OAAE,CAAtB,IAAMuc,EAAID,EAAApc,MAETqc,EAAKP,qBACAO,EAAc,eACdA,EAAkB,YACzBH,EAAc3b,KAAK8b,yGAKvBld,KAAKyc,SAAWnN,KAAKC,UAAUwN,GAC/B/c,KAAKwc,cAAc7O,KAAK3N,KAAKyc,+BA1ChCzT,EAAAA,UAAS9D,KAAA,CAAC,CACT+D,SAAU,8BACVlC,SAAA,mtDAVM4T,6CAoBL7M,EAAAA,UAkCHwO,EA9CA,CAKoD9C,ICJpD2D,GAAA,WA6BE,SAAAA,IAFUnd,KAAAod,gBAAwC,IAAIhQ,EAAAA,aAWxD,OAPI+P,EAAAjd,UAAAmd,gBAAA,SAAgB9T,GACdvJ,KAAKod,gBAAgBzP,KAAKpE,IAG5B4T,EAAAjd,UAAAqF,SAAA,iCAnCHyD,EAAAA,UAAS9D,KAAA,CAAC,CACP+D,SAAU,oCACVlC,SAAA,ggCAQDsC,EAAAA,qBAKAA,EAAAA,uBAKAA,EAAAA,+BAOAyE,EAAAA,UAWHqP,EAtCA,GCIAG,GAAA,WAgBI,SAAAA,EAAsBhL,EAAiCiL,EAAwDC,GAA/G,IAAAhY,EAAAxF,KAAsBA,KAAAsS,MAAAA,EAAiCtS,KAAAud,qBAAAA,EAAwDvd,KAAAwd,SAAAA,EALxGxd,KAAAyd,gBAAiB,EAsBjBzd,KAAA0d,gBAAe,WACpBlY,EAAK+X,qBAAqBpF,oBAAoB3S,EAAKoJ,UAAWpJ,EAAKyS,cAAc9H,QAAS3K,EAAKyS,cAAezS,EAAKyS,cAAc1O,IAAItB,UAAS,SAC1IuH,GACIhK,EAAKgY,SAAS7U,KAAK,8BAA+B,KAAM,CACpDgV,SAAU,OAEjB,SACDtc,GACImE,EAAKgY,SAAS7U,KAAK,2CAA4C,KAAM,CACjEgV,SAAU,SAM5B,OA9BIL,EAAApd,UAAAqF,SAAA,WACEvF,KAAKiY,cAAgBjY,KAAKsS,MAAMsL,SAAS1V,KAAK2V,oBAC9C7d,KAAK8d,OAAS9d,KAAKsS,MAAMsL,SAAS1V,KAAK4V,OACvC9d,KAAK4O,UAAYiE,OAAO7S,KAAK8d,OAAOC,yBAAyBxU,IAAIyU,UAE/Dhe,KAAKie,iBAAmBje,KAAKiY,cAAcgG,iBAE3Cje,KAAKke,YAAcle,KAAKiY,cAAciG,YACtCle,KAAKme,iBAAmBne,KAAKiY,cAAcmG,kBAGrCd,EAAApd,UAAAme,SAAV,WACE,OAAOre,KAAKsS,2BA9BjBtJ,EAAAA,UAAS9D,KAAA,CAAC,CACP+D,SAAU,kCACVlC,SAAA,8pEAhBKwQ,EAAAA,sBAEAO,UAEAwG,EAAAA,eA0DThB,EAhDA,GCbAiB,GAAA,WAIA,OAHE,SAAmBC,EACAC,GADAze,KAAAwe,OAAAA,EACAxe,KAAAye,QAAAA,GAFrB,GCaAC,GAAA,WAkBE,SAAAA,EAAoBzM,EAAwBK,EAA+BqM,EAA+Cnb,GAA1H,IAAAgC,EAAAxF,KAAoBA,KAAAiS,OAAAA,EAAwBjS,KAAAsS,MAAAA,EAA+BtS,KAAA2e,cAAAA,EAA+C3e,KAAAwD,SAAAA,EAJhHxD,KAAA4e,YAAyC,IAAIxR,EAAAA,aAM/CpN,KAAA6e,qBAAoB,WAG1B,MADgB,CADGrZ,EAAKmZ,cAAc9I,aAAa,QAAS,kBAAkB,EAAM,SAAS,GAAM,KAK9F7V,KAAA8e,qBAAoB,SAAIvV,GAC7B/D,EAAKuZ,WAAaxV,MACZjC,EAAM9B,EAAKwZ,UAAYzV,EAAG5D,cAAczC,MAAM,KAAKI,KAAK,KAC9DkC,EAAKyM,OAAOa,SAAS,CAACxL,KAGjBtH,KAAAif,yBAAwB,SAAIC,GAChB,UAAbA,GACF1Z,EAAKoZ,YAAYjR,KAAK,IAAI4Q,GAAY,cAAe,QAIzDve,KAAAmf,WAAU,SAAIhL,GACZ3O,EAAKuZ,WAAa5K,EAClBjQ,QAAQlC,IAAI,qBAAuBmS,IAQvC,OALEuK,EAAAxe,UAAAqF,SAAA,WACEvF,KAAKoW,eAAiBpW,KAAK6e,4CA5C9B7V,EAAAA,UAAS9D,KAAA,CAAC,CACT+D,SAAU,+BACVlC,SAAA,ijEAhBMkM,EAAAA,cAAesE,EAAAA,sBAGd3B,UAFA1M,EAAAA,+CAmBNG,EAAAA,+BACAA,EAAAA,2BAOAyE,EAAAA,UAkCH4Q,EAhDA,GCLAU,GAAA,WAiCI,SAAAA,IAAA,IAAA5Z,EAAAxF,KALQA,KAAAqf,gBAAwC,IAAIjS,EAAAA,aAkBpDpN,KAAAsf,gBAAe,WACX9Z,EAAK6Z,gBAAgB1R,KAAK,SAIlC,OAZIyR,EAAAlf,UAAAqF,SAAA,WACErB,QAAQlC,IAAIhC,2BAxCjBgJ,EAAAA,UAAS9D,KAAA,CAAC,CACP+D,SAAU,+BACVlC,SAAA,i3TAQDsC,EAAAA,wBAIAA,EAAAA,+BAIAA,EAAAA,0BAIAA,EAAAA,+BAMAyE,EAAAA,UAuBHsR,EAnDA,GCNAG,GAAA,WAAA,SAAAA,KAQA,OAJIA,EAAArf,UAAAwJ,YAAA,SAAYC,GAER,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAER4V,EARA,iBAUA,SAAAC,KAaA,OAJIA,EAAAtf,UAAAwJ,YAAA,SAAYC,GAER,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAER6V,mBAEA,SAAAC,KASA,OAJIA,EAAAvf,UAAAwJ,YAAA,SAAYC,GAER,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAER8V,KCtCAC,GAAA,WAcI,SAAAA,EACY3H,GAAA/X,KAAA+X,mBAAAA,SAIL2H,EAAAxf,UAAAyf,+BAAP,SAAsC/Q,EAAmBuB,EAAiByP,OAChExP,EAASD,EAAU,+DACnBjC,EAA8B,IAAIH,EAGxC,OAFAG,EAAQY,KAAOrN,EAAsBC,aAAa4N,KAAKC,UAAUqQ,IAE1D5f,KAAK+X,mBAAmB3I,kBAAkBgB,EAAQ,SAAU,GAAIxB,EAAW3I,UAAWA,UAAWA,UAAWiI,GAC9G9B,KACGM,EAAAA,IAAG,SAAC7L,GAAS,OAAAA,MAIlB6e,EAAAxf,UAAA2f,4BAAP,SAAmC1P,EAAiBL,EAAmBC,OAE7DK,EAASD,EAAU,+DAEzB,OAAOnQ,KAAK+X,mBAAmBlI,eAAeO,EAAQ,SAAUN,EAAUC,GACrE3D,KACGM,EAAAA,IAAG,SAAC7L,GACA,GAAIA,EAAMmO,mBAAmBpO,OAAS,EAAG,KAC/ByP,GAAW,IAAIoP,IAA2B/V,YAAY4F,KAAKgB,MAAMzP,EAAMmO,mBAAmB,GAAGd,QAAQY,OAE3G,OADAuB,EAAS9G,GAAK1I,EAAMmO,mBAAmB,GAAGzF,GACnC8G,EAEP,OAAOpK,cAOpByZ,EAAAxf,UAAA4f,+BAAP,SAAsClR,EAAmBuB,EAAiByP,EAAoDrW,GAA9H,IAAA/D,EAAAxF,KACUoQ,EAASD,EAAU,+DACnBjC,EAA8B,IAAIH,EACxCG,EAAQY,KAAOrN,EAAsBC,aAAa4N,KAAKC,UAAUqQ,QAC3DlP,EAA0B,IAAI1C,EACpC0C,EAAMxC,QAAUA,EAChBwC,EAAM9B,UAAYA,EAClB8B,EAAM3M,KAAOqM,EACbM,EAAMlH,KAAO,SACbkH,EAAMnH,GAAKA,MACLoH,EAA0B,IAAI5B,EAIpC,OAHA4B,EAAO3B,mBAAqB,GAC5B2B,EAAO3B,mBAAmB5N,KAAKsP,GAExB1Q,KAAK+X,mBAAmBtI,kBAAkBkB,EAAO3B,oBACnD5C,KACGM,EAAAA,IAAG,SAAC7L,GAGA,OADA2E,EAAKqa,4BAA4B1P,GAAS,GAAM,GAAMlI,aAC/C,IAAIwX,IAA2B/V,YAAa4F,KAAKgB,MAAMzP,EAAMmO,mBAAmB,GAAGd,QAAQY,+BA5DrH7J,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDANLgK,2HAHT,GCAA4Q,GAAA,WAcI,SAAAA,EACWC,EACyB9X,GADzBlI,KAAAggB,UAAAA,EACyBhgB,KAAAkI,KAAAA,EAEhClI,KAAKigB,YAAc/X,EAAKgY,aAQhC,OALIH,EAAA7f,UAAAigB,SAAA,WACIngB,KAAKggB,UAAUI,MAAM,CAAEtO,MAAO,SAAUvI,GAAIvJ,KAAKuJ,GAAIxF,KAAM/D,KAAK+D,4BAnBvEiF,EAAAA,UAAS9D,KAAA,CAAC,CACP+D,SAAU,6BACVlC,SAAA,svCAJKsZ,EAAAA,gDAeAC,EAAAA,OAAMpb,KAAA,CAACqb,EAAAA,sBAUhBR,EA1BA,GCcAS,GAAA,WAiBI,SAAAA,EACYlO,EACAmO,EACAjD,EACAkD,GAJZ,IAAAlb,EAAAxF,KACYA,KAAAsS,MAAAA,EACAtS,KAAAygB,gCAAAA,EACAzgB,KAAAwd,SAAAA,EACAxd,KAAA0gB,OAAAA,EAuDZ1gB,KAAA2gB,oBAAmB,WAEGnb,EAAKkb,OAAO/X,KAAKoX,GAA+B,CAC9Da,MAAO,MACPC,OAAQ,MACRC,SAAU,QACVC,UAAW,QACXC,WAAY,mBACZ9Y,KAAM,CAAEgY,aAAc,kBAGhBe,cAAchZ,UAAS,SAACuH,GAC9B,GAAIA,EAAQ,KACF0R,GAAa,IAAI1B,IAAoB9V,YAAY,CACnDjH,IAAK+M,EAAOjG,GACZ8E,YAAamB,EAAOzL,KACpBod,WAAY,CAAC,IAAI5B,GAAyB,IAAIA,GAAyB,IAAIA,MAG/E/Z,EAAK4b,aAAahgB,KAAK8f,GACvB1b,EAAK6b,oBAAsBH,MAQvClhB,KAAAshB,eAAc,SAAIC,EAAYC,GAC1B,OAAOD,IAAOC,GAGtB,OAjFIhB,EAAAtgB,UAAAqF,SAAA,WACIvF,KAAKyhB,mBAAqBzhB,KAAKsS,MAAMsL,SAAS1V,KAAKwZ,yBACnD1hB,KAAKohB,aAAephB,KAAKyhB,mBAAmBE,YAC5C3hB,KAAK4hB,SAAW5hB,KAAKsS,MAAMsL,SAAS1V,KAAK2Z,eAAelT,MAAMrK,OAAM,SAACgW,GAAW,OAACA,EAAQwH,gBAEzF9hB,KAAK4O,UAAY5O,KAAKsS,MAAMsL,SAAS1V,KAAK4V,OAAOC,yBAAyBxU,GAC1EvJ,KAAKmQ,QAAUnQ,KAAKsS,MAAMsL,SAAS1V,KAAKwZ,yBAAyBvR,QAGjC,GAA5BnQ,KAAKohB,aAAaxgB,SAClBZ,KAAKqhB,oBAAsBrhB,KAAKohB,aAAa,KAOrDZ,EAAAtgB,UAAAwd,gBAAA,WAAA,IAAAlY,EAAAxF,KACIA,KAAKygB,gCAAgCX,+BAA+B9f,KAAK4O,UAAW5O,KAAKmQ,QAASnQ,KAAKyhB,mBAAoBzhB,KAAKyhB,mBAAmBlY,IAAItB,UAAS,SAC5JuH,GACIhK,EAAKgY,SAAS7U,KAAK,oCAAqC,KAAM,CAC1DgV,SAAU,OAEjB,SACDtK,GACI7N,EAAKgY,SAAS7U,KAAK,2CAA4C,KAAM,CACjEgV,SAAU,SAS1B6C,EAAAtgB,UAAA6hB,uBAAA,WAAA,IAAAvc,EAAAxF,KACUgiB,EAAQhiB,KAAKohB,aACnBY,EAAM3Q,QAAO,SAACiJ,GACV,GAAIA,GAAW9U,EAAK6b,oBAAoB,KAC9BY,EAAQD,EAAM/e,QAAQqX,EAAS,GACrC0H,EAAMnL,OAAOoL,EAAO,GACpBzc,EAAK6b,oBAAsBpb,kCApE1C+C,EAAAA,UAAS9D,KAAA,CAAC,CACT+D,SAAU,iCACVlC,SAAA,g2HAfOwQ,EAAAA,sBAEAmI,UAEApB,EAAAA,mBAAa4D,EAAAA,aAqHtB1B,EA5GA,GCdA2B,GAAA,WAwKE,SAAAA,EAAoBC,EAA0CC,EAAoC7e,EAA4ByO,EAAwB5M,GAAtJ,IAAAG,EAAAxF,KAAoBA,KAAAoiB,gBAAAA,EAA0CpiB,KAAAqiB,aAAAA,EAAoCriB,KAAAwD,SAAAA,EAA4BxD,KAAAiS,OAAAA,EAAwBjS,KAAAqF,eAAAA,EACpJrF,KAAKsF,GAAKD,EAEVrF,KAAKiS,OAAOqQ,OAAOra,UAAS,SAAEpH,GAExBA,aAAiB0hB,EAAAA,eAEnB/c,EAAKF,GAAGnB,YAAY,OAAQtD,EAAMyG,OAMtCtH,KAAKoiB,gBAAgBI,kBACnB,mBACAxiB,KAAKqiB,aAAaI,wBAAuB,0wOAmG3CziB,KAAKoiB,gBAAgBI,kBACnB,mBACAxiB,KAAKqiB,aAAaI,wBAAwB,4uBAO5CziB,KAAKoiB,gBAAgBI,kBACnB,eACAxiB,KAAKqiB,aAAaI,wBAAwB,4kBAI5CziB,KAAKoiB,gBAAgBI,kBACnB,WACAxiB,KAAKqiB,aAAaI,wBAAwB,0hCAI5CziB,KAAKoiB,gBAAgBI,kBACnB,aACAxiB,KAAKqiB,aAAaI,wBAAwB,soGAkD5CziB,KAAKoiB,gBAAgBI,kBACnB,sBACAxiB,KAAKqiB,aAAaI,wBAChB,88FAmDR,OAxPSN,EAAAO,QAAP,WACE,MAAO,CACLC,SAAUR,EACVS,UAAW,CAACzT,EAAsB2I,0BA5GvC+K,EAAAA,SAAQ3d,KAAA,CAAC,CACR4d,aAAc,CACZ1d,EACA6H,EACAyG,EACAG,EACAI,EACAY,EACAI,EACAG,EACAI,GACAsB,GACAU,GACAgC,GACA8C,GACAa,GACAG,GACAoB,GACAU,GACAoB,GACAT,IAEFgD,QAAS,CACPC,EAAAA,aACAC,EAAAA,iBACAC,EAAAA,cACAC,EAAAA,wBACAC,EAAAA,gBACAC,EAAAA,cACAC,EAAAA,kBACAC,EAAAA,cACAC,EAAAA,mBACAC,EAAAA,eACAC,EAAAA,cACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,cACAT,EAAAA,cACAU,EAAAA,iBACAC,EAAAA,cACAC,EAAAA,mBACAb,EAAAA,gBACAE,EAAAA,kBACAC,EAAAA,cACAC,EAAAA,mBACAC,EAAAA,eACAS,EAAAA,iBACAR,EAAAA,cACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,gBACAC,EAAAA,cACAT,EAAAA,cACAU,EAAAA,iBACAC,EAAAA,cACAG,EAAAA,sBACAC,EAAAA,YACAC,EAAAA,iBACAC,EAAAA,gBACAF,EAAAA,YACAG,EAAAA,oBACAC,EAAAA,cACAC,EAAAA,eACAC,EAAAA,mBACAC,EAAAA,cAEFC,QAAS,CACPxf,EACA6H,EACAuI,GACA9B,EACAG,EACAI,EACAY,EACAI,EACAG,EACA0B,GACAU,GACAgC,GACA8C,GACAa,GACAG,GACAoB,GACAU,GACAW,IAEF6C,UAAW,CACThS,EACAgF,GACA5D,EAEA,CAAC6S,QAASC,EAAAA,kBAAmBC,SAAUvT,EAAoBwT,OAAO,GAElE,CAACH,QAASC,EAAAA,kBAAmBC,SAAU7R,EAAsB8R,OAAO,IAItEC,gBAAiB,CAAClF,iDA9IHmF,EAAAA,uBARMC,EAAAA,oBA8CDjc,EAAAA,gBAFC+J,EAAAA,cAMfpP,KAmWRse,EAzZA,GCAAiD,GAAA,WAYI,SAAAA,EACY3E,GADZ,IAAAjb,EAAAxF,KACYA,KAAAygB,gCAAAA,EAILzgB,KAAAqlB,eAAc,SAAI5iB,EAAa0N,GAOlC,OANoB3K,EAAKib,gCAAgCZ,4BAA4B1P,GAAS,GAAM,GAAM/D,KACtGM,EAAAA,IAAG,SAAC0U,GAEA,OADaA,EAAaO,YAAYrd,OAAM,SAACgW,GAAW,OAAAA,EAAQ7X,MAAQA,IAAM,OAOnFzC,KAAAslB,sBAAqB,SAAIC,EAAgBpV,GAC5C,OAAO3K,EAAKib,gCAAgCZ,4BAA4B1P,GAAS,GAAM,GAAM/D,KACzFM,EAAAA,IAAG,SAAC0U,OACMoE,EAAiBpE,EAAaO,YAAYrd,OAAM,SAACgW,GAAW,OAAkC,GAAlCA,EAAQ3L,MAAM1L,QAAQsiB,KACxF,OAAQC,EAAe5kB,QACnB,KAAK,EACD,OAAOqF,UACX,KAAK,EAEL,QACI,OAAOuf,EAAe,mCA/B7CvgB,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDAHLua,6HAJT,GCKA+F,GAAA,WAAA,SAAAA,KAMA,OAJIA,EAAAvlB,UAAAwJ,YAAA,SAAYC,GAER,OADAnK,OAAOoK,OAAM,KAAOD,GACpB,MAER8b,EANA,iBAWA,OAHA,8BCWE,SAAAC,EAAoBjd,GAAAzI,KAAAyI,KAAAA,EAFpBzI,KAAA2lB,eAAiB,gBAmGjB3lB,KAAA4R,YAAW,SACTb,EACApQ,GACA,OAAOA,EAAKkR,OAAOd,IAEvB,OAnGS2U,EAAAxlB,UAAA0lB,aAAP,SAAoBte,GAClB,OAAOtH,KAAKyI,KAAKwH,IAAI3I,IAGvBoe,EAAAxlB,UAAAuR,UAAA,SAAUV,EAAuBpQ,GAAjC,IAAA6E,EAAAxF,KAGQ6lB,EAAc9U,EAAI+U,QAMxB,GAAqB,WAHJ/U,EAAIzJ,IAAIpE,MAAM,KACJ,GAAGA,MAAM,KAEtB,GACZ,OAAOlD,KAAK4R,YAAYiU,EAAallB,OAKjColB,EAAWF,EAAYve,IAAIpE,MAAM,KAAK,GACtC8iB,EAAqBD,EAAS7iB,MAAM,KAEtC+iB,GADmBF,EAAS7iB,MAAM,KAC3BlD,KAAK2lB,gBAEZO,EAAe,OACC,UAAhBF,EAAS,IAAkC,WAAhBA,EAAS,IACtCA,EAASnP,OAAO,EAAG,GAEC,gBAAhBmP,EAAS,KACXE,EAAe,SAIjBF,EAASnP,OAAO,EAAG,GAErBmP,EAASnP,OAAO,EAAGmP,EAASplB,QAAQyQ,QAAO,SAAE8U,GAC3CF,EAAOA,EAAO,IAAME,IAGpBF,GADmB,SAAjBC,EACY,QAEA,WAGZlW,EAAU,GACO,SAAjBkW,IACFlW,EAAU,CAAEkW,aAAc,aAEtBE,EAAc,IAAIC,EAAAA,YAAW,MAEjCJ,EACAjW,GAIF,OADAe,GADAA,EAAMvR,OAAOoK,OAAOmH,EAAKqV,IACfN,QACHnlB,EAAKkR,OAAOd,GAAK3E,KACtBka,EAAAA,MAAM,KACN5Z,EAAAA,IAAG,SACDxE,OACM5I,EAAC,EACL,GAAiB,MAAbA,EAAEwJ,OAAgB,CAEpB5E,QAAQlC,IAAI6jB,EAAYve,SACpBif,OAAc,EAgBlB,OAfIre,EAAW,KAAmB,gBAE5BA,EAAW,KAAmB,gBAAE2d,EAAYve,MAC9CY,EAAW,KAAIA,EAAW,KAAmB,gBAAE2d,EAAYve,KAC3DhI,EAAC,EACDinB,EAAiB,IAAIxU,EAAAA,aAAazS,IAIlCknB,EAAAA,WAAW,2CAIbD,EAAiB,IAAIxU,EAAAA,aAAazS,GAE7BinB,EAEP,OAAOre,IAIbkL,EAAAA,WAAU,SACR/R,GAEE,OAAOmE,EAAKoM,YAAYiU,EAAallB,2BA/F9CsE,EAAAA,sDAJ2E+H,EAAAA,cA8G5E0Y,mBCjGE,SAAAe,EAAoBC,EAA6CnJ,EAAsD9U,EAA0BjF,GAAjJ,IAAAgC,EAAAxF,KAAoBA,KAAA0mB,cAAAA,EAA6C1mB,KAAAud,qBAAAA,EAAsDvd,KAAAyI,KAAAA,EAA0BzI,KAAAwD,SAAAA,EAPjJxD,KAAA2mB,mBAAqBllB,EAAsBkC,4BAA4B3D,KAAKwD,SAAU,uCACtFxD,KAAA4mB,WAAanlB,EAAsBkC,4BAA4B3D,KAAKwD,SAAU,8BAUvExD,KAAA6mB,WAAU,SAAIjY,GACnBpJ,EAAKoJ,UAAYA,GAIX5O,KAAA8mB,oBAAmB,WACzB,OAAOthB,EAAKiD,KAAKwH,IAAIzK,EAAKmhB,qBAIpB3mB,KAAA+mB,SAAQ,WACd,OAAOvhB,EAAKiD,KAAKwH,IAAIzK,EAAKohB,YAAYxa,KACpCM,EAAAA,IAAG,SAACyD,OACI6W,GAAgB,IAAI9X,GAAgBxF,YAAYyG,GAEtD,OADA3K,EAAK2K,QAAU6W,EAAc7W,QACtB6W,MA6Df,OAvDEP,EAAAvmB,UAAAkL,QAAA,WAAA,IAAA5F,EAAAxF,KAoDE,OAnDkBA,KAAK+mB,WAAW3a,KAChC6a,EAAAA,UAAS,SAAC9W,GAAW,OAAA3K,EAAK+X,qBAAqBrF,iBAAiB/H,EAAQA,SAAS,GAAM,GACtF/D,KACC8a,EAAAA,SAAQ,SACNjP,GACE,OAAIA,IAAkBhS,UACbT,EAAKshB,sBAAsB1a,KAChC+a,EAAAA,QAAO,SAACC,GAGN,OAFA5hB,EAAK6hB,kBAAmB,IAAIxP,IAAgBnO,YAAY0d,GACxD5hB,EAAK6hB,iBAAiBlX,QAAU3K,EAAK2K,QAC9B3K,EAAK+X,qBAAqBvF,oBAC/BxS,EAAKoJ,UACLpJ,EAAK6hB,iBAAiBlX,QACtB3K,EAAK6hB,kBACJjb,KACC+a,EAAAA,QAAO,SACL3X,OACQ8X,EAAe9hB,EAAK6hB,iBAE1B,OADAC,EAAa/d,GAAKiG,EACXhK,EAAK+X,qBAAqBpF,oBAC/B3S,EAAKoJ,UACL0Y,EAAanX,QACbmX,EACA9X,GAAQpD,KACN+a,EAAAA,QAAO,SAEPI,GACI,OAAO/hB,EAAK+X,qBAAqBrF,iBAAiB1S,EAAK2K,SAAS,GAAM,GAAM/D,KAC1EM,EAAAA,IAAG,SACD8a,GACE,OAAOA,cAc1B7V,EAAAA,GAAGsG,8BAhFvBhT,EAAAA,sDAPOkK,SAEA2I,UADA9K,EAAAA,kBAGA9D,EAAAA,YA6FRud,mBCzFI,SAAAgB,EAAoBhf,EAA0BjF,GAA9C,IAAAgC,EAAAxF,KAAoBA,KAAAyI,KAAAA,EAA0BzI,KAAAwD,SAAAA,EAH9CxD,KAAA2mB,mBAAqB,6CACrB3mB,KAAA4mB,WAAanlB,EAAsBkC,4BAA4B3D,KAAKwD,SAAU,8BAKtExD,KAAA0nB,2BAA0B,SAAIvX,GAClC,OAAO3K,EAAKiD,KAAKwH,IAAIxO,EAAsBkC,4BAA4B6B,EAAKhC,SAAUgC,EAAKmhB,mBAAmB/kB,QAAQ,YAAauO,MAI/HnQ,KAAA+mB,SAAQ,WACZ,OAAOvhB,EAAKiD,KAAKwH,IAAIzK,EAAKohB,YAAYxa,KAClCM,EAAAA,IAAG,SAACyD,GAEA,OADsB,IAAIjB,GAAgBxF,YAAYyG,OAoBtE,OAdIsX,EAAAvnB,UAAAkL,QAAA,SAAQuc,GAAR,IAAAniB,EAAAxF,KAWI,OATIA,KAAK+mB,WAAW3a,KACZ+a,EAAAA,QAAO,SAAChX,GACJ,OAAO3K,EAAKkiB,2BAA2BvX,EAAQA,SAAS/D,KACpDM,EAAAA,IAAG,SAAC0a,GACA,OAAO,IAAI3B,IAA0B/b,YAAY0d,8BA/B5EniB,EAAAA,sDALQ+H,EAAAA,kBAEA9D,EAAAA,YA0CTue,mBCrBI,SAAAG,EACYlB,EACAjG,EACAhY,EACAjF,GAJZ,IAAAgC,EAAAxF,KACYA,KAAA0mB,cAAAA,EACA1mB,KAAAygB,gCAAAA,EACAzgB,KAAAyI,KAAAA,EACAzI,KAAAwD,SAAAA,EAXZxD,KAAA2mB,mBAAqB,kCACrB3mB,KAAA4mB,WAAanlB,EAAsBkC,4BAA4B3D,KAAKwD,SAAU,8BAcvExD,KAAA6mB,WAAU,SAAIjY,GACjBpJ,EAAKoJ,UAAYA,GAIb5O,KAAA8mB,oBAAmB,WACvB,OAAOthB,EAAKiD,KAAKwH,IAAIxO,EAAsBkC,4BAA4B6B,EAAKhC,SAAUgC,EAAKmhB,sBAIvF3mB,KAAA+mB,SAAQ,WACZ,OAAOvhB,EAAKiD,KAAKwH,IAAIzK,EAAKohB,YAAYxa,KAClCM,EAAAA,IAAG,SAACyD,OACM6W,GAAgB,IAAI9X,GAAgBxF,YAAYyG,GAEtD,OADA3K,EAAK2K,QAAU6W,EAAc7W,QACtB6W,MA6DvB,OAvDIY,EAAA1nB,UAAAkL,QAAA,WAAA,IAAA5F,EAAAxF,KAoDI,OAnDkBA,KAAK+mB,WAAW3a,KAC9B6a,EAAAA,UAAS,SAAC9W,GAAW,OAAA3K,EAAKib,gCAAgCZ,4BAA4B1P,EAAQA,SAAS,GAAM,GACxG/D,KACG8a,EAAAA,SAAQ,SACJjP,GACI,OAAIA,IAAkBhS,UACXT,EAAKshB,sBAAsB1a,KAC9B+a,EAAAA,QAAO,SAACC,GAGJ,OAFA5hB,EAAKqiB,0BAA2B,IAAIpI,IAA2B/V,YAAY0d,GAC3E5hB,EAAKqiB,yBAAyB1X,QAAU3K,EAAK2K,QACtC3K,EAAKib,gCAAgCd,+BACxCna,EAAKoJ,UACLpJ,EAAK2K,QACL3K,EAAKqiB,0BACJzb,KACG+a,EAAAA,QAAO,SACH3X,OACU8X,EAAe9hB,EAAKqiB,yBAE1B,OADAP,EAAa/d,GAAKiG,EACXhK,EAAKib,gCAAgCX,+BACxCta,EAAKoJ,UACLpJ,EAAK2K,QACLmX,EACA9X,GAAQpD,KACJ+a,EAAAA,QAAO,SAEHI,GACI,OAAO/hB,EAAKib,gCAAgCZ,4BAA4Bra,EAAK2K,SAAS,GAAM,GAAM/D,KAC9FM,EAAAA,IAAG,SACC8a,GACI,OAAOA,cAcpD7V,EAAAA,GAAGsG,8BApFzChT,EAAAA,sDARQkK,SAKAuQ,UAJA1S,EAAAA,kBAEA9D,EAAAA,YAmGT0e,mBCxGE,SAAAE,IAJA9nB,KAAA+nB,OAAyD,CACvD,CAAChkB,KAAM,eAAgBC,QAAS,IAAIgkB,EAAAA,UAInC9jB,QAAQlC,IAAI,2CAGf8lB,EAAA5nB,UAAAiE,YAAA,SAAYJ,EAAcK,GACxBpE,KAAKioB,uBAAuBlkB,GAC5B/D,KAAK+nB,OAAOzjB,OAAM,SAACC,GAAK,OAAAA,EAAER,OAASA,IAAM,GAAGC,QAAQrD,KAAK,CAACgB,KAAMyC,KAGlE0jB,EAAA5nB,UAAAsE,cAAA,SAAcT,GACZ/D,KAAKioB,uBAAuBlkB,GAC5B/D,KAAK+nB,OAAOzjB,OAAM,SAACC,GAAK,OAAAA,EAAER,OAASA,IAAM,GAAGC,QAAQrD,QAGtDmnB,EAAA5nB,UAAAuE,WAAA,SAAWV,GAET,OADA/D,KAAKioB,uBAAuBlkB,GACrB/D,KAAK+nB,OAAOzjB,OAAM,SAACC,GAAK,OAAAA,EAAER,OAASA,IAAM,GAAGC,QAAQU,gBAG7DojB,EAAA5nB,UAAA+nB,uBAAA,SAAuBlkB,WACjBa,GAAa,MACjB,IAAgB,IAAAC,EAAAC,EAAA9E,KAAK+nB,QAAMhjB,EAAAF,EAAAlE,QAAAoE,EAAAjE,KAAAiE,EAAAF,EAAAlE,OAAE,CAAjBoE,EAAAlE,MACJkD,OAASA,IAEba,GAAa,wGAGjB,IAAKA,EAAY,CACfV,QAAQlC,IAAI,mBAAqB+B,OAC3BmkB,EAAY,CAACnkB,KAAMA,EAAMC,QAAS,IAAIgkB,EAAAA,SAC5ChoB,KAAK+nB,OAAO3mB,KAAK8mB,yBArCtBjjB,EAAAA,WAAUC,KAAA,CAAC,CAACC,WAAY","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {HashLocationStrategy, Location} from '@angular/common';\n\n// @dynamic\nexport class TcCoreCommonFunctions {\n\n\n  public static escapeString(text) {\n    return text.replace(/\"/g, '\\\"');\n  }\n\n  public static fileSizeToHuman(size) {\n    const e = (Math.log(size) / Math.log(1e3)) | 0;\n    return +(size / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';\n  }\n\n  public static camelCaseToWords(str) {\n    const re =  str.replace(/([a-z])([A-Z])/g, '$1 $2')\n      .replace(/([A-Z])([a-z])/g, ' $1$2')\n      .replace(/\\ +/g, ' ');\n    return re;\n  }\n\n  public static convertToJSON(array) {\n    const objArray = [];\n    for (let i = 1; i < array.length; i++) {\n      objArray[i - 1] = {};\n      for (let k = 0; k < array[0].length && k < array[i].length; k++) {\n        const key = array[0][k];\n        objArray[i - 1][key] = array[i][k];\n      }\n    }\n    return objArray;\n  }\n\n  public static transposeArray(array, arrayLength) {\n    // console.log('transposing array) arrayLength: ' + arrayLength );\n    const newArray = [];\n    for (let i = 0; i < arrayLength; i++) {\n      newArray.push([]);\n    }\n    for (let i = 0; i < array.length; i++) {\n      for (let j = 0; j < arrayLength; j++) {\n        newArray[j].push(array[i][j]);\n      }\n    }\n    return newArray;\n  }\n\n  public static camelize = (str: string): string => {\n    let newStr = '';\n    let newArr = [];\n\n    if (str.indexOf('-') !== -1) {\n      newArr = str.split('-');\n      for (let i = 0; i < newArr.length; i++) {\n        newArr[i] = newArr[i].charAt(0).toUpperCase() + newArr[i].substr(1);\n      }\n      newStr = newArr.join(' ');\n    }\n    return newStr;\n  }\n\n  public static prepareUrlForNonStaticResource = (location: Location, str: string): string => {\n    // @ts-ignore\n    if (location._platformStrategy instanceof HashLocationStrategy) {\n      return str;\n    } else {\n      return str;\n    }\n  }\n\n  public static prepareUrlForStaticResource = (location: Location, str: string): string => {\n    // @ts-ignore\n    if (location._platformStrategy instanceof HashLocationStrategy) {\n      return str;\n    } else {\n      return location.prepareExternalUrl(str);\n    }\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {BehaviorSubject, Observable} from 'rxjs';\n\n@Injectable({providedIn: 'root'})\nexport class MessageTopicService {\n\n  topics: Array<{ name: string, subject: BehaviorSubject<any> }> = [\n    {name: 'sample.topic', subject: new BehaviorSubject<any>('init')}\n  ];\n\n  constructor() {\n    console.log('Topic Message service Created...');\n  }\n\n  sendMessage(name: string, message: string) {\n    this.createTopicIfNotExists(name, {text: message});\n    this.topics.filter(x => x.name === name)[0].subject.next({text: message});\n  }\n\n  clearMessages(name: string) {\n    this.createTopicIfNotExists(name, {text: 'init'});\n    // this.queues.filter(x => x.name === name)[0].subject.next('init');\n  }\n\n  getMessage(name: string): Observable<any> {\n    this.createTopicIfNotExists(name, {text: 'init'});\n    return this.topics.filter(x => x.name === name)[0].subject.asObservable();\n  }\n\n  createTopicIfNotExists(name: string , init) {\n    let queueExist = false;\n    for (const q of this.topics) {\n      if (q.name === name) {\n        // console.log('Queue Exist: ' + q.name);\n        queueExist = true;\n      }\n    }\n    if (!queueExist) {\n      console.log('Creating Topic: ' + name);\n      const tempTopic = {name: name, subject: new BehaviorSubject<any>(init)};\n      this.topics.push(tempTopic);\n    }\n  }\n}\n","import {Component, OnInit, ViewChild, ElementRef, Input, SystemJsNgModuleLoader} from '@angular/core';\nimport {Location} from '@angular/common';\nimport { TcCoreCommonFunctions } from '../../common/tc-core-common-functions';\nimport {MessageTopicService} from '../../common/tc-core-topic-comm';\n\ndeclare var GlobalNavbar: any;\n\n\n/**\n * TIBCO Cloud Navigation Bar\n *\n * ![alt-text](../tibco-cloud-navbar.png \"Image\")\n *\n * @example <tc-tibco-cloud-navbar appName=\"\"></tc-tibco-cloud-navbar>\n */\n@Component({\n  selector: 'tc-tibco-cloud-navbar',\n  templateUrl: './tibco-cloud-navbar.component.html',\n  styleUrls: ['./tibco-cloud-navbar.component.css']\n})\nexport class TibcoCloudNavbarComponent implements OnInit {\n  /**\n   * Reference Element\n   */\n  @ViewChild('navbar', { static: true }) private navbarRef: ElementRef;\n  /**\n   * diaplayed Application Name\n   */\n  @Input() appName: string;\n  /**\n   * Documentation URL\n   */\n  @Input() docUrl: string;\n\n  /**\n   * Custom Logo URL\n   */\n\n  @Input() logoUrl: string;\n\n  /**\n   * rebrand config - example: { \"backgroundColor\": \"#cfcfcf\", \"fontColor\": \"#682782\", \"fontFamily\": \"Oswald\", \"iconColor\": \"red\" }\n   */\n\n  @Input() rebrandConfig: any;\n\n  /**\n   * Where to redirect on click of logo\n   */\n\n  @Input() logoClickTargetUrl: string;\n\n\n  private navbar;\n\n  private ms: MessageTopicService;\n\n  /**\n   * single empty Constructor of TIBCO Cloud Navigation Bar\n   */\n\n  constructor(private location: Location, private messageService: MessageTopicService) {\n    this.ms = messageService;\n  }\n\n  /**\n   * @ignore\n   */\n  ngOnInit() {\n\n    if (this.docUrl && (this.docUrl.slice(0, 4).toLowerCase() !== 'http')) {\n//      this.docUrl = this.location.prepareExternalUrl(this.docUrl);        // This will work with non hash routing\n      this.docUrl = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, this.docUrl);        // This will work with hash routing\n    }\n\n    this.navbar = new GlobalNavbar({\n      container: '#navbar',\n      textAfterLogo: this.appName ? this.appName : undefined,\n      iconMenus: {\n        search: {\n          visible: false  // for versions 0.1.X the propertie is \"disabled\" instead of \"visible\".\n        },\n        download: {\n          visible: false\n        },\n        help: {\n          visible: true\n        },\n        notifications: {\n          visible: false\n        },\n        products: {\n          visible: false\n        }\n      },\n      customProfilePanel: {\n        account: {\n          visible: false\n        },\n        subscriptions: {\n          visible: false\n        },\n        organization: {\n          visible: false\n        },\n        tenants: {\n          visible: false\n        }\n      },\n      customizedComponents: [\n        {\n          name: 'help',\n          template: '#help-template'\n        }\n      ]\n    });\n    if (this.logoUrl || this.logoClickTargetUrl || this.rebrandConfig) {\n      const style: any = {};\n      if (this.logoUrl || this.logoClickTargetUrl) {\n        style.logo = {\n          'src': this.logoUrl,\n          'url': this.logoClickTargetUrl // If the url is not set then the logo will redirect to TSC.\n        };\n      }\n      if (this.rebrandConfig) {\n        if (this.rebrandConfig.backgroundColor) {\n          style.backgroundColor = this.rebrandConfig.backgroundColor;\n        }\n        if (this.rebrandConfig.fontColor) {\n          style.fontColor = this.rebrandConfig.fontColor;\n        }\n        if (this.rebrandConfig.fontFamily) {\n          style.fontFamily = this.rebrandConfig.fontFamily;\n        }\n        if (this.rebrandConfig.iconColor) {\n          style.iconColor = this.rebrandConfig.iconColor;\n        }\n      }\n      this.navbar.refreshRebrandingStyle(style);\n    }\n    this.navbar.load();\n    // console.log('DOC URL: ' + this.docUrl);\n    const initialHelpURL = this.docUrl + '/help.html';\n\n    this.urlExists(initialHelpURL, exists => {\n      if (exists) {\n        this.navbar.customizePanel('help', '<embed src=\"' + initialHelpURL + '\" style=\"height: 100%; width: 100%\">');  // set HTML string\n\n      } else {\n        this.navbar.customizePanel('help', '<b> No Help Page Found</b>');  // set HTML string\n\n      }\n    });\n\n    this.ms.getMessage('help').subscribe(data => {\n      // console.log('Got message: ' + data.text);\n      this.findHelpFile('assets/help/' + data.text + '/help.html');\n    });\n  }\n\n  findHelpFile(helpUrl) {\n    this.urlExists(helpUrl, exists => {\n      // console.log('RESULT: url=' + helpUrl + ', exists=' + exists);\n      if (exists) {\n        console.log('Setting help page: ' + helpUrl);\n        this.navbar.customizePanel('help', '<embed src=\"' + helpUrl + '\" style=\"height: 100%; width: 100%\">');\n      } else {\n        if (helpUrl.includes('/')) {\n          // Find one step lower\n          // console.log('HelpURL before: |' + helpUrl + '|');\n          helpUrl = helpUrl.substring(0, helpUrl.lastIndexOf('/help.html'));\n          // console.log('HelpURL middle: |' + helpUrl + '|');\n          helpUrl = helpUrl.substring(0, helpUrl.lastIndexOf('/') + 1);\n          // console.log('HelpURL  after: |' + helpUrl + '|');\n          this.findHelpFile(helpUrl + 'help.html');\n        } else {\n          console.log('No valid help file found...');\n          this.navbar.customizePanel('help', '<b> No Help Page Found</b>');  // set HTML string\n\n        }\n      }\n    });\n  }\n\n  // The \"callback\" argument is called with either true or false\n// depending on whether the \"url\" exists or not.\n  urlExists(url, callback) {\n    const http = new XMLHttpRequest();\n    http.open('GET', url, true);\n    http.onload = function (e) {\n      if (http.readyState === 4) {\n        if (http.status === 200) {\n          callback(true);\n        } else {\n          callback(false);\n        }\n      }\n    };\n    http.send();\n  }\n}\n","/* Models used by login and authorization services */\n\nimport { Deserializable} from './deserializable';\n\nexport class Group {\n  constructor(public id: string,\n              public type: string\n  ) {\n  }\n}\n\nexport class Claim implements Deserializable {\n  email: string;\n  firstName: string;\n  id: string;\n  lastName: string;\n  sandboxes: Sandbox[];\n  subscriptionId: string;\n  username: string;\n  primaryProductionSandbox: Sandbox;\n\n  deserialize(input: any): this {\n    Object.assign(this, input);\n    return this;\n  }\n}\n\nexport class Sandbox {\n  constructor(public groups: Group[],\n              public id: string,\n              public type: string,\n              public name: string,\n              public subscriptionId: string,\n              public ownerId: string,\n  ) {\n  }\n}\n\nexport class SandboxList {\n  sandboxes: Sandbox[];\n  deserialize(input: any): this {\n    this.sandboxes = [];\n    Object.assign(this.sandboxes, input);\n    return this;\n  }\n}\n\nexport class AccessToken implements Deserializable {\n  access_token: string;\n  token_type: string;\n  expires_in: number;\n\n  deserialize(input: any): this {\n    Object.assign(this, input);\n    return this;\n  }\n}\n\nexport class AuthInfo implements Deserializable {\n  userName: string;\n  firstName: string;\n  lastName: string;\n  userId: string;\n  ts: number;\n  orgName: string;\n\n  deserialize(input: any): this {\n    Object.assign(this, input);\n    return this;\n  }\n}\n\nexport class Subscription {\n  constructor(\n    public accountId: string,\n    public accountDisplayName: string,\n    public ownerName: string,\n    public loggedInUserRole: string,\n    public regions: string[]\n  ) {}\n}\n\nexport class Owner {\n  email: string;\n  firstName: string;\n  lastName: string;\n  role: string;\n  deserialize(input: any): this {\n    Object.assign(this, input);\n    return this;\n  }\n}\n\nexport class AccountInfo {\n  accountDisplayName: string;\n  accountId: string;\n  loggedInUserRole: string;\n  ownerInfo: Owner;\n  regions: string[];\n}\n\nexport class AccountsInfo implements Deserializable {\n  accountInfos: AccountInfo[];\n  deserialize(input: any): this {\n    this.accountInfos = [];\n    Object.assign(this.accountInfos, input);\n    return this;\n  }\n}\n\nexport class LoginPrefill implements Deserializable {\n  emailId: string;\n  clientId: string;\n  deserialize(input: any): this {\n    Object.assign(this, input);\n    return this;\n  }\n}\n\n\n","/* Used to resolve the default login credentials (username/clientId) when using dev/local login route instead of tibco cloud */\n\n/* Data is stored/retrieved from session storage */\n\nimport { Injectable } from '@angular/core';\nimport {Resolve} from '@angular/router';\nimport { LoginPrefill } from '../models/tc-login';\n\nexport const EMAIL_ID_KEY = 'tcs-login-email-id';\nexport const CLIENT_ID_KEY = 'tcs-login-client-id';\n\n@Injectable()\nexport class LoginPrefillResolver implements Resolve<LoginPrefill> {\n\n  constructor() {}\n\n  private getClientId = (): string => {\n    return localStorage.getItem(CLIENT_ID_KEY);\n  }\n\n  private getEmail = (): string => {\n    return localStorage.getItem(EMAIL_ID_KEY);\n  }\n\n  resolve(): LoginPrefill {\n    return new LoginPrefill().deserialize({ emailId: this.getEmail(), clientId: this.getClientId() } );\n  }\n\n}\n","/**\n * @ngdoc component\n * @name tcLoginService\n *\n * @description\n *\n * tcLoginService provides services for authenticating against Tibco Subscriber cloud and authorizing with the various\n * Tibco Cloud tenants such as liveapps.\n *\n * These services and related components are typically used when the UI is NOT running on Live Apps WRP/Tibco Cloud\n * When deployed to Live Apps WRP authentication is handled by Tibco Cloud when accessing the protected WRP URL\n *\n *\n */\n\n\nimport { Injectable } from '@angular/core';\nimport {AccessToken, AuthInfo} from '../models/tc-login';\nimport {Observable} from 'rxjs';\nimport {HttpClient, HttpHeaders, HttpParams} from '@angular/common/http';\nimport {map, tap} from 'rxjs/operators';\nimport {Location} from '@angular/common';\nimport {EMAIL_ID_KEY, CLIENT_ID_KEY} from '../resolvers/login-prefill.resolver';\n\n@Injectable({\n  providedIn: 'root'\n})\n\n\nexport class TcLoginService {\n  constructor(private http: HttpClient, private location: Location) { }\n\n  // Provide ability to login to Tibco Subscriber Cloud\n  public login(username, password, clientID): Observable<AuthInfo> {\n    localStorage.setItem(EMAIL_ID_KEY, username);\n    localStorage.setItem(CLIENT_ID_KEY, clientID);\n\n\n    const url = '/idm/v3/login-oauth';\n    const body = new HttpParams()\n      .set('Email', username)\n      .set('Password', password)\n      .set('TenantId', 'bpm')\n      .set('ClientID', clientID);\n    const headers = new HttpHeaders()\n      .set('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.http.post(url, body.toString(), { headers })\n      .pipe(\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\n        map( authInfo => new AuthInfo().deserialize(authInfo)));\n  }\n\n  public loginV2(username, password): Observable<AccessToken> {\n    const url = '/as/token.oauth2';\n    const body = new HttpParams()\n      .set('username', username)\n      .set('password', password)\n      .set('client_id', 'ropc_ipass')\n      .set('grant_type', 'password');\n    const headers = new HttpHeaders()\n      .set('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.http.post(url, body.toString(), { headers })\n      .pipe(\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\n        map( accessToken => new AccessToken().deserialize(accessToken)));\n  }\n\n\n  // Provide ability to authorize against live apps (note tenantId: bpm)\n  public laAuthorize(accessToken: AccessToken, accountId): Observable<AuthInfo> {\n    const url = '/idm/v2/login-oauth';\n    const body = new HttpParams()\n      .set('AccessToken', accessToken.access_token)\n      .set('TenantId', 'bpm')\n      .set('AccountId', accountId);\n\n    const headers = new HttpHeaders()\n      .set('Content-Type', 'application/x-www-form-urlencoded');\n\n    return this.http.post(url, body.toString(), { headers })\n      .pipe(\n        tap( val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\n        map( authInfo => new AuthInfo().deserialize(authInfo)));\n  }\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {AccountsInfo, LoginPrefill, Subscription} from '../../models/tc-login';\nimport {Observable, ObservableInput} from 'rxjs';\nimport {map, mergeMap} from 'rxjs/operators';\nimport {AccessToken, AuthInfo } from '../../models/tc-login';\nimport {TcLoginService} from '../../services/tc-login.service';\n\n/**\n * This component will attempt to log the user in.\n *\n * ![alt-text](../Cloud-Login.png \"Image\")\n *\n *  @example <tc-tibco-cloud-login *ngIf=\"!loggedIn (loggedIn)=\"handleLoggedIn($event)\"></tc-tibco-cloud-login>\n */\n@Component({\n    selector: 'tc-tibco-cloud-login',\n    templateUrl: './tibco-cloud-login.component.html',\n    styleUrls: ['./tibco-cloud-login.component.css']\n})\n\nexport class TibcoCloudLoginComponent  implements OnInit {\n\n  /**\n   * Notify parent that user is logged in ok.\n   */\n  @Output() loggedIn = new EventEmitter();\n  /**\n   * Login Data\n   */\n  @Input() loginPrefill: LoginPrefill;\n\n    name: string;\n    password: string;\n    clientId: string;\n    loading = false;\n    accountsInfo: AccountsInfo;\n    loginError: string;\n    token: AccessToken;\n    authInfo: AuthInfo;\n    auth: Observable<AuthInfo>;\n\n  /**\n  * The Constructor creates the Login Dialog\n  */\n  constructor(\n    private tcLogin: TcLoginService\n  ) {\n\n  }\n\n  /**\n  * @ignore\n  */\n  ngOnInit() {\n    console.log('Login Init');\n\n    if (this.loginPrefill) {\n      this.name = this.loginPrefill.emailId;\n      this.clientId = this.loginPrefill.clientId;\n    }\n  }\n\n  doLogin() {\n        this.loading = true;\n        this.loginError = undefined;\n\n      this.auth = this.tcLogin.login(this.name, this.password, this.clientId).pipe(\n        map(authInfo => {\n            this.authInfo = authInfo;\n            return authInfo;\n          }\n        )\n      );\n\n        this.auth.subscribe(authorize => {\n            this.loading = false;\n            // ok logged in\n            console.log('User logged in...');\n            this.loggedIn.emit( { authInfo: authorize, accessToken: this.token } );\n          },\n          error => {\n              this.loading = false;\n              this.loginError = error.error.errorMsg;\n              console.error('Login Failed: ');\n              console.error(error);\n          });\n    }\n}\n","/* models used by shared state services */\n\nimport { Deserializable} from './deserializable';\n\nexport class SharedStateContent implements Deserializable {\n  json: string;\n  deserialize(input: any) {\n    Object.assign(this, input);\n    return this;\n  }\n}\n\nexport class SharedStateEntry implements Deserializable {\n  attributes: string[];\n  content: SharedStateContent;\n  createdBy: string;\n  createdByName: string;\n  description: string;\n  id: string;\n  isAbandoned: boolean;\n  isOrphaned: boolean;\n  links: string[];\n  modifiedById: string;\n  modifiedByName: string;\n  modifiedDate: number;\n  name: string;\n  roles: string[];\n  sandboxId: number;\n  scope: string;\n  type: string;\n\n  deserialize(input: any): this {\n    this.attributes = input.attributes;\n    this.content = input.content;\n    this.createdBy = input.createdBy;\n    this.createdByName = input.createdByName;\n    this.description = input.description;\n    this.id = input.id;\n    this.isAbandoned = input.isAbandoned;\n    this.isOrphaned = input.isOrphaned;\n    this.links = input.links;\n    this.modifiedById = input.modifiedById;\n    this.modifiedDate = input.modifiedDate;\n    this.name = input.name;\n    this.roles = input.roles;\n    this.sandboxId = input.sandboxId;\n    this.scope = input.scope;\n    this.type = input.type;\n    this.content = input.json.content;\n    return this;\n  }\n}\n\nexport class SharedStateList implements Deserializable {\n  sharedStateEntries: SharedStateEntry[];\n  deserialize(input: any): this {\n    this.sharedStateEntries = [];\n    Object.assign(this.sharedStateEntries, input);\n    return this;\n  }\n}\n","/* Models used to store shared state configuration */\n\nimport {Deserializable} from './deserializable';\n\nexport class UiAppConfig implements Deserializable {\n  id: string;\n  sandboxId: number;\n  applicationIds: number[];\n  typeId: string;\n  uiAppId: string;\n  caseIconsFolderId: string;\n  caseTypeLabel: string;\n  deserialize(input: any) {\n    Object.assign(this, input);\n    return this;\n  }\n}\n\n\nexport class UiAppIdConfig implements  Deserializable {\n  uiAppId: string;\n  deserialize(input: any) {\n    Object.assign(this, input);\n    return this;\n  }\n}\n","/**\n * @ngdoc component\n * @name tcSharedStateService\n *\n * @description\n *\n * tcSharedStateService provides services for managing stored client config using the Tibco Live Apps shared state service.\n *\n * Although this is a live apps service rather than a Tibco Subscriber Cloud Service it is inside the core project since it will\n * be used for all applications to store configuration information.\n *\n * By hosting this service in the core we can avoid a circular dependency to the live apps library.\n *\n * Note: This service will use the http caching interceptor for 'GET' calls based on passed parameters.\n *\n *\n */\n\nimport { Injectable } from '@angular/core';\nimport {SharedStateContent, SharedStateEntry, SharedStateList} from '../models/tc-shared-state';\nimport {Observable} from 'rxjs';\nimport {HttpClient, HttpHeaders} from '@angular/common/http';\nimport {map, tap} from 'rxjs/operators';\nimport {Location} from '@angular/common';\nimport {UiAppConfig} from '../models/tc-app-config';\nimport {TcCoreCommonFunctions} from '../common/tc-core-common-functions';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TcSharedStateService {\n\n  constructor(private http: HttpClient, private location: Location) {\n  }\n\n  public createSharedState(name: string,\n                           type: string,\n                           description: string,\n                           sandboxId: number,\n                           attributes: string[],\n                           roles: string[],\n                           links: string[],\n                           content: SharedStateContent): Observable<string> {\n    const url = '/clientstate/v1/states';\n\n    const body = {\n      'name': name,\n      'type': type,\n      'description': description,\n      'sandboxId': sandboxId,\n      'attributes': attributes,\n      'roles': roles,\n      'links': links,\n      content: content\n    };\n    const bodyStr = JSON.stringify(body);\n    const headers = new HttpHeaders()\n      .set('Content-Type', 'application/json');\n    return this.http.post(url, bodyStr, {headers})\n      .pipe(\n        tap(val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\n        map(result => {\n          return result.toString();\n        })\n      );\n  }\n\n  public updateSharedState(sharedStateList): Observable<SharedStateList> {\n    const url = '/clientstate/v1/states';\n\n    const body = sharedStateList;\n    const bodyStr = JSON.stringify(body);\n    const headers = new HttpHeaders()\n      .set('Content-Type', 'application/json');\n    return this.http.put(url, bodyStr, {headers})\n      .pipe(\n        tap(val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\n        map(updatedSharedStateList => new SharedStateList().deserialize(updatedSharedStateList))\n      );\n  }\n\n  public getSharedState(name: string, type: string, useCache: boolean, flushCache: boolean): Observable<SharedStateList> {\n    const url = '/clientstate/v1/states?$filter=type=' + type\n      + ' and name=\\'' + name + '\\'';\n    let options = {}\n    // set headers when caching required\n    let headers: HttpHeaders = new HttpHeaders();\n    if (useCache) {\n      headers = headers.set('cacheResponse', 'true');\n    }\n    if (flushCache) {\n      headers = headers.set('flushCache', 'true');\n    }\n    options = {headers: headers};\n\n    return this.http.get(url, options)\n      .pipe(\n        tap(val => sessionStorage.setItem('tcsTimestamp', Date.now().toString())),\n        map(sharedStateList => new SharedStateList().deserialize(sharedStateList)));\n  }\n\n  /* Ui App Config */\n\n  public getUiAppConfig(uiAppId: string, useCache: boolean, flushCache: boolean): Observable<UiAppConfig> {\n    // if useCache is false this will trigger the service to update the cached version with latest\n    const ssName = uiAppId + '.config.tibcolabs.client.context.PUBLIC';\n\n    return this.getSharedState(ssName, 'PUBLIC', useCache, flushCache)\n      .pipe(\n        map(value => {\n            if (value.sharedStateEntries.length > 0) {\n              const ssresult = new UiAppConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));\n              ssresult.id = value.sharedStateEntries[0].id;\n              return ssresult;\n            } else {\n              return undefined;\n            }\n          }\n        )\n      );\n  }\n\n  public createUiAppConfig(sandboxId: number, uiAppConfig: UiAppConfig, uiAppId: string): Observable<string> {\n    const ssName = uiAppId + '.config.tibcolabs.client.context.PUBLIC';\n    const content: SharedStateContent = new SharedStateContent();\n    content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(uiAppConfig));\n    return this.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)\n      .pipe(\n        map(value => value)\n      );\n  }\n\n  public updateUiAppConfig(sandboxId: number, uiAppConfig: UiAppConfig, uiAppId: string, id: string): Observable<UiAppConfig> {\n    const ssName = uiAppId + '.config.tibcolabs.client.context.PUBLIC';\n    const content: SharedStateContent = new SharedStateContent();\n    content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(uiAppConfig));\n    const entry: SharedStateEntry = new SharedStateEntry();\n    entry.content = content;\n    entry.sandboxId = sandboxId;\n    entry.name = ssName;\n    entry.type = 'PUBLIC';\n    entry.id = id;\n    const ssList: SharedStateList = new SharedStateList();\n    ssList.sharedStateEntries = [];\n    ssList.sharedStateEntries.push(entry);\n    return this.updateSharedState(ssList.sharedStateEntries)\n      .pipe(\n        map(value => {\n          return new UiAppConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));\n        })\n      );\n  }\n\n  /* UI App Config */\n}\n","/**\n * @ngdoc component\n * @name RequestCacheService\n *\n * @description\n *\n * This service provides the ability to cache http requests\n *\n *\n */\n\nimport { Injectable } from '@angular/core';\nimport { HttpRequest, HttpResponse } from '@angular/common/http';\n\n// cache for an hour max\nconst maxAge = 3.6e+6;\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class RequestCacheService {\n  cache = new Map();\n\n  get(req: HttpRequest<any>): HttpResponse<any> | undefined {\n    const url = req.urlWithParams;\n    const cached = this.cache.get(url);\n\n    if (!cached) {\n      return undefined;\n    }\n\n    const isExpired = cached.lastRead < (Date.now() - maxAge);\n    const expired = isExpired ? 'expired ' : '';\n    return cached.response;\n  }\n\n  put(req: HttpRequest<any>, response: HttpResponse<any>): void {\n    // console.log(JSON.stringify(response));\n    const url = req.url;\n    const entry = { url, response, lastRead: Date.now() };\n    this.cache.set(url, entry);\n\n    const expired = Date.now() - maxAge;\n    this.cache.forEach(expiredEntry => {\n      if (expiredEntry.lastRead < expired) {\n        this.cache.delete(expiredEntry.url);\n      }\n    });\n  }\n}\n\n\n","/**\n * @ngdoc component\n * @name CachingInterceptor\n *\n * @description\n *\n * This interceptor will intercept http calls if it is enabled in the tc-core-lib-module.ts.\n *\n * It will cache requests if the cacheResponse header is specified on the http request.\n * If flush cache header is on the request it will not use the cache and will overwrite the current cached entry.\n *\n *\n */\n\nimport { Injectable } from '@angular/core';\nimport { HttpEvent, HttpRequest, HttpResponse, HttpInterceptor, HttpHandler } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { RequestCacheService } from '../services/request-cache.service';\n\n@Injectable()\nexport class CachingInterceptor implements HttpInterceptor {\n  constructor(private cache: RequestCacheService) {}\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n    let cachedResponse;\n    if (req.headers.get('cacheResponse') || (req.urlWithParams.substr(0, 15)) === '../assets/icons') {\n      // only cache if the cacheResponse flag is set\n      if (!req.headers.get('flushCache')) {\n        cachedResponse = this.cache.get(req);\n      } else {\n      }\n      // use the cache\n    } else {\n      // dont pass the cache since this should not be cached\n      return this.sendRequest(req, next, undefined);\n    }\n    // return cached response or make request if no cached response\n    return cachedResponse ? of(cachedResponse) : this.sendRequest(req, next, this.cache);\n  }\n\n  sendRequest(\n    req: HttpRequest<any>,\n    next: HttpHandler,\n    cache: RequestCacheService): Observable<HttpEvent<any>> {\n    return next.handle(req)\n      .pipe(\n      tap(event => {\n        if (event instanceof HttpResponse && cache) {\n          cache.put(req, event);\n        }\n      })\n    );\n  }\n}\n","// This guard will redirect to login when not authenticated against live apps.\n// If hosted on Tibco cloud it will not be used since Tibco Cloud/Live Apps WRP resources are protected anyway.\n\n// session is detected if API called in last 30 mins (checks local sessionTimestamp)\n// alternative way to achieve this would be to make an API call - eg) live apps claims call\n\n// NOTE: assumes the login route is /login\n\nimport {Inject, Injectable} from '@angular/core';\nimport { Router, CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n  private TIBCO_CLOUD_DOMAIN = 'cloud.tibco.com';\n  private TIBCO_TEST_DOMAIN = 'tenant-integration.tcie.pro';\n  private TIBCO_DEV_DOMAIN = 'emea.tibco.com';\n\n  constructor(private router: Router) {\n  }\n\n  canActivate(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    // check if we are hosted on tibco.cloud.com\n    const host = window.location.hostname.split('.');\n    const hostDomain = host[host.length - 3] + '.' + host[host.length - 2] + '.' + host[host.length - 1];\n    if (hostDomain === this.TIBCO_CLOUD_DOMAIN || hostDomain === this.TIBCO_TEST_DOMAIN || hostDomain === this.TIBCO_DEV_DOMAIN) {\n      // delegate handling login/auth to Tibco Cloud since WRP resources are protected anyway\n      return true;\n    } else {\n      // use the sessionTimestamp to decide whether to redirect to login (30 mins expiry of token if no API call)\n      const tcsTimestamp = sessionStorage.getItem('tcsTimestamp');\n      if (tcsTimestamp && Number(tcsTimestamp) > (Number(Date.now()) - (30 * 60000))) {\n        // logged in and api called made in last 30 mins so should be OK\n        return true;\n      } else {\n        // not logged in so redirect to login page\n        this.router.navigate(['/login'], {queryParams: {returnUrl: state.url}});\n      }\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse,\n  HttpErrorResponse,\n} from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport {catchError, tap} from 'rxjs/operators';\nimport {ActivatedRouteSnapshot, Router, RouterStateSnapshot} from '@angular/router';\n\n@Injectable()\nexport class AuthErrorInterceptor implements HttpInterceptor {\n  private TIBCO_CLOUD_DOMAIN = 'cloud.tibco.com';\n  private TIBCO_TEST_DOMAIN = 'tenant-integration.tcie.pro';\n  private TIBCO_DEV_DOMAIN = 'emea.tibco.com';\n  private TIBCO_CLOUD_LOGIN = 'https://account.cloud.tibco.com/idm/v1/login-saml?relayState=';\n\n  constructor(private router: Router) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req).pipe(\n      catchError((err: any) => {\n          if (err instanceof HttpErrorResponse) {\n            if (err.status === 419) {\n              // timed out\n              // should only be used if not on tibco cloud (and hence using our login route)\n              // check if we are hosted on tibco.cloud.com\n              const host = window.location.hostname.split('.');\n              const hostDomain = host[host.length - 3] + '.' + host[host.length - 2] + '.' + host[host.length - 1];\n              if (hostDomain === this.TIBCO_CLOUD_DOMAIN || hostDomain === this.TIBCO_TEST_DOMAIN || hostDomain === this.TIBCO_DEV_DOMAIN) {\n                // redirect to Tibco Cloud Login\n                // supply base64 encoded redirect string\n                const reauthUrl = btoa('{ \"resumeURL\":\"' + window.location.href + '\", \"tenantId\":\"BPM\" }');\n                console.log('redirecting to: ' + this.TIBCO_CLOUD_LOGIN + reauthUrl);\n                window.location.href = this.TIBCO_CLOUD_LOGIN + reauthUrl;\n              } else {\n                this.router.navigate(['/login'], {queryParams: {}});\n              }\n            } else {\n              throw err;\n            }\n          }\n          return of(err);\n        }\n      )\n    );\n  }\n}\n","/* truncates string to a set length using ellipsis ... */\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'ellipsis'\n})\nexport class EllipsisPipe implements PipeTransform {\n\n  transform(value: any, args?: number): any {\n    if (args === undefined) {\n      return value;\n    }\n\n    if (value && value.length > args) {\n      return value.substring(0, args) + '...';\n    } else {\n      return value;\n    }\n  }\n\n}\n","// This pipe will display a date based on how long ago it was: eg. 5 mins ago, 1 hour ago, just now etc etc\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'durationSince'\n})\nexport class DurationSincePipe implements PipeTransform {\n\n  transform(value: string, args?: any): any {\n    const seconds: number = Math.floor((+new Date() - +new Date(value)) / 1000);\n    let interval: number = Math.floor(seconds / 31536000);\n    // years\n    if (interval >= 1) {\n      if (interval === 1) {\n        return interval + ' year ago';\n      } else {\n        return interval + ' years ago';\n      }\n    }\n    // months\n    interval = Math.floor(seconds / 2592000);\n    if (interval >= 1) {\n      if (interval === 1) {\n        return interval + ' month ago';\n      } else {\n        return interval + ' months ago';\n      }\n    }\n    // weeks\n    interval = Math.floor(seconds / 604800);\n    if (interval >= 1) {\n      if (interval === 1) {\n        return interval + ' week ago';\n      } else {\n        return interval + ' weeks ago';\n      }\n    }\n    // days\n    interval = Math.floor(seconds / 86400);\n    if (interval >= 1) {\n      if (interval === 1) {\n        return ' yesterday';\n      } else {\n        return interval + ' days ago';\n      }\n    }\n    // hours\n    interval = Math.floor(seconds / 3600);\n    if (interval >= 1) {\n      if (interval === 1) {\n        return interval + ' hour ago';\n      } else {\n        return interval + ' hours ago';\n      }\n    }\n    // minutes\n    interval = Math.floor(seconds / 60);\n    if (interval >= 1) {\n      if (interval === 1) {\n        return interval + ' minute ago';\n      } else {\n        return interval + ' minutes ago';\n      }\n    }\n\n    return 'Just now';\n  }\n\n}\n","/* used to highlight search results in a list where search term matches\n *\n * original source from https://gist.github.com/adamrecsko/0f28f474eca63e0279455476cc11eca7\n * post by ankitgrover\n*/\n\nimport { Pipe, PipeTransform } from '@angular/core';\nimport {SafeHtml} from '@angular/platform-browser';\n\n@Pipe({\n  name: 'highlight'\n})\nexport class HighlightPipe implements PipeTransform {\n\n  /* use this for single match search */\n  static SINGLE_MATCH = 'Single-Match';\n  /* use this for single match search with a restriction that target should start with search string */\n  static SINGLE_AND_STARTS_WITH_MATCH = 'Single-And-StartsWith-Match';\n  /* use this for global search */\n  static MULTI_MATCH = 'Multi-Match';\n\n  transform(data: string,\n            highlightText: string,\n            option: string = 'Single-And-StartsWith-Match',\n            caseSensitive: boolean = false,\n            highlightStyleName: string = 'search-highlight'): SafeHtml {\n    if (highlightText && data && option) {\n      let regex: any = '';\n      const caseFlag: string = !caseSensitive ? 'i' : '';\n      switch (option) {\n        case 'Single-Match': {\n          regex = new RegExp(highlightText, caseFlag);\n          break;\n        }\n        case 'Single-And-StartsWith-Match': {\n          regex = new RegExp('^' + highlightText, caseFlag);\n          break;\n        }\n        case 'Multi-Match': {\n          regex = new RegExp(highlightText, 'g' + caseFlag);\n          break;\n        }\n        default: {\n          // default will be a global case-insensitive match\n          regex = new RegExp(highlightText, 'gi');\n        }\n      }\n      return data.replace(regex, (match) => `<span class=\"${highlightStyleName}\">${match}</span>`);\n\n    } else {\n      return data;\n    }\n  }\n\n}\n","/* orders array by date */\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'orderByDate'\n})\nexport class OrderByDatePipe implements PipeTransform {\n\n  transform(array: any[], field: string): any[] {\n    return array.sort(function(a, b) {\n        a = new Date(a[field]);\n        b = new Date(b[field]);\n        return a > b ? -1 : a < b ? 1 : 0;\n    });\n  }\n}\n","/* reverses the input */\n\nimport { Pipe, PipeTransform } from '@angular/core';\n\n@Pipe({\n  name: 'reverse',\n  pure: false\n})\nexport class ReversePipe implements PipeTransform {\n\n  transform(value: any, args?: any): any {\n      return value.slice().reverse();\n  }\n\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {ToolbarButton} from '../../models/tc-widget-header';\n\n\n/**\n * Header bar for small widgets (like recent cases etc on home)\n *\n * ![alt-text](../tibco-cloud-widget-header.png \"Image\")\n *\n *@example <tc-tibco-cloud-widget-header></tc-tibco-cloud-widget-header>\n */\n@Component({\n  selector: 'tc-tibco-cloud-widget-header',\n  templateUrl: './tibco-cloud-widget-header.component.html',\n  styleUrls: ['./tibco-cloud-widget-header.component.css']\n})\nexport class TibcoCloudWidgetHeaderComponent {\n  /**\n   * Text shown in menu bar\n   */\n  @Input() headerText: string;\n\n  /**\n   * icon name (svg key - needs to be registered)\n   */\n  @Input() icon: string;\n\n  /**\n   * buttons to display in the menu bar\n   */\n  @Input() toolbarButtons: ToolbarButton[];\n\n  /**\n   * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar\n   */\n  @Input() showHeader: boolean = this.showHeader ? this.showHeader : true;\n\n  /**\n   * ~event toolbarButtonEvent : Button Clicked\n   * ~payload string : tells caller a button was clicked - outputs button Id\n   */\n  @Output() toolbarButtonEvent: EventEmitter<string> = new EventEmitter<string>();\n  constructor() {\n  }\n\n  toolbarButtonClick(id) {\n    this.toolbarButtonEvent.emit(id);\n  }\n\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {TibcoCloudWidgetHeaderComponent} from '../tibco-cloud-widget-header/tibco-cloud-widget-header.component';\nimport {ToolbarButton} from '../../models/tc-widget-header';\n\n/**\n * TIBCO Cloud Menu Bar\n *\n *  ![alt-text](../tibco-cloud-menu-bar.png \"\")\n *\n * @example <tc-tibco-cloud-menu-bar></tc-tibco-cloud-menu-bar>\n */\n@Component({\n  selector: 'tc-tibco-cloud-menu-bar',\n  templateUrl: './tibco-cloud-menu-bar.component.html',\n  styleUrls: ['./tibco-cloud-menu-bar.component.css']\n})\nexport class TibcoCloudMenuBarComponent extends TibcoCloudWidgetHeaderComponent implements OnInit {\n\n    /**\n    * `<tc-tibco-cloud-menu-bar>` render a general menu bar\n    */\n    constructor() {\n        super();\n    }\n\n    /**\n    * @ignore\n    */\n    ngOnInit() {\n      // none\n    }\n\n}\n","/* models used by widget header - toolbar inside home page/case page widgets like recent cases etc */\n\nimport { Deserializable} from './deserializable';\n\nexport class ToolbarButton implements Deserializable {\n  id: string;\n  icon: string;\n  visible: boolean;\n  enabled: boolean;\n  tooltip: string;\n  filled: boolean;\n  deserialize(input: any) {\n    Object.assign(this, input);\n    return this;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {ToolbarButton} from '../models/tc-widget-header';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TcButtonsHelperService {\n\n  constructor() { }\n\n  public createButton = (\n    id: string, icon: string, filled: boolean, tooltip: string, visible: boolean, enabled: boolean): ToolbarButton => {\n    const newButton = new ToolbarButton().deserialize(\n      {\n        id: id,\n        icon: icon,\n        filled: filled,\n        tooltip: tooltip,\n        visible: visible,\n        enabled: enabled\n      }\n    );\n    return newButton;\n  }\n\n  public updateButtons = (updatedToolbarButtons: ToolbarButton[], toolbarButtons: ToolbarButton[]): ToolbarButton[] => {\n    updatedToolbarButtons.forEach( updatedButton => {\n      const idx = toolbarButtons.findIndex(item => item.id === updatedButton.id);\n      if (idx > -1) {\n        toolbarButtons[idx] = updatedButton;\n      } else {\n        // no existing button so add it\n        toolbarButtons.push(updatedButton);\n      }\n    });\n    return toolbarButtons;\n  }\n\n  public addButtons = (buttons: ToolbarButton[], toolbarButtons: ToolbarButton[]): ToolbarButton[] => {\n    buttons.forEach(button => {\n      toolbarButtons.push(button);\n    });\n    return toolbarButtons;\n  }\n\n  public removeButtons = (buttons: ToolbarButton[], toolbarButtons: ToolbarButton[]): ToolbarButton[] => {\n    buttons.forEach(button => {\n      const idx = toolbarButtons.findIndex(item => item.id === button.id);\n      toolbarButtons.splice(idx, 1);\n    });\n    return toolbarButtons;\n  }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport {ActivatedRoute} from '@angular/router';\n\n/**\n * Global Error Handling, contains generic Error Handling for\n *\n * - NO_ROLE :: You are not a Member of this Application, please contact the Application- or Subscription-Owner.\n * - NO_ACCESS :: You are not entitled to access this Application, please contact the Application- or Subscription-Owner.\n * - NO_ROUTE_ACCESS :: Sorry but you do not have the required role to access this page of the application, please contact the application owner\n */\n\n/**\n * Exception Handling page\n *\n *@example <tc-tibco-cloud-error></tc-tibco-cloud-error>\n */\n@Component({\n  selector: 'tc-tibco-cloud-error',\n  templateUrl: './tibco-cloud-error.component.html',\n  styleUrls: ['./tibco-cloud-error.component.css']\n})\nexport class TibcoCloudErrorComponent implements OnInit {\n\n  /**\n   * todo: Add logger\n   */\n  constructor(private route: ActivatedRoute) {\n    this.message = '';\n    this.route.params.subscribe(params => {\n      console.log(params); // log the entire params object\n      console.log(params['errorCode']);\n      console.log(params['errorData?']);\n      if (params['errorCode'] != null) {\n        this.code = params['errorCode'];\n        this.title = this.knownErrorList.find(x => x.errorCode === this.code).errorTitle;\n        this.message = this.knownErrorList.find(x => x.errorCode === this.code).errorMessage;\n        this.data = params['errorData'];\n      } else {\n        this.code = 'Unknown Error Code';\n      }\n    });\n  }\n\n  code: string;\n  title: string;\n  message: string;\n  data: string;\n\n  knownErrorList = [\n    {\n      'errorCode' : 'NO_ROLE',\n      'errorTitle' : 'Access Denied',\n      'errorMessage' : 'You are not a Member of this Application, please contact the Application- or Subscription-Owner.'\n\n    },\n    {\n      'errorCode' : 'NO_ACCESS',\n      'errorTitle' : 'Access Denied',\n      'errorMessage' : 'You are not entitled to access this Application, please contact the Application- or Subscription-Owner.'\n\n    },\n    {\n      'errorCode' : 'NO_ROUTE_ACCESS',\n      'errorTitle' : 'Access Denied',\n      'errorMessage' : 'Sorry but you do not have the required role to access this page of the application, please contact the application owner'\n    }\n  ];\n\n  /**\n  * @ignore\n  */\n  ngOnInit() {\n  }\n\n\n}\n\n\n","// simple directive that can be used to fire an event when a component is created\n\nimport {Directive, EventEmitter, Input, OnInit, Output} from '@angular/core';\n\n@Directive({\n  selector: '[tcOnCreate]',\n  exportAs: 'onCreate'\n})\nexport class OnCreateDirective implements OnInit {\n  @Input() idx: Number;\n  @Output() fireCreated = new EventEmitter();\n\n  constructor() {\n  }\n\n  ngOnInit(): void {\n    this.fireCreated.emit();\n  }\n\n}\n","/* models used by general app config */\n\nimport {Deserializable} from './deserializable';\n\nexport class RoleAttribute {\n  public id: string;\n  public group: string;\n  public display: string;\n  public welcome: string;\n  public imageUrl: string;\n  public configuration: boolean;\n  public priority: number;\n  deserialize(input: any) {\n    Object.assign(this, input);\n    return this;\n  }\n}\n\nexport class GeneralConfig implements Deserializable {\n  id: string;\n  uiAppId: string;\n  browserTitle: string;\n  applicationTitle: string;\n  welcomeMessage: string;\n  displayName: boolean;\n  documentationUrl: string;\n  roles: RoleAttribute[];\n  deserialize(input: any) {\n    Object.assign(this, input);\n    return this;\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {SharedStateContent, SharedStateEntry, SharedStateList} from '../models/tc-shared-state';\nimport {Observable} from 'rxjs';\nimport {map} from 'rxjs/operators';\nimport {Location} from '@angular/common';\nimport {TcCoreCommonFunctions} from '../common/tc-core-common-functions';\nimport {GeneralConfig} from '../models/tc-general-config';\nimport {TcSharedStateService} from './tc-shared-state.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TcGeneralConfigService {\n\n  constructor(private location: Location, private sharedStateService: TcSharedStateService) {\n  }\n\n  public createGeneralConfig(sandboxId: number, uiAppId: string, generalConfig: GeneralConfig) {\n    const ssName = uiAppId + '.general.config.tibcolabs.client.context.PUBLIC';\n    const content: SharedStateContent = new SharedStateContent();\n    content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(generalConfig));\n\n    return this.sharedStateService.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)\n      .pipe(\n        map(value => value)\n      );\n  }\n\n  public getGeneralConfig(uiAppId: string, useCache: boolean, flushCache: boolean): Observable<GeneralConfig> {\n    // if useCache is false this will trigger the service to update the cached version with latest\n    const ssName = uiAppId + '.general.config.tibcolabs.client.context.PUBLIC';\n\n    return this.sharedStateService.getSharedState(ssName, 'PUBLIC', useCache, flushCache)\n      .pipe(\n        map(value => {\n            if (value.sharedStateEntries.length > 0) {\n              const ssresult = new GeneralConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));\n              ssresult.id = value.sharedStateEntries[0].id;\n              return ssresult;\n            } else {\n              return undefined;\n            }\n          }\n        )\n      );\n  }\n\n  public updateGeneralConfig(sandboxId: number, uiAppId: string, generalConfig: GeneralConfig, id: string) {\n    const ssName = uiAppId + '.general.config.tibcolabs.client.context.PUBLIC';\n    const content: SharedStateContent = new SharedStateContent();\n    content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(generalConfig));\n    const entry: SharedStateEntry = new SharedStateEntry();\n    entry.content = content;\n    entry.sandboxId = sandboxId;\n    entry.name = ssName;\n    entry.type = 'PUBLIC';\n    entry.id = id;\n    const ssList: SharedStateList = new SharedStateList();\n    ssList.sharedStateEntries = [];\n    ssList.sharedStateEntries.push(entry);\n\n    return this.sharedStateService.updateSharedState(ssList.sharedStateEntries)\n      .pipe(\n        map(value => {\n          // flush the cache\n          this.getGeneralConfig(uiAppId, true, true).subscribe();\n          return new GeneralConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));\n        })\n      );\n  }\n}\n","import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\n\n\n/**\n * Data source for the TibcoCloudTable view. This class should\n * encapsulate all logic for fetching and manipulating the displayed data\n * (including sorting, pagination, and filtering).\n */\nexport class TibcoCloudTableDataSource extends DataSource<any> {\n  data;\n\n  constructor(private paginator: MatPaginator, private sort: MatSort, private d) {\n    super();\n    this.data = d;\n    //this._updateChangeSubscription();\n\n  }\n\n\n\n  /**\n   * Connect this data source to the table. The table will only update when\n   * the returned stream emits new items.\n   * @returns A stream of the items to be rendered.\n   */\n  connect(): Observable<any[]> {\n    // Combine everything that affects the rendered data into one update\n    // stream for the data-table to consume.\n    const dataMutations = [\n      observableOf(this.data),\n      this.paginator.page,\n      this.sort.sortChange\n    ];\n\n    // Set the paginator's length\n    this.paginator.length = this.data.length;\n\n    return merge(...dataMutations).pipe(map(() => {\n      return this.getPagedData(this.getSortedData([...this.data]));\n    }));\n  }\n\n  /**\n   *  Called when the table is being destroyed. Use this function, to clean up\n   * any open connections or free any held resources that were set up during connect.\n   */\n  disconnect() {}\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getPagedData(data: any[]) {\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Sort the data (client-side). If you're using server-side sorting,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getSortedData(data: any[]) {\n    if (!this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const isAsc = this.sort.direction === 'asc';\n      // console.log('Sort ON: ' + this.sort.active + ' A Has Property: ' + a.hasOwnProperty(this.sort.active) + ' B Has Property: ' + b.hasOwnProperty(this.sort.active) ) ;\n      if (a.hasOwnProperty(this.sort.active) && b.hasOwnProperty(this.sort.active)) {\n        return compare(a[this.sort.active], b[this.sort.active], isAsc);\n      } else {\n        return 0;\n      }\n    });\n  }\n}\n\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a, b, isAsc) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n","import {Component, Input, OnChanges, OnInit, SimpleChanges, ViewChild} from '@angular/core';\nimport {MatPaginator, MatSort} from '@angular/material';\nimport {TibcoCloudTableDataSource} from './tibco-cloud-table-datasource';\nimport {TcCoreCommonFunctions} from '../../common/tc-core-common-functions';\n\n@Component({\n  selector: 'tc-tibco-cloud-table',\n  templateUrl: './tibco-cloud-table.component.html',\n  styleUrls: ['./tibco-cloud-table.component.css']\n})\nexport class TibcoCloudTableComponent implements OnInit, OnChanges {\n  @Input() jsonSource: string;\n  @ViewChild(MatPaginator, { static: true }) paginator: MatPaginator;\n  @ViewChild(MatSort, { static: true }) sort: MatSort;\n\n  dataSource: TibcoCloudTableDataSource;\n\n  id: string = '_' + Math.random().toString(36).substr(2, 9);\n\n  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n  displayedColumns = [];\n  columns = [];\n\n  ngOnInit() {\n    this.updateTable();\n\n\n  }\n  ngOnChanges(changes) {\n    console.log('Table Changed');\n    this.updateTable();\n\n  }\n\n\n  updateTable() {\n    // console.log('JSONSource: ', this.jsonSource);\n    const parsedJsonSource = JSON.parse(this.jsonSource);\n    // console.log('Parsed JSON Source: ', parsedJsonSource);\n    this.dataSource = new TibcoCloudTableDataSource(this.paginator, this.sort, parsedJsonSource);\n    const myColumns = [];\n    if (parsedJsonSource.length != null) {\n      if (parsedJsonSource.length > 0) {\n        // console.log(parsedJsonSource[0]);\n        if (parsedJsonSource[0] != null) {\n          const myColumns = [];\n          let m = 0;\n          for (const headerName in parsedJsonSource[0]) {\n            if (parsedJsonSource[0].hasOwnProperty(headerName)) {\n              // console.log(m + ' headerName:', headerName);\n              this.displayedColumns.push(headerName);\n              myColumns[m] = {};\n              myColumns[m]['columnDef'] = headerName;\n              myColumns[m]['header'] = headerName;\n              myColumns[m].cell = function (element) {\n                return `${element[headerName]}`;\n              };\n              this.columns = myColumns;\n            }\n            m++;\n          }\n        }\n        // console.log('myColums:', this.columns);\n        // this.columDefArray = this.columns;\n      }\n    }\n  }\n\n\n  /*\n  private log(...m){\n    console.log('TIBCO CLOUD TABLE] ' , m);\n  }*/\n\n  camelCaseTW(header: string | any) {\n\n    return TcCoreCommonFunctions.camelCaseToWords(header);\n\n\n  }\n}\n","/**\n * @ngdoc component\n * @name tcLoggingService\n *\n * @description\n *\n * The logging service provides logging capabilities.\n *\n * A log level can be set:\n *\n *  All = 0,\n *  Debug = 1,\n *  Info = 2,\n *  Warn = 3,\n *  Error = 4,\n *  Fatal = 5,\n *  Off = 6\n *\n *\n */\n\nimport { Injectable } from '@angular/core';\n\n@Injectable()\nexport class LogService {\n\n  level: LogLevel = LogLevel.All;\n  logWithDate = true;\n\n  private writeToLog(msg: string,\n                     level: LogLevel,\n                     params: any[]) {\n    if (this.shouldLog(level)) {\n      let value = '';\n\n      // Build log string\n      if (this.logWithDate) {\n        value = new Date() + ' - ';\n      }\n      value += '[My Cloud Starter] [' + LogLevel[this.level] + '](' + this.getLevelString(level) + ')';\n      value += ' - Message: ' + msg;\n      if (params.length) {\n        value += ' - Extra Info: '\n          + this.formatParams(params);\n      }\n\n      // Log the value\n      console.log(value);\n    }\n  }\n\n  private shouldLog(level: LogLevel): boolean {\n    let ret = false;\n    if ((level >= this.level &&\n      level !== LogLevel.Off) ||\n      this.level === LogLevel.All) {\n      ret = true;\n    }\n    return ret;\n  }\n\n  private formatParams(params: any[]): string {\n    let ret: string = params.join(',');\n    // Is there at least one object in the array?\n    if (params.some(p => typeof p === 'object')) {\n      ret = '';\n      // Build comma-delimited string\n      for (const item of params) {\n        ret += JSON.stringify(item) + ',';\n      }\n    }\n    return ret;\n  }\n\n\n  debug(msg: string, ...optionalParams: any[]) {\n    this.writeToLog(msg, LogLevel.Debug,\n      optionalParams);\n  }\n\n  info(msg: string, ...optionalParams: any[]) {\n    this.writeToLog(msg, LogLevel.Info,\n      optionalParams);\n  }\n\n  warn(msg: string, ...optionalParams: any[]) {\n    this.writeToLog(msg, LogLevel.Warn,\n      optionalParams);\n  }\n\n  error(msg: string, ...optionalParams: any[]) {\n    this.writeToLog(msg, LogLevel.Error,\n      optionalParams);\n  }\n\n  fatal(msg: string, ...optionalParams: any[]) {\n    this.writeToLog(msg, LogLevel.Fatal,\n      optionalParams);\n  }\n\n  log(msg: string, ...optionalParams: any[]) {\n    this.writeToLog(msg, LogLevel.All,\n      optionalParams);\n  }\n  private getLevelString(level) {\n    let re = '';\n    switch (level) {\n      case LogLevel.All: {\n        re = 'All';\n        break;\n      }\n      case LogLevel.Debug: {\n        re = 'Debug';\n        break;\n      }\n      case LogLevel.Error: {\n        re = 'Error';\n        break;\n      }\n      case LogLevel.Fatal: {\n        re = 'Fatal';\n        break;\n      }\n      case LogLevel.Info: {\n        re = 'Info';\n        break;\n      }\n      case LogLevel.Off: {\n        re = 'Off';\n        break;\n      }\n      case LogLevel.Warn: {\n        re = 'Warn';\n        break;\n      }\n      default: {\n        // statements;\n        break;\n      }\n    }\n    return re;\n\n  }\n}\n\nexport enum LogLevel {\n  All = 0,\n  Debug = 1,\n  Info = 2,\n  Warn = 3,\n  Error = 4,\n  Fatal = 5,\n  Off = 6\n}\n\n","import {Component, EventEmitter, OnInit, Output} from '@angular/core';\nimport {TibcoCloudTableComponent} from '../tibco-cloud-table/tibco-cloud-table.component';\nimport {LogService} from '../../services/tc-logging.service';\n\n/**\n * A table that allows rows to be selected\n *\n *@example <tc-tibco-cloud-select-table></tc-tibco-cloud-select-table>\n */\n\n@Component({\n  selector: 'tc-tibco-cloud-select-table',\n  templateUrl: './tibco-cloud-select-table.component.html',\n  styleUrls: ['./tibco-cloud-select-table.component.css']\n})\nexport class TibcoCloudSelectTableComponent extends TibcoCloudTableComponent {\n\n\n  /**\n   * ~event selectedlines : the lines selected\n   * ~payload any : The lines that are selected in the table by the user\n   */\n  @Output() selectedlines: EventEmitter<any> = new EventEmitter<any>();\n\n  selected = {};\n\n  highlight(element) {\n    element.highlighted = !element.highlighted;\n  }\n\n  constructor(private logger: LogService) { /*, private tcfunctions: TcFunctionsService) {*/\n    super();\n    logger.info('Select Table Started... ');\n  }\n\n\n  public clicked(row) {\n    // console.log(row);\n    const myData = JSON.parse(JSON.stringify(this.dataSource.data));\n    // console.log(this.dataSource);\n    const selectedArray = new Array();\n    for (const line of myData) {\n      // console.log('s:' , line);\n      if (line.highlighted) {\n        delete line['hovered'];\n        delete line['highlighted'];\n        selectedArray.push(line);\n      }\n\n    }\n    // console.log('Selected Array: ' , selectedArray);\n    this.selected = JSON.stringify(selectedArray);\n    this.selectedlines.emit(this.selected);\n  }\n\n\n}\n","import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';\n\n\n/**\n * Renders the menu options for each config menu\n *\n * ![alt-text](../tibco-cloud-setting-menu-entry.png \"Image\")\n *\n *@example <tc-tibco-cloud-setting-menu-entry></tc-tibco-cloud-setting-menu-entry>\n */\n\n@Component({\n    selector: 'tc-tibco-cloud-setting-menu-entry',\n    templateUrl: './tibco-cloud-setting-menu-entry.component.html',\n    styleUrls: ['./tibco-cloud-setting-menu-entry.component.css']\n})\nexport class TibcoCloudSettingMenuEntryComponent implements OnInit {\n\n  /**\n   * icon name (svg key - needs to be registered)\n   */\n  @Input() icon: string;\n\n  /**\n   * page title comes from config resolver\n   */\n  @Input() title: string;\n\n  /**\n   * RenderedFormComponent: (options from third party API). TibcoCloudSettingMenuEntryComponent -Check with MC - not sure we need to document this.\n   */\n  @Input() options: string[];\n\n\n  /**\n   * ~event configureOption : Option Clicked\n   * ~payload string : emits Id of option selected in config main page (options)\n   */\n  @Output() configureOption: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor() { }\n\n    viewButtonClick(id) {\n      this.configureOption.emit(id);\n    }\n\n    ngOnInit() {\n    }\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { GeneralConfig } from '../../models/tc-general-config';\nimport { TcGeneralConfigService } from '../../services/tc-general-config.service';\nimport { Claim } from '../../models/tc-login';\nimport { MatSnackBar } from '@angular/material';\n\n\n/**\n * Manages general settings for Config page\n *\n * ![alt-text](../tibco-cloud-settings-general.png \"Image\")\n *\n *@example <tc-tibco-cloud-settings-general></tc-tibco-cloud-settings-general>\n */\n@Component({\n    selector: 'tc-tibco-cloud-settings-general',\n    templateUrl: './tibco-cloud-settings-general.component.html',\n    styleUrls: ['./tibco-cloud-settings-general.component.css']\n})\nexport class TibcoCloudSettingsGeneralComponent implements OnInit {\n\n    public applicationTitle: string;\n    public roles;\n    public displayName: boolean;\n    public documentationURL: string;\n    public panelOpenState = false;\n    public generalConfig: GeneralConfig;\n    public sandboxId: number;\n    public claims: Claim;\n\n    constructor(protected route: ActivatedRoute, protected generalConfigService: TcGeneralConfigService, protected snackBar: MatSnackBar) { }\n\n    ngOnInit() {\n      this.generalConfig = this.route.snapshot.data.generalConfigHolder;\n      this.claims = this.route.snapshot.data.claims;\n      this.sandboxId = Number(this.claims.primaryProductionSandbox.id).valueOf();\n\n        this.applicationTitle = this.generalConfig.applicationTitle;\n        // this.roles = this.generalConfig.roles;\n        this.displayName = this.generalConfig.displayName;\n        this.documentationURL = this.generalConfig.documentationUrl;\n    }\n\n    protected getRoute(): ActivatedRoute {\n      return this.route;\n    }\n\n    public runSaveFunction = () => {\n      this.generalConfigService.updateGeneralConfig(this.sandboxId, this.generalConfig.uiAppId, this.generalConfig, this.generalConfig.id).subscribe(\n          result => {\n              this.snackBar.open('General configuration saved', 'OK', {\n                  duration: 3000\n              });\n          },\n          error => {\n              this.snackBar.open('Error saving general configuration saved', 'OK', {\n                  duration: 3000\n              });\n          }\n      );\n    }\n\n}\n","// model used when a cockpit component wants app to change route\n\nexport class RouteAction {\n  constructor(public action: string,\n              public context: any\n  ) {}\n}\n","import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {Router, Route, ActivatedRoute} from '@angular/router';\nimport { Location } from '@angular/common';\nimport { ToolbarButton } from '../../models/tc-widget-header';\nimport { TcButtonsHelperService } from '../../services/tc-buttons-helper.service';\nimport {RouteAction} from '../../models/tc-routing-actions';\nimport {ConfigurationMenuConfig} from '../../models/tc-configuration-menu-config';\n\n/**\n * TIBCO Cloud Configuration Component\n *\n * ![alt-text](../tibco-cloud-configuration.png \"\")\n *\n * @example <tc-tibco-cloud-configuration></tc-tibco-cloud-configuration>\n */\n@Component({\n  selector: 'tc-tibco-cloud-configuration',\n  templateUrl: './tibco-cloud-configuration.component.html',\n  styleUrls: ['./tibco-cloud-configuration.component.css']\n})\nexport class TibcoCloudConfigurationComponent implements OnInit {\n  @Input() baseRoute: string;\n  @Input() configMenuPages: ConfigurationMenuConfig[];\n\n\n  /**\n   * ~event routeAction : Component requests route to another page\n   * ~payload RouteAction : RouteAction object to tell caller to navigate somewhere\n   */\n  @Output() routeAction: EventEmitter<RouteAction> = new EventEmitter<RouteAction>();\n  configName: string;\n  toolbarButtons: ToolbarButton[];\n\n  constructor(private router: Router, private route: ActivatedRoute, private buttonsHelper: TcButtonsHelperService, private location: Location) { }\n\n  private createToolbarButtons = (): ToolbarButton[] => {\n    const homeButton = this.buttonsHelper.createButton('close', 'tcs-close-icon', true, 'Close', true, true);\n    const buttons = [ homeButton ];\n    return buttons;\n  }\n\n  public handleSelectionEvent = (id: string) => {\n    this.configName = id;\n    const url = this.baseRoute + id.toLowerCase().split(' ').join('-');\n    this.router.navigate([url]);\n  }\n\n  public handleToolbarButtonEvent = (buttonId: string) => {\n    if (buttonId === 'close') {\n      this.routeAction.emit(new RouteAction('backClicked', null));\n    }\n  }\n\n  showConfig = (option: string) => {\n    this.configName = option;\n    console.log('Setting selected: ' + option);\n  }\n\n  ngOnInit() {\n    this.toolbarButtons = this.createToolbarButtons();\n    // this.configName = this.route.component;\n  }\n\n}\n\n","import { Component, Input, OnInit, Output, EventEmitter } from '@angular/core';\nimport { TcCoreCommonFunctions } from '../../common/tc-core-common-functions';\nimport { Location } from '@angular/common';\nimport { LandingPageItemConfig } from '../../models/tc-general-landing-page-config';\n\n/**\n * Splash Screen\n *\n *@example <tc-tibco-cloud-splash-screen></tc-tibco-cloud-splash-screen>\n */\n@Component({\n    selector: 'tc-tibco-cloud-splash-screen',\n    templateUrl: 'tibco-cloud-splash-screen.component.html',\n    styleUrls: ['tibco-cloud-splash-screen.component.css'],\n})\nexport class TibcoCloudSplashScreenComponent implements OnInit {\n\n  /**\n   * Splash Screen main Title\n   */\n  @Input() title: string;\n  /**\n   * Splash Sub-Title\n   */\n  @Input() subTitle: string;\n  /**\n   * Splash Configured Background Image URL to a SVG, PNG or Jpeg\n   */\n  @Input() backGroundImage: string;\n  /**\n   * Bullet Point Item Configuration with Icon's and Text\n   */\n  @Input() highlights: LandingPageItemConfig[];\n\n  /**\n   * ~event getStartedEvent : Get Started Clicked\n   * ~payload string : emits that user clicked get started button on cloud splash screen\n   */\n  @Output() getStartedEvent: EventEmitter<string> = new EventEmitter<string>();\n\n    /**\n     * Shows Application Overview like Configured\n     */\n    constructor() {\n    }\n\n    /**\n     * @ignore\n     */\n    ngOnInit(): void {\n      console.log(this);\n    }\n\n    /**\n     * Get Started Click to open the Application\n     */\n    getStartedClick = (): void => {\n        this.getStartedEvent.emit('test');\n    }\n\n\n}\n","/* models used by landing page config */\n\nimport { Deserializable } from './deserializable';\n\nexport class LandingPageItemConfig {\n    public title: string;\n    public content: string;\n    public iconURL: string;\n    deserialize(input: any) {\n        Object.assign(this, input);\n        return this;\n    }\n}\n\nexport class LandingPageConfig {\n    public key: string;\n    public description: string;\n    public title: string;\n    public subtitle: string;\n    public backgroundURL: string;\n    public homeRoute: string;\n    public highlights: LandingPageItemConfig[];\n    roles: string[];\n    deserialize(input: any) {\n        Object.assign(this, input);\n        return this;\n    }\n}\n\nexport class GeneralLandingPageConfig implements Deserializable {\n    id: string;\n    version: string;\n    uiAppId: string;\n    landingPage: LandingPageConfig[];\n    deserialize(input: any) {\n        Object.assign(this, input);\n        return this;\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { TcSharedStateService } from './tc-shared-state.service';\nimport { GeneralLandingPageConfig, LandingPageConfig } from '../models/tc-general-landing-page-config';\nimport { SharedStateContent, SharedStateEntry, SharedStateList } from '../models/tc-shared-state';\nimport { TcCoreCommonFunctions } from '../common/tc-core-common-functions';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TcGeneralLandingPageConfigService {\n\n    constructor(\n        private sharedStateService: TcSharedStateService\n    ) {\n    }\n\n    public createGeneralLandingPageConfig(sandboxId: number, uiAppId: string, generalLandingPageConfig: GeneralLandingPageConfig) {\n        const ssName = uiAppId + '.general.landing.page.config.tibcolabs.client.context.PUBLIC';\n        const content: SharedStateContent = new SharedStateContent();\n        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(generalLandingPageConfig));\n\n        return this.sharedStateService.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)\n            .pipe(\n                map(value => value)\n            );\n    }\n\n    public getGeneralLandingPageConfig(uiAppId: string, useCache: boolean, flushCache: boolean): Observable<GeneralLandingPageConfig> {\n        // if useCache is false this will trigger the service to update the cached version with latest\n        const ssName = uiAppId + '.general.landing.page.config.tibcolabs.client.context.PUBLIC';\n\n        return this.sharedStateService.getSharedState(ssName, 'PUBLIC', useCache, flushCache)\n            .pipe(\n                map(value => {\n                    if (value.sharedStateEntries.length > 0) {\n                        const ssresult = new GeneralLandingPageConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));\n                        ssresult.id = value.sharedStateEntries[0].id;\n                        return ssresult;\n                    } else {\n                        return undefined;\n                    }\n                }\n                )\n            );\n    }\n\n    public updateGeneralLandingPageConfig(sandboxId: number, uiAppId: string, generalLandingPageConfig: GeneralLandingPageConfig, id: string) {\n        const ssName = uiAppId + '.general.landing.page.config.tibcolabs.client.context.PUBLIC';\n        const content: SharedStateContent = new SharedStateContent();\n        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(generalLandingPageConfig));\n        const entry: SharedStateEntry = new SharedStateEntry();\n        entry.content = content;\n        entry.sandboxId = sandboxId;\n        entry.name = ssName;\n        entry.type = 'PUBLIC';\n        entry.id = id;\n        const ssList: SharedStateList = new SharedStateList();\n        ssList.sharedStateEntries = [];\n        ssList.sharedStateEntries.push(entry);\n\n        return this.sharedStateService.updateSharedState(ssList.sharedStateEntries)\n            .pipe(\n                map(value => {\n                    // flush the cache\n                    this.getGeneralLandingPageConfig(uiAppId, true, true).subscribe();\n                    return new GeneralLandingPageConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));\n                })\n            );\n    }\n}\n\n","import { Component, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\n\n@Component({\n    selector: 'tc-tibco-cloud-new-element',\n    templateUrl: './tibco-cloud-new-element.component.html',\n    styleUrls: ['./tibco-cloud-new-element.component.css']\n})\nexport class TibcoCloudNewElementComponent {\n\n    public id: string;\n    public name: string;\n    public elementType: string;\n\n    constructor(\n        public dialogRef: MatDialogRef<TibcoCloudNewElementComponent>,\n        @Inject(MAT_DIALOG_DATA) public data: any\n    ) {\n        this.elementType = data.resourceType;\n    }\n\n    onCreate() {\n        this.dialogRef.close({ event: 'submit', id: this.id, name: this.name });\n    }\n\n\n}\n","import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute } from '@angular/router';\nimport { LandingPageConfig, LandingPageItemConfig, GeneralLandingPageConfig } from '../../models/tc-general-landing-page-config';\nimport { TcGeneralLandingPageConfigService } from '../../services/tc-general-landing-page-config.service';\nimport { Claim } from '../../models/tc-login';\nimport { MatSnackBar, MatDialog } from '@angular/material';\nimport { TibcoCloudNewElementComponent } from '../tibco-cloud-new-element/tibco-cloud-new-element.component';\nimport { RoleAttribute } from '../../models/tc-general-config';\n\n/**\n * Configuration page home\n *\n *@example <tc-tibco-cloud-setting-landing></tc-tibco-cloud-setting-landing>\n */\n@Component({\n  selector: 'tc-tibco-cloud-setting-landing',\n  templateUrl: './tibco-cloud-setting-landing.component.html',\n  styleUrls: ['./tibco-cloud-setting-landing.component.css']\n})\nexport class TibcoCloudSettingLandingComponent implements OnInit {\n\n    private claims: Claim;\n    private landingPagesConfig: GeneralLandingPageConfig;\n    private sandboxId: number;\n    private uiAppId: string;\n\n    public landingPages: LandingPageConfig[];\n    public selectedWelcomePage: LandingPageConfig;\n    public allRoles: RoleAttribute[];\n    public selectedRole: RoleAttribute[];\n\n    constructor(\n        private route: ActivatedRoute,\n        private generalLandingPageConfigService: TcGeneralLandingPageConfigService,\n        private snackBar: MatSnackBar,\n        private dialog: MatDialog\n    ) { }\n\n    /**\n    * @ignore\n    */\n    ngOnInit() {\n        this.landingPagesConfig = this.route.snapshot.data.landingPagesConfigHolder;\n        this.landingPages = this.landingPagesConfig.landingPage;\n        this.allRoles = this.route.snapshot.data.allRolesHolder.roles.filter(element => !element.configuration);\n\n        this.sandboxId = this.route.snapshot.data.claims.primaryProductionSandbox.id;\n        this.uiAppId = this.route.snapshot.data.landingPagesConfigHolder.uiAppId;\n\n        // If there is only one landing page selects it automatically\n        if (this.landingPages.length == 1) {\n            this.selectedWelcomePage = this.landingPages[0];\n        }\n    }\n\n    /**\n     * Save Configuration\n     */\n    runSaveFunction(){\n        this.generalLandingPageConfigService.updateGeneralLandingPageConfig(this.sandboxId, this.uiAppId, this.landingPagesConfig, this.landingPagesConfig.id).subscribe(\n            result => {\n                this.snackBar.open('Landing Pages configuration saved', 'OK', {\n                    duration: 3000\n                });\n            },\n            err => {\n                this.snackBar.open('Error saving Landing Pages configuration', 'OK', {\n                    duration: 3000\n                });\n            }\n        );\n    }\n\n    /**\n     * Delete Configuration\n     */\n    runDeleteConfiguration(){\n        const pages = this.landingPages;\n        pages.forEach(element => {\n            if (element == this.selectedWelcomePage){\n                const index = pages.indexOf(element, 0);\n                pages.splice(index, 1);\n                this.selectedWelcomePage = undefined;\n            }\n        });\n    }\n\n    /**\n     * New Configuration\n     */\n    runNewConfiguration = ():void => {\n\n        const dialogRef = this.dialog.open(TibcoCloudNewElementComponent, {\n            width: '50%',\n            height: '30%',\n            maxWidth: '100vw',\n            maxHeight: '100vh',\n            panelClass: 'tcs-style-dialog',\n            data: { resourceType: 'Landing Page' }\n        });\n\n        dialogRef.afterClosed().subscribe(result => {\n            if (result) {\n                const newElement = new LandingPageConfig().deserialize({\n                    key: result.id,\n                    description: result.name,\n                    highlights: [new LandingPageItemConfig(), new LandingPageItemConfig(), new LandingPageItemConfig()]\n                });\n\n                this.landingPages.push(newElement);\n                this.selectedWelcomePage = newElement;\n            }\n        });\n    }\n\n    /**\n     * Helper to Compare Objects\n     */\n    compareObjects = (o1: string, o2: string): boolean => {\n        return o1 === o2;\n    }\n\n}\n","import {ModuleWithProviders, NgModule} from '@angular/core';\nimport {TibcoCloudNavbarComponent} from './components/tibco-cloud-navbar/tibco-cloud-navbar.component';\nimport {TibcoCloudLoginComponent} from './components/tibco-cloud-login/tibco-cloud-login.component';\nimport {HTTP_INTERCEPTORS, HttpClientModule} from '@angular/common/http';\nimport {BrowserModule, DomSanitizer} from '@angular/platform-browser';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {\n  MatButtonModule, MatButtonToggleModule,\n  MatCardModule,\n  MatCheckboxModule,\n  MatDialogModule, MatExpansionModule,\n  MatFormFieldModule,\n  MatIconModule, MatIconRegistry,\n  MatInputModule,\n  MatListModule,\n  MatMenuModule,\n  MatOptionModule,\n  MatPaginatorModule,\n  MatSelectModule,\n  MatSortModule,\n  MatTableModule,\n  MatTabsModule, MatToolbarModule,\n  MatTooltipModule\n} from '@angular/material';\nimport {FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {FlexLayoutModule} from '@angular/flex-layout';\nimport {ScrollingModule} from '@angular/cdk/scrolling';\nimport {TcSharedStateService} from './services/tc-shared-state.service';\nimport {RequestCacheService} from './services/request-cache.service';\nimport {CachingInterceptor} from './interceptors/caching-interceptor';\nimport {AuthGuard} from './guards/auth.guard';\nimport {AuthErrorInterceptor} from './interceptors/authentication-error-interceptor';\nimport {EllipsisPipe} from './pipes/ellipsis.pipe';\nimport {DurationSincePipe} from './pipes/duration-since.pipe';\nimport {HighlightPipe} from './pipes/highlight.pipe';\nimport {OrderByDatePipe} from './pipes/order-by-date.pipe';\nimport {ReversePipe} from './pipes/reverse.pipe';\nimport {TibcoCloudWidgetHeaderComponent} from './components/tibco-cloud-widget-header/tibco-cloud-widget-header.component';\nimport {TibcoCloudMenuBarComponent} from './components/tibco-cloud-menu-bar/tibco-cloud-menu-bar.component';\nimport {TcButtonsHelperService} from './services/tc-buttons-helper.service';\nimport {TibcoCloudErrorComponent} from './components/tibco-cloud-error/tibco-cloud-error.component';\nimport {OnCreateDirective} from './directives/on-create.directive';\nimport {TcGeneralConfigService} from './services/tc-general-config.service';\nimport {TibcoCloudTableComponent} from './components/tibco-cloud-table/tibco-cloud-table.component';\nimport {TibcoCloudSelectTableComponent} from './components/tibco-cloud-select-table/tibco-cloud-select-table.component';\nimport {TibcoCloudSettingMenuEntryComponent} from './components/tibco-cloud-setting-menu-entry/tibco-cloud-setting-menu-entry.component';\nimport {TibcoCloudSettingsGeneralComponent} from './components/tibco-cloud-settings-general/tibco-cloud-settings-general.component';\nimport {TibcoCloudConfigurationComponent} from './components/tibco-cloud-configuration/tibco-cloud-configuration.component';\nimport {NavigationEnd, Router, RouterModule} from '@angular/router';\nimport {TibcoCloudSplashScreenComponent} from './components/tibco-cloud-splash-screen/tibco-cloud-splash-screen.component';\nimport {CommonModule, Location} from '@angular/common';\nimport {TibcoCloudSettingLandingComponent} from './components/tibco-cloud-setting-landing/tibco-cloud-setting-landing.component';\nimport {TibcoCloudNewElementComponent} from './components/tibco-cloud-new-element/tibco-cloud-new-element.component';\nimport {MessageQueueService} from './common/tc-core-queue-comm';\nimport {MessageTopicService} from './common/tc-core-topic-comm';\n\n@NgModule({\n  declarations: [\n    TibcoCloudNavbarComponent,\n    TibcoCloudLoginComponent,\n    EllipsisPipe,\n    DurationSincePipe,\n    HighlightPipe,\n    OrderByDatePipe,\n    ReversePipe,\n    TibcoCloudWidgetHeaderComponent,\n    TibcoCloudMenuBarComponent,\n    TibcoCloudErrorComponent,\n    OnCreateDirective,\n    TibcoCloudTableComponent,\n    TibcoCloudSelectTableComponent,\n    TibcoCloudSettingMenuEntryComponent,\n    TibcoCloudSettingsGeneralComponent,\n    TibcoCloudConfigurationComponent,\n    TibcoCloudSplashScreenComponent,\n    TibcoCloudSettingLandingComponent,\n    TibcoCloudNewElementComponent\n  ],\n  imports: [\n    RouterModule,\n    HttpClientModule,\n    BrowserModule,\n    BrowserAnimationsModule,\n    MatButtonModule,\n    MatCardModule,\n    MatCheckboxModule,\n    MatListModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatIconModule,\n    MatSelectModule,\n    MatOptionModule,\n    MatDialogModule,\n    MatMenuModule,\n    MatCardModule,\n    MatTooltipModule,\n    MatTabsModule,\n    MatExpansionModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatListModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatToolbarModule,\n    MatIconModule,\n    MatSelectModule,\n    MatOptionModule,\n    MatDialogModule,\n    MatMenuModule,\n    MatCardModule,\n    MatTooltipModule,\n    MatTabsModule,\n    MatButtonToggleModule,\n    FormsModule,\n    FlexLayoutModule,\n    ScrollingModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MatSortModule,\n    MatTableModule,\n    MatPaginatorModule,\n    CommonModule\n  ],\n  exports: [\n    TibcoCloudNavbarComponent,\n    TibcoCloudLoginComponent,\n    TibcoCloudMenuBarComponent,\n    EllipsisPipe,\n    DurationSincePipe,\n    HighlightPipe,\n    OrderByDatePipe,\n    ReversePipe,\n    TibcoCloudWidgetHeaderComponent,\n    TibcoCloudErrorComponent,\n    OnCreateDirective,\n    TibcoCloudTableComponent,\n    TibcoCloudSelectTableComponent,\n    TibcoCloudSettingMenuEntryComponent,\n    TibcoCloudSettingsGeneralComponent,\n    TibcoCloudConfigurationComponent,\n    TibcoCloudSplashScreenComponent,\n    TibcoCloudNewElementComponent\n  ],\n  providers: [\n    RequestCacheService,\n    TcButtonsHelperService,\n    AuthGuard,\n    // comment this line to disable the CachingInterceptor\n    {provide: HTTP_INTERCEPTORS, useClass: CachingInterceptor, multi: true},\n    // error handling interceptor\n    {provide: HTTP_INTERCEPTORS, useClass: AuthErrorInterceptor, multi: true}\n    // uncomment this line to use the mock service interceptor\n    // { provide: HTTP_INTERCEPTORS, useClass: MockingInterceptor, multi: true }\n  ],\n  entryComponents: [TibcoCloudNewElementComponent]\n})\n\nexport class TcCoreLibModule {\n\n  private ms: MessageTopicService;\n\n  static forRoot(): ModuleWithProviders {\n    return {\n      ngModule: TcCoreLibModule,\n      providers: [TcSharedStateService, TcGeneralConfigService]\n    };\n  }\n\n  constructor(private matIconRegistry: MatIconRegistry, private domSanitizer: DomSanitizer, private location: Location, private router: Router, private messageService: MessageTopicService) {\n    this.ms = messageService;\n    // subscribe to route changes\n    this.router.events.subscribe((value) => {\n      // console.log('Router event: ' , value);\n      if (value instanceof NavigationEnd) {\n        // console.log('NAVIGATION END: ' + value.url);\n        this.ms.sendMessage('help', value.url);\n      }\n    });\n\n    // register all the default Icon SVGs used by this module\n\n    this.matIconRegistry.addSvgIconLiteral(\n      'ic-error-handler',\n      this.domSanitizer.bypassSecurityTrustHtml(('<svg version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" x=\"0px\" y=\"0px\"\\n' +\n        '\\t viewBox=\"0 0 350 350\" style=\"enable-background:new 0 0 350 350;\" xml:space=\"preserve\">\\n' +\n        '<style type=\"text/css\">\\n' +\n        '\\t.st0{fill:#F4F4F4;}\\n' +\n        '\\t.st1{fill:#E5E5E5;stroke:#9B9B9B;stroke-width:2.3664;stroke-miterlimit:10;}\\n' +\n        '\\t.st2{fill:#E5E5E5;stroke:#9B9B9B;stroke-width:3;stroke-miterlimit:10;}\\n' +\n        '\\t.st3{fill:#E5E5E5;stroke:#9B9B9B;stroke-width:2.7161;stroke-miterlimit:10;}\\n' +\n        '\\t.st4{fill:#E5E5E5;stroke:#9B9B9B;stroke-width:2.87;stroke-miterlimit:10;}\\n' +\n        '\\t.st5{fill:#9B9B9B;}\\n' +\n        '\\t.st6{fill:#FFFFFF;}\\n' +\n        '\\t.st7{font-family:\\'TimesNewRomanPS-BoldItalicMT\\';}\\n' +\n        '\\t.st8{font-size:97.6336px;}\\n' +\n        '\\t.st9{fill:#979797;}\\n' +\n        '</style>\\n' +\n        '<g>\\n' +\n        '\\t<circle class=\"st0\" cx=\"173.9\" cy=\"172.7\" r=\"138.7\"/>\\n' +\n        '\\t<path class=\"st1\" d=\"M178.3,209.6c2.3,4.8-7,20-24.5,26.3c-17.6,6.3-36.8,1.2-39.1-3.6c-0.4-0.9,6.5-10.6,12.4-9.9\\n' +\n        '\\t\\tc5.9,0.7,10.6-4.1,17.8-5.3S176,204.8,178.3,209.6z\"/>\\n' +\n        '\\t<ellipse class=\"st2\" cx=\"93\" cy=\"232.8\" rx=\"32.1\" ry=\"23.7\"/>\\n' +\n        '\\t<circle class=\"st2\" cx=\"102.3\" cy=\"156.4\" r=\"65.9\"/>\\n' +\n        '\\t<ellipse class=\"st3\" cx=\"68.2\" cy=\"256.4\" rx=\"19\" ry=\"14\"/>\\n' +\n        '\\t<ellipse class=\"st4\" cx=\"121.9\" cy=\"256.4\" rx=\"27\" ry=\"11\"/>\\n' +\n        '\\t<ellipse class=\"st5\" cx=\"104.7\" cy=\"148.6\" rx=\"10.2\" ry=\"3.6\"/>\\n' +\n        '\\t<path class=\"st5\" d=\"M153.4,225.7\"/>\\n' +\n        '\\t<circle class=\"st6\" cx=\"142.1\" cy=\"147.5\" r=\"12.1\"/>\\n' +\n        '\\t<path class=\"st5\" d=\"M139.9,142.7c2.4-1.3,5.3,0.3,6.3,3.5c1.1,3.3-0.1,7-2.5,8.3c-2.4,1.3-5.3-0.3-6.3-3.5S137.4,144,139.9,142.7z\\n' +\n        '\\t\\t\"/>\\n' +\n        '\\t<path class=\"st5\" d=\"M155.6,151.3c0.5,0.2,0.9,0.5,1.4,0.6c4.2,1.7,6.1,5.1,5.4,9.5c-1.3,8.8-2.5,17.6-3.7,26.5\\n' +\n        '\\t\\tc-0.2,1.5-0.3,3-0.7,4.5c-0.2,0.6-1,1.1-1.6,1.6c-0.3-0.7-1.1-1.3-1-1.9c1.3-10,2.6-20.1,4.1-30.1c0.5-3.6-0.2-6-2.6-7.2\\n' +\n        '\\t\\tc-1.4-0.7-2.4-0.9-3.6,0.8c-5.6,8-17.3,8.2-23.2,0.5c-4-5.3-4-12.5,0.2-17.8c4-5.2,11-6.9,17.1-4.3c6,2.6,9.5,8.8,8.6,15.4\\n' +\n        '\\t\\tC155.8,150,155.7,150.5,155.6,151.3z M129.9,145.8c-0.8,6.4,3.7,12.3,10.1,13.1c6.5,0.9,12.4-3.7,13.3-10.1\\n' +\n        '\\t\\tc0.9-6.3-3.8-12.3-10.1-13.2C136.8,134.7,130.8,139.3,129.9,145.8z\"/>\\n' +\n        '\\t<g>\\n' +\n        '\\t\\t<path class=\"st5\" d=\"M197.4,160.4c1.8-1.4,2.6-2.3,3.6-2.8c3.4-1.6,6.9-3.3,10.5-4.5c11-3.8,20.4-10,28.7-18.1\\n' +\n        '\\t\\t\\tc3.2-3.2,3.6-3,6,0.6c3,4.4,7.3,6.9,12.2,8.3c22.1,6.2,44.2,12.1,66.3,18.3c2.2,0.6,4.2,2.1,6.3,3.1c-1.6,1.5-3.1,3.3-4.9,4.4\\n' +\n        '\\t\\t\\tc-10,6-20.1,11.8-30.1,17.8c-2.6,1.6-4.9,1.9-7.9,1c-28.1-8.6-56.3-16.9-84.5-25.4C201.7,162.6,200,161.6,197.4,160.4z\\n' +\n        '\\t\\t\\t M323.1,166.4c-17.2-4.7-33.4-9-49.6-13.7c-10.9-3.2-23-3.9-31-14.2c-9.5,10.5-21.7,15.9-35,21c1.8,0.7,2.7,1.1,3.6,1.4\\n' +\n        '\\t\\t\\tc25.1,7.5,50.3,15,75.4,22.6c3.5,1.1,6.1,0.9,9.2-1C304.6,177.1,313.5,172.1,323.1,166.4z\"/>\\n' +\n        '\\t\\t<path class=\"st5\" d=\"M200.9,176.1c5.1,1.5,9.8,2.9,14.5,4.3c24.4,7.3,48.8,14.7,73.3,21.9c1.6,0.5,3.9,0.1,5.4-0.7\\n' +\n        '\\t\\t\\tc10.6-6,21-12.2,31.5-18.4c0.8-0.5,1.8-1.1,2.7-1.1c0.8,0,2.1,0.5,2.4,1.1c0.3,0.6-0.2,2-0.8,2.4c-1.9,1.4-3.9,2.5-5.9,3.7\\n' +\n        '\\t\\t\\tc-9.9,5.8-19.9,11.7-29.9,17.5c-1.1,0.6-2.8,0.9-4,0.5c-29.3-8.7-58.5-17.5-87.8-26.2c-0.7-0.2-1.6-0.3-2-0.7\\n' +\n        '\\t\\t\\tc-0.7-0.7-1.6-1.8-1.4-2.5C198.9,177.2,200.2,176.6,200.9,176.1z\"/>\\n' +\n        '\\t\\t<path class=\"st5\" d=\"M291.5,198.7c-6.7-2-13.1-3.9-19.4-5.8c-23.2-7-46.5-14-69.7-20.9c-0.5-0.1-1.1-0.1-1.4-0.4\\n' +\n        '\\t\\t\\tc-0.9-0.9-1.6-1.8-2.4-2.8c1.2-0.5,2.6-1.6,3.6-1.3c5.3,1.3,10.6,3,15.9,4.6c23.7,7.1,47.4,14.3,71.1,21.3c1.4,0.4,3.4,0,4.7-0.7\\n' +\n        '\\t\\t\\tc10.3-5.9,20.6-12,30.8-18c0.4-0.2,0.8-0.7,1.3-0.7c1.5-0.1,3.1-0.1,4.6-0.1c-0.7,1.3-1.1,3.1-2.3,3.8c-9.2,5.6-18.6,11-27.9,16.5\\n' +\n        '\\t\\t\\tc-2.3,1.4-4.6,2.8-7,4.1C292.8,198.5,292,198.6,291.5,198.7z\"/>\\n' +\n        '\\t\\t<path class=\"st6\" d=\"M323.1,166.4c-9.6,5.6-18.6,10.7-27.3,16.1c-3.1,1.9-5.8,2.1-9.2,1c-25.1-7.7-50.2-15.1-75.4-22.6\\n' +\n        '\\t\\t\\tc-0.9-0.3-1.8-0.7-3.6-1.4c13.2-5.1,25.5-10.4,35-21c8,10.3,20.1,11,31,14.2C289.7,157.4,305.9,161.7,323.1,166.4z\"/>\\n' +\n        '\\t</g>\\n' +\n        '\\t<g>\\n' +\n        '\\t\\t<path class=\"st5\" d=\"M219.9,202.9c-18.4,0-33.5-15.1-33.4-33.5c0-18.4,15.1-33.5,33.5-33.4c18.4,0.1,33.5,15.1,33.4,33.5\\n' +\n        '\\t\\t\\tC253.4,187.9,238.3,202.9,219.9,202.9z M219.8,194.2c13.6,0.1,24.9-11,25-24.6c0.1-13.5-11-24.9-24.6-25.1\\n' +\n        '\\t\\t\\tc-13.6-0.2-25,11-25.1,24.6C195,182.8,206,194.1,219.8,194.2z\"/>\\n' +\n        '\\t\\t<path class=\"st5\" d=\"M198.6,200.6c-3,3-10.2,10.7-13.2,13.6c-4.4,4.1-10.9,2.2-12.2-3.6c-0.5-2.2,0-4.4,1.5-5.9\\n' +\n        '\\t\\t\\tc4.9-5,9.9-9.8,14.1-13.9C192,194,195.3,197.3,198.6,200.6\"/>\\n' +\n        '\\t\\t<path class=\"st6\" d=\"M219.8,194.2c-13.8-0.1-24.8-11.4-24.7-25.1c0.1-13.6,11.5-24.7,25.1-24.6c13.6,0.2,24.8,11.5,24.6,25.1\\n' +\n        '\\t\\t\\tC244.7,183.2,233.4,194.4,219.8,194.2z M216.5,187.5c0.1,0.2,0.1,0.4,0.2,0.6c0.8,0.1,1.6,0.3,2.4,0.2c7.2-0.9,12.9-4.2,16.7-10.6\\n' +\n        '\\t\\t\\tc1.6-2.7,2.5-5.6,2.1-8.7c-0.1-0.9-0.8-2.2-1.5-2.4c-0.8-0.3-2.2,0.2-2.8,0.8c-1.1,1.1-1.9,2.6-2.6,4c-0.9,1.8-1.4,3.8-2.4,5.6\\n' +\n        '\\t\\t\\tc-2.1,3.8-5.6,6.3-9.2,8.5C218.3,186.1,217.4,186.8,216.5,187.5z\"/>\\n' +\n        '\\t\\t<path class=\"st5\" d=\"M216.5,187.5c0.9-0.7,1.9-1.4,2.8-2c3.6-2.2,7.1-4.7,9.2-8.5c1-1.8,1.5-3.8,2.4-5.6c0.7-1.4,1.5-2.9,2.6-4\\n' +\n        '\\t\\t\\tc0.6-0.6,2-1.1,2.8-0.8c0.7,0.3,1.4,1.5,1.5,2.4c0.4,3.1-0.5,6-2.1,8.7c-3.7,6.4-9.4,9.7-16.7,10.6c-0.8,0.1-1.6-0.1-2.4-0.2\\n' +\n        '\\t\\t\\tC216.6,187.9,216.5,187.7,216.5,187.5z\"/>\\n' +\n        '\\t</g>\\n' +\n        '\\t<text transform=\"matrix(0.996 -8.927000e-02 8.927000e-02 0.996 264.2169 166.3981)\" class=\"st5 st7 st8\">?</text>\\n' +\n        '\\t<path class=\"st5\" d=\"M148.7,182.4c1.7-1.8,4-1.6,5.6,0.1c5.8,6.2,0.1,16.1-7.6,16.7c-8,0.6-15.1-1.9-21.6-6.1\\n' +\n        '\\t\\tc-2.1-1.3-3.6-3.7-5.4-5.5c-0.3-0.3-1.2-0.6-1.5-0.4c-4.8,3.4-10.3,4-15.9,4c-4.7,0-9.1-0.8-13.4-3c-6-3-7.1-10.5-4.3-15.1\\n' +\n        '\\t\\tc2-3.3,5.7-4,8.5-1.4c-3.4-0.5-4.8,0.1-5.3,3c-0.2,1.3,0,3.3,0.7,3.9c1,0.7,3,0.8,4.2,0.3c5.2-1.8,10.2-4.1,15.5-5.7\\n' +\n        '\\t\\tc3.9-1.2,7.9-0.6,10.7,2.9c1.1,1.4,2.4,1.5,4,0.7c4.2-2.1,9.8-0.9,13.2,2.4c3.4,3.4,6.8,6.9,10.5,10c1,0.9,3.2,1.1,4.6,0.7\\n' +\n        '\\t\\tc1.7-0.4,2.4-2.8,1.9-4.7C152.4,183.3,151.1,182.5,148.7,182.4z\"/>\\n' +\n        '\\t<g>\\n' +\n        '\\t\\t<path class=\"st9\" d=\"M150.9,117.3c0,0,0.1,0,0.1,0l0,0L150.9,117.3z\"/>\\n' +\n        '\\t\\t<g>\\n' +\n        '\\t\\t\\t<path class=\"st5\" d=\"M182.9,108c-8.4-4.2-22.9-7.8-31.3-12.1c-3.3-1.7-5.8-3.9-7.3-7c-3.2-6.9-8.2-12.5-15.8-16.3\\n' +\n        '\\t\\t\\t\\tc-3-1.5-6-3.1-9-4.8c-1.6-0.9-3.2-1.6-4.9-2.3c-1.5-0.6-1.5-0.6-1.5-0.6c-1.7-0.5-3.2-0.9-3.3-0.9c0,0,0,0-0.1,0\\n' +\n        '\\t\\t\\t\\tc-6.7-0.1-13.4,0-20.1,0.4C83.9,64.8,78,65.3,72.4,67c-10.1,2.9-18.9,9.4-27.3,15.7C41.9,85,41.9,85,41.9,85\\n' +\n        '\\t\\t\\t\\tc-3.3,2.7-6.4,5.4-6.8,5.9c0,0,0,0-0.4,0.5c-1.5,1.6-2.8,3.3-3.9,5c-4.6,6.8-6.5,14.2-5.2,22.3c1.3,7.9,3.2,15.7,4.9,23.5\\n' +\n        '\\t\\t\\t\\tc1.1,4.8-0.1,9.3-2.1,13.8c-1.3,2.9-5.1,8.2-6.4,11.1c-1.1,2.4-2.4,4.8-3.6,7.2c-0.4,0.7-1,1.3-1.2,2c-0.2,0.8-0.5,2.3-0.1,2.5\\n' +\n        '\\t\\t\\t\\tc0.9,0.4,2.2,0.3,3.3,0.2c0.5,0,1.1-0.4,1.5-0.6c3-1.8,8.7-5.9,11.7-7.6c2.7-1.6,2.7-1.6,2.7-1.6c4.2-2.6,31.5-15.3,60.6-28.1\\n' +\n        '\\t\\t\\t\\ts53.1-23.4,53.3-23.5s0.6-0.2,0.6-0.3s0.1,0,0.1,0c0,0,0.6-0.2,1.3-0.4c0,0,0,0,0.8-0.1c7.5-1,21-2.6,28.5-3.6\\n' +\n        '\\t\\t\\t\\tc1.7-0.2,3.3-0.7,3.7-2.4C185.8,109,184.1,108.6,182.9,108z\"/>\\n' +\n        '\\t\\t</g>\\n' +\n        '\\t</g>\\n' +\n        '\\t<g>\\n' +\n        '\\t\\t<g>\\n' +\n        '\\t\\t\\t<path class=\"st5\" d=\"M69.4,67.1c-0.6-1.3-1.2-3-0.7-4.5c0.2-0.5,1.7-2.2,2.3-1.3c0.2,0.2-1.7,2.4-1.9,2.7c-0.6,1-1,2-1,3.1\\n' +\n        '\\t\\t\\t\\tc0,1.9,3,1.9,3,0c0-2.3,3-3.6,2.9-6c-0.1-2-2.3-3.1-4.1-2.8c-1.8,0.3-3.4,1.6-4,3.2c-0.9,2.4-0.1,4.9,0.8,7.1\\n' +\n        '\\t\\t\\t\\tC67.6,70.4,70.2,68.9,69.4,67.1L69.4,67.1z\"/>\\n' +\n        '\\t\\t</g>\\n' +\n        '\\t</g>\\n' +\n        '\\t<g>\\n' +\n        '\\t\\t<g>\\n' +\n        '\\t\\t\\t<path class=\"st5\" d=\"M67.7,66.9c-3.9-1-7.3-3.4-11.3-3.8c-2.5-0.2-6.3,0.3-7.5,2.9c-3,6.4,13.9,5,16.4,5.1c1.9,0.1,1.9-2.9,0-3\\n' +\n        '\\t\\t\\t\\tc-2.4-0.1-4.8-0.1-7.3-0.2c-1,0-2,0-3-0.1c-1.5-0.1-3.6-0.1-1.8-1.4c1.8-1.4,5.8,0.4,7.5,1.1c2,0.8,4,1.7,6.1,2.3\\n' +\n        '\\t\\t\\t\\tC68.8,70.3,69.6,67.4,67.7,66.9L67.7,66.9z\"/>\\n' +\n        '\\t\\t</g>\\n' +\n        '\\t</g>\\n' +\n        '</g>\\n' +\n        '</svg>\\n'))\n    );\n    this.matIconRegistry.addSvgIconLiteral(\n      'ic-documentation',\n      this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\\n' +\n        '    <g fill=\"#C8D4E8\" fill-rule=\"evenodd\">\\n' +\n        '        <path d=\"M33.6 14.4v-12l12.194 12.05L33.6 14.4zm3.6 12H15.6a1.2 1.2 0 0 1 0-2.4h21.6a1.2 1.2 0 0 1 0 2.4zm0 4.8H15.6a1.2 1.2 0 0 1 0-2.4h21.6a1.2 1.2 0 0 1 0 2.4zm0 4.8H15.6a1.2 1.2 0 0 1 0-2.4h21.6a1.2 1.2 0 0 1 0 2.4zM15.6 19.2h9.6a1.2 1.2 0 0 1 0 2.4h-9.6a1.2 1.2 0 0 1 0-2.4zM33.6 0H14.405A4.804 4.804 0 0 0 9.6 4.805v31.24c0 2.655 2.15 4.755 4.805 4.755H43.2c2.652 0 4.8-2.098 4.8-4.75V14.4L33.6 0z\"/>\\n' +\n        '        <path d=\"M12.006 43.2C9.35 43.2 7.2 41.074 7.2 38.42V7.2H4.806A4.804 4.804 0 0 0 0 12.005v31.24C.001 45.9 2.151 48 4.806 48H33.6c2.65 0 4.8-2.098 4.8-4.75v-.05H12.006z\"/>\\n' +\n        '    </g>\\n' +\n        '</svg>\\n')\n    );\n    this.matIconRegistry.addSvgIconLiteral(\n      'ic-community',\n      this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\\n' +\n        '    <path fill=\"#C8D4E8\" fill-rule=\"evenodd\" d=\"M24 17.6A6.3 6.3 0 1 1 24 5a6.3 6.3 0 0 1 0 12.6zm-1.68 2.1h3.36a8.82 8.82 0 0 1 8.82 8.82V42.8h-21V28.52a8.82 8.82 0 0 1 8.82-8.82zM9.3 21.8a4.2 4.2 0 1 1 0-8.4 4.2 4.2 0 0 1 0 8.4zm29.4 0a4.2 4.2 0 1 1 0-8.4 4.2 4.2 0 0 1 0 8.4zm-27.3 6.72v7.98H3v-8.4a4.2 4.2 0 0 1 4.2-4.2h4.2a4.2 4.2 0 0 1 1.218.21 8.715 8.715 0 0 0-1.218 4.41zm29.4-4.62a4.2 4.2 0 0 1 4.2 4.2v8.4h-8.4v-7.98a8.715 8.715 0 0 0-1.218-4.41 4.2 4.2 0 0 1 1.218-.21h4.2z\"/>\\n' +\n        '</svg>\\n')\n    );\n    this.matIconRegistry.addSvgIconLiteral(\n      'ic-graph',\n      this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"48\" height=\"48\" viewBox=\"0 0 48 48\">\\n' +\n        '    <path fill=\"#C8D4E8\" fill-rule=\"evenodd\" d=\"M45 15.818H3V8a2 2 0 0 1 2-2h38a2 2 0 0 1 2 2v7.818zm0 1.637V40a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V17.455h42zm-8.83 6.891l-5.863 6.03c-.4-.33-.908-.529-1.46-.529-.896 0-1.674.52-2.065 1.28l-4.936-2.82v-.02c0-1.325-1.045-2.4-2.333-2.4-1.289 0-2.334 1.075-2.334 2.4 0 .194.023.382.065.562l-5.558 4.446a2.286 2.286 0 0 0-1.507-.568c-1.288 0-2.333 1.075-2.333 2.4 0 1.326 1.045 2.4 2.333 2.4 1.29 0 2.334-1.074 2.334-2.4 0-.3-.054-.587-.152-.852l5.443-4.354a2.298 2.298 0 0 0 1.709.766c.859 0 1.61-.477 2.015-1.189l4.987 2.85c.051 1.279 1.075 2.3 2.331 2.3 1.289 0 2.333-1.075 2.333-2.4 0-.318-.06-.621-.168-.899l5.983-6.154c.348.211.753.332 1.185.332 1.29 0 2.334-1.074 2.334-2.4 0-1.325-1.045-2.4-2.334-2.4-1.288 0-2.333 1.075-2.333 2.4 0 .445.118.862.323 1.22zM7 10.091a.77.77 0 0 0-.77.77v.915c0 .425.345.77.77.77h30.282V10.09H7zm31.538 0v2.454H41a.77.77 0 0 0 .77-.769v-.916a.77.77 0 0 0-.77-.77h-2.462z\"/>\\n' +\n        '</svg>\\n')\n    );\n    this.matIconRegistry.addSvgIconLiteral(\n      'tibco-labs',\n      this.domSanitizer.bypassSecurityTrustHtml('<svg version=\"1.0\" xmlns=\"http://www.w3.org/2000/svg\"\\n' +\n        ' width=\"2318.000000pt\" height=\"3059.000000pt\" viewBox=\"0 0 2318.000000 3059.000000\"\\n' +\n        ' preserveAspectRatio=\"xMidYMid meet\">\\n' +\n        '<metadata>\\n' +\n        '</metadata>\\n' +\n        '<g transform=\"translate(0.000000,3059.000000) scale(0.100000,-0.100000)\"\\n' +\n        'fill=\"#ef3862\" stroke=\"none\">\\n' +\n        '<path d=\"M14320 25534 c-440 -54 -849 -265 -1124 -580 -465 -531 -521 -1285\\n' +\n        '-141 -1871 165 -254 380 -443 660 -583 157 -78 280 -122 435 -154 l105 -22 5\\n' +\n        '-800 c5 -731 6 -802 22 -830 26 -47 77 -95 123 -115 22 -9 439 -142 928 -295\\n' +\n        '488 -152 887 -280 887 -283 0 -3 -512 -127 -1138 -275 -2688 -636 -2578 -610\\n' +\n        '-2624 -642 -24 -16 -56 -52 -73 -79 -27 -43 -30 -57 -30 -130 0 -73 3 -87 30\\n' +\n        '-130 17 -27 48 -62 70 -77 28 -20 175 -70 485 -167 2686 -842 3194 -1002 3199\\n' +\n        '-1006 2 -3 2 -7 0 -9 -2 -2 -389 -79 -859 -171 -470 -92 -866 -173 -881 -181\\n' +\n        '-51 -26 -92 -68 -115 -119 l-24 -50 0 -1666 c0 -916 -2 -1668 -5 -1671 -3 -3\\n' +\n        '-47 3 -97 14 -1402 287 -3147 375 -4738 238 -2256 -195 -4136 -813 -5161\\n' +\n        '-1697 -361 -312 -627 -666 -772 -1028 -166 -413 -321 -1206 -396 -2030 -55\\n' +\n        '-592 -74 -1082 -74 -1835 0 -1060 50 -2003 169 -3180 35 -350 90 -836 99 -877\\n' +\n        'l5 -23 7880 0 7879 0 6 33 c14 84 37 241 64 447 226 1685 280 3231 160 4575\\n' +\n        '-87 980 -280 1896 -545 2582 -340 882 -1170 1613 -2448 2157 -402 172 -894\\n' +\n        '338 -1369 462 l-147 39 2 1594 3 1594 1261 247 c693 136 1274 255 1291 263\\n' +\n        '122 64 170 221 106 348 -17 31 -45 66 -68 84 -33 25 -381 137 -1908 615 -1027\\n' +\n        '322 -1867 587 -1867 590 0 3 834 202 1853 444 1018 241 1868 447 1888 457 50\\n' +\n        '25 104 91 119 144 7 24 11 74 8 109 -3 52 -10 74 -33 107 -63 89 -8 69 -1375\\n' +\n        '497 l-1275 400 -3 661 -2 661 22 4 c13 3 61 13 108 22 209 40 487 161 670 291\\n' +\n        '52 38 144 118 205 178 277 277 436 617 464 994 62 811 -516 1531 -1365 1702\\n' +\n        '-87 17 -151 22 -314 24 -113 2 -221 1 -240 -1z m868 -14495 c567 -61 1069\\n' +\n        '-331 1440 -774 197 -235 352 -537 426 -834 61 -241 60 -214 64 -1016 2 -490 0\\n' +\n        '-772 -7 -835 -47 -407 -207 -794 -461 -1115 -93 -117 -260 -279 -382 -371\\n' +\n        '-364 -272 -741 -409 -1202 -435 -120 -7 -1475 -9 -4026 -7 -3565 4 -3853 5\\n' +\n        '-3949 21 -511 84 -913 292 -1262 653 -306 317 -503 718 -576 1174 -16 104 -18\\n' +\n        '185 -18 850 0 799 2 828 60 1061 194 768 787 1370 1548 1569 98 26 246 53 347\\n' +\n        '63 19 2 1805 5 3968 5 2700 1 3963 -1 4030 -9z\"/>\\n' +\n        '<path fill=\"black\" d=\"M7760 8744 c-305 -82 -516 -554 -470 -1053 33 -365 187 -659 397\\n' +\n        '-763 62 -30 75 -33 163 -33 82 0 103 4 150 26 109 52 202 150 275 291 94 181\\n' +\n        '137 372 137 608 0 485 -210 875 -501 930 -68 13 -83 12 -151 -6z\"/>\\n' +\n        '<path fill=\"black\" d=\"M14425 8746 c-100 -25 -184 -83 -262 -181 -279 -349 -297 -1041 -37\\n' +\n        '-1431 66 -101 138 -167 224 -208 59 -28 74 -31 160 -31 85 0 101 3 155 30 127\\n' +\n        '63 259 229 324 410 59 164 76 269 76 485 0 211 -12 300 -62 447 -53 161 -147\\n' +\n        '313 -237 387 -102 83 -236 119 -341 92z\"/>\\n' +\n        '<path fill=\"black\" d=\"M18250 13800 l0 -70 140 0 140 0 0 -365 0 -365 75 0 75 0 0 365 0\\n' +\n        '365 135 0 135 0 0 70 0 70 -350 0 -350 0 0 -70z\"/>\\n' +\n        '<path fill=\"black\" d=\"M19120 13435 l0 -435 75 0 75 0 0 312 0 313 136 -204 137 -205 21 27\\n' +\n        'c11 15 73 105 136 201 63 96 118 175 123 175 4 1 7 -138 7 -309 l0 -310 75 0\\n' +\n        '75 0 0 435 0 435 -83 0 -82 0 -129 -200 c-71 -111 -132 -203 -135 -205 -4 -2\\n' +\n        '-65 87 -137 198 l-130 202 -82 3 -82 3 0 -436z\"/>\\n' +\n        '</g>\\n' +\n        '</svg>')\n    );\n\n    this.matIconRegistry.addSvgIconLiteral(\n      'splash-default-icon',\n      this.domSanitizer.bypassSecurityTrustHtml(\n        '<svg version=\"1.1\" id = \"Layer_1\" xmlns = \"http://www.w3.org/2000/svg\" xmlns: xlink = \"http://www.w3.org/1999/xlink\" x = \"0px\" y = \"0px\"\\n' +\n        'viewBox = \"0 0 64 64\" style = \"enable-background:new 0 0 64 64;\" xml: space = \"preserve\" >\\n' +\n        '<style type=\"text/css\" >\\n' +\n        '.st0{ fill: #333333; }\\n' +\n        '.st1{ fill: #FBAE17; }\\n' +\n        '</style>\\n' +\n        '<g>\\n' +\n        '<path class=\"st0\" d = \"M15.3,26.2H8.9c-0.6,0-1-0.4-1-1s0.4-1,1-1h6.4c0.6,0,1,0.4,1,1S15.9,26.2,15.3,26.2z\" />\\n' +\n        '<path class=\"st0\" d = \"M15.3,30.3H8.9c-0.6,0-1-0.4-1-1s0.4-1,1-1h6.4c0.6,0,1,0.4,1,1S15.9,30.3,15.3,30.3z\" />\\n' +\n        '<path class=\"st0\" d = \"M15.3,34.4H8.9c-0.6,0-1-0.4-1-1c0-0.6,0.4-1,1-1h6.4c0.6,0,1,0.4,1,1C16.3,34,15.9,34.4,15.3,34.4z\" />\\n' +\n        '<path class=\"st0\" d = \"M15.3,38.5H8.9c-0.6,0-1-0.4-1-1s0.4-1,1-1h6.4c0.6,0,1,0.4,1,1S15.9,38.5,15.3,38.5z\" />\\n' +\n        '<path class=\"st0\" d = \"M15.3,42.6H8.9c-0.6,0-1-0.4-1-1s0.4-1,1-1h6.4c0.6,0,1,0.4,1,1S15.9,42.6,15.3,42.6z\" />\\n' +\n        '<g>\\n' +\n        '<path class=\"st0\" d = \"M57.4,9.5H6.9c-1.1,0-2,0.9-2,2V62c0,1.1,0.9,2,2,2h50.5c1.1,0,2-0.9,2-2V11.5C59.4,10.4,58.5,9.5,57.4,9.5z M6.9,19.5h10.8V62H6.9V19.5z M57.4,62H19.7V19.5h37.7V62z M57.4,17.5H6.9v-6h50.5V17.5z\"/>\\n' +\n        '</g>\\n' +\n        '<path class= \"st0\" d = \"M11.6,15.4H10c-0.6,0-1-0.4-1-1s0.4-1,1-1h1.6c0.6,0,1,0.4,1,1S12.2,15.4,11.6,15.4z\" />\\n' +\n        '<path class=\"st0\" d = \"M16.8,15.4h-1.6c-0.6,0-1-0.4-1-1s0.4-1,1-1h1.6c0.6,0,1,0.4,1,1S17.4,15.4,16.8,15.4z\" />\\n' +\n        '<path class=\"st0\" d = \"M21.9,15.4h-1.6c-0.6,0-1-0.4-1-1s0.4-1,1-1h1.6c0.6,0,1,0.4,1,1S22.5,15.4,21.9,15.4z\" />\\n' +\n        '<g>\\n' +\n        '<path class=\"st0\" d = \"M52.2,25.9v6.2H24.5v-6.2L52.2,25.9L52.2,25.9z M53.2,23.9H23.5c-0.6,0-1,0.4-1,1v8.2c0,0.6,0.4,1,1,1h29.6c0.6,0,1-0.4,1-1v-8.2C54.2,24.4,53.7,23.9,53.2,23.9L53.2, 23.9z\"/>\\n' +\n        '</g>\\n' +\n        '<g>\\n' +\n        '<rect x=\"24.8\" y = \"39.5\" class= \"st1\" width = \"5\" height = \"5\" />\\n' +\n        '<path class=\"st0\" d = \"M30.8,37.5h-7c-0.6,0-1,0.4-1,1v7c0,0.6,0.4,1,1,1h7c0.6,0,1-0.4,1-1v-7C31.8,38,31.3,37.5,30.8,37.5zM29.8,44.5h-5v-5h5V44.5z\"/>\\n' +\n        '</g>\\n' +\n        '<g>\\n' +\n        '<rect x=\"35.9\" y = \"39.5\" class= \"st1\" width = \"5\" height = \"5\" />\\n' +\n        '<path class=\"st0\" d = \"M41.9,37.5h-7c-0.6,0-1,0.4-1,1v7c0,0.6,0.4,1,1,1h7c0.6,0,1-0.4,1-1v-7C42.9,38,42.5,37.5,41.9,37.5zM40.9,44.5h-5v-5h5V44.5z\"/>\\n' +\n        '</g>\\n' +\n        '<g>\\n' +\n        '<rect x=\"47.1\" y = \"39.5\" class= \"st1\" width = \"5\" height = \"5\" />\\n' +\n        '<path class=\"st0\" d = \"M53.1,37.5h-7c-0.6,0-1,0.4-1,1v7c0,0.6,0.4,1,1,1h7c0.6,0,1-0.4,1-1v-7C54.1,38,53.6,37.5,53.1,37.5zM52.1,44.5h-5v-5h5V44.5z\"/>\\n' +\n        '</g>\\n' +\n        '<g>\\n' +\n        '<rect x=\"24.8\" y = \"51\" class= \"st1\" width = \"5\" height = \"5\" />\\n' +\n        '<path class=\"st0\" d = \"M30.8,49h-7c-0.6,0-1,0.4-1,1v7c0,0.6,0.4,1,1,1h7c0.6,0,1-0.4,1-1v-7C31.8,49.5,31.3,49,30.8,49z M29.8,56h-5v-5h5V56z\"/>\\n' +\n        '</g>\\n' +\n        '<g>\\n' +\n        '<rect x=\"35.9\" y = \"51\" class= \"st1\" width = \"5\" height = \"5\" />\\n' +\n        '<path class=\"st0\" d = \"M41.9,49h-7c-0.6,0-1,0.4-1,1v7c0,0.6,0.4,1,1,1h7c0.6,0,1-0.4,1-1v-7C42.9,49.5,42.5,49,41.9,49z M40.9,56h-5v-5h5V56z\"/>\\n' +\n        '</g>\\n' +\n        '<g>\\n' +\n        '<rect x=\"47.1\" y = \"51\" class= \"st1\" width = \"5\" height = \"5\" />\\n' +\n        '<path class=\"st0\" d = \"M53.1,49h-7c-0.6,0-1,0.4-1,1v7c0,0.6,0.4,1,1,1h7c0.6,0,1-0.4,1-1v-7C54.1,49.5,53.6,49,53.1,49z M52.1,56h-5v-5h5V56z\"/>\\n' +\n        '</g>\\n' +\n        '</g>\\n' +\n        '</svg>\\n'\n      )\n    );\n\n  }\n}\n\n","import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { LandingPageConfig } from '../models/tc-general-landing-page-config';\nimport { TcGeneralLandingPageConfigService } from './tc-general-landing-page-config.service';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class TcGeneralLandingPageService {\n\n    constructor(\n        private generalLandingPageConfigService: TcGeneralLandingPageConfigService\n    ) {\n    }\n\n    public getLandingPage = (key: string, uiAppId: string): Observable<LandingPageConfig> => {\n        const landingPage = this.generalLandingPageConfigService.getGeneralLandingPageConfig(uiAppId, true, true).pipe(\n            map(landingPages => {\n                const page = landingPages.landingPage.filter(element => element.key === key )[0];\n                return page;\n            })            \n        )   \n        return landingPage;\n    }\n\n    public getLandingPageForRole = (roleId: string, uiAppId: string): Observable<LandingPageConfig> => {\n        return this.generalLandingPageConfigService.getGeneralLandingPageConfig(uiAppId, true, true).pipe(\n            map(landingPages => {\n                const candidatePages = landingPages.landingPage.filter(element => element.roles.indexOf(roleId) != -1);\n                switch (candidatePages.length) {\n                    case 0:\n                        return undefined;\n                    case 1:\n                        return candidatePages[0];\n                    default:\n                        return candidatePages[0];\n                }\n            })\n        );\n    } \n}\n\n","/* Models used by config menu */\n\nimport { Deserializable } from './deserializable';\n\n\nexport class ConfigurationMenuConfig {\n    menu: ConfigurationMenuEntry[];\n    deserialize(input: any) {\n        Object.assign(this, input);\n        return this;\n    }\n}\n\nexport class  ConfigurationMenuEntry {\n    entry: string;\n    options: string[];\n}\n","/**\n * @ngdoc component\n * @name mockingInterceptor\n *\n * @description\n * This interceptor attempts to use local json files from the assets directory to mock Tibco Cloud API calls\n *\n * Each mock file can contain either a single response or a \"mockedResponses\" object that contains specific URLs and responses\n *\n * @usage\n *\n *\n *\n */\n\nimport {Injectable} from '@angular/core';\nimport {HttpEvent, HttpRequest, HttpResponse, HttpInterceptor, HttpHandler, HttpClient, HttpHeaders} from '@angular/common/http';\nimport {Observable, of, onErrorResumeNext, throwError} from 'rxjs';\nimport {map, catchError, delay} from 'rxjs/operators';\n\n@Injectable()\nexport class MockingInterceptor implements HttpInterceptor {\n  MOCK_BASE_PATH = '/assets/mocks';\n\n  constructor(private http: HttpClient) {\n  }\n\n  public readMockJSON(url): Observable<any> {\n    return this.http.get(url);\n  }\n\n  intercept(req: HttpRequest<any>, next: HttpHandler) {\n\n    // save original request\n    const originalReq = req.clone();\n\n    // dont mock anything from assets folder\n    const urlparts = req.url.split('.');\n    const pathparts = urlparts[0].split('/');\n\n    if (pathparts[1] === 'assets') {\n      return this.sendRequest(originalReq, next);\n    }\n\n\n    // try and find a mock response\n    const resource = originalReq.url.split('?')[0];\n    const segments: string[] = resource.split('/');\n    const seg2: string[] = resource.split('/');\n    let path = this.MOCK_BASE_PATH;\n    // ignore the http/url parts if present\n    let responseType = 'json';\n    if (segments[0] === 'http:' || segments[0] === 'https:') {\n      segments.splice(0, 3);\n      // we are getting a webresource (will only work for text based resources like svg)\n      if (segments[0] === 'webresource') {\n        responseType = 'text';\n      }\n    } else {\n      // just remove the blank part\n      segments.splice(0, 1);\n    }\n    segments.splice(0, segments.length).forEach((seg) => {\n      path = path + '/' + seg;\n    });\n    if (responseType !== 'text') {\n      path = path + '.json';\n    } else {\n      path = path + '.txt';\n    }\n\n    let options = {};\n    if (responseType === 'text') {\n      options = { responseType: 'text' };\n    }\n    const httpRequest = new HttpRequest(\n      <any>'GET',\n      path,\n      options\n    );\n    req = Object.assign(req, httpRequest);\n    req = req.clone();\n    return next.handle(req).pipe(\n      delay(100),\n      map(\n        data => {\n          let d = <HttpResponse<any>> data;\n          if (d.status === 200) {\n            // return the body of the cached response loaded from file\n            console.log(originalReq.url);\n            let mockedResponse: HttpResponse<any>;\n            if (data['body']['mockedResponses']) {\n              // multi mocked response file\n              if (data['body']['mockedResponses'][originalReq.url]) {\n                data['body'] = data['body']['mockedResponses'][originalReq.url];\n                d = <HttpResponse<any>> data;\n                mockedResponse = new HttpResponse(d);\n              } else {\n                // no mock for this URL\n                // todo: there is a bug here that this does not trigger the real call\n                throwError('no mock for this url - no response sent');\n              }\n            } else {\n              // single mocked response file\n              mockedResponse = new HttpResponse(d);\n            }\n            return mockedResponse;\n          } else {\n            return data;\n          }\n        }\n      ),\n      catchError(\n        error => {\n          // no mock file so make real request\n          return this.sendRequest(originalReq, next);\n        }\n      )\n    );\n  }\n\n  sendRequest = (\n    req: HttpRequest<any>,\n    next: HttpHandler): Observable<HttpEvent<any>> => {\n    return next.handle(req);\n  }\n}\n","/* Used to resolve contents of general config file */\n\n/* This resolver will try and read the config from shared state\n * If a shared state entry does NOT exist it will use the defaults from a config file\n * Then update shared state with those contents\n */\n\nimport { Injectable } from '@angular/core';\nimport {Resolve} from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport {UiAppConfig, UiAppIdConfig} from '../models/tc-app-config';\nimport {flatMap, map, mergeMap, switchMap} from 'rxjs/operators';\nimport {TcSharedStateService} from '../services/tc-shared-state.service';\nimport {HttpClient} from '@angular/common/http';\nimport {TcGeneralConfigService} from '../services/tc-general-config.service';\nimport {GeneralConfig} from '../models/tc-general-config';\nimport {Location} from '@angular/common';\nimport {TcCoreCommonFunctions} from '../common/tc-core-common-functions';\n\n@Injectable()\nexport class GeneralConfigResolver implements Resolve<Observable<GeneralConfig>> {\n\n  DEFAULT_CONFIG_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/generalAppConfig.json');\n  APP_ID_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/uiAppId.json');\n\n  private sandboxId: number;\n  public defaultAppConfig: GeneralConfig;\n  private uiAppId: string;\n\n  constructor(private tcSharedState: TcSharedStateService, private generalConfigService: TcGeneralConfigService, private http: HttpClient, private location: Location) {}\n  // note appConfigResolver will need sandboxId to create app config state record.\n  // So we expect this to have been set by caller (done by tc-liveapps-lib/laConfigResolver).\n\n  public setSandbox = (sandboxId: number) => {\n    this.sandboxId = sandboxId;\n  }\n\n  // can be used to load defaultAppConfig from a JSON config\n  private getDefaultAppConfig = () => {\n    return this.http.get(this.DEFAULT_CONFIG_URL);\n  }\n\n  // loads uiAppId from json file in assets (appId.json)\n  private getAppId = (): Observable<UiAppIdConfig> => {\n    return this.http.get(this.APP_ID_URL).pipe(\n      map(uiAppId => {\n        const uiAppIdConfig = new UiAppIdConfig().deserialize(uiAppId);\n        this.uiAppId = uiAppIdConfig.uiAppId;\n        return uiAppIdConfig;\n        }\n      )\n    );\n  }\n\n  resolve(): Observable<GeneralConfig> {\n    const appConfig = this.getAppId().pipe(\n      switchMap(uiAppId => this.generalConfigService.getGeneralConfig(uiAppId.uiAppId, true, false)\n      .pipe(\n        mergeMap(\n          generalConfig => {\n            if (generalConfig === undefined) {\n              return this.getDefaultAppConfig().pipe(\n                flatMap(config => {\n                  this.defaultAppConfig = new GeneralConfig().deserialize(config);\n                  this.defaultAppConfig.uiAppId = this.uiAppId;\n                  return this.generalConfigService.createGeneralConfig(\n                    this.sandboxId,\n                    this.defaultAppConfig.uiAppId,\n                    this.defaultAppConfig)\n                    .pipe(\n                      flatMap(\n                        result => {\n                          const newAppConfig = this.defaultAppConfig;\n                          newAppConfig.id = result;\n                          return this.generalConfigService.updateGeneralConfig(\n                            this.sandboxId,\n                            newAppConfig.uiAppId,\n                            newAppConfig,\n                            result).pipe(\n                              flatMap(\n                                // trigger a read to flush the cache since we changed it\n                              updatedConf => {\n                                  return this.generalConfigService.getGeneralConfig(this.uiAppId, true, true).pipe(\n                                    map(\n                                      cachedConfig => {\n                                        return cachedConfig;\n                                      }\n                                    )\n                                  );\n\n                              }\n                              )\n                          );\n                         // return newAppConfig;\n                        })\n                    );\n                })\n              );\n             } else {\n              return of(generalConfig);\n            }\n          }\n        )\n      )\n      )\n    )\n    return appConfig;\n  }\n\n}\n","/* Used to resolve contents of configuration menu config file */\n\nimport { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, Resolve } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { UiAppIdConfig } from '../models/tc-app-config';\nimport { map, flatMap } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { ConfigurationMenuConfig } from '../models/tc-configuration-menu-config';\nimport { Location } from '@angular/common';\nimport {TcCoreCommonFunctions} from '../common/tc-core-common-functions';\n\n@Injectable()\nexport class ConfigurationMenuConfigResolver implements Resolve<Observable<ConfigurationMenuConfig>> {\n\n    // DEFAULT_CONFIG_URL = 'assets/config/<uiAppId>/configurationMenuConfig.json';\n    // JS: Changed since we will use different GIT repo for different templates from now on\n    DEFAULT_CONFIG_URL = 'assets/config/configurationMenuConfig.json';\n    APP_ID_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/uiAppId.json');\n\n    constructor(private http: HttpClient, private location: Location) { }\n\n    // can be used to load defaultAppConfig from a JSON config\n    private getConfigurationMenuConfig = (uiAppId: string) => {\n        return this.http.get(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, this.DEFAULT_CONFIG_URL.replace('<uiAppId>', uiAppId)));\n    }\n\n    // loads uiAppId from json file in assets (appId.json)\n    private getAppId = (): Observable<UiAppIdConfig> => {\n        return this.http.get(this.APP_ID_URL).pipe(\n            map(uiAppId => {\n                const uiAppIdConfig = new UiAppIdConfig().deserialize(uiAppId);\n                return uiAppIdConfig;\n            })\n        );\n    }\n\n    resolve(routeSnapshot: ActivatedRouteSnapshot): Observable<ConfigurationMenuConfig> {\n        const configurationMenuConfig$ =\n            this.getAppId().pipe(\n                flatMap(uiAppId => {\n                    return this.getConfigurationMenuConfig(uiAppId.uiAppId).pipe(\n                        map(config => {\n                            return new ConfigurationMenuConfig().deserialize(config);\n                        })\n                    );\n                })\n            )\n        return configurationMenuConfig$;\n    }\n\n}\n","/* Used to resolve contents of landing page config file */\n\n/* This resolver will try and read the config from shared state\n * If a shared state entry does NOT exist it will use the defaults from a config file\n * Then update shared state with those contents\n */\n\nimport { Injectable } from '@angular/core';\nimport { Resolve } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { UiAppIdConfig } from '../models/tc-app-config';\nimport { flatMap, map, mergeMap, switchMap } from 'rxjs/operators';\nimport { TcSharedStateService } from '../services/tc-shared-state.service';\nimport { HttpClient } from '@angular/common/http';\nimport { GeneralConfig } from '../models/tc-general-config';\nimport { Location } from '@angular/common';\nimport { TcCoreCommonFunctions } from '../common/tc-core-common-functions';\nimport { TcGeneralLandingPageConfigService } from '../services/tc-general-landing-page-config.service';\nimport { GeneralLandingPageConfig } from '../models/tc-general-landing-page-config';\n\n@Injectable()\nexport class GeneralLandingPageConfigResolver implements Resolve<Observable<GeneralLandingPageConfig>> {\n\n    DEFAULT_CONFIG_URL = 'assets/config/landingPages.json';\n    APP_ID_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/uiAppId.json');\n\n    private sandboxId: number;\n    public defaultLandingPageConfig: GeneralLandingPageConfig;\n    private uiAppId: string;\n\n    constructor(\n        private tcSharedState: TcSharedStateService,\n        private generalLandingPageConfigService: TcGeneralLandingPageConfigService,\n        private http: HttpClient,\n        private location: Location) { }\n    // note appConfigResolver will need sandboxId to create app config state record.\n    // So we expect this to have been set by caller (done by tc-liveapps-lib/laConfigResolver).\n\n    public setSandbox = (sandboxId: number) => {\n        this.sandboxId = sandboxId;\n    }\n\n    // can be used to load defaultAppConfig from a JSON config\n    private getDefaultAppConfig = () => {\n        return this.http.get(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, this.DEFAULT_CONFIG_URL));\n    }\n\n    // loads uiAppId from json file in assets (appId.json)\n    private getAppId = (): Observable<UiAppIdConfig> => {\n        return this.http.get(this.APP_ID_URL).pipe(\n            map(uiAppId => {\n                const uiAppIdConfig = new UiAppIdConfig().deserialize(uiAppId);\n                this.uiAppId = uiAppIdConfig.uiAppId;\n                return uiAppIdConfig;\n            }\n            )\n        );\n    }\n\n    resolve(): Observable<GeneralLandingPageConfig> {\n        const appConfig = this.getAppId().pipe(\n            switchMap(uiAppId => this.generalLandingPageConfigService.getGeneralLandingPageConfig(uiAppId.uiAppId, true, false)\n                .pipe(\n                    mergeMap(\n                        generalConfig => {\n                            if (generalConfig === undefined) {\n                                return this.getDefaultAppConfig().pipe(\n                                    flatMap(config => {\n                                        this.defaultLandingPageConfig = new GeneralLandingPageConfig().deserialize(config);\n                                        this.defaultLandingPageConfig.uiAppId = this.uiAppId;\n                                        return this.generalLandingPageConfigService.createGeneralLandingPageConfig(\n                                            this.sandboxId,\n                                            this.uiAppId,\n                                            this.defaultLandingPageConfig)\n                                            .pipe(\n                                                flatMap(\n                                                    result => {\n                                                        const newAppConfig = this.defaultLandingPageConfig;\n                                                        newAppConfig.id = result;\n                                                        return this.generalLandingPageConfigService.updateGeneralLandingPageConfig(\n                                                            this.sandboxId,\n                                                            this.uiAppId,\n                                                            newAppConfig,\n                                                            result).pipe(\n                                                                flatMap(\n                                                                    // trigger a read to flush the cache since we changed it\n                                                                    updatedConf => {\n                                                                        return this.generalLandingPageConfigService.getGeneralLandingPageConfig(this.uiAppId, true, true).pipe(\n                                                                            map(\n                                                                                cachedConfig => {\n                                                                                    return cachedConfig;\n                                                                                }\n                                                                            )\n                                                                        );\n\n                                                                    }\n                                                                )\n                                                            );\n                                                        // return newAppConfig;\n                                                    })\n                                            );\n                                    })\n                                );\n                            } else {\n                                return of(generalConfig);\n                            }\n                        }\n                    )\n                )\n            )\n        )\n        return appConfig;\n    }\n\n}\n","import {Injectable} from '@angular/core';\nimport {Observable, Subject} from 'rxjs';\n\n@Injectable({providedIn: 'root'})\nexport class MessageQueueService {\n\n  queues: Array<{ name: string, subject: Subject<any> }> = [\n    {name: 'sample.queue', subject: new Subject<any>()}\n  ];\n\n  constructor() {\n     console.log('Queue Message service Created...');\n  }\n\n  sendMessage(name: string, message: string) {\n    this.createQueueIfNotExists(name);\n    this.queues.filter(x => x.name === name)[0].subject.next({text: message});\n  }\n\n  clearMessages(name: string) {\n    this.createQueueIfNotExists(name);\n    this.queues.filter(x => x.name === name)[0].subject.next();\n  }\n\n  getMessage(name: string): Observable<any> {\n    this.createQueueIfNotExists(name);\n    return this.queues.filter(x => x.name === name)[0].subject.asObservable();\n  }\n\n  createQueueIfNotExists(name: string) {\n    let queueExist = false;\n    for (const q of this.queues) {\n      if (q.name === name) {\n        // console.log('Queue Exist: ' + q.name);\n        queueExist = true;\n      }\n    }\n    if (!queueExist) {\n      console.log('Creating Queue: ' + name);\n      const tempQueue = {name: name, subject: new Subject<any>()};\n      this.queues.push(tempQueue);\n    }\n  }\n}\n"]}