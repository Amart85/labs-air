/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// This guard will redirect to login when not authenticated against live apps.
// If hosted on Tibco cloud it will not be used since Tibco Cloud/Live Apps WRP resources are protected anyway.
// session is detected if API called in last 30 mins (checks local sessionTimestamp)
// alternative way to achieve this would be to make an API call - eg) live apps claims call
// NOTE: assumes the login route is /login
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
export class AuthGuard {
    /**
     * @param {?} router
     */
    constructor(router) {
        this.router = router;
        this.TIBCO_CLOUD_DOMAIN = 'cloud.tibco.com';
        this.TIBCO_TEST_DOMAIN = 'tenant-integration.tcie.pro';
        this.TIBCO_DEV_DOMAIN = 'emea.tibco.com';
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivate(route, state) {
        // check if we are hosted on tibco.cloud.com
        /** @type {?} */
        const host = window.location.hostname.split('.');
        /** @type {?} */
        const hostDomain = host[host.length - 3] + '.' + host[host.length - 2] + '.' + host[host.length - 1];
        if (hostDomain === this.TIBCO_CLOUD_DOMAIN || hostDomain === this.TIBCO_TEST_DOMAIN || hostDomain === this.TIBCO_DEV_DOMAIN) {
            // delegate handling login/auth to Tibco Cloud since WRP resources are protected anyway
            return true;
        }
        else {
            // use the sessionTimestamp to decide whether to redirect to login (30 mins expiry of token if no API call)
            /** @type {?} */
            const tcsTimestamp = sessionStorage.getItem('tcsTimestamp');
            if (tcsTimestamp && Number(tcsTimestamp) > (Number(Date.now()) - (30 * 60000))) {
                // logged in and api called made in last 30 mins so should be OK
                return true;
            }
            else {
                // not logged in so redirect to login page
                this.router.navigate(['/login'], { queryParams: { returnUrl: state.url } });
            }
        }
    }
}
AuthGuard.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AuthGuard.ctorParameters = () => [
    { type: Router }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.TIBCO_CLOUD_DOMAIN;
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.TIBCO_TEST_DOMAIN;
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.TIBCO_DEV_DOMAIN;
    /**
     * @type {?}
     * @private
     */
    AuthGuard.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9ndWFyZHMvYXV0aC5ndWFyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFRQSxPQUFPLEVBQVMsVUFBVSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ2pELE9BQU8sRUFBRSxNQUFNLEVBQTRELE1BQU0saUJBQWlCLENBQUM7QUFHbkcsTUFBTSxPQUFPLFNBQVM7Ozs7SUFLcEIsWUFBb0IsTUFBYztRQUFkLFdBQU0sR0FBTixNQUFNLENBQVE7UUFKMUIsdUJBQWtCLEdBQUcsaUJBQWlCLENBQUM7UUFDdkMsc0JBQWlCLEdBQUcsNkJBQTZCLENBQUM7UUFDbEQscUJBQWdCLEdBQUcsZ0JBQWdCLENBQUM7SUFHNUMsQ0FBQzs7Ozs7O0lBRUQsV0FBVyxDQUFDLEtBQTZCLEVBQUUsS0FBMEI7OztjQUU3RCxJQUFJLEdBQUcsTUFBTSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQzs7Y0FDMUMsVUFBVSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxHQUFHLEdBQUcsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ3BHLElBQUksVUFBVSxLQUFLLElBQUksQ0FBQyxrQkFBa0IsSUFBSSxVQUFVLEtBQUssSUFBSSxDQUFDLGlCQUFpQixJQUFJLFVBQVUsS0FBSyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7WUFDM0gsdUZBQXVGO1lBQ3ZGLE9BQU8sSUFBSSxDQUFDO1NBQ2I7YUFBTTs7O2tCQUVDLFlBQVksR0FBRyxjQUFjLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQztZQUMzRCxJQUFJLFlBQVksSUFBSSxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDOUUsZ0VBQWdFO2dCQUNoRSxPQUFPLElBQUksQ0FBQzthQUNiO2lCQUFNO2dCQUNMLDBDQUEwQztnQkFDMUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxRQUFRLENBQUMsRUFBRSxFQUFDLFdBQVcsRUFBRSxFQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsR0FBRyxFQUFDLEVBQUMsQ0FBQyxDQUFDO2FBQ3pFO1NBQ0Y7SUFDSCxDQUFDOzs7WUEzQkYsVUFBVTs7OztZQUZGLE1BQU07Ozs7Ozs7SUFJYix1Q0FBK0M7Ozs7O0lBQy9DLHNDQUEwRDs7Ozs7SUFDMUQscUNBQTRDOzs7OztJQUVoQywyQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUaGlzIGd1YXJkIHdpbGwgcmVkaXJlY3QgdG8gbG9naW4gd2hlbiBub3QgYXV0aGVudGljYXRlZCBhZ2FpbnN0IGxpdmUgYXBwcy5cbi8vIElmIGhvc3RlZCBvbiBUaWJjbyBjbG91ZCBpdCB3aWxsIG5vdCBiZSB1c2VkIHNpbmNlIFRpYmNvIENsb3VkL0xpdmUgQXBwcyBXUlAgcmVzb3VyY2VzIGFyZSBwcm90ZWN0ZWQgYW55d2F5LlxuXG4vLyBzZXNzaW9uIGlzIGRldGVjdGVkIGlmIEFQSSBjYWxsZWQgaW4gbGFzdCAzMCBtaW5zIChjaGVja3MgbG9jYWwgc2Vzc2lvblRpbWVzdGFtcClcbi8vIGFsdGVybmF0aXZlIHdheSB0byBhY2hpZXZlIHRoaXMgd291bGQgYmUgdG8gbWFrZSBhbiBBUEkgY2FsbCAtIGVnKSBsaXZlIGFwcHMgY2xhaW1zIGNhbGxcblxuLy8gTk9URTogYXNzdW1lcyB0aGUgbG9naW4gcm91dGUgaXMgL2xvZ2luXG5cbmltcG9ydCB7SW5qZWN0LCBJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlciwgQ2FuQWN0aXZhdGUsIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIFJvdXRlclN0YXRlU25hcHNob3QgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQXV0aEd1YXJkIGltcGxlbWVudHMgQ2FuQWN0aXZhdGUge1xuICBwcml2YXRlIFRJQkNPX0NMT1VEX0RPTUFJTiA9ICdjbG91ZC50aWJjby5jb20nO1xuICBwcml2YXRlIFRJQkNPX1RFU1RfRE9NQUlOID0gJ3RlbmFudC1pbnRlZ3JhdGlvbi50Y2llLnBybyc7XG4gIHByaXZhdGUgVElCQ09fREVWX0RPTUFJTiA9ICdlbWVhLnRpYmNvLmNvbSc7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge1xuICB9XG5cbiAgY2FuQWN0aXZhdGUocm91dGU6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIHN0YXRlOiBSb3V0ZXJTdGF0ZVNuYXBzaG90KSB7XG4gICAgLy8gY2hlY2sgaWYgd2UgYXJlIGhvc3RlZCBvbiB0aWJjby5jbG91ZC5jb21cbiAgICBjb25zdCBob3N0ID0gd2luZG93LmxvY2F0aW9uLmhvc3RuYW1lLnNwbGl0KCcuJyk7XG4gICAgY29uc3QgaG9zdERvbWFpbiA9IGhvc3RbaG9zdC5sZW5ndGggLSAzXSArICcuJyArIGhvc3RbaG9zdC5sZW5ndGggLSAyXSArICcuJyArIGhvc3RbaG9zdC5sZW5ndGggLSAxXTtcbiAgICBpZiAoaG9zdERvbWFpbiA9PT0gdGhpcy5USUJDT19DTE9VRF9ET01BSU4gfHwgaG9zdERvbWFpbiA9PT0gdGhpcy5USUJDT19URVNUX0RPTUFJTiB8fCBob3N0RG9tYWluID09PSB0aGlzLlRJQkNPX0RFVl9ET01BSU4pIHtcbiAgICAgIC8vIGRlbGVnYXRlIGhhbmRsaW5nIGxvZ2luL2F1dGggdG8gVGliY28gQ2xvdWQgc2luY2UgV1JQIHJlc291cmNlcyBhcmUgcHJvdGVjdGVkIGFueXdheVxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHVzZSB0aGUgc2Vzc2lvblRpbWVzdGFtcCB0byBkZWNpZGUgd2hldGhlciB0byByZWRpcmVjdCB0byBsb2dpbiAoMzAgbWlucyBleHBpcnkgb2YgdG9rZW4gaWYgbm8gQVBJIGNhbGwpXG4gICAgICBjb25zdCB0Y3NUaW1lc3RhbXAgPSBzZXNzaW9uU3RvcmFnZS5nZXRJdGVtKCd0Y3NUaW1lc3RhbXAnKTtcbiAgICAgIGlmICh0Y3NUaW1lc3RhbXAgJiYgTnVtYmVyKHRjc1RpbWVzdGFtcCkgPiAoTnVtYmVyKERhdGUubm93KCkpIC0gKDMwICogNjAwMDApKSkge1xuICAgICAgICAvLyBsb2dnZWQgaW4gYW5kIGFwaSBjYWxsZWQgbWFkZSBpbiBsYXN0IDMwIG1pbnMgc28gc2hvdWxkIGJlIE9LXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbm90IGxvZ2dlZCBpbiBzbyByZWRpcmVjdCB0byBsb2dpbiBwYWdlXG4gICAgICAgIHRoaXMucm91dGVyLm5hdmlnYXRlKFsnL2xvZ2luJ10sIHtxdWVyeVBhcmFtczoge3JldHVyblVybDogc3RhdGUudXJsfX0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIl19