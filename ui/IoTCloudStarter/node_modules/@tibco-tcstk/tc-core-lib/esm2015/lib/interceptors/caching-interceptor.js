/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @ngdoc component
 * @name CachingInterceptor
 *
 * @description
 *
 * This interceptor will intercept http calls if it is enabled in the tc-core-lib-module.ts.
 *
 * It will cache requests if the cacheResponse header is specified on the http request.
 * If flush cache header is on the request it will not use the cache and will overwrite the current cached entry.
 *
 *
 */
import { Injectable } from '@angular/core';
import { HttpResponse } from '@angular/common/http';
import { of } from 'rxjs';
import { tap } from 'rxjs/operators';
import { RequestCacheService } from '../services/request-cache.service';
export class CachingInterceptor {
    /**
     * @param {?} cache
     */
    constructor(cache) {
        this.cache = cache;
    }
    /**
     * @param {?} req
     * @param {?} next
     * @return {?}
     */
    intercept(req, next) {
        /** @type {?} */
        let cachedResponse;
        if (req.headers.get('cacheResponse') || (req.urlWithParams.substr(0, 15)) === '../assets/icons') {
            // only cache if the cacheResponse flag is set
            if (!req.headers.get('flushCache')) {
                cachedResponse = this.cache.get(req);
            }
            else {
            }
            // use the cache
        }
        else {
            // dont pass the cache since this should not be cached
            return this.sendRequest(req, next, undefined);
        }
        // return cached response or make request if no cached response
        return cachedResponse ? of(cachedResponse) : this.sendRequest(req, next, this.cache);
    }
    /**
     * @param {?} req
     * @param {?} next
     * @param {?} cache
     * @return {?}
     */
    sendRequest(req, next, cache) {
        return next.handle(req)
            .pipe(tap((/**
         * @param {?} event
         * @return {?}
         */
        event => {
            if (event instanceof HttpResponse && cache) {
                cache.put(req, event);
            }
        })));
    }
}
CachingInterceptor.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CachingInterceptor.ctorParameters = () => [
    { type: RequestCacheService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CachingInterceptor.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FjaGluZy1pbnRlcmNlcHRvci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9pbnRlcmNlcHRvcnMvY2FjaGluZy1pbnRlcmNlcHRvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQWNBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUEwQixZQUFZLEVBQWdDLE1BQU0sc0JBQXNCLENBQUM7QUFFMUcsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFHeEUsTUFBTSxPQUFPLGtCQUFrQjs7OztJQUM3QixZQUFvQixLQUEwQjtRQUExQixVQUFLLEdBQUwsS0FBSyxDQUFxQjtJQUFHLENBQUM7Ozs7OztJQUNsRCxTQUFTLENBQUMsR0FBcUIsRUFBRSxJQUFpQjs7WUFDNUMsY0FBYztRQUNsQixJQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEtBQUssaUJBQWlCLEVBQUU7WUFDL0YsOENBQThDO1lBQzlDLElBQUksQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsRUFBRTtnQkFDbEMsY0FBYyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQ3RDO2lCQUFNO2FBQ047WUFDRCxnQkFBZ0I7U0FDakI7YUFBTTtZQUNMLHNEQUFzRDtZQUN0RCxPQUFPLElBQUksQ0FBQyxXQUFXLENBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztTQUMvQztRQUNELCtEQUErRDtRQUMvRCxPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3ZGLENBQUM7Ozs7Ozs7SUFFRCxXQUFXLENBQ1QsR0FBcUIsRUFDckIsSUFBaUIsRUFDakIsS0FBMEI7UUFDMUIsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQzthQUNwQixJQUFJLENBQ0wsR0FBRzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1YsSUFBSSxLQUFLLFlBQVksWUFBWSxJQUFJLEtBQUssRUFBRTtnQkFDMUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7YUFDdkI7UUFDSCxDQUFDLEVBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7O1lBaENGLFVBQVU7Ozs7WUFGRixtQkFBbUI7Ozs7Ozs7SUFJZCxtQ0FBa0MiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBuZ2RvYyBjb21wb25lbnRcbiAqIEBuYW1lIENhY2hpbmdJbnRlcmNlcHRvclxuICpcbiAqIEBkZXNjcmlwdGlvblxuICpcbiAqIFRoaXMgaW50ZXJjZXB0b3Igd2lsbCBpbnRlcmNlcHQgaHR0cCBjYWxscyBpZiBpdCBpcyBlbmFibGVkIGluIHRoZSB0Yy1jb3JlLWxpYi1tb2R1bGUudHMuXG4gKlxuICogSXQgd2lsbCBjYWNoZSByZXF1ZXN0cyBpZiB0aGUgY2FjaGVSZXNwb25zZSBoZWFkZXIgaXMgc3BlY2lmaWVkIG9uIHRoZSBodHRwIHJlcXVlc3QuXG4gKiBJZiBmbHVzaCBjYWNoZSBoZWFkZXIgaXMgb24gdGhlIHJlcXVlc3QgaXQgd2lsbCBub3QgdXNlIHRoZSBjYWNoZSBhbmQgd2lsbCBvdmVyd3JpdGUgdGhlIGN1cnJlbnQgY2FjaGVkIGVudHJ5LlxuICpcbiAqXG4gKi9cblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSHR0cEV2ZW50LCBIdHRwUmVxdWVzdCwgSHR0cFJlc3BvbnNlLCBIdHRwSW50ZXJjZXB0b3IsIEh0dHBIYW5kbGVyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuXG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgUmVxdWVzdENhY2hlU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3JlcXVlc3QtY2FjaGUuc2VydmljZSc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBDYWNoaW5nSW50ZXJjZXB0b3IgaW1wbGVtZW50cyBIdHRwSW50ZXJjZXB0b3Ige1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGNhY2hlOiBSZXF1ZXN0Q2FjaGVTZXJ2aWNlKSB7fVxuICBpbnRlcmNlcHQocmVxOiBIdHRwUmVxdWVzdDxhbnk+LCBuZXh0OiBIdHRwSGFuZGxlcikge1xuICAgIGxldCBjYWNoZWRSZXNwb25zZTtcbiAgICBpZiAocmVxLmhlYWRlcnMuZ2V0KCdjYWNoZVJlc3BvbnNlJykgfHwgKHJlcS51cmxXaXRoUGFyYW1zLnN1YnN0cigwLCAxNSkpID09PSAnLi4vYXNzZXRzL2ljb25zJykge1xuICAgICAgLy8gb25seSBjYWNoZSBpZiB0aGUgY2FjaGVSZXNwb25zZSBmbGFnIGlzIHNldFxuICAgICAgaWYgKCFyZXEuaGVhZGVycy5nZXQoJ2ZsdXNoQ2FjaGUnKSkge1xuICAgICAgICBjYWNoZWRSZXNwb25zZSA9IHRoaXMuY2FjaGUuZ2V0KHJlcSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgfVxuICAgICAgLy8gdXNlIHRoZSBjYWNoZVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBkb250IHBhc3MgdGhlIGNhY2hlIHNpbmNlIHRoaXMgc2hvdWxkIG5vdCBiZSBjYWNoZWRcbiAgICAgIHJldHVybiB0aGlzLnNlbmRSZXF1ZXN0KHJlcSwgbmV4dCwgdW5kZWZpbmVkKTtcbiAgICB9XG4gICAgLy8gcmV0dXJuIGNhY2hlZCByZXNwb25zZSBvciBtYWtlIHJlcXVlc3QgaWYgbm8gY2FjaGVkIHJlc3BvbnNlXG4gICAgcmV0dXJuIGNhY2hlZFJlc3BvbnNlID8gb2YoY2FjaGVkUmVzcG9uc2UpIDogdGhpcy5zZW5kUmVxdWVzdChyZXEsIG5leHQsIHRoaXMuY2FjaGUpO1xuICB9XG5cbiAgc2VuZFJlcXVlc3QoXG4gICAgcmVxOiBIdHRwUmVxdWVzdDxhbnk+LFxuICAgIG5leHQ6IEh0dHBIYW5kbGVyLFxuICAgIGNhY2hlOiBSZXF1ZXN0Q2FjaGVTZXJ2aWNlKTogT2JzZXJ2YWJsZTxIdHRwRXZlbnQ8YW55Pj4ge1xuICAgIHJldHVybiBuZXh0LmhhbmRsZShyZXEpXG4gICAgICAucGlwZShcbiAgICAgIHRhcChldmVudCA9PiB7XG4gICAgICAgIGlmIChldmVudCBpbnN0YW5jZW9mIEh0dHBSZXNwb25zZSAmJiBjYWNoZSkge1xuICAgICAgICAgIGNhY2hlLnB1dChyZXEsIGV2ZW50KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICApO1xuICB9XG59XG4iXX0=