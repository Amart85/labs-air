/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* Used to resolve contents of general config file */
/* This resolver will try and read the config from shared state
 * If a shared state entry does NOT exist it will use the defaults from a config file
 * Then update shared state with those contents
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { UiAppIdConfig } from '../models/tc-app-config';
import { flatMap, map, mergeMap, switchMap } from 'rxjs/operators';
import { TcSharedStateService } from '../services/tc-shared-state.service';
import { HttpClient } from '@angular/common/http';
import { TcGeneralConfigService } from '../services/tc-general-config.service';
import { GeneralConfig } from '../models/tc-general-config';
import { Location } from '@angular/common';
import { TcCoreCommonFunctions } from '../common/tc-core-common-functions';
export class GeneralConfigResolver {
    /**
     * @param {?} tcSharedState
     * @param {?} generalConfigService
     * @param {?} http
     * @param {?} location
     */
    constructor(tcSharedState, generalConfigService, http, location) {
        this.tcSharedState = tcSharedState;
        this.generalConfigService = generalConfigService;
        this.http = http;
        this.location = location;
        this.DEFAULT_CONFIG_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/generalAppConfig.json');
        this.APP_ID_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/uiAppId.json');
        // note appConfigResolver will need sandboxId to create app config state record.
        // So we expect this to have been set by caller (done by tc-liveapps-lib/laConfigResolver).
        this.setSandbox = (/**
         * @param {?} sandboxId
         * @return {?}
         */
        (sandboxId) => {
            this.sandboxId = sandboxId;
        });
        // can be used to load defaultAppConfig from a JSON config
        this.getDefaultAppConfig = (/**
         * @return {?}
         */
        () => {
            return this.http.get(this.DEFAULT_CONFIG_URL);
        });
        // loads uiAppId from json file in assets (appId.json)
        this.getAppId = (/**
         * @return {?}
         */
        () => {
            return this.http.get(this.APP_ID_URL).pipe(map((/**
             * @param {?} uiAppId
             * @return {?}
             */
            uiAppId => {
                /** @type {?} */
                const uiAppIdConfig = new UiAppIdConfig().deserialize(uiAppId);
                this.uiAppId = uiAppIdConfig.uiAppId;
                return uiAppIdConfig;
            })));
        });
    }
    /**
     * @return {?}
     */
    resolve() {
        /** @type {?} */
        const appConfig = this.getAppId().pipe(switchMap((/**
         * @param {?} uiAppId
         * @return {?}
         */
        uiAppId => this.generalConfigService.getGeneralConfig(uiAppId.uiAppId, true, false)
            .pipe(mergeMap((/**
         * @param {?} generalConfig
         * @return {?}
         */
        generalConfig => {
            if (generalConfig === undefined) {
                return this.getDefaultAppConfig().pipe(flatMap((/**
                 * @param {?} config
                 * @return {?}
                 */
                config => {
                    this.defaultAppConfig = new GeneralConfig().deserialize(config);
                    this.defaultAppConfig.uiAppId = this.uiAppId;
                    return this.generalConfigService.createGeneralConfig(this.sandboxId, this.defaultAppConfig.uiAppId, this.defaultAppConfig)
                        .pipe(flatMap((/**
                     * @param {?} result
                     * @return {?}
                     */
                    result => {
                        /** @type {?} */
                        const newAppConfig = this.defaultAppConfig;
                        newAppConfig.id = result;
                        return this.generalConfigService.updateGeneralConfig(this.sandboxId, newAppConfig.uiAppId, newAppConfig, result).pipe(flatMap((
                        // trigger a read to flush the cache since we changed it
                        /**
                         * @param {?} updatedConf
                         * @return {?}
                         */
                        updatedConf => {
                            return this.generalConfigService.getGeneralConfig(this.uiAppId, true, true).pipe(map((/**
                             * @param {?} cachedConfig
                             * @return {?}
                             */
                            cachedConfig => {
                                return cachedConfig;
                            })));
                        })));
                        // return newAppConfig;
                    })));
                })));
            }
            else {
                return of(generalConfig);
            }
        }))))));
        return appConfig;
    }
}
GeneralConfigResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
GeneralConfigResolver.ctorParameters = () => [
    { type: TcSharedStateService },
    { type: TcGeneralConfigService },
    { type: HttpClient },
    { type: Location }
];
if (false) {
    /** @type {?} */
    GeneralConfigResolver.prototype.DEFAULT_CONFIG_URL;
    /** @type {?} */
    GeneralConfigResolver.prototype.APP_ID_URL;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.sandboxId;
    /** @type {?} */
    GeneralConfigResolver.prototype.defaultAppConfig;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.uiAppId;
    /** @type {?} */
    GeneralConfigResolver.prototype.setSandbox;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.getDefaultAppConfig;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.getAppId;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.tcSharedState;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    GeneralConfigResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,