/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { TcGeneralLandingPageConfigService } from './tc-general-landing-page-config.service';
import * as i0 from "@angular/core";
import * as i1 from "./tc-general-landing-page-config.service";
export class TcGeneralLandingPageService {
    /**
     * @param {?} generalLandingPageConfigService
     */
    constructor(generalLandingPageConfigService) {
        this.generalLandingPageConfigService = generalLandingPageConfigService;
        this.getLandingPage = (/**
         * @param {?} key
         * @param {?} uiAppId
         * @return {?}
         */
        (key, uiAppId) => {
            /** @type {?} */
            const landingPage = this.generalLandingPageConfigService.getGeneralLandingPageConfig(uiAppId, true, true).pipe(map((/**
             * @param {?} landingPages
             * @return {?}
             */
            landingPages => {
                /** @type {?} */
                const page = landingPages.landingPage.filter((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => element.key === key))[0];
                return page;
            })));
            return landingPage;
        });
        this.getLandingPageForRole = (/**
         * @param {?} roleId
         * @param {?} uiAppId
         * @return {?}
         */
        (roleId, uiAppId) => {
            return this.generalLandingPageConfigService.getGeneralLandingPageConfig(uiAppId, true, true).pipe(map((/**
             * @param {?} landingPages
             * @return {?}
             */
            landingPages => {
                /** @type {?} */
                const candidatePages = landingPages.landingPage.filter((/**
                 * @param {?} element
                 * @return {?}
                 */
                element => element.roles.indexOf(roleId) != -1));
                switch (candidatePages.length) {
                    case 0:
                        return undefined;
                    case 1:
                        return candidatePages[0];
                    default:
                        return candidatePages[0];
                }
            })));
        });
    }
}
TcGeneralLandingPageService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TcGeneralLandingPageService.ctorParameters = () => [
    { type: TcGeneralLandingPageConfigService }
];
/** @nocollapse */ TcGeneralLandingPageService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcGeneralLandingPageService_Factory() { return new TcGeneralLandingPageService(i0.ɵɵinject(i1.TcGeneralLandingPageConfigService)); }, token: TcGeneralLandingPageService, providedIn: "root" });
if (false) {
    /** @type {?} */
    TcGeneralLandingPageService.prototype.getLandingPage;
    /** @type {?} */
    TcGeneralLandingPageService.prototype.getLandingPageForRole;
    /**
     * @type {?}
     * @private
     */
    TcGeneralLandingPageService.prototype.generalLandingPageConfigService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtZ2VuZXJhbC1sYW5kaW5nLXBhZ2Uuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90Yy1nZW5lcmFsLWxhbmRpbmctcGFnZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRTNDLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUVyQyxPQUFPLEVBQUUsaUNBQWlDLEVBQUUsTUFBTSwwQ0FBMEMsQ0FBQzs7O0FBTTdGLE1BQU0sT0FBTywyQkFBMkI7Ozs7SUFFcEMsWUFDWSwrQkFBa0U7UUFBbEUsb0NBQStCLEdBQS9CLCtCQUErQixDQUFtQztRQUl2RSxtQkFBYzs7Ozs7UUFBRyxDQUFDLEdBQVcsRUFBRSxPQUFlLEVBQWlDLEVBQUU7O2tCQUM5RSxXQUFXLEdBQUcsSUFBSSxDQUFDLCtCQUErQixDQUFDLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUMxRyxHQUFHOzs7O1lBQUMsWUFBWSxDQUFDLEVBQUU7O3NCQUNULElBQUksR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDLE1BQU07Ozs7Z0JBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsR0FBRyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDaEYsT0FBTyxJQUFJLENBQUM7WUFDaEIsQ0FBQyxFQUFDLENBQ0w7WUFDRCxPQUFPLFdBQVcsQ0FBQztRQUN2QixDQUFDLEVBQUE7UUFFTSwwQkFBcUI7Ozs7O1FBQUcsQ0FBQyxNQUFjLEVBQUUsT0FBZSxFQUFpQyxFQUFFO1lBQzlGLE9BQU8sSUFBSSxDQUFDLCtCQUErQixDQUFDLDJCQUEyQixDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUM3RixHQUFHOzs7O1lBQUMsWUFBWSxDQUFDLEVBQUU7O3NCQUNULGNBQWMsR0FBRyxZQUFZLENBQUMsV0FBVyxDQUFDLE1BQU07Ozs7Z0JBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBQztnQkFDdEcsUUFBUSxjQUFjLENBQUMsTUFBTSxFQUFFO29CQUMzQixLQUFLLENBQUM7d0JBQ0YsT0FBTyxTQUFTLENBQUM7b0JBQ3JCLEtBQUssQ0FBQzt3QkFDRixPQUFPLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDN0I7d0JBQ0ksT0FBTyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUM7aUJBQ2hDO1lBQ0wsQ0FBQyxFQUFDLENBQ0wsQ0FBQztRQUNOLENBQUMsRUFBQTtJQTFCRCxDQUFDOzs7WUFUSixVQUFVLFNBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkI7Ozs7WUFKUSxpQ0FBaUM7Ozs7O0lBYXRDLHFEQVFDOztJQUVELDREQWNDOzs7OztJQTVCRyxzRUFBMEUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgTGFuZGluZ1BhZ2VDb25maWcgfSBmcm9tICcuLi9tb2RlbHMvdGMtZ2VuZXJhbC1sYW5kaW5nLXBhZ2UtY29uZmlnJztcbmltcG9ydCB7IFRjR2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnU2VydmljZSB9IGZyb20gJy4vdGMtZ2VuZXJhbC1sYW5kaW5nLXBhZ2UtY29uZmlnLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcblxuZXhwb3J0IGNsYXNzIFRjR2VuZXJhbExhbmRpbmdQYWdlU2VydmljZSB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBnZW5lcmFsTGFuZGluZ1BhZ2VDb25maWdTZXJ2aWNlOiBUY0dlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZ1NlcnZpY2VcbiAgICApIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0TGFuZGluZ1BhZ2UgPSAoa2V5OiBzdHJpbmcsIHVpQXBwSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8TGFuZGluZ1BhZ2VDb25maWc+ID0+IHtcbiAgICAgICAgY29uc3QgbGFuZGluZ1BhZ2UgPSB0aGlzLmdlbmVyYWxMYW5kaW5nUGFnZUNvbmZpZ1NlcnZpY2UuZ2V0R2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnKHVpQXBwSWQsIHRydWUsIHRydWUpLnBpcGUoXG4gICAgICAgICAgICBtYXAobGFuZGluZ1BhZ2VzID0+IHtcbiAgICAgICAgICAgICAgICBjb25zdCBwYWdlID0gbGFuZGluZ1BhZ2VzLmxhbmRpbmdQYWdlLmZpbHRlcihlbGVtZW50ID0+IGVsZW1lbnQua2V5ID09PSBrZXkgKVswXTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFnZTtcbiAgICAgICAgICAgIH0pICAgICAgICAgICAgXG4gICAgICAgICkgICBcbiAgICAgICAgcmV0dXJuIGxhbmRpbmdQYWdlO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRMYW5kaW5nUGFnZUZvclJvbGUgPSAocm9sZUlkOiBzdHJpbmcsIHVpQXBwSWQ6IHN0cmluZyk6IE9ic2VydmFibGU8TGFuZGluZ1BhZ2VDb25maWc+ID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhbExhbmRpbmdQYWdlQ29uZmlnU2VydmljZS5nZXRHZW5lcmFsTGFuZGluZ1BhZ2VDb25maWcodWlBcHBJZCwgdHJ1ZSwgdHJ1ZSkucGlwZShcbiAgICAgICAgICAgIG1hcChsYW5kaW5nUGFnZXMgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnN0IGNhbmRpZGF0ZVBhZ2VzID0gbGFuZGluZ1BhZ2VzLmxhbmRpbmdQYWdlLmZpbHRlcihlbGVtZW50ID0+IGVsZW1lbnQucm9sZXMuaW5kZXhPZihyb2xlSWQpICE9IC0xKTtcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKGNhbmRpZGF0ZVBhZ2VzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FuZGlkYXRlUGFnZXNbMF07XG4gICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gY2FuZGlkYXRlUGFnZXNbMF07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9IFxufVxuXG4iXX0=