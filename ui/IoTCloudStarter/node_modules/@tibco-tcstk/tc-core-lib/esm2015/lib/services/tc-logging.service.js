/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * @ngdoc component
 * @name tcLoggingService
 *
 * @description
 *
 * The logging service provides logging capabilities.
 *
 * A log level can be set:
 *
 *  All = 0,
 *  Debug = 1,
 *  Info = 2,
 *  Warn = 3,
 *  Error = 4,
 *  Fatal = 5,
 *  Off = 6
 *
 *
 */
import { Injectable } from '@angular/core';
export class LogService {
    constructor() {
        this.level = LogLevel.All;
        this.logWithDate = true;
    }
    /**
     * @private
     * @param {?} msg
     * @param {?} level
     * @param {?} params
     * @return {?}
     */
    writeToLog(msg, level, params) {
        if (this.shouldLog(level)) {
            /** @type {?} */
            let value = '';
            // Build log string
            if (this.logWithDate) {
                value = new Date() + ' - ';
            }
            value += '[My Cloud Starter] [' + LogLevel[this.level] + '](' + this.getLevelString(level) + ')';
            value += ' - Message: ' + msg;
            if (params.length) {
                value += ' - Extra Info: '
                    + this.formatParams(params);
            }
            // Log the value
            console.log(value);
        }
    }
    /**
     * @private
     * @param {?} level
     * @return {?}
     */
    shouldLog(level) {
        /** @type {?} */
        let ret = false;
        if ((level >= this.level &&
            level !== LogLevel.Off) ||
            this.level === LogLevel.All) {
            ret = true;
        }
        return ret;
    }
    /**
     * @private
     * @param {?} params
     * @return {?}
     */
    formatParams(params) {
        /** @type {?} */
        let ret = params.join(',');
        // Is there at least one object in the array?
        if (params.some((/**
         * @param {?} p
         * @return {?}
         */
        p => typeof p === 'object'))) {
            ret = '';
            // Build comma-delimited string
            for (const item of params) {
                ret += JSON.stringify(item) + ',';
            }
        }
        return ret;
    }
    /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    debug(msg, ...optionalParams) {
        this.writeToLog(msg, LogLevel.Debug, optionalParams);
    }
    /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    info(msg, ...optionalParams) {
        this.writeToLog(msg, LogLevel.Info, optionalParams);
    }
    /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    warn(msg, ...optionalParams) {
        this.writeToLog(msg, LogLevel.Warn, optionalParams);
    }
    /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    error(msg, ...optionalParams) {
        this.writeToLog(msg, LogLevel.Error, optionalParams);
    }
    /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    fatal(msg, ...optionalParams) {
        this.writeToLog(msg, LogLevel.Fatal, optionalParams);
    }
    /**
     * @param {?} msg
     * @param {...?} optionalParams
     * @return {?}
     */
    log(msg, ...optionalParams) {
        this.writeToLog(msg, LogLevel.All, optionalParams);
    }
    /**
     * @private
     * @param {?} level
     * @return {?}
     */
    getLevelString(level) {
        /** @type {?} */
        let re = '';
        switch (level) {
            case LogLevel.All: {
                re = 'All';
                break;
            }
            case LogLevel.Debug: {
                re = 'Debug';
                break;
            }
            case LogLevel.Error: {
                re = 'Error';
                break;
            }
            case LogLevel.Fatal: {
                re = 'Fatal';
                break;
            }
            case LogLevel.Info: {
                re = 'Info';
                break;
            }
            case LogLevel.Off: {
                re = 'Off';
                break;
            }
            case LogLevel.Warn: {
                re = 'Warn';
                break;
            }
            default: {
                // statements;
                break;
            }
        }
        return re;
    }
}
LogService.decorators = [
    { type: Injectable }
];
if (false) {
    /** @type {?} */
    LogService.prototype.level;
    /** @type {?} */
    LogService.prototype.logWithDate;
}
/** @enum {number} */
const LogLevel = {
    All: 0,
    Debug: 1,
    Info: 2,
    Warn: 3,
    Error: 4,
    Fatal: 5,
    Off: 6,
};
export { LogLevel };
LogLevel[LogLevel.All] = 'All';
LogLevel[LogLevel.Debug] = 'Debug';
LogLevel[LogLevel.Info] = 'Info';
LogLevel[LogLevel.Warn] = 'Warn';
LogLevel[LogLevel.Error] = 'Error';
LogLevel[LogLevel.Fatal] = 'Fatal';
LogLevel[LogLevel.Off] = 'Off';
//# sourceMappingURL=data:application/json;base64,