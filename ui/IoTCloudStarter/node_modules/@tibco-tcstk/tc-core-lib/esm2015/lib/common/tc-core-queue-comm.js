/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
export class MessageQueueService {
    constructor() {
        this.queues = [
            { name: 'sample.queue', subject: new Subject() }
        ];
        console.log('Queue Message service Created...');
    }
    /**
     * @param {?} name
     * @param {?} message
     * @return {?}
     */
    sendMessage(name, message) {
        this.createQueueIfNotExists(name);
        this.queues.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.name === name))[0].subject.next({ text: message });
    }
    /**
     * @param {?} name
     * @return {?}
     */
    clearMessages(name) {
        this.createQueueIfNotExists(name);
        this.queues.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.name === name))[0].subject.next();
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getMessage(name) {
        this.createQueueIfNotExists(name);
        return this.queues.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.name === name))[0].subject.asObservable();
    }
    /**
     * @param {?} name
     * @return {?}
     */
    createQueueIfNotExists(name) {
        /** @type {?} */
        let queueExist = false;
        for (const q of this.queues) {
            if (q.name === name) {
                // console.log('Queue Exist: ' + q.name);
                queueExist = true;
            }
        }
        if (!queueExist) {
            console.log('Creating Queue: ' + name);
            /** @type {?} */
            const tempQueue = { name: name, subject: new Subject() };
            this.queues.push(tempQueue);
        }
    }
}
MessageQueueService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
MessageQueueService.ctorParameters = () => [];
/** @nocollapse */ MessageQueueService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MessageQueueService_Factory() { return new MessageQueueService(); }, token: MessageQueueService, providedIn: "root" });
if (false) {
    /** @type {?} */
    MessageQueueService.prototype.queues;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtY29yZS1xdWV1ZS1jb21tLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi90Yy1jb3JlLXF1ZXVlLWNvbW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFhLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQzs7QUFHekMsTUFBTSxPQUFPLG1CQUFtQjtJQU05QjtRQUpBLFdBQU0sR0FBbUQ7WUFDdkQsRUFBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLE9BQU8sRUFBRSxJQUFJLE9BQU8sRUFBTyxFQUFDO1NBQ3BELENBQUM7UUFHQyxPQUFPLENBQUMsR0FBRyxDQUFDLGtDQUFrQyxDQUFDLENBQUM7SUFDbkQsQ0FBQzs7Ozs7O0lBRUQsV0FBVyxDQUFDLElBQVksRUFBRSxPQUFlO1FBQ3ZDLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNsQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUMsQ0FBQyxDQUFDO0lBQzVFLENBQUM7Ozs7O0lBRUQsYUFBYSxDQUFDLElBQVk7UUFDeEIsSUFBSSxDQUFDLHNCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTTs7OztRQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUM7SUFDN0QsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsSUFBWTtRQUNyQixJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDbEMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzVFLENBQUM7Ozs7O0lBRUQsc0JBQXNCLENBQUMsSUFBWTs7WUFDN0IsVUFBVSxHQUFHLEtBQUs7UUFDdEIsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQzNCLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxJQUFJLEVBQUU7Z0JBQ25CLHlDQUF5QztnQkFDekMsVUFBVSxHQUFHLElBQUksQ0FBQzthQUNuQjtTQUNGO1FBQ0QsSUFBSSxDQUFDLFVBQVUsRUFBRTtZQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEdBQUcsSUFBSSxDQUFDLENBQUM7O2tCQUNqQyxTQUFTLEdBQUcsRUFBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLE9BQU8sRUFBTyxFQUFDO1lBQzNELElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQzs7O1lBdkNGLFVBQVUsU0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7Ozs7Ozs7SUFHOUIscUNBRUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcblxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXG5leHBvcnQgY2xhc3MgTWVzc2FnZVF1ZXVlU2VydmljZSB7XG5cbiAgcXVldWVzOiBBcnJheTx7IG5hbWU6IHN0cmluZywgc3ViamVjdDogU3ViamVjdDxhbnk+IH0+ID0gW1xuICAgIHtuYW1lOiAnc2FtcGxlLnF1ZXVlJywgc3ViamVjdDogbmV3IFN1YmplY3Q8YW55PigpfVxuICBdO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgICBjb25zb2xlLmxvZygnUXVldWUgTWVzc2FnZSBzZXJ2aWNlIENyZWF0ZWQuLi4nKTtcbiAgfVxuXG4gIHNlbmRNZXNzYWdlKG5hbWU6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSB7XG4gICAgdGhpcy5jcmVhdGVRdWV1ZUlmTm90RXhpc3RzKG5hbWUpO1xuICAgIHRoaXMucXVldWVzLmZpbHRlcih4ID0+IHgubmFtZSA9PT0gbmFtZSlbMF0uc3ViamVjdC5uZXh0KHt0ZXh0OiBtZXNzYWdlfSk7XG4gIH1cblxuICBjbGVhck1lc3NhZ2VzKG5hbWU6IHN0cmluZykge1xuICAgIHRoaXMuY3JlYXRlUXVldWVJZk5vdEV4aXN0cyhuYW1lKTtcbiAgICB0aGlzLnF1ZXVlcy5maWx0ZXIoeCA9PiB4Lm5hbWUgPT09IG5hbWUpWzBdLnN1YmplY3QubmV4dCgpO1xuICB9XG5cbiAgZ2V0TWVzc2FnZShuYW1lOiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xuICAgIHRoaXMuY3JlYXRlUXVldWVJZk5vdEV4aXN0cyhuYW1lKTtcbiAgICByZXR1cm4gdGhpcy5xdWV1ZXMuZmlsdGVyKHggPT4geC5uYW1lID09PSBuYW1lKVswXS5zdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgY3JlYXRlUXVldWVJZk5vdEV4aXN0cyhuYW1lOiBzdHJpbmcpIHtcbiAgICBsZXQgcXVldWVFeGlzdCA9IGZhbHNlO1xuICAgIGZvciAoY29uc3QgcSBvZiB0aGlzLnF1ZXVlcykge1xuICAgICAgaWYgKHEubmFtZSA9PT0gbmFtZSkge1xuICAgICAgICAvLyBjb25zb2xlLmxvZygnUXVldWUgRXhpc3Q6ICcgKyBxLm5hbWUpO1xuICAgICAgICBxdWV1ZUV4aXN0ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCFxdWV1ZUV4aXN0KSB7XG4gICAgICBjb25zb2xlLmxvZygnQ3JlYXRpbmcgUXVldWU6ICcgKyBuYW1lKTtcbiAgICAgIGNvbnN0IHRlbXBRdWV1ZSA9IHtuYW1lOiBuYW1lLCBzdWJqZWN0OiBuZXcgU3ViamVjdDxhbnk+KCl9O1xuICAgICAgdGhpcy5xdWV1ZXMucHVzaCh0ZW1wUXVldWUpO1xuICAgIH1cbiAgfVxufVxuIl19