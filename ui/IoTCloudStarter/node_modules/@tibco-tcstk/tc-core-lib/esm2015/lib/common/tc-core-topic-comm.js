/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { BehaviorSubject } from 'rxjs';
import * as i0 from "@angular/core";
export class MessageTopicService {
    constructor() {
        this.topics = [
            { name: 'sample.topic', subject: new BehaviorSubject('init') }
        ];
        console.log('Topic Message service Created...');
    }
    /**
     * @param {?} name
     * @param {?} message
     * @return {?}
     */
    sendMessage(name, message) {
        this.createTopicIfNotExists(name, { text: message });
        this.topics.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.name === name))[0].subject.next({ text: message });
    }
    /**
     * @param {?} name
     * @return {?}
     */
    clearMessages(name) {
        this.createTopicIfNotExists(name, { text: 'init' });
        // this.queues.filter(x => x.name === name)[0].subject.next('init');
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getMessage(name) {
        this.createTopicIfNotExists(name, { text: 'init' });
        return this.topics.filter((/**
         * @param {?} x
         * @return {?}
         */
        x => x.name === name))[0].subject.asObservable();
    }
    /**
     * @param {?} name
     * @param {?} init
     * @return {?}
     */
    createTopicIfNotExists(name, init) {
        /** @type {?} */
        let queueExist = false;
        for (const q of this.topics) {
            if (q.name === name) {
                // console.log('Queue Exist: ' + q.name);
                queueExist = true;
            }
        }
        if (!queueExist) {
            console.log('Creating Topic: ' + name);
            /** @type {?} */
            const tempTopic = { name: name, subject: new BehaviorSubject(init) };
            this.topics.push(tempTopic);
        }
    }
}
MessageTopicService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
MessageTopicService.ctorParameters = () => [];
/** @nocollapse */ MessageTopicService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MessageTopicService_Factory() { return new MessageTopicService(); }, token: MessageTopicService, providedIn: "root" });
if (false) {
    /** @type {?} */
    MessageTopicService.prototype.topics;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtY29yZS10b3BpYy1jb21tLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi90Yy1jb3JlLXRvcGljLWNvbW0udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDekMsT0FBTyxFQUFDLGVBQWUsRUFBYSxNQUFNLE1BQU0sQ0FBQzs7QUFHakQsTUFBTSxPQUFPLG1CQUFtQjtJQU05QjtRQUpBLFdBQU0sR0FBMkQ7WUFDL0QsRUFBQyxJQUFJLEVBQUUsY0FBYyxFQUFFLE9BQU8sRUFBRSxJQUFJLGVBQWUsQ0FBTSxNQUFNLENBQUMsRUFBQztTQUNsRSxDQUFDO1FBR0EsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQ0FBa0MsQ0FBQyxDQUFDO0lBQ2xELENBQUM7Ozs7OztJQUVELFdBQVcsQ0FBQyxJQUFZLEVBQUUsT0FBZTtRQUN2QyxJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLEVBQUMsSUFBSSxFQUFFLE9BQU8sRUFBQyxDQUFDLENBQUM7UUFDbkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNOzs7O1FBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksRUFBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFDLENBQUMsQ0FBQztJQUM1RSxDQUFDOzs7OztJQUVELGFBQWEsQ0FBQyxJQUFZO1FBQ3hCLElBQUksQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLEVBQUUsRUFBQyxJQUFJLEVBQUUsTUFBTSxFQUFDLENBQUMsQ0FBQztRQUNsRCxvRUFBb0U7SUFDdEUsQ0FBQzs7Ozs7SUFFRCxVQUFVLENBQUMsSUFBWTtRQUNyQixJQUFJLENBQUMsc0JBQXNCLENBQUMsSUFBSSxFQUFFLEVBQUMsSUFBSSxFQUFFLE1BQU0sRUFBQyxDQUFDLENBQUM7UUFDbEQsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU07Ozs7UUFBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxFQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRSxDQUFDO0lBQzVFLENBQUM7Ozs7OztJQUVELHNCQUFzQixDQUFDLElBQVksRUFBRyxJQUFJOztZQUNwQyxVQUFVLEdBQUcsS0FBSztRQUN0QixLQUFLLE1BQU0sQ0FBQyxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDM0IsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksRUFBRTtnQkFDbkIseUNBQXlDO2dCQUN6QyxVQUFVLEdBQUcsSUFBSSxDQUFDO2FBQ25CO1NBQ0Y7UUFDRCxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2YsT0FBTyxDQUFDLEdBQUcsQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsQ0FBQzs7a0JBQ2pDLFNBQVMsR0FBRyxFQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLElBQUksZUFBZSxDQUFNLElBQUksQ0FBQyxFQUFDO1lBQ3ZFLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQzdCO0lBQ0gsQ0FBQzs7O1lBdkNGLFVBQVUsU0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7Ozs7Ozs7SUFHOUIscUNBRUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0luamVjdGFibGV9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtCZWhhdmlvclN1YmplY3QsIE9ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcbmV4cG9ydCBjbGFzcyBNZXNzYWdlVG9waWNTZXJ2aWNlIHtcblxuICB0b3BpY3M6IEFycmF5PHsgbmFtZTogc3RyaW5nLCBzdWJqZWN0OiBCZWhhdmlvclN1YmplY3Q8YW55PiB9PiA9IFtcbiAgICB7bmFtZTogJ3NhbXBsZS50b3BpYycsIHN1YmplY3Q6IG5ldyBCZWhhdmlvclN1YmplY3Q8YW55PignaW5pdCcpfVxuICBdO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGNvbnNvbGUubG9nKCdUb3BpYyBNZXNzYWdlIHNlcnZpY2UgQ3JlYXRlZC4uLicpO1xuICB9XG5cbiAgc2VuZE1lc3NhZ2UobmFtZTogc3RyaW5nLCBtZXNzYWdlOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNyZWF0ZVRvcGljSWZOb3RFeGlzdHMobmFtZSwge3RleHQ6IG1lc3NhZ2V9KTtcbiAgICB0aGlzLnRvcGljcy5maWx0ZXIoeCA9PiB4Lm5hbWUgPT09IG5hbWUpWzBdLnN1YmplY3QubmV4dCh7dGV4dDogbWVzc2FnZX0pO1xuICB9XG5cbiAgY2xlYXJNZXNzYWdlcyhuYW1lOiBzdHJpbmcpIHtcbiAgICB0aGlzLmNyZWF0ZVRvcGljSWZOb3RFeGlzdHMobmFtZSwge3RleHQ6ICdpbml0J30pO1xuICAgIC8vIHRoaXMucXVldWVzLmZpbHRlcih4ID0+IHgubmFtZSA9PT0gbmFtZSlbMF0uc3ViamVjdC5uZXh0KCdpbml0Jyk7XG4gIH1cblxuICBnZXRNZXNzYWdlKG5hbWU6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgdGhpcy5jcmVhdGVUb3BpY0lmTm90RXhpc3RzKG5hbWUsIHt0ZXh0OiAnaW5pdCd9KTtcbiAgICByZXR1cm4gdGhpcy50b3BpY3MuZmlsdGVyKHggPT4geC5uYW1lID09PSBuYW1lKVswXS5zdWJqZWN0LmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgY3JlYXRlVG9waWNJZk5vdEV4aXN0cyhuYW1lOiBzdHJpbmcgLCBpbml0KSB7XG4gICAgbGV0IHF1ZXVlRXhpc3QgPSBmYWxzZTtcbiAgICBmb3IgKGNvbnN0IHEgb2YgdGhpcy50b3BpY3MpIHtcbiAgICAgIGlmIChxLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2coJ1F1ZXVlIEV4aXN0OiAnICsgcS5uYW1lKTtcbiAgICAgICAgcXVldWVFeGlzdCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghcXVldWVFeGlzdCkge1xuICAgICAgY29uc29sZS5sb2coJ0NyZWF0aW5nIFRvcGljOiAnICsgbmFtZSk7XG4gICAgICBjb25zdCB0ZW1wVG9waWMgPSB7bmFtZTogbmFtZSwgc3ViamVjdDogbmV3IEJlaGF2aW9yU3ViamVjdDxhbnk+KGluaXQpfTtcbiAgICAgIHRoaXMudG9waWNzLnB1c2godGVtcFRvcGljKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==