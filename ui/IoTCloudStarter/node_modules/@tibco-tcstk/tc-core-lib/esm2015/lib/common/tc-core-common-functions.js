/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { HashLocationStrategy } from '@angular/common';
// @dynamic
export class TcCoreCommonFunctions {
    /**
     * @param {?} text
     * @return {?}
     */
    static escapeString(text) {
        return text.replace(/"/g, '\"');
    }
    /**
     * @param {?} size
     * @return {?}
     */
    static fileSizeToHuman(size) {
        /** @type {?} */
        const e = (Math.log(size) / Math.log(1e3)) | 0;
        return +(size / Math.pow(1e3, e)).toFixed(2) + ' ' + ('kMGTPEZY'[e - 1] || '') + 'B';
    }
    /**
     * @param {?} str
     * @return {?}
     */
    static camelCaseToWords(str) {
        /** @type {?} */
        const re = str.replace(/([a-z])([A-Z])/g, '$1 $2')
            .replace(/([A-Z])([a-z])/g, ' $1$2')
            .replace(/\ +/g, ' ');
        return re;
    }
    /**
     * @param {?} array
     * @return {?}
     */
    static convertToJSON(array) {
        /** @type {?} */
        const objArray = [];
        for (let i = 1; i < array.length; i++) {
            objArray[i - 1] = {};
            for (let k = 0; k < array[0].length && k < array[i].length; k++) {
                /** @type {?} */
                const key = array[0][k];
                objArray[i - 1][key] = array[i][k];
            }
        }
        return objArray;
    }
    /**
     * @param {?} array
     * @param {?} arrayLength
     * @return {?}
     */
    static transposeArray(array, arrayLength) {
        // console.log('transposing array) arrayLength: ' + arrayLength );
        /** @type {?} */
        const newArray = [];
        for (let i = 0; i < arrayLength; i++) {
            newArray.push([]);
        }
        for (let i = 0; i < array.length; i++) {
            for (let j = 0; j < arrayLength; j++) {
                newArray[j].push(array[i][j]);
            }
        }
        return newArray;
    }
}
TcCoreCommonFunctions.camelize = (/**
 * @param {?} str
 * @return {?}
 */
(str) => {
    /** @type {?} */
    let newStr = '';
    /** @type {?} */
    let newArr = [];
    if (str.indexOf('-') !== -1) {
        newArr = str.split('-');
        for (let i = 0; i < newArr.length; i++) {
            newArr[i] = newArr[i].charAt(0).toUpperCase() + newArr[i].substr(1);
        }
        newStr = newArr.join(' ');
    }
    return newStr;
});
TcCoreCommonFunctions.prepareUrlForNonStaticResource = (/**
 * @param {?} location
 * @param {?} str
 * @return {?}
 */
(location, str) => {
    // @ts-ignore
    if (location._platformStrategy instanceof HashLocationStrategy) {
        return str;
    }
    else {
        return str;
    }
});
TcCoreCommonFunctions.prepareUrlForStaticResource = (/**
 * @param {?} location
 * @param {?} str
 * @return {?}
 */
(location, str) => {
    // @ts-ignore
    if (location._platformStrategy instanceof HashLocationStrategy) {
        return str;
    }
    else {
        return location.prepareExternalUrl(str);
    }
});
if (false) {
    /** @type {?} */
    TcCoreCommonFunctions.camelize;
    /** @type {?} */
    TcCoreCommonFunctions.prepareUrlForNonStaticResource;
    /** @type {?} */
    TcCoreCommonFunctions.prepareUrlForStaticResource;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtY29yZS1jb21tb24tZnVuY3Rpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbW1vbi90Yy1jb3JlLWNvbW1vbi1mdW5jdGlvbnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBQyxvQkFBb0IsRUFBVyxNQUFNLGlCQUFpQixDQUFDOztBQUcvRCxNQUFNLE9BQU8scUJBQXFCOzs7OztJQUd6QixNQUFNLENBQUMsWUFBWSxDQUFDLElBQUk7UUFDN0IsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNsQyxDQUFDOzs7OztJQUVNLE1BQU0sQ0FBQyxlQUFlLENBQUMsSUFBSTs7Y0FDMUIsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQztRQUM5QyxPQUFPLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUM7SUFDdkYsQ0FBQzs7Ozs7SUFFTSxNQUFNLENBQUMsZ0JBQWdCLENBQUMsR0FBRzs7Y0FDMUIsRUFBRSxHQUFJLEdBQUcsQ0FBQyxPQUFPLENBQUMsaUJBQWlCLEVBQUUsT0FBTyxDQUFDO2FBQ2hELE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxPQUFPLENBQUM7YUFDbkMsT0FBTyxDQUFDLE1BQU0sRUFBRSxHQUFHLENBQUM7UUFDdkIsT0FBTyxFQUFFLENBQUM7SUFDWixDQUFDOzs7OztJQUVNLE1BQU0sQ0FBQyxhQUFhLENB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LE9BQU8sUUFBUSxDQUFDLGtCQUFrQixDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3pDO0FBQ0gsQ0FBQyxFQUFBOzs7SUE5QkQsK0JBWUM7O0lBRUQscURBT0M7O0lBRUQsa0RBT0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0hhc2hMb2NhdGlvblN0cmF0ZWd5LCBMb2NhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuLy8gQGR5bmFtaWNcbmV4cG9ydCBjbGFzcyBUY0NvcmVDb21tb25GdW5jdGlvbnMge1xuXG5cbiAgcHVibGljIHN0YXRpYyBlc2NhcGVTdHJpbmcodGV4dCkge1xuICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoL1wiL2csICdcXFwiJyk7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGZpbGVTaXplVG9IdW1hbihzaXplKSB7XG4gICAgY29uc3QgZSA9IChNYXRoLmxvZyhzaXplKSAvIE1hdGgubG9nKDFlMykpIHwgMDtcbiAgICByZXR1cm4gKyhzaXplIC8gTWF0aC5wb3coMWUzLCBlKSkudG9GaXhlZCgyKSArICcgJyArICgna01HVFBFWlknW2UgLSAxXSB8fCAnJykgKyAnQic7XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIGNhbWVsQ2FzZVRvV29yZHMoc3RyKSB7XG4gICAgY29uc3QgcmUgPSAgc3RyLnJlcGxhY2UoLyhbYS16XSkoW0EtWl0pL2csICckMSAkMicpXG4gICAgICAucmVwbGFjZSgvKFtBLVpdKShbYS16XSkvZywgJyAkMSQyJylcbiAgICAgIC5yZXBsYWNlKC9cXCArL2csICcgJyk7XG4gICAgcmV0dXJuIHJlO1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBjb252ZXJ0VG9KU09OKGFycmF5KSB7XG4gICAgY29uc3Qgb2JqQXJyYXkgPSBbXTtcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmpBcnJheVtpIC0gMV0gPSB7fTtcbiAgICAgIGZvciAobGV0IGsgPSAwOyBrIDwgYXJyYXlbMF0ubGVuZ3RoICYmIGsgPCBhcnJheVtpXS5sZW5ndGg7IGsrKykge1xuICAgICAgICBjb25zdCBrZXkgPSBhcnJheVswXVtrXTtcbiAgICAgICAgb2JqQXJyYXlbaSAtIDFdW2tleV0gPSBhcnJheVtpXVtrXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iakFycmF5O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyB0cmFuc3Bvc2VBcnJheShhcnJheSwgYXJyYXlMZW5ndGgpIHtcbiAgICAvLyBjb25zb2xlLmxvZygndHJhbnNwb3NpbmcgYXJyYXkpIGFycmF5TGVuZ3RoOiAnICsgYXJyYXlMZW5ndGggKTtcbiAgICBjb25zdCBuZXdBcnJheSA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXlMZW5ndGg7IGkrKykge1xuICAgICAgbmV3QXJyYXkucHVzaChbXSk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgYXJyYXlMZW5ndGg7IGorKykge1xuICAgICAgICBuZXdBcnJheVtqXS5wdXNoKGFycmF5W2ldW2pdKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG5ld0FycmF5O1xuICB9XG5cbiAgcHVibGljIHN0YXRpYyBjYW1lbGl6ZSA9IChzdHI6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gICAgbGV0IG5ld1N0ciA9ICcnO1xuICAgIGxldCBuZXdBcnIgPSBbXTtcblxuICAgIGlmIChzdHIuaW5kZXhPZignLScpICE9PSAtMSkge1xuICAgICAgbmV3QXJyID0gc3RyLnNwbGl0KCctJyk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5ld0Fyci5sZW5ndGg7IGkrKykge1xuICAgICAgICBuZXdBcnJbaV0gPSBuZXdBcnJbaV0uY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBuZXdBcnJbaV0uc3Vic3RyKDEpO1xuICAgICAgfVxuICAgICAgbmV3U3RyID0gbmV3QXJyLmpvaW4oJyAnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ld1N0cjtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgcHJlcGFyZVVybEZvck5vblN0YXRpY1Jlc291cmNlID0gKGxvY2F0aW9uOiBMb2NhdGlvbiwgc3RyOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBpZiAobG9jYXRpb24uX3BsYXRmb3JtU3RyYXRlZ3kgaW5zdGFuY2VvZiBIYXNoTG9jYXRpb25TdHJhdGVneSkge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc3RhdGljIHByZXBhcmVVcmxGb3JTdGF0aWNSZXNvdXJjZSA9IChsb2NhdGlvbjogTG9jYXRpb24sIHN0cjogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgaWYgKGxvY2F0aW9uLl9wbGF0Zm9ybVN0cmF0ZWd5IGluc3RhbmNlb2YgSGFzaExvY2F0aW9uU3RyYXRlZ3kpIHtcbiAgICAgIHJldHVybiBzdHI7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBsb2NhdGlvbi5wcmVwYXJlRXh0ZXJuYWxVcmwoc3RyKTtcbiAgICB9XG4gIH1cblxufVxuIl19