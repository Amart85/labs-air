/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* models used by shared state services */
export class SharedStateContent {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        Object.assign((/** @type {?} */ (this)), input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    SharedStateContent.prototype.json;
}
export class SharedStateEntry {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        (/** @type {?} */ (this)).attributes = input.attributes;
        (/** @type {?} */ (this)).content = input.content;
        (/** @type {?} */ (this)).createdBy = input.createdBy;
        (/** @type {?} */ (this)).createdByName = input.createdByName;
        (/** @type {?} */ (this)).description = input.description;
        (/** @type {?} */ (this)).id = input.id;
        (/** @type {?} */ (this)).isAbandoned = input.isAbandoned;
        (/** @type {?} */ (this)).isOrphaned = input.isOrphaned;
        (/** @type {?} */ (this)).links = input.links;
        (/** @type {?} */ (this)).modifiedById = input.modifiedById;
        (/** @type {?} */ (this)).modifiedDate = input.modifiedDate;
        (/** @type {?} */ (this)).name = input.name;
        (/** @type {?} */ (this)).roles = input.roles;
        (/** @type {?} */ (this)).sandboxId = input.sandboxId;
        (/** @type {?} */ (this)).scope = input.scope;
        (/** @type {?} */ (this)).type = input.type;
        (/** @type {?} */ (this)).content = input.json.content;
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    SharedStateEntry.prototype.attributes;
    /** @type {?} */
    SharedStateEntry.prototype.content;
    /** @type {?} */
    SharedStateEntry.prototype.createdBy;
    /** @type {?} */
    SharedStateEntry.prototype.createdByName;
    /** @type {?} */
    SharedStateEntry.prototype.description;
    /** @type {?} */
    SharedStateEntry.prototype.id;
    /** @type {?} */
    SharedStateEntry.prototype.isAbandoned;
    /** @type {?} */
    SharedStateEntry.prototype.isOrphaned;
    /** @type {?} */
    SharedStateEntry.prototype.links;
    /** @type {?} */
    SharedStateEntry.prototype.modifiedById;
    /** @type {?} */
    SharedStateEntry.prototype.modifiedByName;
    /** @type {?} */
    SharedStateEntry.prototype.modifiedDate;
    /** @type {?} */
    SharedStateEntry.prototype.name;
    /** @type {?} */
    SharedStateEntry.prototype.roles;
    /** @type {?} */
    SharedStateEntry.prototype.sandboxId;
    /** @type {?} */
    SharedStateEntry.prototype.scope;
    /** @type {?} */
    SharedStateEntry.prototype.type;
}
export class SharedStateList {
    /**
     * @template THIS
     * @this {THIS}
     * @param {?} input
     * @return {THIS}
     */
    deserialize(input) {
        (/** @type {?} */ (this)).sharedStateEntries = [];
        Object.assign((/** @type {?} */ (this)).sharedStateEntries, input);
        return (/** @type {?} */ (this));
    }
}
if (false) {
    /** @type {?} */
    SharedStateList.prototype.sharedStateEntries;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtc2hhcmVkLXN0YXRlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL21vZGVscy90Yy1zaGFyZWQtc3RhdGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFJQSxNQUFNLE9BQU8sa0JBQWtCOzs7Ozs7O0lBRTdCLFdBQVcsQ0FBQyxLQUFVO1FBQ3BCLE1BQU0sQ0FBQyxNQUFNLENBQUMsbUJBQUEsSUFBSSxFQUFBLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0IsT0FBTyxtQkFBQSxJQUFJLEVBQUEsQ0FBQztJQUNkLENBQUM7Q0FDRjs7O0lBTEMsa0NBQWE7O0FBT2YsTUFBTSxPQUFPLGdCQUFnQjs7Ozs7OztJQW1CM0IsV0FBVyxDQUFDLEtBQVU7UUFDcEIsbUJBQUEsSUFBSSxFQUFBLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7UUFDbkMsbUJBQUEsSUFBSSxFQUFBLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUM7UUFDN0IsbUJBQUEsSUFBSSxFQUFBLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDakMsbUJBQUEsSUFBSSxFQUFBLENBQUMsYUFBYSxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUM7UUFDekMsbUJBQUEsSUFBSSxFQUFBLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7UUFDckMsbUJBQUEsSUFBSSxFQUFBLENBQUMsRUFBRSxHQUFHLEtBQUssQ0FBQyxFQUFFLENBQUM7UUFDbkIsbUJBQUEsSUFBSSxFQUFBLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxXQUFXLENBQUM7UUFDckMsbUJBQUEsSUFBSSxFQUFBLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUM7UUFDbkMsbUJBQUEsSUFBSSxFQUFBLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsbUJBQUEsSUFBSSxFQUFBLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7UUFDdkMsbUJBQUEsSUFBSSxFQUFBLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQyxZQUFZLENBQUM7UUFDdkMsbUJBQUEsSUFBSSxFQUFBLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDdkIsbUJBQUEsSUFBSSxFQUFBLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsbUJBQUEsSUFBSSxFQUFBLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQyxTQUFTLENBQUM7UUFDakMsbUJBQUEsSUFBSSxFQUFBLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUM7UUFDekIsbUJBQUEsSUFBSSxFQUFBLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUM7UUFDdkIsbUJBQUEsSUFBSSxFQUFBLENBQUMsT0FBTyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ2xDLE9BQU8sbUJBQUEsSUFBSSxFQUFBLENBQUM7SUFDZCxDQUFDO0NBQ0Y7OztJQXRDQyxzQ0FBcUI7O0lBQ3JCLG1DQUE0Qjs7SUFDNUIscUNBQWtCOztJQUNsQix5Q0FBc0I7O0lBQ3RCLHVDQUFvQjs7SUFDcEIsOEJBQVc7O0lBQ1gsdUNBQXFCOztJQUNyQixzQ0FBb0I7O0lBQ3BCLGlDQUFnQjs7SUFDaEIsd0NBQXFCOztJQUNyQiwwQ0FBdUI7O0lBQ3ZCLHdDQUFxQjs7SUFDckIsZ0NBQWE7O0lBQ2IsaUNBQWdCOztJQUNoQixxQ0FBa0I7O0lBQ2xCLGlDQUFjOztJQUNkLGdDQUFhOztBQXdCZixNQUFNLE9BQU8sZUFBZTs7Ozs7OztJQUUxQixXQUFXLENBQUMsS0FBVTtRQUNwQixtQkFBQSxJQUFJLEVBQUEsQ0FBQyxrQkFBa0IsR0FBRyxFQUFFLENBQUM7UUFDN0IsTUFBTSxDQUFDLE1BQU0sQ0FBQyxtQkFBQSxJQUFJLEVBQUEsQ0FBQyxrQkFBa0IsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUM5QyxPQUFPLG1CQUFBLElBQUksRUFBQSxDQUFDO0lBQ2QsQ0FBQztDQUNGOzs7SUFOQyw2Q0FBdUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBtb2RlbHMgdXNlZCBieSBzaGFyZWQgc3RhdGUgc2VydmljZXMgKi9cblxuaW1wb3J0IHsgRGVzZXJpYWxpemFibGV9IGZyb20gJy4vZGVzZXJpYWxpemFibGUnO1xuXG5leHBvcnQgY2xhc3MgU2hhcmVkU3RhdGVDb250ZW50IGltcGxlbWVudHMgRGVzZXJpYWxpemFibGUge1xuICBqc29uOiBzdHJpbmc7XG4gIGRlc2VyaWFsaXplKGlucHV0OiBhbnkpIHtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMsIGlucHV0KTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2hhcmVkU3RhdGVFbnRyeSBpbXBsZW1lbnRzIERlc2VyaWFsaXphYmxlIHtcbiAgYXR0cmlidXRlczogc3RyaW5nW107XG4gIGNvbnRlbnQ6IFNoYXJlZFN0YXRlQ29udGVudDtcbiAgY3JlYXRlZEJ5OiBzdHJpbmc7XG4gIGNyZWF0ZWRCeU5hbWU6IHN0cmluZztcbiAgZGVzY3JpcHRpb246IHN0cmluZztcbiAgaWQ6IHN0cmluZztcbiAgaXNBYmFuZG9uZWQ6IGJvb2xlYW47XG4gIGlzT3JwaGFuZWQ6IGJvb2xlYW47XG4gIGxpbmtzOiBzdHJpbmdbXTtcbiAgbW9kaWZpZWRCeUlkOiBzdHJpbmc7XG4gIG1vZGlmaWVkQnlOYW1lOiBzdHJpbmc7XG4gIG1vZGlmaWVkRGF0ZTogbnVtYmVyO1xuICBuYW1lOiBzdHJpbmc7XG4gIHJvbGVzOiBzdHJpbmdbXTtcbiAgc2FuZGJveElkOiBudW1iZXI7XG4gIHNjb3BlOiBzdHJpbmc7XG4gIHR5cGU6IHN0cmluZztcblxuICBkZXNlcmlhbGl6ZShpbnB1dDogYW55KTogdGhpcyB7XG4gICAgdGhpcy5hdHRyaWJ1dGVzID0gaW5wdXQuYXR0cmlidXRlcztcbiAgICB0aGlzLmNvbnRlbnQgPSBpbnB1dC5jb250ZW50O1xuICAgIHRoaXMuY3JlYXRlZEJ5ID0gaW5wdXQuY3JlYXRlZEJ5O1xuICAgIHRoaXMuY3JlYXRlZEJ5TmFtZSA9IGlucHV0LmNyZWF0ZWRCeU5hbWU7XG4gICAgdGhpcy5kZXNjcmlwdGlvbiA9IGlucHV0LmRlc2NyaXB0aW9uO1xuICAgIHRoaXMuaWQgPSBpbnB1dC5pZDtcbiAgICB0aGlzLmlzQWJhbmRvbmVkID0gaW5wdXQuaXNBYmFuZG9uZWQ7XG4gICAgdGhpcy5pc09ycGhhbmVkID0gaW5wdXQuaXNPcnBoYW5lZDtcbiAgICB0aGlzLmxpbmtzID0gaW5wdXQubGlua3M7XG4gICAgdGhpcy5tb2RpZmllZEJ5SWQgPSBpbnB1dC5tb2RpZmllZEJ5SWQ7XG4gICAgdGhpcy5tb2RpZmllZERhdGUgPSBpbnB1dC5tb2RpZmllZERhdGU7XG4gICAgdGhpcy5uYW1lID0gaW5wdXQubmFtZTtcbiAgICB0aGlzLnJvbGVzID0gaW5wdXQucm9sZXM7XG4gICAgdGhpcy5zYW5kYm94SWQgPSBpbnB1dC5zYW5kYm94SWQ7XG4gICAgdGhpcy5zY29wZSA9IGlucHV0LnNjb3BlO1xuICAgIHRoaXMudHlwZSA9IGlucHV0LnR5cGU7XG4gICAgdGhpcy5jb250ZW50ID0gaW5wdXQuanNvbi5jb250ZW50O1xuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbmV4cG9ydCBjbGFzcyBTaGFyZWRTdGF0ZUxpc3QgaW1wbGVtZW50cyBEZXNlcmlhbGl6YWJsZSB7XG4gIHNoYXJlZFN0YXRlRW50cmllczogU2hhcmVkU3RhdGVFbnRyeVtdO1xuICBkZXNlcmlhbGl6ZShpbnB1dDogYW55KTogdGhpcyB7XG4gICAgdGhpcy5zaGFyZWRTdGF0ZUVudHJpZXMgPSBbXTtcbiAgICBPYmplY3QuYXNzaWduKHRoaXMuc2hhcmVkU3RhdGVFbnRyaWVzLCBpbnB1dCk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cbn1cbiJdfQ==