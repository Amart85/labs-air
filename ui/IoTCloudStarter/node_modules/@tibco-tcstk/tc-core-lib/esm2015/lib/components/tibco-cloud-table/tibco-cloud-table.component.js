/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild } from '@angular/core';
import { MatPaginator, MatSort } from '@angular/material';
import { TibcoCloudTableDataSource } from './tibco-cloud-table-datasource';
import { TcCoreCommonFunctions } from '../../common/tc-core-common-functions';
export class TibcoCloudTableComponent {
    constructor() {
        this.id = '_' + Math.random().toString(36).substr(2, 9);
        /**
         * Columns displayed in the table. Columns IDs can be added, removed, or reordered.
         */
        this.displayedColumns = [];
        this.columns = [];
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.updateTable();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        console.log('Table Changed');
        this.updateTable();
    }
    /**
     * @return {?}
     */
    updateTable() {
        // console.log('JSONSource: ', this.jsonSource);
        /** @type {?} */
        const parsedJsonSource = JSON.parse(this.jsonSource);
        // console.log('Parsed JSON Source: ', parsedJsonSource);
        this.dataSource = new TibcoCloudTableDataSource(this.paginator, this.sort, parsedJsonSource);
        /** @type {?} */
        const myColumns = [];
        if (parsedJsonSource.length != null) {
            if (parsedJsonSource.length > 0) {
                // console.log(parsedJsonSource[0]);
                if (parsedJsonSource[0] != null) {
                    /** @type {?} */
                    const myColumns = [];
                    /** @type {?} */
                    let m = 0;
                    for (const headerName in parsedJsonSource[0]) {
                        if (parsedJsonSource[0].hasOwnProperty(headerName)) {
                            // console.log(m + ' headerName:', headerName);
                            this.displayedColumns.push(headerName);
                            myColumns[m] = {};
                            myColumns[m]['columnDef'] = headerName;
                            myColumns[m]['header'] = headerName;
                            myColumns[m].cell = (/**
                             * @param {?} element
                             * @return {?}
                             */
                            function (element) {
                                return `${element[headerName]}`;
                            });
                            this.columns = myColumns;
                        }
                        m++;
                    }
                }
                // console.log('myColums:', this.columns);
                // this.columDefArray = this.columns;
            }
        }
    }
    /*
      private log(...m){
        console.log('TIBCO CLOUD TABLE] ' , m);
      }*/
    /**
     * @param {?} header
     * @return {?}
     */
    camelCaseTW(header) {
        return TcCoreCommonFunctions.camelCaseToWords(header);
    }
}
TibcoCloudTableComponent.decorators = [
    { type: Component, args: [{
                selector: 'tc-tibco-cloud-table',
                template: "<div class=\"mat-elevation-z8\">\n  <table id=\"{{id}}\" mat-table class=\"tct-full-width-table\" [dataSource]=\"dataSource\" matSort aria-label=\"Elements\">\n    <ng-container *ngFor=\"let column of columns\" [matColumnDef]='column.columnDef'>\n      <mat-header-cell *matHeaderCellDef class=\"tct-header\"  mat-sort-header>{{camelCaseTW(column.header)}}</mat-header-cell>\n      <mat-cell *matCellDef=\"let row\">{{ column.cell(row) }}</mat-cell>\n    </ng-container>\n    <mat-header-row *matHeaderRowDef=\"displayedColumns\"  ></mat-header-row>\n    <mat-row *matRowDef=\"let row; columns: displayedColumns;\n                         let even = even;\n                         columns: displayedColumns;\"\n             [ngClass]=\"{gray: even}\"></mat-row>\n  </table>\n  <mat-paginator [ngClass]=\"{'tct-hide': dataSource.data.length < 10}\" #paginator\n                 [length]=\"dataSource.data.length\"\n                 [pageIndex]=\"0\"\n                 [pageSize]=\"10\"\n                 [pageSizeOptions]=\"[5, 10, 20, 25]\">\n  </mat-paginator>\n</div>\n",
                styles: [".tct-full-width-table{width:100%}.tct-header{background:#0081cb;color:#fff;padding:5px 30px;display:-webkit-box;display:flex;-webkit-box-align:center;align-items:center}.tct-header:hover{background-color:#229be0}.tctgray{background-color:#f5f5f5}.tct-hide{display:none}"]
            }] }
];
TibcoCloudTableComponent.propDecorators = {
    jsonSource: [{ type: Input }],
    paginator: [{ type: ViewChild, args: [MatPaginator, { static: true },] }],
    sort: [{ type: ViewChild, args: [MatSort, { static: true },] }]
};
if (false) {
    /** @type {?} */
    TibcoCloudTableComponent.prototype.jsonSource;
    /** @type {?} */
    TibcoCloudTableComponent.prototype.paginator;
    /** @type {?} */
    TibcoCloudTableComponent.prototype.sort;
    /** @type {?} */
    TibcoCloudTableComponent.prototype.dataSource;
    /** @type {?} */
    TibcoCloudTableComponent.prototype.id;
    /**
     * Columns displayed in the table. Columns IDs can be added, removed, or reordered.
     * @type {?}
     */
    TibcoCloudTableComponent.prototype.displayedColumns;
    /** @type {?} */
    TibcoCloudTableComponent.prototype.columns;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGliY28tY2xvdWQtdGFibGUuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvdGliY28tY2xvdWQtdGFibGUvdGliY28tY2xvdWQtdGFibGUuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsU0FBUyxFQUFFLEtBQUssRUFBb0MsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzVGLE9BQU8sRUFBQyxZQUFZLEVBQUUsT0FBTyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDeEQsT0FBTyxFQUFDLHlCQUF5QixFQUFDLE1BQU0sZ0NBQWdDLENBQUM7QUFDekUsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sdUNBQXVDLENBQUM7QUFPNUUsTUFBTSxPQUFPLHdCQUF3QjtJQUxyQztRQVlFLE9BQUUsR0FBVyxHQUFHLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOzs7O1FBRzNELHFCQUFnQixHQUFHLEVBQUUsQ0FBQztRQUN0QixZQUFPLEdBQUcsRUFBRSxDQUFDO0lBMkRmLENBQUM7Ozs7SUF6REMsUUFBUTtRQUNOLElBQUksQ0FBQyxXQUFXLEVBQUUsQ0FBQztJQUdyQixDQUFDOzs7OztJQUNELFdBQVcsQ0FBQyxPQUFPO1FBQ2pCLE9BQU8sQ0FBQyxHQUFHLENBQUMsZUFBZSxDQUFDLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFDO0lBRXJCLENBQUM7Ozs7SUFHRCxXQUFXOzs7Y0FFSCxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLENBQUM7UUFDcEQseURBQXlEO1FBQ3pELElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSx5QkFBeUIsQ0FBQyxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQzs7Y0FDdkYsU0FBUyxHQUFHLEVBQUU7UUFDcEIsSUFBSSxnQkFBZ0IsQ0FBQyxNQUFNLElBQUksSUFBSSxFQUFFO1lBQ25DLElBQUksZ0JBQWdCLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDL0Isb0NBQW9DO2dCQUNwQyxJQUFJLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLElBQUksRUFBRTs7MEJBQ3pCLFNBQVMsR0FBRyxFQUFFOzt3QkFDaEIsQ0FBQyxHQUFHLENBQUM7b0JBQ1QsS0FBSyxNQUFNLFVBQVUsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsRUFBRTt3QkFDNUMsSUFBSSxnQkFBZ0IsQ0FBQyxDQUFDLENBQUMsQ0FBQyxjQUFjLENBQUMsVUFBVSxDQUFDLEVBQUU7NEJBQ2xELCtDQUErQzs0QkFDL0MsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQzs0QkFDdkMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsQ0FBQzs0QkFDbEIsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxHQUFHLFVBQVUsQ0FBQzs0QkFDdkMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxHQUFHLFVBQVUsQ0FBQzs0QkFDcEMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUk7Ozs7NEJBQUcsVUFBVSxPQUFPO2dDQUNuQyxPQUFPLEdBQUcsT0FBTyxDQUFDLFVBQVUsQ0FBQyxFQUFFLENBQUM7NEJBQ2xDLENBQUMsQ0FBQSxDQUFDOzRCQUNGLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO3lCQUMxQjt3QkFDRCxDQUFDLEVBQUUsQ0FBQztxQkFDTDtpQkFDRjtnQkFDRCwwQ0FBMEM7Z0JBQzFDLHFDQUFxQzthQUN0QztTQUNGO0lBQ0gsQ0FBQzs7Ozs7Ozs7O0lBUUQsV0FBVyxDQUFDLE1BQW9CO1FBRTlCLE9BQU8scUJBQXFCLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLENBQUM7SUFHeEQsQ0FBQzs7O1lBMUVGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsc0JBQXNCO2dCQUNoQyw0akNBQWlEOzthQUVsRDs7O3lCQUVFLEtBQUs7d0JBQ0wsU0FBUyxTQUFDLFlBQVksRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7bUJBQ3hDLFNBQVMsU0FBQyxPQUFPLEVBQUUsRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFOzs7O0lBRnBDLDhDQUE0Qjs7SUFDNUIsNkNBQW1FOztJQUNuRSx3Q0FBb0Q7O0lBRXBELDhDQUFzQzs7SUFFdEMsc0NBQTJEOzs7OztJQUczRCxvREFBc0I7O0lBQ3RCLDJDQUFhIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgU2ltcGxlQ2hhbmdlcywgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TWF0UGFnaW5hdG9yLCBNYXRTb3J0fSBmcm9tICdAYW5ndWxhci9tYXRlcmlhbCc7XG5pbXBvcnQge1RpYmNvQ2xvdWRUYWJsZURhdGFTb3VyY2V9IGZyb20gJy4vdGliY28tY2xvdWQtdGFibGUtZGF0YXNvdXJjZSc7XG5pbXBvcnQge1RjQ29yZUNvbW1vbkZ1bmN0aW9uc30gZnJvbSAnLi4vLi4vY29tbW9uL3RjLWNvcmUtY29tbW9uLWZ1bmN0aW9ucyc7XG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RjLXRpYmNvLWNsb3VkLXRhYmxlJyxcbiAgdGVtcGxhdGVVcmw6ICcuL3RpYmNvLWNsb3VkLXRhYmxlLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vdGliY28tY2xvdWQtdGFibGUuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIFRpYmNvQ2xvdWRUYWJsZUNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCwgT25DaGFuZ2VzIHtcbiAgQElucHV0KCkganNvblNvdXJjZTogc3RyaW5nO1xuICBAVmlld0NoaWxkKE1hdFBhZ2luYXRvciwgeyBzdGF0aWM6IHRydWUgfSkgcGFnaW5hdG9yOiBNYXRQYWdpbmF0b3I7XG4gIEBWaWV3Q2hpbGQoTWF0U29ydCwgeyBzdGF0aWM6IHRydWUgfSkgc29ydDogTWF0U29ydDtcblxuICBkYXRhU291cmNlOiBUaWJjb0Nsb3VkVGFibGVEYXRhU291cmNlO1xuXG4gIGlkOiBzdHJpbmcgPSAnXycgKyBNYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zdWJzdHIoMiwgOSk7XG5cbiAgLyoqIENvbHVtbnMgZGlzcGxheWVkIGluIHRoZSB0YWJsZS4gQ29sdW1ucyBJRHMgY2FuIGJlIGFkZGVkLCByZW1vdmVkLCBvciByZW9yZGVyZWQuICovXG4gIGRpc3BsYXllZENvbHVtbnMgPSBbXTtcbiAgY29sdW1ucyA9IFtdO1xuXG4gIG5nT25Jbml0KCkge1xuICAgIHRoaXMudXBkYXRlVGFibGUoKTtcblxuXG4gIH1cbiAgbmdPbkNoYW5nZXMoY2hhbmdlcykge1xuICAgIGNvbnNvbGUubG9nKCdUYWJsZSBDaGFuZ2VkJyk7XG4gICAgdGhpcy51cGRhdGVUYWJsZSgpO1xuXG4gIH1cblxuXG4gIHVwZGF0ZVRhYmxlKCkge1xuICAgIC8vIGNvbnNvbGUubG9nKCdKU09OU291cmNlOiAnLCB0aGlzLmpzb25Tb3VyY2UpO1xuICAgIGNvbnN0IHBhcnNlZEpzb25Tb3VyY2UgPSBKU09OLnBhcnNlKHRoaXMuanNvblNvdXJjZSk7XG4gICAgLy8gY29uc29sZS5sb2coJ1BhcnNlZCBKU09OIFNvdXJjZTogJywgcGFyc2VkSnNvblNvdXJjZSk7XG4gICAgdGhpcy5kYXRhU291cmNlID0gbmV3IFRpYmNvQ2xvdWRUYWJsZURhdGFTb3VyY2UodGhpcy5wYWdpbmF0b3IsIHRoaXMuc29ydCwgcGFyc2VkSnNvblNvdXJjZSk7XG4gICAgY29uc3QgbXlDb2x1bW5zID0gW107XG4gICAgaWYgKHBhcnNlZEpzb25Tb3VyY2UubGVuZ3RoICE9IG51bGwpIHtcbiAgICAgIGlmIChwYXJzZWRKc29uU291cmNlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgLy8gY29uc29sZS5sb2cocGFyc2VkSnNvblNvdXJjZVswXSk7XG4gICAgICAgIGlmIChwYXJzZWRKc29uU291cmNlWzBdICE9IG51bGwpIHtcbiAgICAgICAgICBjb25zdCBteUNvbHVtbnMgPSBbXTtcbiAgICAgICAgICBsZXQgbSA9IDA7XG4gICAgICAgICAgZm9yIChjb25zdCBoZWFkZXJOYW1lIGluIHBhcnNlZEpzb25Tb3VyY2VbMF0pIHtcbiAgICAgICAgICAgIGlmIChwYXJzZWRKc29uU291cmNlWzBdLmhhc093blByb3BlcnR5KGhlYWRlck5hbWUpKSB7XG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKG0gKyAnIGhlYWRlck5hbWU6JywgaGVhZGVyTmFtZSk7XG4gICAgICAgICAgICAgIHRoaXMuZGlzcGxheWVkQ29sdW1ucy5wdXNoKGhlYWRlck5hbWUpO1xuICAgICAgICAgICAgICBteUNvbHVtbnNbbV0gPSB7fTtcbiAgICAgICAgICAgICAgbXlDb2x1bW5zW21dWydjb2x1bW5EZWYnXSA9IGhlYWRlck5hbWU7XG4gICAgICAgICAgICAgIG15Q29sdW1uc1ttXVsnaGVhZGVyJ10gPSBoZWFkZXJOYW1lO1xuICAgICAgICAgICAgICBteUNvbHVtbnNbbV0uY2VsbCA9IGZ1bmN0aW9uIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGAke2VsZW1lbnRbaGVhZGVyTmFtZV19YDtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgdGhpcy5jb2x1bW5zID0gbXlDb2x1bW5zO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbSsrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBjb25zb2xlLmxvZygnbXlDb2x1bXM6JywgdGhpcy5jb2x1bW5zKTtcbiAgICAgICAgLy8gdGhpcy5jb2x1bURlZkFycmF5ID0gdGhpcy5jb2x1bW5zO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbiAgLypcbiAgcHJpdmF0ZSBsb2coLi4ubSl7XG4gICAgY29uc29sZS5sb2coJ1RJQkNPIENMT1VEIFRBQkxFXSAnICwgbSk7XG4gIH0qL1xuXG4gIGNhbWVsQ2FzZVRXKGhlYWRlcjogc3RyaW5nIHwgYW55KSB7XG5cbiAgICByZXR1cm4gVGNDb3JlQ29tbW9uRnVuY3Rpb25zLmNhbWVsQ2FzZVRvV29yZHMoaGVhZGVyKTtcblxuXG4gIH1cbn1cbiJdfQ==