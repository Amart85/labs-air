/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
/**
 * Renders the menu options for each config menu
 *
 * ![alt-text](../tibco-cloud-setting-menu-entry.png "Image")
 *
 * \@example <tc-tibco-cloud-setting-menu-entry></tc-tibco-cloud-setting-menu-entry>
 */
export class TibcoCloudSettingMenuEntryComponent {
    constructor() {
        /**
         * ~event configureOption : Option Clicked
         * ~payload string : emits Id of option selected in config main page (options)
         */
        this.configureOption = new EventEmitter();
    }
    /**
     * @param {?} id
     * @return {?}
     */
    viewButtonClick(id) {
        this.configureOption.emit(id);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
TibcoCloudSettingMenuEntryComponent.decorators = [
    { type: Component, args: [{
                selector: 'tc-tibco-cloud-setting-menu-entry',
                template: "<div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n    <div class=\"padding-icon\">\n        <mat-icon svgIcon=\"{{icon}}\"></mat-icon>\n    </div>\n    <div fxLayout=\"column\" fxLayoutAlign=\"start start\">\n        <div class=\"underlying-capability-text\">{{title}}</div>\n        <div class=\"starters-custom-layout-box-option\" *ngFor=\"let option of options\" (click)=\"viewButtonClick(title + ' ' + option)\">\n            <span class=\"underlying-capability-link\">{{option}}</span>\n        </div>\n    </div>\n</div>\n",
                styles: [".starters-custom-layout-box-option:hover{cursor:pointer}.underlying-capability-text{font-size:14px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:.3px;color:#062e79}.underlying-capability-link{font-size:12px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:.3px;color:#0081cb;padding-bottom:20px}:host ::ng-deep .padding-icon{padding-right:15px}"]
            }] }
];
/** @nocollapse */
TibcoCloudSettingMenuEntryComponent.ctorParameters = () => [];
TibcoCloudSettingMenuEntryComponent.propDecorators = {
    icon: [{ type: Input }],
    title: [{ type: Input }],
    options: [{ type: Input }],
    configureOption: [{ type: Output }]
};
if (false) {
    /**
     * icon name (svg key - needs to be registered)
     * @type {?}
     */
    TibcoCloudSettingMenuEntryComponent.prototype.icon;
    /**
     * page title comes from config resolver
     * @type {?}
     */
    TibcoCloudSettingMenuEntryComponent.prototype.title;
    /**
     * RenderedFormComponent: (options from third party API). TibcoCloudSettingMenuEntryComponent -Check with MC - not sure we need to document this.
     * @type {?}
     */
    TibcoCloudSettingMenuEntryComponent.prototype.options;
    /**
     * ~event configureOption : Option Clicked
     * ~payload string : emits Id of option selected in config main page (options)
     * @type {?}
     */
    TibcoCloudSettingMenuEntryComponent.prototype.configureOption;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGliY28tY2xvdWQtc2V0dGluZy1tZW51LWVudHJ5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL3RpYmNvLWNsb3VkLXNldHRpbmctbWVudS1lbnRyeS90aWJjby1jbG91ZC1zZXR0aW5nLW1lbnUtZW50cnkuY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFVLEtBQUssRUFBRSxNQUFNLEVBQUUsWUFBWSxFQUFFLE1BQU0sZUFBZSxDQUFDOzs7Ozs7OztBQWdCL0UsTUFBTSxPQUFPLG1DQUFtQztJQXdCOUM7Ozs7O1FBRlUsb0JBQWUsR0FBeUIsSUFBSSxZQUFZLEVBQVUsQ0FBQztJQUU3RCxDQUFDOzs7OztJQUVmLGVBQWUsQ0FBQyxFQUFFO1FBQ2hCLElBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ2hDLENBQUM7Ozs7SUFFRCxRQUFRO0lBQ1IsQ0FBQzs7O1lBcENKLFNBQVMsU0FBQztnQkFDUCxRQUFRLEVBQUUsbUNBQW1DO2dCQUM3QyxnaUJBQThEOzthQUVqRTs7Ozs7bUJBTUUsS0FBSztvQkFLTCxLQUFLO3NCQUtMLEtBQUs7OEJBT0wsTUFBTTs7Ozs7OztJQWpCUCxtREFBc0I7Ozs7O0lBS3RCLG9EQUF1Qjs7Ozs7SUFLdkIsc0RBQTJCOzs7Ozs7SUFPM0IsOERBQTZFIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5cbi8qKlxuICogUmVuZGVycyB0aGUgbWVudSBvcHRpb25zIGZvciBlYWNoIGNvbmZpZyBtZW51XG4gKlxuICogIVthbHQtdGV4dF0oLi4vdGliY28tY2xvdWQtc2V0dGluZy1tZW51LWVudHJ5LnBuZyBcIkltYWdlXCIpXG4gKlxuICpAZXhhbXBsZSA8dGMtdGliY28tY2xvdWQtc2V0dGluZy1tZW51LWVudHJ5PjwvdGMtdGliY28tY2xvdWQtc2V0dGluZy1tZW51LWVudHJ5PlxuICovXG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAndGMtdGliY28tY2xvdWQtc2V0dGluZy1tZW51LWVudHJ5JyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vdGliY28tY2xvdWQtc2V0dGluZy1tZW51LWVudHJ5LmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi90aWJjby1jbG91ZC1zZXR0aW5nLW1lbnUtZW50cnkuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIFRpYmNvQ2xvdWRTZXR0aW5nTWVudUVudHJ5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICAvKipcbiAgICogaWNvbiBuYW1lIChzdmcga2V5IC0gbmVlZHMgdG8gYmUgcmVnaXN0ZXJlZClcbiAgICovXG4gIEBJbnB1dCgpIGljb246IHN0cmluZztcblxuICAvKipcbiAgICogcGFnZSB0aXRsZSBjb21lcyBmcm9tIGNvbmZpZyByZXNvbHZlclxuICAgKi9cbiAgQElucHV0KCkgdGl0bGU6IHN0cmluZztcblxuICAvKipcbiAgICogUmVuZGVyZWRGb3JtQ29tcG9uZW50OiAob3B0aW9ucyBmcm9tIHRoaXJkIHBhcnR5IEFQSSkuIFRpYmNvQ2xvdWRTZXR0aW5nTWVudUVudHJ5Q29tcG9uZW50IC1DaGVjayB3aXRoIE1DIC0gbm90IHN1cmUgd2UgbmVlZCB0byBkb2N1bWVudCB0aGlzLlxuICAgKi9cbiAgQElucHV0KCkgb3B0aW9uczogc3RyaW5nW107XG5cblxuICAvKipcbiAgICogfmV2ZW50IGNvbmZpZ3VyZU9wdGlvbiA6IE9wdGlvbiBDbGlja2VkXG4gICAqIH5wYXlsb2FkIHN0cmluZyA6IGVtaXRzIElkIG9mIG9wdGlvbiBzZWxlY3RlZCBpbiBjb25maWcgbWFpbiBwYWdlIChvcHRpb25zKVxuICAgKi9cbiAgQE91dHB1dCgpIGNvbmZpZ3VyZU9wdGlvbjogRXZlbnRFbWl0dGVyPHN0cmluZz4gPSBuZXcgRXZlbnRFbWl0dGVyPHN0cmluZz4oKTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gICAgdmlld0J1dHRvbkNsaWNrKGlkKSB7XG4gICAgICB0aGlzLmNvbmZpZ3VyZU9wdGlvbi5lbWl0KGlkKTtcbiAgICB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICB9XG5cbn1cbiJdfQ==