/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/* used to highlight search results in a list where search term matches
 *
 * original source from https://gist.github.com/adamrecsko/0f28f474eca63e0279455476cc11eca7
 * post by ankitgrover
*/
import { Pipe } from '@angular/core';
export class HighlightPipe {
    /**
     * @param {?} data
     * @param {?} highlightText
     * @param {?=} option
     * @param {?=} caseSensitive
     * @param {?=} highlightStyleName
     * @return {?}
     */
    transform(data, highlightText, option = 'Single-And-StartsWith-Match', caseSensitive = false, highlightStyleName = 'search-highlight') {
        if (highlightText && data && option) {
            /** @type {?} */
            let regex = '';
            /** @type {?} */
            const caseFlag = !caseSensitive ? 'i' : '';
            switch (option) {
                case 'Single-Match': {
                    regex = new RegExp(highlightText, caseFlag);
                    break;
                }
                case 'Single-And-StartsWith-Match': {
                    regex = new RegExp('^' + highlightText, caseFlag);
                    break;
                }
                case 'Multi-Match': {
                    regex = new RegExp(highlightText, 'g' + caseFlag);
                    break;
                }
                default: {
                    // default will be a global case-insensitive match
                    regex = new RegExp(highlightText, 'gi');
                }
            }
            return data.replace(regex, (/**
             * @param {?} match
             * @return {?}
             */
            (match) => `<span class="${highlightStyleName}">${match}</span>`));
        }
        else {
            return data;
        }
    }
}
/* use this for single match search */
HighlightPipe.SINGLE_MATCH = 'Single-Match';
/* use this for single match search with a restriction that target should start with search string */
HighlightPipe.SINGLE_AND_STARTS_WITH_MATCH = 'Single-And-StartsWith-Match';
/* use this for global search */
HighlightPipe.MULTI_MATCH = 'Multi-Match';
HighlightPipe.decorators = [
    { type: Pipe, args: [{
                name: 'highlight'
            },] }
];
if (false) {
    /** @type {?} */
    HighlightPipe.SINGLE_MATCH;
    /** @type {?} */
    HighlightPipe.SINGLE_AND_STARTS_WITH_MATCH;
    /** @type {?} */
    HighlightPipe.MULTI_MATCH;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaGlnaGxpZ2h0LnBpcGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtY29yZS1saWIvIiwic291cmNlcyI6WyJsaWIvcGlwZXMvaGlnaGxpZ2h0LnBpcGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBTUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFNcEQsTUFBTSxPQUFPLGFBQWE7Ozs7Ozs7OztJQVN4QixTQUFTLENBQUMsSUFBWSxFQUNaLGFBQXFCLEVBQ3JCLFNBQWlCLDZCQUE2QixFQUM5QyxnQkFBeUIsS0FBSyxFQUM5QixxQkFBNkIsa0JBQWtCO1FBQ3ZELElBQUksYUFBYSxJQUFJLElBQUksSUFBSSxNQUFNLEVBQUU7O2dCQUMvQixLQUFLLEdBQVEsRUFBRTs7a0JBQ2IsUUFBUSxHQUFXLENBQUMsYUFBYSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUU7WUFDbEQsUUFBUSxNQUFNLEVBQUU7Z0JBQ2QsS0FBSyxjQUFjLENBQUMsQ0FBQztvQkFDbkIsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLGFBQWEsRUFBRSxRQUFRLENBQUMsQ0FBQztvQkFDNUMsTUFBTTtpQkFDUDtnQkFDRCxLQUFLLDZCQUE2QixDQUFDLENBQUM7b0JBQ2xDLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxHQUFHLEdBQUcsYUFBYSxFQUFFLFFBQVEsQ0FBQyxDQUFDO29CQUNsRCxNQUFNO2lCQUNQO2dCQUNELEtBQUssYUFBYSxDQUFDLENBQUM7b0JBQ2xCLEtBQUssR0FBRyxJQUFJLE1BQU0sQ0FBQyxhQUFhLEVBQUUsR0FBRyxHQUFHLFFBQVEsQ0FBQyxDQUFDO29CQUNsRCxNQUFNO2lCQUNQO2dCQUNELE9BQU8sQ0FBQyxDQUFDO29CQUNQLGtEQUFrRDtvQkFDbEQsS0FBSyxHQUFHLElBQUksTUFBTSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztpQkFDekM7YUFDRjtZQUNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLOzs7O1lBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLGdCQUFnQixrQkFBa0IsS0FBSyxLQUFLLFNBQVMsRUFBQyxDQUFDO1NBRTlGO2FBQU07WUFDTCxPQUFPLElBQUksQ0FBQztTQUNiO0lBQ0gsQ0FBQzs7O0FBckNNLDBCQUFZLEdBQUcsY0FBYyxDQUFDOztBQUU5QiwwQ0FBNEIsR0FBRyw2QkFBNkIsQ0FBQzs7QUFFN0QseUJBQVcsR0FBRyxhQUFhLENBQUM7O1lBVnBDLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsV0FBVzthQUNsQjs7OztJQUlDLDJCQUFxQzs7SUFFckMsMkNBQW9FOztJQUVwRSwwQkFBbUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiB1c2VkIHRvIGhpZ2hsaWdodCBzZWFyY2ggcmVzdWx0cyBpbiBhIGxpc3Qgd2hlcmUgc2VhcmNoIHRlcm0gbWF0Y2hlc1xuICpcbiAqIG9yaWdpbmFsIHNvdXJjZSBmcm9tIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2FkYW1yZWNza28vMGYyOGY0NzRlY2E2M2UwMjc5NDU1NDc2Y2MxMWVjYTdcbiAqIHBvc3QgYnkgYW5raXRncm92ZXJcbiovXG5cbmltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U2FmZUh0bWx9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuXG5AUGlwZSh7XG4gIG5hbWU6ICdoaWdobGlnaHQnXG59KVxuZXhwb3J0IGNsYXNzIEhpZ2hsaWdodFBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICAvKiB1c2UgdGhpcyBmb3Igc2luZ2xlIG1hdGNoIHNlYXJjaCAqL1xuICBzdGF0aWMgU0lOR0xFX01BVENIID0gJ1NpbmdsZS1NYXRjaCc7XG4gIC8qIHVzZSB0aGlzIGZvciBzaW5nbGUgbWF0Y2ggc2VhcmNoIHdpdGggYSByZXN0cmljdGlvbiB0aGF0IHRhcmdldCBzaG91bGQgc3RhcnQgd2l0aCBzZWFyY2ggc3RyaW5nICovXG4gIHN0YXRpYyBTSU5HTEVfQU5EX1NUQVJUU19XSVRIX01BVENIID0gJ1NpbmdsZS1BbmQtU3RhcnRzV2l0aC1NYXRjaCc7XG4gIC8qIHVzZSB0aGlzIGZvciBnbG9iYWwgc2VhcmNoICovXG4gIHN0YXRpYyBNVUxUSV9NQVRDSCA9ICdNdWx0aS1NYXRjaCc7XG5cbiAgdHJhbnNmb3JtKGRhdGE6IHN0cmluZyxcbiAgICAgICAgICAgIGhpZ2hsaWdodFRleHQ6IHN0cmluZyxcbiAgICAgICAgICAgIG9wdGlvbjogc3RyaW5nID0gJ1NpbmdsZS1BbmQtU3RhcnRzV2l0aC1NYXRjaCcsXG4gICAgICAgICAgICBjYXNlU2Vuc2l0aXZlOiBib29sZWFuID0gZmFsc2UsXG4gICAgICAgICAgICBoaWdobGlnaHRTdHlsZU5hbWU6IHN0cmluZyA9ICdzZWFyY2gtaGlnaGxpZ2h0Jyk6IFNhZmVIdG1sIHtcbiAgICBpZiAoaGlnaGxpZ2h0VGV4dCAmJiBkYXRhICYmIG9wdGlvbikge1xuICAgICAgbGV0IHJlZ2V4OiBhbnkgPSAnJztcbiAgICAgIGNvbnN0IGNhc2VGbGFnOiBzdHJpbmcgPSAhY2FzZVNlbnNpdGl2ZSA/ICdpJyA6ICcnO1xuICAgICAgc3dpdGNoIChvcHRpb24pIHtcbiAgICAgICAgY2FzZSAnU2luZ2xlLU1hdGNoJzoge1xuICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cChoaWdobGlnaHRUZXh0LCBjYXNlRmxhZyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnU2luZ2xlLUFuZC1TdGFydHNXaXRoLU1hdGNoJzoge1xuICAgICAgICAgIHJlZ2V4ID0gbmV3IFJlZ0V4cCgnXicgKyBoaWdobGlnaHRUZXh0LCBjYXNlRmxhZyk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgICAgY2FzZSAnTXVsdGktTWF0Y2gnOiB7XG4gICAgICAgICAgcmVnZXggPSBuZXcgUmVnRXhwKGhpZ2hsaWdodFRleHQsICdnJyArIGNhc2VGbGFnKTtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBkZWZhdWx0OiB7XG4gICAgICAgICAgLy8gZGVmYXVsdCB3aWxsIGJlIGEgZ2xvYmFsIGNhc2UtaW5zZW5zaXRpdmUgbWF0Y2hcbiAgICAgICAgICByZWdleCA9IG5ldyBSZWdFeHAoaGlnaGxpZ2h0VGV4dCwgJ2dpJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBkYXRhLnJlcGxhY2UocmVnZXgsIChtYXRjaCkgPT4gYDxzcGFuIGNsYXNzPVwiJHtoaWdobGlnaHRTdHlsZU5hbWV9XCI+JHttYXRjaH08L3NwYW4+YCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGRhdGE7XG4gICAgfVxuICB9XG5cbn1cbiJdfQ==