/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// This pipe will display a date based on how long ago it was: eg. 5 mins ago, 1 hour ago, just now etc etc
import { Pipe } from '@angular/core';
export class DurationSincePipe {
    /**
     * @param {?} value
     * @param {?=} args
     * @return {?}
     */
    transform(value, args) {
        /** @type {?} */
        const seconds = Math.floor((+new Date() - +new Date(value)) / 1000);
        /** @type {?} */
        let interval = Math.floor(seconds / 31536000);
        // years
        if (interval >= 1) {
            if (interval === 1) {
                return interval + ' year ago';
            }
            else {
                return interval + ' years ago';
            }
        }
        // months
        interval = Math.floor(seconds / 2592000);
        if (interval >= 1) {
            if (interval === 1) {
                return interval + ' month ago';
            }
            else {
                return interval + ' months ago';
            }
        }
        // weeks
        interval = Math.floor(seconds / 604800);
        if (interval >= 1) {
            if (interval === 1) {
                return interval + ' week ago';
            }
            else {
                return interval + ' weeks ago';
            }
        }
        // days
        interval = Math.floor(seconds / 86400);
        if (interval >= 1) {
            if (interval === 1) {
                return ' yesterday';
            }
            else {
                return interval + ' days ago';
            }
        }
        // hours
        interval = Math.floor(seconds / 3600);
        if (interval >= 1) {
            if (interval === 1) {
                return interval + ' hour ago';
            }
            else {
                return interval + ' hours ago';
            }
        }
        // minutes
        interval = Math.floor(seconds / 60);
        if (interval >= 1) {
            if (interval === 1) {
                return interval + ' minute ago';
            }
            else {
                return interval + ' minutes ago';
            }
        }
        return 'Just now';
    }
}
DurationSincePipe.decorators = [
    { type: Pipe, args: [{
                name: 'durationSince'
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHVyYXRpb24tc2luY2UucGlwZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9waXBlcy9kdXJhdGlvbi1zaW5jZS5waXBlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsT0FBTyxFQUFFLElBQUksRUFBaUIsTUFBTSxlQUFlLENBQUM7QUFLcEQsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7O0lBRTVCLFNBQVMsQ0FBQyxLQUFhLEVBQUUsSUFBVTs7Y0FDM0IsT0FBTyxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxFQUFFLEdBQUcsQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQzs7WUFDdkUsUUFBUSxHQUFXLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLFFBQVEsQ0FBQztRQUNyRCxRQUFRO1FBQ1IsSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO1lBQ2pCLElBQUksUUFBUSxLQUFLLENBQUMsRUFBRTtnQkFDbEIsT0FBTyxRQUFRLEdBQUcsV0FBVyxDQUFDO2FBQy9CO2lCQUFNO2dCQUNMLE9BQU8sUUFBUSxHQUFHLFlBQVksQ0FBQzthQUNoQztTQUNGO1FBQ0QsU0FBUztRQUNULFFBQVEsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsQ0FBQztRQUN6QyxJQUFJLFFBQVEsSUFBSSxDQUFDLEVBQUU7WUFDakIsSUFBSSxRQUFRLEtBQUssQ0FBQyxFQUFFO2dCQUNsQixPQUFPLFFBQVEsR0FBRyxZQUFZLENBQUM7YUFDaEM7aUJBQU07Z0JBQ0wsT0FBTyxRQUFRLEdBQUcsYUFBYSxDQUFDO2FBQ2pDO1NBQ0Y7UUFDRCxRQUFRO1FBQ1IsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxDQUFDO1FBQ3hDLElBQUksUUFBUSxJQUFJLENBQUMsRUFBRTtZQUNqQixJQUFJLFFBQVEsS0FBSyxDQUFDLEVBQUU7Z0JBQ2xCLE9BQU8sUUFBUSxHQUFHLFdBQVcsQ0FBQzthQUMvQjtpQkFBTTtnQkFDTCxPQUFPLFFBQVEsR0FBRyxZQUFZLENBQUM7YUFDaEM7U0FDRjtRQUNELE9BQU87UUFDUCxRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFDLENBQUM7UUFDdkMsSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO1lBQ2pCLElBQUksUUFBUSxLQUFLLENBQUMsRUFBRTtnQkFDbEIsT0FBTyxZQUFZLENBQUM7YUFDckI7aUJBQU07Z0JBQ0wsT0FBTyxRQUFRLEdBQUcsV0FBVyxDQUFDO2FBQy9CO1NBQ0Y7UUFDRCxRQUFRO1FBQ1IsUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQyxDQUFDO1FBQ3RDLElBQUksUUFBUSxJQUFJLENBQUMsRUFBRTtZQUNqQixJQUFJLFFBQVEsS0FBSyxDQUFDLEVBQUU7Z0JBQ2xCLE9BQU8sUUFBUSxHQUFHLFdBQVcsQ0FBQzthQUMvQjtpQkFBTTtnQkFDTCxPQUFPLFFBQVEsR0FBRyxZQUFZLENBQUM7YUFDaEM7U0FDRjtRQUNELFVBQVU7UUFDVixRQUFRLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDcEMsSUFBSSxRQUFRLElBQUksQ0FBQyxFQUFFO1lBQ2pCLElBQUksUUFBUSxLQUFLLENBQUMsRUFBRTtnQkFDbEIsT0FBTyxRQUFRLEdBQUcsYUFBYSxDQUFDO2FBQ2pDO2lCQUFNO2dCQUNMLE9BQU8sUUFBUSxHQUFHLGNBQWMsQ0FBQzthQUNsQztTQUNGO1FBRUQsT0FBTyxVQUFVLENBQUM7SUFDcEIsQ0FBQzs7O1lBL0RGLElBQUksU0FBQztnQkFDSixJQUFJLEVBQUUsZUFBZTthQUN0QiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgcGlwZSB3aWxsIGRpc3BsYXkgYSBkYXRlIGJhc2VkIG9uIGhvdyBsb25nIGFnbyBpdCB3YXM6IGVnLiA1IG1pbnMgYWdvLCAxIGhvdXIgYWdvLCBqdXN0IG5vdyBldGMgZXRjXG5cbmltcG9ydCB7IFBpcGUsIFBpcGVUcmFuc2Zvcm0gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQFBpcGUoe1xuICBuYW1lOiAnZHVyYXRpb25TaW5jZSdcbn0pXG5leHBvcnQgY2xhc3MgRHVyYXRpb25TaW5jZVBpcGUgaW1wbGVtZW50cyBQaXBlVHJhbnNmb3JtIHtcblxuICB0cmFuc2Zvcm0odmFsdWU6IHN0cmluZywgYXJncz86IGFueSk6IGFueSB7XG4gICAgY29uc3Qgc2Vjb25kczogbnVtYmVyID0gTWF0aC5mbG9vcigoK25ldyBEYXRlKCkgLSArbmV3IERhdGUodmFsdWUpKSAvIDEwMDApO1xuICAgIGxldCBpbnRlcnZhbDogbnVtYmVyID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gMzE1MzYwMDApO1xuICAgIC8vIHllYXJzXG4gICAgaWYgKGludGVydmFsID49IDEpIHtcbiAgICAgIGlmIChpbnRlcnZhbCA9PT0gMSkge1xuICAgICAgICByZXR1cm4gaW50ZXJ2YWwgKyAnIHllYXIgYWdvJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnRlcnZhbCArICcgeWVhcnMgYWdvJztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gbW9udGhzXG4gICAgaW50ZXJ2YWwgPSBNYXRoLmZsb29yKHNlY29uZHMgLyAyNTkyMDAwKTtcbiAgICBpZiAoaW50ZXJ2YWwgPj0gMSkge1xuICAgICAgaWYgKGludGVydmFsID09PSAxKSB7XG4gICAgICAgIHJldHVybiBpbnRlcnZhbCArICcgbW9udGggYWdvJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBpbnRlcnZhbCArICcgbW9udGhzIGFnbyc7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHdlZWtzXG4gICAgaW50ZXJ2YWwgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MDQ4MDApO1xuICAgIGlmIChpbnRlcnZhbCA+PSAxKSB7XG4gICAgICBpZiAoaW50ZXJ2YWwgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGludGVydmFsICsgJyB3ZWVrIGFnbyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW50ZXJ2YWwgKyAnIHdlZWtzIGFnbyc7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGRheXNcbiAgICBpbnRlcnZhbCA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDg2NDAwKTtcbiAgICBpZiAoaW50ZXJ2YWwgPj0gMSkge1xuICAgICAgaWYgKGludGVydmFsID09PSAxKSB7XG4gICAgICAgIHJldHVybiAnIHllc3RlcmRheSc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW50ZXJ2YWwgKyAnIGRheXMgYWdvJztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gaG91cnNcbiAgICBpbnRlcnZhbCA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDM2MDApO1xuICAgIGlmIChpbnRlcnZhbCA+PSAxKSB7XG4gICAgICBpZiAoaW50ZXJ2YWwgPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGludGVydmFsICsgJyBob3VyIGFnbyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW50ZXJ2YWwgKyAnIGhvdXJzIGFnbyc7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIG1pbnV0ZXNcbiAgICBpbnRlcnZhbCA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICBpZiAoaW50ZXJ2YWwgPj0gMSkge1xuICAgICAgaWYgKGludGVydmFsID09PSAxKSB7XG4gICAgICAgIHJldHVybiBpbnRlcnZhbCArICcgbWludXRlIGFnbyc7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gaW50ZXJ2YWwgKyAnIG1pbnV0ZXMgYWdvJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gJ0p1c3Qgbm93JztcbiAgfVxuXG59XG4iXX0=