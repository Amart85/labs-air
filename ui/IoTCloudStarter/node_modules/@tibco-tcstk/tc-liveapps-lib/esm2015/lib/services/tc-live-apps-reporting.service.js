/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { forkJoin } from 'rxjs';
import { flatMap, map, tap } from 'rxjs/operators';
import { CaseTypesReport, CaseTypeStateReport } from '../models/tc-live-apps-reporting';
import { TcCaseCardConfigService } from './tc-case-card-config.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./tc-case-card-config.service";
export class TcLiveAppsReportingService {
    /**
     * @param {?} http
     * @param {?} caseConfigService
     */
    constructor(http, caseConfigService) {
        this.http = http;
        this.caseConfigService = caseConfigService;
    }
    /**
     * @param {?} report
     * @param {?} uiAppId
     * @return {?}
     */
    parseCaseTypesReport(report, uiAppId) {
        // add state colors for the report entries
        /** @type {?} */
        const caseStateColorMaps$ = [];
        report.caseTypes.forEach((/**
         * @param {?} caseType
         * @return {?}
         */
        (caseType) => {
            caseStateColorMaps$.push(this.caseConfigService.getStateColorInfo(caseType.applicationId, uiAppId).pipe(map((/**
             * @param {?} stateColMap
             * @return {?}
             */
            stateColMap => {
                return stateColMap;
            }))));
        }));
        return forkJoin(caseStateColorMaps$).pipe(map((/**
         * @param {?} resultArr
         * @return {?}
         */
        resultArr => {
            for (let x = 0; x < report.caseTypes.length; x++) {
                report.caseTypes[x].caseTypeInfo.color = resultArr[x].caseTypeColor ? resultArr[x].caseTypeColor : undefined;
            }
            return report;
        })));
    }
    /**
     * @param {?} report
     * @param {?} applicationId
     * @param {?} uiAppId
     * @return {?}
     */
    parseCaseStateReport(report, applicationId, uiAppId) {
        // add state colors for the report entries
        return this.caseConfigService.getStateColorInfo(applicationId, uiAppId).pipe(map((/**
         * @param {?} stateColorInfo
         * @return {?}
         */
        stateColorInfo => {
            report.caseStates.forEach((/**
             * @param {?} caseState
             * @return {?}
             */
            caseState => {
                /** @type {?} */
                let stateRecord;
                if (stateColorInfo && stateColorInfo.stateColorRecs) {
                    stateRecord = stateColorInfo.stateColorRecs.find((/**
                     * @param {?} stateRec
                     * @return {?}
                     */
                    stateRec => {
                        return stateRec.state === caseState.stateInfo.value;
                    }));
                }
                caseState.stateInfo.color = (stateRecord && stateRecord.color) ? stateRecord.color : undefined;
            }));
            return report;
        })));
    }
    /**
     * @param {?} sandboxId
     * @param {?} appIds
     * @param {?} uiAppId
     * @return {?}
     */
    getCaseTypesReport(sandboxId, appIds, uiAppId) {
        /** @type {?} */
        const url = '/case/reports/v1/caseTypesReport?$sandbox=' + sandboxId;
        return this.http.get(url).pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), flatMap((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const originalResponse = new CaseTypesReport().deserialize(response);
            /**
             * @param {?} element
             * @param {?} index
             * @param {?} array
             * @return {?}
             */
            function includeCaseType(element, index, array) {
                return (appIds.indexOf(element.applicationId) !== -1);
            }
            /** @type {?} */
            const filteredResponse = new CaseTypesReport();
            if (appIds.length > 0) {
                filteredResponse.caseTypes = originalResponse.caseTypes.filter(includeCaseType);
            }
            else {
                filteredResponse.caseTypes = originalResponse.caseTypes;
            }
            return this.parseCaseTypesReport(filteredResponse, uiAppId);
        })));
    }
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} incTerminal
     * @param {?} uiAppId
     * @return {?}
     */
    getCaseTypeStateReport(sandboxId, appId, typeId, incTerminal, uiAppId) {
        /** @type {?} */
        const url = '/case/reports/v1/caseStatesReport?$sandbox=' + sandboxId
            + '&$filter=applicationId eq ' + appId
            + ' and typeId eq ' + typeId
            + ' and includeTerminalStates eq ' + String(incTerminal).toUpperCase();
        return this.http.get(url).pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), flatMap((/**
         * @param {?} response
         * @return {?}
         */
        response => {
            /** @type {?} */
            const caseTypeStateReport = new CaseTypeStateReport().deserialize(response);
            return this.parseCaseStateReport(caseTypeStateReport, appId, uiAppId);
        })));
    }
}
TcLiveAppsReportingService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TcLiveAppsReportingService.ctorParameters = () => [
    { type: HttpClient },
    { type: TcCaseCardConfigService }
];
/** @nocollapse */ TcLiveAppsReportingService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcLiveAppsReportingService_Factory() { return new TcLiveAppsReportingService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.TcCaseCardConfigService)); }, token: TcLiveAppsReportingService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcLiveAppsReportingService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TcLiveAppsReportingService.prototype.caseConfigService;
}
//# sourceMappingURL=data:application/json;base64,