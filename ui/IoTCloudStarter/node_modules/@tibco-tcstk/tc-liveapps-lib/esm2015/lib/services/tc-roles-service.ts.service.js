/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
export class TcRolesService {
    constructor() {
        this.currentRole = undefined;
        this.hasRoleAccess = (/**
         * @param {?} roleReq
         * @param {?} roles
         * @return {?}
         */
        (roleReq, roles) => {
            /** @type {?} */
            const reqRole = roles.roles.find((/**
             * @param {?} role
             * @return {?}
             */
            role => {
                return (role.id === roleReq);
            }));
            return reqRole ? true : false;
        });
        this.hasButtonAccess = (/**
         * @param {?} buttonId
         * @param {?} roles
         * @param {?} access
         * @return {?}
         */
        (buttonId, roles, access) => {
            // check which role required
            /** @type {?} */
            const reqRole = access.buttons.find((/**
             * @param {?} buttonRec
             * @return {?}
             */
            buttonRec => {
                return (buttonId === buttonRec.buttonId);
            }));
            if (!reqRole) {
                // nothing defined so return true;
                return true;
            }
            else {
                /** @type {?} */
                const hasRole = roles.roles.find((/**
                 * @param {?} role
                 * @return {?}
                 */
                role => {
                    return (role.id === reqRole.requiredRoleId);
                }));
                return hasRole ? true : false;
            }
        });
        this.amIConfigurator = (/**
         * @param {?} roles
         * @return {?}
         */
        (roles) => {
            /** @type {?} */
            const reqRole = roles.roles.find((/**
             * @param {?} role
             * @return {?}
             */
            role => {
                return (role.configuration === true);
            }));
            return reqRole ? true : false;
        });
        this.getCurrentRole = (/**
         * @return {?}
         */
        () => {
            return this.currentRole;
        });
        this.setCurrentRole = (/**
         * @param {?} role
         * @return {?}
         */
        (role) => {
            this.currentRole = role;
        });
    }
    /**
     * @param {?} roleId
     * @param {?} roles
     * @return {?}
     */
    checkRole(roleId, roles) {
        return this.hasRoleAccess(roleId, roles);
    }
    /**
     * @param {?} buttonId
     * @param {?} roles
     * @param {?} access
     * @return {?}
     */
    checkButton(buttonId, roles, access) {
        return this.hasButtonAccess(buttonId, roles, access);
    }
}
TcRolesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TcRolesService.ctorParameters = () => [];
/** @nocollapse */ TcRolesService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcRolesService_Factory() { return new TcRolesService(); }, token: TcRolesService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcRolesService.prototype.currentRole;
    /**
     * @type {?}
     * @private
     */
    TcRolesService.prototype.hasRoleAccess;
    /**
     * @type {?}
     * @private
     */
    TcRolesService.prototype.hasButtonAccess;
    /** @type {?} */
    TcRolesService.prototype.amIConfigurator;
    /** @type {?} */
    TcRolesService.prototype.getCurrentRole;
    /** @type {?} */
    TcRolesService.prototype.setCurrentRole;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtcm9sZXMtc2VydmljZS50cy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90Yy1yb2xlcy1zZXJ2aWNlLnRzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBTzNDLE1BQU0sT0FBTyxjQUFjO0lBRXZCO1FBRVEsZ0JBQVcsR0FBRyxTQUFTLENBQUM7UUFFeEIsa0JBQWE7Ozs7O1FBQUcsQ0FBQyxPQUFlLEVBQUUsS0FBWSxFQUFXLEVBQUU7O2tCQUN6RCxPQUFPLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJOzs7O1lBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQ3BDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxLQUFLLE9BQU8sQ0FBQyxDQUFDO1lBQ2pDLENBQUMsRUFBQztZQUNGLE9BQU8sT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztRQUNsQyxDQUFDLEVBQUE7UUFFTyxvQkFBZTs7Ozs7O1FBQUcsQ0FBQyxRQUFnQixFQUFFLEtBQVksRUFBRSxNQUFnQyxFQUFXLEVBQUU7OztrQkFFaEcsT0FBTyxHQUFHLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSTs7OztZQUFDLFNBQVMsQ0FBQyxFQUFFO2dCQUM5QyxPQUFPLENBQUMsUUFBUSxLQUFLLFNBQVMsQ0FBQyxRQUFRLENBQUMsQ0FBQztZQUMzQyxDQUFDLEVBQUM7WUFDRixJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNaLGtDQUFrQztnQkFDbEMsT0FBTyxJQUFJLENBQUM7YUFDYjtpQkFBTTs7c0JBQ0MsT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSTs7OztnQkFBQyxJQUFJLENBQUMsRUFBRTtvQkFDdEMsT0FBTyxDQUFDLElBQUksQ0FBQyxFQUFFLEtBQUssT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO2dCQUM5QyxDQUFDLEVBQUM7Z0JBQ0YsT0FBTyxPQUFPLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDO2FBQy9CO1FBQ0gsQ0FBQyxFQUFBO1FBVUQsb0JBQWU7Ozs7UUFBRyxDQUFDLEtBQVksRUFBVyxFQUFFOztrQkFDbEMsT0FBTyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSTs7OztZQUFDLElBQUksQ0FBQyxFQUFFO2dCQUNwQyxPQUFPLENBQUMsSUFBSSxDQUFDLGFBQWEsS0FBSyxJQUFJLENBQUMsQ0FBQztZQUN6QyxDQUFDLEVBQUM7WUFDRixPQUFPLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7UUFDbEMsQ0FBQyxFQUFBO1FBQ0QsbUJBQWM7OztRQUFHLEdBQWtCLEVBQUU7WUFDakMsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDO1FBQzVCLENBQUMsRUFBQTtRQUVELG1CQUFjOzs7O1FBQUcsQ0FBQyxJQUFtQixFQUFRLEVBQUU7WUFDM0MsSUFBSSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDNUIsQ0FBQyxFQUFBO0lBL0NlLENBQUM7Ozs7OztJQTJCakIsU0FBUyxDQUFDLE1BQWMsRUFBRSxLQUFZO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0MsQ0FBQzs7Ozs7OztJQUVELFdBQVcsQ0FBQyxRQUFnQixFQUFFLEtBQVksRUFBRSxNQUFnQztRQUN4RSxPQUFPLElBQUksQ0FBQyxlQUFlLENBQUMsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztJQUN6RCxDQUFDOzs7WUF0Q0osVUFBVSxTQUFDO2dCQUNSLFVBQVUsRUFBRSxNQUFNO2FBQ3JCOzs7Ozs7Ozs7O0lBS0cscUNBQWdDOzs7OztJQUVoQyx1Q0FLQzs7Ozs7SUFFRCx5Q0FjQzs7SUFVRCx5Q0FLQzs7SUFDRCx3Q0FFQzs7SUFFRCx3Q0FFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Um9sZXMsIFJvdXRlQWNjZXNzQ29udHJvbENvbmZpZ30gZnJvbSAnLi4vbW9kZWxzL3RjLWdyb3Vwcy1kYXRhJztcbmltcG9ydCB7IFJvbGVBdHRyaWJ1dGUgfSBmcm9tICdAdGliY28tdGNzdGsvdGMtY29yZS1saWInO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRjUm9sZXNTZXJ2aWNlIHtcbiAgICBcbiAgICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gICAgcHJpdmF0ZSBjdXJyZW50Um9sZSA9IHVuZGVmaW5lZDtcblxuICAgIHByaXZhdGUgaGFzUm9sZUFjY2VzcyA9IChyb2xlUmVxOiBzdHJpbmcsIHJvbGVzOiBSb2xlcyk6IGJvb2xlYW4gPT4ge1xuICAgICAgICBjb25zdCByZXFSb2xlID0gcm9sZXMucm9sZXMuZmluZChyb2xlID0+IHtcbiAgICAgICAgICAgIHJldHVybiAocm9sZS5pZCA9PT0gcm9sZVJlcSk7XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiByZXFSb2xlID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgaGFzQnV0dG9uQWNjZXNzID0gKGJ1dHRvbklkOiBzdHJpbmcsIHJvbGVzOiBSb2xlcywgYWNjZXNzOiBSb3V0ZUFjY2Vzc0NvbnRyb2xDb25maWcpOiBib29sZWFuID0+IHtcbiAgICAgIC8vIGNoZWNrIHdoaWNoIHJvbGUgcmVxdWlyZWRcbiAgICAgIGNvbnN0IHJlcVJvbGUgPSBhY2Nlc3MuYnV0dG9ucy5maW5kKGJ1dHRvblJlYyA9PiB7XG4gICAgICAgIHJldHVybiAoYnV0dG9uSWQgPT09IGJ1dHRvblJlYy5idXR0b25JZCk7XG4gICAgICB9KTtcbiAgICAgIGlmICghcmVxUm9sZSkge1xuICAgICAgICAvLyBub3RoaW5nIGRlZmluZWQgc28gcmV0dXJuIHRydWU7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc3QgaGFzUm9sZSA9IHJvbGVzLnJvbGVzLmZpbmQocm9sZSA9PiB7XG4gICAgICAgICAgcmV0dXJuIChyb2xlLmlkID09PSByZXFSb2xlLnJlcXVpcmVkUm9sZUlkKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBoYXNSb2xlID8gdHJ1ZSA6IGZhbHNlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNoZWNrUm9sZShyb2xlSWQ6IHN0cmluZywgcm9sZXM6IFJvbGVzKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc1JvbGVBY2Nlc3Mocm9sZUlkLCByb2xlcyk7XG4gICAgfVxuXG4gICAgY2hlY2tCdXR0b24oYnV0dG9uSWQ6IHN0cmluZywgcm9sZXM6IFJvbGVzLCBhY2Nlc3M6IFJvdXRlQWNjZXNzQ29udHJvbENvbmZpZyk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5oYXNCdXR0b25BY2Nlc3MoYnV0dG9uSWQsIHJvbGVzLCBhY2Nlc3MpO1xuICAgIH1cblxuICAgIGFtSUNvbmZpZ3VyYXRvciA9IChyb2xlczogUm9sZXMpOiBib29sZWFuID0+IHtcbiAgICAgICAgY29uc3QgcmVxUm9sZSA9IHJvbGVzLnJvbGVzLmZpbmQocm9sZSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gKHJvbGUuY29uZmlndXJhdGlvbiA9PT0gdHJ1ZSk7XG4gICAgICAgIH0pXG4gICAgICAgIHJldHVybiByZXFSb2xlID8gdHJ1ZSA6IGZhbHNlO1xuICAgIH1cbiAgICBnZXRDdXJyZW50Um9sZSA9ICgpOiBSb2xlQXR0cmlidXRlID0+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudFJvbGU7XG4gICAgfVxuXG4gICAgc2V0Q3VycmVudFJvbGUgPSAocm9sZTogUm9sZUF0dHJpYnV0ZSk6IHZvaWQgPT4ge1xuICAgICAgICB0aGlzLmN1cnJlbnRSb2xlID0gcm9sZTtcbiAgICB9XG59XG4iXX0=