/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { forkJoin } from 'rxjs';
import { LiveAppsService } from './live-apps.service';
import { TcCaseDataService } from './tc-case-data.service';
import { map, tap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { StateTrackerData, StateTracker, TrackerState, StateAuditEventList } from '../models/tc-case-states';
import { DomSanitizer } from '@angular/platform-browser';
import { Location } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./live-apps.service";
import * as i3 from "./tc-case-data.service";
import * as i4 from "@angular/platform-browser";
import * as i5 from "@angular/common";
/** @type {?} */
const MILESTONE_SVG = {
    END_SECTION_COMPLETED_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z"/>\n' +
        '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>\n',
    END_SECTION_INPROGESS_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z"/>\n' +
        '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>\n',
    END_SECTION_PENDING_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z"/>\n' +
        '    <text class="pending-text" fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>\n',
    FIRST_SECTION_COMPLETED_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
        '<path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z"/>\n' +
        '<text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '    <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '</text>\n' +
        '</svg>\n',
    FIRST_SECTION_INPROGRESS_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z"/>\n' +
        '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>',
    FIRST_SECTION_PENDING_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z"/>\n' +
        '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>\n',
    MIDDLE_SECTION_COMPLETED_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="164" height="36" viewBox="0 0 164 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z"/>\n' +
        '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>\n',
    MIDDLE_SECTION_INPROGRESS_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="164" height="36" viewBox="0 0 164 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z"/>\n' +
        '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>\n',
    MIDDLE_SECTION_PENDING_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="164" height="36" viewBox="0 0 164 36">\n' +
        '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z"/>\n' +
        '    <text class="pending-text" fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
        '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
        '    </text>\n' +
        '</svg>\n'
};
export class TcCaseStatesService {
    /**
     * @param {?} http
     * @param {?} liveAppsService
     * @param {?} caseDataService
     * @param {?} sanitizer
     * @param {?} location
     */
    constructor(http, liveAppsService, caseDataService, sanitizer, location) {
        this.http = http;
        this.liveAppsService = liveAppsService;
        this.caseDataService = caseDataService;
        this.sanitizer = sanitizer;
        this.location = location;
        this.getTrackerData = (/**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} appId
         * @return {?}
         */
        (caseRef, sandboxId, appId) => {
            // merge the result of these three API calls into one object
            /** @type {?} */
            const caseState$ = this.caseDataService.getCaseState(caseRef, sandboxId);
            /** @type {?} */
            const possibleStates$ = this.liveAppsService.getCaseTypeStates(sandboxId, appId, 100);
            /** @type {?} */
            const stateAudit$ = this.getCaseStateAudit(caseRef, sandboxId);
            return forkJoin([caseState$, possibleStates$, stateAudit$]).pipe(map((/**
             * @param {?} resultArr
             * @return {?}
             */
            resultArr => {
                return new StateTrackerData().deserialize({ possibleStates: resultArr[1], currentState: resultArr[0], caseAudit: resultArr[2].auditEvents });
            })));
        });
        this.buildTracker = (/**
         * @param {?} trackerData
         * @return {?}
         */
        (trackerData) => {
            /** @type {?} */
            const tracker = new StateTracker();
            tracker.states = [];
            if (trackerData.caseAudit.length <= 0) {
                // if no audit it has likely been deleted and we cannot create a milestone trailer
                tracker.valid = false;
            }
            else {
                // work out the status of each state
                // possible states: 'pending', 'inprogress', 'completed'
                trackerData.possibleStates.states.forEach((/**
                 * @param {?} state
                 * @return {?}
                 */
                state => {
                    /** @type {?} */
                    const stateLabel = state.label;
                    /** @type {?} */
                    const stateName = state.value;
                    /** @type {?} */
                    const trackerState = new TrackerState();
                    trackerState.phase = '';
                    trackerState.previousPhase = '';
                    // no specific name coming from API so use label.
                    trackerState.name = state.label;
                    trackerState.label = state.label;
                    trackerState.isTerminal = state.isTerminal ? state.isTerminal : false;
                    // find last event for this state
                    /** @type {?} */
                    const reversedEvents = [];
                    Object.assign(reversedEvents, trackerData.caseAudit);
                    reversedEvents.reverse();
                    /** @type {?} */
                    const idx = reversedEvents.findIndex((/**
                     * @param {?} auditEvent
                     * @return {?}
                     */
                    auditEvent => auditEvent.caseState.value === state.value));
                    /** @type {?} */
                    const origIdx = (trackerData.caseAudit.length - 1) - idx;
                    /** @type {?} */
                    let thisEvent;
                    if (idx === -1) {
                        // no audit events so we haven't reached this state yet
                        trackerState.status = 'pending';
                    }
                    else {
                        thisEvent = trackerData.caseAudit[origIdx];
                        trackerState.user = thisEvent.principalName ? thisEvent.principalName.value : 'system';
                        trackerState.changed = thisEvent.creationTime ? thisEvent.creationTime.value : '';
                        trackerState.phase = thisEvent.phaseLabel ? thisEvent.phaseLabel.value : undefined;
                        trackerState.previousPhase = thisEvent.previousPhaseLabel ? thisEvent.previousPhaseLabel.value : undefined;
                        if (state.isTerminal) {
                            // if we have audit for this state and it is terminal it must be completed
                            trackerState.status = 'completed';
                        }
                        else if ((trackerData.caseAudit.length - 1) === origIdx) {
                            // if this is the last audit entry then it is in progress
                            trackerState.status = 'inprogress';
                        }
                        else {
                            // otherwise it must be completed
                            trackerState.status = 'completed';
                        }
                    }
                    tracker.states.push(trackerState);
                    tracker.valid = true;
                }));
            }
            return tracker;
        });
        this.getTracker = (/**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} appId
         * @return {?}
         */
        (caseRef, sandboxId, appId) => {
            /** @type {?} */
            const tracker$ = this.getTrackerData(caseRef, sandboxId, appId).pipe(map((/**
             * @param {?} trackerData
             * @return {?}
             */
            trackerData => {
                return this.buildTracker(trackerData);
            })));
            return tracker$;
        });
    }
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @return {?}
     */
    getCaseStateAuditWithTerminal(caseRef, sandboxId, appId) {
        /** @type {?} */
        const possibleStates$ = this.liveAppsService.getCaseTypeStates(sandboxId, appId, 100);
        /** @type {?} */
        const caseStateAudit$ = this.getCaseStateAudit(caseRef, sandboxId);
        return forkJoin([possibleStates$, caseStateAudit$]).pipe(map((/**
         * @param {?} resultArr
         * @return {?}
         */
        resultArr => {
            /** @type {?} */
            const possibleStates = resultArr[0];
            /** @type {?} */
            const caseStateAudit = resultArr[1];
            // mark if any are terminal states
            caseStateAudit.auditEvents.forEach((/**
             * @param {?} auditEvent
             * @return {?}
             */
            auditEvent => {
                /** @type {?} */
                const foundState = possibleStates.states.find((/**
                 * @param {?} state
                 * @return {?}
                 */
                state => state.value === auditEvent.caseState.value));
                auditEvent.isTerminal = foundState.isTerminal ? foundState.isTerminal : false;
            }));
            return caseStateAudit;
        })));
    }
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @return {?}
     */
    getCaseStateAudit(caseRef, sandboxId) {
        /** @type {?} */
        const url = '/event/v1/auditEvents?$sandbox=' + sandboxId
            + '&$filter=type eq \'casestate\''
            + ' and id eq \'' + caseRef + '\'';
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} caseaudit
         * @return {?}
         */
        caseaudit => new StateAuditEventList().deserialize(caseaudit))));
    }
    /**
     * @param {?} stateLabel
     * @param {?} labelClass
     * @param {?} bgClass
     * @param {?} svgFileName
     * @return {?}
     */
    getMilestoneSectionSvg(stateLabel, labelClass, bgClass, svgFileName) {
        /*return this.liveAppsService.getIconSVGText(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/icons/milestones/' + svgFileName)).pipe(
          map(svgcontents => {
            let updatedsvg = svgcontents.replace('{{milestoneLabel}}', stateLabel);
            updatedsvg = updatedsvg.replace('{{milestoneBgClass}}', bgClass);
            updatedsvg = updatedsvg.replace('{{milestoneLabelClass}}', labelClass);
            const newval = this.sanitizer.bypassSecurityTrustHtml(updatedsvg);
            return newval;
          })
        );*/
        // convert svgFileName to the inline property name
        svgFileName = svgFileName.toUpperCase();
        /** @type {?} */
        const regEx = /-|\./gi;
        svgFileName = svgFileName.replace(regEx, '_');
        /** @type {?} */
        const svgcontents = MILESTONE_SVG[svgFileName];
        if (svgcontents) {
            /** @type {?} */
            let updatedsvg = svgcontents.replace('{{milestoneLabel}}', stateLabel);
            updatedsvg = updatedsvg.replace('{{milestoneBgClass}}', bgClass);
            updatedsvg = updatedsvg.replace('{{milestoneLabelClass}}', labelClass);
            /** @type {?} */
            const newval = this.sanitizer.bypassSecurityTrustHtml(updatedsvg);
            return newval;
        }
        else {
            return undefined;
        }
    }
}
TcCaseStatesService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TcCaseStatesService.ctorParameters = () => [
    { type: HttpClient },
    { type: LiveAppsService },
    { type: TcCaseDataService },
    { type: DomSanitizer },
    { type: Location }
];
/** @nocollapse */ TcCaseStatesService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcCaseStatesService_Factory() { return new TcCaseStatesService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LiveAppsService), i0.ɵɵinject(i3.TcCaseDataService), i0.ɵɵinject(i4.DomSanitizer), i0.ɵɵinject(i5.Location)); }, token: TcCaseStatesService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcCaseStatesService.prototype.getTrackerData;
    /**
     * @type {?}
     * @private
     */
    TcCaseStatesService.prototype.buildTracker;
    /** @type {?} */
    TcCaseStatesService.prototype.getTracker;
    /**
     * @type {?}
     * @private
     */
    TcCaseStatesService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TcCaseStatesService.prototype.liveAppsService;
    /**
     * @type {?}
     * @private
     */
    TcCaseStatesService.prototype.caseDataService;
    /**
     * @type {?}
     * @private
     */
    TcCaseStatesService.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    TcCaseStatesService.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,