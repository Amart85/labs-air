/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { HttpClient } from '@angular/common/http';
import { CaseInfo, CaseInfoList, CaseTypesList, CaseTypeStatesList, CaseList, UserInfo, NotesList, Note, ThreadList, NoteThread, NotificationList, CaseSearchResults, CaseTypeStatesListList } from '../models/liveappsdata';
import { SharedStateContent, TcSharedStateService, TcCoreCommonFunctions, Claim, SandboxList } from '@tibco-tcstk/tc-core-lib';
import { Groups } from '../models/tc-groups-data';
import { debounceTime, distinctUntilChanged, map, shareReplay, switchMap, tap } from 'rxjs/operators';
import { Location } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/common";
import * as i3 from "@tibco-tcstk/tc-core-lib";
export class LiveAppsService {
    /**
     * @param {?} http
     * @param {?} location
     * @param {?} sharedStateService
     */
    constructor(http, location, sharedStateService) {
        this.http = http;
        this.location = location;
        this.sharedStateService = sharedStateService;
        // these are 'per session' caches. They won't time out unless explicitly cleared or browser is refreshed
        this.claimsCacheMap = new Map();
        this.userInfoCacheMap = new Map();
        this.caseTypesCacheMap = new Map();
        this.iconSVGTextCacheMap = new Map();
    }
    /**
     * @return {?}
     */
    getSandboxes() {
        /** @type {?} */
        const url = '/organisation/v1/sandboxes';
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} sandboxList
         * @return {?}
         */
        sandboxList => new SandboxList().deserialize(sandboxList))));
    }
    /**
     * @param {?} sandboxId
     * @param {?} appIds
     * @param {?} top
     * @param {?} useCache
     * @return {?}
     */
    getApplications(sandboxId, appIds, top, useCache) {
        /** @type {?} */
        const select = 'b';
        /** @type {?} */
        let url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
        if (appIds && appIds.length > 0) {
            url = url + '&$filter=applicationId in(' + appIds.toString() + ') and isCase eq TRUE';
        }
        // note: since this is cached it will require a reload to see new apps
        /** @type {?} */
        let headers;
        if (useCache) {
            headers = new HttpHeaders().set('cacheResponse', 'true');
        }
        else {
            headers = new HttpHeaders();
        }
        return this.http.get(url, { headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} casetypes
         * @return {?}
         */
        casetypes => {
            if (appIds && appIds.length > 0) {
                // This is to workaround a bug where non case type types are returned when > 1 appId
                /** @type {?} */
                const tmpCaseTypes = new CaseTypesList().deserialize(casetypes);
                /** @type {?} */
                const filteredCaseTypes = new CaseTypesList().deserialize({ casetypes: [] });
                tmpCaseTypes.casetypes.forEach((/**
                 * @param {?} ctype
                 * @return {?}
                 */
                ctype => {
                    if (ctype.id === '1') {
                        filteredCaseTypes.casetypes.push(ctype);
                    }
                }));
                return filteredCaseTypes;
            }
            else {
                return new CaseTypesList().deserialize(casetypes);
            }
        })));
    }
    /**
     * @return {?}
     */
    getClaims() {
        /** @type {?} */
        const url = '/organisation/v1/claims';
        /** @type {?} */
        const headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(url, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} claim
         * @return {?}
         */
        claim => new Claim().deserialize(claim))));
    }
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} skip
     * @param {?} top
     * @return {?}
     */
    getCases(sandboxId, appId, typeId, skip, top) {
        /** @type {?} */
        const url = '/case/v1/cases' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '
            + appId + ' and typeId eq ' + typeId + '&$skip=' + skip + '&$top=' + top;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} caseinfos
         * @return {?}
         */
        caseinfos => new CaseInfoList().deserialize(caseinfos))));
    }
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @return {?}
     */
    getCasesCount(sandboxId, appId, typeId) {
        /** @type {?} */
        const url = '/case/v1/cases' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '
            + appId + ' and typeId eq ' + typeId + '&$count=true';
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} casecount
         * @return {?}
         */
        casecount => casecount.toString())));
    }
    /**
     * @param {?} sandboxId
     * @param {?} caseRef
     * @return {?}
     */
    getCaseByRef(sandboxId, caseRef) {
        /** @type {?} */
        const url = '/case/v1/cases/' + caseRef
            + '?$sandbox=' + sandboxId;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} caseinfo
         * @return {?}
         */
        caseinfo => new CaseInfo().deserialize(caseinfo))));
    }
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @return {?}
     */
    getCase(caseRef, sandboxId, appId, typeId) {
        /** @type {?} */
        const url = '/case/v1/cases/' + caseRef + '/' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '
            + appId + ' and typeId eq ' + typeId + '&$select=uc, m';
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} caseinfo
         * @return {?}
         */
        caseinfo => new CaseInfo().deserialize(caseinfo))));
    }
    /**
     * @param {?} terms
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} skip
     * @param {?} top
     * @param {?} stateId
     * @return {?}
     */
    caseSearch(terms, sandboxId, appId, typeId, skip, top, stateId) {
        return terms
            .pipe(debounceTime(500), distinctUntilChanged(), switchMap((/**
         * @param {?} term
         * @return {?}
         */
        term => this.caseSearchEntries(term, sandboxId, appId, typeId, false, skip, top, stateId))));
    }
    /**
     * @param {?} term
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} force
     * @param {?} skip
     * @param {?} top
     * @param {?} stateId
     * @return {?}
     */
    caseSearchEntries(term, sandboxId, appId, typeId, force, skip, top, stateId) {
        /** @type {?} */
        let url = '/case/v1/cases' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '
            + appId + ' and typeId eq ' + typeId;
        if (stateId) {
            url = url + ' and stateId eq ' + stateId;
        }
        url = url + '&$skip=' + skip + '&$top=' + top
            + '&$select=cr';
        if (term || (!term && !force)) {
            url = url + '&$search=' + term;
        }
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} caseinfos
         * @return {?}
         */
        caseinfos => {
            /** @type {?} */
            const caserefs = [];
            /** @type {?} */
            const caseinfolist = new CaseInfoList().deserialize(caseinfos);
            caseinfolist.caseinfos.forEach((/**
             * @param {?} caseinfo
             * @return {?}
             */
            caseinfo => {
                caserefs.push(caseinfo.caseReference);
            }));
            return new CaseSearchResults().deserialize({ caserefs: caserefs, searchString: term });
        })));
    }
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} top
     * @return {?}
     */
    getCaseTypes(sandboxId, appId, top) {
        /** @type {?} */
        const select = 'b,s,sa,a';
        /** @type {?} */
        let url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
        if (appId != null) {
            url = url + '&$filter=applicationId eq ' + appId;
        }
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} casetypes
         * @return {?}
         */
        casetypes => new CaseTypesList().deserialize(casetypes))));
    }
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} top
     * @return {?}
     */
    getCaseTypeSchema(sandboxId, appId, top) {
        // https://eu.liveapps.cloud.tibco.com/case/v1/types?$sandbox=25&&$filter=applicationName eq 'Customer Complaint'&$select=b,js,c,ac
        /** @type {?} */
        const select = 'b,js,c,ac,a';
        /** @type {?} */
        let url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
        if (appId != null) {
            url = url + '&$filter=applicationId eq ' + appId;
        }
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} casetypes
         * @return {?}
         */
        casetypes => new CaseTypesList().deserialize(casetypes))));
    }
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} top
     * @return {?}
     */
    getCaseTypeStates(sandboxId, appId, top) {
        /** @type {?} */
        const select = 's';
        /** @type {?} */
        let url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
        if (appId != null) {
            url = url + '&$filter=applicationId eq ' + appId;
        }
        /** @type {?} */
        const headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(url, { headers: headers })
            // return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} casetypestates
         * @return {?}
         */
        casetypestates => {
            // const x = new CaseTypeStatesList().deserialize(casetypestates[0].states);
            // return x;
            // const x = new CaseTypeStatesList().deserialize(casetypestates[0].states);
            // return x;
            /** @type {?} */
            const casetypelist = new CaseTypeStatesListList().deserialize(casetypestates);
            /** @type {?} */
            let states;
            casetypelist.casetypes.forEach((/**
             * @param {?} casetype
             * @return {?}
             */
            (casetype) => {
                if (casetype.states !== undefined) {
                    states = new CaseTypeStatesList().deserialize(casetype.states);
                }
            }));
            return states;
        })));
    }
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} top
     * @return {?}
     */
    getCaseTypeBasicInfo(sandboxId, appId, typeId, top) {
        /** @type {?} */
        const select = 'b';
        /** @type {?} */
        let url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
        if (appId != null) {
            url = url + '&$filter=applicationId eq ' + appId;
        }
        if (!this.caseTypesCacheMap.get(url)) {
            /** @type {?} */
            const cacheEntry$ = this.getCaseTypeBasicInfoCached(url, typeId)
                .pipe(shareReplay(1));
            this.caseTypesCacheMap.set(url, cacheEntry$);
        }
        return this.caseTypesCacheMap.get(url);
    }
    /**
     * @private
     * @param {?} url
     * @param {?} typeId
     * @return {?}
     */
    getCaseTypeBasicInfoCached(url, typeId) {
        /** @type {?} */
        const headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(url, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} casetypes
         * @return {?}
         */
        casetypes => {
            /** @type {?} */
            const caseTypesList = new CaseTypesList().deserialize(casetypes);
            /** @type {?} */
            let requestedType;
            caseTypesList.casetypes.forEach((/**
             * @param {?} casetype
             * @return {?}
             */
            (casetype) => {
                if (casetype.id === typeId) {
                    requestedType = casetype;
                }
            }));
            return requestedType;
        })));
    }
    /**
     * @param {?} url
     * @return {?}
     */
    clearFromIconSVGTextCache(url) {
        if (this.iconSVGTextCacheMap.get(url)) {
            this.iconSVGTextCacheMap.delete(url);
        }
    }
    /**
     * @param {?} url
     * @return {?}
     */
    getIconSVGText(url) {
        // todo: revisit the base href issue
        if (url.substr(0, 2) === '//') {
            url = url.substr(1, url.length - 1);
        }
        if (!this.iconSVGTextCacheMap.get(url)) {
            // const fixedUrl = window.location.protocol + '//' + window.location.host  + url;
            /** @type {?} */
            const cacheEntry$ = this.getIconSVGTextCache(url)
                .pipe(shareReplay(1));
            this.iconSVGTextCacheMap.set(url, cacheEntry$);
        }
        return this.iconSVGTextCacheMap.get(url);
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    getIconSVGTextCache(url) {
        /** @type {?} */
        const headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(url, { responseType: 'text', headers: headers })
            .pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        val => {
            /** @type {?} */
            const svgContents = val.toString();
            return svgContents;
        })));
    }
    /**
     * @private
     * @param {?} casesContent
     * @param {?} caseRef
     * @param {?} toggle
     * @return {?}
     */
    updateCasesRecord(casesContent, caseRef, toggle) {
        /** @type {?} */
        const sharedStateContent = new SharedStateContent().deserialize(casesContent);
        /** @type {?} */
        const casesRec = JSON.parse(sharedStateContent.json);
        /** @type {?} */
        let existing = false;
        // check if already exists
        if (caseRef === '-1') {
            // clear list
            casesRec.caseRefs.length = 0;
        }
        else {
            if (casesRec.caseRefs.indexOf(caseRef) !== -1) {
                // remove it if it is already in the array
                casesRec.caseRefs.splice(casesRec.caseRefs.indexOf(caseRef), 1);
                existing = true;
            }
            if (!toggle || existing === false) {
                // only add it if we are not in toggle mode (favorites) or if the caseRef didnt already exist in the list
                // now add case to front of array
                casesRec.caseRefs.unshift(caseRef);
                // check if we are > max size
                if (casesRec.maxSize !== -1 && casesRec.caseRefs.length > casesRec.maxSize) {
                    // remove oldest entry
                    casesRec.caseRefs.pop();
                }
            }
        }
        sharedStateContent.json = TcCoreCommonFunctions.escapeString(JSON.stringify(casesRec));
        return sharedStateContent;
    }
    /**
     * @private
     * @param {?} caseRef
     * @param {?} maxSize
     * @return {?}
     */
    newCasesRecord(caseRef, maxSize) {
        /** @type {?} */
        const casesRec = new CaseList();
        casesRec.maxSize = maxSize;
        if (caseRef === '-1') {
            casesRec.caseRefs = [];
        }
        else {
            casesRec.caseRefs = [caseRef];
        }
        casesRec.uniqueKey = 'caseReference';
        /** @type {?} */
        const sharedStateContent = new SharedStateContent();
        sharedStateContent.json = TcCoreCommonFunctions.escapeString(JSON.stringify(casesRec));
        return sharedStateContent;
    }
    /**
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    getRecentCases(uiAppId, sandboxId) {
        /** @type {?} */
        const ssName = uiAppId + '.recentcases.tibcolabs.client.context.PRIVATE';
        return this.getSSCasesList(ssName, sandboxId);
    }
    /**
     * @private
     * @param {?} ssName
     * @param {?} sandboxId
     * @return {?}
     */
    getSSCasesList(ssName, sandboxId) {
        return this.sharedStateService.getSharedState(ssName, 'PRIVATE', false, false)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} sharedStateList
         * @return {?}
         */
        sharedStateList => {
            if (sharedStateList.sharedStateEntries.length > 0) {
                return new CaseList().deserialize(JSON.parse(sharedStateList.sharedStateEntries[0].content.json));
            }
            else {
                return new CaseList();
            }
        })));
    }
    /**
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    unsetRecentCase(caseRef, uiAppId, sandboxId) {
        // NOTE: Use '-1' as caseRef to clear recent cases list
        /** @type {?} */
        const ssName = uiAppId + '.recentcases.tibcolabs.client.context.PRIVATE';
        this.setCasesRecord(ssName, caseRef, uiAppId, sandboxId, 10, true);
    }
    /**
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    setRecentCase(caseRef, uiAppId, sandboxId) {
        // NOTE: Use '-1' as caseRef to clear recent cases list
        /** @type {?} */
        const ssName = uiAppId + '.recentcases.tibcolabs.client.context.PRIVATE';
        this.setCasesRecord(ssName, caseRef, uiAppId, sandboxId, 10, false);
    }
    /**
     * @private
     * @param {?} ssName
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @param {?} maxSize
     * @param {?} toggle
     * @return {?}
     */
    setCasesRecord(ssName, caseRef, uiAppId, sandboxId, maxSize, toggle) {
        // get cases list from shared state if any
        // update cases data removing oldest if > maxsize
        // set shared state
        /** @type {?} */
        let casesEntry;
        this.sharedStateService.getSharedState(ssName, 'PRIVATE', false, false)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} sharedStateList
         * @return {?}
         */
        sharedStateList => {
            casesEntry = sharedStateList.sharedStateEntries[0] || undefined;
            /** @type {?} */
            let content;
            if (casesEntry) {
                content = this.updateCasesRecord(casesEntry.content, caseRef, toggle);
                casesEntry.content = content;
                sharedStateList.sharedStateEntries[0] = casesEntry;
                this.sharedStateService.updateSharedState(sharedStateList.sharedStateEntries).subscribe();
            }
            else {
                content = this.newCasesRecord(caseRef, maxSize);
                this.sharedStateService.createSharedState(ssName, 'PRIVATE', '', sandboxId, undefined, undefined, undefined, content).subscribe();
            }
            return casesEntry;
        }))).subscribe(null, (/**
         * @param {?} error
         * @return {?}
         */
        error => console.log('Unable to set recent cases: ' + error)));
    }
    /**
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    getFavoriteCases(uiAppId, sandboxId) {
        /** @type {?} */
        const ssName = uiAppId + '.favoritecases.tibcolabs.client.context.PRIVATE';
        return this.sharedStateService.getSharedState(ssName, 'PRIVATE', false, false)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} sharedStateList
         * @return {?}
         */
        sharedStateList => {
            if (sharedStateList.sharedStateEntries.length > 0) {
                return new CaseList().deserialize(JSON.parse(sharedStateList.sharedStateEntries[0].content.json));
            }
            else {
                return new CaseList();
            }
        })));
    }
    /**
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    setFavoriteCase(caseRef, uiAppId, sandboxId) {
        // NOTE: Use '-1' as caseRef to clear recent cases list
        /** @type {?} */
        const ssName = uiAppId + '.favoritecases.tibcolabs.client.context.PRIVATE';
        this.setCasesRecord(ssName, caseRef, uiAppId, sandboxId, -1, true);
    }
    /**
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    isFavoriteCase(caseRef, uiAppId, sandboxId) {
        /** @type {?} */
        const ssName = uiAppId + '.favoritecases.tibcolabs.client.context.PRIVATE';
        return this.getSSCasesList(ssName, sandboxId)
            .pipe(map((/**
         * @param {?} caselist
         * @return {?}
         */
        caselist => {
            return caselist.caseRefs ? (caselist.caseRefs.indexOf(caseRef) !== -1) : false;
        })));
    }
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} processId
     * @param {?} caseReference
     * @param {?} data
     * @return {?}
     */
    runProcess(sandboxId, appId, processId, caseReference, data) {
        /** @type {?} */
        const url = '/process/v1/processes';
        // convert data to an escaped JSON string
        /** @type {?} */
        let dataJson;
        if (data) {
            dataJson = TcCoreCommonFunctions.escapeString(JSON.stringify(data));
        }
        else {
            dataJson = TcCoreCommonFunctions.escapeString(JSON.stringify({}));
        }
        /** @type {?} */
        const body = {
            'id': processId,
            'sandboxId': sandboxId,
            'applicationId': appId,
            'data': dataJson
        };
        if (caseReference) {
            body['caseReference'] = caseReference;
        }
        /** @type {?} */
        const bodyStr = JSON.stringify(body);
        /** @type {?} */
        const headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.post(url, bodyStr, { headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} response
         * @return {?}
         */
        response => response)));
    }
    // Since we call get userinfo a lot - and the data doesn't tend to change - I will cache it for the session
    /**
     * @param {?} userId
     * @return {?}
     */
    getUserInfo(userId) {
        /** @type {?} */
        const url = '/organisation/v1/users/' + userId;
        if (!this.userInfoCacheMap.get(userId)) {
            /** @type {?} */
            const cacheEntry$ = this.getUserCached(url)
                .pipe(shareReplay(1));
            this.userInfoCacheMap.set(userId, cacheEntry$);
        }
        return this.userInfoCacheMap.get(userId);
    }
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    getUserCached(url) {
        /** @type {?} */
        const headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(url, { headers: headers })
            .pipe(map((/**
         * @param {?} userinfo
         * @return {?}
         */
        userinfo => new UserInfo().deserialize(userinfo))));
    }
    /* notes service */
    /**
     * @param {?} relatedItemType
     * @param {?} itemTypeId
     * @param {?} skip
     * @param {?} top
     * @return {?}
     */
    getThreads(relatedItemType, itemTypeId, skip, top) {
        // https://liveapps.tenant-integration.tcie.pro/collaboration/notes?$relatedItemCollection=CASE_APP_15441&$orderby=createdDate%20ASC
        /** @type {?} */
        const url = '/collaboration/v1/notes?$relatedItemCollection=' + relatedItemType + '_' + itemTypeId
            + '&$orderby=createdDate desc'
            + '&$top=' + top + '&$skip=' + skip;
        return this.http.get(url)
            .pipe(map((/**
         * @param {?} notes
         * @return {?}
         */
        notes => {
            /** @type {?} */
            const returnedNotes = new NotesList().deserialize(notes);
            /** @type {?} */
            const threadList = new ThreadList();
            threadList.threads = [];
            // create threads
            returnedNotes.notes.forEach((/**
             * @param {?} note
             * @return {?}
             */
            function (note) {
                if (note.level === 1) {
                    /** @type {?} */
                    const noteThread = new NoteThread(note.thread.id, false, false, false, undefined, [], note);
                    // get other threads for this id
                    returnedNotes.notes.forEach((/**
                     * @param {?} threadNote
                     * @return {?}
                     */
                    function (threadNote) {
                        if (threadNote.level > 1 && threadNote.threadId === note.thread.id) {
                            // add to the thread
                            noteThread.thread.push(threadNote);
                        }
                    }));
                    threadList.threads.push(noteThread);
                }
            }));
            return threadList;
        })));
    }
    /**
     * @param {?} collectionIds
     * @return {?}
     */
    getNotesForCollections(collectionIds) {
        if (collectionIds) {
            /** @type {?} */
            const url = '/collaboration/v1/notes?$relatedItemCollection=' + collectionIds +
                '&$orderby=createdDate ASC';
            return this.http.get(url)
                .pipe(map((/**
             * @param {?} notes
             * @return {?}
             */
            notes => new NotesList().deserialize(notes))));
        }
    }
    /**
     * @return {?}
     */
    deleteAllNotes() {
    }
    /**
     * @param {?} note
     * @param {?} noteId
     * @return {?}
     */
    updateNote(note, noteId) {
        /** @type {?} */
        const url = '/collaboration/v1/notes/' + noteId;
        /** @type {?} */
        const body = note;
        /** @type {?} */
        const bodyStr = JSON.stringify(body);
        /** @type {?} */
        const headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.put(url, bodyStr, { headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} result
         * @return {?}
         */
        result => new Note().deserialize(result))));
    }
    /**
     * @param {?} relatedItemType
     * @param {?} uiAppSource
     * @param {?} relatedItemId
     * @param {?} notificationLabel
     * @param {?} notificationUrl
     * @param {?} title
     * @param {?} noteText
     * @return {?}
     */
    createNote(relatedItemType, uiAppSource, relatedItemId, notificationLabel, notificationUrl, title, noteText) {
        /** @type {?} */
        const url = '/collaboration/v1/notes';
        /** @type {?} */
        const note = new Note().deserialize({
            attributes: [],
            notificationLabel: notificationLabel,
            notificationUrl: notificationUrl,
            text: noteText,
            title: title
        });
        /** @type {?} */
        const body = {
            note: note,
            relatedItemCollection: [
                (relatedItemType + '_' + relatedItemId)
            ],
            relatedItemId: relatedItemId,
            relatedItemType: uiAppSource,
            roles: undefined
        };
        /** @type {?} */
        const bodyStr = JSON.stringify(body);
        /** @type {?} */
        const headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.post(url, bodyStr, { headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} result
         * @return {?}
         */
        result => Number(result))));
    }
    /**
     * @param {?} noteId
     * @return {?}
     */
    getNote(noteId) {
        /** @type {?} */
        const url = '/collaboration/v1/notes/' + noteId;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} note
         * @return {?}
         */
        note => new Note().deserialize(note))));
    }
    /**
     * @param {?} relatedItemType
     * @param {?} relatedItemId
     * @param {?} threadId
     * @return {?}
     */
    getThread(relatedItemType, relatedItemId, threadId) {
        /** @type {?} */
        const url = '/collaboration/v1/notes/?$relatedItemType=' + relatedItemType
            + '&relatedItemId=' + relatedItemId
            + '&filter=threadId=' + threadId
            + '&orderby=createdDate ASC';
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} notes
         * @return {?}
         */
        notes => new NotesList().deserialize(notes))));
    }
    /**
     * @param {?} originalNote
     * @param {?} reply
     * @param {?} noteId
     * @return {?}
     */
    createReplyNote(originalNote, reply, noteId) {
        /** @type {?} */
        const url = '/collaboration/v1/notes/' + noteId;
        /** @type {?} */
        const body = {
            notificationLabel: originalNote.notificationLabel,
            notificationUrl: originalNote.notificationUrl,
            text: reply
        };
        /** @type {?} */
        const bodyStr = JSON.stringify(body);
        /** @type {?} */
        const headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.post(url, bodyStr, { headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} value
         * @return {?}
         */
        value => Number(value))));
    }
    /**
     * @param {?} relatedItemType
     * @param {?} relatedTypeId
     * @return {?}
     */
    subscribeToNotes(relatedItemType, relatedTypeId) {
        /** @type {?} */
        const url = '/collaboration/v1/notifications';
        /** @type {?} */
        const body = {
            topicId: undefined,
            threadId: undefined,
            notifyCollection: {
                collectionName: relatedItemType + '_' + relatedTypeId,
                lifecycledWithType: 'RT_CASE',
                lifecycledWithId: true
            }
        };
        /** @type {?} */
        const bodyStr = JSON.stringify(body);
        /** @type {?} */
        const headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.post(url, bodyStr, { headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))));
    }
    /**
     * @param {?} relatedItemType
     * @param {?} relatedTypeId
     * @param {?} userId
     * @return {?}
     */
    unsubscribeToNotes(relatedItemType, relatedTypeId, userId) {
        /** @type {?} */
        let url = '/collaboration/v1/notifications?$filter=collectionName=';
        url = url + '\'' + relatedItemType + '_' + relatedTypeId + '\' and entityId=' + userId;
        return this.http.delete(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))));
    }
    /**
     * @param {?} relatedItemType
     * @param {?} relatedTypeId
     * @param {?} userId
     * @return {?}
     */
    getNotifications(relatedItemType, relatedTypeId, userId) {
        /** @type {?} */
        const url = '/collaboration/v1/notifications?$filter=collectionName=\'' + relatedItemType + '_' + relatedTypeId
            + '\' and entityId=' + userId;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} value
         * @return {?}
         */
        value => new NotificationList().deserialize(value))));
    }
    /**
     * @param {?} noteId
     * @return {?}
     */
    deleteNote(noteId) {
        /** @type {?} */
        const url = '/collaboration/v1/notes/' + noteId;
        return this.http.delete(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))));
    }
    /* end notes service */
    /**
     * @param {?} sandboxId
     * @param {?} top
     * @param {?} useCache
     * @return {?}
     */
    getGroups(sandboxId, top, useCache) {
        /** @type {?} */
        const url = '/organisation/v1/groups?$sandbox=' + sandboxId + '&$top=' + top;
        /** @type {?} */
        let headers;
        if (useCache) {
            headers = new HttpHeaders().set('cacheResponse', 'true');
        }
        else {
            headers = new HttpHeaders();
        }
        return this.http.get(url, { headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} groups
         * @return {?}
         */
        groups => new Groups().deserialize({ groups: groups }))));
    }
    /**
     * @param {?} sandboxId
     * @param {?} userId
     * @param {?} top
     * @param {?} useCache
     * @return {?}
     */
    getGroupMemberships(sandboxId, userId, top, useCache) {
        /** @type {?} */
        const url = '/organisation/v1/users/' + userId + '/groups' + '?$sandbox=' + sandboxId + '&$top=' + top;
        /** @type {?} */
        let headers;
        if (useCache) {
            headers = new HttpHeaders().set('cacheResponse', 'true');
        }
        else {
            headers = new HttpHeaders();
        }
        return this.http.get(url, { headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} groups
         * @return {?}
         */
        groups => new Groups().deserialize({ groups: groups }))));
    }
}
LiveAppsService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
LiveAppsService.ctorParameters = () => [
    { type: HttpClient },
    { type: Location },
    { type: TcSharedStateService }
];
/** @nocollapse */ LiveAppsService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LiveAppsService_Factory() { return new LiveAppsService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Location), i0.ɵɵinject(i3.TcSharedStateService)); }, token: LiveAppsService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    LiveAppsService.prototype.claimsCacheMap;
    /**
     * @type {?}
     * @private
     */
    LiveAppsService.prototype.userInfoCacheMap;
    /**
     * @type {?}
     * @private
     */
    LiveAppsService.prototype.caseTypesCacheMap;
    /**
     * @type {?}
     * @private
     */
    LiveAppsService.prototype.iconSVGTextCacheMap;
    /**
     * @type {?}
     * @private
     */
    LiveAppsService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LiveAppsService.prototype.location;
    /**
     * @type {?}
     * @private
     */
    LiveAppsService.prototype.sharedStateService;
}
//# sourceMappingURL=data:application/json;base64,