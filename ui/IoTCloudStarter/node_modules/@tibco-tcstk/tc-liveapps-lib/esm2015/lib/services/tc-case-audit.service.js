/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { map, tap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { AuditEventList } from '../models/tc-case-audit';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
export class TcCaseAuditService {
    /**
     * @param {?} http
     */
    constructor(http) {
        this.http = http;
    }
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} startAt
     * @param {?} top
     * @return {?}
     */
    getCaseAudit(caseRef, sandboxId, startAt, top) {
        /** @type {?} */
        const select = 's';
        /** @type {?} */
        let url = '/event/v1/auditEvents?$sandbox=' + sandboxId
            + '&$filter=type eq \'case\''
            + ' and id eq \'' + caseRef + '\'';
        url = (startAt !== undefined) ? (url + '&$startat=' + startAt) : url;
        url = top ? (url + '&$top=' + top) : url;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        val => sessionStorage.setItem('tcsTimestamp', Date.now().toString()))), map((/**
         * @param {?} caseaudit
         * @return {?}
         */
        caseaudit => new AuditEventList().deserialize(caseaudit))));
    }
}
TcCaseAuditService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TcCaseAuditService.ctorParameters = () => [
    { type: HttpClient }
];
/** @nocollapse */ TcCaseAuditService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcCaseAuditService_Factory() { return new TcCaseAuditService(i0.ɵɵinject(i1.HttpClient)); }, token: TcCaseAuditService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcCaseAuditService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtY2FzZS1hdWRpdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90Yy1jYXNlLWF1ZGl0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDOzs7QUFLdkQsTUFBTSxPQUFPLGtCQUFrQjs7OztJQUU3QixZQUFvQixJQUFnQjtRQUFoQixTQUFJLEdBQUosSUFBSSxDQUFZO0lBQUksQ0FBQzs7Ozs7Ozs7SUFFbEMsWUFBWSxDQUFDLE9BQWUsRUFBRSxTQUFpQixFQUFFLE9BQWUsRUFBRSxHQUFXOztjQUM1RSxNQUFNLEdBQUcsR0FBRzs7WUFDZCxHQUFHLEdBQUcsaUNBQWlDLEdBQUcsU0FBUztjQUNuRCwyQkFBMkI7Y0FDM0IsZUFBZSxHQUFHLE9BQU8sR0FBRyxJQUFJO1FBQ3BDLEdBQUcsR0FBRyxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsWUFBWSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDckUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFFekMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7YUFDdEIsSUFBSSxDQUNILEdBQUc7Ozs7UUFBRSxHQUFHLENBQUMsRUFBRSxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUFDLEVBQzFFLEdBQUc7Ozs7UUFBQyxTQUFTLENBQUMsRUFBRSxDQUFDLElBQUksY0FBYyxFQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDOzs7WUFuQkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBTE8sVUFBVTs7Ozs7Ozs7SUFRSixrQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHttYXAsIHRhcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge0F1ZGl0RXZlbnRMaXN0fSBmcm9tICcuLi9tb2RlbHMvdGMtY2FzZS1hdWRpdCc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFRjQ2FzZUF1ZGl0U2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50KSB7IH1cblxuICBwdWJsaWMgZ2V0Q2FzZUF1ZGl0KGNhc2VSZWY6IHN0cmluZywgc2FuZGJveElkOiBudW1iZXIsIHN0YXJ0QXQ6IHN0cmluZywgdG9wOiBudW1iZXIpOiBPYnNlcnZhYmxlPEF1ZGl0RXZlbnRMaXN0PiB7XG4gICAgY29uc3Qgc2VsZWN0ID0gJ3MnO1xuICAgIGxldCB1cmwgPSAnL2V2ZW50L3YxL2F1ZGl0RXZlbnRzPyRzYW5kYm94PScgKyBzYW5kYm94SWRcbiAgICAgICsgJyYkZmlsdGVyPXR5cGUgZXEgXFwnY2FzZVxcJydcbiAgICAgICsgJyBhbmQgaWQgZXEgXFwnJyArIGNhc2VSZWYgKyAnXFwnJztcbiAgICB1cmwgPSAoc3RhcnRBdCAhPT0gdW5kZWZpbmVkKSA/ICh1cmwgKyAnJiRzdGFydGF0PScgKyBzdGFydEF0KSA6IHVybDtcbiAgICB1cmwgPSB0b3AgPyAodXJsICsgJyYkdG9wPScgKyB0b3ApIDogdXJsO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKVxuICAgICAgLnBpcGUoXG4gICAgICAgIHRhcCggdmFsID0+IHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ3Rjc1RpbWVzdGFtcCcsIERhdGUubm93KCkudG9TdHJpbmcoKSkpLFxuICAgICAgICBtYXAoY2FzZWF1ZGl0ID0+IG5ldyBBdWRpdEV2ZW50TGlzdCgpLmRlc2VyaWFsaXplKGNhc2VhdWRpdCkpKTtcbiAgfVxufVxuIl19