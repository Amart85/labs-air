/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { Location } from '@angular/common';
import { TcSharedStateService, TcCoreCommonFunctions, SharedStateContent, SharedStateEntry, SharedStateList } from '@tibco-tcstk/tc-core-lib';
import { LiveAppsConfig } from '../models/tc-liveapps-config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@tibco-tcstk/tc-core-lib";
export class TcLiveAppsConfigService {
    /**
     * @param {?} location
     * @param {?} sharedStateService
     */
    constructor(location, sharedStateService) {
        this.location = location;
        this.sharedStateService = sharedStateService;
    }
    /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} liveappsConfig
     * @return {?}
     */
    createLiveAppsConfig(sandboxId, uiAppId, liveappsConfig) {
        /** @type {?} */
        const ssName = uiAppId + '.liveapps.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        const content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(liveappsConfig));
        return this.sharedStateService.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => value)));
    }
    /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    getLiveAppsConfig(uiAppId, useCache, flushCache) {
        // if useCache is false this will trigger the service to update the cached version with latest
        /** @type {?} */
        const ssName = uiAppId + '.liveapps.config.tibcolabs.client.context.PUBLIC';
        return this.sharedStateService.getSharedState(ssName, 'PUBLIC', useCache, flushCache)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            if (value.sharedStateEntries.length > 0) {
                /** @type {?} */
                const ssresult = new LiveAppsConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));
                ssresult.id = value.sharedStateEntries[0].id;
                return ssresult;
            }
            else {
                return undefined;
            }
        })));
    }
    /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} liveappsConfig
     * @param {?} id
     * @return {?}
     */
    updateLiveAppsConfig(sandboxId, uiAppId, liveappsConfig, id) {
        /** @type {?} */
        const ssName = uiAppId + '.liveapps.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        const content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(liveappsConfig));
        /** @type {?} */
        const entry = new SharedStateEntry();
        entry.content = content;
        entry.sandboxId = sandboxId;
        entry.name = ssName;
        entry.type = 'PUBLIC';
        entry.id = id;
        /** @type {?} */
        const ssList = new SharedStateList();
        ssList.sharedStateEntries = [];
        ssList.sharedStateEntries.push(entry);
        return this.sharedStateService.updateSharedState(ssList.sharedStateEntries)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        value => {
            // flush the cache
            this.getLiveAppsConfig(uiAppId, true, true).subscribe();
            return new LiveAppsConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));
        })));
    }
}
TcLiveAppsConfigService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root'
            },] }
];
/** @nocollapse */
TcLiveAppsConfigService.ctorParameters = () => [
    { type: Location },
    { type: TcSharedStateService }
];
/** @nocollapse */ TcLiveAppsConfigService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcLiveAppsConfigService_Factory() { return new TcLiveAppsConfigService(i0.ɵɵinject(i1.Location), i0.ɵɵinject(i2.TcSharedStateService)); }, token: TcLiveAppsConfigService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcLiveAppsConfigService.prototype.location;
    /**
     * @type {?}
     * @private
     */
    TcLiveAppsConfigService.prototype.sharedStateService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtbGl2ZS1hcHBzLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90Yy1saXZlLWFwcHMtY29uZmlnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ25DLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUUscUJBQXFCLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDNUksT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLDhCQUE4QixDQUFDOzs7O0FBSzVELE1BQU0sT0FBTyx1QkFBdUI7Ozs7O0lBRWxDLFlBQW9CLFFBQWtCLEVBQVUsa0JBQXdDO1FBQXBFLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXNCO0lBQ3hGLENBQUM7Ozs7Ozs7SUFFTSxvQkFBb0IsQ0FBQyxTQUFpQixFQUFFLE9BQWUsRUFBRSxjQUE4Qjs7Y0FDdEYsTUFBTSxHQUFHLE9BQU8sR0FBRyxrREFBa0Q7O2NBQ3JFLE9BQU8sR0FBdUIsSUFBSSxrQkFBa0IsRUFBRTtRQUM1RCxPQUFPLENBQUMsSUFBSSxHQUFHLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFFbEYsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQzthQUN4SCxJQUFJLENBQ0gsR0FBRzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFDLENBQ3BCLENBQUM7SUFDTixDQUFDOzs7Ozs7O0lBRU0saUJBQWlCLENBQUMsT0FBZSxFQUFFLFFBQWlCLEVBQUUsVUFBbUI7OztjQUV4RSxNQUFNLEdBQUcsT0FBTyxHQUFHLGtEQUFrRDtRQUUzRSxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxjQUFjLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsVUFBVSxDQUFDO2FBQ2xGLElBQUksQ0FDSCxHQUFHOzs7O1FBQUMsS0FBSyxDQUFDLEVBQUU7WUFDUixJQUFJLEtBQUssQ0FBQyxrQkFBa0IsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFOztzQkFDakMsUUFBUSxHQUFHLElBQUksY0FBYyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDdkcsUUFBUSxDQUFDLEVBQUUsR0FBRyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO2dCQUM3QyxPQUFPLFFBQVEsQ0FBQzthQUNqQjtpQkFBTTtnQkFDTCxPQUFPLFNBQVMsQ0FBQzthQUNsQjtRQUNILENBQUMsRUFDRixDQUNGLENBQUM7SUFDTixDQUFDOzs7Ozs7OztJQUVNLG9CQUFvQixDQUFDLFNBQWlCLEVBQUUsT0FBZSxFQUFFLGNBQThCLEVBQUUsRUFBVTs7Y0FDbEcsTUFBTSxHQUFHLE9BQU8sR0FBRyxrREFBa0Q7O2NBQ3JFLE9BQU8sR0FBdUIsSUFBSSxrQkFBa0IsRUFBRTtRQUM1RCxPQUFPLENBQUMsSUFBSSxHQUFHLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7O2NBQzVFLEtBQUssR0FBcUIsSUFBSSxnQkFBZ0IsRUFBRTtRQUN0RCxLQUFLLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN4QixLQUFLLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztRQUM1QixLQUFLLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQztRQUNwQixLQUFLLENBQUMsSUFBSSxHQUFHLFFBQVEsQ0FBQztRQUN0QixLQUFLLENBQUMsRUFBRSxHQUFHLEVBQUUsQ0FBQzs7Y0FDUixNQUFNLEdBQW9CLElBQUksZUFBZSxFQUFFO1FBQ3JELE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxFQUFFLENBQUM7UUFDL0IsTUFBTSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUV0QyxPQUFPLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQUM7YUFDeEUsSUFBSSxDQUNILEdBQUc7Ozs7UUFBQyxLQUFLLENBQUMsRUFBRTtZQUNWLGtCQUFrQjtZQUNsQixJQUFJLENBQUMsaUJBQWlCLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxTQUFTLEVBQUUsQ0FBQztZQUN4RCxPQUFPLElBQUksY0FBYyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRyxDQUFDLEVBQUMsQ0FDSCxDQUFDO0lBQ04sQ0FBQzs7O1lBNURGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQU5PLFFBQVE7WUFDUixvQkFBb0I7Ozs7Ozs7O0lBUWQsMkNBQTBCOzs7OztJQUFFLHFEQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtMb2NhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7VGNTaGFyZWRTdGF0ZVNlcnZpY2UsIFRjQ29yZUNvbW1vbkZ1bmN0aW9ucywgU2hhcmVkU3RhdGVDb250ZW50LCBTaGFyZWRTdGF0ZUVudHJ5LCBTaGFyZWRTdGF0ZUxpc3R9IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5pbXBvcnQge0xpdmVBcHBzQ29uZmlnfSBmcm9tICcuLi9tb2RlbHMvdGMtbGl2ZWFwcHMtY29uZmlnJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVGNMaXZlQXBwc0NvbmZpZ1NlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbG9jYXRpb246IExvY2F0aW9uLCBwcml2YXRlIHNoYXJlZFN0YXRlU2VydmljZTogVGNTaGFyZWRTdGF0ZVNlcnZpY2UpIHtcbiAgfVxuXG4gIHB1YmxpYyBjcmVhdGVMaXZlQXBwc0NvbmZpZyhzYW5kYm94SWQ6IG51bWJlciwgdWlBcHBJZDogc3RyaW5nLCBsaXZlYXBwc0NvbmZpZzogTGl2ZUFwcHNDb25maWcpIHtcbiAgICBjb25zdCBzc05hbWUgPSB1aUFwcElkICsgJy5saXZlYXBwcy5jb25maWcudGliY29sYWJzLmNsaWVudC5jb250ZXh0LlBVQkxJQyc7XG4gICAgY29uc3QgY29udGVudDogU2hhcmVkU3RhdGVDb250ZW50ID0gbmV3IFNoYXJlZFN0YXRlQ29udGVudCgpO1xuICAgIGNvbnRlbnQuanNvbiA9IFRjQ29yZUNvbW1vbkZ1bmN0aW9ucy5lc2NhcGVTdHJpbmcoSlNPTi5zdHJpbmdpZnkobGl2ZWFwcHNDb25maWcpKTtcblxuICAgIHJldHVybiB0aGlzLnNoYXJlZFN0YXRlU2VydmljZS5jcmVhdGVTaGFyZWRTdGF0ZShzc05hbWUsICdQVUJMSUMnLCAnJywgc2FuZGJveElkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZW50KVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcCh2YWx1ZSA9PiB2YWx1ZSlcbiAgICAgICk7XG4gIH1cblxuICBwdWJsaWMgZ2V0TGl2ZUFwcHNDb25maWcodWlBcHBJZDogc3RyaW5nLCB1c2VDYWNoZTogYm9vbGVhbiwgZmx1c2hDYWNoZTogYm9vbGVhbik6IE9ic2VydmFibGU8TGl2ZUFwcHNDb25maWc+IHtcbiAgICAvLyBpZiB1c2VDYWNoZSBpcyBmYWxzZSB0aGlzIHdpbGwgdHJpZ2dlciB0aGUgc2VydmljZSB0byB1cGRhdGUgdGhlIGNhY2hlZCB2ZXJzaW9uIHdpdGggbGF0ZXN0XG4gICAgY29uc3Qgc3NOYW1lID0gdWlBcHBJZCArICcubGl2ZWFwcHMuY29uZmlnLnRpYmNvbGFicy5jbGllbnQuY29udGV4dC5QVUJMSUMnO1xuXG4gICAgcmV0dXJuIHRoaXMuc2hhcmVkU3RhdGVTZXJ2aWNlLmdldFNoYXJlZFN0YXRlKHNzTmFtZSwgJ1BVQkxJQycsIHVzZUNhY2hlLCBmbHVzaENhY2hlKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcCh2YWx1ZSA9PiB7XG4gICAgICAgICAgICBpZiAodmFsdWUuc2hhcmVkU3RhdGVFbnRyaWVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgY29uc3Qgc3NyZXN1bHQgPSBuZXcgTGl2ZUFwcHNDb25maWcoKS5kZXNlcmlhbGl6ZShKU09OLnBhcnNlKHZhbHVlLnNoYXJlZFN0YXRlRW50cmllc1swXS5jb250ZW50Lmpzb24pKTtcbiAgICAgICAgICAgICAgc3NyZXN1bHQuaWQgPSB2YWx1ZS5zaGFyZWRTdGF0ZUVudHJpZXNbMF0uaWQ7XG4gICAgICAgICAgICAgIHJldHVybiBzc3Jlc3VsdDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApXG4gICAgICApO1xuICB9XG5cbiAgcHVibGljIHVwZGF0ZUxpdmVBcHBzQ29uZmlnKHNhbmRib3hJZDogbnVtYmVyLCB1aUFwcElkOiBzdHJpbmcsIGxpdmVhcHBzQ29uZmlnOiBMaXZlQXBwc0NvbmZpZywgaWQ6IHN0cmluZykge1xuICAgIGNvbnN0IHNzTmFtZSA9IHVpQXBwSWQgKyAnLmxpdmVhcHBzLmNvbmZpZy50aWJjb2xhYnMuY2xpZW50LmNvbnRleHQuUFVCTElDJztcbiAgICBjb25zdCBjb250ZW50OiBTaGFyZWRTdGF0ZUNvbnRlbnQgPSBuZXcgU2hhcmVkU3RhdGVDb250ZW50KCk7XG4gICAgY29udGVudC5qc29uID0gVGNDb3JlQ29tbW9uRnVuY3Rpb25zLmVzY2FwZVN0cmluZyhKU09OLnN0cmluZ2lmeShsaXZlYXBwc0NvbmZpZykpO1xuICAgIGNvbnN0IGVudHJ5OiBTaGFyZWRTdGF0ZUVudHJ5ID0gbmV3IFNoYXJlZFN0YXRlRW50cnkoKTtcbiAgICBlbnRyeS5jb250ZW50ID0gY29udGVudDtcbiAgICBlbnRyeS5zYW5kYm94SWQgPSBzYW5kYm94SWQ7XG4gICAgZW50cnkubmFtZSA9IHNzTmFtZTtcbiAgICBlbnRyeS50eXBlID0gJ1BVQkxJQyc7XG4gICAgZW50cnkuaWQgPSBpZDtcbiAgICBjb25zdCBzc0xpc3Q6IFNoYXJlZFN0YXRlTGlzdCA9IG5ldyBTaGFyZWRTdGF0ZUxpc3QoKTtcbiAgICBzc0xpc3Quc2hhcmVkU3RhdGVFbnRyaWVzID0gW107XG4gICAgc3NMaXN0LnNoYXJlZFN0YXRlRW50cmllcy5wdXNoKGVudHJ5KTtcblxuICAgIHJldHVybiB0aGlzLnNoYXJlZFN0YXRlU2VydmljZS51cGRhdGVTaGFyZWRTdGF0ZShzc0xpc3Quc2hhcmVkU3RhdGVFbnRyaWVzKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcCh2YWx1ZSA9PiB7XG4gICAgICAgICAgLy8gZmx1c2ggdGhlIGNhY2hlXG4gICAgICAgICAgdGhpcy5nZXRMaXZlQXBwc0NvbmZpZyh1aUFwcElkLCB0cnVlLCB0cnVlKS5zdWJzY3JpYmUoKTtcbiAgICAgICAgICByZXR1cm4gbmV3IExpdmVBcHBzQ29uZmlnKCkuZGVzZXJpYWxpemUoKEpTT04ucGFyc2UodmFsdWUuc2hhcmVkU3RhdGVFbnRyaWVzWzBdLmNvbnRlbnQuanNvbikpKTtcbiAgICAgICAgfSlcbiAgICAgICk7XG4gIH1cbn1cblxuIl19