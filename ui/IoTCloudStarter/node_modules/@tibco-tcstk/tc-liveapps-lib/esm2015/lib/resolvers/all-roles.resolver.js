/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { LiveAppsService } from '../services/live-apps.service';
import { GeneralConfigResolver, TcGeneralConfigService, TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { map, switchMap } from 'rxjs/operators';
import { Roles } from '../models/tc-groups-data';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
export class AllRolesResolver {
    /**
     * @param {?} sharedStateService
     * @param {?} generalConfigService
     * @param {?} http
     * @param {?} liveapps
     * @param {?} location
     */
    constructor(sharedStateService, generalConfigService, http, liveapps, location) {
        this.sharedStateService = sharedStateService;
        this.generalConfigService = generalConfigService;
        this.http = http;
        this.liveapps = liveapps;
        this.location = location;
    }
    /**
     * @param {?} routeSnapshot
     * @return {?}
     */
    resolve(routeSnapshot) {
        /** @type {?} */
        const claims$ = this.liveapps.getClaims()
            .pipe(map((/**
         * @param {?} claim
         * @return {?}
         */
        claim => {
            claim.sandboxes.forEach((/**
             * @param {?} sandbox
             * @return {?}
             */
            sandbox => {
                if (sandbox.type === 'Production') {
                    claim.primaryProductionSandbox = sandbox;
                }
            }));
            return claim;
        })));
        /** @type {?} */
        const generalConfigResolver = new GeneralConfigResolver(this.sharedStateService, this.generalConfigService, this.http, this.location);
        return claims$.pipe(switchMap((/**
         * @param {?} claiminfo
         * @return {?}
         */
        claiminfo => {
            generalConfigResolver.setSandbox(Number(claiminfo.primaryProductionSandbox.id));
            /** @type {?} */
            const generalConfig$ = generalConfigResolver.resolve().pipe(map((/**
             * @param {?} generalConfig
             * @return {?}
             */
            generalConfig => {
                return new Roles().deserialize({ roles: generalConfig.roles });
            })));
            return generalConfig$;
        })));
    }
}
AllRolesResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AllRolesResolver.ctorParameters = () => [
    { type: TcSharedStateService },
    { type: TcGeneralConfigService },
    { type: HttpClient },
    { type: LiveAppsService },
    { type: Location }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.sharedStateService;
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.liveapps;
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsLXJvbGVzLnJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9yZXNvbHZlcnMvYWxsLXJvbGVzLnJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUM5RCxPQUFPLEVBQVEscUJBQXFCLEVBQWlCLHNCQUFzQixFQUFFLG9CQUFvQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDbkksT0FBTyxFQUFVLEdBQUcsRUFBWSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRSxPQUFPLEVBQWdCLEtBQUssRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzlELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFLekMsTUFBTSxPQUFPLGdCQUFnQjs7Ozs7Ozs7SUFFM0IsWUFBb0Isa0JBQXdDLEVBQVUsb0JBQTRDLEVBQVUsSUFBZ0IsRUFBVSxRQUF5QixFQUFVLFFBQWtCO1FBQXZMLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBc0I7UUFBVSx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXdCO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUMzTSxDQUFDOzs7OztJQUVELE9BQU8sQ0FBQyxhQUFxQzs7Y0FFckMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFO2FBQ3RDLElBQUksQ0FDSCxHQUFHOzs7O1FBQUMsS0FBSyxDQUFDLEVBQUU7WUFDVixLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU87Ozs7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDaEMsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLFlBQVksRUFBRTtvQkFDakMsS0FBSyxDQUFDLHdCQUF3QixHQUFHLE9BQU8sQ0FBQztpQkFDMUM7WUFDSCxDQUFDLEVBQUMsQ0FBQztZQUNILE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxFQUFDLENBQ0g7O2NBRUcscUJBQXFCLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUVySSxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQ2pCLFNBQVM7Ozs7UUFBQyxTQUFTLENBQUMsRUFBRTtZQUNsQixxQkFBcUIsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDOztrQkFDMUUsY0FBYyxHQUFHLHFCQUFxQixDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FDekQsR0FBRzs7OztZQUFDLGFBQWEsQ0FBQyxFQUFFO2dCQUNsQixPQUFPLElBQUksS0FBSyxFQUFFLENBQUMsV0FBVyxDQUFDLEVBQUUsS0FBSyxFQUFFLGFBQWEsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDO1lBQ2pFLENBQUMsRUFBQyxDQUNIO1lBQ0QsT0FBTyxjQUFjLENBQUM7UUFDeEIsQ0FBQyxFQUNGLENBQ0YsQ0FBQztJQUVKLENBQUM7OztZQW5DRixVQUFVOzs7O1lBVGtFLG9CQUFvQjtZQUE1QyxzQkFBc0I7WUFHbkUsVUFBVTtZQUpWLGVBQWU7WUFNZixRQUFROzs7Ozs7O0lBT0YsOENBQWdEOzs7OztJQUFFLGdEQUFvRDs7Ozs7SUFBRSxnQ0FBd0I7Ozs7O0lBQUUsb0NBQWlDOzs7OztJQUFFLG9DQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7QWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUmVzb2x2ZX0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7Zm9ya0pvaW4sIE9ic2VydmFibGUsIG9mfSBmcm9tICdyeGpzJztcbmltcG9ydCB7TGl2ZUFwcHNTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9saXZlLWFwcHMuc2VydmljZSc7XG5pbXBvcnQge0NsYWltLCBHZW5lcmFsQ29uZmlnUmVzb2x2ZXIsIFJvbGVBdHRyaWJ1dGUsIFRjR2VuZXJhbENvbmZpZ1NlcnZpY2UsIFRjU2hhcmVkU3RhdGVTZXJ2aWNlfSBmcm9tICdAdGliY28tdGNzdGsvdGMtY29yZS1saWInO1xuaW1wb3J0IHtmbGF0TWFwLCBtYXAsIG1lcmdlTWFwLCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7R3JvdXAsIEdyb3VwcywgUm9sZXN9IGZyb20gJy4uL21vZGVscy90Yy1ncm91cHMtZGF0YSc7XG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7VGNDYXNlQ2FyZENvbmZpZ1NlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL3RjLWNhc2UtY2FyZC1jb25maWcuc2VydmljZSc7XG5pbXBvcnQge0xvY2F0aW9ufSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtDbGFpbXNSZXNvbHZlcn0gZnJvbSAnLi9jbGFpbXMucmVzb2x2ZXInO1xuaW1wb3J0IHtncm91cH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBbGxSb2xlc1Jlc29sdmVyIGltcGxlbWVudHMgUmVzb2x2ZTxPYnNlcnZhYmxlPFJvbGVzPj4ge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2hhcmVkU3RhdGVTZXJ2aWNlOiBUY1NoYXJlZFN0YXRlU2VydmljZSwgcHJpdmF0ZSBnZW5lcmFsQ29uZmlnU2VydmljZTogVGNHZW5lcmFsQ29uZmlnU2VydmljZSwgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LCBwcml2YXRlIGxpdmVhcHBzOiBMaXZlQXBwc1NlcnZpY2UsIHByaXZhdGUgbG9jYXRpb246IExvY2F0aW9uKSB7XG4gIH1cblxuICByZXNvbHZlKHJvdXRlU25hcHNob3Q6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBPYnNlcnZhYmxlPFJvbGVzPiB7XG5cbiAgICBjb25zdCBjbGFpbXMkID0gdGhpcy5saXZlYXBwcy5nZXRDbGFpbXMoKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChjbGFpbSA9PiB7XG4gICAgICAgICAgY2xhaW0uc2FuZGJveGVzLmZvckVhY2goc2FuZGJveCA9PiB7XG4gICAgICAgICAgICBpZiAoc2FuZGJveC50eXBlID09PSAnUHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgY2xhaW0ucHJpbWFyeVByb2R1Y3Rpb25TYW5kYm94ID0gc2FuZGJveDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gY2xhaW07XG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgY29uc3QgZ2VuZXJhbENvbmZpZ1Jlc29sdmVyID0gbmV3IEdlbmVyYWxDb25maWdSZXNvbHZlcih0aGlzLnNoYXJlZFN0YXRlU2VydmljZSwgdGhpcy5nZW5lcmFsQ29uZmlnU2VydmljZSwgdGhpcy5odHRwLCB0aGlzLmxvY2F0aW9uKTtcblxuICAgIHJldHVybiBjbGFpbXMkLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoY2xhaW1pbmZvID0+IHtcbiAgICAgICAgICBnZW5lcmFsQ29uZmlnUmVzb2x2ZXIuc2V0U2FuZGJveChOdW1iZXIoY2xhaW1pbmZvLnByaW1hcnlQcm9kdWN0aW9uU2FuZGJveC5pZCkpO1xuICAgICAgICAgIGNvbnN0IGdlbmVyYWxDb25maWckID0gZ2VuZXJhbENvbmZpZ1Jlc29sdmVyLnJlc29sdmUoKS5waXBlKFxuICAgICAgICAgICAgbWFwKGdlbmVyYWxDb25maWcgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IFJvbGVzKCkuZGVzZXJpYWxpemUoeyByb2xlczogZ2VuZXJhbENvbmZpZy5yb2xlcyB9KTtcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgKTtcbiAgICAgICAgICByZXR1cm4gZ2VuZXJhbENvbmZpZyQ7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuXG4gIH1cblxufVxuIl19