/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { LiveAppsService } from '../services/live-apps.service';
import { map, switchMap } from 'rxjs/operators';
import { Groups } from '../models/tc-groups-data';
export class AllGroupsResolver {
    /**
     * @param {?} liveapps
     */
    constructor(liveapps) {
        this.liveapps = liveapps;
    }
    /**
     * @return {?}
     */
    resolve() {
        /** @type {?} */
        const claims$ = this.liveapps.getClaims()
            .pipe(map((/**
         * @param {?} claim
         * @return {?}
         */
        claim => {
            claim.sandboxes.forEach((/**
             * @param {?} sandbox
             * @return {?}
             */
            sandbox => {
                if (sandbox.type === 'Production') {
                    claim.primaryProductionSandbox = sandbox;
                }
            }));
            return claim;
        })));
        return claims$.pipe(switchMap((/**
         * @param {?} claiminfo
         * @return {?}
         */
        claiminfo => {
            return this.liveapps.getGroups(+claiminfo.primaryProductionSandbox.id, 1000, true).pipe(map((/**
             * @param {?} groupinfo
             * @return {?}
             */
            groupinfo => {
                return new Groups().deserialize(groupinfo);
            })));
        })));
    }
}
AllGroupsResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AllGroupsResolver.ctorParameters = () => [
    { type: LiveAppsService }
];
if (false) {
    /** @type {?} */
    AllGroupsResolver.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsLWdyb3Vwcy5yZXNvbHZlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1saXZlYXBwcy1saWIvIiwic291cmNlcyI6WyJsaWIvcmVzb2x2ZXJzL2FsbC1ncm91cHMucmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBRTlELE9BQU8sRUFBVSxHQUFHLEVBQVksU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDakUsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBR2hELE1BQU0sT0FBTyxpQkFBaUI7Ozs7SUFFNUIsWUFBbUIsUUFBeUI7UUFBekIsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7SUFDNUMsQ0FBQzs7OztJQUVELE9BQU87O2NBRUMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFO2FBQ3RDLElBQUksQ0FDSCxHQUFHOzs7O1FBQUMsS0FBSyxDQUFDLEVBQUU7WUFDVixLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU87Ozs7WUFBQyxPQUFPLENBQUMsRUFBRTtnQkFDaEMsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLFlBQVksRUFBRTtvQkFDakMsS0FBSyxDQUFDLHdCQUF3QixHQUFHLE9BQU8sQ0FBQztpQkFDMUM7WUFDSCxDQUFDLEVBQUMsQ0FBQztZQUNILE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxFQUFDLENBQ0g7UUFFSCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQ2pCLFNBQVM7Ozs7UUFBQyxTQUFTLENBQUMsRUFBRTtZQUNsQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUNyRixHQUFHOzs7O1lBQUMsU0FBUyxDQUFDLEVBQUU7Z0JBQ2QsT0FBTyxJQUFJLE1BQU0sRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM3QyxDQUFDLEVBQUMsQ0FDSCxDQUFDO1FBQ0osQ0FBQyxFQUNGLENBQ0YsQ0FBQztJQUNKLENBQUM7OztZQTlCRixVQUFVOzs7O1lBTEgsZUFBZTs7OztJQVFULHFDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlc29sdmUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7TGl2ZUFwcHNTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9saXZlLWFwcHMuc2VydmljZSc7XG5pbXBvcnQge0NsYWltfSBmcm9tICdAdGliY28tdGNzdGsvdGMtY29yZS1saWInO1xuaW1wb3J0IHtmbGF0TWFwLCBtYXAsIG1lcmdlTWFwLCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7R3JvdXBzfSBmcm9tICcuLi9tb2RlbHMvdGMtZ3JvdXBzLWRhdGEnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWxsR3JvdXBzUmVzb2x2ZXIgaW1wbGVtZW50cyBSZXNvbHZlPE9ic2VydmFibGU8R3JvdXBzPj4ge1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBsaXZlYXBwczogTGl2ZUFwcHNTZXJ2aWNlKSB7XG4gIH1cblxuICByZXNvbHZlKCk6IE9ic2VydmFibGU8R3JvdXBzPiB7XG5cbiAgICBjb25zdCBjbGFpbXMkID0gdGhpcy5saXZlYXBwcy5nZXRDbGFpbXMoKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChjbGFpbSA9PiB7XG4gICAgICAgICAgY2xhaW0uc2FuZGJveGVzLmZvckVhY2goc2FuZGJveCA9PiB7XG4gICAgICAgICAgICBpZiAoc2FuZGJveC50eXBlID09PSAnUHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgY2xhaW0ucHJpbWFyeVByb2R1Y3Rpb25TYW5kYm94ID0gc2FuZGJveDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gY2xhaW07XG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgcmV0dXJuIGNsYWltcyQucGlwZShcbiAgICAgIHN3aXRjaE1hcChjbGFpbWluZm8gPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmxpdmVhcHBzLmdldEdyb3VwcygrY2xhaW1pbmZvLnByaW1hcnlQcm9kdWN0aW9uU2FuZGJveC5pZCwgMTAwMCwgdHJ1ZSkucGlwZShcbiAgICAgICAgICAgIG1hcChncm91cGluZm8gPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IEdyb3VwcygpLmRlc2VyaWFsaXplKGdyb3VwaW5mbyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuICB9XG59XG4iXX0=