/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { TcCoreCommonFunctions, UiAppIdConfig, } from '@tibco-tcstk/tc-core-lib';
import { map, switchMap, mergeMap, flatMap } from 'rxjs/operators';
import { RouteAccessControlConfig } from '../models/tc-groups-data';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { TcAccessControlService } from '../services/tc-access-control.service';
export class AccessControlConfigurationResolver {
    /**
     * @param {?} location
     * @param {?} http
     * @param {?} accessControlService
     */
    constructor(location, http, accessControlService) {
        this.location = location;
        this.http = http;
        this.accessControlService = accessControlService;
        this.DEFAULT_CONFIG_URL = 'assets/config/routeAccessControl.json';
        this.APP_ID_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/uiAppId.json');
        // can be used to load defaultAppConfig from a JSON config
        this.getDefaultAppConfig = (/**
         * @return {?}
         */
        () => {
            return this.http.get(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, this.DEFAULT_CONFIG_URL));
        });
        // loads uiAppId from json file in assets (appId.json)
        this.getAppId = (/**
         * @return {?}
         */
        () => {
            return this.http.get(this.APP_ID_URL).pipe(map((/**
             * @param {?} uiAppId
             * @return {?}
             */
            uiAppId => {
                /** @type {?} */
                const uiAppIdConfig = new UiAppIdConfig().deserialize(uiAppId);
                this.uiAppId = uiAppIdConfig.uiAppId;
                return uiAppIdConfig;
            })));
        });
    }
    /**
     * @return {?}
     */
    resolve() {
        /** @type {?} */
        const accessConfig$ = this.getAppId().pipe(switchMap((/**
         * @param {?} uiAppId
         * @return {?}
         */
        uiAppId => this.accessControlService.getAccessControlConfig(uiAppId.uiAppId, true, false)
            .pipe(mergeMap((/**
         * @param {?} accessControlConfig
         * @return {?}
         */
        accessControlConfig => {
            if (accessControlConfig === undefined) {
                return this.getDefaultAppConfig().pipe(flatMap((/**
                 * @param {?} config
                 * @return {?}
                 */
                config => {
                    this.defaultAccessControlConfig = new RouteAccessControlConfig().deserialize(config);
                    this.defaultAccessControlConfig.uiAppId = this.uiAppId;
                    return this.accessControlService.createLAccessControlConfig(this.sandboxId, this.uiAppId, this.defaultAccessControlConfig)
                        .pipe(flatMap((/**
                     * @param {?} result
                     * @return {?}
                     */
                    result => {
                        /** @type {?} */
                        const newAppConfig = this.defaultAccessControlConfig;
                        newAppConfig.id = result;
                        return this.accessControlService.updateAccessControlConfig(this.sandboxId, this.uiAppId, newAppConfig, result).pipe(flatMap((
                        // trigger a read to flush the cache since we changed it
                        /**
                         * @param {?} updatedConf
                         * @return {?}
                         */
                        updatedConf => {
                            return this.accessControlService.getAccessControlConfig(this.uiAppId, true, true).pipe(map((/**
                             * @param {?} cachedConfig
                             * @return {?}
                             */
                            cachedConfig => {
                                return cachedConfig;
                            })));
                        })));
                        // return newAppConfig;
                    })));
                })));
            }
            else {
                return of(accessControlConfig);
            }
        }))))));
        return accessConfig$;
    }
}
AccessControlConfigurationResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AccessControlConfigurationResolver.ctorParameters = () => [
    { type: Location },
    { type: HttpClient },
    { type: TcAccessControlService }
];
if (false) {
    /** @type {?} */
    AccessControlConfigurationResolver.prototype.DEFAULT_CONFIG_URL;
    /** @type {?} */
    AccessControlConfigurationResolver.prototype.APP_ID_URL;
    /**
     * @type {?}
     * @private
     */
    AccessControlConfigurationResolver.prototype.sandboxId;
    /** @type {?} */
    AccessControlConfigurationResolver.prototype.defaultAccessControlConfig;
    /**
     * @type {?}
     * @private
     */
    AccessControlConfigurationResolver.prototype.uiAppId;
    /**
     * @type {?}
     * @private
     */
    AccessControlConfigurationResolver.prototype.getDefaultAppConfig;
    /**
     * @type {?}
     * @private
     */
    AccessControlConfigurationResolver.prototype.getAppId;
    /**
     * @type {?}
     * @private
     */
    AccessControlConfigurationResolver.prototype.location;
    /**
     * @type {?}
     * @private
     */
    AccessControlConfigurationResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AccessControlConfigurationResolver.prototype.accessControlService;
}
//# sourceMappingURL=data:application/json;base64,