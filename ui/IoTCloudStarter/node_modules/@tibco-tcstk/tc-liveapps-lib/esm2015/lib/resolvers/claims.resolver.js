/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { LiveAppsService } from '../services/live-apps.service';
import { map } from 'rxjs/operators';
export class ClaimsResolver {
    /**
     * @param {?} liveapps
     */
    constructor(liveapps) {
        this.liveapps = liveapps;
    }
    /**
     * @return {?}
     */
    resolve() {
        // note claims will be cached at http level
        // logout required to update them anyway
        // note claims will be cached at http level
        // logout required to update them anyway
        /** @type {?} */
        const claims = this.liveapps.getClaims()
            .pipe(map((/**
         * @param {?} claim
         * @return {?}
         */
        claim => {
            claim.sandboxes.forEach((/**
             * @param {?} sandbox
             * @return {?}
             */
            sandbox => {
                if (sandbox.type === 'Production') {
                    claim.primaryProductionSandbox = sandbox;
                }
            }));
            return claim;
        })));
        return claims;
    }
}
ClaimsResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
ClaimsResolver.ctorParameters = () => [
    { type: LiveAppsService }
];
if (false) {
    /** @type {?} */
    ClaimsResolver.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2xhaW1zLnJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9yZXNvbHZlcnMvY2xhaW1zLnJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUU5RCxPQUFPLEVBQUMsR0FBRyxFQUFXLE1BQU0sZ0JBQWdCLENBQUM7QUFHN0MsTUFBTSxPQUFPLGNBQWM7Ozs7SUFFekIsWUFBbUIsUUFBeUI7UUFBekIsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7SUFBRyxDQUFDOzs7O0lBRWhELE9BQU87UUFFTCwyQ0FBMkM7UUFDM0Msd0NBQXdDOzs7O2NBRWxDLE1BQU0sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTthQUNyQyxJQUFJLENBQ0gsR0FBRzs7OztRQUFDLEtBQUssQ0FBQyxFQUFFO1lBQ1YsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPOzs7O1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ2hDLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxZQUFZLEVBQUU7b0JBQ2pDLEtBQUssQ0FBQyx3QkFBd0IsR0FBRyxPQUFPLENBQUM7aUJBQzFDO1lBQ0gsQ0FBQyxFQUFDLENBQUM7WUFDSCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUMsRUFBQyxDQUNIO1FBRUgsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQzs7O1lBdkJGLFVBQVU7Ozs7WUFKSCxlQUFlOzs7O0lBT1Qsa0NBQWdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUmVzb2x2ZSB9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQgeyBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtMaXZlQXBwc1NlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL2xpdmUtYXBwcy5zZXJ2aWNlJztcbmltcG9ydCB7Q2xhaW19IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5pbXBvcnQge21hcCwgbWVyZ2VNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENsYWltc1Jlc29sdmVyIGltcGxlbWVudHMgUmVzb2x2ZTxPYnNlcnZhYmxlPENsYWltPj4ge1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBsaXZlYXBwczogTGl2ZUFwcHNTZXJ2aWNlKSB7fVxuXG4gIHJlc29sdmUoKTogT2JzZXJ2YWJsZTxDbGFpbT4ge1xuXG4gICAgLy8gbm90ZSBjbGFpbXMgd2lsbCBiZSBjYWNoZWQgYXQgaHR0cCBsZXZlbFxuICAgIC8vIGxvZ291dCByZXF1aXJlZCB0byB1cGRhdGUgdGhlbSBhbnl3YXlcblxuICAgIGNvbnN0IGNsYWltcyA9IHRoaXMubGl2ZWFwcHMuZ2V0Q2xhaW1zKClcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAoY2xhaW0gPT4ge1xuICAgICAgICAgIGNsYWltLnNhbmRib3hlcy5mb3JFYWNoKHNhbmRib3ggPT4ge1xuICAgICAgICAgICAgaWYgKHNhbmRib3gudHlwZSA9PT0gJ1Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNsYWltLnByaW1hcnlQcm9kdWN0aW9uU2FuZGJveCA9IHNhbmRib3g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGNsYWltO1xuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgIHJldHVybiBjbGFpbXM7XG4gIH1cblxufVxuIl19