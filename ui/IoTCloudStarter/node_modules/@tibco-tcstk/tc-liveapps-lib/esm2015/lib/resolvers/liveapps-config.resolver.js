/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { TcCoreCommonFunctions, UiAppIdConfig } from '@tibco-tcstk/tc-core-lib';
import { flatMap, map, mergeMap, switchMap } from 'rxjs/operators';
import { TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { HttpClient } from '@angular/common/http';
import { TcLiveAppsConfigService } from '../services/tc-live-apps-config.service';
import { LiveAppsConfig } from '../models/tc-liveapps-config';
import { TcCaseCardConfigService } from '../services/tc-case-card-config.service';
import { Location } from '@angular/common';
export class LiveAppsConfigResolver {
    /**
     * @param {?} tcSharedState
     * @param {?} liveAppsConfigService
     * @param {?} caseCardConfigService
     * @param {?} http
     * @param {?} location
     */
    constructor(tcSharedState, liveAppsConfigService, caseCardConfigService, http, location) {
        this.tcSharedState = tcSharedState;
        this.liveAppsConfigService = liveAppsConfigService;
        this.caseCardConfigService = caseCardConfigService;
        this.http = http;
        this.location = location;
        this.DEFAULT_CONFIG_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/liveAppsConfig.json');
        this.APP_ID_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/uiAppId.json');
        // note appConfigResolver will need sandboxId to create app config state record.
        // So we expect this to have been set by caller (done by tc-liveapps-lib/laConfigResolver).
        this.setSandbox = (/**
         * @param {?} sandboxId
         * @return {?}
         */
        (sandboxId) => {
            this.sandboxId = sandboxId;
        });
        // can be used to load defaultAppConfig from a JSON config
        this.getDefaultAppConfig = (/**
         * @return {?}
         */
        () => {
            return this.http.get(this.DEFAULT_CONFIG_URL);
        });
        // loads uiAppId from json file in assets (appId.json)
        this.getAppId = (/**
         * @return {?}
         */
        () => {
            return this.http.get(this.APP_ID_URL).pipe(map((/**
             * @param {?} uiAppId
             * @return {?}
             */
            uiAppId => {
                /** @type {?} */
                const uiAppIdConfig = new UiAppIdConfig().deserialize(uiAppId);
                this.uiAppId = uiAppIdConfig.uiAppId;
                return uiAppIdConfig;
            })));
        });
        this.triggerCardConfigFetch = (/**
         * @param {?} liveAppsConfig
         * @return {?}
         */
        (liveAppsConfig) => {
            // optimization: I want to avoid reading the card config when we display a large list of cards in the calling app
            // therefore we can trigger of a read of the card configs for each app in the config to ensure they are cached by
            // http interceptor
            /** @type {?} */
            const laConfig = new LiveAppsConfig().deserialize(liveAppsConfig);
            laConfig.applicationIds.forEach((/**
             * @param {?} appId
             * @return {?}
             */
            appId => {
                this.caseCardConfigService.getCardConfig(this.uiAppId, appId, true, false).subscribe();
            }));
        });
    }
    /**
     * @param {?} routeSnapshot
     * @return {?}
     */
    resolve(routeSnapshot) {
        /** @type {?} */
        const appConfig = this.getAppId().pipe(switchMap((/**
         * @param {?} uiAppId
         * @return {?}
         */
        uiAppId => this.liveAppsConfigService.getLiveAppsConfig(uiAppId.uiAppId, true, false)
            .pipe(mergeMap((/**
         * @param {?} liveAppsConfig
         * @return {?}
         */
        liveAppsConfig => {
            if (liveAppsConfig === undefined) {
                return this.getDefaultAppConfig().pipe(flatMap((/**
                 * @param {?} config
                 * @return {?}
                 */
                config => {
                    this.defaultAppConfig = new LiveAppsConfig().deserialize(config);
                    this.defaultAppConfig.caseIconsFolderId = this.uiAppId + '_Icons';
                    return this.liveAppsConfigService.createLiveAppsConfig(this.sandboxId, uiAppId.uiAppId, this.defaultAppConfig)
                        .pipe(map((/**
                     * @param {?} result
                     * @return {?}
                     */
                    result => {
                        /** @type {?} */
                        const newAppConfig = this.defaultAppConfig;
                        newAppConfig.id = result;
                        this.liveAppsConfigService.updateLiveAppsConfig(this.sandboxId, uiAppId.uiAppId, newAppConfig, result).subscribe((
                        // trigger a read to flush the cache since we changed it
                        /**
                         * @param {?} updatedConf
                         * @return {?}
                         */
                        updatedConf => {
                            this.liveAppsConfigService.getLiveAppsConfig(this.uiAppId, true, true).subscribe();
                        }));
                        this.triggerCardConfigFetch(newAppConfig);
                        return newAppConfig;
                    })));
                })));
            }
            else {
                this.triggerCardConfigFetch(liveAppsConfig);
                return of(liveAppsConfig);
            }
        }))))));
        return appConfig;
    }
}
LiveAppsConfigResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LiveAppsConfigResolver.ctorParameters = () => [
    { type: TcSharedStateService },
    { type: TcLiveAppsConfigService },
    { type: TcCaseCardConfigService },
    { type: HttpClient },
    { type: Location }
];
if (false) {
    /** @type {?} */
    LiveAppsConfigResolver.prototype.DEFAULT_CONFIG_URL;
    /** @type {?} */
    LiveAppsConfigResolver.prototype.APP_ID_URL;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.sandboxId;
    /** @type {?} */
    LiveAppsConfigResolver.prototype.defaultAppConfig;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.uiAppId;
    /** @type {?} */
    LiveAppsConfigResolver.prototype.setSandbox;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.getDefaultAppConfig;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.getAppId;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.triggerCardConfigFetch;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.tcSharedState;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.liveAppsConfigService;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.caseCardConfigService;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,