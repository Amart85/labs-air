/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { forkJoin } from 'rxjs';
import { LiveAppsService } from '../services/live-apps.service';
import { GeneralConfigResolver, TcGeneralConfigService, TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { flatMap, map } from 'rxjs/operators';
import { Roles } from '../models/tc-groups-data';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { ClaimsResolver } from './claims.resolver';
export class RolesResolver {
    /**
     * @param {?} sharedStateService
     * @param {?} generalConfigService
     * @param {?} http
     * @param {?} liveapps
     * @param {?} location
     */
    constructor(sharedStateService, generalConfigService, http, liveapps, location) {
        this.sharedStateService = sharedStateService;
        this.generalConfigService = generalConfigService;
        this.http = http;
        this.liveapps = liveapps;
        this.location = location;
        this.createRoles = (/**
         * @param {?} groups
         * @param {?} roles
         * @return {?}
         */
        (groups, roles) => {
            /** @type {?} */
            const calcRoles = [];
            roles.forEach((/**
             * @param {?} role
             * @return {?}
             */
            role => {
                /** @type {?} */
                const targetGroup = groups.find((/**
                 * @param {?} grp
                 * @return {?}
                 */
                grp => {
                    return (grp.name === role.group);
                }));
                if (targetGroup) {
                    calcRoles.push(role);
                }
            }));
            return new Roles().deserialize(new Roles().deserialize({ roles: calcRoles }));
        });
    }
    /**
     * @return {?}
     */
    resolve() {
        // we will need the general config to understand the roles definition
        /** @type {?} */
        const generalConfigResolver = new GeneralConfigResolver(this.sharedStateService, this.generalConfigService, this.http, this.location);
        // aim is to return an object that only contains roles where the user is a member of the matching group
        /** @type {?} */
        const claimResolver$ = new ClaimsResolver(this.liveapps).resolve().pipe(flatMap((/**
         * @param {?} claiminfo
         * @return {?}
         */
        claiminfo => {
            /** @type {?} */
            const sandboxId = claiminfo.primaryProductionSandbox.id;
            generalConfigResolver.setSandbox(Number(sandboxId));
            /** @type {?} */
            const generalConfig$ = generalConfigResolver.resolve();
            /** @type {?} */
            const groups$ = this.liveapps.getGroupMemberships(+claiminfo.primaryProductionSandbox.id, claiminfo.id, 1000, true);
            return forkJoin(generalConfig$, groups$).pipe(map((/**
             * @param {?} __0
             * @return {?}
             */
            ([configData, groupData]) => {
                return this.createRoles(groupData.groups, configData.roles);
            })));
        })));
        return claimResolver$;
    }
}
RolesResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RolesResolver.ctorParameters = () => [
    { type: TcSharedStateService },
    { type: TcGeneralConfigService },
    { type: HttpClient },
    { type: LiveAppsService },
    { type: Location }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.createRoles;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.sharedStateService;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.liveapps;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZXMucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL3Jlc29sdmVycy9yb2xlcy5yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQyxPQUFPLEVBQUMsUUFBUSxFQUFpQixNQUFNLE1BQU0sQ0FBQztBQUM5QyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFDOUQsT0FBTyxFQUFRLHFCQUFxQixFQUFpQixzQkFBc0IsRUFBRSxvQkFBb0IsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQ25JLE9BQU8sRUFBQyxPQUFPLEVBQUUsR0FBRyxFQUFzQixNQUFNLGdCQUFnQixDQUFDO0FBQ2pFLE9BQU8sRUFBZ0IsS0FBSyxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDOUQsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLHNCQUFzQixDQUFDO0FBRWhELE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsY0FBYyxFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFJakQsTUFBTSxPQUFPLGFBQWE7Ozs7Ozs7O0lBRXhCLFlBQW9CLGtCQUF3QyxFQUFVLG9CQUE0QyxFQUFVLElBQWdCLEVBQVUsUUFBeUIsRUFBVSxRQUFrQjtRQUF2TCx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXNCO1FBQVUseUJBQW9CLEdBQXBCLG9CQUFvQixDQUF3QjtRQUFVLFNBQUksR0FBSixJQUFJLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUEyQm5NLGdCQUFXOzs7OztRQUFHLENBQUMsTUFBZSxFQUFFLEtBQXNCLEVBQVMsRUFBRTs7a0JBQ2pFLFNBQVMsR0FBb0IsRUFBRTtZQUNyQyxLQUFLLENBQUMsT0FBTzs7OztZQUFDLElBQUksQ0FBQyxFQUFFOztzQkFDYixXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUk7Ozs7Z0JBQUMsR0FBRyxDQUFDLEVBQUU7b0JBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDbkMsQ0FBQyxFQUNBO2dCQUNELElBQUksV0FBVyxFQUFFO29CQUNmLFNBQVMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQ3RCO1lBQ0gsQ0FBQyxFQUFDLENBQUE7WUFDRixPQUFPLElBQUksS0FBSyxFQUFFLENBQUMsV0FBVyxDQUFDLElBQUksS0FBSyxFQUFFLENBQUMsV0FBVyxDQUFFLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxDQUFFLENBQUMsQ0FBQztRQUNsRixDQUFDLEVBQUE7SUF0Q0QsQ0FBQzs7OztJQUVELE9BQU87OztjQUdDLHFCQUFxQixHQUFHLElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUM7OztjQUkvSCxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FDckUsT0FBTzs7OztRQUFDLFNBQVMsQ0FBQyxFQUFFOztrQkFDVixTQUFTLEdBQUcsU0FBUyxDQUFDLHdCQUF3QixDQUFDLEVBQUU7WUFDdkQscUJBQXFCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDOztrQkFDOUMsY0FBYyxHQUFHLHFCQUFxQixDQUFDLE9BQU8sRUFBRTs7a0JBQ2hELE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7WUFDbkgsT0FBTyxRQUFRLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDM0MsR0FBRzs7OztZQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLEVBQUUsRUFBRTtnQkFDOUIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlELENBQUMsRUFBQyxDQUFDLENBQUM7UUFDUixDQUFDLEVBQ0YsQ0FDRjtRQUVELE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7OztZQTVCRixVQUFVOzs7O1lBVGtFLG9CQUFvQjtZQUE1QyxzQkFBc0I7WUFHbkUsVUFBVTtZQUpWLGVBQWU7WUFNZixRQUFROzs7Ozs7O0lBa0NkLG9DQVlDOzs7OztJQXZDVywyQ0FBZ0Q7Ozs7O0lBQUUsNkNBQW9EOzs7OztJQUFFLDZCQUF3Qjs7Ozs7SUFBRSxpQ0FBaUM7Ozs7O0lBQUUsaUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtSZXNvbHZlfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtmb3JrSm9pbiwgT2JzZXJ2YWJsZSwgb2Z9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtMaXZlQXBwc1NlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL2xpdmUtYXBwcy5zZXJ2aWNlJztcbmltcG9ydCB7Q2xhaW0sIEdlbmVyYWxDb25maWdSZXNvbHZlciwgUm9sZUF0dHJpYnV0ZSwgVGNHZW5lcmFsQ29uZmlnU2VydmljZSwgVGNTaGFyZWRTdGF0ZVNlcnZpY2V9IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5pbXBvcnQge2ZsYXRNYXAsIG1hcCwgbWVyZ2VNYXAsIHN3aXRjaE1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtHcm91cCwgR3JvdXBzLCBSb2xlc30gZnJvbSAnLi4vbW9kZWxzL3RjLWdyb3Vwcy1kYXRhJztcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtUY0Nhc2VDYXJkQ29uZmlnU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvdGMtY2FzZS1jYXJkLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7TG9jYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0NsYWltc1Jlc29sdmVyfSBmcm9tICcuL2NsYWltcy5yZXNvbHZlcic7XG5pbXBvcnQge2dyb3VwfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJvbGVzUmVzb2x2ZXIgaW1wbGVtZW50cyBSZXNvbHZlPE9ic2VydmFibGU8Um9sZXM+PiB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzaGFyZWRTdGF0ZVNlcnZpY2U6IFRjU2hhcmVkU3RhdGVTZXJ2aWNlLCBwcml2YXRlIGdlbmVyYWxDb25maWdTZXJ2aWNlOiBUY0dlbmVyYWxDb25maWdTZXJ2aWNlLCBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgbGl2ZWFwcHM6IExpdmVBcHBzU2VydmljZSwgcHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb24pIHtcbiAgfVxuXG4gIHJlc29sdmUoKTogT2JzZXJ2YWJsZTxSb2xlcz4ge1xuXG4gICAgLy8gd2Ugd2lsbCBuZWVkIHRoZSBnZW5lcmFsIGNvbmZpZyB0byB1bmRlcnN0YW5kIHRoZSByb2xlcyBkZWZpbml0aW9uXG4gICAgY29uc3QgZ2VuZXJhbENvbmZpZ1Jlc29sdmVyID0gbmV3IEdlbmVyYWxDb25maWdSZXNvbHZlcih0aGlzLnNoYXJlZFN0YXRlU2VydmljZSwgdGhpcy5nZW5lcmFsQ29uZmlnU2VydmljZSwgdGhpcy5odHRwLCB0aGlzLmxvY2F0aW9uKTtcblxuICAgIC8vIGFpbSBpcyB0byByZXR1cm4gYW4gb2JqZWN0IHRoYXQgb25seSBjb250YWlucyByb2xlcyB3aGVyZSB0aGUgdXNlciBpcyBhIG1lbWJlciBvZiB0aGUgbWF0Y2hpbmcgZ3JvdXBcblxuICAgIGNvbnN0IGNsYWltUmVzb2x2ZXIkID0gbmV3IENsYWltc1Jlc29sdmVyKHRoaXMubGl2ZWFwcHMpLnJlc29sdmUoKS5waXBlKFxuICAgICAgZmxhdE1hcChjbGFpbWluZm8gPT4ge1xuICAgICAgICAgIGNvbnN0IHNhbmRib3hJZCA9IGNsYWltaW5mby5wcmltYXJ5UHJvZHVjdGlvblNhbmRib3guaWQ7XG4gICAgICAgICAgZ2VuZXJhbENvbmZpZ1Jlc29sdmVyLnNldFNhbmRib3goTnVtYmVyKHNhbmRib3hJZCkpO1xuICAgICAgICAgIGNvbnN0IGdlbmVyYWxDb25maWckID0gZ2VuZXJhbENvbmZpZ1Jlc29sdmVyLnJlc29sdmUoKTtcbiAgICAgICAgICBjb25zdCBncm91cHMkID0gdGhpcy5saXZlYXBwcy5nZXRHcm91cE1lbWJlcnNoaXBzKCtjbGFpbWluZm8ucHJpbWFyeVByb2R1Y3Rpb25TYW5kYm94LmlkLCBjbGFpbWluZm8uaWQsIDEwMDAsIHRydWUpO1xuICAgICAgICAgIHJldHVybiBmb3JrSm9pbihnZW5lcmFsQ29uZmlnJCwgZ3JvdXBzJCkucGlwZShcbiAgICAgICAgICAgIG1hcCgoW2NvbmZpZ0RhdGEsIGdyb3VwRGF0YV0pID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUm9sZXMoZ3JvdXBEYXRhLmdyb3VwcywgY29uZmlnRGF0YS5yb2xlcyk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuXG4gICAgcmV0dXJuIGNsYWltUmVzb2x2ZXIkO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVSb2xlcyA9IChncm91cHM6IEdyb3VwW10sIHJvbGVzOiBSb2xlQXR0cmlidXRlW10pOiBSb2xlcyA9PiB7XG4gICAgY29uc3QgY2FsY1JvbGVzOiBSb2xlQXR0cmlidXRlW10gPSBbXTtcbiAgICByb2xlcy5mb3JFYWNoKHJvbGUgPT4ge1xuICAgICAgY29uc3QgdGFyZ2V0R3JvdXAgPSBncm91cHMuZmluZChncnAgPT4ge1xuICAgICAgICByZXR1cm4gKGdycC5uYW1lID09PSByb2xlLmdyb3VwKTtcbiAgICAgIH1cbiAgICAgIClcbiAgICAgIGlmICh0YXJnZXRHcm91cCkge1xuICAgICAgICBjYWxjUm9sZXMucHVzaChyb2xlKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBuZXcgUm9sZXMoKS5kZXNlcmlhbGl6ZShuZXcgUm9sZXMoKS5kZXNlcmlhbGl6ZSggeyByb2xlczogY2FsY1JvbGVzIH0gKSk7XG4gIH1cbn1cbiJdfQ==