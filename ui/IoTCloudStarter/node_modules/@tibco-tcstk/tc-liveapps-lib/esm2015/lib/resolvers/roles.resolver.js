/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { forkJoin } from 'rxjs';
import { LiveAppsService } from '../services/live-apps.service';
import { GeneralConfigResolver, TcGeneralConfigService, TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { flatMap, map } from 'rxjs/operators';
import { Roles } from '../models/tc-groups-data';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { ClaimsResolver } from './claims.resolver';
export class RolesResolver {
    /**
     * @param {?} sharedStateService
     * @param {?} generalConfigService
     * @param {?} http
     * @param {?} liveapps
     * @param {?} location
     * @param {?} router
     */
    constructor(sharedStateService, generalConfigService, http, liveapps, location, router) {
        this.sharedStateService = sharedStateService;
        this.generalConfigService = generalConfigService;
        this.http = http;
        this.liveapps = liveapps;
        this.location = location;
        this.router = router;
        this.createRoles = (/**
         * @param {?} groups
         * @param {?} roles
         * @return {?}
         */
        (groups, roles) => {
            /** @type {?} */
            const calcRoles = [];
            roles.forEach((/**
             * @param {?} role
             * @return {?}
             */
            role => {
                /** @type {?} */
                const targetGroup = groups.find((/**
                 * @param {?} grp
                 * @return {?}
                 */
                grp => {
                    return (grp.name === role.group);
                }));
                if (targetGroup) {
                    calcRoles.push(role);
                }
            }));
            return new Roles().deserialize(new Roles().deserialize({ roles: calcRoles }));
        });
    }
    /**
     * @return {?}
     */
    resolve() {
        // we will need the general config to understand the roles definition
        /** @type {?} */
        const generalConfigResolver = new GeneralConfigResolver(this.sharedStateService, this.generalConfigService, this.http, this.location, this.router);
        // aim is to return an object that only contains roles where the user is a member of the matching group
        /** @type {?} */
        const claimResolver$ = new ClaimsResolver(this.liveapps).resolve().pipe(flatMap((/**
         * @param {?} claiminfo
         * @return {?}
         */
        claiminfo => {
            /** @type {?} */
            const sandboxId = claiminfo.primaryProductionSandbox.id;
            generalConfigResolver.setSandbox(Number(sandboxId));
            /** @type {?} */
            const generalConfig$ = generalConfigResolver.resolve();
            /** @type {?} */
            const groups$ = this.liveapps.getGroupMemberships(+claiminfo.primaryProductionSandbox.id, claiminfo.id, 1000, true);
            return forkJoin(generalConfig$, groups$).pipe(map((/**
             * @param {?} __0
             * @return {?}
             */
            ([configData, groupData]) => {
                return this.createRoles(groupData.groups, configData.roles);
            })));
        })));
        return claimResolver$;
    }
}
RolesResolver.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RolesResolver.ctorParameters = () => [
    { type: TcSharedStateService },
    { type: TcGeneralConfigService },
    { type: HttpClient },
    { type: LiveAppsService },
    { type: Location },
    { type: Router }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.createRoles;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.sharedStateService;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.liveapps;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.location;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZXMucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL3Jlc29sdmVycy9yb2xlcy5yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQVUsTUFBTSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDaEQsT0FBTyxFQUFDLFFBQVEsRUFBaUIsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBQzlELE9BQU8sRUFBUSxxQkFBcUIsRUFBaUIsc0JBQXNCLEVBQUUsb0JBQW9CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNuSSxPQUFPLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBc0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRSxPQUFPLEVBQWdCLEtBQUssRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzlELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBSWpELE1BQU0sT0FBTyxhQUFhOzs7Ozs7Ozs7SUFFeEIsWUFBb0Isa0JBQXdDLEVBQVUsb0JBQTRDLEVBQVUsSUFBZ0IsRUFBVSxRQUF5QixFQUFVLFFBQWtCLEVBQVUsTUFBYztRQUEvTSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXNCO1FBQVUseUJBQW9CLEdBQXBCLG9CQUFvQixDQUF3QjtRQUFVLFNBQUksR0FBSixJQUFJLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBMkIzTixnQkFBVzs7Ozs7UUFBRyxDQUFDLE1BQWUsRUFBRSxLQUFzQixFQUFTLEVBQUU7O2tCQUNqRSxTQUFTLEdBQW9CLEVBQUU7WUFDckMsS0FBSyxDQUFDLE9BQU87Ozs7WUFBQyxJQUFJLENBQUMsRUFBRTs7c0JBQ2IsV0FBVyxHQUFHLE1BQU0sQ0FBQyxJQUFJOzs7O2dCQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUNwQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ25DLENBQUMsRUFDQTtnQkFDRCxJQUFJLFdBQVcsRUFBRTtvQkFDZixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUN0QjtZQUNILENBQUMsRUFBQyxDQUFBO1lBQ0YsT0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBRSxDQUFDLENBQUM7UUFDbEYsQ0FBQyxFQUFBO0lBdENELENBQUM7Ozs7SUFFRCxPQUFPOzs7Y0FHQyxxQkFBcUIsR0FBRyxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUM7OztjQUk1SSxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FDckUsT0FBTzs7OztRQUFDLFNBQVMsQ0FBQyxFQUFFOztrQkFDVixTQUFTLEdBQUcsU0FBUyxDQUFDLHdCQUF3QixDQUFDLEVBQUU7WUFDdkQscUJBQXFCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDOztrQkFDOUMsY0FBYyxHQUFHLHFCQUFxQixDQUFDLE9BQU8sRUFBRTs7a0JBQ2hELE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUM7WUFDbkgsT0FBTyxRQUFRLENBQUMsY0FBYyxFQUFFLE9BQU8sQ0FBQyxDQUFDLElBQUksQ0FDM0MsR0FBRzs7OztZQUFDLENBQUMsQ0FBQyxVQUFVLEVBQUUsU0FBUyxDQUFDLEVBQUUsRUFBRTtnQkFDOUIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlELENBQUMsRUFBQyxDQUFDLENBQUM7UUFDUixDQUFDLEVBQ0YsQ0FDRjtRQUVELE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7OztZQTVCRixVQUFVOzs7O1lBVGtFLG9CQUFvQjtZQUE1QyxzQkFBc0I7WUFHbkUsVUFBVTtZQUpWLGVBQWU7WUFNZixRQUFRO1lBUkMsTUFBTTs7Ozs7OztJQTBDckIsb0NBWUM7Ozs7O0lBdkNXLDJDQUFnRDs7Ozs7SUFBRSw2Q0FBb0Q7Ozs7O0lBQUUsNkJBQXdCOzs7OztJQUFFLGlDQUFpQzs7Ozs7SUFBRSxpQ0FBMEI7Ozs7O0lBQUUsK0JBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtSZXNvbHZlLCBSb3V0ZXJ9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge2ZvcmtKb2luLCBPYnNlcnZhYmxlLCBvZn0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0xpdmVBcHBzU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvbGl2ZS1hcHBzLnNlcnZpY2UnO1xuaW1wb3J0IHtDbGFpbSwgR2VuZXJhbENvbmZpZ1Jlc29sdmVyLCBSb2xlQXR0cmlidXRlLCBUY0dlbmVyYWxDb25maWdTZXJ2aWNlLCBUY1NoYXJlZFN0YXRlU2VydmljZX0gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliJztcbmltcG9ydCB7ZmxhdE1hcCwgbWFwLCBtZXJnZU1hcCwgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0dyb3VwLCBHcm91cHMsIFJvbGVzfSBmcm9tICcuLi9tb2RlbHMvdGMtZ3JvdXBzLWRhdGEnO1xuaW1wb3J0IHtIdHRwQ2xpZW50fSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge1RjQ2FzZUNhcmRDb25maWdTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy90Yy1jYXNlLWNhcmQtY29uZmlnLnNlcnZpY2UnO1xuaW1wb3J0IHtMb2NhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7Q2xhaW1zUmVzb2x2ZXJ9IGZyb20gJy4vY2xhaW1zLnJlc29sdmVyJztcbmltcG9ydCB7Z3JvdXB9IGZyb20gJ0Bhbmd1bGFyL2FuaW1hdGlvbnMnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUm9sZXNSZXNvbHZlciBpbXBsZW1lbnRzIFJlc29sdmU8T2JzZXJ2YWJsZTxSb2xlcz4+IHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNoYXJlZFN0YXRlU2VydmljZTogVGNTaGFyZWRTdGF0ZVNlcnZpY2UsIHByaXZhdGUgZ2VuZXJhbENvbmZpZ1NlcnZpY2U6IFRjR2VuZXJhbENvbmZpZ1NlcnZpY2UsIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCwgcHJpdmF0ZSBsaXZlYXBwczogTGl2ZUFwcHNTZXJ2aWNlLCBwcml2YXRlIGxvY2F0aW9uOiBMb2NhdGlvbiwgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlcikge1xuICB9XG5cbiAgcmVzb2x2ZSgpOiBPYnNlcnZhYmxlPFJvbGVzPiB7XG5cbiAgICAvLyB3ZSB3aWxsIG5lZWQgdGhlIGdlbmVyYWwgY29uZmlnIHRvIHVuZGVyc3RhbmQgdGhlIHJvbGVzIGRlZmluaXRpb25cbiAgICBjb25zdCBnZW5lcmFsQ29uZmlnUmVzb2x2ZXIgPSBuZXcgR2VuZXJhbENvbmZpZ1Jlc29sdmVyKHRoaXMuc2hhcmVkU3RhdGVTZXJ2aWNlLCB0aGlzLmdlbmVyYWxDb25maWdTZXJ2aWNlLCB0aGlzLmh0dHAsIHRoaXMubG9jYXRpb24sIHRoaXMucm91dGVyKTtcblxuICAgIC8vIGFpbSBpcyB0byByZXR1cm4gYW4gb2JqZWN0IHRoYXQgb25seSBjb250YWlucyByb2xlcyB3aGVyZSB0aGUgdXNlciBpcyBhIG1lbWJlciBvZiB0aGUgbWF0Y2hpbmcgZ3JvdXBcblxuICAgIGNvbnN0IGNsYWltUmVzb2x2ZXIkID0gbmV3IENsYWltc1Jlc29sdmVyKHRoaXMubGl2ZWFwcHMpLnJlc29sdmUoKS5waXBlKFxuICAgICAgZmxhdE1hcChjbGFpbWluZm8gPT4ge1xuICAgICAgICAgIGNvbnN0IHNhbmRib3hJZCA9IGNsYWltaW5mby5wcmltYXJ5UHJvZHVjdGlvblNhbmRib3guaWQ7XG4gICAgICAgICAgZ2VuZXJhbENvbmZpZ1Jlc29sdmVyLnNldFNhbmRib3goTnVtYmVyKHNhbmRib3hJZCkpO1xuICAgICAgICAgIGNvbnN0IGdlbmVyYWxDb25maWckID0gZ2VuZXJhbENvbmZpZ1Jlc29sdmVyLnJlc29sdmUoKTtcbiAgICAgICAgICBjb25zdCBncm91cHMkID0gdGhpcy5saXZlYXBwcy5nZXRHcm91cE1lbWJlcnNoaXBzKCtjbGFpbWluZm8ucHJpbWFyeVByb2R1Y3Rpb25TYW5kYm94LmlkLCBjbGFpbWluZm8uaWQsIDEwMDAsIHRydWUpO1xuICAgICAgICAgIHJldHVybiBmb3JrSm9pbihnZW5lcmFsQ29uZmlnJCwgZ3JvdXBzJCkucGlwZShcbiAgICAgICAgICAgIG1hcCgoW2NvbmZpZ0RhdGEsIGdyb3VwRGF0YV0pID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUm9sZXMoZ3JvdXBEYXRhLmdyb3VwcywgY29uZmlnRGF0YS5yb2xlcyk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuXG4gICAgcmV0dXJuIGNsYWltUmVzb2x2ZXIkO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVSb2xlcyA9IChncm91cHM6IEdyb3VwW10sIHJvbGVzOiBSb2xlQXR0cmlidXRlW10pOiBSb2xlcyA9PiB7XG4gICAgY29uc3QgY2FsY1JvbGVzOiBSb2xlQXR0cmlidXRlW10gPSBbXTtcbiAgICByb2xlcy5mb3JFYWNoKHJvbGUgPT4ge1xuICAgICAgY29uc3QgdGFyZ2V0R3JvdXAgPSBncm91cHMuZmluZChncnAgPT4ge1xuICAgICAgICByZXR1cm4gKGdycC5uYW1lID09PSByb2xlLmdyb3VwKTtcbiAgICAgIH1cbiAgICAgIClcbiAgICAgIGlmICh0YXJnZXRHcm91cCkge1xuICAgICAgICBjYWxjUm9sZXMucHVzaChyb2xlKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBuZXcgUm9sZXMoKS5kZXNlcmlhbGl6ZShuZXcgUm9sZXMoKS5kZXNlcmlhbGl6ZSggeyByb2xlczogY2FsY1JvbGVzIH0gKSk7XG4gIH1cbn1cbiJdfQ==