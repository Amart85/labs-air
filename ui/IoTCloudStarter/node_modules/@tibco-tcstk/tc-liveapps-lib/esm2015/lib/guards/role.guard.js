/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// This guard is to check whether the user has appropriate role to access a route based on config settings
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { LiveAppsService } from '../services/live-apps.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { forkJoin } from 'rxjs';
import { TcCoreCommonFunctions, TcGeneralConfigService, TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { Location } from '@angular/common';
import { RouteAccessControlConfig } from '../models/tc-groups-data';
import { RolesResolver } from '../resolvers/roles.resolver';
export class RoleGuard {
    /**
     * @param {?} liveapps
     * @param {?} router
     * @param {?} http
     * @param {?} location
     * @param {?} sharedStateService
     * @param {?} generalConfigService
     */
    constructor(liveapps, router, http, location, sharedStateService, generalConfigService) {
        this.liveapps = liveapps;
        this.router = router;
        this.http = http;
        this.location = location;
        this.sharedStateService = sharedStateService;
        this.generalConfigService = generalConfigService;
        this.DEFAULT_CONFIG_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/routeAccessControl.json');
        // can be used to load defaultAppConfig from a JSON config
        this.getRouteAccessControlConfig = (/**
         * @return {?}
         */
        () => {
            /** @type {?} */
            const headers = new HttpHeaders().set('cacheResponse', 'true');
            return this.http.get(this.DEFAULT_CONFIG_URL, { headers }).pipe(map((/**
             * @param {?} configContents
             * @return {?}
             */
            configContents => new RouteAccessControlConfig().deserialize(configContents))));
        });
        this.getRouteDef = (/**
         * @param {?} routeAccessConfig
         * @param {?} route
         * @return {?}
         */
        (routeAccessConfig, route) => {
            return routeAccessConfig.routes.find((/**
             * @param {?} routeRec
             * @return {?}
             */
            routeRec => {
                return (routeRec.routeUrl === route.routeConfig.path);
            }));
        });
        this.hasAccess = (/**
         * @param {?} config
         * @param {?} roles
         * @return {?}
         */
        (config, roles) => {
            /** @type {?} */
            const reqRole = roles.roles.find((/**
             * @param {?} role
             * @return {?}
             */
            role => {
                return (role.id === config.requiredRoleId);
            }));
            return reqRole ? true : false;
        });
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivate(route, state) {
        // get route config
        /** @type {?} */
        const routeConfig$ = this.getRouteAccessControlConfig();
        // we will need the roles we currently have
        /** @type {?} */
        const currentRolesRes = new RolesResolver(this.sharedStateService, this.generalConfigService, this.http, this.liveapps, this.location);
        /** @type {?} */
        const currentRoles$ = currentRolesRes.resolve();
        // run both in parallel then check access
        /** @type {?} */
        const decision$ = forkJoin(routeConfig$, currentRoles$).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        ([routeConfig, currentRoles]) => {
            /** @type {?} */
            const routeConfigRec = this.getRouteDef(routeConfig, route);
            if (this.hasAccess(routeConfigRec, currentRoles)) {
                return true;
            }
            else {
                console.error('You do not have access to this page: ', route);
                this.router.navigate(['/errorHandler/' + 'NO_ROUTE_ACCESS/' + 'Route <' + route.url + '> requires role <' + routeConfigRec.requiredRoleId + '>']);
                return false;
            }
        })));
        return decision$;
    }
}
RoleGuard.decorators = [
    { type: Injectable }
];
/** @nocollapse */
RoleGuard.ctorParameters = () => [
    { type: LiveAppsService },
    { type: Router },
    { type: HttpClient },
    { type: Location },
    { type: TcSharedStateService },
    { type: TcGeneralConfigService }
];
if (false) {
    /** @type {?} */
    RoleGuard.prototype.DEFAULT_CONFIG_URL;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.getRouteAccessControlConfig;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.getRouteDef;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.hasAccess;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.liveapps;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.router;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.http;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.location;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.sharedStateService;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.generalConfigService;
}
//# sourceMappingURL=data:application/json;base64,