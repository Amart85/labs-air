/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// This guard is to check case Id is valid before loading route
// We have to get sandbox Id then pass that to the getCaseByRef call
// This will return (observable) true if the case exists or false if it doesnt
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { LiveAppsService } from '../services/live-apps.service';
import { catchError, flatMap, map } from 'rxjs/operators';
import { throwError } from 'rxjs';
import { ClaimsResolver } from '../resolvers/claims.resolver';
export class CaseGuard {
    /**
     * @param {?} liveapps
     * @param {?} router
     */
    constructor(liveapps, router) {
        this.liveapps = liveapps;
        this.router = router;
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    canActivate(route, state) {
        // get app config
        /** @type {?} */
        const caseRef = route.url[route.url.length - 1].path;
        /** @type {?} */
        const claimsResolver = new ClaimsResolver(this.liveapps);
        /** @type {?} */
        const decision = claimsResolver.resolve()
            .pipe(
        // use flatMap so we can pass the config into the getCaseByRef call)
        flatMap((/**
         * @param {?} claims
         * @return {?}
         */
        claims => {
            return this.liveapps.getCaseByRef(claims.primaryProductionSandbox.id, caseRef)
                .pipe(map((/**
             * @param {?} caseinfo
             * @return {?}
             */
            caseinfo => {
                if (caseinfo) {
                    return true;
                }
                else {
                    // TODO: Externalize redirect URL
                    this.router.navigate(['/starterApp/home'], {});
                    return false;
                }
            })), catchError((/**
             * @param {?} error
             * @return {?}
             */
            error => {
                // if the case is not found (someone tried to manually route to an invalid caseref) then redirect back to home
                console.error('Unable to load case ' + caseRef + ' are you sure that is a valid case reference?');
                // TODO: Externalize redirect URL
                this.router.navigate(['/starterApp/home'], {});
                return throwError(error);
            })));
        })));
        return decision;
    }
}
CaseGuard.decorators = [
    { type: Injectable }
];
/** @nocollapse */
CaseGuard.ctorParameters = () => [
    { type: LiveAppsService },
    { type: Router }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    CaseGuard.prototype.liveapps;
    /**
     * @type {?}
     * @private
     */
    CaseGuard.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1saXZlYXBwcy1saWIvIiwic291cmNlcyI6WyJsaWIvZ3VhcmRzL2Nhc2UuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUlBLE9BQU8sRUFBUyxVQUFVLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDakQsT0FBTyxFQUFDLE1BQU0sRUFBMkQsTUFBTSxpQkFBaUIsQ0FBQztBQUNqRyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sK0JBQStCLENBQUM7QUFFOUQsT0FBTyxFQUFDLFVBQVUsRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFXLE1BQU0sZ0JBQWdCLENBQUM7QUFDbEUsT0FBTyxFQUFpQixVQUFVLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDaEQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLDhCQUE4QixDQUFDO0FBSTVELE1BQU0sT0FBTyxTQUFTOzs7OztJQUVwQixZQUFvQixRQUF5QixFQUFVLE1BQWM7UUFBakQsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO0lBQ3JFLENBQUM7Ozs7OztJQUVELFdBQVcsQ0FBQyxLQUE2QixFQUFFLEtBQTBCOzs7Y0FFN0QsT0FBTyxHQUFHLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSTs7Y0FFOUMsY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUM7O2NBRWxELFFBQVEsR0FBd0IsY0FBYyxDQUFDLE9BQU8sRUFBRTthQUMzRCxJQUFJO1FBQ0gsb0VBQW9FO1FBQ3BFLE9BQU87Ozs7UUFDTCxNQUFNLENBQUMsRUFBRTtZQUNQLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLHdCQUF3QixDQUFDLEVBQUUsRUFBRSxPQUFPLENBQUM7aUJBQzNFLElBQUksQ0FDSCxHQUFHOzs7O1lBQUMsUUFBUSxDQUFDLEVBQUU7Z0JBQ2IsSUFBSSxRQUFRLEVBQUU7b0JBQ1osT0FBTyxJQUFJLENBQUM7aUJBQ2I7cUJBQU07b0JBQ0wsaUNBQWlDO29CQUNqQyxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7b0JBQy9DLE9BQU8sS0FBSyxDQUFDO2lCQUNkO1lBQ0gsQ0FBQyxFQUFDLEVBQ0YsVUFBVTs7OztZQUFDLEtBQUssQ0FBQyxFQUFFO2dCQUNqQiw4R0FBOEc7Z0JBQzlHLE9BQU8sQ0FBQyxLQUFLLENBQUMsc0JBQXNCLEdBQUcsT0FBTyxHQUFHLCtDQUErQyxDQUFDLENBQUM7Z0JBQ2xHLGlDQUFpQztnQkFDakMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO2dCQUMvQyxPQUFPLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMzQixDQUFDLEVBQUMsQ0FDSCxDQUFDO1FBQ04sQ0FBQyxFQUNGLENBQ0Y7UUFFSCxPQUFPLFFBQVEsQ0FBQztJQUNsQixDQUFDOzs7WUF6Q0YsVUFBVTs7OztZQVBILGVBQWU7WUFEZixNQUFNOzs7Ozs7O0lBV0EsNkJBQWlDOzs7OztJQUFFLDJCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZ3VhcmQgaXMgdG8gY2hlY2sgY2FzZSBJZCBpcyB2YWxpZCBiZWZvcmUgbG9hZGluZyByb3V0ZVxuLy8gV2UgaGF2ZSB0byBnZXQgc2FuZGJveCBJZCB0aGVuIHBhc3MgdGhhdCB0byB0aGUgZ2V0Q2FzZUJ5UmVmIGNhbGxcbi8vIFRoaXMgd2lsbCByZXR1cm4gKG9ic2VydmFibGUpIHRydWUgaWYgdGhlIGNhc2UgZXhpc3RzIG9yIGZhbHNlIGlmIGl0IGRvZXNudFxuXG5pbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZX0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1JvdXRlciwgQ2FuQWN0aXZhdGUsIEFjdGl2YXRlZFJvdXRlU25hcHNob3QsIFJvdXRlclN0YXRlU25hcHNob3R9IGZyb20gJ0Bhbmd1bGFyL3JvdXRlcic7XG5pbXBvcnQge0xpdmVBcHBzU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvbGl2ZS1hcHBzLnNlcnZpY2UnO1xuaW1wb3J0IHtIdHRwQ2xpZW50LCBIdHRwSGFuZGxlcn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtjYXRjaEVycm9yLCBmbGF0TWFwLCBtYXAsIG1lcmdlTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge09ic2VydmFibGUsIG9mLCB0aHJvd0Vycm9yfSBmcm9tICdyeGpzJztcbmltcG9ydCB7Q2xhaW1zUmVzb2x2ZXJ9IGZyb20gJy4uL3Jlc29sdmVycy9jbGFpbXMucmVzb2x2ZXInO1xuaW1wb3J0IHtDbGFpbX0gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhc2VHdWFyZCBpbXBsZW1lbnRzIENhbkFjdGl2YXRlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxpdmVhcHBzOiBMaXZlQXBwc1NlcnZpY2UsIHByaXZhdGUgcm91dGVyOiBSb3V0ZXIpIHtcbiAgfVxuXG4gIGNhbkFjdGl2YXRlKHJvdXRlOiBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBzdGF0ZTogUm91dGVyU3RhdGVTbmFwc2hvdCk6IE9ic2VydmFibGU8Ym9vbGVhbj4ge1xuICAgIC8vIGdldCBhcHAgY29uZmlnXG4gICAgY29uc3QgY2FzZVJlZiA9IHJvdXRlLnVybFtyb3V0ZS51cmwubGVuZ3RoIC0gMV0ucGF0aDtcblxuICAgIGNvbnN0IGNsYWltc1Jlc29sdmVyID0gbmV3IENsYWltc1Jlc29sdmVyKHRoaXMubGl2ZWFwcHMpO1xuXG4gICAgY29uc3QgZGVjaXNpb246IE9ic2VydmFibGU8Ym9vbGVhbj4gPSBjbGFpbXNSZXNvbHZlci5yZXNvbHZlKClcbiAgICAgIC5waXBlKFxuICAgICAgICAvLyB1c2UgZmxhdE1hcCBzbyB3ZSBjYW4gcGFzcyB0aGUgY29uZmlnIGludG8gdGhlIGdldENhc2VCeVJlZiBjYWxsKVxuICAgICAgICBmbGF0TWFwKFxuICAgICAgICAgIGNsYWltcyA9PiB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXZlYXBwcy5nZXRDYXNlQnlSZWYoY2xhaW1zLnByaW1hcnlQcm9kdWN0aW9uU2FuZGJveC5pZCwgY2FzZVJlZilcbiAgICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgbWFwKGNhc2VpbmZvID0+IHtcbiAgICAgICAgICAgICAgICAgIGlmIChjYXNlaW5mbykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFRPRE86IEV4dGVybmFsaXplIHJlZGlyZWN0IFVSTFxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJvdXRlci5uYXZpZ2F0ZShbJy9zdGFydGVyQXBwL2hvbWUnXSwge30pO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgY2F0Y2hFcnJvcihlcnJvciA9PiB7XG4gICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgY2FzZSBpcyBub3QgZm91bmQgKHNvbWVvbmUgdHJpZWQgdG8gbWFudWFsbHkgcm91dGUgdG8gYW4gaW52YWxpZCBjYXNlcmVmKSB0aGVuIHJlZGlyZWN0IGJhY2sgdG8gaG9tZVxuICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIGxvYWQgY2FzZSAnICsgY2FzZVJlZiArICcgYXJlIHlvdSBzdXJlIHRoYXQgaXMgYSB2YWxpZCBjYXNlIHJlZmVyZW5jZT8nKTtcbiAgICAgICAgICAgICAgICAgIC8vIFRPRE86IEV4dGVybmFsaXplIHJlZGlyZWN0IFVSTFxuICAgICAgICAgICAgICAgICAgdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycvc3RhcnRlckFwcC9ob21lJ10sIHt9KTtcbiAgICAgICAgICAgICAgICAgIHJldHVybiB0aHJvd0Vycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgKTtcblxuICAgIHJldHVybiBkZWNpc2lvbjtcbiAgfVxuXG59XG4iXX0=