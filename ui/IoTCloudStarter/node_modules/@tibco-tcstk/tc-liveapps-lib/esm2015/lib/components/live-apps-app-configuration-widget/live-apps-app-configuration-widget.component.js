/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
/**
 * Manages liveapps settings for Config page
 *
 * \@example <tcla-live-apps-app-configuration-widget></tcla-live-apps-app-configuration-widget>
 */
export class LiveAppsAppConfigurationWidgetComponent {
    constructor() {
        /**
         * ~event configChanged : Configuration values changed
         * ~payload CaseCardConfig : CaseCardConfig object when configuration is changed (so called can do a save with data)
         */
        this.configChanged = new EventEmitter();
        /**
         * ~event appSelected : Case Type selected
         * ~payload CaseType : CaseType object of app selected
         */
        this.appSelected = new EventEmitter();
        this.handleConfigAppSelection = (/**
         * @param {?} application
         * @return {?}
         */
        (application) => {
            // handle selection of app to config
            this.selectedAppConfig = application;
            this.appSelected.emit(application);
        });
        this.handleConfigChanged = (/**
         * @param {?} caseCardConfig
         * @return {?}
         */
        (caseCardConfig) => {
            this.configChanged.emit(caseCardConfig);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
LiveAppsAppConfigurationWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-app-configuration-widget',
                template: "<div fxFill style=\"margin: 0px 20px 20px 20px\" fxLayout=\"column\">\n  <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n    <span>Configure Live App Summary Cards for:</span>\n    <tcla-live-apps-applications style=\"margin-left: 5px; margin-top: -1px\" [sandboxId]=\"sandboxId\" [appIds]=\"appIds\" [selectFirstApp]=\"true\" (selection)=\"handleConfigAppSelection($event)\"></tcla-live-apps-applications>\n  </div>\n  <div fxLayout=\"column\" fxFlex style=\"overflow: auto\">\n    <tcla-live-apps-application-configuration *ngIf=\"selectedAppConfig\" [sandboxId]=\"sandboxId\" [uiAppId]=\"uiAppId\" [appId]=\"selectedAppConfig.applicationId\" [folderId]=\"folderId\" [appTypeLabel]=\"selectedAppConfig.label\" (configChanged)=\"handleConfigChanged($event)\"></tcla-live-apps-application-configuration>\n  </div>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
LiveAppsAppConfigurationWidgetComponent.ctorParameters = () => [];
LiveAppsAppConfigurationWidgetComponent.propDecorators = {
    appIds: [{ type: Input }],
    sandboxId: [{ type: Input }],
    uiAppId: [{ type: Input }],
    folderId: [{ type: Input }],
    configChanged: [{ type: Output }],
    appSelected: [{ type: Output }]
};
if (false) {
    /**
     * The list of LA Application IDs you want to handle
     * @type {?}
     */
    LiveAppsAppConfigurationWidgetComponent.prototype.appIds;
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsAppConfigurationWidgetComponent.prototype.sandboxId;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     * @type {?}
     */
    LiveAppsAppConfigurationWidgetComponent.prototype.uiAppId;
    /**
     * The organisation folder to store/retrieve documents
     * @type {?}
     */
    LiveAppsAppConfigurationWidgetComponent.prototype.folderId;
    /**
     * ~event configChanged : Configuration values changed
     * ~payload CaseCardConfig : CaseCardConfig object when configuration is changed (so called can do a save with data)
     * @type {?}
     */
    LiveAppsAppConfigurationWidgetComponent.prototype.configChanged;
    /**
     * ~event appSelected : Case Type selected
     * ~payload CaseType : CaseType object of app selected
     * @type {?}
     */
    LiveAppsAppConfigurationWidgetComponent.prototype.appSelected;
    /** @type {?} */
    LiveAppsAppConfigurationWidgetComponent.prototype.selectedAppConfig;
    /** @type {?} */
    LiveAppsAppConfigurationWidgetComponent.prototype.handleConfigAppSelection;
    /** @type {?} */
    LiveAppsAppConfigurationWidgetComponent.prototype.handleConfigChanged;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWFwcC1jb25maWd1cmF0aW9uLXdpZGdldC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbGl2ZS1hcHBzLWFwcC1jb25maWd1cmF0aW9uLXdpZGdldC9saXZlLWFwcHMtYXBwLWNvbmZpZ3VyYXRpb24td2lkZ2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQzs7Ozs7O0FBaUI3RSxNQUFNLE9BQU8sdUNBQXVDO0lBbUNsRDs7Ozs7UUFWVSxrQkFBYSxHQUFpQyxJQUFJLFlBQVksRUFBa0IsQ0FBQzs7Ozs7UUFNakYsZ0JBQVcsR0FBMkIsSUFBSSxZQUFZLEVBQVksQ0FBQztRQU03RSw2QkFBd0I7Ozs7UUFBRyxDQUFDLFdBQXFCLEVBQUUsRUFBRTtZQUNuRCxvQ0FBb0M7WUFDcEMsSUFBSSxDQUFDLGlCQUFpQixHQUFHLFdBQVcsQ0FBQztZQUNyQyxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUNyQyxDQUFDLEVBQUE7UUFFRCx3QkFBbUI7Ozs7UUFBRyxDQUFDLGNBQThCLEVBQUUsRUFBRTtZQUN2RCxJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQztRQUMxQyxDQUFDLEVBQUE7SUFWZSxDQUFDOzs7O0lBWWpCLFFBQVE7SUFDUixDQUFDOzs7WUF2REYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSx5Q0FBeUM7Z0JBQ25ELDAwQkFBa0U7O2FBRW5FOzs7OztxQkFPRSxLQUFLO3dCQUtMLEtBQUs7c0JBS0wsS0FBSzt1QkFLTCxLQUFLOzRCQU1MLE1BQU07MEJBTU4sTUFBTTs7Ozs7OztJQTNCUCx5REFBMEI7Ozs7O0lBSzFCLDREQUEyQjs7Ozs7SUFLM0IsMERBQXlCOzs7OztJQUt6QiwyREFBMEI7Ozs7OztJQU0xQixnRUFBMkY7Ozs7OztJQU0zRiw4REFBNkU7O0lBRTdFLG9FQUFtQzs7SUFJbkMsMkVBSUM7O0lBRUQsc0VBRUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDYXNlVHlwZX0gZnJvbSAnLi4vLi4vbW9kZWxzL2xpdmVhcHBzZGF0YSc7XG5pbXBvcnQge0Nhc2VDYXJkQ29uZmlnfSBmcm9tICcuLi8uLi9tb2RlbHMvdGMtY2FzZS1jYXJkLWNvbmZpZyc7XG5cblxuLyoqXG4gKiBNYW5hZ2VzIGxpdmVhcHBzIHNldHRpbmdzIGZvciBDb25maWcgcGFnZVxuICpcbiAqQGV4YW1wbGUgPHRjbGEtbGl2ZS1hcHBzLWFwcC1jb25maWd1cmF0aW9uLXdpZGdldD48L3RjbGEtbGl2ZS1hcHBzLWFwcC1jb25maWd1cmF0aW9uLXdpZGdldD5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGNsYS1saXZlLWFwcHMtYXBwLWNvbmZpZ3VyYXRpb24td2lkZ2V0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpdmUtYXBwcy1hcHAtY29uZmlndXJhdGlvbi13aWRnZXQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9saXZlLWFwcHMtYXBwLWNvbmZpZ3VyYXRpb24td2lkZ2V0LmNvbXBvbmVudC5jc3MnXVxufSlcblxuXG5leHBvcnQgY2xhc3MgTGl2ZUFwcHNBcHBDb25maWd1cmF0aW9uV2lkZ2V0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIExBIEFwcGxpY2F0aW9uIElEcyB5b3Ugd2FudCB0byBoYW5kbGVcbiAgICovXG4gIEBJbnB1dCgpIGFwcElkczogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIHNhbmRib3hJZCAtIHRoaXMgY29tZXMgZnJvbSBjbGFpbXMgcmVzb2x2ZXJcbiAgICovXG4gIEBJbnB1dCgpIHNhbmRib3hJZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgQXBwbGljYXRpb24gSUQgb2YgdGhlIFVJIChzaG91bGQgaWRlYWxseSBiZSB1bmlxdWUgYXMgaXQgaXMgc2hhcmVkIHN0YXRlIGtleSlcbiAgICovXG4gIEBJbnB1dCgpIHVpQXBwSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG9yZ2FuaXNhdGlvbiBmb2xkZXIgdG8gc3RvcmUvcmV0cmlldmUgZG9jdW1lbnRzXG4gICAqL1xuICBASW5wdXQoKSBmb2xkZXJJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiB+ZXZlbnQgY29uZmlnQ2hhbmdlZCA6IENvbmZpZ3VyYXRpb24gdmFsdWVzIGNoYW5nZWRcbiAgICogfnBheWxvYWQgQ2FzZUNhcmRDb25maWcgOiBDYXNlQ2FyZENvbmZpZyBvYmplY3Qgd2hlbiBjb25maWd1cmF0aW9uIGlzIGNoYW5nZWQgKHNvIGNhbGxlZCBjYW4gZG8gYSBzYXZlIHdpdGggZGF0YSlcbiAgICovXG4gIEBPdXRwdXQoKSBjb25maWdDaGFuZ2VkOiBFdmVudEVtaXR0ZXI8Q2FzZUNhcmRDb25maWc+ID0gbmV3IEV2ZW50RW1pdHRlcjxDYXNlQ2FyZENvbmZpZz4oKTtcblxuICAvKipcbiAgICogfmV2ZW50IGFwcFNlbGVjdGVkIDogQ2FzZSBUeXBlIHNlbGVjdGVkXG4gICAqIH5wYXlsb2FkIENhc2VUeXBlIDogQ2FzZVR5cGUgb2JqZWN0IG9mIGFwcCBzZWxlY3RlZFxuICAgKi9cbiAgQE91dHB1dCgpIGFwcFNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8Q2FzZVR5cGU+ID0gbmV3IEV2ZW50RW1pdHRlcjxDYXNlVHlwZT4oKTtcblxuICBwdWJsaWMgc2VsZWN0ZWRBcHBDb25maWc6IENhc2VUeXBlO1xuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgaGFuZGxlQ29uZmlnQXBwU2VsZWN0aW9uID0gKGFwcGxpY2F0aW9uOiBDYXNlVHlwZSkgPT4ge1xuICAgIC8vIGhhbmRsZSBzZWxlY3Rpb24gb2YgYXBwIHRvIGNvbmZpZ1xuICAgIHRoaXMuc2VsZWN0ZWRBcHBDb25maWcgPSBhcHBsaWNhdGlvbjtcbiAgICB0aGlzLmFwcFNlbGVjdGVkLmVtaXQoYXBwbGljYXRpb24pO1xuICB9XG5cbiAgaGFuZGxlQ29uZmlnQ2hhbmdlZCA9IChjYXNlQ2FyZENvbmZpZzogQ2FzZUNhcmRDb25maWcpID0+IHtcbiAgICB0aGlzLmNvbmZpZ0NoYW5nZWQuZW1pdChjYXNlQ2FyZENvbmZpZyk7XG4gIH1cblxuICBuZ09uSW5pdCgpIHtcbiAgfVxuXG59XG4iXX0=