/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BaseChartDirective } from 'ng2-charts';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { TcLiveAppsReportingService } from '../../services/tc-live-apps-reporting.service';
import { take, takeUntil } from 'rxjs/operators';
import 'chartjs-plugin-datalabels';
import { DEFAULT_COLORS, DEFAULT_TYPE_COLOR } from '../../services/tc-case-card-config.service';
/**
 * Home page active cases widget sub component
 *
 * \@example <tcla-live-apps-active-cases-for-type-report></tcla-live-apps-active-cases-for-type-report>
 */
export class LiveAppsActiveCasesForTypeReportComponent extends LiveAppsComponent {
    /**
     * @param {?} reportingService
     */
    constructor(reportingService) {
        super();
        this.reportingService = reportingService;
        /**
         * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
         */
        this.maxLegendItems = this.maxLegendItems ? this.maxLegendItems : 8;
        /**
         * Whether to show percentages or raw case numbers on the doughnut chart
         */
        this.showPercentages = this.showPercentages ? this.showPercentages : false;
        /**
         * ~event selectedCaseTypeState : Case Type state selected in vizualization
         * ~payload CaseTypeStateReportStateInfo : CaseTypeStateReportStateInfo object selected from component (to drive caller to display something different (drill down))
         */
        this.selectedCaseTypeState = new EventEmitter();
        this.renderChart = false;
        this.doughnutChartData = [];
        this.doughnutChartType = 'doughnut';
        this.chartColors = [];
        this.defaultColors = DEFAULT_COLORS.slice().reverse();
        this.getCaseCount = (/**
         * @return {?}
         */
        () => {
            return this.totalActiveCaseCount;
        });
        this.doughnutChartOptions = {
            responsive: true,
            maintainAspectRatio: false,
            legend: {
                position: 'left'
            },
            layout: {
                padding: {
                    left: 0,
                    right: 0,
                    top: 10,
                    bottom: 10
                }
            },
            plugins: {
                doughnutlabel: {
                    labels: [
                        {
                            text: this.getCaseCount,
                            font: {
                                size: '20',
                                family: 'Source Sans Pro',
                                weight: 'bold'
                            },
                            color: '#FF7800'
                        },
                        {
                            text: 'cases',
                            font: {
                                size: '16',
                                family: 'Source Sans Pro',
                            },
                            color: '#FF7800'
                        }
                    ]
                },
                datalabels: {
                    anchor: 'end',
                    backgroundColor: (/**
                     * @param {?} context
                     * @return {?}
                     */
                    function (context) {
                        return context.dataset.backgroundColor;
                    }),
                    borderColor: 'white',
                    borderRadius: 25,
                    borderWidth: 2,
                    color: 'white',
                    display: (/**
                     * @param {?} context
                     * @return {?}
                     */
                    function (context) {
                        /** @type {?} */
                        const dataset = context.dataset;
                        /** @type {?} */
                        const value = dataset.data[context.dataIndex];
                        return value > 0;
                    }),
                    font: {
                        weight: 'bold'
                    },
                    formatter: (/**
                     * @param {?} value
                     * @param {?} ctx
                     * @return {?}
                     */
                    (value, ctx) => {
                        /** @type {?} */
                        const datasets = ctx.chart.data.datasets;
                        if (datasets.indexOf(ctx.dataset) === datasets.length - 1) {
                            if (this.showPercentages) {
                                /** @type {?} */
                                const sum = datasets[0].data.reduce((/**
                                 * @param {?} a
                                 * @param {?} b
                                 * @return {?}
                                 */
                                (a, b) => a + b), 0);
                                /** @type {?} */
                                const percentage = Math.round((value / sum) * 100) + '%';
                                return percentage;
                            }
                            else {
                                return value;
                            }
                        }
                        else {
                            return 0;
                        }
                    })
                }
            }
        };
        this.initReportDataToChart = (/**
         * @param {?} reportData
         * @param {?} status
         * @return {?}
         */
        (reportData, status) => {
            this.doughnutChartData = [];
            this.totalActiveCaseCount = 0;
            /** @type {?} */
            const casesByStateArray = [];
            /** @type {?} */
            const labels = [];
            /** @type {?} */
            const colorArray = [];
            // remove any taken colors from the defaultColors
            // we have to do this before parsing the record to avoid getting same colors
            reportData.caseStates.forEach((/**
             * @param {?} cs
             * @return {?}
             */
            cs => {
                // remove color from defaults
                if (cs.stateInfo.color) {
                    this.defaultColors = this.defaultColors.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item !== cs.stateInfo.color));
                }
            }));
            // parse record
            reportData.caseStates.forEach((/**
             * @param {?} caseState
             * @return {?}
             */
            caseState => {
                this.totalActiveCaseCount = this.totalActiveCaseCount + caseState.caseCount;
                casesByStateArray.push(caseState.caseCount);
                labels.push(caseState.stateInfo.label);
                // we will re-color anything that has the default color
                /** @type {?} */
                let col;
                if (caseState.stateInfo.color && caseState.stateInfo.color !== DEFAULT_TYPE_COLOR) {
                    // use the set color
                    col = caseState.stateInfo.color;
                }
                else {
                    // try and get a color from the palette
                    /** @type {?} */
                    const palCol = this.defaultColors.pop();
                    if (palCol) {
                        col = palCol;
                    }
                    else {
                        // if no more in palette use a random color!
                        /** @type {?} */
                        const i = Math.random() * 0xffffff;
                        /** @type {?} */
                        const p = parseInt(i.toString(), 0);
                        col = '#' + p.toString(16);
                    }
                }
                colorArray.push(col);
            }));
            this.doughnutChartData.push(casesByStateArray);
            this.doughnutChartLabels = labels;
            this.chartColors.push({ backgroundColor: colorArray });
            // showing more than 8 in the legend will take up too much space
            this.doughnutChartOptions.legend.display = labels.length <= 8;
            this.renderChart = true;
        });
        this.refresh = (/**
         * @return {?}
         */
        () => {
            this.reportingService.getCaseTypeStateReport(this.sandboxId, this.appId, this.typeId, false, this.uiAppId).pipe(take(1), takeUntil(this._destroyed$))
                .subscribe((/**
             * @param {?} report
             * @return {?}
             */
            report => {
                this.caseTypeStateReport = report;
                this.initReportDataToChart(report, status);
                return report;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => { this.errorMessage = 'Error retrieving case types report: ' + error.error.errorMsg; }));
        });
    }
    // events
    /**
     * @param {?} __0
     * @return {?}
     */
    chartClicked({ event, active }) {
        if (active.length > 0) {
            /** @type {?} */
            const chart = active[0]._chart;
            /** @type {?} */
            const activePoints = chart.getElementAtEvent(event);
            if (activePoints.length > 0) {
                // get the internal index of slice in pie chart
                /** @type {?} */
                const clickedElementIndex = activePoints[0]._index;
                /** @type {?} */
                const label = chart.data.labels[clickedElementIndex];
                // get value by index
                /** @type {?} */
                const value = chart.data.datasets[0].data[clickedElementIndex];
                console.log(clickedElementIndex, label, value);
                this.selectedCaseTypeState.emit(this.caseTypeStateReport.caseStates[clickedElementIndex].stateInfo);
            }
        }
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    chartHovered({ event, active }) {
        // console.log(event, active);
    }
    /**
     * @return {?}
     */
    ngAfterViewChecked() {
        if (this.componentDiv && this.caseTypeStateReport && this.componentDiv.nativeElement.offsetWidth) {
            if (this.widgetWidth !== this.componentDiv.nativeElement.offsetWidth || this.widgetHeight !== this.componentDiv.nativeElement.offsetHeight) {
                this.widgetWidth = this.componentDiv.nativeElement.offsetWidth;
                this.widgetHeight = this.componentDiv.nativeElement.offsetHeight;
                this.caseTypeStateReportChart.chart.resize();
            }
        }
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if (changes.appId && (changes.firstChange || (changes.appId.currentValue !== changes.appId.previousValue))) {
            this.refresh();
        }
    }
}
LiveAppsActiveCasesForTypeReportComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-active-cases-for-type-report',
                template: "<div #componentDiv fxLayout=\"column\" fxFlex style=\"overflow: auto\">\n  <div *ngIf=\"renderChart\" style=\"height:100%; width:100%; padding: 20px\" class=\"relative\">\n    <canvas #caseReportChart baseChart\n            [data]=\"doughnutChartData\"\n            [labels]=\"doughnutChartLabels\"\n            [chartType]=\"doughnutChartType\"\n            [options]=\"doughnutChartOptions\"\n            [colors]=\"chartColors\"\n            (chartHover)=\"chartHovered($event)\"\n            (chartClick)=\"chartClicked($event)\"\n    >\n    </canvas>\n  </div>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
LiveAppsActiveCasesForTypeReportComponent.ctorParameters = () => [
    { type: TcLiveAppsReportingService }
];
LiveAppsActiveCasesForTypeReportComponent.propDecorators = {
    sandboxId: [{ type: Input }],
    appId: [{ type: Input }],
    typeId: [{ type: Input }],
    uiAppId: [{ type: Input }],
    maxLegendItems: [{ type: Input }],
    showPercentages: [{ type: Input }],
    selectedCaseTypeState: [{ type: Output }],
    caseTypeStateReportChart: [{ type: ViewChild, args: [BaseChartDirective, { static: false },] }],
    componentDiv: [{ type: ViewChild, args: ['componentDiv', { static: false },] }]
};
if (false) {
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.sandboxId;
    /**
     * The LA Application Id
     * @type {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.appId;
    /**
     * The LA Application Type Id (generally 1)
     * @type {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.typeId;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     * @type {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.uiAppId;
    /**
     * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
     * @type {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.maxLegendItems;
    /**
     * Whether to show percentages or raw case numbers on the doughnut chart
     * @type {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.showPercentages;
    /**
     * ~event selectedCaseTypeState : Case Type state selected in vizualization
     * ~payload CaseTypeStateReportStateInfo : CaseTypeStateReportStateInfo object selected from component (to drive caller to display something different (drill down))
     * @type {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.selectedCaseTypeState;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.caseTypeStateReportChart;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.componentDiv;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.errorMessage;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.caseTypeStateReport;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.renderChart;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.doughnutChartLabels;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.doughnutChartData;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.doughnutChartType;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.chartColors;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.defaultColors;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.widgetWidth;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.widgetHeight;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.legendData;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.totalActiveCaseCount;
    /**
     * @type {?}
     * @private
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.getCaseCount;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.doughnutChartOptions;
    /**
     * @type {?}
     * @private
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.initReportDataToChart;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.refresh;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.reportingService;
}
//# sourceMappingURL=data:application/json;base64,