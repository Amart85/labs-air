/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { TcCaseStatesService } from '../../services/tc-case-states.service';
/**
 * Render a dynamic milestone SVG
 *
 * ![alt-text](../live-apps-milestone.png "Documents Component Image")
 *
 * \@example <tcla-live-apps-milestone></tcla-live-apps-milestone>
 */
export class LiveAppsMilestoneComponent {
    /**
     * @param {?} caseStatesService
     */
    constructor(caseStatesService) {
        this.caseStatesService = caseStatesService;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // work out which section the MS trailer is (first/middle/end)
        /** @type {?} */
        const section = this.isFirst ? 'first' : (this.isLast ? 'end' : 'middle');
        // construct the icon filename
        /** @type {?} */
        const svgFileName = section + '-section-' + this.status + '.svg';
        // work out correct class
        /** @type {?} */
        let bgClass;
        if (this.status === 'completed' && this.isTerminal) {
            bgClass = 'tc-ms-' + 'completed-terminal' + '-bg';
        }
        else {
            bgClass = 'tc-ms-' + this.status + '-bg';
        }
        this.milestoneSvg = 'tcs-milestone-' + this.status + (this.isTerminal ? '-terminal' : '');
        this.sectionSVG = this.caseStatesService.getMilestoneSectionSvg(this.label, 'tc-ms-label', bgClass, svgFileName);
    }
}
LiveAppsMilestoneComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-milestone',
                template: "<div class=\"tcs-milestone-block\" fxLayout=\"row\" fxLayoutAlign=\"center start\">\n  <mat-icon class=\"tc-ms-circle-icon\" [svgIcon]=\"milestoneSvg\"></mat-icon>\n  <div [innerHtml]=\"sectionSVG\" fxLayoutAlign=\"start center\"></div>\n</div>\n",
                styles: [".tc-ms-circle-icon{height:36px;width:36px;margin-right:-8px;margin-left:-8px}.tcs-milestone-block{margin-bottom:1px;margin-top:1px}"]
            }] }
];
/** @nocollapse */
LiveAppsMilestoneComponent.ctorParameters = () => [
    { type: TcCaseStatesService }
];
LiveAppsMilestoneComponent.propDecorators = {
    isFirst: [{ type: Input }],
    isLast: [{ type: Input }],
    status: [{ type: Input }],
    label: [{ type: Input }],
    isTerminal: [{ type: Input }],
    phase: [{ type: Input }],
    previousPhase: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    LiveAppsMilestoneComponent.prototype.isFirst;
    /** @type {?} */
    LiveAppsMilestoneComponent.prototype.isLast;
    /** @type {?} */
    LiveAppsMilestoneComponent.prototype.status;
    /** @type {?} */
    LiveAppsMilestoneComponent.prototype.label;
    /** @type {?} */
    LiveAppsMilestoneComponent.prototype.isTerminal;
    /** @type {?} */
    LiveAppsMilestoneComponent.prototype.phase;
    /** @type {?} */
    LiveAppsMilestoneComponent.prototype.previousPhase;
    /** @type {?} */
    LiveAppsMilestoneComponent.prototype.sectionSVG;
    /** @type {?} */
    LiveAppsMilestoneComponent.prototype.milestoneSvg;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsMilestoneComponent.prototype.caseStatesService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLW1pbGVzdG9uZS5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbGl2ZS1hcHBzLW1pbGVzdG9uZS9saXZlLWFwcHMtbWlsZXN0b25lLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQVMsTUFBTSxlQUFlLENBQUM7QUFFdkQsT0FBTyxFQUFDLG1CQUFtQixFQUFDLE1BQU0sdUNBQXVDLENBQUM7Ozs7Ozs7O0FBYzFFLE1BQU0sT0FBTywwQkFBMEI7Ozs7SUFZckMsWUFBc0IsaUJBQXNDO1FBQXRDLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBcUI7SUFBSSxDQUFDOzs7O0lBRWpFLFFBQVE7OztjQUVBLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7OztjQUVuRSxXQUFXLEdBQUcsT0FBTyxHQUFHLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU07OztZQUU1RCxPQUFPO1FBQ1gsSUFBSSxJQUFJLENBQUMsTUFBTSxLQUFLLFdBQVcsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQ2xELE9BQU8sR0FBRyxRQUFRLEdBQUcsb0JBQW9CLEdBQUcsS0FBSyxDQUFDO1NBQ25EO2FBQU07WUFDTCxPQUFPLEdBQUcsUUFBUSxHQUFHLElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO1NBQzFDO1FBQ0QsSUFBSSxDQUFDLFlBQVksR0FBRyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztRQUUxRixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxzQkFBc0IsQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLGFBQWEsRUFBRSxPQUFPLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDbkgsQ0FBQzs7O1lBbENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsMEJBQTBCO2dCQUNwQyxrUUFBbUQ7O2FBRXBEOzs7O1lBYk8sbUJBQW1COzs7c0JBZXhCLEtBQUs7cUJBQ0wsS0FBSztxQkFDTCxLQUFLO29CQUNMLEtBQUs7eUJBQ0wsS0FBSztvQkFDTCxLQUFLOzRCQUNMLEtBQUs7Ozs7SUFOTiw2Q0FBMEI7O0lBQzFCLDRDQUF5Qjs7SUFDekIsNENBQXdCOztJQUN4QiwyQ0FBdUI7O0lBQ3ZCLGdEQUE2Qjs7SUFDN0IsMkNBQXVCOztJQUN2QixtREFBK0I7O0lBRS9CLGdEQUE0Qjs7SUFDNUIsa0RBQTRCOzs7OztJQUVoQix1REFBZ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1NhZmVIdG1sfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7VGNDYXNlU3RhdGVzU2VydmljZX0gZnJvbSAnLi4vLi4vc2VydmljZXMvdGMtY2FzZS1zdGF0ZXMuc2VydmljZSc7XG5cbi8qKlxuICogUmVuZGVyIGEgZHluYW1pYyBtaWxlc3RvbmUgU1ZHXG4gKlxuICogIVthbHQtdGV4dF0oLi4vbGl2ZS1hcHBzLW1pbGVzdG9uZS5wbmcgXCJEb2N1bWVudHMgQ29tcG9uZW50IEltYWdlXCIpXG4gKlxuICpAZXhhbXBsZSA8dGNsYS1saXZlLWFwcHMtbWlsZXN0b25lPjwvdGNsYS1saXZlLWFwcHMtbWlsZXN0b25lPlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0Y2xhLWxpdmUtYXBwcy1taWxlc3RvbmUnLFxuICB0ZW1wbGF0ZVVybDogJy4vbGl2ZS1hcHBzLW1pbGVzdG9uZS5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2xpdmUtYXBwcy1taWxlc3RvbmUuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIExpdmVBcHBzTWlsZXN0b25lQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgQElucHV0KCkgaXNGaXJzdDogYm9vbGVhbjtcbiAgQElucHV0KCkgaXNMYXN0OiBib29sZWFuO1xuICBASW5wdXQoKSBzdGF0dXM6IHN0cmluZztcbiAgQElucHV0KCkgbGFiZWw6IHN0cmluZztcbiAgQElucHV0KCkgaXNUZXJtaW5hbDogYm9vbGVhbjtcbiAgQElucHV0KCkgcGhhc2U6IHN0cmluZztcbiAgQElucHV0KCkgcHJldmlvdXNQaGFzZTogc3RyaW5nO1xuXG4gIHB1YmxpYyBzZWN0aW9uU1ZHOiBTYWZlSHRtbDtcbiAgcHVibGljIG1pbGVzdG9uZVN2Zzogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBjYXNlU3RhdGVzU2VydmljZTogVGNDYXNlU3RhdGVzU2VydmljZSkgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgLy8gd29yayBvdXQgd2hpY2ggc2VjdGlvbiB0aGUgTVMgdHJhaWxlciBpcyAoZmlyc3QvbWlkZGxlL2VuZClcbiAgICBjb25zdCBzZWN0aW9uID0gdGhpcy5pc0ZpcnN0ID8gJ2ZpcnN0JyA6ICh0aGlzLmlzTGFzdCA/ICdlbmQnIDogJ21pZGRsZScpO1xuICAgIC8vIGNvbnN0cnVjdCB0aGUgaWNvbiBmaWxlbmFtZVxuICAgIGNvbnN0IHN2Z0ZpbGVOYW1lID0gc2VjdGlvbiArICctc2VjdGlvbi0nICsgdGhpcy5zdGF0dXMgKyAnLnN2Zyc7XG4gICAgLy8gd29yayBvdXQgY29ycmVjdCBjbGFzc1xuICAgIGxldCBiZ0NsYXNzO1xuICAgIGlmICh0aGlzLnN0YXR1cyA9PT0gJ2NvbXBsZXRlZCcgJiYgdGhpcy5pc1Rlcm1pbmFsKSB7XG4gICAgICBiZ0NsYXNzID0gJ3RjLW1zLScgKyAnY29tcGxldGVkLXRlcm1pbmFsJyArICctYmcnO1xuICAgIH0gZWxzZSB7XG4gICAgICBiZ0NsYXNzID0gJ3RjLW1zLScgKyB0aGlzLnN0YXR1cyArICctYmcnO1xuICAgIH1cbiAgICB0aGlzLm1pbGVzdG9uZVN2ZyA9ICd0Y3MtbWlsZXN0b25lLScgKyB0aGlzLnN0YXR1cyArICh0aGlzLmlzVGVybWluYWwgPyAnLXRlcm1pbmFsJyA6ICcnKTtcblxuICAgIHRoaXMuc2VjdGlvblNWRyA9IHRoaXMuY2FzZVN0YXRlc1NlcnZpY2UuZ2V0TWlsZXN0b25lU2VjdGlvblN2Zyh0aGlzLmxhYmVsLCAndGMtbXMtbGFiZWwnLCBiZ0NsYXNzLCBzdmdGaWxlTmFtZSk7XG4gIH1cblxufVxuIl19