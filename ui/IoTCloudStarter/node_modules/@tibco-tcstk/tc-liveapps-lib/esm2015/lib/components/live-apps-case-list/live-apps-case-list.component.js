/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { LiveAppsService } from '../../services/live-apps.service';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
/**
 * Renders list of cases for caserefs
 *
 * ![alt-text](../live-apps-case-list.png "Image")
 *
 * \@example <tcla-live-apps-case-list></tcla-live-apps-case-list>
 */
export class LiveAppsCaseListComponent extends LiveAppsComponent {
    /**
     * @param {?} liveapps
     */
    constructor(liveapps) {
        super();
        this.liveapps = liveapps;
        /**
         * ~event clickCase : Case clicked
         * ~payload CaseRoute : CaseRoute object output when case is clicked so calling component can route accordingly - ie. route to case
         */
        this.clickCase = new EventEmitter();
        /**
         * ~event clearMatches : Clear Matches button clicked
         *
         */
        this.clearMatches = new EventEmitter();
        this.clickCaseAction = (/**
         * @param {?} caseRoute
         * @return {?}
         */
        (caseRoute) => {
            this.clickCase.emit(caseRoute);
        });
        this.clearMatchingCases = (/**
         * @return {?}
         */
        () => {
            this.clearMatches.emit();
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
LiveAppsCaseListComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-case-list',
                template: "<div class=\"tcs-case-list-box\" fxLayout=\"column\">\n  <div class=\"tcs-case-list-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    <div fxFlex fxLayoutAlign=\"start center\">\n      <mat-icon class=\"tcs-icon tcs-caselist-icon\" svgIcon=\"tcs-caselist-icon\"></mat-icon>\n      <div class=\"tcs-case-list-header-text\">{{headerText}}</div>\n      <div fxFlex class=\"tcs-type-filter-text\" fxLayoutAlign=\"end center\">\n        <div *ngIf=\"headerMessage\" fxLayout=\"row\">\n          [\n          <div class=\"tcs-type-filter-text-highlight\">{{headerMessage}}</div>\n          ]\n        </div>\n        <mat-icon (click)=\"clearMatchingCases()\" class=\"tcs-icon tcs-icon-active tcs-clear-cases-icon\" svgIcon=\"tcs-clear-icon\" matTooltip=\"Clear Matching Cases\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\"></mat-icon>\n      </div>\n    </div>\n  </div>\n\n  <!--div *ngIf=\"displayType != 'list'\" class=\"tcs-case-list-flow-list\" fxLayout=\"column\">\n    <div class=\"tcs-case-list-item-box\" *ngFor=\"let caseRef of caseRefs\">\n      <tcla-live-apps-case-summary style=\"max-width: 297px;\" [uiAppId]=\"uiAppId\" [typeBar]=\"true\" [borderCard]=\"false\" [displayType]=\"displayType\" [sandboxId]=\"sandboxId\" [caseRef]=\"caseRef\" [highlight]=\"highlight\" (clickCase)=\"clickCaseAction($event)\"></tcla-live-apps-case-summary>\n      <div class=\"tcs-case-summary-line\"></div>\n    </div>\n  </div-->\n\n  <div *ngIf=\"displayType === 'list'\" fxFlex fxLayout=\"column\">\n    <cdk-virtual-scroll-viewport class=\"tcs-case-list-flow-list\" itemSize=\"56\">\n      <div class=\"tcs-case-list-item-box\" *cdkVirtualFor=\"let caseRef of caseRefs; templateCacheSize: 0; let index = index\">\n        <tcla-live-apps-case-summary style=\"max-width: 297px;\" [uiAppId]=\"uiAppId\" [typeBar]=\"true\" [borderCard]=\"false\" [displayType]=\"displayType\" [sandboxId]=\"sandboxId\" [caseRef]=\"caseRef\" [highlight]=\"highlight\" (clickCase)=\"clickCaseAction($event)\"></tcla-live-apps-case-summary>\n        <div class=\"tcs-case-summary-line\"></div>\n      </div>\n    </cdk-virtual-scroll-viewport>\n  </div>\n</div>\n",
                styles: [".tcs-case-list-box{width:100%;min-height:366px;border-radius:3px;box-shadow:0 2px 8px 0 #dedede;background-color:#fff}.tcs-case-list-header{height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-case-list-header-text{font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-case-list-flow-list{margin:24px;overflow-y:auto;height:278px;max-height:278px}.tcs-case-list-item-box{margin:3px 5px 10px}.tcs-icon.tcs-icon-active:hover{cursor:pointer}:host ::ng-deep .tcs-icon.tcs-icon-active:hover .svg-content{fill:#0081cb}.tcs-case-summary-line{padding:0;margin:4px 5px 0;border-bottom:1.1px solid #f4f4f4}.tcs-type-filter-text{font-family:Source Sans Pro;font-size:12px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-type-filter-text-highlight{color:#ff7800}"]
            }] }
];
/** @nocollapse */
LiveAppsCaseListComponent.ctorParameters = () => [
    { type: LiveAppsService }
];
LiveAppsCaseListComponent.propDecorators = {
    headerText: [{ type: Input }],
    displayType: [{ type: Input }],
    sandboxId: [{ type: Input }],
    uiAppId: [{ type: Input }],
    caseRefs: [{ type: Input }],
    highlight: [{ type: Input }],
    headerMessage: [{ type: Input }],
    clickCase: [{ type: Output }],
    clearMatches: [{ type: Output }]
};
if (false) {
    /**
     * Text shown in menu bar
     * @type {?}
     */
    LiveAppsCaseListComponent.prototype.headerText;
    /**
     * case card format - list, card, miniCard, staticList (no click event)
     * @type {?}
     */
    LiveAppsCaseListComponent.prototype.displayType;
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsCaseListComponent.prototype.sandboxId;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     * @type {?}
     */
    LiveAppsCaseListComponent.prototype.uiAppId;
    /**
     * List of case references to display in the list
     * @type {?}
     */
    LiveAppsCaseListComponent.prototype.caseRefs;
    /**
     * Text to highlight in the list of cases (normall text that was searched)
     * @type {?}
     */
    LiveAppsCaseListComponent.prototype.highlight;
    /**
     * Filter text displayed when listing cases after selecting case type and state via report widget
     * @type {?}
     */
    LiveAppsCaseListComponent.prototype.headerMessage;
    /**
     * ~event clickCase : Case clicked
     * ~payload CaseRoute : CaseRoute object output when case is clicked so calling component can route accordingly - ie. route to case
     * @type {?}
     */
    LiveAppsCaseListComponent.prototype.clickCase;
    /**
     * ~event clearMatches : Clear Matches button clicked
     *
     * @type {?}
     */
    LiveAppsCaseListComponent.prototype.clearMatches;
    /** @type {?} */
    LiveAppsCaseListComponent.prototype.errorMessage;
    /** @type {?} */
    LiveAppsCaseListComponent.prototype.clickCaseAction;
    /** @type {?} */
    LiveAppsCaseListComponent.prototype.clearMatchingCases;
    /**
     * @type {?}
     * @private
     */
    LiveAppsCaseListComponent.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWNhc2UtbGlzdC5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbGl2ZS1hcHBzLWNhc2UtbGlzdC9saXZlLWFwcHMtY2FzZS1saXN0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHeEYsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBQ2pFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLHNEQUFzRCxDQUFDOzs7Ozs7OztBQWdCekYsTUFBTSxPQUFPLHlCQUEwQixTQUFRLGlCQUFpQjs7OztJQTJEOUQsWUFBb0IsUUFBeUI7UUFDM0MsS0FBSyxFQUFFLENBQUM7UUFEVSxhQUFRLEdBQVIsUUFBUSxDQUFpQjs7Ozs7UUFsQm5DLGNBQVMsR0FBNEIsSUFBSSxZQUFZLEVBQWEsQ0FBQzs7Ozs7UUFNbkUsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBSXJDLG9CQUFlOzs7O1FBQUcsQ0FBQyxTQUFvQixFQUFFLEVBQUU7WUFDaEQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDakMsQ0FBQyxFQUFBO1FBRU0sdUJBQWtCOzs7UUFBRyxHQUFHLEVBQUU7WUFDL0IsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMzQixDQUFDLEVBQUE7SUFJRCxDQUFDOzs7O0lBRUQsUUFBUTtJQUNSLENBQUM7OztZQXRFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDBCQUEwQjtnQkFDcEMscW9FQUFtRDs7YUFFcEQ7Ozs7WUFmTyxlQUFlOzs7eUJBcUJwQixLQUFLOzBCQUtMLEtBQUs7d0JBS0wsS0FBSztzQkFLTCxLQUFLO3VCQUtMLEtBQUs7d0JBS0wsS0FBSzs0QkFLTCxLQUFLO3dCQU9MLE1BQU07MkJBTU4sTUFBTTs7Ozs7OztJQTNDUCwrQ0FBNEI7Ozs7O0lBSzVCLGdEQUE2Qjs7Ozs7SUFLN0IsOENBQTJCOzs7OztJQUszQiw0Q0FBeUI7Ozs7O0lBS3pCLDZDQUE0Qjs7Ozs7SUFLNUIsOENBQTJCOzs7OztJQUszQixrREFBK0I7Ozs7OztJQU8vQiw4Q0FBNkU7Ozs7OztJQU03RSxpREFBNEM7O0lBRTVDLGlEQUE0Qjs7SUFFNUIsb0RBRUM7O0lBRUQsdURBRUM7Ozs7O0lBRVcsNkNBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uRGVzdHJveSwgT25Jbml0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwLCB0YWtlLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7TGl2ZUFwcHNTZXJ2aWNlfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9saXZlLWFwcHMuc2VydmljZSc7XG5pbXBvcnQgeyBMaXZlQXBwc0NvbXBvbmVudCB9IGZyb20gJy4uL2xpdmUtYXBwcy1jb21wb25lbnQvbGl2ZS1hcHBzLWNvbXBvbmVudC5jb21wb25lbnQnO1xuaW1wb3J0IHtDYXNlUm91dGV9IGZyb20gJy4uLy4uL21vZGVscy9saXZlYXBwc2RhdGEnO1xuXG4vKipcbiAqIFJlbmRlcnMgbGlzdCBvZiBjYXNlcyBmb3IgY2FzZXJlZnNcbiAqXG4gKiAhW2FsdC10ZXh0XSguLi9saXZlLWFwcHMtY2FzZS1saXN0LnBuZyBcIkltYWdlXCIpXG4gKlxuICpAZXhhbXBsZSA8dGNsYS1saXZlLWFwcHMtY2FzZS1saXN0PjwvdGNsYS1saXZlLWFwcHMtY2FzZS1saXN0PlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0Y2xhLWxpdmUtYXBwcy1jYXNlLWxpc3QnLFxuICB0ZW1wbGF0ZVVybDogJy4vbGl2ZS1hcHBzLWNhc2UtbGlzdC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2xpdmUtYXBwcy1jYXNlLWxpc3QuY29tcG9uZW50LmNzcyddXG59KVxuXG5leHBvcnQgY2xhc3MgTGl2ZUFwcHNDYXNlTGlzdENvbXBvbmVudCBleHRlbmRzIExpdmVBcHBzQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIFRleHQgc2hvd24gaW4gbWVudSBiYXJcbiAgICovXG4gIEBJbnB1dCgpIGhlYWRlclRleHQ6IHN0cmluZztcblxuICAvKipcbiAgICogY2FzZSBjYXJkIGZvcm1hdCAtIGxpc3QsIGNhcmQsIG1pbmlDYXJkLCBzdGF0aWNMaXN0IChubyBjbGljayBldmVudClcbiAgICovXG4gIEBJbnB1dCgpIGRpc3BsYXlUeXBlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIHNhbmRib3hJZCAtIHRoaXMgY29tZXMgZnJvbSBjbGFpbXMgcmVzb2x2ZXJcbiAgICovXG4gIEBJbnB1dCgpIHNhbmRib3hJZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgQXBwbGljYXRpb24gSUQgb2YgdGhlIFVJIChzaG91bGQgaWRlYWxseSBiZSB1bmlxdWUgYXMgaXQgaXMgc2hhcmVkIHN0YXRlIGtleSlcbiAgICovXG4gIEBJbnB1dCgpIHVpQXBwSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogTGlzdCBvZiBjYXNlIHJlZmVyZW5jZXMgdG8gZGlzcGxheSBpbiB0aGUgbGlzdFxuICAgKi9cbiAgQElucHV0KCkgY2FzZVJlZnM6IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiBUZXh0IHRvIGhpZ2hsaWdodCBpbiB0aGUgbGlzdCBvZiBjYXNlcyAobm9ybWFsbCB0ZXh0IHRoYXQgd2FzIHNlYXJjaGVkKVxuICAgKi9cbiAgQElucHV0KCkgaGlnaGxpZ2h0OiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEZpbHRlciB0ZXh0IGRpc3BsYXllZCB3aGVuIGxpc3RpbmcgY2FzZXMgYWZ0ZXIgc2VsZWN0aW5nIGNhc2UgdHlwZSBhbmQgc3RhdGUgdmlhIHJlcG9ydCB3aWRnZXRcbiAgICovXG4gIEBJbnB1dCgpIGhlYWRlck1lc3NhZ2U6IHN0cmluZztcblxuXG4gIC8qKlxuICAgKiB+ZXZlbnQgY2xpY2tDYXNlIDogQ2FzZSBjbGlja2VkXG4gICAqIH5wYXlsb2FkIENhc2VSb3V0ZSA6IENhc2VSb3V0ZSBvYmplY3Qgb3V0cHV0IHdoZW4gY2FzZSBpcyBjbGlja2VkIHNvIGNhbGxpbmcgY29tcG9uZW50IGNhbiByb3V0ZSBhY2NvcmRpbmdseSAtIGllLiByb3V0ZSB0byBjYXNlXG4gICAqL1xuICBAT3V0cHV0KCkgY2xpY2tDYXNlOiBFdmVudEVtaXR0ZXI8Q2FzZVJvdXRlPiA9IG5ldyBFdmVudEVtaXR0ZXI8Q2FzZVJvdXRlPigpO1xuXG4gIC8qKlxuICAgKiB+ZXZlbnQgY2xlYXJNYXRjaGVzIDogQ2xlYXIgTWF0Y2hlcyBidXR0b24gY2xpY2tlZFxuICAgKlxuICAgKi9cbiAgQE91dHB1dCgpIGNsZWFyTWF0Y2hlcyA9IG5ldyBFdmVudEVtaXR0ZXIoKTtcblxuICBwdWJsaWMgZXJyb3JNZXNzYWdlOiBzdHJpbmc7XG5cbiAgcHVibGljIGNsaWNrQ2FzZUFjdGlvbiA9IChjYXNlUm91dGU6IENhc2VSb3V0ZSkgPT4ge1xuICAgIHRoaXMuY2xpY2tDYXNlLmVtaXQoY2FzZVJvdXRlKTtcbiAgfVxuXG4gIHB1YmxpYyBjbGVhck1hdGNoaW5nQ2FzZXMgPSAoKSA9PiB7XG4gICAgdGhpcy5jbGVhck1hdGNoZXMuZW1pdCgpO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsaXZlYXBwczogTGl2ZUFwcHNTZXJ2aWNlKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbn1cbiJdfQ==