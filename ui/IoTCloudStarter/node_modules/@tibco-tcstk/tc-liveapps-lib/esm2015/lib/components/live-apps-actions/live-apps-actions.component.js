/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { CustomFormDefs } from '@tibco-tcstk/tc-forms-lib';
import { LiveAppsCaseActionsComponent } from '../live-apps-case-actions/live-apps-case-actions.component';
/**
 * Not used by app but wraps action list and action execution.
 *
 * \@example <tcla-live-apps-actions></tcla-live-apps-actions>
 */
export class LiveAppsActionsComponent {
    constructor() {
        /**
         * Allow override of forms framework
         * Options: bootstrap-4 or material-design
         */
        this.formsFramework = this.formsFramework ? this.formsFramework : 'material-design';
        /**
         * ~event caseActioned : Case action starterd (process started)
         * ~payload ProcessId : processId of started process in live apps (action)
         */
        this.caseActioned = new EventEmitter();
        // action clicked
        this.handleActionCompleted = (/**
         * @param {?} result
         * @return {?}
         */
        (result) => {
            this.caseActioned.emit(result);
            this.actionSelector.toggleEnable();
        });
        this.handleActionClicked = (/**
         * @param {?} action
         * @return {?}
         */
        (action) => {
            this.actionSelector.toggleEnable();
            this.selectedAction = action;
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
    }
}
LiveAppsActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-actions',
                template: "<div fxLayout=\"column\" fxFlexFill>\n  <tcla-live-apps-case-actions [sandboxId]=\"sandboxId\" [typeId]=\"typeId\" [appId]=\"applicationId\" [caseRef]=\"caseRef\" [maxActions]=\"5\" [actionFilter]=\"actionFilter\" (actionClicked)=\"handleActionClicked($event)\"></tcla-live-apps-case-actions>\n  <tcla-live-apps-case-action *ngIf=\"selectedAction\" [process]=\"selectedAction\" [caseRef]=\"caseRef\" [typeId]=\"typeId\" [applicationId]=\"applicationId\" [sandboxId]=\"sandboxId\" [formsFramework]=\"formsFramework\"></tcla-live-apps-case-action>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
LiveAppsActionsComponent.ctorParameters = () => [];
LiveAppsActionsComponent.propDecorators = {
    actionSelector: [{ type: ViewChild, args: [LiveAppsCaseActionsComponent, { static: false },] }],
    caseRef: [{ type: Input }],
    caseState: [{ type: Input }],
    sandboxId: [{ type: Input }],
    applicationId: [{ type: Input }],
    typeId: [{ type: Input }],
    customFormDefs: [{ type: Input }],
    formsFramework: [{ type: Input }],
    actionFilter: [{ type: Input }],
    caseActioned: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    LiveAppsActionsComponent.prototype.actionSelector;
    /**
     * The case reference
     * @type {?}
     */
    LiveAppsActionsComponent.prototype.caseRef;
    /**
     * The state of the case
     * @type {?}
     */
    LiveAppsActionsComponent.prototype.caseState;
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsActionsComponent.prototype.sandboxId;
    /**
     * LA Application ID
     * @type {?}
     */
    LiveAppsActionsComponent.prototype.applicationId;
    /**
     * The LA Application Type Id (generally 1)
     * @type {?}
     */
    LiveAppsActionsComponent.prototype.typeId;
    /**
     * Custom Form configuration file
     * @type {?}
     */
    LiveAppsActionsComponent.prototype.customFormDefs;
    /**
     * Allow override of forms framework
     * Options: bootstrap-4 or material-design
     * @type {?}
     */
    LiveAppsActionsComponent.prototype.formsFramework;
    /**
     * Dont show buttons for any actions that start with this string.
     * eg: '$' will remove the action $Update
     * @type {?}
     */
    LiveAppsActionsComponent.prototype.actionFilter;
    /**
     * ~event caseActioned : Case action starterd (process started)
     * ~payload ProcessId : processId of started process in live apps (action)
     * @type {?}
     */
    LiveAppsActionsComponent.prototype.caseActioned;
    /** @type {?} */
    LiveAppsActionsComponent.prototype.selectedAction;
    /** @type {?} */
    LiveAppsActionsComponent.prototype.handleActionCompleted;
    /** @type {?} */
    LiveAppsActionsComponent.prototype.handleActionClicked;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWFjdGlvbnMuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2xpdmUtYXBwcy1hY3Rpb25zL2xpdmUtYXBwcy1hY3Rpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFHeEYsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQ3pELE9BQU8sRUFBQyw0QkFBNEIsRUFBQyxNQUFNLDREQUE0RCxDQUFDOzs7Ozs7QUFheEcsTUFBTSxPQUFPLHdCQUF3QjtJQW9FbkM7Ozs7O1FBOUJTLG1CQUFjLEdBQVcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUM7Ozs7O1FBY3RGLGlCQUFZLEdBQTRCLElBQUksWUFBWSxFQUFhLENBQUM7O1FBS2hGLDBCQUFxQjs7OztRQUFHLENBQUMsTUFBaUIsRUFBRSxFQUFFO1lBQzVDLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQy9CLElBQUksQ0FBQyxjQUFjLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDckMsQ0FBQyxFQUFBO1FBR0Qsd0JBQW1COzs7O1FBQUcsQ0FBQyxNQUFNLEVBQUUsRUFBRTtZQUMvQixJQUFJLENBQUMsY0FBYyxDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ25DLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDO1FBQy9CLENBQUMsRUFBQTtJQUVlLENBQUM7Ozs7SUFHakIsUUFBUTtJQUNSLENBQUM7OztZQTdFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLHdCQUF3QjtnQkFDbEMsdWpCQUFpRDs7YUFFbEQ7Ozs7OzZCQUdFLFNBQVMsU0FBQyw0QkFBNEIsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUM7c0JBS3ZELEtBQUs7d0JBS0wsS0FBSzt3QkFLTCxLQUFLOzRCQUtMLEtBQUs7cUJBS0wsS0FBSzs2QkFLTCxLQUFLOzZCQU1MLEtBQUs7MkJBT0wsS0FBSzsyQkFPTCxNQUFNOzs7O0lBbERQLGtEQUFzRzs7Ozs7SUFLdEcsMkNBQXlCOzs7OztJQUt6Qiw2Q0FBMkI7Ozs7O0lBSzNCLDZDQUEyQjs7Ozs7SUFLM0IsaURBQStCOzs7OztJQUsvQiwwQ0FBd0I7Ozs7O0lBS3hCLGtEQUF3Qzs7Ozs7O0lBTXhDLGtEQUFnRzs7Ozs7O0lBT2hHLGdEQUFnQzs7Ozs7O0lBT2hDLGdEQUFnRjs7SUFFaEYsa0RBQW1DOztJQUduQyx5REFHQzs7SUFHRCx1REFHQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UHJvY2Vzc0lkfSBmcm9tICcuLi8uLi9tb2RlbHMvbGl2ZWFwcHNkYXRhJztcbmltcG9ydCB7TGFQcm9jZXNzU2VsZWN0aW9ufSBmcm9tICcuLi8uLi9tb2RlbHMvdGMtY2FzZS1wcm9jZXNzZXMnO1xuaW1wb3J0IHtDdXN0b21Gb3JtRGVmc30gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWZvcm1zLWxpYic7XG5pbXBvcnQge0xpdmVBcHBzQ2FzZUFjdGlvbnNDb21wb25lbnR9IGZyb20gJy4uL2xpdmUtYXBwcy1jYXNlLWFjdGlvbnMvbGl2ZS1hcHBzLWNhc2UtYWN0aW9ucy5jb21wb25lbnQnO1xuXG5cbi8qKlxuICogTm90IHVzZWQgYnkgYXBwIGJ1dCB3cmFwcyBhY3Rpb24gbGlzdCBhbmQgYWN0aW9uIGV4ZWN1dGlvbi5cbiAqXG4gKkBleGFtcGxlIDx0Y2xhLWxpdmUtYXBwcy1hY3Rpb25zPjwvdGNsYS1saXZlLWFwcHMtYWN0aW9ucz5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGNsYS1saXZlLWFwcHMtYWN0aW9ucycsXG4gIHRlbXBsYXRlVXJsOiAnLi9saXZlLWFwcHMtYWN0aW9ucy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2xpdmUtYXBwcy1hY3Rpb25zLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBMaXZlQXBwc0FjdGlvbnNDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuXG4gIEBWaWV3Q2hpbGQoTGl2ZUFwcHNDYXNlQWN0aW9uc0NvbXBvbmVudCwge3N0YXRpYzogZmFsc2V9KSBhY3Rpb25TZWxlY3RvcjogTGl2ZUFwcHNDYXNlQWN0aW9uc0NvbXBvbmVudFxuXG4gIC8qKlxuICAgKiBUaGUgY2FzZSByZWZlcmVuY2VcbiAgICovXG4gIEBJbnB1dCgpIGNhc2VSZWY6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIHN0YXRlIG9mIHRoZSBjYXNlXG4gICAqL1xuICBASW5wdXQoKSBjYXNlU3RhdGU6IHN0cmluZztcblxuICAvKipcbiAgICogc2FuZGJveElkIC0gdGhpcyBjb21lcyBmcm9tIGNsYWltcyByZXNvbHZlclxuICAgKi9cbiAgQElucHV0KCkgc2FuZGJveElkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIExBIEFwcGxpY2F0aW9uIElEXG4gICAqL1xuICBASW5wdXQoKSBhcHBsaWNhdGlvbklkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBMQSBBcHBsaWNhdGlvbiBUeXBlIElkIChnZW5lcmFsbHkgMSlcbiAgICovXG4gIEBJbnB1dCgpIHR5cGVJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBDdXN0b20gRm9ybSBjb25maWd1cmF0aW9uIGZpbGVcbiAgICovXG4gIEBJbnB1dCgpIGN1c3RvbUZvcm1EZWZzOiBDdXN0b21Gb3JtRGVmcztcblxuICAvKipcbiAgICogQWxsb3cgb3ZlcnJpZGUgb2YgZm9ybXMgZnJhbWV3b3JrXG4gICAqIE9wdGlvbnM6IGJvb3RzdHJhcC00IG9yIG1hdGVyaWFsLWRlc2lnblxuICAgKi9cbiAgQElucHV0KCkgZm9ybXNGcmFtZXdvcms6IHN0cmluZyA9IHRoaXMuZm9ybXNGcmFtZXdvcmsgPyB0aGlzLmZvcm1zRnJhbWV3b3JrIDogJ21hdGVyaWFsLWRlc2lnbic7XG5cblxuICAvKipcbiAgICogRG9udCBzaG93IGJ1dHRvbnMgZm9yIGFueSBhY3Rpb25zIHRoYXQgc3RhcnQgd2l0aCB0aGlzIHN0cmluZy5cbiAgICogZWc6ICckJyB3aWxsIHJlbW92ZSB0aGUgYWN0aW9uICRVcGRhdGVcbiAgICovXG4gIEBJbnB1dCgpIGFjdGlvbkZpbHRlcjogc3RyaW5nW107XG5cblxuICAvKipcbiAgICogfmV2ZW50IGNhc2VBY3Rpb25lZCA6IENhc2UgYWN0aW9uIHN0YXJ0ZXJkIChwcm9jZXNzIHN0YXJ0ZWQpXG4gICAqIH5wYXlsb2FkIFByb2Nlc3NJZCA6IHByb2Nlc3NJZCBvZiBzdGFydGVkIHByb2Nlc3MgaW4gbGl2ZSBhcHBzIChhY3Rpb24pXG4gICAqL1xuICBAT3V0cHV0KCkgY2FzZUFjdGlvbmVkOiBFdmVudEVtaXR0ZXI8UHJvY2Vzc0lkPiA9IG5ldyBFdmVudEVtaXR0ZXI8UHJvY2Vzc0lkPigpO1xuXG4gIHNlbGVjdGVkQWN0aW9uOiBMYVByb2Nlc3NTZWxlY3Rpb247XG5cbiAgLy8gYWN0aW9uIGNsaWNrZWRcbiAgaGFuZGxlQWN0aW9uQ29tcGxldGVkID0gKHJlc3VsdDogUHJvY2Vzc0lkKSA9PiB7XG4gICAgdGhpcy5jYXNlQWN0aW9uZWQuZW1pdChyZXN1bHQpO1xuICAgIHRoaXMuYWN0aW9uU2VsZWN0b3IudG9nZ2xlRW5hYmxlKCk7XG4gIH1cblxuXG4gIGhhbmRsZUFjdGlvbkNsaWNrZWQgPSAoYWN0aW9uKSA9PiB7XG4gICAgdGhpcy5hY3Rpb25TZWxlY3Rvci50b2dnbGVFbmFibGUoKTtcbiAgICB0aGlzLnNlbGVjdGVkQWN0aW9uID0gYWN0aW9uO1xuICB9XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuXG4gIG5nT25Jbml0KCkge1xuICB9XG5cbn1cbiJdfQ==