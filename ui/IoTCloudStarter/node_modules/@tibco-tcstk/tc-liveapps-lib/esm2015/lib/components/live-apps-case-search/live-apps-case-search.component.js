/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { LiveAppsService } from '../../services/live-apps.service';
import { CaseSearchResults, CaseType } from '../../models/liveappsdata';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { LiveAppsApplicationsComponent } from '../live-apps-applications/live-apps-applications.component';
/**
 * Selection of app + searching for cases
 *
 *  ![alt-text](../live-apps-case-search.png "Image")
 *
 * \@example <tcla-live-apps-case-search></tcla-live-apps-case-search>
 */
export class LiveAppsCaseSearchComponent extends LiveAppsComponent {
    /**
     * @param {?} liveapps
     */
    constructor(liveapps) {
        super();
        this.liveapps = liveapps;
        /**
         * ~event foundRefs : Search completed (caseRefs returned)
         * ~payload CaseSearchResults : caseRefs matching the search (so parent can display them in case list component)
         */
        this.foundRefs = new EventEmitter();
        this.forcedSearch = false;
        // case type selector
        this.selectedApp = new CaseType();
        this.refresh = (/**
         * @return {?}
         */
        () => {
            if (this.applicationsComponent) {
                this.applicationsComponent.refresh(true);
            }
        });
        this.setCaseType = (/**
         * @param {?} caseType
         * @return {?}
         */
        (caseType) => {
            this.selectedApp = caseType;
            this.doSearch();
            this.applicationsComponent.changeAppSelection(caseType);
        });
        this.setSelectedStateId = (/**
         * @param {?} stateId
         * @param {?} stateLabel
         * @return {?}
         */
        (stateId, stateLabel) => {
            this.selectedStateId = stateId;
            this.selectedStateLabel = stateLabel;
            // not currently supported to limit search by stateId
            // this.doSearch(stateId);
        });
        // handle search app selection
        this.handleSearchAppSelection = (/**
         * @param {?} application
         * @return {?}
         */
        (application) => {
            this.selectedApp = application;
            this.doSearch();
        });
        // clear search results
        this.clearResults = (/**
         * @return {?}
         */
        () => {
            this.searchString = '';
            this.selectedStateId = undefined;
            this.selectedStateLabel = undefined;
            this.doSearch();
        });
        this.forceSearch = (/**
         * @return {?}
         */
        () => {
            this.forcedSearch = true;
            this.liveapps.caseSearchEntries(this.searchBox.nativeElement.value, this.sandboxId, this.selectedApp.applicationId, this.selectedApp.id, true, 0, 1000, null).subscribe((/**
             * @param {?} results
             * @return {?}
             */
            results => {
                this.foundRefs.emit(results);
            }));
        });
        this.doSearch = (/**
         * @param {?=} stateId
         * @return {?}
         */
        (stateId) => {
            this.forcedSearch = false;
            this.searchBox.nativeElement.value = '';
            /** @type {?} */
            const result = new CaseSearchResults().deserialize({ caserefs: [], searchString: '' });
            this.foundRefs.emit(result);
            this.searchTerm$ = new Subject();
            this.searchTerm$.subscribe((/**
             * @param {?} next
             * @return {?}
             */
            next => {
                this.searchString = next;
                return next;
            }));
            this.searchValue = this.searchTerm$.asObservable();
            if (this.selectedApp.applicationId && this.selectedApp.id && this.sandboxId) {
                /** @type {?} */
                const skip = 0;
                /** @type {?} */
                const top = 1000;
                // Note: The API limits searches to 1000 items
                // The service is configured to optimize performance by only returning case references at this stage
                // The case details will only be loaded when the item is rendered (for example in the case-list component)
                // Any case list component should use cdk virtual scroll to ensure 1000 case details are not loaded in one go
                // (from the API or to the DOM)
                this.liveapps.caseSearch(this.searchTerm$, this.sandboxId, this.selectedApp.applicationId, this.selectedApp.id, skip, top, stateId ? stateId : null)
                    .subscribe((/**
                 * @param {?} results
                 * @return {?}
                 */
                results => {
                    this.foundRefs.emit(results);
                }));
            }
        });
    }
}
LiveAppsCaseSearchComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-case-search',
                template: "<div fxLayout=\"row\" fxLayout=\"center center\" style=\"max-width: 700px; width: 100%;\">\n  <div class=\"tcs-search-box\" fxlayout=\"row\" fxLayoutAlign=\"space-around center\" fxFlex>\n    <tcla-live-apps-applications fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-search-application-selector\" [appIds]=\"appIds\" [sandboxId]=\"sandboxId\" [selectFirstApp]=\"true\" (selection)=\"handleSearchAppSelection($event)\"></tcla-live-apps-applications>\n    <div class=\"tcs-search-input-container\" fxFlex>\n      <!-- free search by state with state filter currently not supported -->\n      <!--div class=\"tcs-state-filter-marker\" *ngIf=\"selectedStateLabel\" fxLayout=\"row\">[<div class=\"tcs-type-filter-text-highlight\">{{selectedStateLabel}}</div>]&nbsp;</div-->\n      <input #searchBox class=\"tcs-search-input\" placeholder=\"{{ selectedApp.applicationName ? 'Search within ' + selectedApp.applicationName + ' cases' : 'Select a case type to search cases' }}\" (keyup)=\"searchTerm$.next($event.target.value)\" [disabled]=\"!selectedApp.applicationId\" fxFlex>\n      <div fxLayoutAlign=\"center end\">\n        <mat-icon *ngIf=\"forcedSearch || searchString\" class=\"tcs-icon tcs-close-icon\" svgIcon=\"tcs-close-icon\" (click)=\"clearResults()\"></mat-icon>\n        <mat-icon *ngIf=\"!forcedSearch && !searchString\" class=\"tcs-icon tcs-search-icon\" svgIcon=\"tcs-search-icon\" (click)=\"forceSearch()\"></mat-icon>\n      </div>\n    </div>\n  </div>\n</div>\n",
                styles: [".tcs-search-box{width:100%;height:44px;box-shadow:inset 0 1px 3px 0 rgba(0,0,0,.5);background-color:#fff}.tcs-search-input{height:24px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;border:none}.tcs-search-input:focus{outline:0}.tcs-search-input::-webkit-input-placeholder{opacity:.38}.tcs-search-input::-moz-placeholder{opacity:.38}.tcs-search-input::-ms-input-placeholder{opacity:.38}.tcs-search-input::placeholder{opacity:.38}.tcs-search-input-container{margin-left:20px;margin-right:20px}.tcs-search-application-selector{width:200px;margin-left:5px;margin-right:5px;background-color:#eee;padding-left:5px;padding-right:5px;padding-top:4px;height:35px}:host ::ng-deep .tcs-search-icon:hover .svg-content{fill:#0081cb}:host ::ng-deep .tcs-close-icon:hover .svg-content{fill:#0081cb}.tcs-close-icon:hover,.tcs-search-icon:hover{cursor:pointer}.tcs-type-filter-text{font-family:Source Sans Pro;font-size:12px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-type-filter-text-highlight{color:#ff7800}.tcs-state-filter-marker{margin-top:2px}"]
            }] }
];
/** @nocollapse */
LiveAppsCaseSearchComponent.ctorParameters = () => [
    { type: LiveAppsService }
];
LiveAppsCaseSearchComponent.propDecorators = {
    searchBox: [{ type: ViewChild, args: ['searchBox', { static: false },] }],
    sandboxId: [{ type: Input }],
    appIds: [{ type: Input }],
    foundRefs: [{ type: Output }],
    applicationsComponent: [{ type: ViewChild, args: [LiveAppsApplicationsComponent, { static: false },] }]
};
if (false) {
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.searchBox;
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsCaseSearchComponent.prototype.sandboxId;
    /**
     * The list of LA Application IDs you want to handle
     * @type {?}
     */
    LiveAppsCaseSearchComponent.prototype.appIds;
    /**
     * ~event foundRefs : Search completed (caseRefs returned)
     * ~payload CaseSearchResults : caseRefs matching the search (so parent can display them in case list component)
     * @type {?}
     */
    LiveAppsCaseSearchComponent.prototype.foundRefs;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.applicationsComponent;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.searchTerm$;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.searchValue;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.searchString;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.forcedSearch;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.selectedStateId;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.selectedStateLabel;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.selectedApp;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.refresh;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.setCaseType;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.setSelectedStateId;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.handleSearchAppSelection;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.clearResults;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.forceSearch;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.doSearch;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsCaseSearchComponent.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWNhc2Utc2VhcmNoLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1saXZlYXBwcy1saWIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9saXZlLWFwcHMtY2FzZS1zZWFyY2gvbGl2ZS1hcHBzLWNhc2Utc2VhcmNoLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxVQUFVLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBcUIsTUFBTSxFQUFFLFNBQVMsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUMvRyxPQUFPLEVBQWEsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBQ3pDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSxrQ0FBa0MsQ0FBQztBQUNqRSxPQUFPLEVBQWUsaUJBQWlCLEVBQUUsUUFBUSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDcEYsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sc0RBQXNELENBQUM7QUFDdkYsT0FBTyxFQUFDLDZCQUE2QixFQUFDLE1BQU0sNERBQTRELENBQUM7Ozs7Ozs7O0FBZ0J6RyxNQUFNLE9BQU8sMkJBQTRCLFNBQVEsaUJBQWlCOzs7O0lBK0JoRSxZQUFzQixRQUF5QjtRQUM3QyxLQUFLLEVBQUUsQ0FBQztRQURZLGFBQVEsR0FBUixRQUFRLENBQWlCOzs7OztRQWRyQyxjQUFTLEdBQW9DLElBQUksWUFBWSxFQUFxQixDQUFDO1FBTzdGLGlCQUFZLEdBQUcsS0FBSyxDQUFDOztRQUtkLGdCQUFXLEdBQWEsSUFBSSxRQUFRLEVBQUUsQ0FBQztRQU12QyxZQUFPOzs7UUFBRyxHQUFHLEVBQUU7WUFDcEIsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7YUFDMUM7UUFDSCxDQUFDLEVBQUE7UUFHTSxn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QUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7cUJBQ2pKLFNBQVM7Ozs7Z0JBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ25CLElBQUksQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUMvQixDQUFDLEVBQUMsQ0FBQzthQUNOO1FBQ0gsQ0FBQyxFQUFBO0lBckVELENBQUM7OztZQXZDRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDRCQUE0QjtnQkFDdEMsODlDQUFxRDs7YUFFdEQ7Ozs7WUFqQk8sZUFBZTs7O3dCQW9CcEIsU0FBUyxTQUFDLFdBQVcsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUM7d0JBSXRDLEtBQUs7cUJBS0wsS0FBSzt3QkFPTCxNQUFNO29DQUVOLFNBQVMsU0FBQyw2QkFBNkIsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUM7Ozs7SUFsQnpELGdEQUErRDs7Ozs7SUFJL0QsZ0RBQTJCOzs7OztJQUszQiw2Q0FBMEI7Ozs7OztJQU8xQixnREFBNkY7O0lBRTdGLDREQUFnSDs7SUFFaEgsa0RBQTZCOztJQUM3QixrREFBZ0M7O0lBQ2hDLG1EQUFxQjs7SUFDckIsbURBQXFCOztJQUNyQixzREFBK0I7O0lBQy9CLHlEQUFrQzs7SUFHbEMsa0RBQThDOztJQU05Qyw4Q0FJQzs7SUFHRCxrREFJQzs7SUFFRCx5REFLQzs7SUFHRCwrREFHQzs7SUFHRCxtREFLQzs7SUFFRCxrREFPQzs7SUFFRCwrQ0F3QkM7Ozs7O0lBdkVXLCtDQUFtQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFbGVtZW50UmVmLCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgT3V0cHV0LCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7TGl2ZUFwcHNTZXJ2aWNlfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9saXZlLWFwcHMuc2VydmljZSc7XG5pbXBvcnQge0Nhc2VJbmZvTGlzdCwgQ2FzZVNlYXJjaFJlc3VsdHMsIENhc2VUeXBlfSBmcm9tICcuLi8uLi9tb2RlbHMvbGl2ZWFwcHNkYXRhJztcbmltcG9ydCB7TGl2ZUFwcHNDb21wb25lbnR9IGZyb20gJy4uL2xpdmUtYXBwcy1jb21wb25lbnQvbGl2ZS1hcHBzLWNvbXBvbmVudC5jb21wb25lbnQnO1xuaW1wb3J0IHtMaXZlQXBwc0FwcGxpY2F0aW9uc0NvbXBvbmVudH0gZnJvbSAnLi4vbGl2ZS1hcHBzLWFwcGxpY2F0aW9ucy9saXZlLWFwcHMtYXBwbGljYXRpb25zLmNvbXBvbmVudCc7XG5pbXBvcnQge21hcCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5cbi8qKlxuICogU2VsZWN0aW9uIG9mIGFwcCArIHNlYXJjaGluZyBmb3IgY2FzZXNcbiAqXG4gKiAgIVthbHQtdGV4dF0oLi4vbGl2ZS1hcHBzLWNhc2Utc2VhcmNoLnBuZyBcIkltYWdlXCIpXG4gKlxuICpAZXhhbXBsZSA8dGNsYS1saXZlLWFwcHMtY2FzZS1zZWFyY2g+PC90Y2xhLWxpdmUtYXBwcy1jYXNlLXNlYXJjaD5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGNsYS1saXZlLWFwcHMtY2FzZS1zZWFyY2gnLFxuICB0ZW1wbGF0ZVVybDogJy4vbGl2ZS1hcHBzLWNhc2Utc2VhcmNoLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbGl2ZS1hcHBzLWNhc2Utc2VhcmNoLmNvbXBvbmVudC5jc3MnXVxufSlcblxuZXhwb3J0IGNsYXNzIExpdmVBcHBzQ2FzZVNlYXJjaENvbXBvbmVudCBleHRlbmRzIExpdmVBcHBzQ29tcG9uZW50IHtcbiAgQFZpZXdDaGlsZCgnc2VhcmNoQm94Jywge3N0YXRpYzogZmFsc2V9KSBzZWFyY2hCb3g6IEVsZW1lbnRSZWY7XG4gIC8qKlxuICAgKiBzYW5kYm94SWQgLSB0aGlzIGNvbWVzIGZyb20gY2xhaW1zIHJlc29sdmVyXG4gICAqL1xuICBASW5wdXQoKSBzYW5kYm94SWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgTEEgQXBwbGljYXRpb24gSURzIHlvdSB3YW50IHRvIGhhbmRsZVxuICAgKi9cbiAgQElucHV0KCkgYXBwSWRzOiBzdHJpbmdbXTtcblxuXG4gIC8qKlxuICAgKiB+ZXZlbnQgZm91bmRSZWZzIDogU2VhcmNoIGNvbXBsZXRlZCAoY2FzZVJlZnMgcmV0dXJuZWQpXG4gICAqIH5wYXlsb2FkIENhc2VTZWFyY2hSZXN1bHRzIDogY2FzZVJlZnMgbWF0Y2hpbmcgdGhlIHNlYXJjaCAoc28gcGFyZW50IGNhbiBkaXNwbGF5IHRoZW0gaW4gY2FzZSBsaXN0IGNvbXBvbmVudClcbiAgICovXG4gIEBPdXRwdXQoKSBmb3VuZFJlZnM6IEV2ZW50RW1pdHRlcjxDYXNlU2VhcmNoUmVzdWx0cz4gPSBuZXcgRXZlbnRFbWl0dGVyPENhc2VTZWFyY2hSZXN1bHRzPigpO1xuXG4gIEBWaWV3Q2hpbGQoTGl2ZUFwcHNBcHBsaWNhdGlvbnNDb21wb25lbnQsIHtzdGF0aWM6IGZhbHNlfSkgYXBwbGljYXRpb25zQ29tcG9uZW50OiBMaXZlQXBwc0FwcGxpY2F0aW9uc0NvbXBvbmVudDtcblxuICBzZWFyY2hUZXJtJDogU3ViamVjdDxzdHJpbmc+O1xuICBzZWFyY2hWYWx1ZTogT2JzZXJ2YWJsZTxTdHJpbmc+O1xuICBzZWFyY2hTdHJpbmc6IHN0cmluZztcbiAgZm9yY2VkU2VhcmNoID0gZmFsc2U7XG4gIHB1YmxpYyBzZWxlY3RlZFN0YXRlSWQ6IG51bWJlcjtcbiAgcHVibGljIHNlbGVjdGVkU3RhdGVMYWJlbDogc3RyaW5nO1xuXG4gIC8vIGNhc2UgdHlwZSBzZWxlY3RvclxuICBwdWJsaWMgc2VsZWN0ZWRBcHA6IENhc2VUeXBlID0gbmV3IENhc2VUeXBlKCk7XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGxpdmVhcHBzOiBMaXZlQXBwc1NlcnZpY2UpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgcHVibGljIHJlZnJlc2ggPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMuYXBwbGljYXRpb25zQ29tcG9uZW50KSB7XG4gICAgICB0aGlzLmFwcGxpY2F0aW9uc0NvbXBvbmVudC5yZWZyZXNoKHRydWUpO1xuICAgIH1cbiAgfVxuXG5cbiAgcHVibGljIHNldENhc2VUeXBlID0gKGNhc2VUeXBlOiBDYXNlVHlwZSkgPT4ge1xuICAgIHRoaXMuc2VsZWN0ZWRBcHAgPSBjYXNlVHlwZTtcbiAgICB0aGlzLmRvU2VhcmNoKCk7XG4gICAgdGhpcy5hcHBsaWNhdGlvbnNDb21wb25lbnQuY2hhbmdlQXBwU2VsZWN0aW9uKGNhc2VUeXBlKTtcbiAgfVxuXG4gIHB1YmxpYyBzZXRTZWxlY3RlZFN0YXRlSWQgPSAoc3RhdGVJZDogbnVtYmVyLCBzdGF0ZUxhYmVsOiBzdHJpbmcpID0+IHtcbiAgICB0aGlzLnNlbGVjdGVkU3RhdGVJZCA9IHN0YXRlSWQ7XG4gICAgdGhpcy5zZWxlY3RlZFN0YXRlTGFiZWwgPSBzdGF0ZUxhYmVsO1xuICAgIC8vIG5vdCBjdXJyZW50bHkgc3VwcG9ydGVkIHRvIGxpbWl0IHNlYXJjaCBieSBzdGF0ZUlkXG4gICAgLy8gdGhpcy5kb1NlYXJjaChzdGF0ZUlkKTtcbiAgfVxuXG4gIC8vIGhhbmRsZSBzZWFyY2ggYXBwIHNlbGVjdGlvblxuICBwdWJsaWMgaGFuZGxlU2VhcmNoQXBwU2VsZWN0aW9uID0gKGFwcGxpY2F0aW9uOiBDYXNlVHlwZSkgPT4ge1xuICAgIHRoaXMuc2VsZWN0ZWRBcHAgPSBhcHBsaWNhdGlvbjtcbiAgICB0aGlzLmRvU2VhcmNoKCk7XG4gIH1cblxuICAvLyBjbGVhciBzZWFyY2ggcmVzdWx0c1xuICBwdWJsaWMgY2xlYXJSZXN1bHRzID0gKCkgPT4ge1xuICAgIHRoaXMuc2VhcmNoU3RyaW5nID0gJyc7XG4gICAgdGhpcy5zZWxlY3RlZFN0YXRlSWQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5zZWxlY3RlZFN0YXRlTGFiZWwgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5kb1NlYXJjaCgpO1xuICB9XG5cbiAgcHVibGljIGZvcmNlU2VhcmNoID0gKCkgPT4ge1xuICAgIHRoaXMuZm9yY2VkU2VhcmNoID0gdHJ1ZTtcbiAgICB0aGlzLmxpdmVhcHBzLmNhc2VTZWFyY2hFbnRyaWVzKHRoaXMuc2VhcmNoQm94Lm5hdGl2ZUVsZW1lbnQudmFsdWUsIHRoaXMuc2FuZGJveElkLCB0aGlzLnNlbGVjdGVkQXBwLmFwcGxpY2F0aW9uSWQsIHRoaXMuc2VsZWN0ZWRBcHAuaWQsIHRydWUsIDAsIDEwMDAsIG51bGwpLnN1YnNjcmliZShcbiAgICAgIHJlc3VsdHMgPT4ge1xuICAgICAgICB0aGlzLmZvdW5kUmVmcy5lbWl0KHJlc3VsdHMpO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxuICBwdWJsaWMgZG9TZWFyY2ggPSAoc3RhdGVJZD86IG51bWJlcikgPT4ge1xuICAgIHRoaXMuZm9yY2VkU2VhcmNoID0gZmFsc2U7XG4gICAgdGhpcy5zZWFyY2hCb3gubmF0aXZlRWxlbWVudC52YWx1ZSA9ICcnO1xuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBDYXNlU2VhcmNoUmVzdWx0cygpLmRlc2VyaWFsaXplKHsgY2FzZXJlZnM6IFtdLCBzZWFyY2hTdHJpbmc6ICcnIH0pO1xuICAgIHRoaXMuZm91bmRSZWZzLmVtaXQocmVzdWx0KTtcbiAgICB0aGlzLnNlYXJjaFRlcm0kID0gbmV3IFN1YmplY3Q8c3RyaW5nPigpO1xuICAgIHRoaXMuc2VhcmNoVGVybSQuc3Vic2NyaWJlKG5leHQgPT4ge1xuICAgICAgdGhpcy5zZWFyY2hTdHJpbmcgPSBuZXh0O1xuICAgICAgcmV0dXJuIG5leHQ7XG4gICAgfSlcbiAgICB0aGlzLnNlYXJjaFZhbHVlID0gdGhpcy5zZWFyY2hUZXJtJC5hc09ic2VydmFibGUoKTtcbiAgICBpZiAodGhpcy5zZWxlY3RlZEFwcC5hcHBsaWNhdGlvbklkICYmIHRoaXMuc2VsZWN0ZWRBcHAuaWQgJiYgdGhpcy5zYW5kYm94SWQpIHtcbiAgICAgIGNvbnN0IHNraXAgPSAwO1xuICAgICAgY29uc3QgdG9wID0gMTAwMDtcbiAgICAgIC8vIE5vdGU6IFRoZSBBUEkgbGltaXRzIHNlYXJjaGVzIHRvIDEwMDAgaXRlbXNcbiAgICAgIC8vIFRoZSBzZXJ2aWNlIGlzIGNvbmZpZ3VyZWQgdG8gb3B0aW1pemUgcGVyZm9ybWFuY2UgYnkgb25seSByZXR1cm5pbmcgY2FzZSByZWZlcmVuY2VzIGF0IHRoaXMgc3RhZ2VcbiAgICAgIC8vIFRoZSBjYXNlIGRldGFpbHMgd2lsbCBvbmx5IGJlIGxvYWRlZCB3aGVuIHRoZSBpdGVtIGlzIHJlbmRlcmVkIChmb3IgZXhhbXBsZSBpbiB0aGUgY2FzZS1saXN0IGNvbXBvbmVudClcbiAgICAgIC8vIEFueSBjYXNlIGxpc3QgY29tcG9uZW50IHNob3VsZCB1c2UgY2RrIHZpcnR1YWwgc2Nyb2xsIHRvIGVuc3VyZSAxMDAwIGNhc2UgZGV0YWlscyBhcmUgbm90IGxvYWRlZCBpbiBvbmUgZ29cbiAgICAgIC8vIChmcm9tIHRoZSBBUEkgb3IgdG8gdGhlIERPTSlcbiAgICAgIHRoaXMubGl2ZWFwcHMuY2FzZVNlYXJjaCh0aGlzLnNlYXJjaFRlcm0kLCB0aGlzLnNhbmRib3hJZCwgdGhpcy5zZWxlY3RlZEFwcC5hcHBsaWNhdGlvbklkLCB0aGlzLnNlbGVjdGVkQXBwLmlkLCBza2lwLCB0b3AsIHN0YXRlSWQgPyBzdGF0ZUlkIDogbnVsbClcbiAgICAgICAgLnN1YnNjcmliZShyZXN1bHRzID0+IHtcbiAgICAgICAgICB0aGlzLmZvdW5kUmVmcy5lbWl0KHJlc3VsdHMpO1xuICAgICAgICB9KTtcbiAgICB9XG4gIH1cblxufVxuIl19