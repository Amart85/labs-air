/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { LandingPageItemConfig, TcGeneralLandingPageService, ActionButtonConfig } from '@tibco-tcstk/tc-core-lib';
import { Router } from '@angular/router';
/**
 * Landing page
 *
 * This component allows a configurable landing page on a per role basis
 *
 * \@example <tcla-live-apps-landing-page></tcla-live-apps-landing-page>
 */
export class LiveAppsLandingPageComponent {
    /**
     * @param {?} router
     * @param {?} landingPageService
     */
    constructor(router, landingPageService) {
        this.router = router;
        this.landingPageService = landingPageService;
        this.getStartedEvent = new EventEmitter();
        this.getStartedClick = (/**
         * @param {?} route
         * @return {?}
         */
        (route) => {
            this.getStartedEvent.emit(route);
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.landingPageService.getLandingPageForRole(this.roleId, this.uiAppId).subscribe((/**
         * @param {?} landingPage
         * @return {?}
         */
        landingPage => {
            if (landingPage !== undefined) {
                this.title = landingPage.title;
                this.subtitle = landingPage.subtitle;
                this.backgroundImage = (landingPage.backgroundURL !== '' ? '/webresource/orgFolders/' + this.uiAppId + '/background/' + landingPage.backgroundURL : '');
                this.topMargin = landingPage.topMargin ? landingPage.topMargin + 'px' : '0px';
                this.highlights = new Array();
                this.highlights.push(new LandingPageItemConfig().deserialize({
                    title: landingPage.highlights[0].title,
                    content: landingPage.highlights[0].content,
                    iconURL: landingPage.highlights[0].iconURL
                }));
                this.highlights.push(new LandingPageItemConfig().deserialize({
                    title: landingPage.highlights[1].title,
                    content: landingPage.highlights[1].content,
                    iconURL: landingPage.highlights[1].iconURL
                }));
                this.highlights.push(new LandingPageItemConfig().deserialize({
                    title: landingPage.highlights[2].title,
                    content: landingPage.highlights[2].content,
                    iconURL: landingPage.highlights[2].iconURL
                }));
                this.actionButtons = new Array();
                this.actionButtons.push(new ActionButtonConfig().deserialize({ text: 'Get started', route: landingPage.homeRoute }));
                this.navigateURL = landingPage.homeRoute;
            }
            else {
                this.router.navigate(['errorHandler/NO_LANDING/NO_LANDING']);
            }
        }));
    }
}
LiveAppsLandingPageComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-landing-page',
                template: "<tc-tibco-cloud-splash-screen fxFill\n    [title]=\"title\" \n    [subTitle]=\"subtitle\" \n    [backGroundImage]=\"backgroundImage\"\n    [topMargin]=\"topMargin\"\n    [highlights]=\"highlights\"\n    [actionButtons]=\"actionButtons\"\n    (getStartedEvent)=\"getStartedClick($event)\">\n</tc-tibco-cloud-splash-screen>",
                styles: [""]
            }] }
];
/** @nocollapse */
LiveAppsLandingPageComponent.ctorParameters = () => [
    { type: Router },
    { type: TcGeneralLandingPageService }
];
LiveAppsLandingPageComponent.propDecorators = {
    uiAppId: [{ type: Input }],
    roleId: [{ type: Input }],
    getStartedEvent: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.uiAppId;
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.roleId;
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.getStartedEvent;
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.title;
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.subtitle;
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.backgroundImage;
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.topMargin;
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.highlights;
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.actionButtons;
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.navigateURL;
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.getStartedClick;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLandingPageComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLandingPageComponent.prototype.landingPageService;
}
//# sourceMappingURL=data:application/json;base64,