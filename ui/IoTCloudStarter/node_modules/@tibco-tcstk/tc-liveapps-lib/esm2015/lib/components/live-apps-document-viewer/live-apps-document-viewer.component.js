/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Document } from '../../models/tc-document';
import { TcDocumentService } from '../../services/tc-document.service';
import { TcCoreCommonFunctions } from '@tibco-tcstk/tc-core-lib';
import { Location } from '@angular/common';
/**
 * Display document
 *
 * \@example <tcla-live-apps-document-viewer></tcla-live-apps-document-viewer>
 */
export class LiveAppsDocumentViewerComponent {
    /**
     * @param {?} sanitizer
     * @param {?} documentsService
     * @param {?} location
     */
    constructor(sanitizer, documentsService, location) {
        this.sanitizer = sanitizer;
        this.documentsService = documentsService;
        this.location = location;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        /** @type {?} */
        const preparedUrl = TcCoreCommonFunctions.prepareUrlForNonStaticResource(this.location, this.documentsService.getUrlForDocument(this.folderType, this.folderId, this.document.name, this.document.artifactVersion, this.sandboxId));
        this.sanitizedResourceUrl = this.sanitizer.bypassSecurityTrustResourceUrl(preparedUrl);
    }
}
LiveAppsDocumentViewerComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-document-viewer',
                template: "<div fxFill>\n  <iframe name=\"DocViewerFrame\" class=\"md-dialog-content\" fxFill [src]=\"sanitizedResourceUrl\">\n  </iframe>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
LiveAppsDocumentViewerComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: TcDocumentService },
    { type: Location }
];
LiveAppsDocumentViewerComponent.propDecorators = {
    document: [{ type: Input }],
    folderType: [{ type: Input }],
    folderId: [{ type: Input }],
    sandboxId: [{ type: Input }]
};
if (false) {
    /**
     * Document metadata object from API - describes the document to display
     * @type {?}
     */
    LiveAppsDocumentViewerComponent.prototype.document;
    /**
     * orgFolders' or 'caseFolders' - different API calls made according to which one this is
     * @type {?}
     */
    LiveAppsDocumentViewerComponent.prototype.folderType;
    /**
     * The organisation folder to store/retrieve documents
     * @type {?}
     */
    LiveAppsDocumentViewerComponent.prototype.folderId;
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsDocumentViewerComponent.prototype.sandboxId;
    /** @type {?} */
    LiveAppsDocumentViewerComponent.prototype.sanitizedResourceUrl;
    /**
     * @type {?}
     * @private
     */
    LiveAppsDocumentViewerComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    LiveAppsDocumentViewerComponent.prototype.documentsService;
    /**
     * @type {?}
     * @private
     */
    LiveAppsDocumentViewerComponent.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWRvY3VtZW50LXZpZXdlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbGl2ZS1hcHBzLWRvY3VtZW50LXZpZXdlci9saXZlLWFwcHMtZG9jdW1lbnQtdmlld2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQVMsTUFBTSxlQUFlLENBQUM7QUFDdkQsT0FBTyxFQUFDLFlBQVksRUFBa0IsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDbEQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFDckUsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7QUFhekMsTUFBTSxPQUFPLCtCQUErQjs7Ozs7O0lBdUIxQyxZQUFvQixTQUF1QixFQUFVLGdCQUFtQyxFQUFVLFFBQWtCO1FBQWhHLGNBQVMsR0FBVCxTQUFTLENBQWM7UUFBVSxxQkFBZ0IsR0FBaEIsZ0JBQWdCLENBQW1CO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUFJLENBQUM7Ozs7SUFFekgsUUFBUTs7Y0FDQSxXQUFXLEdBQUcscUJBQXFCLENBQUMsOEJBQThCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsZUFBZSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztRQUNuTyxJQUFJLENBQUMsb0JBQW9CLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyw4QkFBOEIsQ0FBQyxXQUFXLENBQUMsQ0FBQztJQUN6RixDQUFDOzs7WUFqQ0YsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxnQ0FBZ0M7Z0JBQzFDLHFKQUF5RDs7YUFFMUQ7Ozs7WUFoQk8sWUFBWTtZQUVaLGlCQUFpQjtZQUVqQixRQUFROzs7dUJBaUJiLEtBQUs7eUJBS0wsS0FBSzt1QkFLTCxLQUFLO3dCQUtMLEtBQUs7Ozs7Ozs7SUFmTixtREFBNEI7Ozs7O0lBSzVCLHFEQUE0Qjs7Ozs7SUFLNUIsbURBQTBCOzs7OztJQUsxQixvREFBMkI7O0lBRTNCLCtEQUE2Qzs7Ozs7SUFFakMsb0RBQStCOzs7OztJQUFFLDJEQUEyQzs7Ozs7SUFBRSxtREFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgSW5wdXQsIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0RvbVNhbml0aXplciwgU2FmZVJlc291cmNlVXJsfSBmcm9tICdAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyJztcbmltcG9ydCB7RG9jdW1lbnR9IGZyb20gJy4uLy4uL21vZGVscy90Yy1kb2N1bWVudCc7XG5pbXBvcnQge1RjRG9jdW1lbnRTZXJ2aWNlfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy90Yy1kb2N1bWVudC5zZXJ2aWNlJztcbmltcG9ydCB7VGNDb3JlQ29tbW9uRnVuY3Rpb25zfSBmcm9tICdAdGliY28tdGNzdGsvdGMtY29yZS1saWInO1xuaW1wb3J0IHtMb2NhdGlvbn0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuLyoqXG4gKiBEaXNwbGF5IGRvY3VtZW50XG4gKlxuICpAZXhhbXBsZSA8dGNsYS1saXZlLWFwcHMtZG9jdW1lbnQtdmlld2VyPjwvdGNsYS1saXZlLWFwcHMtZG9jdW1lbnQtdmlld2VyPlxuICovXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RjbGEtbGl2ZS1hcHBzLWRvY3VtZW50LXZpZXdlcicsXG4gIHRlbXBsYXRlVXJsOiAnLi9saXZlLWFwcHMtZG9jdW1lbnQtdmlld2VyLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbGl2ZS1hcHBzLWRvY3VtZW50LXZpZXdlci5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgTGl2ZUFwcHNEb2N1bWVudFZpZXdlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiBEb2N1bWVudCBtZXRhZGF0YSBvYmplY3QgZnJvbSBBUEkgLSBkZXNjcmliZXMgdGhlIGRvY3VtZW50IHRvIGRpc3BsYXlcbiAgICovXG4gIEBJbnB1dCgpIGRvY3VtZW50OiBEb2N1bWVudDtcblxuICAvKipcbiAgICogb3JnRm9sZGVycycgb3IgJ2Nhc2VGb2xkZXJzJyAtIGRpZmZlcmVudCBBUEkgY2FsbHMgbWFkZSBhY2NvcmRpbmcgdG8gd2hpY2ggb25lIHRoaXMgaXNcbiAgICovXG4gIEBJbnB1dCgpIGZvbGRlclR5cGU6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIG9yZ2FuaXNhdGlvbiBmb2xkZXIgdG8gc3RvcmUvcmV0cmlldmUgZG9jdW1lbnRzXG4gICAqL1xuICBASW5wdXQoKSBmb2xkZXJJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBzYW5kYm94SWQgLSB0aGlzIGNvbWVzIGZyb20gY2xhaW1zIHJlc29sdmVyXG4gICAqL1xuICBASW5wdXQoKSBzYW5kYm94SWQ6IG51bWJlcjtcblxuICBwdWJsaWMgc2FuaXRpemVkUmVzb3VyY2VVcmw6IFNhZmVSZXNvdXJjZVVybDtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHNhbml0aXplcjogRG9tU2FuaXRpemVyLCBwcml2YXRlIGRvY3VtZW50c1NlcnZpY2U6IFRjRG9jdW1lbnRTZXJ2aWNlLCBwcml2YXRlIGxvY2F0aW9uOiBMb2NhdGlvbikgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgY29uc3QgcHJlcGFyZWRVcmwgPSBUY0NvcmVDb21tb25GdW5jdGlvbnMucHJlcGFyZVVybEZvck5vblN0YXRpY1Jlc291cmNlKHRoaXMubG9jYXRpb24sIHRoaXMuZG9jdW1lbnRzU2VydmljZS5nZXRVcmxGb3JEb2N1bWVudCh0aGlzLmZvbGRlclR5cGUsIHRoaXMuZm9sZGVySWQsIHRoaXMuZG9jdW1lbnQubmFtZSwgdGhpcy5kb2N1bWVudC5hcnRpZmFjdFZlcnNpb24sIHRoaXMuc2FuZGJveElkKSk7XG4gICAgdGhpcy5zYW5pdGl6ZWRSZXNvdXJjZVVybCA9IHRoaXMuc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybChwcmVwYXJlZFVybCk7XG4gIH1cblxufVxuIl19