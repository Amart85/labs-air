/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { CaseType } from '../../models/liveappsdata';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { LiveAppsCaseSearchComponent } from '../live-apps-case-search/live-apps-case-search.component';
import { LiveAppsService } from '../../services/live-apps.service';
/**
 * High Level search widget component (wraps others)
 * This Component allows to search for existing Cases and list Case Cards.
 *
 * ![alt-text](../live-apps-search-widget.png "")
 *
 * \@example <tcla-live-apps-search-widget></tcla-live-apps-search-widget>
 */
export class LiveAppsSearchWidgetComponent extends LiveAppsComponent {
    /**
     * @param {?} liveapps
     */
    constructor(liveapps) {
        super();
        this.liveapps = liveapps;
        /**
         * ~event caseSelected : Case Clicked
         * ~payload string : emits case reference when a case is clicked (so parent can navigate to case)
         */
        this.caseSelected = new EventEmitter();
        // case search
        this.matchedRefs = [];
        // handle case search results
        this.handleSearchResults = (/**
         * @param {?} data
         * @return {?}
         */
        (data) => {
            this.message = undefined;
            this.matchedRefs = data.caserefs;
            this.searchString = data.searchString;
        });
        this.handleClearMatches = (/**
         * @return {?}
         */
        () => {
            this.caseSearchComponent.clearResults();
            this.matchedRefs = [];
            this.message = undefined;
        });
        // case clicked
        this.clickCaseAction = (/**
         * @param {?} caseReference
         * @return {?}
         */
        (caseReference) => {
            this.caseSelected.emit(caseReference);
        });
        this.refresh = (/**
         * @return {?}
         */
        () => {
            if (this.caseSearchComponent) {
                this.caseSearchComponent.refresh();
            }
        });
        this.searchCasesByState = (/**
         * @param {?} stateId
         * @param {?} stateLabel
         * @param {?} appId
         * @param {?} typeId
         * @param {?} message
         * @return {?}
         */
        (stateId, stateLabel, appId, typeId, message) => {
            this.caseSearchComponent.setCaseType(new CaseType().deserialize({ applicationId: appId, id: typeId }));
            this.caseSearchComponent.setSelectedStateId(stateId, stateLabel);
            this.message = message;
            this.liveapps.caseSearchEntries('', this.sandboxId, appId, typeId, true, 0, 1000, stateId).subscribe((/**
             * @param {?} results
             * @return {?}
             */
            results => {
                this.matchedRefs = results.caserefs;
            }));
        });
    }
}
LiveAppsSearchWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-search-widget',
                template: "<div>\n  <div fxLayout=\"row\" style=\"margin-left: 50px; margin-right: 50px; margin-top: 10px; margin-bottom: 10px;\">\n    <tcla-live-apps-case-search fxFlex fxLayoutAlign=\"center center\" [sandboxId]=\"sandboxId\" [appIds]=\"appIds\" (foundRefs)=\"handleSearchResults($event)\"></tcla-live-apps-case-search>\n  </div>\n  <div *ngIf=\"matchedRefs.length>0\" fxLayout=\"row\" fxLayoutAlign=\"space-around start\" style=\"margin-left: 50px; margin-right: 50px; margin-top: 20px; margin-bottom: 20px\">\n      <tcla-live-apps-case-list fxFlex [sandboxId]=\"sandboxId\" [uiAppId]=\"uiAppId\" [caseRefs]=\"matchedRefs\" [displayType]=\"'list'\" [headerText]=\"'Matching Cases'\" [headerMessage]=\"message\" [highlight]=\"searchString\" (clickCase)=\"clickCaseAction($event)\" (clearMatches)=\"handleClearMatches()\"></tcla-live-apps-case-list>\n  </div>\n</div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
LiveAppsSearchWidgetComponent.ctorParameters = () => [
    { type: LiveAppsService }
];
LiveAppsSearchWidgetComponent.propDecorators = {
    sandboxId: [{ type: Input }],
    uiAppId: [{ type: Input }],
    appIds: [{ type: Input }],
    caseSelected: [{ type: Output }],
    caseSearchComponent: [{ type: ViewChild, args: [LiveAppsCaseSearchComponent, { static: false },] }]
};
if (false) {
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsSearchWidgetComponent.prototype.sandboxId;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     * @type {?}
     */
    LiveAppsSearchWidgetComponent.prototype.uiAppId;
    /**
     * The list of LA Application IDs you want to handle
     * @type {?}
     */
    LiveAppsSearchWidgetComponent.prototype.appIds;
    /**
     * ~event caseSelected : Case Clicked
     * ~payload string : emits case reference when a case is clicked (so parent can navigate to case)
     * @type {?}
     */
    LiveAppsSearchWidgetComponent.prototype.caseSelected;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.caseSearchComponent;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.matchedRefs;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.searchString;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.message;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.handleSearchResults;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.handleClearMatches;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.clickCaseAction;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.refresh;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.searchCasesByState;
    /**
     * @type {?}
     * @private
     */
    LiveAppsSearchWidgetComponent.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLXNlYXJjaC13aWRnZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2xpdmUtYXBwcy1zZWFyY2gtd2lkZ2V0L2xpdmUtYXBwcy1zZWFyY2gtd2lkZ2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFvQixRQUFRLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUN0RSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxzREFBc0QsQ0FBQztBQUN2RixPQUFPLEVBQUMsMkJBQTJCLEVBQUMsTUFBTSwwREFBMEQsQ0FBQztBQUNyRyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sa0NBQWtDLENBQUM7Ozs7Ozs7OztBQWlCakUsTUFBTSxPQUFPLDZCQUE4QixTQUFRLGlCQUFpQjs7OztJQTZCbEUsWUFBb0IsUUFBeUI7UUFDM0MsS0FBSyxFQUFFLENBQUM7UUFEVSxhQUFRLEdBQVIsUUFBUSxDQUFpQjs7Ozs7UUFUbkMsaUJBQVksR0FBeUIsSUFBSSxZQUFZLEVBQVUsQ0FBQzs7UUFLMUUsZ0JBQVcsR0FBYSxFQUFFLENBQUM7O1FBU3BCLHdCQUFtQjs7OztRQUFHLENBQUMsSUFBdUIsRUFBRSxFQUFFO1lBQ3ZELElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO1lBQ3pCLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQztZQUNqQyxJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDeEMsQ0FBQyxFQUFBO1FBRU0sdUJBQWtCOzs7UUFBRyxHQUFHLEVBQUU7WUFDL0IsSUFBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3hDLElBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1lBQ3RCLElBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO1FBQzNCLENBQUMsRUFBQTs7UUFHTSxvQkFBZTs7OztRQUFHLENBQUMsYUFBYSxFQUFFLEVBQUU7WUFDekMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDeEMsQ0FBQyxFQUFBO1FBRU0sWUFBTzs7O1FBQUcsR0FBRyxFQUFFO1lBQ3BCLElBQUksSUFBSSxDQUFDLG1CQUFtQixFQUFFO2dCQUM1QixJQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDcEM7UUFDSCxDQUFDLEVBQUE7UUFFTSx1QkFBa0I7Ozs7Ozs7O1FBQUcsQ0FBQyxPQUFlLEVBQUUsVUFBa0IsRUFBRSxLQUFhLEVBQUUsTUFBYyxFQUFFLE9BQWUsRUFBRSxFQUFFO1lBQ2xILElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxXQUFXLENBQUMsSUFBSSxRQUFRLEVBQUUsQ0FBQyxXQUFXLENBQUUsRUFBRSxhQUFhLEVBQUcsS0FBSyxFQUFFLEVBQUUsRUFBRSxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFDekcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLGtCQUFrQixDQUFDLE9BQU8sRUFBRSxVQUFVLENBQUMsQ0FBQztZQUNqRSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztZQUN2QixJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUMsU0FBUzs7OztZQUNsRyxPQUFPLENBQUMsRUFBRTtnQkFDUixJQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDdEMsQ0FBQyxFQUNGLENBQUM7UUFDSixDQUFDLEVBQUE7SUFuQ0QsQ0FBQzs7O1lBcENGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsOEJBQThCO2dCQUN4Qyx5MkJBQXVEOzthQUV4RDs7OztZQWhCTyxlQUFlOzs7d0JBcUJwQixLQUFLO3NCQUtMLEtBQUs7cUJBS0wsS0FBSzsyQkFNTCxNQUFNO2tDQUdOLFNBQVMsU0FBQywyQkFBMkIsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUM7Ozs7Ozs7SUFuQnZELGtEQUEyQjs7Ozs7SUFLM0IsZ0RBQXlCOzs7OztJQUt6QiwrQ0FBMEI7Ozs7OztJQU0xQixxREFBMEU7O0lBRzFFLDREQUEwRzs7SUFFMUcsb0RBQTJCOztJQUMzQixxREFBcUI7O0lBQ3JCLGdEQUFnQjs7SUFPaEIsNERBSUM7O0lBRUQsMkRBSUM7O0lBR0Qsd0RBRUM7O0lBRUQsZ0RBSUM7O0lBRUQsMkRBU0M7Ozs7O0lBckNXLGlEQUFpQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkluaXQsIE91dHB1dCwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q2FzZVNlYXJjaFJlc3VsdHMsIENhc2VUeXBlfSBmcm9tICcuLi8uLi9tb2RlbHMvbGl2ZWFwcHNkYXRhJztcbmltcG9ydCB7TGl2ZUFwcHNDb21wb25lbnR9IGZyb20gJy4uL2xpdmUtYXBwcy1jb21wb25lbnQvbGl2ZS1hcHBzLWNvbXBvbmVudC5jb21wb25lbnQnO1xuaW1wb3J0IHtMaXZlQXBwc0Nhc2VTZWFyY2hDb21wb25lbnR9IGZyb20gJy4uL2xpdmUtYXBwcy1jYXNlLXNlYXJjaC9saXZlLWFwcHMtY2FzZS1zZWFyY2guY29tcG9uZW50JztcbmltcG9ydCB7TGl2ZUFwcHNTZXJ2aWNlfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9saXZlLWFwcHMuc2VydmljZSc7XG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xuXG4vKipcbiAqIEhpZ2ggTGV2ZWwgc2VhcmNoIHdpZGdldCBjb21wb25lbnQgKHdyYXBzIG90aGVycylcbiAqIFRoaXMgQ29tcG9uZW50IGFsbG93cyB0byBzZWFyY2ggZm9yIGV4aXN0aW5nIENhc2VzIGFuZCBsaXN0IENhc2UgQ2FyZHMuXG4gKlxuICogIVthbHQtdGV4dF0oLi4vbGl2ZS1hcHBzLXNlYXJjaC13aWRnZXQucG5nIFwiXCIpXG4gKlxuICpAZXhhbXBsZSA8dGNsYS1saXZlLWFwcHMtc2VhcmNoLXdpZGdldD48L3RjbGEtbGl2ZS1hcHBzLXNlYXJjaC13aWRnZXQ+XG4gKi9cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGNsYS1saXZlLWFwcHMtc2VhcmNoLXdpZGdldCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9saXZlLWFwcHMtc2VhcmNoLXdpZGdldC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2xpdmUtYXBwcy1zZWFyY2gtd2lkZ2V0LmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBMaXZlQXBwc1NlYXJjaFdpZGdldENvbXBvbmVudCBleHRlbmRzIExpdmVBcHBzQ29tcG9uZW50IHtcbiAgLyoqXG4gICAqIHNhbmRib3hJZCAtIHRoaXMgY29tZXMgZnJvbSBjbGFpbXMgcmVzb2x2ZXJcbiAgICovXG4gIEBJbnB1dCgpIHNhbmRib3hJZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgQXBwbGljYXRpb24gSUQgb2YgdGhlIFVJIChzaG91bGQgaWRlYWxseSBiZSB1bmlxdWUgYXMgaXQgaXMgc2hhcmVkIHN0YXRlIGtleSlcbiAgICovXG4gIEBJbnB1dCgpIHVpQXBwSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIGxpc3Qgb2YgTEEgQXBwbGljYXRpb24gSURzIHlvdSB3YW50IHRvIGhhbmRsZVxuICAgKi9cbiAgQElucHV0KCkgYXBwSWRzOiBzdHJpbmdbXTtcblxuICAvKipcbiAgICogfmV2ZW50IGNhc2VTZWxlY3RlZCA6IENhc2UgQ2xpY2tlZFxuICAgKiB+cGF5bG9hZCBzdHJpbmcgOiBlbWl0cyBjYXNlIHJlZmVyZW5jZSB3aGVuIGEgY2FzZSBpcyBjbGlja2VkIChzbyBwYXJlbnQgY2FuIG5hdmlnYXRlIHRvIGNhc2UpXG4gICAqL1xuICBAT3V0cHV0KCkgY2FzZVNlbGVjdGVkOiBFdmVudEVtaXR0ZXI8c3RyaW5nPiA9IG5ldyBFdmVudEVtaXR0ZXI8c3RyaW5nPigpO1xuXG5cbiAgQFZpZXdDaGlsZChMaXZlQXBwc0Nhc2VTZWFyY2hDb21wb25lbnQsIHtzdGF0aWM6IGZhbHNlfSkgY2FzZVNlYXJjaENvbXBvbmVudDogTGl2ZUFwcHNDYXNlU2VhcmNoQ29tcG9uZW50O1xuICAvLyBjYXNlIHNlYXJjaFxuICBtYXRjaGVkUmVmczogc3RyaW5nW10gPSBbXTtcbiAgc2VhcmNoU3RyaW5nOiBzdHJpbmc7XG4gIG1lc3NhZ2U6IHN0cmluZztcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxpdmVhcHBzOiBMaXZlQXBwc1NlcnZpY2UpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgLy8gaGFuZGxlIGNhc2Ugc2VhcmNoIHJlc3VsdHNcbiAgcHVibGljIGhhbmRsZVNlYXJjaFJlc3VsdHMgPSAoZGF0YTogQ2FzZVNlYXJjaFJlc3VsdHMpID0+IHtcbiAgICB0aGlzLm1lc3NhZ2UgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5tYXRjaGVkUmVmcyA9IGRhdGEuY2FzZXJlZnM7XG4gICAgdGhpcy5zZWFyY2hTdHJpbmcgPSBkYXRhLnNlYXJjaFN0cmluZztcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVDbGVhck1hdGNoZXMgPSAoKSA9PiB7XG4gICAgdGhpcy5jYXNlU2VhcmNoQ29tcG9uZW50LmNsZWFyUmVzdWx0cygpO1xuICAgIHRoaXMubWF0Y2hlZFJlZnMgPSBbXTtcbiAgICB0aGlzLm1lc3NhZ2UgPSB1bmRlZmluZWQ7XG4gIH1cblxuICAvLyBjYXNlIGNsaWNrZWRcbiAgcHVibGljIGNsaWNrQ2FzZUFjdGlvbiA9IChjYXNlUmVmZXJlbmNlKSA9PiB7XG4gICAgdGhpcy5jYXNlU2VsZWN0ZWQuZW1pdChjYXNlUmVmZXJlbmNlKTtcbiAgfVxuXG4gIHB1YmxpYyByZWZyZXNoID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLmNhc2VTZWFyY2hDb21wb25lbnQpIHtcbiAgICAgIHRoaXMuY2FzZVNlYXJjaENvbXBvbmVudC5yZWZyZXNoKCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIHNlYXJjaENhc2VzQnlTdGF0ZSA9IChzdGF0ZUlkOiBudW1iZXIsIHN0YXRlTGFiZWw6IHN0cmluZywgYXBwSWQ6IHN0cmluZywgdHlwZUlkOiBzdHJpbmcsIG1lc3NhZ2U6IHN0cmluZykgPT4ge1xuICAgIHRoaXMuY2FzZVNlYXJjaENvbXBvbmVudC5zZXRDYXNlVHlwZShuZXcgQ2FzZVR5cGUoKS5kZXNlcmlhbGl6ZSggeyBhcHBsaWNhdGlvbklkIDogYXBwSWQsIGlkOiB0eXBlSWQgfSkpO1xuICAgIHRoaXMuY2FzZVNlYXJjaENvbXBvbmVudC5zZXRTZWxlY3RlZFN0YXRlSWQoc3RhdGVJZCwgc3RhdGVMYWJlbCk7XG4gICAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgICB0aGlzLmxpdmVhcHBzLmNhc2VTZWFyY2hFbnRyaWVzKCcnLCB0aGlzLnNhbmRib3hJZCwgYXBwSWQsIHR5cGVJZCwgdHJ1ZSwgMCwgMTAwMCwgc3RhdGVJZCkuc3Vic2NyaWJlKFxuICAgICAgcmVzdWx0cyA9PiB7XG4gICAgICAgIHRoaXMubWF0Y2hlZFJlZnMgPSByZXN1bHRzLmNhc2VyZWZzO1xuICAgICAgfVxuICAgICk7XG4gIH1cblxufVxuIl19