/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ViewChild } from '@angular/core';
import { LiveAppsCaseCreatorComponent } from '../live-apps-case-creator/live-apps-case-creator.component';
import { LiveAppsService } from '../../services/live-apps.service';
import { take, takeUntil } from 'rxjs/operators';
import { LiveAppsLegacyProcessComponent } from '../live-apps-legacy-process/live-apps-legacy-process.component';
/**
 * Wraps rendering an execution of an action
 *
 * \@example <tcla-live-apps-case-action></tcla-live-apps-case-action>
 */
export class LiveAppsCaseActionComponent extends LiveAppsCaseCreatorComponent {
    /**
     * @param {?} lasvc
     */
    constructor(lasvc) {
        super(lasvc);
        this.lasvc = lasvc;
        /**
         * Enable legacy actions
         */
        this.legacyActions = this.legacyActions ? this.legacyActions : false;
        /**
         * Allow override of forms framework
         * Options: bootstrap-4 or material-design
         */
        this.formsFramework = this.formsFramework ? this.formsFramework : 'material-design';
        this.getCaseData = (/**
         * @param {?} caseRef
         * @return {?}
         */
        (caseRef) => {
            // retrieve the case data for this case reference
            this.liveapps.getCase(this.caseRef, this.sandboxId, this.applicationId, this.typeId)
                .pipe(take(1), takeUntil(this._destroyed$))
                .subscribe((/**
             * @param {?} result
             * @return {?}
             */
            result => {
                if (result.metadata.applicationId === this.applicationId.toString()) {
                    /** @type {?} */
                    const casedata = result.untaggedCasedataObj;
                    this.caseState = casedata.state;
                    this.originalData = {
                        [this.process.process.name]: casedata
                    };
                    // JS: use name rather than internalObjectName to handle appliction name change
                    /** @type {?} */
                    const caseTypeName = this.getMainCaseTypeFromSchema(this.typeId, this.process).name;
                    this.data = {
                        [caseTypeName]: casedata
                    };
                }
                else {
                    console.error('The selected case is not the right case type for this action');
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                // Emit any error retrieving case data to the parent
                console.error('Unable to retrieve case data');
                console.error(error);
            }));
        });
        this.cancelAction = (/**
         * @return {?}
         */
        () => {
            if (this.legacyProcessComponent) {
                this.legacyProcessComponent.cancelProcess();
            }
        });
    }
    /**
     * @private
     * @param {?} typeId
     * @param {?} process
     * @return {?}
     */
    getMainCaseTypeFromSchema(typeId, process) {
        /** @type {?} */
        let requestedType;
        process.appSchema.casetypes.forEach((/**
         * @param {?} cType
         * @return {?}
         */
        (cType) => {
            if (cType.id === typeId) {
                requestedType = cType;
            }
        }));
        return requestedType;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // set default layout
        // this.layout = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // the extended class will detect change in the process and layout passed
        super.ngOnChanges(changes);
        // handle input param changes
        if ((changes.caseRef && changes.caseRef.currentValue && (changes.caseRef.currentValue !== changes.caseRef.previousValue))
            || (changes.process && changes.process.currentValue && (changes.process.currentValue !== changes.process.previousValue))) {
            // get case data if anything changes
            if (changes.process.currentValue) {
                this.getCaseData(this.caseRef);
            }
        }
        // handle process change for legacy action process
        if (changes.process && changes.process.currentValue && (changes.process.currentValue !== changes.process.previousValue)) {
            if (this.legacyProcessComponent) {
                this.legacyProcessComponent.changeProcess(changes.process.currentValue);
            }
        }
    }
}
LiveAppsCaseActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-case-action',
                template: "<div class=\"tcs-case-action-pane\" fxLayout=\"column\" fxFill>\n  <tc-tibco-cloud-widget-header *ngIf=\"showHeader\" fxFlex=\"nogrow\" [headerText]=\"'Action'\" [icon]=\"'tcs-case-action-item'\"></tc-tibco-cloud-widget-header>\n  <tcfrm-rendered-form *ngIf=\"data && process && (!legacyActions || isCustomForm)\" [schema]=\"schema\" [layout]=\"layout\" [data]=\"data\" [caseRef]=\"caseRef\" [appId]=\"applicationId\" [customFormDefs]=\"customFormDefs\" [formsFramework]=\"formsFramework\" [formRef]=\"process.ref\" (formSubmit)=\"handleSubmit($event, caseRef)\"></tcfrm-rendered-form>\n  <tcla-live-apps-legacy-process *ngIf=\"data && process && legacyActions && !isCustomForm\" [process]=\"process\" [caseState]=\"caseState\" [type]=\"'action'\" [applicationId]=\"applicationId\" [typeId]=\"typeId\" [caseRef]=\"caseRef\" (processCancelled)=\"handleLegacyProcessCancelled()\" (processComplete)=\"handleLegacyProcessComplete()\" class=\"live-apps-widget\" fxFill></tcla-live-apps-legacy-process>\n</div>\n",
                styles: [".tcs-case-action-pane{border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff}.tcs-case-action-header{height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-case-action-header-text{margin-left:10px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px}"]
            }] }
];
/** @nocollapse */
LiveAppsCaseActionComponent.ctorParameters = () => [
    { type: LiveAppsService }
];
LiveAppsCaseActionComponent.propDecorators = {
    caseRef: [{ type: Input }],
    showHeader: [{ type: Input }],
    legacyActions: [{ type: Input }],
    formsFramework: [{ type: Input }],
    legacyProcessComponent: [{ type: ViewChild, args: [LiveAppsLegacyProcessComponent, { static: false },] }]
};
if (false) {
    /**
     * The case reference
     * @type {?}
     */
    LiveAppsCaseActionComponent.prototype.caseRef;
    /**
     * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
     * @type {?}
     */
    LiveAppsCaseActionComponent.prototype.showHeader;
    /**
     * Enable legacy actions
     * @type {?}
     */
    LiveAppsCaseActionComponent.prototype.legacyActions;
    /**
     * Allow override of forms framework
     * Options: bootstrap-4 or material-design
     * @type {?}
     */
    LiveAppsCaseActionComponent.prototype.formsFramework;
    /** @type {?} */
    LiveAppsCaseActionComponent.prototype.legacyProcessComponent;
    /** @type {?} */
    LiveAppsCaseActionComponent.prototype.originalData;
    /** @type {?} */
    LiveAppsCaseActionComponent.prototype.caseState;
    /**
     * @type {?}
     * @private
     */
    LiveAppsCaseActionComponent.prototype.getCaseData;
    /** @type {?} */
    LiveAppsCaseActionComponent.prototype.cancelAction;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsCaseActionComponent.prototype.lasvc;
}
//# sourceMappingURL=data:application/json;base64,