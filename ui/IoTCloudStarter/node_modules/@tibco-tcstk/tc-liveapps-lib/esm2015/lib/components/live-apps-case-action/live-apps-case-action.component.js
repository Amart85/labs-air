/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { LiveAppsCaseCreatorComponent } from '../live-apps-case-creator/live-apps-case-creator.component';
import { LiveAppsService } from '../../services/live-apps.service';
import { map, take, takeUntil } from 'rxjs/operators';
/**
 * Wraps rendering an execution of an action
 *
 * \@example <tcla-live-apps-case-action></tcla-live-apps-case-action>
 */
export class LiveAppsCaseActionComponent extends LiveAppsCaseCreatorComponent {
    /**
     * @param {?} lasvc
     */
    constructor(lasvc) {
        super(lasvc);
        this.lasvc = lasvc;
        this.getCaseData = (/**
         * @param {?} caseRef
         * @return {?}
         */
        (caseRef) => {
            // retrieve the case data for this case reference
            this.liveapps.getCase(this.caseRef, this.sandboxId, this.applicationId, this.typeId)
                .pipe(take(1), takeUntil(this._destroyed$), map((/**
             * @param {?} result
             * @return {?}
             */
            result => {
                if (result.metadata.applicationId === this.applicationId.toString()) {
                    /** @type {?} */
                    const casedata = result.untaggedCasedataObj;
                    this.originalData = {
                        [this.process.process.name]: casedata
                    };
                    // JS: use name rather than internalObjectName to handle appliction name change
                    /** @type {?} */
                    const caseTypeName = this.getMainCaseTypeFromSchema(this.typeId, this.process).name;
                    this.data = {
                        [caseTypeName]: casedata
                    };
                }
                else {
                    console.error('The selected case is not the right case type for this action');
                }
            })))
                .subscribe((/**
             * @param {?} success
             * @return {?}
             */
            success => success), (/**
             * @param {?} error
             * @return {?}
             */
            error => {
                // Emit any error retrieving case data to the parent
                console.error('Unable to retrieve case data');
                console.error(error);
            }));
        });
    }
    /**
     * @private
     * @param {?} typeId
     * @param {?} process
     * @return {?}
     */
    getMainCaseTypeFromSchema(typeId, process) {
        /** @type {?} */
        let requestedType;
        process.appSchema.casetypes.forEach((/**
         * @param {?} cType
         * @return {?}
         */
        (cType) => {
            if (cType.id === typeId) {
                requestedType = cType;
            }
        }));
        return requestedType;
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // set default layout
        // this.layout = [];
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        // the extended class will detect change in the process and layout passed
        super.ngOnChanges(changes);
        // handle input param changes
        if ((changes.caseRef && changes.caseRef.currentValue && (changes.caseRef.currentValue !== changes.caseRef.previousValue))
            || (changes.process && changes.process.currentValue && (changes.process.currentValue !== changes.process.previousValue))) {
            // get case data if anything changes
            if (changes.process.currentValue) {
                this.getCaseData(this.caseRef);
            }
        }
    }
}
LiveAppsCaseActionComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-case-action',
                template: "<div class=\"tcs-case-action-pane\" fxLayout=\"column\" fxFill>\n  <tc-tibco-cloud-widget-header *ngIf=\"showHeader\" fxFlex=\"nogrow\" [headerText]=\"'Action'\" [icon]=\"'tcs-case-action-item'\"></tc-tibco-cloud-widget-header>\n  <tcfrm-rendered-form *ngIf=\"data && process\" [schema]=\"schema\" [layout]=\"layout\" [data]=\"data\" [caseRef]=\"caseRef\" [appId]=\"applicationId\" [customFormDefs]=\"customFormDefs\" [formRef]=\"process.ref\" (formSubmit)=\"handleSubmit($event, caseRef)\"></tcfrm-rendered-form>\n</div>\n",
                styles: [".tcs-case-action-pane{border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff}.tcs-case-action-header{height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-case-action-header-text{margin-left:10px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px}"]
            }] }
];
/** @nocollapse */
LiveAppsCaseActionComponent.ctorParameters = () => [
    { type: LiveAppsService }
];
LiveAppsCaseActionComponent.propDecorators = {
    caseRef: [{ type: Input }],
    showHeader: [{ type: Input }]
};
if (false) {
    /**
     * The case reference
     * @type {?}
     */
    LiveAppsCaseActionComponent.prototype.caseRef;
    /**
     * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
     * @type {?}
     */
    LiveAppsCaseActionComponent.prototype.showHeader;
    /** @type {?} */
    LiveAppsCaseActionComponent.prototype.originalData;
    /**
     * @type {?}
     * @private
     */
    LiveAppsCaseActionComponent.prototype.getCaseData;
    /**
     * @type {?}
     * @private
     */
    LiveAppsCaseActionComponent.prototype.lasvc;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWNhc2UtYWN0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1saXZlYXBwcy1saWIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9saXZlLWFwcHMtY2FzZS1hY3Rpb24vbGl2ZS1hcHBzLWNhc2UtYWN0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBZ0IsS0FBSyxFQUFzRCxNQUFNLGVBQWUsQ0FBQztBQUNsSCxPQUFPLEVBQUMsNEJBQTRCLEVBQUMsTUFBTSw0REFBNEQsQ0FBQztBQUN4RyxPQUFPLEVBQUMsZUFBZSxFQUFDLE1BQU0sa0NBQWtDLENBQUM7QUFDakUsT0FBTyxFQUFDLEdBQUcsRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7Ozs7OztBQWdCcEQsTUFBTSxPQUFPLDJCQUE0QixTQUFRLDRCQUE0Qjs7OztJQW9EM0UsWUFBb0IsS0FBc0I7UUFDeEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBREssVUFBSyxHQUFMLEtBQUssQ0FBaUI7UUE3QmxDLGdCQUFXOzs7O1FBQUcsQ0FBQyxPQUFPLEVBQUUsRUFBRTtZQUNoQyxpREFBaUQ7WUFDakQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBRTtpQkFDbEYsSUFBSSxDQUNILElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUMzQixHQUFHOzs7O1lBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ1gsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsS0FBSyxJQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxFQUFFOzswQkFDN0QsUUFBUSxHQUFHLE1BQU0sQ0FBQyxtQkFBbUI7b0JBQzNDLElBQUksQ0FBQyxZQUFZLEdBQUc7d0JBQ2xCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBQUUsUUFBUTtxQkFDdEMsQ0FBQzs7OzBCQUVJLFlBQVksR0FBRyxJQUFJLENBQUMseUJBQXlCLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSTtvQkFDbkYsSUFBSSxDQUFDLElBQUksR0FBRzt3QkFDVixDQUFDLFlBQVksQ0FBQyxFQUFFLFFBQVE7cUJBQ3pCLENBQUM7aUJBQ0g7cUJBQU07b0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO2lCQUMvRTtZQUNILENBQUMsRUFBQyxDQUNMO2lCQUNFLFNBQVM7Ozs7WUFBQyxPQUFPLENBQUMsRUFBRSxDQUFDLE9BQU87Ozs7WUFBRSxLQUFLLENBQUMsRUFBRTtnQkFDckMsb0RBQW9EO2dCQUNwRCxPQUFPLENBQUMsS0FBSyxDQUFDLDhCQUE4QixDQUFDLENBQUM7Z0JBQzlDLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDdkIsQ0FBQyxFQUFDLENBQUM7UUFDUCxDQUFDLEVBQUE7SUFJRCxDQUFDOzs7Ozs7O0lBekNPLHlCQUF5QixDQUFDLE1BQWMsRUFBRSxPQUEyQjs7WUFDdkUsYUFBdUI7UUFDM0IsT0FBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTzs7OztRQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDNUMsSUFBSSxLQUFLLENBQUMsRUFBRSxLQUFLLE1BQU0sRUFBRTtnQkFDdkIsYUFBYSxHQUFHLEtBQUssQ0FBQzthQUN2QjtRQUNILENBQUMsRUFBQyxDQUFDO1FBQ0gsT0FBTyxhQUFhLENBQUM7SUFDdkIsQ0FBQzs7OztJQW1DRCxRQUFRO1FBQ04scUJBQXFCO1FBQ3JCLG9CQUFvQjtJQUN0QixDQUFDOzs7OztJQUVELFdBQVcsQ0FBQyxPQUFzQjtRQUNoQyx5RUFBeUU7UUFDekUsS0FBSyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMzQiw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksS0FBSyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2VBQ3BILENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxLQUFLLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRTtZQUMxSCxvQ0FBb0M7WUFDcEMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtnQkFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDaEM7U0FDRjtJQUNILENBQUM7OztZQTdFRixTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLDRCQUE0QjtnQkFDdEMsdWhCQUFxRDs7YUFFdEQ7Ozs7WUFoQk8sZUFBZTs7O3NCQXFCcEIsS0FBSzt5QkFLTCxLQUFLOzs7Ozs7O0lBTE4sOENBQXlCOzs7OztJQUt6QixpREFBNkI7O0lBRTdCLG1EQUFrQjs7Ozs7SUFZbEIsa0RBMkJDOzs7OztJQUVXLDRDQUE4QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgT3V0cHV0LCBTaW1wbGVDaGFuZ2VzLCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtMaXZlQXBwc0Nhc2VDcmVhdG9yQ29tcG9uZW50fSBmcm9tICcuLi9saXZlLWFwcHMtY2FzZS1jcmVhdG9yL2xpdmUtYXBwcy1jYXNlLWNyZWF0b3IuY29tcG9uZW50JztcbmltcG9ydCB7TGl2ZUFwcHNTZXJ2aWNlfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9saXZlLWFwcHMuc2VydmljZSc7XG5pbXBvcnQge21hcCwgdGFrZSwgdGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0Nhc2VUeXBlLCBQcm9jZXNzSWR9IGZyb20gJy4uLy4uL21vZGVscy9saXZlYXBwc2RhdGEnO1xuaW1wb3J0IHtMYVByb2Nlc3NTZWxlY3Rpb259IGZyb20gJy4uLy4uL21vZGVscy90Yy1jYXNlLXByb2Nlc3Nlcyc7XG5cblxuLyoqXG4gKiBXcmFwcyByZW5kZXJpbmcgYW4gZXhlY3V0aW9uIG9mIGFuIGFjdGlvblxuICpcbiAqQGV4YW1wbGUgPHRjbGEtbGl2ZS1hcHBzLWNhc2UtYWN0aW9uPjwvdGNsYS1saXZlLWFwcHMtY2FzZS1hY3Rpb24+XG4gKi9cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGNsYS1saXZlLWFwcHMtY2FzZS1hY3Rpb24nLFxuICB0ZW1wbGF0ZVVybDogJy4vbGl2ZS1hcHBzLWNhc2UtYWN0aW9uLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbGl2ZS1hcHBzLWNhc2UtYWN0aW9uLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBMaXZlQXBwc0Nhc2VBY3Rpb25Db21wb25lbnQgZXh0ZW5kcyBMaXZlQXBwc0Nhc2VDcmVhdG9yQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0LCBPbkNoYW5nZXMge1xuICAvKipcbiAgICogVGhlIGNhc2UgcmVmZXJlbmNlXG4gICAqL1xuICBASW5wdXQoKSBjYXNlUmVmOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc2hvdyB0aGUgaGVhZGVyIGJhciBpbiB0aGUgd2lkZ2V0IC0gZWcuIGZhdm9yaXRlcyBvbiBob21lIHBhZ2UgKGNvbnRhaW5zIGljb24gZXRjKSAtIGlmIG9mZiBpY29ucyBzdGlsbCBhcHBlYXIgd2l0aG91dCBiYXJcbiAgICovXG4gIEBJbnB1dCgpIHNob3dIZWFkZXI6IGJvb2xlYW47XG5cbiAgb3JpZ2luYWxEYXRhOiBhbnk7XG5cbiAgcHJpdmF0ZSBnZXRNYWluQ2FzZVR5cGVGcm9tU2NoZW1hKHR5cGVJZDogc3RyaW5nLCBwcm9jZXNzOiBMYVByb2Nlc3NTZWxlY3Rpb24pOiBDYXNlVHlwZSB7XG4gICAgbGV0IHJlcXVlc3RlZFR5cGU6IENhc2VUeXBlO1xuICAgIHByb2Nlc3MuYXBwU2NoZW1hLmNhc2V0eXBlcy5mb3JFYWNoKChjVHlwZSkgPT4ge1xuICAgICAgaWYgKGNUeXBlLmlkID09PSB0eXBlSWQpIHtcbiAgICAgICAgcmVxdWVzdGVkVHlwZSA9IGNUeXBlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXF1ZXN0ZWRUeXBlO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRDYXNlRGF0YSA9IChjYXNlUmVmKSA9PiB7XG4gICAgLy8gcmV0cmlldmUgdGhlIGNhc2UgZGF0YSBmb3IgdGhpcyBjYXNlIHJlZmVyZW5jZVxuICAgIHRoaXMubGl2ZWFwcHMuZ2V0Q2FzZSh0aGlzLmNhc2VSZWYsIHRoaXMuc2FuZGJveElkLCB0aGlzLmFwcGxpY2F0aW9uSWQsIHRoaXMudHlwZUlkIClcbiAgICAgIC5waXBlKFxuICAgICAgICB0YWtlKDEpLFxuICAgICAgICB0YWtlVW50aWwodGhpcy5fZGVzdHJveWVkJCksXG4gICAgICAgIG1hcChyZXN1bHQgPT4ge1xuICAgICAgICAgIGlmIChyZXN1bHQubWV0YWRhdGEuYXBwbGljYXRpb25JZCA9PT0gdGhpcy5hcHBsaWNhdGlvbklkLnRvU3RyaW5nKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGNhc2VkYXRhID0gcmVzdWx0LnVudGFnZ2VkQ2FzZWRhdGFPYmo7XG4gICAgICAgICAgICB0aGlzLm9yaWdpbmFsRGF0YSA9IHtcbiAgICAgICAgICAgICAgW3RoaXMucHJvY2Vzcy5wcm9jZXNzLm5hbWVdOiBjYXNlZGF0YVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIEpTOiB1c2UgbmFtZSByYXRoZXIgdGhhbiBpbnRlcm5hbE9iamVjdE5hbWUgdG8gaGFuZGxlIGFwcGxpY3Rpb24gbmFtZSBjaGFuZ2VcbiAgICAgICAgICAgIGNvbnN0IGNhc2VUeXBlTmFtZSA9IHRoaXMuZ2V0TWFpbkNhc2VUeXBlRnJvbVNjaGVtYSh0aGlzLnR5cGVJZCwgdGhpcy5wcm9jZXNzKS5uYW1lO1xuICAgICAgICAgICAgdGhpcy5kYXRhID0ge1xuICAgICAgICAgICAgICBbY2FzZVR5cGVOYW1lXTogY2FzZWRhdGFcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ1RoZSBzZWxlY3RlZCBjYXNlIGlzIG5vdCB0aGUgcmlnaHQgY2FzZSB0eXBlIGZvciB0aGlzIGFjdGlvbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSlcbiAgICApXG4gICAgICAuc3Vic2NyaWJlKHN1Y2Nlc3MgPT4gc3VjY2VzcywgZXJyb3IgPT4ge1xuICAgICAgICAvLyBFbWl0IGFueSBlcnJvciByZXRyaWV2aW5nIGNhc2UgZGF0YSB0byB0aGUgcGFyZW50XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ1VuYWJsZSB0byByZXRyaWV2ZSBjYXNlIGRhdGEnKTtcbiAgICAgICAgY29uc29sZS5lcnJvcihlcnJvcik7XG4gICAgICB9KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbGFzdmM6IExpdmVBcHBzU2VydmljZSkge1xuICAgIHN1cGVyKGxhc3ZjKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIC8vIHNldCBkZWZhdWx0IGxheW91dFxuICAgIC8vIHRoaXMubGF5b3V0ID0gW107XG4gIH1cblxuICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKSB7XG4gICAgLy8gdGhlIGV4dGVuZGVkIGNsYXNzIHdpbGwgZGV0ZWN0IGNoYW5nZSBpbiB0aGUgcHJvY2VzcyBhbmQgbGF5b3V0IHBhc3NlZFxuICAgIHN1cGVyLm5nT25DaGFuZ2VzKGNoYW5nZXMpO1xuICAgIC8vIGhhbmRsZSBpbnB1dCBwYXJhbSBjaGFuZ2VzXG4gICAgaWYgKChjaGFuZ2VzLmNhc2VSZWYgJiYgY2hhbmdlcy5jYXNlUmVmLmN1cnJlbnRWYWx1ZSAmJiAoY2hhbmdlcy5jYXNlUmVmLmN1cnJlbnRWYWx1ZSAhPT0gY2hhbmdlcy5jYXNlUmVmLnByZXZpb3VzVmFsdWUpKVxuICAgICAgfHwgKGNoYW5nZXMucHJvY2VzcyAmJiBjaGFuZ2VzLnByb2Nlc3MuY3VycmVudFZhbHVlICYmIChjaGFuZ2VzLnByb2Nlc3MuY3VycmVudFZhbHVlICE9PSBjaGFuZ2VzLnByb2Nlc3MucHJldmlvdXNWYWx1ZSkpKSB7XG4gICAgICAvLyBnZXQgY2FzZSBkYXRhIGlmIGFueXRoaW5nIGNoYW5nZXNcbiAgICAgIGlmIChjaGFuZ2VzLnByb2Nlc3MuY3VycmVudFZhbHVlKSB7XG4gICAgICAgIHRoaXMuZ2V0Q2FzZURhdGEodGhpcy5jYXNlUmVmKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxufVxuIl19