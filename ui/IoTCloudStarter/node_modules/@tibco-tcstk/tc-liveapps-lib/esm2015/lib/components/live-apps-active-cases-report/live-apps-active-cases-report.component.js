/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BaseChartDirective } from 'ng2-charts';
import { TcLiveAppsReportingService } from '../../services/tc-live-apps-reporting.service';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { map, take, takeUntil } from 'rxjs/operators';
import { DEFAULT_COLORS, DEFAULT_TYPE_COLOR } from '../../services/tc-case-card-config.service';
/**
 * Home page active cases widget sub component
 *
 * \@example <tcla-live-apps-active-cases-report></tcla-live-apps-active-cases-report>
 */
export class LiveAppsActiveCasesReportComponent extends LiveAppsComponent {
    /**
     * @param {?} reportingService
     */
    constructor(reportingService) {
        super();
        this.reportingService = reportingService;
        /**
         * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
         */
        this.maxLegendItems = this.maxLegendItems ? this.maxLegendItems : 8;
        /**
         * Whether to show percentages or raw case numbers on the doughnut chart
         */
        this.showPercentages = this.showPercentages ? this.showPercentages : false;
        /**
         * ~event selectedCaseType : Case Type selected in vizualization
         * ~payload CaseTypeReportRecord : CaseTypeReportRecord object selected from component
         */
        this.selectedCaseType = new EventEmitter();
        this.renderChart = false;
        this.doughnutChartData = [];
        this.doughnutChartType = 'doughnut';
        this.chartColors = [];
        this.defaultColors = DEFAULT_COLORS.slice().reverse();
        this.getCaseCount = (/**
         * @return {?}
         */
        () => {
            return this.totalActiveCaseCount;
        });
        this.doughnutChartOptions = {
            responsive: true,
            maintainAspectRatio: false,
            legend: {
                display: false,
                position: 'left'
            },
            layout: {
                padding: {
                    left: 0,
                    right: 0,
                    top: 10,
                    bottom: 10
                }
            },
            plugins: {
                doughnutlabel: {
                    labels: [
                        {
                            text: this.getCaseCount,
                            font: {
                                size: '20',
                                family: 'Source Sans Pro',
                                weight: 'bold'
                            },
                            color: '#b6b6b6'
                        },
                        {
                            text: 'cases',
                            font: {
                                size: '16',
                                family: 'Source Sans Pro',
                            },
                            color: '#b6b6b6'
                        }
                    ]
                },
                datalabels: {
                    anchor: 'end',
                    backgroundColor: (/**
                     * @param {?} context
                     * @return {?}
                     */
                    function (context) {
                        return context.dataset.backgroundColor;
                    }),
                    borderColor: 'white',
                    borderRadius: 25,
                    borderWidth: 2,
                    color: 'white',
                    display: (/**
                     * @param {?} context
                     * @return {?}
                     */
                    function (context) {
                        /** @type {?} */
                        const dataset = context.dataset;
                        /** @type {?} */
                        const value = dataset.data[context.dataIndex];
                        return value > 0;
                    }),
                    font: {
                        weight: 'bold'
                    },
                    formatter: (/**
                     * @param {?} value
                     * @param {?} ctx
                     * @return {?}
                     */
                    (value, ctx) => {
                        /** @type {?} */
                        const datasets = ctx.chart.data.datasets;
                        if (datasets.indexOf(ctx.dataset) === datasets.length - 1) {
                            if (this.showPercentages) {
                                /** @type {?} */
                                const sum = datasets[0].data.reduce((/**
                                 * @param {?} a
                                 * @param {?} b
                                 * @return {?}
                                 */
                                (a, b) => a + b), 0);
                                /** @type {?} */
                                const percentage = Math.round((value / sum) * 100) + '%';
                                return percentage;
                            }
                            else {
                                return value;
                            }
                        }
                        else {
                            return 0;
                        }
                    })
                }
            }
        };
        this.initReportDataToChart = (/**
         * @param {?} reportData
         * @return {?}
         */
        (reportData) => {
            this.doughnutChartData = [];
            this.totalActiveCaseCount = 0;
            /** @type {?} */
            const activeCasesArray = [];
            /** @type {?} */
            const labels = [];
            /** @type {?} */
            const colorArray = [];
            // remove any taken colors from the defaultColors
            // we have to do this before parsing the record to avoid getting same colors
            reportData.caseTypes.forEach((/**
             * @param {?} ct
             * @return {?}
             */
            ct => {
                // remove color from defaults
                if (ct.caseTypeInfo.color) {
                    this.defaultColors = this.defaultColors.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    item => item !== ct.caseTypeInfo.color));
                }
            }));
            // parse record
            reportData.caseTypes.forEach((/**
             * @param {?} caseType
             * @return {?}
             */
            caseType => {
                activeCasesArray.push(caseType.activeStateCaseCount);
                this.totalActiveCaseCount = this.totalActiveCaseCount + caseType.activeStateCaseCount;
                this.totalTerminatedCaseCount = this.totalTerminatedCaseCount + caseType.terminalStateCaseCount;
                labels.push(caseType.caseTypeInfo.label);
                // we will re-color anything that has the default color
                /** @type {?} */
                let col;
                if (caseType.caseTypeInfo.color && caseType.caseTypeInfo.color !== DEFAULT_TYPE_COLOR) {
                    // use the set color
                    col = caseType.caseTypeInfo.color;
                }
                else {
                    // try and get a color from the palette
                    /** @type {?} */
                    const palCol = this.defaultColors.pop();
                    if (palCol) {
                        col = palCol;
                    }
                    else {
                        // if no more in palette use a random color!
                        /** @type {?} */
                        const i = Math.random() * 0xffffff;
                        /** @type {?} */
                        const p = parseInt(i.toString(), 0);
                        col = '#' + p.toString(16);
                    }
                }
                colorArray.push(col);
            }));
            // showing more than 8 in the legend will take up too much space
            this.doughnutChartOptions.legend.display = labels.length <= 8;
            this.doughnutChartData = activeCasesArray;
            this.doughnutChartLabels = labels;
            this.chartColors.push({ backgroundColor: colorArray });
            this.renderChart = true;
        });
        this.refresh = (/**
         * @return {?}
         */
        () => {
            this.reportingService.getCaseTypesReport(this.sandboxId, this.appIds, this.uiAppId).pipe(take(1), takeUntil(this._destroyed$), map((/**
             * @param {?} report
             * @return {?}
             */
            report => {
                this.caseTypesReport = report;
                this.initReportDataToChart(report);
                return report;
            })))
                .subscribe(null, (/**
             * @param {?} error
             * @return {?}
             */
            error => { this.errorMessage = 'Error retrieving case types report: ' + error.error.errorMsg; }));
        });
    }
    // events
    /**
     * @param {?} __0
     * @return {?}
     */
    chartClicked({ event, active }) {
        if (active.length > 0) {
            /** @type {?} */
            const chart = active[0]._chart;
            /** @type {?} */
            const activePoints = chart.getElementAtEvent(event);
            if (activePoints.length > 0) {
                // get the internal index of slice in pie chart
                /** @type {?} */
                const clickedElementIndex = activePoints[0]._index;
                /** @type {?} */
                const label = chart.data.labels[clickedElementIndex];
                // get value by index
                /** @type {?} */
                const value = chart.data.datasets[0].data[clickedElementIndex];
                this.caseTypesReport.caseTypes[clickedElementIndex].incTerminal = false;
                this.selectedCaseType.emit(this.caseTypesReport.caseTypes[clickedElementIndex]);
            }
        }
    }
    /**
     * @param {?} __0
     * @return {?}
     */
    chartHovered({ event, active }) {
        // console.log(event, active);
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.refresh();
    }
}
LiveAppsActiveCasesReportComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-active-cases-report',
                template: "  <div fxLayout=\"column\" fxFlex style=\"overflow: auto\">\n    <div *ngIf=\"renderChart\" style=\"height:100%; width:100%; padding: 20px\" class=\"relative\">\n      <canvas #caseReportChart baseChart\n              [data]=\"doughnutChartData\"\n              [labels]=\"doughnutChartLabels\"\n              [chartType]=\"doughnutChartType\"\n              [options]=\"doughnutChartOptions\"\n              [colors]=\"chartColors\"\n              (chartHover)=\"chartHovered($event)\"\n              (chartClick)=\"chartClicked($event)\"\n      >\n      </canvas>\n    </div>\n  </div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
LiveAppsActiveCasesReportComponent.ctorParameters = () => [
    { type: TcLiveAppsReportingService }
];
LiveAppsActiveCasesReportComponent.propDecorators = {
    sandboxId: [{ type: Input }],
    appIds: [{ type: Input }],
    showHeader: [{ type: Input }],
    uiAppId: [{ type: Input }],
    maxLegendItems: [{ type: Input }],
    showPercentages: [{ type: Input }],
    selectedCaseType: [{ type: Output }],
    caseReportChart: [{ type: ViewChild, args: [BaseChartDirective, { static: false },] }]
};
if (false) {
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.sandboxId;
    /**
     * The list of LA Application IDs you want to handle
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.appIds;
    /**
     * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.showHeader;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.uiAppId;
    /**
     * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.maxLegendItems;
    /**
     * Whether to show percentages or raw case numbers on the doughnut chart
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.showPercentages;
    /**
     * ~event selectedCaseType : Case Type selected in vizualization
     * ~payload CaseTypeReportRecord : CaseTypeReportRecord object selected from component
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.selectedCaseType;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.caseReportChart;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.errorMessage;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.caseTypesReport;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.totalActiveCaseCount;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.totalTerminatedCaseCount;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.renderChart;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.doughnutChartLabels;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.doughnutChartData;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.doughnutChartType;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.chartColors;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.defaultColors;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.legendData;
    /**
     * @type {?}
     * @private
     */
    LiveAppsActiveCasesReportComponent.prototype.getCaseCount;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.doughnutChartOptions;
    /**
     * @type {?}
     * @private
     */
    LiveAppsActiveCasesReportComponent.prototype.initReportDataToChart;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.refresh;
    /**
     * @type {?}
     * @private
     */
    LiveAppsActiveCasesReportComponent.prototype.reportingService;
}
//# sourceMappingURL=data:application/json;base64,