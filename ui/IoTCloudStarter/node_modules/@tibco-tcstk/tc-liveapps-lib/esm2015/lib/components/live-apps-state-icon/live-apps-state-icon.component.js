/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { HttpClient } from '@angular/common/http';
import { map, take, takeUntil } from 'rxjs/operators';
import { LiveAppsService } from '../../services/live-apps.service';
import { Location } from '@angular/common';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { TcCoreCommonFunctions } from '@tibco-tcstk/tc-core-lib';
import { GENERIC_CASETYPE_ICON_SVG, GENERIC_STATE_ICON_SVG } from '../../services/tc-case-card-config.service';
/**
 * renders a single icon for a state
 *
 * ![alt-text](../live-apps-state-icon.png "")
 *
 * \@example <tcla-live-apps-state-icon></tcla-live-apps-state-icon>
 */
export class LiveAppsStateIconComponent extends LiveAppsComponent {
    /**
     * @param {?} sanitizer
     * @param {?} http
     * @param {?} liveapps
     * @param {?} location
     */
    constructor(sanitizer, http, liveapps, location) {
        super();
        this.sanitizer = sanitizer;
        this.http = http;
        this.liveapps = liveapps;
        this.location = location;
        this.svgcontents = undefined;
        this.refillSVG = (/**
         * @param {?} fill
         * @return {?}
         */
        function (fill) {
            /** @type {?} */
            const updatedsvg = this.svgcontents.replace('fill="<DYNAMICFILL>"', 'fill="' + fill + '"');
            /** @type {?} */
            const newval = this.sanitizer.bypassSecurityTrustHtml(updatedsvg);
            this.iconSVG = newval;
        });
        this.refresh = (/**
         * @param {?} icon
         * @param {?} fill
         * @return {?}
         */
        (icon, fill) => {
            /** @type {?} */
            let url;
            if (icon && icon !== 'assets/icons/ic-generic-casetype.svg' && icon !== 'assets/icons/ic-generic-state.svg') {
                if (icon.slice(0, 13) === 'assets/icons/') {
                    // if icon is in assets folder we need to prepare the Url
                    url = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, icon);
                }
                else {
                    url = '/' + icon;
                }
                this.liveapps.getIconSVGText(url)
                    .pipe(take(1), takeUntil(this._destroyed$), map((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    this.svgcontents = val;
                    val = val.toString().replace('fill="<DYNAMICFILL>"', 'fill="' + fill + '"');
                    /** @type {?} */
                    const newval = this.sanitizer.bypassSecurityTrustHtml(val);
                    return newval;
                })))
                    .subscribe((/**
                 * @param {?} val
                 * @return {?}
                 */
                val => {
                    this.iconSVG = val;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                error => {
                    console.log('Unable to retrieve icon: ' + error.errorMsg);
                }));
            }
            else {
                // use generic icon
                /** @type {?} */
                let svgcontents;
                if (icon === 'assets/icons/ic-generic-casetype.svg') {
                    svgcontents = GENERIC_CASETYPE_ICON_SVG;
                }
                else {
                    svgcontents = GENERIC_STATE_ICON_SVG;
                }
                this.svgcontents = svgcontents;
                svgcontents = svgcontents.replace('fill="<DYNAMICFILL>"', 'fill="' + fill + '"');
                /** @type {?} */
                const newval = this.sanitizer.bypassSecurityTrustHtml(svgcontents);
                this.iconSVG = newval;
            }
        });
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        // this.refresh(this.iconPath, this.color);
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        if ((changes.iconPath && (changes.iconPath.currentValue !== changes.iconPath.previousValue)) || (changes.color && (changes.color.currentValue !== changes.color.previousValue))) {
            this.refresh(this.iconPath, this.color);
        }
    }
}
LiveAppsStateIconComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-state-icon',
                template: "<div class=\"la-state-icon-svg\" [innerHtml]=\"iconSVG\" fxLayoutAlign=\"start center\"></div>\n",
                styles: [":host ::ng-deep .la-state-icon-svg svg{height:16px;width:16px}"]
            }] }
];
/** @nocollapse */
LiveAppsStateIconComponent.ctorParameters = () => [
    { type: DomSanitizer },
    { type: HttpClient },
    { type: LiveAppsService },
    { type: Location }
];
LiveAppsStateIconComponent.propDecorators = {
    id: [{ type: Input }],
    iconPath: [{ type: Input }],
    color: [{ type: Input }],
    iconHostURL: [{ type: Input }],
    appId: [{ type: Input }]
};
if (false) {
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.id;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.iconPath;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.color;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.iconHostURL;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.appId;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.iconSVG;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.svgcontents;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.refillSVG;
    /** @type {?} */
    LiveAppsStateIconComponent.prototype.refresh;
    /**
     * @type {?}
     * @private
     */
    LiveAppsStateIconComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    LiveAppsStateIconComponent.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LiveAppsStateIconComponent.prototype.liveapps;
    /**
     * @type {?}
     * @private
     */
    LiveAppsStateIconComponent.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,