/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, ElementRef, EventEmitter, Input, Output } from '@angular/core';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { LegacyIframeService } from '@tibco-tcstk/tc-core-lib';
import { TcVisibilityService } from '@tibco-tcstk/tc-core-lib';
import { LaProcessSelection } from '../../models/tc-case-processes';
/**
 * Wraps legacy angularjs form renderer
 *
 * \@example <tcla-live-apps-legacy-form></tcla-live-apps-legacy-form>
 */
export class LiveAppsLegacyProcessComponent extends LiveAppsComponent {
    /**
     * @param {?} visibilityService
     * @param {?} host
     * @param {?} legacyIframeService
     */
    constructor(visibilityService, host, legacyIframeService) {
        super();
        this.visibilityService = visibilityService;
        this.host = host;
        this.legacyIframeService = legacyIframeService;
        this.legacyIframeId = this.legacyIframeId ? this.legacyIframeId : 'legacyProcessFrame';
        this.processComplete = new EventEmitter();
        this.processCancelled = new EventEmitter();
        this.processActive = false;
        this.changeProcess = (/**
         * @param {?} process
         * @return {?}
         */
        (process) => {
            // process has changed
            this.renderProcess(process);
        });
        this.renderProcess = (/**
         * @param {?} process
         * @return {?}
         */
        (process) => {
            if (this.processActive && this.openProcessId) {
                // opening a new process so cancel old one
                this.cancelProcess(false);
            }
            // send message to external form app
            this.formDiv.contentWindow.postMessage({
                action: this.type === 'creator' ? 'runCreator' : 'runAction',
                processId: process.process.id,
                caseRef: process.caseReference,
                caseState: this.caseState,
                applicationId: this.applicationId,
                typeId: this.typeId
            }, window.location.origin);
            // position the form iframe over the processDiv placeholder
            this.processActive = true;
            this.openProcessId = process.process.id;
            this.resizeProcess();
        });
        this.receiveMessage = (/**
         * @param {?} event
         * @return {?}
         */
        (event) => {
            if (event.data.action === 'processComplete') {
                this.processActive = false;
                this.openProcessId = undefined;
                this.hideProcess();
                this.processComplete.emit();
            }
            else if (event.data.action === 'processCancelled') {
                this.processActive = false;
                this.openProcessId = undefined;
                this.hideProcess();
                this.processCancelled.emit();
            }
        });
        this.cancelProcess = (/**
         * @param {?=} emit
         * @return {?}
         */
        (emit) => {
            this.formDiv.contentWindow.postMessage({ 'action': 'cancelProcess' }, window.location.origin);
            this.processActive = false;
            this.openProcessId = undefined;
            this.hideProcess();
            if (emit) {
                this.processCancelled.emit();
            }
        });
        this.hideProcess = (/**
         * @return {?}
         */
        () => {
            // hide the iframe!
            this.formDiv.style.top = '-1000px';
            this.formDiv.style.left = '-1000px';
            this.formDiv.style.zIndex = '1';
        });
        this.resizeProcess = (/**
         * @return {?}
         */
        () => {
            // position the form iframe over the processDiv placeholder
            setTimeout((/**
             * @param {?} handler
             * @return {?}
             */
            handler => {
                /** @type {?} */
                const rect = this.target.getBoundingClientRect();
                this.formDiv.style.top = rect.top.toString() + 'px';
                this.formDiv.style.left = rect.left.toString() + 'px';
                this.formDiv.style.height = rect.height.toString() + 'px';
                this.formDiv.style.width = rect.width.toString() + 'px';
                this.formDiv.style.position = 'absolute';
                // creator needs 1001 so it is over the dialog box
                this.formDiv.style.zIndex = (this.type === 'creator') ? '1001' : '1000';
            }), 1000);
        });
        this.initialize = (/**
         * @return {?}
         */
        () => {
            // listen for messages from the iframe
            window.addEventListener('message', this.receiveMessage, false);
            // we only want to render the process when the element is visible
            /** @type {?} */
            const inSight$ = this.visibilityService.elementInSight(this.host);
            inSight$.subscribe((/**
             * @param {?} next
             * @return {?}
             */
            next => {
                if (!next) {
                    // element not visible so hide the process if it is showing
                    if (this.processActive && this.target) {
                        this.hideProcess();
                    }
                }
                else {
                    // element is visible
                    if (!this.processActive) {
                        // if process not already showing - show it
                        // first get a handle on the target div and the legacy iframe
                        this.target = document.getElementById('processDiv');
                        this.formDiv = document.getElementById(this.legacyIframeId);
                        if (this.openProcessId) {
                            // trigger display of the process
                            this.renderProcess(this.process);
                        }
                    }
                    else {
                        this.resizeProcess();
                    }
                }
            }));
        });
    }
    /**
     * @return {?}
     */
    isFormActive() {
        return this.processActive;
    }
    /**
     * @return {?}
     */
    ngAfterViewInit() {
        super.ngAfterViewInit();
        this.openProcessId = this.process.process.id;
        this.containerChanges$.subscribe((/**
         * @param {?} widget
         * @return {?}
         */
        widget => {
            if (this.processActive && this.target) {
                this.resizeProcess();
            }
        }));
        // wait for iframe to load before doing anything else
        // this observable will emit true once the iFrame is loaded
        this.legacyIframeService.processStatus.subscribe((/**
         * @param {?} loaded
         * @return {?}
         */
        loaded => {
            if (loaded) {
                // iframe is loaded
                this.initialize();
            }
        }));
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.openProcessId) {
            this.cancelProcess();
        }
    }
}
LiveAppsLegacyProcessComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-legacy-process',
                template: "<div #componentDiv fxFill id=\"processDiv\" style=\"border: none;\"></div>\n",
                styles: [""]
            }] }
];
/** @nocollapse */
LiveAppsLegacyProcessComponent.ctorParameters = () => [
    { type: TcVisibilityService },
    { type: ElementRef },
    { type: LegacyIframeService }
];
LiveAppsLegacyProcessComponent.propDecorators = {
    legacyIframeId: [{ type: Input }],
    process: [{ type: Input }],
    type: [{ type: Input }],
    applicationId: [{ type: Input }],
    typeId: [{ type: Input }],
    caseRef: [{ type: Input }],
    caseState: [{ type: Input }],
    processComplete: [{ type: Output }],
    processCancelled: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    LiveAppsLegacyProcessComponent.prototype.legacyIframeId;
    /** @type {?} */
    LiveAppsLegacyProcessComponent.prototype.process;
    /** @type {?} */
    LiveAppsLegacyProcessComponent.prototype.type;
    /** @type {?} */
    LiveAppsLegacyProcessComponent.prototype.applicationId;
    /** @type {?} */
    LiveAppsLegacyProcessComponent.prototype.typeId;
    /** @type {?} */
    LiveAppsLegacyProcessComponent.prototype.caseRef;
    /** @type {?} */
    LiveAppsLegacyProcessComponent.prototype.caseState;
    /** @type {?} */
    LiveAppsLegacyProcessComponent.prototype.processComplete;
    /** @type {?} */
    LiveAppsLegacyProcessComponent.prototype.processCancelled;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyProcessComponent.prototype.target;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyProcessComponent.prototype.formDiv;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyProcessComponent.prototype.processActive;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyProcessComponent.prototype.openProcessId;
    /** @type {?} */
    LiveAppsLegacyProcessComponent.prototype.changeProcess;
    /** @type {?} */
    LiveAppsLegacyProcessComponent.prototype.renderProcess;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyProcessComponent.prototype.receiveMessage;
    /** @type {?} */
    LiveAppsLegacyProcessComponent.prototype.cancelProcess;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyProcessComponent.prototype.hideProcess;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyProcessComponent.prototype.resizeProcess;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLegacyProcessComponent.prototype.initialize;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsLegacyProcessComponent.prototype.visibilityService;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsLegacyProcessComponent.prototype.host;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsLegacyProcessComponent.prototype.legacyIframeService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWxlZ2FjeS1wcm9jZXNzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1saXZlYXBwcy1saWIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9saXZlLWFwcHMtbGVnYWN5LXByb2Nlc3MvbGl2ZS1hcHBzLWxlZ2FjeS1wcm9jZXNzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUVMLFNBQVMsRUFDVCxVQUFVLEVBQ1YsWUFBWSxFQUNaLEtBQUssRUFHTCxNQUFNLEVBQ1AsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sc0RBQXNELENBQUM7QUFDdkYsT0FBTyxFQUFDLG1CQUFtQixFQUFxQyxNQUFNLDBCQUEwQixDQUFDO0FBQ2pHLE9BQU8sRUFBQyxtQkFBbUIsRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzdELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGdDQUFnQyxDQUFDOzs7Ozs7QUFhbEUsTUFBTSxPQUFPLDhCQUErQixTQUFRLGlCQUFpQjs7Ozs7O0lBaUJuRSxZQUF1QixpQkFBc0MsRUFBWSxJQUFnQixFQUFZLG1CQUF3QztRQUMzSSxLQUFLLEVBQUUsQ0FBQztRQURhLHNCQUFpQixHQUFqQixpQkFBaUIsQ0FBcUI7UUFBWSxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVksd0JBQW1CLEdBQW5CLG1CQUFtQixDQUFxQjtRQWZwSSxtQkFBYyxHQUFHLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFFLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLG9CQUFvQixDQUFDO1FBT2xGLG9CQUFlLEdBQUcsSUFBSSxZQUFZLEVBQUUsQ0FBQztRQUNyQyxxQkFBZ0IsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO1FBSXhDLGtCQUFhLEdBQUcsS0FBSyxDQUFDO1FBV3ZCLGtCQUFhOzs7O1FBQUcsQ0FB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clZpZXdJbml0LFxuICBDb21wb25lbnQsXG4gIEVsZW1lbnRSZWYsXG4gIEV2ZW50RW1pdHRlcixcbiAgSW5wdXQsXG4gIE9uRGVzdHJveSxcbiAgT25Jbml0LFxuICBPdXRwdXRcbn0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0xpdmVBcHBzQ29tcG9uZW50fSBmcm9tICcuLi9saXZlLWFwcHMtY29tcG9uZW50L2xpdmUtYXBwcy1jb21wb25lbnQuY29tcG9uZW50JztcbmltcG9ydCB7TGVnYWN5SWZyYW1lU2VydmljZSwgVGNDb21wb25lbnQsIFRjQ29yZUNvbW1vbkZ1bmN0aW9uc30gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliJztcbmltcG9ydCB7VGNWaXNpYmlsaXR5U2VydmljZX0gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliJztcbmltcG9ydCB7TGFQcm9jZXNzU2VsZWN0aW9ufSBmcm9tICcuLi8uLi9tb2RlbHMvdGMtY2FzZS1wcm9jZXNzZXMnO1xuXG4vKipcbiAqIFdyYXBzIGxlZ2FjeSBhbmd1bGFyanMgZm9ybSByZW5kZXJlclxuICpcbiAqQGV4YW1wbGUgPHRjbGEtbGl2ZS1hcHBzLWxlZ2FjeS1mb3JtPjwvdGNsYS1saXZlLWFwcHMtbGVnYWN5LWZvcm0+XG4gKi9cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGNsYS1saXZlLWFwcHMtbGVnYWN5LXByb2Nlc3MnLFxuICB0ZW1wbGF0ZVVybDogJy4vbGl2ZS1hcHBzLWxlZ2FjeS1wcm9jZXNzLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbGl2ZS1hcHBzLWxlZ2FjeS1wcm9jZXNzLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBMaXZlQXBwc0xlZ2FjeVByb2Nlc3NDb21wb25lbnQgZXh0ZW5kcyBMaXZlQXBwc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uRGVzdHJveSwgT25EZXN0cm95LCBBZnRlclZpZXdJbml0IHtcblxuICBASW5wdXQoKSBsZWdhY3lJZnJhbWVJZCA9IHRoaXMubGVnYWN5SWZyYW1lSWQgPyAgdGhpcy5sZWdhY3lJZnJhbWVJZCA6ICdsZWdhY3lQcm9jZXNzRnJhbWUnO1xuICBASW5wdXQoKSBwcm9jZXNzOiBMYVByb2Nlc3NTZWxlY3Rpb247XG4gIEBJbnB1dCgpIHR5cGU6IHN0cmluZzsgLy8gY3JlYXRvci9wcm9jZXNzXG4gIEBJbnB1dCgpIGFwcGxpY2F0aW9uSWQ6IHN0cmluZztcbiAgQElucHV0KCkgdHlwZUlkOiBzdHJpbmc7XG4gIEBJbnB1dCgpIGNhc2VSZWY6IHN0cmluZztcbiAgQElucHV0KCkgY2FzZVN0YXRlOiBzdHJpbmc7XG4gIEBPdXRwdXQoKSBwcm9jZXNzQ29tcGxldGUgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG4gIEBPdXRwdXQoKSBwcm9jZXNzQ2FuY2VsbGVkID0gbmV3IEV2ZW50RW1pdHRlcigpO1xuXG4gIHByaXZhdGUgdGFyZ2V0O1xuICBwcml2YXRlIGZvcm1EaXY7XG4gIHByaXZhdGUgcHJvY2Vzc0FjdGl2ZSA9IGZhbHNlO1xuICBwcml2YXRlIG9wZW5Qcm9jZXNzSWQ7XG5cbiAgY29uc3RydWN0b3IgKHByb3RlY3RlZCB2aXNpYmlsaXR5U2VydmljZTogVGNWaXNpYmlsaXR5U2VydmljZSwgcHJvdGVjdGVkIGhvc3Q6IEVsZW1lbnRSZWYsIHByb3RlY3RlZCBsZWdhY3lJZnJhbWVTZXJ2aWNlOiBMZWdhY3lJZnJhbWVTZXJ2aWNlKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBpc0Zvcm1BY3RpdmUoKSB7XG4gICAgcmV0dXJuIHRoaXMucHJvY2Vzc0FjdGl2ZTtcbiAgfVxuXG4gIHB1YmxpYyBjaGFuZ2VQcm9jZXNzID0gKHByb2Nlc3M6IExhUHJvY2Vzc1NlbGVjdGlvbikgPT4ge1xuICAgIC8vIHByb2Nlc3MgaGFzIGNoYW5nZWRcbiAgICB0aGlzLnJlbmRlclByb2Nlc3MocHJvY2Vzcyk7XG4gIH1cblxuICBwdWJsaWMgcmVuZGVyUHJvY2VzcyA9IChwcm9jZXNzOiBMYVByb2Nlc3NTZWxlY3Rpb24pID0+IHtcbiAgICBpZiAodGhpcy5wcm9jZXNzQWN0aXZlICYmIHRoaXMub3BlblByb2Nlc3NJZCkge1xuICAgICAgLy8gb3BlbmluZyBhIG5ldyBwcm9jZXNzIHNvIGNhbmNlbCBvbGQgb25lXG4gICAgICB0aGlzLmNhbmNlbFByb2Nlc3MoZmFsc2UpO1xuICAgIH1cblxuICAgIC8vIHNlbmQgbWVzc2FnZSB0byBleHRlcm5hbCBmb3JtIGFwcFxuICAgIHRoaXMuZm9ybURpdi5jb250ZW50V2luZG93LnBvc3RNZXNzYWdlKHtcbiAgICAgIGFjdGlvbjogdGhpcy50eXBlID09PSAnY3JlYXRvcicgPyAncnVuQ3JlYXRvcicgOiAncnVuQWN0aW9uJyxcbiAgICAgIHByb2Nlc3NJZDogcHJvY2Vzcy5wcm9jZXNzLmlkLFxuICAgICAgY2FzZVJlZjogcHJvY2Vzcy5jYXNlUmVmZXJlbmNlLFxuICAgICAgY2FzZVN0YXRlOiB0aGlzLmNhc2VTdGF0ZSxcbiAgICAgIGFwcGxpY2F0aW9uSWQ6IHRoaXMuYXBwbGljYXRpb25JZCxcbiAgICAgIHR5cGVJZDogdGhpcy50eXBlSWRcbiAgICB9LCB3aW5kb3cubG9jYXRpb24ub3JpZ2luKTtcblxuICAgIC8vIHBvc2l0aW9uIHRoZSBmb3JtIGlmcmFtZSBvdmVyIHRoZSBwcm9jZXNzRGl2IHBsYWNlaG9sZGVyXG4gICAgdGhpcy5wcm9jZXNzQWN0aXZlID0gdHJ1ZTtcbiAgICB0aGlzLm9wZW5Qcm9jZXNzSWQgPSBwcm9jZXNzLnByb2Nlc3MuaWQ7XG4gICAgdGhpcy5yZXNpemVQcm9jZXNzKCk7XG4gIH1cblxuICBwcml2YXRlIHJlY2VpdmVNZXNzYWdlID0gKGV2ZW50KSA9PiB7XG4gICAgaWYgKGV2ZW50LmRhdGEuYWN0aW9uID09PSAncHJvY2Vzc0NvbXBsZXRlJykge1xuICAgICAgdGhpcy5wcm9jZXNzQWN0aXZlID0gZmFsc2U7XG4gICAgICB0aGlzLm9wZW5Qcm9jZXNzSWQgPSB1bmRlZmluZWQ7XG4gICAgICB0aGlzLmhpZGVQcm9jZXNzKCk7XG4gICAgICB0aGlzLnByb2Nlc3NDb21wbGV0ZS5lbWl0KCk7XG4gICAgfSBlbHNlIGlmIChldmVudC5kYXRhLmFjdGlvbiA9PT0gJ3Byb2Nlc3NDYW5jZWxsZWQnKSB7XG4gICAgICB0aGlzLnByb2Nlc3NBY3RpdmUgPSBmYWxzZTtcbiAgICAgIHRoaXMub3BlblByb2Nlc3NJZCA9IHVuZGVmaW5lZDtcbiAgICAgIHRoaXMuaGlkZVByb2Nlc3MoKTtcbiAgICAgIHRoaXMucHJvY2Vzc0NhbmNlbGxlZC5lbWl0KCk7XG4gICAgfVxuICB9XG5cbiAgcHVibGljIGNhbmNlbFByb2Nlc3MgPSAoZW1pdD86IGJvb2xlYW4pID0+IHtcbiAgICB0aGlzLmZvcm1EaXYuY29udGVudFdpbmRvdy5wb3N0TWVzc2FnZSh7ICdhY3Rpb24nOiAnY2FuY2VsUHJvY2VzcycgfSwgd2luZG93LmxvY2F0aW9uLm9yaWdpbik7XG4gICAgdGhpcy5wcm9jZXNzQWN0aXZlID0gZmFsc2U7XG4gICAgdGhpcy5vcGVuUHJvY2Vzc0lkID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaGlkZVByb2Nlc3MoKTtcbiAgICBpZiAoZW1pdCkge1xuICAgICAgdGhpcy5wcm9jZXNzQ2FuY2VsbGVkLmVtaXQoKTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGhpZGVQcm9jZXNzID0gKCkgPT4ge1xuICAvLyBoaWRlIHRoZSBpZnJhbWUhXG4gICAgICB0aGlzLmZvcm1EaXYuc3R5bGUudG9wID0gJy0xMDAwcHgnO1xuICAgICAgdGhpcy5mb3JtRGl2LnN0eWxlLmxlZnQgPSAnLTEwMDBweCc7XG4gICAgICB0aGlzLmZvcm1EaXYuc3R5bGUuekluZGV4ID0gJzEnO1xuICB9XG5cbiAgcHJpdmF0ZSByZXNpemVQcm9jZXNzID0gKCkgPT4ge1xuICAgIC8vIHBvc2l0aW9uIHRoZSBmb3JtIGlmcmFtZSBvdmVyIHRoZSBwcm9jZXNzRGl2IHBsYWNlaG9sZGVyXG4gICAgc2V0VGltZW91dChoYW5kbGVyID0+IHtcbiAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLnRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgIHRoaXMuZm9ybURpdi5zdHlsZS50b3AgPSByZWN0LnRvcC50b1N0cmluZygpICsgJ3B4JztcbiAgICAgIHRoaXMuZm9ybURpdi5zdHlsZS5sZWZ0ID0gcmVjdC5sZWZ0LnRvU3RyaW5nKCkgKyAncHgnO1xuICAgICAgdGhpcy5mb3JtRGl2LnN0eWxlLmhlaWdodCA9IHJlY3QuaGVpZ2h0LnRvU3RyaW5nKCkgKyAncHgnO1xuICAgICAgdGhpcy5mb3JtRGl2LnN0eWxlLndpZHRoID0gcmVjdC53aWR0aC50b1N0cmluZygpICsgJ3B4JztcbiAgICAgIHRoaXMuZm9ybURpdi5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XG4gICAgICAvLyBjcmVhdG9yIG5lZWRzIDEwMDEgc28gaXQgaXMgb3ZlciB0aGUgZGlhbG9nIGJveFxuICAgICAgdGhpcy5mb3JtRGl2LnN0eWxlLnpJbmRleCA9ICh0aGlzLnR5cGUgPT09ICdjcmVhdG9yJykgPyAnMTAwMScgOiAnMTAwMCc7XG4gICAgfSwgMTAwMCk7XG4gIH1cblxuICBwcml2YXRlIGluaXRpYWxpemUgPSAoKSA9PiB7XG4gICAgLy8gbGlzdGVuIGZvciBtZXNzYWdlcyBmcm9tIHRoZSBpZnJhbWVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignbWVzc2FnZScsIHRoaXMucmVjZWl2ZU1lc3NhZ2UsIGZhbHNlKTtcblxuICAgIC8vIHdlIG9ubHkgd2FudCB0byByZW5kZXIgdGhlIHByb2Nlc3Mgd2hlbiB0aGUgZWxlbWVudCBpcyB2aXNpYmxlXG4gICAgY29uc3QgaW5TaWdodCQgPSB0aGlzLnZpc2liaWxpdHlTZXJ2aWNlLmVsZW1lbnRJblNpZ2h0KHRoaXMuaG9zdCk7XG4gICAgaW5TaWdodCQuc3Vic2NyaWJlKG5leHQgPT4ge1xuICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgIC8vIGVsZW1lbnQgbm90IHZpc2libGUgc28gaGlkZSB0aGUgcHJvY2VzcyBpZiBpdCBpcyBzaG93aW5nXG4gICAgICAgIGlmICh0aGlzLnByb2Nlc3NBY3RpdmUgJiYgdGhpcy50YXJnZXQpIHtcbiAgICAgICAgICB0aGlzLmhpZGVQcm9jZXNzKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGVsZW1lbnQgaXMgdmlzaWJsZVxuICAgICAgICBpZiAoIXRoaXMucHJvY2Vzc0FjdGl2ZSkge1xuICAgICAgICAgIC8vIGlmIHByb2Nlc3Mgbm90IGFscmVhZHkgc2hvd2luZyAtIHNob3cgaXRcbiAgICAgICAgICAvLyBmaXJzdCBnZXQgYSBoYW5kbGUgb24gdGhlIHRhcmdldCBkaXYgYW5kIHRoZSBsZWdhY3kgaWZyYW1lXG4gICAgICAgICAgdGhpcy50YXJnZXQgPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncHJvY2Vzc0RpdicpO1xuICAgICAgICAgIHRoaXMuZm9ybURpdiA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKHRoaXMubGVnYWN5SWZyYW1lSWQpO1xuICAgICAgICAgIGlmICh0aGlzLm9wZW5Qcm9jZXNzSWQpIHtcbiAgICAgICAgICAgIC8vIHRyaWdnZXIgZGlzcGxheSBvZiB0aGUgcHJvY2Vzc1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJQcm9jZXNzKHRoaXMucHJvY2Vzcyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMucmVzaXplUHJvY2VzcygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ0FmdGVyVmlld0luaXQoKSB7XG4gICAgc3VwZXIubmdBZnRlclZpZXdJbml0KCk7XG4gICAgdGhpcy5vcGVuUHJvY2Vzc0lkID0gdGhpcy5wcm9jZXNzLnByb2Nlc3MuaWQ7XG4gICAgdGhpcy5jb250YWluZXJDaGFuZ2VzJC5zdWJzY3JpYmUod2lkZ2V0ID0+IHtcbiAgICAgIGlmICh0aGlzLnByb2Nlc3NBY3RpdmUgJiYgdGhpcy50YXJnZXQpIHtcbiAgICAgICAgdGhpcy5yZXNpemVQcm9jZXNzKCk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyB3YWl0IGZvciBpZnJhbWUgdG8gbG9hZCBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZVxuICAgIC8vIHRoaXMgb2JzZXJ2YWJsZSB3aWxsIGVtaXQgdHJ1ZSBvbmNlIHRoZSBpRnJhbWUgaXMgbG9hZGVkXG4gICAgdGhpcy5sZWdhY3lJZnJhbWVTZXJ2aWNlLnByb2Nlc3NTdGF0dXMuc3Vic2NyaWJlKGxvYWRlZCA9PiB7XG4gICAgICBpZiAobG9hZGVkKSB7XG4gICAgICAgIC8vIGlmcmFtZSBpcyBsb2FkZWRcbiAgICAgICAgdGhpcy5pbml0aWFsaXplKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBuZ09uRGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5vcGVuUHJvY2Vzc0lkKSB7XG4gICAgICB0aGlzLmNhbmNlbFByb2Nlc3MoKTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==