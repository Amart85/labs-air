/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { LiveAppsService } from '../../services/live-apps.service';
import { map, take, takeUntil, tap } from 'rxjs/operators';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { TcCaseProcessesService } from '../../services/tc-case-processes.service';
/**
 * Renders case action buttons
 *
 * ![alt-text](../live-apps-case-actions.png "Image")
 *
 * \@example <tcla-live-apps-case-actions></tcla-live-apps-case-actions>
 */
export class LiveAppsCaseActionsComponent extends LiveAppsComponent {
    /**
     * @param {?} liveapps
     * @param {?} caseProcessesService
     */
    constructor(liveapps, caseProcessesService) {
        super();
        this.liveapps = liveapps;
        this.caseProcessesService = caseProcessesService;
        /**
         * Max Actions that can be run simultaneously
         */
        this.maxActions = 1;
        /**
         * ~event actionClicked : Case Action selected
         * ~payload LaProcessSelection : LaProcessSelection object output when an action is clicked (ie. message to parent to run action component)
         */
        this.actionClicked = new EventEmitter();
        this.disabled = false;
        this.refresh = (/**
         * @return {?}
         */
        () => {
            this.caseProcessesService.getCaseActionsForCaseRef(this.caseRef, this.sandboxId, this.appId, this.typeId)
                .pipe(take(1), takeUntil(this._destroyed$), map((/**
             * @param {?} caseactions
             * @return {?}
             */
            caseactions => {
                this.caseactions = caseactions.actions;
            }))).subscribe(null, (/**
             * @param {?} error
             * @return {?}
             */
            error => { this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; }));
        });
        this.toggleEnable = (/**
         * @return {?}
         */
        () => {
            this.disabled = !this.disabled;
        });
    }
    /**
     * @param {?} action
     * @return {?}
     */
    selectAction(action) {
        this.caseProcessesService.getProcessDetails(this.caseRef, this.appId, this.typeId, this.sandboxId, action, null, 100).pipe(take(1), takeUntil(this._destroyed$), tap((/**
         * @param {?} processDetails
         * @return {?}
         */
        processDetails => {
            if (!processDetails || !processDetails.process || (processDetails.process.jsonSchema.$schema === 'NOSCHEMA')) {
                // This will be triggered when no form schema is available
                // Typically happens when:
                // 1) The form has elements that are not supported by the Live Apps API for form schemas such as participant selectors
                // 2) The Live Apps application is legacy and has no form schema at all, redeploying the live apps application would fix this.
                console.error('No schema available for this case type: The form may not be supported or you may need to update/re-deploy the live apps application');
            }
        })), map((/**
         * @param {?} processSchema
         * @return {?}
         */
        processSchema => {
            this.actionClicked.emit(processSchema);
            return processSchema;
        })))
            .subscribe(null, (/**
         * @param {?} error
         * @return {?}
         */
        error => { this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; }));
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.refresh();
    }
}
LiveAppsCaseActionsComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-case-actions',
                template: "<div fxLayout=\"row\">\n  <button [disabled]=\"disabled\" [ngClass]=\"disabled ? 'disabled' : ''\" mat-button class=\"tcs-case-action-button\" *ngFor=\"let action of caseactions| slice:0:maxActions\"\n          matTooltip=\"{{action.label}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\"\n          (click)=\"selectAction(action)\">\n    {{action.label | ellipsis: 30 }}\n  </button>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\" style=\"width: 75px\" *ngIf=\"caseactions && caseactions.length > maxActions\">\n    <mat-select class=\"tcs-case-action-option\" [disableOptionCentering]=\"true\" placeholder=\"More\" matTooltip=\"\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\n      <mat-option *ngFor=\"let action of caseactions | slice:maxActions:caseactions.length\" [value]=\"\" (click)=\"selectAction(action)\">\n        <span>{{action.label}}</span>\n      </mat-option>\n    </mat-select>\n  </div>\n</div>\n",
                styles: [".tcs-case-action-button{height:40px;border-radius:3px;background-color:#fff;color:#0081cb;font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:.2px;margin:5px;border:1px solid #0081cb}.tcs-case-action-button.disabled{border:none}.tcs-case-action-option{padding-top:9px;padding-left:10px;padding-right:10px;height:40px;border-radius:3px;background-color:#fff;color:#0081cb;border:1px solid #0081cb}"]
            }] }
];
/** @nocollapse */
LiveAppsCaseActionsComponent.ctorParameters = () => [
    { type: LiveAppsService },
    { type: TcCaseProcessesService }
];
LiveAppsCaseActionsComponent.propDecorators = {
    caseRef: [{ type: Input }],
    appId: [{ type: Input }],
    typeId: [{ type: Input }],
    sandboxId: [{ type: Input }],
    caseState: [{ type: Input }],
    maxActions: [{ type: Input }],
    actionClicked: [{ type: Output }]
};
if (false) {
    /**
     * The case reference
     * @type {?}
     */
    LiveAppsCaseActionsComponent.prototype.caseRef;
    /**
     * The LA Application Id
     * @type {?}
     */
    LiveAppsCaseActionsComponent.prototype.appId;
    /**
     * The LA Application Type Id (generally 1)
     * @type {?}
     */
    LiveAppsCaseActionsComponent.prototype.typeId;
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsCaseActionsComponent.prototype.sandboxId;
    /**
     * The state of the case
     * @type {?}
     */
    LiveAppsCaseActionsComponent.prototype.caseState;
    /**
     * Max Actions that can be run simultaneously
     * @type {?}
     */
    LiveAppsCaseActionsComponent.prototype.maxActions;
    /**
     * ~event actionClicked : Case Action selected
     * ~payload LaProcessSelection : LaProcessSelection object output when an action is clicked (ie. message to parent to run action component)
     * @type {?}
     */
    LiveAppsCaseActionsComponent.prototype.actionClicked;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.caseactions;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.errorMessage;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.disabled;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.appSchema;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.caseType;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.caseActionList;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.refresh;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.toggleEnable;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsCaseActionsComponent.prototype.liveapps;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsCaseActionsComponent.prototype.caseProcessesService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWNhc2UtYWN0aW9ucy5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbGl2ZS1hcHBzLWNhc2UtYWN0aW9ucy9saXZlLWFwcHMtY2FzZS1hY3Rpb25zLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQVksTUFBTSxlQUFlLENBQUM7QUFFbkcsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBQ2pFLE9BQU8sRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUd6RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxzREFBc0QsQ0FBQztBQUN2RixPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSwwQ0FBMEMsQ0FBQzs7Ozs7Ozs7QUFnQmhGLE1BQU0sT0FBTyw0QkFBNkIsU0FBUSxpQkFBaUI7Ozs7O0lBNkNqRSxZQUFzQixRQUF5QixFQUFZLG9CQUE0QztRQUNyRyxLQUFLLEVBQUUsQ0FBQztRQURZLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQVkseUJBQW9CLEdBQXBCLG9CQUFvQixDQUF3Qjs7OztRQWhCOUYsZUFBVSxHQUFHLENBQUMsQ0FBQzs7Ozs7UUFNZCxrQkFBYSxHQUFxQyxJQUFJLFlBQVksRUFBc0IsQ0FBQztRQUk1RixhQUFRLEdBQUcsS0FBSyxDQUFDO1FBVWpCLFlBQU87OztRQUFHLEdBQUcsRUFBRTtZQUNwQixJQUFJLENBQUMsb0JBQW9CLENBQUMsd0JBQXdCLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQztpQkFDdEcsSUFBSSxDQUNILElBQUksQ0FBQyxDQUFDLENBQUMsRUFDUCxTQUFTLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxFQUMzQixHQUFHOzs7O1lBQUMsV0FBVyxDQUFDLEVBQUU7Z0JBQ2hCLElBQUksQ0FBQyxXQUFXLEdBQUcsV0FBVyxDQUFDLE9BQU8sQ0FBQztZQUN6QyxDQUFDLEVBQUMsQ0FDSCxDQUFDLFNBQVMsQ0FDWCxJQUFJOzs7O1lBQUUsS0FBSyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLGlDQUFpQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUM7UUFDdEcsQ0FBQyxFQUFBO1FBRU0saUJBQVk7OztRQUFHLEdBQUcsRUFBRTtZQUN6QixJQUFJLENBQUMsUUFBUSxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQztRQUNqQyxDQUFDLEVBQUE7SUFoQkQsQ0FBQzs7Ozs7SUFrQk0sWUFBWSxDQUFDLE1BQWtCO1FBRXBDLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxpQkFBaUIsQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUN4SCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsU0FBUyxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsRUFDM0IsR0FBRzs7OztRQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQ25CLElBQUksQ0FBQyxjQUFjLElBQUksQ0FBQyxjQUFjLENBQUMsT0FBTyxJQUFJLENBQUMsY0FBYyxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxLQUFLLFVBQVUsQ0FBQyxFQUFFO2dCQUM1RywwREFBMEQ7Z0JBQzFELDBCQUEwQjtnQkFDMUIsc0hBQXNIO2dCQUN0SCw4SEFBOEg7Z0JBQzVILE9BQU8sQ0FBQyxLQUFLLENBQUMscUlBQXFJLENBQUMsQ0FBQzthQUN0SjtRQUNILENBQUMsRUFDRixFQUNELEdBQUc7Ozs7UUFBQyxhQUFhLENBQUMsRUFBRTtZQUNsQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztZQUN2QyxPQUFPLGFBQWEsQ0FBQztRQUN2QixDQUFDLEVBQUMsQ0FDSDthQUNBLFNBQVMsQ0FBQyxJQUFJOzs7O1FBQUUsS0FBSyxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsWUFBWSxHQUFHLGlDQUFpQyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUFDLENBQUM7SUFDL0csQ0FBQzs7OztJQUVELFFBQVE7UUFDTixJQUFJLENBQUMsT0FBTyxFQUFFLENBQUM7SUFDakIsQ0FBQzs7O1lBL0ZGLFNBQVMsU0FBQztnQkFDVCxRQUFRLEVBQUUsNkJBQTZCO2dCQUN2QyxxOEJBQXNEOzthQUV2RDs7OztZQXBCTyxlQUFlO1lBS2Ysc0JBQXNCOzs7c0JBb0IzQixLQUFLO29CQUtMLEtBQUs7cUJBS0wsS0FBSzt3QkFLTCxLQUFLO3dCQUtMLEtBQUs7eUJBS0wsS0FBSzs0QkFNTCxNQUFNOzs7Ozs7O0lBL0JQLCtDQUF5Qjs7Ozs7SUFLekIsNkNBQXVCOzs7OztJQUt2Qiw4Q0FBd0I7Ozs7O0lBS3hCLGlEQUEyQjs7Ozs7SUFLM0IsaURBQTJCOzs7OztJQUszQixrREFBd0I7Ozs7OztJQU14QixxREFBbUc7O0lBRW5HLG1EQUFpQzs7SUFDakMsb0RBQTRCOztJQUM1QixnREFBd0I7O0lBRXhCLGlEQUF5Qjs7SUFDekIsZ0RBQW1COztJQUNuQixzREFBMEI7O0lBTTFCLCtDQVVDOztJQUVELG9EQUVDOzs7OztJQWxCVyxnREFBbUM7Ozs7O0lBQUUsNERBQXNEIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25EZXN0cm95LCBPbkluaXQsIE91dHB1dCwgVmlld0NoaWxkfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0xpdmVBcHBzU2VydmljZX0gZnJvbSAnLi4vLi4vc2VydmljZXMvbGl2ZS1hcHBzLnNlcnZpY2UnO1xuaW1wb3J0IHttYXAsIHRha2UsIHRha2VVbnRpbCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0Nhc2VBY3Rpb24sIENhc2VUeXBlLCBDYXNlVHlwZXNMaXN0LCBQcm9jZXNzfSBmcm9tICcuLi8uLi9tb2RlbHMvbGl2ZWFwcHNkYXRhJztcbmltcG9ydCB7TGFQcm9jZXNzU2VsZWN0aW9ufSBmcm9tICcuLi8uLi9tb2RlbHMvdGMtY2FzZS1wcm9jZXNzZXMnO1xuaW1wb3J0IHtMaXZlQXBwc0NvbXBvbmVudH0gZnJvbSAnLi4vbGl2ZS1hcHBzLWNvbXBvbmVudC9saXZlLWFwcHMtY29tcG9uZW50LmNvbXBvbmVudCc7XG5pbXBvcnQge1RjQ2FzZVByb2Nlc3Nlc1NlcnZpY2V9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RjLWNhc2UtcHJvY2Vzc2VzLnNlcnZpY2UnO1xuaW1wb3J0IHtDdXN0b21Gb3JtRGVmc30gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWZvcm1zLWxpYic7XG5cblxuLyoqXG4gKiBSZW5kZXJzIGNhc2UgYWN0aW9uIGJ1dHRvbnNcbiAqXG4gKiAhW2FsdC10ZXh0XSguLi9saXZlLWFwcHMtY2FzZS1hY3Rpb25zLnBuZyBcIkltYWdlXCIpXG4gKlxuICpAZXhhbXBsZSA8dGNsYS1saXZlLWFwcHMtY2FzZS1hY3Rpb25zPjwvdGNsYS1saXZlLWFwcHMtY2FzZS1hY3Rpb25zPlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0Y2xhLWxpdmUtYXBwcy1jYXNlLWFjdGlvbnMnLFxuICB0ZW1wbGF0ZVVybDogJy4vbGl2ZS1hcHBzLWNhc2UtYWN0aW9ucy5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2xpdmUtYXBwcy1jYXNlLWFjdGlvbnMuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIExpdmVBcHBzQ2FzZUFjdGlvbnNDb21wb25lbnQgZXh0ZW5kcyBMaXZlQXBwc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiBUaGUgY2FzZSByZWZlcmVuY2VcbiAgICovXG4gIEBJbnB1dCgpIGNhc2VSZWY6IHN0cmluZztcblxuICAvKipcbiAgICogVGhlIExBIEFwcGxpY2F0aW9uIElkXG4gICAqL1xuICBASW5wdXQoKSBhcHBJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgTEEgQXBwbGljYXRpb24gVHlwZSBJZCAoZ2VuZXJhbGx5IDEpXG4gICAqL1xuICBASW5wdXQoKSB0eXBlSWQ6IHN0cmluZztcblxuICAvKipcbiAgICogc2FuZGJveElkIC0gdGhpcyBjb21lcyBmcm9tIGNsYWltcyByZXNvbHZlclxuICAgKi9cbiAgQElucHV0KCkgc2FuZGJveElkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBzdGF0ZSBvZiB0aGUgY2FzZVxuICAgKi9cbiAgQElucHV0KCkgY2FzZVN0YXRlOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIE1heCBBY3Rpb25zIHRoYXQgY2FuIGJlIHJ1biBzaW11bHRhbmVvdXNseVxuICAgKi9cbiAgQElucHV0KCkgbWF4QWN0aW9ucyA9IDE7XG5cbiAgLyoqXG4gICAqIH5ldmVudCBhY3Rpb25DbGlja2VkIDogQ2FzZSBBY3Rpb24gc2VsZWN0ZWRcbiAgICogfnBheWxvYWQgTGFQcm9jZXNzU2VsZWN0aW9uIDogTGFQcm9jZXNzU2VsZWN0aW9uIG9iamVjdCBvdXRwdXQgd2hlbiBhbiBhY3Rpb24gaXMgY2xpY2tlZCAoaWUuIG1lc3NhZ2UgdG8gcGFyZW50IHRvIHJ1biBhY3Rpb24gY29tcG9uZW50KVxuICAgKi9cbiAgQE91dHB1dCgpIGFjdGlvbkNsaWNrZWQ6IEV2ZW50RW1pdHRlcjxMYVByb2Nlc3NTZWxlY3Rpb24+ID0gbmV3IEV2ZW50RW1pdHRlcjxMYVByb2Nlc3NTZWxlY3Rpb24+KCk7XG5cbiAgcHVibGljIGNhc2VhY3Rpb25zOiBDYXNlQWN0aW9uW107XG4gIHB1YmxpYyBlcnJvck1lc3NhZ2U6IHN0cmluZztcbiAgcHVibGljIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgYXBwU2NoZW1hOiBDYXNlVHlwZXNMaXN0O1xuICBjYXNlVHlwZTogQ2FzZVR5cGU7XG4gIGNhc2VBY3Rpb25MaXN0OiBQcm9jZXNzW107XG5cbiAgY29uc3RydWN0b3IocHJvdGVjdGVkIGxpdmVhcHBzOiBMaXZlQXBwc1NlcnZpY2UsIHByb3RlY3RlZCBjYXNlUHJvY2Vzc2VzU2VydmljZTogVGNDYXNlUHJvY2Vzc2VzU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICBwdWJsaWMgcmVmcmVzaCA9ICgpID0+IHtcbiAgICB0aGlzLmNhc2VQcm9jZXNzZXNTZXJ2aWNlLmdldENhc2VBY3Rpb25zRm9yQ2FzZVJlZih0aGlzLmNhc2VSZWYsIHRoaXMuc2FuZGJveElkLCB0aGlzLmFwcElkLCB0aGlzLnR5cGVJZClcbiAgICAgIC5waXBlKFxuICAgICAgICB0YWtlKDEpLFxuICAgICAgICB0YWtlVW50aWwodGhpcy5fZGVzdHJveWVkJCksXG4gICAgICAgIG1hcChjYXNlYWN0aW9ucyA9PiB7XG4gICAgICAgICAgdGhpcy5jYXNlYWN0aW9ucyA9IGNhc2VhY3Rpb25zLmFjdGlvbnM7XG4gICAgICAgIH0pXG4gICAgICApLnN1YnNjcmliZShcbiAgICAgIG51bGwsIGVycm9yID0+IHsgdGhpcy5lcnJvck1lc3NhZ2UgPSAnRXJyb3IgcmV0cmlldmluZyBjYXNlIGFjdGlvbnM6ICcgKyBlcnJvci5lcnJvci5lcnJvck1zZzsgfSk7XG4gIH1cblxuICBwdWJsaWMgdG9nZ2xlRW5hYmxlID0gKCkgPT4ge1xuICAgIHRoaXMuZGlzYWJsZWQgPSAhdGhpcy5kaXNhYmxlZDtcbiAgfVxuXG4gIHB1YmxpYyBzZWxlY3RBY3Rpb24oYWN0aW9uOiBDYXNlQWN0aW9uKSB7XG5cbiAgICB0aGlzLmNhc2VQcm9jZXNzZXNTZXJ2aWNlLmdldFByb2Nlc3NEZXRhaWxzKHRoaXMuY2FzZVJlZiwgdGhpcy5hcHBJZCwgdGhpcy50eXBlSWQsIHRoaXMuc2FuZGJveElkLCBhY3Rpb24sIG51bGwsIDEwMCkucGlwZShcbiAgICAgIHRha2UoMSksXG4gICAgICB0YWtlVW50aWwodGhpcy5fZGVzdHJveWVkJCksXG4gICAgICB0YXAocHJvY2Vzc0RldGFpbHMgPT4ge1xuICAgICAgICBpZiAoIXByb2Nlc3NEZXRhaWxzIHx8ICFwcm9jZXNzRGV0YWlscy5wcm9jZXNzIHx8IChwcm9jZXNzRGV0YWlscy5wcm9jZXNzLmpzb25TY2hlbWEuJHNjaGVtYSA9PT0gJ05PU0NIRU1BJykpIHtcbiAgICAgICAgICAvLyBUaGlzIHdpbGwgYmUgdHJpZ2dlcmVkIHdoZW4gbm8gZm9ybSBzY2hlbWEgaXMgYXZhaWxhYmxlXG4gICAgICAgICAgLy8gVHlwaWNhbGx5IGhhcHBlbnMgd2hlbjpcbiAgICAgICAgICAvLyAxKSBUaGUgZm9ybSBoYXMgZWxlbWVudHMgdGhhdCBhcmUgbm90IHN1cHBvcnRlZCBieSB0aGUgTGl2ZSBBcHBzIEFQSSBmb3IgZm9ybSBzY2hlbWFzIHN1Y2ggYXMgcGFydGljaXBhbnQgc2VsZWN0b3JzXG4gICAgICAgICAgLy8gMikgVGhlIExpdmUgQXBwcyBhcHBsaWNhdGlvbiBpcyBsZWdhY3kgYW5kIGhhcyBubyBmb3JtIHNjaGVtYSBhdCBhbGwsIHJlZGVwbG95aW5nIHRoZSBsaXZlIGFwcHMgYXBwbGljYXRpb24gd291bGQgZml4IHRoaXMuXG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKCdObyBzY2hlbWEgYXZhaWxhYmxlIGZvciB0aGlzIGNhc2UgdHlwZTogVGhlIGZvcm0gbWF5IG5vdCBiZSBzdXBwb3J0ZWQgb3IgeW91IG1heSBuZWVkIHRvIHVwZGF0ZS9yZS1kZXBsb3kgdGhlIGxpdmUgYXBwcyBhcHBsaWNhdGlvbicpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgKSxcbiAgICAgIG1hcChwcm9jZXNzU2NoZW1hID0+IHtcbiAgICAgICAgdGhpcy5hY3Rpb25DbGlja2VkLmVtaXQocHJvY2Vzc1NjaGVtYSk7XG4gICAgICAgIHJldHVybiBwcm9jZXNzU2NoZW1hO1xuICAgICAgfSlcbiAgICApXG4gICAgLnN1YnNjcmliZShudWxsLCBlcnJvciA9PiB7IHRoaXMuZXJyb3JNZXNzYWdlID0gJ0Vycm9yIHJldHJpZXZpbmcgY2FzZSBhY3Rpb25zOiAnICsgZXJyb3IuZXJyb3IuZXJyb3JNc2c7IH0pO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5yZWZyZXNoKCk7XG4gIH1cblxufVxuIl19