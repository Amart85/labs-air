/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { LiveAppsActiveCasesReportComponent } from '../live-apps-active-cases-report/live-apps-active-cases-report.component';
import { LiveAppsActiveCasesForTypeReportComponent } from '../live-apps-active-cases-for-type-report/live-apps-active-cases-for-type-report.component';
/**
 * Home page active cases widget main component
 *
 * ![alt-text](../live-apps-active-cases-widget.png "Image")
 *
 * \@example <tcla-live-apps-active-cases-widget></tcla-live-apps-active-cases-widget>
 */
export class LiveAppsActiveCasesWidgetComponent extends LiveAppsComponent {
    constructor() {
        super(...arguments);
        /**
         * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
         */
        this.maxLegendItems = this.maxLegendItems ? this.maxLegendItems : 8;
        /**
         * Whether to show percentages or raw case numbers on the doughnut chart
         */
        this.showPercentages = this.showPercentages ? this.showPercentages : false;
        /**
         * ~event selectedCaseType : Case Type selected in vizualization
         * ~payload CaseTypeReportRecord : CaseTypeReportRecord object selected from component
         */
        this.selectedCaseType = new EventEmitter();
        /**
         * ~event selectedCaseTypeState : Case Type state selected in vizualization
         * ~payload CaseTypeStateReportStateInfo : CaseTypeStateReportStateInfo object selected from component (to drive caller to display something different (drill down))
         */
        this.selectedCaseTypeState = new EventEmitter();
        this.handleCaseTypeSelected = (/**
         * @param {?} selected
         * @return {?}
         */
        (selected) => {
            this.selectedCaseTypeReport = selected;
            this.selectedCaseType.emit(selected);
        });
        this.handleCaseTypeStateSelected = (/**
         * @param {?} selectedState
         * @return {?}
         */
        (selectedState) => {
            this.selectedCaseTypeState.emit(selectedState);
        });
        this.clearSelectedCaseType = (/**
         * @return {?}
         */
        () => {
            this.selectedCaseTypeReport = undefined;
        });
        this.refresh = (/**
         * @return {?}
         */
        () => {
            if (this.activeCasesComp) {
                this.activeCasesComp.refresh();
            }
            if (this.activeCaseTypeComp) {
                this.activeCaseTypeComp.refresh();
            }
        });
    }
}
LiveAppsActiveCasesWidgetComponent.decorators = [
    { type: Component, args: [{
                selector: 'tcla-live-apps-active-cases-widget',
                template: "<div class=\"tcs-active-case-widget-pane\" fxFill fxLayout=\"column\">\n  <div *ngIf=\"showHeader\" class=\"tcs-active-case-widget-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    <div fxLayoutAlign=\"start center\">\n      <mat-icon class=\"tcs-icon tcs-active-case-widget-icon\" svgIcon=\"ic-active-case-widget-icon\"></mat-icon>\n      <div class=\"tcs-active-case-widget-header-text\">Active Cases</div>\n    </div>\n    <div fxLayoutGap=\"10px\">\n      <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        <div class=\"tcs-type-filter-text\" *ngIf=\"selectedCaseTypeReport\" fxLayout=\"row\">\n          [\n          <div class=\"tcs-type-filter-text-highlight\">{{selectedCaseTypeReport.caseTypeInfo.label}}</div>\n          ]\n        </div>\n      </div>\n      <mat-icon *ngIf=\"selectedCaseTypeReport\" (click)=\"clearSelectedCaseType()\" class=\"tcs-icon tcs-icon-active tcs-clear-selected-case-type-icon\" svgIcon=\"tcs-clear-icon\" matTooltip=\"Clear Selected Case Type\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\"></mat-icon>\n    </div>\n  </div>\n  <div *ngIf=\"!showHeader\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n  </div>\n  <tcla-live-apps-active-cases-report *ngIf=\"!selectedCaseTypeReport\" fxFlex [maxLegendItems]=\"maxLegendItems\" [sandboxId]=\"sandboxId\" [appIds]=\"appIds\" [showPercentages]=\"showPercentages\" [uiAppId]=\"uiAppId\" (selectedCaseType)=\"handleCaseTypeSelected($event)\"></tcla-live-apps-active-cases-report>\n  <tcla-live-apps-active-cases-for-type-report *ngIf=\"selectedCaseTypeReport\" fxFlex [maxLegendItems]=\"maxLegendItems\" [sandboxId]=\"sandboxId\" [typeId]=\"selectedCaseTypeReport.caseTypeInfo.id\" [appId]=\"selectedCaseTypeReport.applicationId\" [showPercentages]=\"showPercentages\" [uiAppId]=\"uiAppId\" (selectedCaseTypeState)=\"handleCaseTypeStateSelected($event)\"></tcla-live-apps-active-cases-for-type-report>\n</div>\n",
                styles: [".tcs-active-case-widget-pane{border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff}.tcs-active-case-widget-header{height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-active-case-widget-header-text{font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-icon.tcs-icon-active:hover{cursor:pointer}:host ::ng-deep .tcs-icon.tcs-icon-active:hover .svg-content{fill:#0081cb}.tcs-type-filter-text{font-family:Source Sans Pro;font-size:12px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-type-filter-text-highlight{color:#ff7800}"]
            }] }
];
LiveAppsActiveCasesWidgetComponent.propDecorators = {
    sandboxId: [{ type: Input }],
    appIds: [{ type: Input }],
    showHeader: [{ type: Input }],
    uiAppId: [{ type: Input }],
    maxLegendItems: [{ type: Input }],
    showPercentages: [{ type: Input }],
    selectedCaseType: [{ type: Output }],
    selectedCaseTypeState: [{ type: Output }],
    activeCasesComp: [{ type: ViewChild, args: [LiveAppsActiveCasesReportComponent, { static: false },] }],
    activeCaseTypeComp: [{ type: ViewChild, args: [LiveAppsActiveCasesForTypeReportComponent, { static: false },] }]
};
if (false) {
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsActiveCasesWidgetComponent.prototype.sandboxId;
    /**
     * The list of LA Application IDs you want to handle
     * @type {?}
     */
    LiveAppsActiveCasesWidgetComponent.prototype.appIds;
    /**
     * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
     * @type {?}
     */
    LiveAppsActiveCasesWidgetComponent.prototype.showHeader;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     * @type {?}
     */
    LiveAppsActiveCasesWidgetComponent.prototype.uiAppId;
    /**
     * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
     * @type {?}
     */
    LiveAppsActiveCasesWidgetComponent.prototype.maxLegendItems;
    /**
     * Whether to show percentages or raw case numbers on the doughnut chart
     * @type {?}
     */
    LiveAppsActiveCasesWidgetComponent.prototype.showPercentages;
    /**
     * ~event selectedCaseType : Case Type selected in vizualization
     * ~payload CaseTypeReportRecord : CaseTypeReportRecord object selected from component
     * @type {?}
     */
    LiveAppsActiveCasesWidgetComponent.prototype.selectedCaseType;
    /**
     * ~event selectedCaseTypeState : Case Type state selected in vizualization
     * ~payload CaseTypeStateReportStateInfo : CaseTypeStateReportStateInfo object selected from component (to drive caller to display something different (drill down))
     * @type {?}
     */
    LiveAppsActiveCasesWidgetComponent.prototype.selectedCaseTypeState;
    /** @type {?} */
    LiveAppsActiveCasesWidgetComponent.prototype.activeCasesComp;
    /** @type {?} */
    LiveAppsActiveCasesWidgetComponent.prototype.activeCaseTypeComp;
    /** @type {?} */
    LiveAppsActiveCasesWidgetComponent.prototype.selectedCaseTypeReport;
    /** @type {?} */
    LiveAppsActiveCasesWidgetComponent.prototype.handleCaseTypeSelected;
    /** @type {?} */
    LiveAppsActiveCasesWidgetComponent.prototype.handleCaseTypeStateSelected;
    /** @type {?} */
    LiveAppsActiveCasesWidgetComponent.prototype.clearSelectedCaseType;
    /** @type {?} */
    LiveAppsActiveCasesWidgetComponent.prototype.refresh;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWFjdGl2ZS1jYXNlcy13aWRnZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2xpdmUtYXBwcy1hY3RpdmUtY2FzZXMtd2lkZ2V0L2xpdmUtYXBwcy1hY3RpdmUtY2FzZXMtd2lkZ2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBRSxTQUFTLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFLeEYsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sc0RBQXNELENBQUM7QUFFdkYsT0FBTyxFQUFDLGtDQUFrQyxFQUFDLE1BQU0sMEVBQTBFLENBQUM7QUFDNUgsT0FBTyxFQUFDLHlDQUF5QyxFQUFDLE1BQU0sNEZBQTRGLENBQUM7Ozs7Ozs7O0FBZ0JySixNQUFNLE9BQU8sa0NBQW1DLFNBQVEsaUJBQWlCO0lBTHpFOzs7OztRQThCVyxtQkFBYyxHQUFXLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQzs7OztRQUt2RSxvQkFBZSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQzs7Ozs7UUFNckUscUJBQWdCLEdBQXVDLElBQUksWUFBWSxFQUF3QixDQUFDOzs7OztRQU1oRywwQkFBcUIsR0FBK0MsSUFBSSxZQUFZLEVBQWdDLENBQUM7UUFReEgsMkJBQXNCOzs7O1FBQUcsQ0FBQyxRQUE4QixFQUFFLEVBQUU7WUFDakUsSUFBSSxDQUFDLHNCQUFzQixHQUFHLFFBQVEsQ0FBQztZQUN2QyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZDLENBQUMsRUFBQTtRQUVNLGdDQUEyQjs7OztRQUFHLENBQUMsYUFBMkMsRUFBRSxFQUFFO1lBQ25GLElBQUksQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsYUFBYSxDQUFDLENBQUM7UUFDakQsQ0FBQyxFQUFBO1FBRU0sMEJBQXFCOzs7UUFBRyxHQUFHLEVBQUU7WUFDbEMsSUFBSSxDQUFDLHNCQUFzQixHQUFHLFNBQVMsQ0FBQztRQUMxQyxDQUFDLEVBQUE7UUFFTSxZQUFPOzs7UUFBRyxHQUFHLEVBQUU7WUFDcEIsSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO2dCQUN4QixJQUFJLENBQUMsZUFBZSxDQUFDLE9BQU8sRUFBRSxDQUFDO2FBQ2hDO1lBQ0QsSUFBSSxJQUFJLENBQUMsa0JBQWtCLEVBQUU7Z0JBQzNCLElBQUksQ0FBQyxrQkFBa0IsQ0FBQyxPQUFPLEVBQUUsQ0FBQzthQUNuQztRQUNILENBQUMsRUFBQTtJQUVILENBQUM7OztZQTdFQSxTQUFTLFNBQUM7Z0JBQ1QsUUFBUSxFQUFFLG9DQUFvQztnQkFDOUMsdzZEQUE2RDs7YUFFOUQ7Ozt3QkFNRSxLQUFLO3FCQUtMLEtBQUs7eUJBS0wsS0FBSztzQkFLTCxLQUFLOzZCQUtMLEtBQUs7OEJBS0wsS0FBSzsrQkFNTCxNQUFNO29DQU1OLE1BQU07OEJBR04sU0FBUyxTQUFDLGtDQUFrQyxFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQztpQ0FDN0QsU0FBUyxTQUFDLHlDQUF5QyxFQUFFLEVBQUMsTUFBTSxFQUFFLEtBQUssRUFBQzs7Ozs7OztJQXpDckUsdURBQTJCOzs7OztJQUszQixvREFBMEI7Ozs7O0lBSzFCLHdEQUE2Qjs7Ozs7SUFLN0IscURBQXlCOzs7OztJQUt6Qiw0REFBZ0Y7Ozs7O0lBS2hGLDZEQUErRTs7Ozs7O0lBTS9FLDhEQUEwRzs7Ozs7O0lBTTFHLG1FQUErSDs7SUFHL0gsNkRBQW9IOztJQUNwSCxnRUFBcUk7O0lBRXJJLG9FQUFvRDs7SUFFcEQsb0VBR0M7O0lBRUQseUVBRUM7O0lBRUQsbUVBRUM7O0lBRUQscURBT0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXQsIFZpZXdDaGlsZH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Nhc2VUeXBlUmVwb3J0UmVjb3JkLCBDYXNlVHlwZXNSZXBvcnQsIENhc2VUeXBlU3RhdGVSZXBvcnRTdGF0ZUluZm99IGZyb20gJy4uLy4uL21vZGVscy90Yy1saXZlLWFwcHMtcmVwb3J0aW5nJztcbmltcG9ydCB7QmFzZUNoYXJ0RGlyZWN0aXZlLCBMYWJlbCwgTXVsdGlEYXRhU2V0fSBmcm9tICduZzItY2hhcnRzJztcbmltcG9ydCB7Q2hhcnRUeXBlfSBmcm9tICdjaGFydC5qcyc7XG5pbXBvcnQge1RjTGl2ZUFwcHNSZXBvcnRpbmdTZXJ2aWNlfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy90Yy1saXZlLWFwcHMtcmVwb3J0aW5nLnNlcnZpY2UnO1xuaW1wb3J0IHtMaXZlQXBwc0NvbXBvbmVudH0gZnJvbSAnLi4vbGl2ZS1hcHBzLWNvbXBvbmVudC9saXZlLWFwcHMtY29tcG9uZW50LmNvbXBvbmVudCc7XG5pbXBvcnQge21hcCwgdGFrZSwgdGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0xpdmVBcHBzQWN0aXZlQ2FzZXNSZXBvcnRDb21wb25lbnR9IGZyb20gJy4uL2xpdmUtYXBwcy1hY3RpdmUtY2FzZXMtcmVwb3J0L2xpdmUtYXBwcy1hY3RpdmUtY2FzZXMtcmVwb3J0LmNvbXBvbmVudCc7XG5pbXBvcnQge0xpdmVBcHBzQWN0aXZlQ2FzZXNGb3JUeXBlUmVwb3J0Q29tcG9uZW50fSBmcm9tICcuLi9saXZlLWFwcHMtYWN0aXZlLWNhc2VzLWZvci10eXBlLXJlcG9ydC9saXZlLWFwcHMtYWN0aXZlLWNhc2VzLWZvci10eXBlLXJlcG9ydC5jb21wb25lbnQnO1xuXG5cbi8qKlxuICogSG9tZSBwYWdlIGFjdGl2ZSBjYXNlcyB3aWRnZXQgbWFpbiBjb21wb25lbnRcbiAqXG4gKiAhW2FsdC10ZXh0XSguLi9saXZlLWFwcHMtYWN0aXZlLWNhc2VzLXdpZGdldC5wbmcgXCJJbWFnZVwiKVxuICpcbiAqQGV4YW1wbGUgPHRjbGEtbGl2ZS1hcHBzLWFjdGl2ZS1jYXNlcy13aWRnZXQ+PC90Y2xhLWxpdmUtYXBwcy1hY3RpdmUtY2FzZXMtd2lkZ2V0PlxuICovXG5cbkBDb21wb25lbnQoe1xuICBzZWxlY3RvcjogJ3RjbGEtbGl2ZS1hcHBzLWFjdGl2ZS1jYXNlcy13aWRnZXQnLFxuICB0ZW1wbGF0ZVVybDogJy4vbGl2ZS1hcHBzLWFjdGl2ZS1jYXNlcy13aWRnZXQuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9saXZlLWFwcHMtYWN0aXZlLWNhc2VzLXdpZGdldC5jb21wb25lbnQuY3NzJ11cbn0pXG5leHBvcnQgY2xhc3MgTGl2ZUFwcHNBY3RpdmVDYXNlc1dpZGdldENvbXBvbmVudCBleHRlbmRzIExpdmVBcHBzQ29tcG9uZW50IHtcblxuICAvKipcbiAgICogc2FuZGJveElkIC0gdGhpcyBjb21lcyBmcm9tIGNsYWltcyByZXNvbHZlclxuICAgKi9cbiAgQElucHV0KCkgc2FuZGJveElkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBsaXN0IG9mIExBIEFwcGxpY2F0aW9uIElEcyB5b3Ugd2FudCB0byBoYW5kbGVcbiAgICovXG4gIEBJbnB1dCgpIGFwcElkczogc3RyaW5nW107XG5cbiAgLyoqXG4gICAqIFdoZXRoZXIgdG8gc2hvdyB0aGUgaGVhZGVyIGJhciBpbiB0aGUgd2lkZ2V0IC0gZWcuIGZhdm9yaXRlcyBvbiBob21lIHBhZ2UgKGNvbnRhaW5zIGljb24gZXRjKSAtIGlmIG9mZiBpY29ucyBzdGlsbCBhcHBlYXIgd2l0aG91dCBiYXJcbiAgICovXG4gIEBJbnB1dCgpIHNob3dIZWFkZXI6IGJvb2xlYW47XG5cbiAgLyoqXG4gICAqIFRoZSBBcHBsaWNhdGlvbiBJRCBvZiB0aGUgVUkgKHNob3VsZCBpZGVhbGx5IGJlIHVuaXF1ZSBhcyBpdCBpcyBzaGFyZWQgc3RhdGUga2V5KVxuICAgKi9cbiAgQElucHV0KCkgdWlBcHBJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBNYXhpbXVtIHJvd3MgdG8gc2hvdyBpbiBsZWdlbmQgYmVmb3JlIGl0IGlzIGhpZGRlbiAob3RoZXJ3aXNlIHdvdWxkIHRha2Ugd2hvbGUgd2lkZ2V0KVxuICAgKi9cbiAgQElucHV0KCkgbWF4TGVnZW5kSXRlbXM6IG51bWJlciA9IHRoaXMubWF4TGVnZW5kSXRlbXMgPyB0aGlzLm1heExlZ2VuZEl0ZW1zIDogODtcblxuICAvKipcbiAgICogV2hldGhlciB0byBzaG93IHBlcmNlbnRhZ2VzIG9yIHJhdyBjYXNlIG51bWJlcnMgb24gdGhlIGRvdWdobnV0IGNoYXJ0XG4gICAqL1xuICBASW5wdXQoKSBzaG93UGVyY2VudGFnZXMgPSB0aGlzLnNob3dQZXJjZW50YWdlcyA/IHRoaXMuc2hvd1BlcmNlbnRhZ2VzIDogZmFsc2U7XG5cbiAgLyoqXG4gICAqIH5ldmVudCBzZWxlY3RlZENhc2VUeXBlIDogQ2FzZSBUeXBlIHNlbGVjdGVkIGluIHZpenVhbGl6YXRpb25cbiAgICogfnBheWxvYWQgQ2FzZVR5cGVSZXBvcnRSZWNvcmQgOiBDYXNlVHlwZVJlcG9ydFJlY29yZCBvYmplY3Qgc2VsZWN0ZWQgZnJvbSBjb21wb25lbnRcbiAgICovXG4gIEBPdXRwdXQoKSBzZWxlY3RlZENhc2VUeXBlOiBFdmVudEVtaXR0ZXI8Q2FzZVR5cGVSZXBvcnRSZWNvcmQ+ID0gbmV3IEV2ZW50RW1pdHRlcjxDYXNlVHlwZVJlcG9ydFJlY29yZD4oKTtcblxuICAvKipcbiAgICogfmV2ZW50IHNlbGVjdGVkQ2FzZVR5cGVTdGF0ZSA6IENhc2UgVHlwZSBzdGF0ZSBzZWxlY3RlZCBpbiB2aXp1YWxpemF0aW9uXG4gICAqIH5wYXlsb2FkIENhc2VUeXBlU3RhdGVSZXBvcnRTdGF0ZUluZm8gOiBDYXNlVHlwZVN0YXRlUmVwb3J0U3RhdGVJbmZvIG9iamVjdCBzZWxlY3RlZCBmcm9tIGNvbXBvbmVudCAodG8gZHJpdmUgY2FsbGVyIHRvIGRpc3BsYXkgc29tZXRoaW5nIGRpZmZlcmVudCAoZHJpbGwgZG93bikpXG4gICAqL1xuICBAT3V0cHV0KCkgc2VsZWN0ZWRDYXNlVHlwZVN0YXRlOiBFdmVudEVtaXR0ZXI8Q2FzZVR5cGVTdGF0ZVJlcG9ydFN0YXRlSW5mbz4gPSBuZXcgRXZlbnRFbWl0dGVyPENhc2VUeXBlU3RhdGVSZXBvcnRTdGF0ZUluZm8+KCk7XG5cblxuICBAVmlld0NoaWxkKExpdmVBcHBzQWN0aXZlQ2FzZXNSZXBvcnRDb21wb25lbnQsIHtzdGF0aWM6IGZhbHNlfSkgYWN0aXZlQ2FzZXNDb21wOiBMaXZlQXBwc0FjdGl2ZUNhc2VzUmVwb3J0Q29tcG9uZW50O1xuICBAVmlld0NoaWxkKExpdmVBcHBzQWN0aXZlQ2FzZXNGb3JUeXBlUmVwb3J0Q29tcG9uZW50LCB7c3RhdGljOiBmYWxzZX0pIGFjdGl2ZUNhc2VUeXBlQ29tcDogTGl2ZUFwcHNBY3RpdmVDYXNlc0ZvclR5cGVSZXBvcnRDb21wb25lbnQ7XG5cbiAgcHVibGljIHNlbGVjdGVkQ2FzZVR5cGVSZXBvcnQ6IENhc2VUeXBlUmVwb3J0UmVjb3JkO1xuXG4gIHB1YmxpYyBoYW5kbGVDYXNlVHlwZVNlbGVjdGVkID0gKHNlbGVjdGVkOiBDYXNlVHlwZVJlcG9ydFJlY29yZCkgPT4ge1xuICAgIHRoaXMuc2VsZWN0ZWRDYXNlVHlwZVJlcG9ydCA9IHNlbGVjdGVkO1xuICAgIHRoaXMuc2VsZWN0ZWRDYXNlVHlwZS5lbWl0KHNlbGVjdGVkKTtcbiAgfVxuXG4gIHB1YmxpYyBoYW5kbGVDYXNlVHlwZVN0YXRlU2VsZWN0ZWQgPSAoc2VsZWN0ZWRTdGF0ZTogQ2FzZVR5cGVTdGF0ZVJlcG9ydFN0YXRlSW5mbykgPT4ge1xuICAgIHRoaXMuc2VsZWN0ZWRDYXNlVHlwZVN0YXRlLmVtaXQoc2VsZWN0ZWRTdGF0ZSk7XG4gIH1cblxuICBwdWJsaWMgY2xlYXJTZWxlY3RlZENhc2VUeXBlID0gKCkgPT4ge1xuICAgIHRoaXMuc2VsZWN0ZWRDYXNlVHlwZVJlcG9ydCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIHB1YmxpYyByZWZyZXNoID0gKCkgPT4ge1xuICAgIGlmICh0aGlzLmFjdGl2ZUNhc2VzQ29tcCkge1xuICAgICAgdGhpcy5hY3RpdmVDYXNlc0NvbXAucmVmcmVzaCgpO1xuICAgIH1cbiAgICBpZiAodGhpcy5hY3RpdmVDYXNlVHlwZUNvbXApIHtcbiAgICAgIHRoaXMuYWN0aXZlQ2FzZVR5cGVDb21wLnJlZnJlc2goKTtcbiAgICB9XG4gIH1cblxufVxuIl19