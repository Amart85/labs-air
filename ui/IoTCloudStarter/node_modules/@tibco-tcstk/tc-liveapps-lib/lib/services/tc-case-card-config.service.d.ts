import { TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { Observable } from 'rxjs';
import { CardConfig, CaseInfo, CaseTypeState } from '../models/liveappsdata';
import { LiveAppsService } from './live-apps.service';
import { CaseCardConfig, StateColorMap } from '../models/tc-case-card-config';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
export declare const DEFAULT_COLORS: string[];
export declare const DEFAULT_TYPE_COLOR = "#8197c0";
export declare const DEFAULT_STATE_COLOR = "#8197c0";
export declare const GENERIC_STATE_ICON_SVG: string;
export declare const GENERIC_CASETYPE_ICON_SVG: string;
export declare class TcCaseCardConfigService {
    private http;
    private liveAppsService;
    private sharedStateService;
    private location;
    constructor(http: HttpClient, liveAppsService: LiveAppsService, sharedStateService: TcSharedStateService, location: Location);
    createCardConfig(sandboxId: number, appId: string, uiAppId: string): Observable<string>;
    updateCardConfig(sandboxId: number, appId: string, uiAppId: string, config: CardConfig, id: string): Observable<CardConfig>;
    createNewCardConfig(states: CaseTypeState[], sandboxId: number, appId: string, uiAppId: string, caseTypeId: string, defaultCaseTypeColor: string, defaultCaseTypeIcon: string, defaultStateColor: string, defaultStateIcon: string): Observable<CaseCardConfig>;
    getCaseCardConfig(sandboxId: number, appId: string, uiAppId: string, caseTypeId: string, defaultCaseTypeColor: string, defaultCaseTypeIcon: string, defaultStateColor: string, defaultStateIcon: string): Observable<CaseCardConfig>;
    updateCaseCardConfig(sandboxId: number, appId: string, uiAppId: string, updatedConfig: CaseCardConfig): Observable<CaseCardConfig>;
    getCardConfig(uiAppId: string, appId: string, useCache: boolean, flushCache: boolean): Observable<CardConfig>;
    getStateColorInfo(appId: string, uiAppId: string): Observable<StateColorMap>;
    getColorForState(appId: string, uiAppId: string, state: string): Observable<string>;
    parseCaseInfo(caseinfo: CaseInfo, sandboxId: number, appId: string, typeId: string, uiAppId: any): Observable<CaseInfo>;
    getCaseWithSummary(caseRef: string, sandboxId: number, uiAppId: string): Observable<CaseInfo>;
}
