import { Observable } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { CaseInfo, CaseInfoList, CaseTypesList, CaseTypeStatesList, CaseList, UserInfo, NotesList, Note, ThreadList, NotificationList, CaseType, CaseSearchResults } from '../models/liveappsdata';
import { TcSharedStateService, Claim, SandboxList } from '@tibco-tcstk/tc-core-lib';
import { Groups } from '../models/tc-groups-data';
import { Location } from '@angular/common';
export declare class LiveAppsService {
    private http;
    private location;
    private sharedStateService;
    private claimsCacheMap;
    private userInfoCacheMap;
    private caseTypesCacheMap;
    private iconSVGTextCacheMap;
    constructor(http: HttpClient, location: Location, sharedStateService: TcSharedStateService);
    getSandboxes(): Observable<SandboxList>;
    getApplications(sandboxId: number, appIds: string[], top: number, useCache: boolean): Observable<CaseTypesList>;
    getClaims(): Observable<Claim>;
    getCases(sandboxId: number, appId: string, typeId: string, skip: number, top: number): Observable<CaseInfoList>;
    getCasesCount(sandboxId: number, appId: string, typeId: string): Observable<string>;
    getCaseByRef(sandboxId: any, caseRef: string): Observable<CaseInfo>;
    getCase(caseRef: string, sandboxId: number, appId: string, typeId: string): Observable<CaseInfo>;
    caseSearch(terms: Observable<string>, sandboxId: number, appId: string, typeId: string, skip: number, top: number, stateId: number): Observable<CaseSearchResults>;
    caseSearchEntries(term: string, sandboxId: number, appId: string, typeId: string, force: boolean, skip: number, top: number, stateId: number): Observable<CaseSearchResults>;
    getCaseTypes(sandboxId: number, appId: string, top: number): Observable<CaseTypesList>;
    getCaseTypeSchema(sandboxId: number, appId: string, top: number): Observable<CaseTypesList>;
    getCaseTypeStates(sandboxId: number, appId: string, top: number): Observable<CaseTypeStatesList>;
    getCaseTypeBasicInfo(sandboxId: number, appId: string, typeId: string, top: number): Observable<CaseType>;
    private getCaseTypeBasicInfoCached;
    clearFromIconSVGTextCache(url: any): void;
    getIconSVGText(url: string): Observable<string>;
    private getIconSVGTextCache;
    private updateCasesRecord;
    private newCasesRecord;
    getRecentCases(uiAppId: string, sandboxId: number): Observable<CaseList>;
    private getSSCasesList;
    unsetRecentCase(caseRef: string, uiAppId: string, sandboxId: number): void;
    setRecentCase(caseRef: string, uiAppId: string, sandboxId: number): void;
    private setCasesRecord;
    getFavoriteCases(uiAppId: string, sandboxId: number): Observable<CaseList>;
    setFavoriteCase(caseRef: string, uiAppId: string, sandboxId: number): void;
    isFavoriteCase(caseRef: string, uiAppId: string, sandboxId: number): Observable<boolean>;
    runProcess(sandboxId: number, appId: string, processId: string, caseReference: string, data: any): Observable<any>;
    getUserInfo(userId: string): Observable<UserInfo>;
    private getUserCached;
    getThreads(relatedItemType: string, itemTypeId: string, skip: number, top: number): Observable<ThreadList>;
    getNotesForCollections(collectionIds: any): Observable<NotesList>;
    deleteAllNotes(): void;
    updateNote(note: Note, noteId: string): Observable<Note>;
    createNote(relatedItemType: string, uiAppSource: string, relatedItemId: string, notificationLabel: string, notificationUrl: string, title: string, noteText: string): Observable<number>;
    getNote(noteId: number): Observable<Note>;
    getThread(relatedItemType: string, relatedItemId: string, threadId: number): Observable<NotesList>;
    createReplyNote(originalNote: Note, reply: string, noteId: string): Observable<number>;
    subscribeToNotes(relatedItemType: any, relatedTypeId: any): Observable<Object>;
    unsubscribeToNotes(relatedItemType: any, relatedTypeId: any, userId: any): Observable<Object>;
    getNotifications(relatedItemType: any, relatedTypeId: any, userId: any): Observable<NotificationList>;
    deleteNote(noteId: number): Observable<Object>;
    getGroups(sandboxId: number, top: number, useCache: boolean): Observable<Groups>;
    getGroupMemberships(sandboxId: number, userId: string, top: number, useCache: boolean): Observable<Groups>;
}
