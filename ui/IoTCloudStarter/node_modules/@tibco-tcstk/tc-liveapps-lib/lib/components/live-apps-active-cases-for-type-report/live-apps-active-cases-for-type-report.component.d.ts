import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ChartType } from 'chart.js';
import { Label, MultiDataSet } from 'ng2-charts';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { TcLiveAppsReportingService } from '../../services/tc-live-apps-reporting.service';
import { CaseTypeStateReport, CaseTypeStateReportStateInfo } from '../../models/tc-live-apps-reporting';
import 'chartjs-plugin-datalabels';
/**
 * Home page active cases widget sub component
 *
 *@example <tcla-live-apps-active-cases-for-type-report></tcla-live-apps-active-cases-for-type-report>
 */
export declare class LiveAppsActiveCasesForTypeReportComponent extends LiveAppsComponent implements OnInit, OnChanges {
    private reportingService;
    /**
     * sandboxId - this comes from claims resolver
     */
    sandboxId: number;
    /**
     * The LA Application Id
     */
    appId: string;
    /**
     * The LA Application Type Id (generally 1)
     */
    typeId: string;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     */
    uiAppId: string;
    /**
     * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
     */
    maxLegendItems: number;
    /**
     * Whether to show percentages or raw case numbers on the doughnut chart
     */
    showPercentages: any;
    /**
     * ~event selectedCaseTypeState : Case Type state selected in vizualization
     * ~payload CaseTypeStateReportStateInfo : CaseTypeStateReportStateInfo object selected from component (to drive caller to display something different (drill down))
     */
    selectedCaseTypeState: EventEmitter<CaseTypeStateReportStateInfo>;
    errorMessage: string;
    caseTypeStateReport: CaseTypeStateReport;
    renderChart: boolean;
    doughnutChartLabels: Label[];
    doughnutChartData: MultiDataSet;
    doughnutChartType: ChartType;
    chartColors: any[];
    defaultColors: string[];
    legendData: any;
    totalActiveCaseCount: number;
    private getCaseCount;
    doughnutChartOptions: any;
    constructor(reportingService: TcLiveAppsReportingService);
    private initReportDataToChart;
    refresh: () => void;
    chartClicked({ event, active }: {
        event: MouseEvent;
        active: any;
    }): void;
    chartHovered({ event, active }: {
        event: MouseEvent;
        active: {}[];
    }): void;
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
}
