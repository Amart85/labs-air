import { ElementRef, EventEmitter } from '@angular/core';
import { Observable, Subject } from 'rxjs';
import { LiveAppsService } from '../../services/live-apps.service';
import { CaseSearchResults, CaseType } from '../../models/liveappsdata';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { LiveAppsApplicationsComponent } from '../live-apps-applications/live-apps-applications.component';
/**
 * Selection of app + searching for cases
 *
 *  ![alt-text](../live-apps-case-search.png "Image")
 *
 *@example <tcla-live-apps-case-search></tcla-live-apps-case-search>
 */
export declare class LiveAppsCaseSearchComponent extends LiveAppsComponent {
    private liveapps;
    searchBox: ElementRef;
    /**
     * sandboxId - this comes from claims resolver
     */
    sandboxId: number;
    /**
     * The list of LA Application IDs you want to handle
     */
    appIds: string[];
    /**
     * ~event foundRefs : Search completed (caseRefs returned)
     * ~payload CaseSearchResults : caseRefs matching the search (so parent can display them in case list component)
     */
    foundRefs: EventEmitter<CaseSearchResults>;
    applicationsComponent: LiveAppsApplicationsComponent;
    searchTerm$: Subject<string>;
    searchValue: Observable<String>;
    searchString: string;
    forcedSearch: boolean;
    selectedStateId: number;
    selectedStateLabel: string;
    selectedApp: CaseType;
    constructor(liveapps: LiveAppsService);
    refresh: () => void;
    setCaseType: (caseType: CaseType) => void;
    setSelectedStateId: (stateId: number, stateLabel: string) => void;
    handleSearchAppSelection: (application: CaseType) => void;
    clearResults: () => void;
    forceSearch: () => void;
    doSearch: (stateId?: number) => void;
}
