import { EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { LiveAppsService } from '../../services/live-apps.service';
import { CardConfig, CaseRoute, Metadata } from '../../models/liveappsdata';
import { DomSanitizer } from '@angular/platform-browser';
import { LiveAppsStateIconComponent } from '../live-apps-state-icon/live-apps-state-icon.component';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { TcCaseCardConfigService } from '../../services/tc-case-card-config.service';
/**
 * Renders case summary cards
 *
 * ![alt-text](../live-apps-case-summary.png "Image")
 *
 * ![alt-text](../live-apps-case-summary-2.png "Image")
 *
 *@example <tcla-live-apps-case-summary></tcla-live-apps-case-summary>
 */
export declare class LiveAppsCaseSummaryComponent extends LiveAppsComponent implements OnInit, OnChanges {
    protected liveapps: LiveAppsService;
    protected caseCardConfigService: TcCaseCardConfigService;
    protected sanitizer: DomSanitizer;
    stateIconComponent: LiveAppsStateIconComponent;
    caseTypeIconComponent: LiveAppsStateIconComponent;
    /**
     * Whether to use static data (ie. when in app config box)
     */
    configMode: boolean;
    /**
     * static data for app config box
     */
    configModeColor: string;
    /**
     * static data for app config box
     */
    configModeIcon: string;
    /**
     * static data for app config box
     */
    configModeCaseTypeColor: string;
    /**
     * static data for app config box
     */
    configModeCaseTypeIcon: string;
    /**
     * static data for app config box
     */
    configModeAppTypeLabel: string;
    /**
     * The case reference
     */
    caseRef: string;
    /**
     * sandboxId - this comes from claims resolver
     */
    sandboxId: number;
    /**
     * case card format - list, card, miniCard, staticList (no click event)
     */
    displayType: string;
    /**
     * Whether to display a border around the card
     */
    borderCard: boolean;
    /**
     * Whether to display the colored "bar" on a summary card (on left or top)
     */
    typeBar: boolean;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     */
    uiAppId: string;
    /**
     * Text to highlight in the list of cases (normall text that was searched)
     */
    highlight: string;
    /**
     * ~event clickCase : Case clicked
     * ~payload CaseRoute : CaseRoute object output when case is clicked so calling component can route accordingly - ie. route to case
     */
    clickCase: EventEmitter<CaseRoute>;
    /**
     * ~event deleted : Case Displayed has been deleted
     * ~payload string : string emitted when summary tries to load data for a case that has been deleted (so it can be hidden.removed from - for example recent cases list)
     */
    deleted: EventEmitter<string>;
    casedata: any;
    summary: any;
    summaryKeys: string[];
    summaryValues: string[];
    metadata: Metadata;
    appStateConfig: CardConfig;
    errorMessage: any;
    appId: string;
    typeId: string;
    color: string;
    clickCaseAction: () => void;
    restylePreview: (icon: any, fill: any) => void;
    restylePreviewCaseType: (icon: any, fill: any) => void;
    refresh: () => void;
    constructor(liveapps: LiveAppsService, caseCardConfigService: TcCaseCardConfigService, sanitizer: DomSanitizer);
    ngOnInit(): void;
    ngOnChanges(changes: SimpleChanges): void;
}
