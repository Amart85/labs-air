import { EventEmitter, OnInit } from '@angular/core';
import { CaseTypeReportRecord, CaseTypesReport } from '../../models/tc-live-apps-reporting';
import { BaseChartDirective, Label, SingleDataSet } from 'ng2-charts';
import { ChartType } from 'chart.js';
import { TcLiveAppsReportingService } from '../../services/tc-live-apps-reporting.service';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
/**
 * Home page active cases widget sub component
 *
 *@example <tcla-live-apps-active-cases-report></tcla-live-apps-active-cases-report>
 */
export declare class LiveAppsActiveCasesReportComponent extends LiveAppsComponent implements OnInit {
    private reportingService;
    constructor(reportingService: TcLiveAppsReportingService);
    /**
     * sandboxId - this comes from claims resolver
     */
    sandboxId: number;
    /**
     * The list of LA Application IDs you want to handle
     */
    appIds: string[];
    /**
     * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
     */
    showHeader: boolean;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     */
    uiAppId: string;
    /**
     * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
     */
    maxLegendItems: number;
    /**
     * Whether to show percentages or raw case numbers on the doughnut chart
     */
    showPercentages: any;
    /**
     * ~event selectedCaseType : Case Type selected in vizualization
     * ~payload CaseTypeReportRecord : CaseTypeReportRecord object selected from component
     */
    selectedCaseType: EventEmitter<CaseTypeReportRecord>;
    caseReportChart: BaseChartDirective;
    errorMessage: string;
    caseTypesReport: CaseTypesReport;
    totalActiveCaseCount: number;
    totalTerminatedCaseCount: number;
    renderChart: boolean;
    doughnutChartLabels: Label[];
    doughnutChartData: SingleDataSet;
    doughnutChartType: ChartType;
    chartColors: any[];
    defaultColors: string[];
    legendData: any;
    private getCaseCount;
    doughnutChartOptions: any;
    private initReportDataToChart;
    refresh: () => void;
    chartClicked({ event, active }: {
        event: MouseEvent;
        active: any;
    }): void;
    chartHovered({ event, active }: {
        event: MouseEvent;
        active: {}[];
    }): void;
    ngOnInit(): void;
}
