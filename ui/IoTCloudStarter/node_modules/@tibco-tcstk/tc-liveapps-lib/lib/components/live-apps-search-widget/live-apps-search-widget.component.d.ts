import { AfterViewInit, ElementRef, EventEmitter, OnInit } from '@angular/core';
import { CaseSearchResults } from '../../models/liveappsdata';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { LiveAppsCaseSearchComponent } from '../live-apps-case-search/live-apps-case-search.component';
import { LiveAppsService } from '../../services/live-apps.service';
import { TcComponent } from '@tibco-tcstk/tc-core-lib';
/**
 * High Level search widget component (wraps others)
 * This Component allows to search for existing Cases and list Case Cards.
 *
 * ![alt-text](../live-apps-search-widget.png "")
 *
 *@example <tcla-live-apps-search-widget></tcla-live-apps-search-widget>
 */
export declare class LiveAppsSearchWidgetComponent extends LiveAppsComponent implements OnInit, AfterViewInit {
    protected liveapps: LiveAppsService;
    /**
     * sandboxId - this comes from claims resolver
     */
    sandboxId: number;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     */
    uiAppId: string;
    /**
     * The list of LA Application IDs you want to handle
     */
    appIds: string[];
    /**
     * The fixed height of the case list results pane
     */
    resultsHeight: string;
    /**
     * ~event caseSelected : Case Clicked
     * ~payload string : emits case reference when a case is clicked (so parent can navigate to case)
     */
    caseSelected: EventEmitter<string>;
    caseSearchComponent: LiveAppsCaseSearchComponent;
    componentDiv: ElementRef;
    componentDivs: LiveAppsComponent[];
    widget: TcComponent;
    matchedRefs: string[];
    searchString: string;
    message: string;
    constructor(liveapps: LiveAppsService);
    handleSearchResults: (data: CaseSearchResults) => void;
    handleClearMatches: () => void;
    clickCaseAction: (caseReference: any) => void;
    refresh: () => void;
    searchCasesByState: (stateId: number, stateLabel: string, appId: string, typeId: string, message: string) => void;
    ngAfterViewInit(): void;
    ngOnInit(): void;
}
