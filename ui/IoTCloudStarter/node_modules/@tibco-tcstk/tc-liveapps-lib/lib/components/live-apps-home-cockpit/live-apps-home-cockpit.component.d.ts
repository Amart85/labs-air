import { EventEmitter, OnChanges, SimpleChanges } from '@angular/core';
import { CaseRoute, CaseType } from '../../models/liveappsdata';
import { ToolbarButton, TcButtonsHelperService, RouteAction } from '@tibco-tcstk/tc-core-lib';
import { LiveAppsFavoriteCasesComponent } from '../live-apps-favorite-cases/live-apps-favorite-cases.component';
import { LiveAppsRecentCasesComponent } from '../live-apps-recent-cases/live-apps-recent-cases.component';
import { LiveAppsSearchWidgetComponent } from '../live-apps-search-widget/live-apps-search-widget.component';
import { MatDialog } from '@angular/material';
import { LiveAppsNotesComponent } from '../live-apps-notes/live-apps-notes.component';
import { LiveAppsDocumentsComponent } from '../live-apps-documents/live-apps-documents.component';
import { TcRolesService } from '../../services/tc-roles-service.ts.service';
import { Roles, RouteAccessControlConfigurationElement } from '../../models/tc-groups-data';
import { LiveAppsActiveCasesWidgetComponent } from '../live-apps-active-cases-widget/live-apps-active-cases-widget.component';
import { CaseTypeReportRecord, CaseTypeStateReportStateInfo } from '../../models/tc-live-apps-reporting';
import { CustomFormDefs } from '@tibco-tcstk/tc-forms-lib';
import { LiveAppsWorkitemsComponent } from '../live-apps-workitems/live-apps-workitems.component';
/**
 * High level component to allow home page view of system
 *
 * ![alt-text](../live-apps-home-cockpit.png "Documents Component Image")
 *
 *@example <tcla-live-apps-home-cockpit></tcla-live-apps-home-cockpit>
 */
export declare class LiveAppsHomeCockpitComponent implements OnChanges {
    protected buttonsHelper: TcButtonsHelperService;
    dialog: MatDialog;
    protected rolesService: TcRolesService;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     */
    uiAppId: string;
    /**
     * The list of LA Application IDs you want to handle
     */
    appIds: string[];
    /**
     * sandboxId - this comes from claims resolver
     */
    sandboxId: number;
    /**
     * The name of the logged user
     */
    userName: string;
    /**
     * The ID of the logged user
     */
    userId: string;
    /**
     * * Email address of the user (comes from resolver)
     */
    email: string;
    /**
     * page title comes from config resolver
     */
    title: string;
    /**
     * Roles - The users current roles
     */
    roles: Roles;
    /**
     * RouteAccessControlConfig - basically the config for access control
     */
    access: RouteAccessControlConfigurationElement;
    /**
     * Custom Form configuration file
     */
    customFormDefs: CustomFormDefs;
    /**
     * Enable legacy workitems
     */
    legacyWorkitems: boolean;
    /**
     * Enable legacy creators
     */
    legacyCreators: boolean;
    /**
     * Allow override of forms framework
     * Options: bootstrap-4 or material-design
     */
    formsFramework: string;
    /**
     * ~event routeAction : Component requests route to another page
     * ~payload RouteAction : RouteAction object to tell caller to navigate somewhere
     */
    routeAction: EventEmitter<RouteAction>;
    favoritesComponent: LiveAppsFavoriteCasesComponent;
    recentsComponent: LiveAppsRecentCasesComponent;
    searchComponent: LiveAppsSearchWidgetComponent;
    collaborationComponent: LiveAppsNotesComponent;
    documentsComponent: LiveAppsDocumentsComponent;
    activeCasesComponent: LiveAppsActiveCasesWidgetComponent;
    workitemsComponent: LiveAppsWorkitemsComponent;
    toolbarButtons: ToolbarButton[];
    caseStartButtonActive: boolean;
    selectedCaseTypeReportRecord: CaseTypeReportRecord;
    incConfigButton: boolean;
    incRefreshButton: boolean;
    cockpitReady: boolean;
    clickCaseAction: (caseRoute: CaseRoute) => void;
    constructor(buttonsHelper: TcButtonsHelperService, dialog: MatDialog, rolesService: TcRolesService);
    protected createToolbarButtons: () => ToolbarButton[];
    handleToolbarButtonEvent: (buttonId: string) => void;
    handleCreatorAppSelection: (application: CaseType) => void;
    handleReportCaseTypeSelection: (caseTypeReportRecord: CaseTypeReportRecord) => void;
    handleReportCaseTypeStateSelection: (state: CaseTypeStateReportStateInfo) => void;
    openCreatorDialog: (application: CaseType, initialData: any, sandboxId: any, customFormDefs: any, legacyCreators: any, formsFramework: any) => void;
    refresh: () => void;
    initialize(): void;
    ngOnChanges(changes: SimpleChanges): void;
}
