import { EventEmitter } from '@angular/core';
import { CaseTypeReportRecord, CaseTypeStateReportStateInfo } from '../../models/tc-live-apps-reporting';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { LiveAppsActiveCasesReportComponent } from '../live-apps-active-cases-report/live-apps-active-cases-report.component';
import { LiveAppsActiveCasesForTypeReportComponent } from '../live-apps-active-cases-for-type-report/live-apps-active-cases-for-type-report.component';
/**
 * Home page active cases widget main component
 *
 * ![alt-text](../live-apps-active-cases-widget.png "Image")
 *
 *@example <tcla-live-apps-active-cases-widget></tcla-live-apps-active-cases-widget>
 */
export declare class LiveAppsActiveCasesWidgetComponent extends LiveAppsComponent {
    /**
     * sandboxId - this comes from claims resolver
     */
    sandboxId: number;
    /**
     * The list of LA Application IDs you want to handle
     */
    appIds: string[];
    /**
     * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
     */
    showHeader: boolean;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     */
    uiAppId: string;
    /**
     * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
     */
    maxLegendItems: number;
    /**
     * Whether to show percentages or raw case numbers on the doughnut chart
     */
    showPercentages: any;
    /**
     * ~event selectedCaseType : Case Type selected in vizualization
     * ~payload CaseTypeReportRecord : CaseTypeReportRecord object selected from component
     */
    selectedCaseType: EventEmitter<CaseTypeReportRecord>;
    /**
     * ~event selectedCaseTypeState : Case Type state selected in vizualization
     * ~payload CaseTypeStateReportStateInfo : CaseTypeStateReportStateInfo object selected from component (to drive caller to display something different (drill down))
     */
    selectedCaseTypeState: EventEmitter<CaseTypeStateReportStateInfo>;
    activeCasesComp: LiveAppsActiveCasesReportComponent;
    activeCaseTypeComp: LiveAppsActiveCasesForTypeReportComponent;
    selectedCaseTypeReport: CaseTypeReportRecord;
    handleCaseTypeSelected: (selected: CaseTypeReportRecord) => void;
    handleCaseTypeStateSelected: (selectedState: CaseTypeStateReportStateInfo) => void;
    clearSelectedCaseType: () => void;
    refresh: () => void;
}
