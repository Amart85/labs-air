import { EventEmitter, OnChanges, QueryList, SimpleChanges } from '@angular/core';
import { LiveAppsService } from '../../services/live-apps.service';
import { CaseTypeState, IconMap } from '../../models/liveappsdata';
import { HttpClient } from '@angular/common/http';
import { DomSanitizer } from '@angular/platform-browser';
import { LiveAppsStateIconComponent } from '../live-apps-state-icon/live-apps-state-icon.component';
import { LiveAppsCaseSummaryComponent } from '../live-apps-case-summary/live-apps-case-summary.component';
import { MatDialog, MatDialogRef } from '@angular/material';
import { Location } from '@angular/common';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { CaseCardConfig } from '../../models/tc-case-card-config';
import { TcCaseCardConfigService } from '../../services/tc-case-card-config.service';
import { TcDocumentService } from '../../services/tc-document.service';
/**
 * Manages summary card configuration
 *
 *@example <tcla-live-apps-application-configuration></tcla-live-apps-application-configuration>
 */
export declare class LiveAppsApplicationConfigurationComponent extends LiveAppsComponent implements OnChanges {
    private http;
    private sanitizer;
    private liveapps;
    caseCardConfigService: TcCaseCardConfigService;
    private documentsService;
    dialog: MatDialog;
    private location;
    stateIconComponents: QueryList<LiveAppsStateIconComponent>;
    caseSummaryComponent: QueryList<LiveAppsCaseSummaryComponent>;
    /**
     * The LA Application Id
     */
    appId: string;
    /**
     * The label shown above the case type in the configuration widget
     */
    appTypeLabel: string;
    /**
     * sandboxId - this comes from claims resolver
     */
    sandboxId: number;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     */
    uiAppId: string;
    /**
     * The organisation folder to store/retrieve documents
     */
    folderId: string;
    /**
     * ~event configChanged : Configuration values changed
     * ~payload CaseCardConfig : CaseCardConfig object when configuration is changed (so called can do a save with data)
     */
    configChanged: EventEmitter<CaseCardConfig>;
    errorMessage: string;
    caseCardConfig: CaseCardConfig;
    selectedStateConfig: IconMap;
    selectedCaseTypeConfig: IconMap;
    caseTypeIcon: string;
    caseTypeColor: string;
    DEFAULT_CASE_TYPE_ICON: string;
    DEFAULT_CASE_TYPE_COLOR: string;
    DEFAULT_CASE_STATE_ICON: string;
    DEFAULT_CASE_STATE_COLOR: string;
    DEFAULT_COLOR_PALETTE: string[];
    getConfigForState: (state: CaseTypeState) => IconMap;
    getConfigForCaseType: (caseTypeId: string) => IconMap;
    updateIconMap: (stateConfig: IconMap) => void;
    handleCaseTypeColorToggleChange: (changes: any) => void;
    setFill: (fill: any, stateConfig: IconMap) => void;
    setCaseTypeFill: (fill: any, stateConfig: IconMap) => void;
    selectState: (state: CaseTypeState) => void;
    openDialog(state: CaseTypeState, isCaseType: boolean): void;
    setNewStateIcon: (url: any) => void;
    setNewCaseTypeIcon: (url: any) => void;
    uploadFile(file: File, state: CaseTypeState, isStateIcon: boolean): void;
    refresh: () => void;
    constructor(http: HttpClient, sanitizer: DomSanitizer, liveapps: LiveAppsService, caseCardConfigService: TcCaseCardConfigService, documentsService: TcDocumentService, dialog: MatDialog, location: Location);
    ngOnChanges(changes: SimpleChanges): void;
}
export declare class LiveAppsStateIconUploadDialogComponent {
    dialogRef: MatDialogRef<LiveAppsStateIconUploadDialogComponent>;
    data: any;
    fileevent: EventEmitter<any>;
    fileToUpload: File;
    description: string;
    fileText: string;
    constructor(dialogRef: MatDialogRef<LiveAppsStateIconUploadDialogComponent>, data: any);
    uploadFile: () => void;
    setFileDescription(description: string): void;
    attachFile(files: FileList): void;
    onNoClick(): void;
}
