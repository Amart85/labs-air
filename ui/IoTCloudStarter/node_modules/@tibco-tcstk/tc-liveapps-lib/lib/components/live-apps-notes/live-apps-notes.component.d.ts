import { OnInit } from '@angular/core';
import { LiveAppsService } from '../../services/live-apps.service';
import { Note, ThreadList } from '../../models/liveappsdata';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { ToolbarButton } from '@tibco-tcstk/tc-core-lib';
import { TcButtonsHelperService } from '@tibco-tcstk/tc-core-lib';
/**
 * This Component allows to list, and add Notes to a Case-Instance or other Context e.g. a whole Application.
 * Any Note can have Sub-Notes to allow real collaboration.
 *
 * Note that since this component uses a virtual scroll the parent container must have height set or the notes won't appear
 *
 * ![alt-text](../live-apps-notes.png "Notes Component Image")
 *
 *@example <tcla-live-apps-notes></tcla-live-apps-notes>
 */
export declare class LiveAppsNotesComponent extends LiveAppsComponent implements OnInit {
    protected liveapps: LiveAppsService;
    protected buttonsHelper: TcButtonsHelperService;
    /**
     * itemType for notes collection
     */
    relatedItemType: string;
    /**
     * itemId for notes collection
     */
    relatedItemId: string;
    /**
     * The ID of the logged user
     */
    userId: string;
    /**
     * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
     */
    showHeader: boolean;
    notes: Note[];
    errorMessage: string;
    newNote: any;
    newNoteId: number;
    delNoteId: number;
    threads: ThreadList;
    subscribed: Boolean;
    skip: number;
    top: number;
    end: boolean;
    toolbarButtons: ToolbarButton[];
    constructor(liveapps: LiveAppsService, buttonsHelper: TcButtonsHelperService);
    refresh: () => void;
    getBatch: () => void;
    toggleReplies: (thread: any) => void;
    toggleNewReply: (thread: any) => void;
    createReply: (thread: any, replyText: any) => void;
    createThread: (noteText: any) => void;
    protected createToolbarButtons: (subscribed: any) => ToolbarButton[];
    setupNotificationButtons: (subscribed: boolean) => void;
    updateButtonDef: (updatedToolbarButtons: ToolbarButton[]) => void;
    handleToolbarButtonEvent: (id: any) => void;
    recreateButtonsForNotifications: (subscribed: any) => void;
    getNotifications: () => void;
    subscribe: () => void;
    unsubscribe: () => void;
    editNote: (thread: any) => void;
    updateNote: (note: any, updatedText: any) => void;
    deleteNote: (id: any) => void;
    ngOnInit(): void;
}
