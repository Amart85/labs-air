(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common/http'), require('@angular/material'), require('@angular/cdk/scrolling'), require('@angular/forms'), require('@angular/platform-browser/animations'), require('@angular/platform-browser'), require('@angular/flex-layout'), require('ngx-color-picker'), require('@tibco-tcstk/tc-core-lib'), require('rxjs'), require('rxjs/operators'), require('@angular/common'), require('rxjs/internal/operators/distinctUntilChanged'), require('@tibco-tcstk/tc-forms-lib'), require('@angular/router'), require('ng2-charts'), require('chartjs-plugin-datalabels')) :
    typeof define === 'function' && define.amd ? define('@tibco-tcstk/tc-liveapps-lib', ['exports', '@angular/core', '@angular/common/http', '@angular/material', '@angular/cdk/scrolling', '@angular/forms', '@angular/platform-browser/animations', '@angular/platform-browser', '@angular/flex-layout', 'ngx-color-picker', '@tibco-tcstk/tc-core-lib', 'rxjs', 'rxjs/operators', '@angular/common', 'rxjs/internal/operators/distinctUntilChanged', '@tibco-tcstk/tc-forms-lib', '@angular/router', 'ng2-charts', 'chartjs-plugin-datalabels'], factory) :
    (global = global || self, factory((global['tibco-tcstk'] = global['tibco-tcstk'] || {}, global['tibco-tcstk']['tc-liveapps-lib'] = {}), global.ng.core, global.ng.common.http, global.ng.material, global.ng.cdk.scrolling, global.ng.forms, global.ng.platformBrowser.animations, global.ng.platformBrowser, global.ng['flex-layout'], global.ngxColorPicker, global.tcCoreLib, global.rxjs, global.rxjs.operators, global.ng.common, global.rxjs['internal/operators/distinctUntilChanged'], global.tcFormsLib, global.ng.router, global.ng2Charts));
}(this, function (exports, core, http, material, scrolling, forms, animations, platformBrowser, flexLayout, ngxColorPicker, tcCoreLib, rxjs, operators, common, distinctUntilChanged, tcFormsLib, router, ng2Charts) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var FormTab = /** @class */ (function (_super) {
        __extends(FormTab, _super);
        function FormTab() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return FormTab;
    }(tcCoreLib.DeserializableClass));
    var NoteThread = /** @class */ (function () {
        function NoteThread(threadId, showReplies, showNewReply, editMode, newReply, thread, note) {
            this.threadId = threadId;
            this.showReplies = showReplies;
            this.showNewReply = showNewReply;
            this.editMode = editMode;
            this.newReply = newReply;
            this.thread = thread;
            this.note = note;
        }
        return NoteThread;
    }());
    var CaseRoute = /** @class */ (function () {
        function CaseRoute() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseRoute.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CaseRoute;
    }());
    var NotificationCollection = /** @class */ (function () {
        function NotificationCollection(collectionName, lifecycledWithType, lifecycledWithId) {
            this.collectionName = collectionName;
            this.lifecycledWithType = lifecycledWithType;
            this.lifecycledWithId = lifecycledWithId;
        }
        return NotificationCollection;
    }());
    var Notification = /** @class */ (function () {
        function Notification() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        Notification.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return Notification;
    }());
    var NotificationList = /** @class */ (function () {
        function NotificationList() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        NotificationList.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            (/** @type {?} */ (this)).notifications = [];
            Object.assign((/** @type {?} */ (this)).notifications, input);
            return (/** @type {?} */ (this));
        };
        return NotificationList;
    }());
    var ThreadList = /** @class */ (function () {
        function ThreadList() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        ThreadList.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            (/** @type {?} */ (this)).threads = [];
            Object.assign((/** @type {?} */ (this)).threads, input);
            return (/** @type {?} */ (this));
        };
        return ThreadList;
    }());
    var Metadata = /** @class */ (function () {
        function Metadata(createdBy, creationTimestamp, createdByDetails, modifiedBy, modificationTimestamp, modifiedByDetails, lock, lockType, lockedBy, msLockExpiry, msSystemTime, markedForPurge, applicationId, applicationLabel, typeId, stateColor, stateIcon, caseTypeColor, caseTypeIcon, useCaseTypeColor) {
            this.createdBy = createdBy;
            this.creationTimestamp = creationTimestamp;
            this.createdByDetails = createdByDetails;
            this.modifiedBy = modifiedBy;
            this.modificationTimestamp = modificationTimestamp;
            this.modifiedByDetails = modifiedByDetails;
            this.lock = lock;
            this.lockType = lockType;
            this.lockedBy = lockedBy;
            this.msLockExpiry = msLockExpiry;
            this.msSystemTime = msSystemTime;
            this.markedForPurge = markedForPurge;
            this.applicationId = applicationId;
            this.applicationLabel = applicationLabel;
            this.typeId = typeId;
            this.stateColor = stateColor;
            this.stateIcon = stateIcon;
            this.caseTypeColor = caseTypeColor;
            this.caseTypeIcon = caseTypeIcon;
            this.useCaseTypeColor = useCaseTypeColor;
        }
        return Metadata;
    }());
    var CaseTypeState = /** @class */ (function () {
        function CaseTypeState() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseTypeState.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CaseTypeState;
    }());
    var CaseTypeStatesListList = /** @class */ (function () {
        function CaseTypeStatesListList() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseTypeStatesListList.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            (/** @type {?} */ (this)).casetypes = [];
            Object.assign((/** @type {?} */ (this)).casetypes, input);
            return (/** @type {?} */ (this));
        };
        return CaseTypeStatesListList;
    }());
    var CaseTypeStatesList = /** @class */ (function () {
        function CaseTypeStatesList() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseTypeStatesList.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            (/** @type {?} */ (this)).states = [];
            Object.assign((/** @type {?} */ (this)).states, input);
            return (/** @type {?} */ (this));
        };
        return CaseTypeStatesList;
    }());
    var CaseInfo = /** @class */ (function () {
        function CaseInfo() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseInfo.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            (/** @type {?} */ (this)).summaryObj = (/** @type {?} */ (this)).summary ? JSON.parse((/** @type {?} */ (this)).summary) : undefined;
            (/** @type {?} */ (this)).casedataObj = (/** @type {?} */ (this)).casedata ? JSON.parse((/** @type {?} */ (this)).casedata) : undefined;
            (/** @type {?} */ (this)).untaggedCasedataObj = (/** @type {?} */ (this)).untaggedCasedata ? JSON.parse((/** @type {?} */ (this)).untaggedCasedata) : undefined;
            return (/** @type {?} */ (this));
        };
        return CaseInfo;
    }());
    var CaseInfoList = /** @class */ (function () {
        function CaseInfoList() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseInfoList.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            (/** @type {?} */ (this)).caseinfos = [];
            Object.assign((/** @type {?} */ (this)).caseinfos, input);
            (/** @type {?} */ (this)).caseinfos.forEach((/**
             * @param {?} caseinfo
             * @return {?}
             */
            function (caseinfo) {
                if (caseinfo.summary) {
                    caseinfo.summaryObj = JSON.parse(caseinfo.summary);
                }
                if (caseinfo.casedata) {
                    caseinfo.casedataObj = JSON.parse(caseinfo.casedata);
                }
            }));
            return (/** @type {?} */ (this));
        };
        return CaseInfoList;
    }());
    var CaseAttribute = /** @class */ (function () {
        function CaseAttribute() {
        }
        return CaseAttribute;
    }());
    var JsonSchema = /** @class */ (function () {
        function JsonSchema() {
        }
        return JsonSchema;
    }());
    var Process = /** @class */ (function () {
        function Process() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        Process.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return Process;
    }());
    var ProcessId = /** @class */ (function () {
        function ProcessId() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        ProcessId.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return ProcessId;
    }());
    var CaseType = /** @class */ (function () {
        function CaseType() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseType.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CaseType;
    }());
    var CaseTypesList = /** @class */ (function () {
        function CaseTypesList() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseTypesList.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            (/** @type {?} */ (this)).casetypes = [];
            Object.assign((/** @type {?} */ (this)).casetypes, input);
            return (/** @type {?} */ (this));
        };
        return CaseTypesList;
    }());
    var CaseAction = /** @class */ (function () {
        function CaseAction() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseAction.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CaseAction;
    }());
    var CaseActionsList = /** @class */ (function () {
        function CaseActionsList() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseActionsList.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            (/** @type {?} */ (this)).actions = [];
            Object.assign((/** @type {?} */ (this)).actions, input);
            return (/** @type {?} */ (this));
        };
        return CaseActionsList;
    }());
    var CaseCreator = /** @class */ (function () {
        function CaseCreator() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseCreator.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CaseCreator;
    }());
    var CaseCreatorsList = /** @class */ (function () {
        function CaseCreatorsList() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseCreatorsList.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            (/** @type {?} */ (this)).creators = [];
            Object.assign((/** @type {?} */ (this)).creators, input);
            return (/** @type {?} */ (this));
        };
        return CaseCreatorsList;
    }());
    var CaseList = /** @class */ (function () {
        function CaseList() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseList.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            (/** @type {?} */ (this)).uniqueKey = input.uniqueKey;
            (/** @type {?} */ (this)).maxSize = input.maxSize;
            (/** @type {?} */ (this)).caseRefs = [];
            Object.assign((/** @type {?} */ (this)).caseRefs, input.caseRefs);
            return (/** @type {?} */ (this));
        };
        return CaseList;
    }());
    var ApiResponseText = /** @class */ (function () {
        function ApiResponseText() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        ApiResponseText.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return ApiResponseText;
    }());
    var ApiResponseError = /** @class */ (function () {
        function ApiResponseError() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        ApiResponseError.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return ApiResponseError;
    }());
    var UserInfo = /** @class */ (function () {
        function UserInfo() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        UserInfo.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return UserInfo;
    }());
    var NotesRole = /** @class */ (function () {
        function NotesRole() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        NotesRole.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return NotesRole;
    }());
    var Thread = /** @class */ (function () {
        function Thread() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        Thread.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return Thread;
    }());
    var Note = /** @class */ (function () {
        function Note() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        Note.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return Note;
    }());
    var NotesList = /** @class */ (function () {
        function NotesList() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        NotesList.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            (/** @type {?} */ (this)).notes = [];
            Object.assign((/** @type {?} */ (this)).notes, input);
            return (/** @type {?} */ (this));
        };
        return NotesList;
    }());
    var IconMap = /** @class */ (function () {
        function IconMap(isCaseType, state, fill, icon) {
            this.isCaseType = isCaseType;
            this.state = state;
            this.fill = fill;
            this.icon = icon;
        }
        return IconMap;
    }());
    var CardConfig = /** @class */ (function () {
        function CardConfig() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CardConfig.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            // this.stateMap = [];
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CardConfig;
    }());
    var LoginContext = /** @class */ (function () {
        function LoginContext() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        LoginContext.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return LoginContext;
    }());
    var CaseSearchResults = /** @class */ (function () {
        function CaseSearchResults() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseSearchResults.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CaseSearchResults;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var Group = /** @class */ (function () {
        function Group() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        Group.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return Group;
    }());
    var Groups = /** @class */ (function () {
        function Groups() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        Groups.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return Groups;
    }());
    var Roles = /** @class */ (function () {
        function Roles() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        Roles.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return Roles;
    }());
    var RouteAccessControlConfig = /** @class */ (function () {
        function RouteAccessControlConfig() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        RouteAccessControlConfig.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return RouteAccessControlConfig;
    }());
    var RouteAccessControlConfigurationElement = /** @class */ (function () {
        function RouteAccessControlConfigurationElement() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        RouteAccessControlConfigurationElement.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return RouteAccessControlConfigurationElement;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LiveAppsService = /** @class */ (function () {
        function LiveAppsService(http, location, sharedStateService) {
            this.http = http;
            this.location = location;
            this.sharedStateService = sharedStateService;
            // these are 'per session' caches. They won't time out unless explicitly cleared or browser is refreshed
            this.claimsCacheMap = new Map();
            this.userInfoCacheMap = new Map();
            this.caseTypesCacheMap = new Map();
            this.iconSVGTextCacheMap = new Map();
        }
        /**
         * @return {?}
         */
        LiveAppsService.prototype.getSandboxes = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var url = '/organisation/v1/sandboxes';
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} sandboxList
             * @return {?}
             */
            function (sandboxList) { return new tcCoreLib.SandboxList().deserialize(sandboxList); })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} appIds
         * @param {?} top
         * @param {?} useCache
         * @return {?}
         */
        LiveAppsService.prototype.getApplications = /**
         * @param {?} sandboxId
         * @param {?} appIds
         * @param {?} top
         * @param {?} useCache
         * @return {?}
         */
        function (sandboxId, appIds, top, useCache) {
            /** @type {?} */
            var select = 'b';
            /** @type {?} */
            var url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
            if (appIds && appIds.length > 0) {
                url = url + '&$filter=applicationId in(' + appIds.toString() + ') and isCase eq TRUE';
            }
            // note: since this is cached it will require a reload to see new apps
            /** @type {?} */
            var headers;
            if (useCache) {
                headers = new http.HttpHeaders().set('cacheResponse', 'true');
            }
            else {
                headers = new http.HttpHeaders();
            }
            return this.http.get(url, { headers: headers })
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} casetypes
             * @return {?}
             */
            function (casetypes) {
                if (appIds && appIds.length > 0) {
                    // This is to workaround a bug where non case type types are returned when > 1 appId
                    /** @type {?} */
                    var tmpCaseTypes = new CaseTypesList().deserialize(casetypes);
                    /** @type {?} */
                    var filteredCaseTypes_1 = new CaseTypesList().deserialize({ casetypes: [] });
                    tmpCaseTypes.casetypes.forEach((/**
                     * @param {?} ctype
                     * @return {?}
                     */
                    function (ctype) {
                        if (ctype.id === '1') {
                            filteredCaseTypes_1.casetypes.push(ctype);
                        }
                    }));
                    return filteredCaseTypes_1;
                }
                else {
                    return new CaseTypesList().deserialize(casetypes);
                }
            })));
        };
        /**
         * @return {?}
         */
        LiveAppsService.prototype.getClaims = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var url = '/organisation/v1/claims';
            /** @type {?} */
            var headers = new http.HttpHeaders().set('cacheResponse', 'true');
            return this.http.get(url, { headers: headers })
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} claim
             * @return {?}
             */
            function (claim) { return new tcCoreLib.Claim().deserialize(claim); })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} skip
         * @param {?} top
         * @return {?}
         */
        LiveAppsService.prototype.getCases = /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} skip
         * @param {?} top
         * @return {?}
         */
        function (sandboxId, appId, typeId, skip, top) {
            /** @type {?} */
            var url = '/case/v1/cases' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '
                + appId + ' and typeId eq ' + typeId + '&$skip=' + skip + '&$top=' + top;
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} caseinfos
             * @return {?}
             */
            function (caseinfos) { return new CaseInfoList().deserialize(caseinfos); })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @return {?}
         */
        LiveAppsService.prototype.getCasesCount = /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @return {?}
         */
        function (sandboxId, appId, typeId) {
            /** @type {?} */
            var url = '/case/v1/cases' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '
                + appId + ' and typeId eq ' + typeId + '&$count=true';
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} casecount
             * @return {?}
             */
            function (casecount) { return casecount.toString(); })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} caseRef
         * @return {?}
         */
        LiveAppsService.prototype.getCaseByRef = /**
         * @param {?} sandboxId
         * @param {?} caseRef
         * @return {?}
         */
        function (sandboxId, caseRef) {
            /** @type {?} */
            var url = '/case/v1/cases/' + caseRef
                + '?$sandbox=' + sandboxId;
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} caseinfo
             * @return {?}
             */
            function (caseinfo) { return new CaseInfo().deserialize(caseinfo); })));
        };
        /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @return {?}
         */
        LiveAppsService.prototype.getCase = /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @return {?}
         */
        function (caseRef, sandboxId, appId, typeId) {
            /** @type {?} */
            var url = '/case/v1/cases/' + caseRef + '/' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '
                + appId + ' and typeId eq ' + typeId + '&$select=uc, m';
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} caseinfo
             * @return {?}
             */
            function (caseinfo) { return new CaseInfo().deserialize(caseinfo); })));
        };
        /**
         * @param {?} terms
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} skip
         * @param {?} top
         * @param {?} stateId
         * @return {?}
         */
        LiveAppsService.prototype.caseSearch = /**
         * @param {?} terms
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} skip
         * @param {?} top
         * @param {?} stateId
         * @return {?}
         */
        function (terms, sandboxId, appId, typeId, skip, top, stateId) {
            var _this = this;
            return terms
                .pipe(operators.debounceTime(500), operators.distinctUntilChanged(), operators.switchMap((/**
             * @param {?} term
             * @return {?}
             */
            function (term) { return _this.caseSearchEntries(term, sandboxId, appId, typeId, false, skip, top, stateId); })));
        };
        /**
         * @param {?} term
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} force
         * @param {?} skip
         * @param {?} top
         * @param {?} stateId
         * @return {?}
         */
        LiveAppsService.prototype.caseSearchEntries = /**
         * @param {?} term
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} force
         * @param {?} skip
         * @param {?} top
         * @param {?} stateId
         * @return {?}
         */
        function (term, sandboxId, appId, typeId, force, skip, top, stateId) {
            /** @type {?} */
            var url = '/case/v1/cases' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '
                + appId + ' and typeId eq ' + typeId;
            if (stateId) {
                url = url + ' and stateId eq ' + stateId;
            }
            url = url + '&$skip=' + skip + '&$top=' + top
                + '&$select=cr';
            if (term || (!term && !force)) {
                url = url + '&$search=' + term;
            }
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} caseinfos
             * @return {?}
             */
            function (caseinfos) {
                /** @type {?} */
                var caserefs = [];
                /** @type {?} */
                var caseinfolist = new CaseInfoList().deserialize(caseinfos);
                caseinfolist.caseinfos.forEach((/**
                 * @param {?} caseinfo
                 * @return {?}
                 */
                function (caseinfo) {
                    caserefs.push(caseinfo.caseReference);
                }));
                return new CaseSearchResults().deserialize({ caserefs: caserefs, searchString: term });
            })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} top
         * @return {?}
         */
        LiveAppsService.prototype.getCaseTypes = /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} top
         * @return {?}
         */
        function (sandboxId, appId, top) {
            /** @type {?} */
            var select = 'b,s,sa,a';
            /** @type {?} */
            var url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
            if (appId != null) {
                url = url + '&$filter=applicationId eq ' + appId;
            }
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} casetypes
             * @return {?}
             */
            function (casetypes) { return new CaseTypesList().deserialize(casetypes); })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} top
         * @return {?}
         */
        LiveAppsService.prototype.getCaseTypeSchema = /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} top
         * @return {?}
         */
        function (sandboxId, appId, top) {
            // https://eu.liveapps.cloud.tibco.com/case/v1/types?$sandbox=25&&$filter=applicationName eq 'Customer Complaint'&$select=b,js,c,ac
            /** @type {?} */
            var select = 'b,js,c,ac,a';
            /** @type {?} */
            var url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
            if (appId != null) {
                url = url + '&$filter=applicationId eq ' + appId;
            }
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} casetypes
             * @return {?}
             */
            function (casetypes) { return new CaseTypesList().deserialize(casetypes); })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} top
         * @return {?}
         */
        LiveAppsService.prototype.getCaseTypeStates = /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} top
         * @return {?}
         */
        function (sandboxId, appId, top) {
            /** @type {?} */
            var select = 's';
            /** @type {?} */
            var url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
            if (appId != null) {
                url = url + '&$filter=applicationId eq ' + appId;
            }
            /** @type {?} */
            var headers = new http.HttpHeaders().set('cacheResponse', 'true');
            return this.http.get(url, { headers: headers })
                // return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} casetypestates
             * @return {?}
             */
            function (casetypestates) {
                // const x = new CaseTypeStatesList().deserialize(casetypestates[0].states);
                // return x;
                // const x = new CaseTypeStatesList().deserialize(casetypestates[0].states);
                // return x;
                /** @type {?} */
                var casetypelist = new CaseTypeStatesListList().deserialize(casetypestates);
                /** @type {?} */
                var states;
                casetypelist.casetypes.forEach((/**
                 * @param {?} casetype
                 * @return {?}
                 */
                function (casetype) {
                    if (casetype.states !== undefined) {
                        states = new CaseTypeStatesList().deserialize(casetype.states);
                    }
                }));
                return states;
            })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} top
         * @return {?}
         */
        LiveAppsService.prototype.getCaseTypeBasicInfo = /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} top
         * @return {?}
         */
        function (sandboxId, appId, typeId, top) {
            /** @type {?} */
            var select = 'b';
            /** @type {?} */
            var url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
            if (appId != null) {
                url = url + '&$filter=applicationId eq ' + appId;
            }
            if (!this.caseTypesCacheMap.get(url)) {
                /** @type {?} */
                var cacheEntry$ = this.getCaseTypeBasicInfoCached(url, typeId)
                    .pipe(operators.shareReplay(1));
                this.caseTypesCacheMap.set(url, cacheEntry$);
            }
            return this.caseTypesCacheMap.get(url);
        };
        /**
         * @private
         * @param {?} url
         * @param {?} typeId
         * @return {?}
         */
        LiveAppsService.prototype.getCaseTypeBasicInfoCached = /**
         * @private
         * @param {?} url
         * @param {?} typeId
         * @return {?}
         */
        function (url, typeId) {
            /** @type {?} */
            var headers = new http.HttpHeaders().set('cacheResponse', 'true');
            return this.http.get(url, { headers: headers })
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} casetypes
             * @return {?}
             */
            function (casetypes) {
                /** @type {?} */
                var caseTypesList = new CaseTypesList().deserialize(casetypes);
                /** @type {?} */
                var requestedType;
                caseTypesList.casetypes.forEach((/**
                 * @param {?} casetype
                 * @return {?}
                 */
                function (casetype) {
                    if (casetype.id === typeId) {
                        requestedType = casetype;
                    }
                }));
                return requestedType;
            })));
        };
        /**
         * @param {?} url
         * @return {?}
         */
        LiveAppsService.prototype.clearFromIconSVGTextCache = /**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            if (this.iconSVGTextCacheMap.get(url)) {
                this.iconSVGTextCacheMap.delete(url);
            }
        };
        /**
         * @param {?} url
         * @return {?}
         */
        LiveAppsService.prototype.getIconSVGText = /**
         * @param {?} url
         * @return {?}
         */
        function (url) {
            // todo: revisit the base href issue
            if (url.substr(0, 2) === '//') {
                url = url.substr(1, url.length - 1);
            }
            if (!this.iconSVGTextCacheMap.get(url)) {
                // const fixedUrl = window.location.protocol + '//' + window.location.host  + url;
                /** @type {?} */
                var cacheEntry$ = this.getIconSVGTextCache(url)
                    .pipe(operators.shareReplay(1));
                this.iconSVGTextCacheMap.set(url, cacheEntry$);
            }
            return this.iconSVGTextCacheMap.get(url);
        };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        LiveAppsService.prototype.getIconSVGTextCache = /**
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            /** @type {?} */
            var headers = new http.HttpHeaders().set('cacheResponse', 'true');
            return this.http.get(url, { responseType: 'text', headers: headers })
                .pipe(operators.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                /** @type {?} */
                var svgContents = val.toString();
                return svgContents;
            })));
        };
        /**
         * @private
         * @param {?} casesContent
         * @param {?} caseRef
         * @param {?} toggle
         * @return {?}
         */
        LiveAppsService.prototype.updateCasesRecord = /**
         * @private
         * @param {?} casesContent
         * @param {?} caseRef
         * @param {?} toggle
         * @return {?}
         */
        function (casesContent, caseRef, toggle) {
            /** @type {?} */
            var sharedStateContent = new tcCoreLib.SharedStateContent().deserialize(casesContent);
            /** @type {?} */
            var casesRec = JSON.parse(sharedStateContent.json);
            /** @type {?} */
            var existing = false;
            // check if already exists
            if (caseRef === '-1') {
                // clear list
                casesRec.caseRefs.length = 0;
            }
            else {
                if (casesRec.caseRefs.indexOf(caseRef) !== -1) {
                    // remove it if it is already in the array
                    casesRec.caseRefs.splice(casesRec.caseRefs.indexOf(caseRef), 1);
                    existing = true;
                }
                if (!toggle || existing === false) {
                    // only add it if we are not in toggle mode (favorites) or if the caseRef didnt already exist in the list
                    // now add case to front of array
                    casesRec.caseRefs.unshift(caseRef);
                    // check if we are > max size
                    if (casesRec.maxSize !== -1 && casesRec.caseRefs.length > casesRec.maxSize) {
                        // remove oldest entry
                        casesRec.caseRefs.pop();
                    }
                }
            }
            sharedStateContent.json = tcCoreLib.TcCoreCommonFunctions.escapeString(JSON.stringify(casesRec));
            return sharedStateContent;
        };
        /**
         * @private
         * @param {?} caseRef
         * @param {?} maxSize
         * @return {?}
         */
        LiveAppsService.prototype.newCasesRecord = /**
         * @private
         * @param {?} caseRef
         * @param {?} maxSize
         * @return {?}
         */
        function (caseRef, maxSize) {
            /** @type {?} */
            var casesRec = new CaseList();
            casesRec.maxSize = maxSize;
            if (caseRef === '-1') {
                casesRec.caseRefs = [];
            }
            else {
                casesRec.caseRefs = [caseRef];
            }
            casesRec.uniqueKey = 'caseReference';
            /** @type {?} */
            var sharedStateContent = new tcCoreLib.SharedStateContent();
            sharedStateContent.json = tcCoreLib.TcCoreCommonFunctions.escapeString(JSON.stringify(casesRec));
            return sharedStateContent;
        };
        /**
         * @param {?} uiAppId
         * @param {?} sandboxId
         * @return {?}
         */
        LiveAppsService.prototype.getRecentCases = /**
         * @param {?} uiAppId
         * @param {?} sandboxId
         * @return {?}
         */
        function (uiAppId, sandboxId) {
            /** @type {?} */
            var ssName = uiAppId + '.recentcases.tibcolabs.client.context.PRIVATE';
            return this.getSSCasesList(ssName, sandboxId);
        };
        /**
         * @private
         * @param {?} ssName
         * @param {?} sandboxId
         * @return {?}
         */
        LiveAppsService.prototype.getSSCasesList = /**
         * @private
         * @param {?} ssName
         * @param {?} sandboxId
         * @return {?}
         */
        function (ssName, sandboxId) {
            return this.sharedStateService.getSharedState(ssName, 'PRIVATE', false, false)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} sharedStateList
             * @return {?}
             */
            function (sharedStateList) {
                if (sharedStateList.sharedStateEntries.length > 0) {
                    return new CaseList().deserialize(JSON.parse(sharedStateList.sharedStateEntries[0].content.json));
                }
                else {
                    return new CaseList();
                }
            })));
        };
        /**
         * @param {?} caseRef
         * @param {?} uiAppId
         * @param {?} sandboxId
         * @return {?}
         */
        LiveAppsService.prototype.unsetRecentCase = /**
         * @param {?} caseRef
         * @param {?} uiAppId
         * @param {?} sandboxId
         * @return {?}
         */
        function (caseRef, uiAppId, sandboxId) {
            // NOTE: Use '-1' as caseRef to clear recent cases list
            /** @type {?} */
            var ssName = uiAppId + '.recentcases.tibcolabs.client.context.PRIVATE';
            this.setCasesRecord(ssName, caseRef, uiAppId, sandboxId, 10, true);
        };
        /**
         * @param {?} caseRef
         * @param {?} uiAppId
         * @param {?} sandboxId
         * @return {?}
         */
        LiveAppsService.prototype.setRecentCase = /**
         * @param {?} caseRef
         * @param {?} uiAppId
         * @param {?} sandboxId
         * @return {?}
         */
        function (caseRef, uiAppId, sandboxId) {
            // NOTE: Use '-1' as caseRef to clear recent cases list
            /** @type {?} */
            var ssName = uiAppId + '.recentcases.tibcolabs.client.context.PRIVATE';
            this.setCasesRecord(ssName, caseRef, uiAppId, sandboxId, 10, false);
        };
        /**
         * @private
         * @param {?} ssName
         * @param {?} caseRef
         * @param {?} uiAppId
         * @param {?} sandboxId
         * @param {?} maxSize
         * @param {?} toggle
         * @return {?}
         */
        LiveAppsService.prototype.setCasesRecord = /**
         * @private
         * @param {?} ssName
         * @param {?} caseRef
         * @param {?} uiAppId
         * @param {?} sandboxId
         * @param {?} maxSize
         * @param {?} toggle
         * @return {?}
         */
        function (ssName, caseRef, uiAppId, sandboxId, maxSize, toggle) {
            var _this = this;
            // get cases list from shared state if any
            // update cases data removing oldest if > maxsize
            // set shared state
            /** @type {?} */
            var casesEntry;
            this.sharedStateService.getSharedState(ssName, 'PRIVATE', false, false)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} sharedStateList
             * @return {?}
             */
            function (sharedStateList) {
                casesEntry = sharedStateList.sharedStateEntries[0] || undefined;
                /** @type {?} */
                var content;
                if (casesEntry) {
                    content = _this.updateCasesRecord(casesEntry.content, caseRef, toggle);
                    casesEntry.content = content;
                    sharedStateList.sharedStateEntries[0] = casesEntry;
                    _this.sharedStateService.updateSharedState(sharedStateList.sharedStateEntries).subscribe();
                }
                else {
                    content = _this.newCasesRecord(caseRef, maxSize);
                    _this.sharedStateService.createSharedState(ssName, 'PRIVATE', '', sandboxId, undefined, undefined, undefined, content).subscribe();
                }
                return casesEntry;
            }))).subscribe(null, (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return console.log('Unable to set recent cases: ' + error); }));
        };
        /**
         * @param {?} uiAppId
         * @param {?} sandboxId
         * @return {?}
         */
        LiveAppsService.prototype.getFavoriteCases = /**
         * @param {?} uiAppId
         * @param {?} sandboxId
         * @return {?}
         */
        function (uiAppId, sandboxId) {
            /** @type {?} */
            var ssName = uiAppId + '.favoritecases.tibcolabs.client.context.PRIVATE';
            return this.sharedStateService.getSharedState(ssName, 'PRIVATE', false, false)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} sharedStateList
             * @return {?}
             */
            function (sharedStateList) {
                if (sharedStateList.sharedStateEntries.length > 0) {
                    return new CaseList().deserialize(JSON.parse(sharedStateList.sharedStateEntries[0].content.json));
                }
                else {
                    return new CaseList();
                }
            })));
        };
        /**
         * @param {?} caseRef
         * @param {?} uiAppId
         * @param {?} sandboxId
         * @return {?}
         */
        LiveAppsService.prototype.setFavoriteCase = /**
         * @param {?} caseRef
         * @param {?} uiAppId
         * @param {?} sandboxId
         * @return {?}
         */
        function (caseRef, uiAppId, sandboxId) {
            // NOTE: Use '-1' as caseRef to clear recent cases list
            /** @type {?} */
            var ssName = uiAppId + '.favoritecases.tibcolabs.client.context.PRIVATE';
            this.setCasesRecord(ssName, caseRef, uiAppId, sandboxId, -1, true);
        };
        /**
         * @param {?} caseRef
         * @param {?} uiAppId
         * @param {?} sandboxId
         * @return {?}
         */
        LiveAppsService.prototype.isFavoriteCase = /**
         * @param {?} caseRef
         * @param {?} uiAppId
         * @param {?} sandboxId
         * @return {?}
         */
        function (caseRef, uiAppId, sandboxId) {
            /** @type {?} */
            var ssName = uiAppId + '.favoritecases.tibcolabs.client.context.PRIVATE';
            return this.getSSCasesList(ssName, sandboxId)
                .pipe(operators.map((/**
             * @param {?} caselist
             * @return {?}
             */
            function (caselist) {
                return caselist.caseRefs ? (caselist.caseRefs.indexOf(caseRef) !== -1) : false;
            })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} processId
         * @param {?} caseReference
         * @param {?} data
         * @return {?}
         */
        LiveAppsService.prototype.runProcess = /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} processId
         * @param {?} caseReference
         * @param {?} data
         * @return {?}
         */
        function (sandboxId, appId, processId, caseReference, data) {
            /** @type {?} */
            var url = '/process/v1/processes';
            // convert data to an escaped JSON string
            /** @type {?} */
            var dataJson;
            if (data) {
                dataJson = tcCoreLib.TcCoreCommonFunctions.escapeString(JSON.stringify(data));
            }
            else {
                dataJson = tcCoreLib.TcCoreCommonFunctions.escapeString(JSON.stringify({}));
            }
            /** @type {?} */
            var body = {
                'id': processId,
                'sandboxId': sandboxId,
                'applicationId': appId,
                'data': dataJson
            };
            if (caseReference) {
                body['caseReference'] = caseReference;
            }
            /** @type {?} */
            var bodyStr = JSON.stringify(body);
            /** @type {?} */
            var headers = new http.HttpHeaders()
                .set('Content-Type', 'application/json');
            return this.http.post(url, bodyStr, { headers: headers })
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return response; })));
        };
        // Since we call get userinfo a lot - and the data doesn't tend to change - I will cache it for the session
        // Since we call get userinfo a lot - and the data doesn't tend to change - I will cache it for the session
        /**
         * @param {?} userId
         * @return {?}
         */
        LiveAppsService.prototype.getUserInfo = 
        // Since we call get userinfo a lot - and the data doesn't tend to change - I will cache it for the session
        /**
         * @param {?} userId
         * @return {?}
         */
        function (userId) {
            /** @type {?} */
            var url = '/organisation/v1/users/' + userId;
            if (!this.userInfoCacheMap.get(userId)) {
                /** @type {?} */
                var cacheEntry$ = this.getUserCached(url)
                    .pipe(operators.shareReplay(1));
                this.userInfoCacheMap.set(userId, cacheEntry$);
            }
            return this.userInfoCacheMap.get(userId);
        };
        /**
         * @private
         * @param {?} url
         * @return {?}
         */
        LiveAppsService.prototype.getUserCached = /**
         * @private
         * @param {?} url
         * @return {?}
         */
        function (url) {
            /** @type {?} */
            var headers = new http.HttpHeaders().set('cacheResponse', 'true');
            return this.http.get(url, { headers: headers })
                .pipe(operators.map((/**
             * @param {?} userinfo
             * @return {?}
             */
            function (userinfo) { return new UserInfo().deserialize(userinfo); })));
        };
        /* notes service */
        /* notes service */
        /**
         * @param {?} relatedItemType
         * @param {?} itemTypeId
         * @param {?} skip
         * @param {?} top
         * @return {?}
         */
        LiveAppsService.prototype.getThreads = /* notes service */
        /**
         * @param {?} relatedItemType
         * @param {?} itemTypeId
         * @param {?} skip
         * @param {?} top
         * @return {?}
         */
        function (relatedItemType, itemTypeId, skip, top) {
            // https://liveapps.tenant-integration.tcie.pro/collaboration/notes?$relatedItemCollection=CASE_APP_15441&$orderby=createdDate%20ASC
            /** @type {?} */
            var url = '/collaboration/v1/notes?$relatedItemCollection=' + relatedItemType + '_' + itemTypeId
                + '&$orderby=createdDate desc'
                + '&$top=' + top + '&$skip=' + skip;
            return this.http.get(url)
                .pipe(operators.map((/**
             * @param {?} notes
             * @return {?}
             */
            function (notes) {
                /** @type {?} */
                var returnedNotes = new NotesList().deserialize(notes);
                /** @type {?} */
                var threadList = new ThreadList();
                threadList.threads = [];
                // create threads
                returnedNotes.notes.forEach((/**
                 * @param {?} note
                 * @return {?}
                 */
                function (note) {
                    if (note.level === 1) {
                        /** @type {?} */
                        var noteThread_1 = new NoteThread(note.thread.id, false, false, false, undefined, [], note);
                        // get other threads for this id
                        returnedNotes.notes.forEach((/**
                         * @param {?} threadNote
                         * @return {?}
                         */
                        function (threadNote) {
                            if (threadNote.level > 1 && threadNote.threadId === note.thread.id) {
                                // add to the thread
                                noteThread_1.thread.push(threadNote);
                            }
                        }));
                        threadList.threads.push(noteThread_1);
                    }
                }));
                return threadList;
            })));
        };
        /**
         * @param {?} collectionIds
         * @return {?}
         */
        LiveAppsService.prototype.getNotesForCollections = /**
         * @param {?} collectionIds
         * @return {?}
         */
        function (collectionIds) {
            if (collectionIds) {
                /** @type {?} */
                var url = '/collaboration/v1/notes?$relatedItemCollection=' + collectionIds +
                    '&$orderby=createdDate ASC';
                return this.http.get(url)
                    .pipe(operators.map((/**
                 * @param {?} notes
                 * @return {?}
                 */
                function (notes) { return new NotesList().deserialize(notes); })));
            }
        };
        /**
         * @return {?}
         */
        LiveAppsService.prototype.deleteAllNotes = /**
         * @return {?}
         */
        function () {
        };
        /**
         * @param {?} note
         * @param {?} noteId
         * @return {?}
         */
        LiveAppsService.prototype.updateNote = /**
         * @param {?} note
         * @param {?} noteId
         * @return {?}
         */
        function (note, noteId) {
            /** @type {?} */
            var url = '/collaboration/v1/notes/' + noteId;
            /** @type {?} */
            var body = note;
            /** @type {?} */
            var bodyStr = JSON.stringify(body);
            /** @type {?} */
            var headers = new http.HttpHeaders()
                .set('Content-Type', 'application/json');
            return this.http.put(url, bodyStr, { headers: headers })
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) { return new Note().deserialize(result); })));
        };
        /**
         * @param {?} relatedItemType
         * @param {?} uiAppSource
         * @param {?} relatedItemId
         * @param {?} notificationLabel
         * @param {?} notificationUrl
         * @param {?} title
         * @param {?} noteText
         * @return {?}
         */
        LiveAppsService.prototype.createNote = /**
         * @param {?} relatedItemType
         * @param {?} uiAppSource
         * @param {?} relatedItemId
         * @param {?} notificationLabel
         * @param {?} notificationUrl
         * @param {?} title
         * @param {?} noteText
         * @return {?}
         */
        function (relatedItemType, uiAppSource, relatedItemId, notificationLabel, notificationUrl, title, noteText) {
            /** @type {?} */
            var url = '/collaboration/v1/notes';
            /** @type {?} */
            var note = new Note().deserialize({
                attributes: [],
                notificationLabel: notificationLabel,
                notificationUrl: notificationUrl,
                text: noteText,
                title: title
            });
            /** @type {?} */
            var body = {
                note: note,
                relatedItemCollection: [
                    (relatedItemType + '_' + relatedItemId)
                ],
                relatedItemId: relatedItemId,
                relatedItemType: uiAppSource,
                roles: undefined
            };
            /** @type {?} */
            var bodyStr = JSON.stringify(body);
            /** @type {?} */
            var headers = new http.HttpHeaders()
                .set('Content-Type', 'application/json');
            return this.http.post(url, bodyStr, { headers: headers })
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) { return Number(result); })));
        };
        /**
         * @param {?} noteId
         * @return {?}
         */
        LiveAppsService.prototype.getNote = /**
         * @param {?} noteId
         * @return {?}
         */
        function (noteId) {
            /** @type {?} */
            var url = '/collaboration/v1/notes/' + noteId;
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} note
             * @return {?}
             */
            function (note) { return new Note().deserialize(note); })));
        };
        /**
         * @param {?} relatedItemType
         * @param {?} relatedItemId
         * @param {?} threadId
         * @return {?}
         */
        LiveAppsService.prototype.getThread = /**
         * @param {?} relatedItemType
         * @param {?} relatedItemId
         * @param {?} threadId
         * @return {?}
         */
        function (relatedItemType, relatedItemId, threadId) {
            /** @type {?} */
            var url = '/collaboration/v1/notes/?$relatedItemType=' + relatedItemType
                + '&relatedItemId=' + relatedItemId
                + '&filter=threadId=' + threadId
                + '&orderby=createdDate ASC';
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} notes
             * @return {?}
             */
            function (notes) { return new NotesList().deserialize(notes); })));
        };
        /**
         * @param {?} originalNote
         * @param {?} reply
         * @param {?} noteId
         * @return {?}
         */
        LiveAppsService.prototype.createReplyNote = /**
         * @param {?} originalNote
         * @param {?} reply
         * @param {?} noteId
         * @return {?}
         */
        function (originalNote, reply, noteId) {
            /** @type {?} */
            var url = '/collaboration/v1/notes/' + noteId;
            /** @type {?} */
            var body = {
                notificationLabel: originalNote.notificationLabel,
                notificationUrl: originalNote.notificationUrl,
                text: reply
            };
            /** @type {?} */
            var bodyStr = JSON.stringify(body);
            /** @type {?} */
            var headers = new http.HttpHeaders()
                .set('Content-Type', 'application/json');
            return this.http.post(url, bodyStr, { headers: headers })
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return Number(value); })));
        };
        /**
         * @param {?} relatedItemType
         * @param {?} relatedTypeId
         * @return {?}
         */
        LiveAppsService.prototype.subscribeToNotes = /**
         * @param {?} relatedItemType
         * @param {?} relatedTypeId
         * @return {?}
         */
        function (relatedItemType, relatedTypeId) {
            /** @type {?} */
            var url = '/collaboration/v1/notifications';
            /** @type {?} */
            var body = {
                topicId: undefined,
                threadId: undefined,
                notifyCollection: {
                    collectionName: relatedItemType + '_' + relatedTypeId,
                    lifecycledWithType: 'RT_CASE',
                    lifecycledWithId: true
                }
            };
            /** @type {?} */
            var bodyStr = JSON.stringify(body);
            /** @type {?} */
            var headers = new http.HttpHeaders()
                .set('Content-Type', 'application/json');
            return this.http.post(url, bodyStr, { headers: headers })
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })));
        };
        /**
         * @param {?} relatedItemType
         * @param {?} relatedTypeId
         * @param {?} userId
         * @return {?}
         */
        LiveAppsService.prototype.unsubscribeToNotes = /**
         * @param {?} relatedItemType
         * @param {?} relatedTypeId
         * @param {?} userId
         * @return {?}
         */
        function (relatedItemType, relatedTypeId, userId) {
            /** @type {?} */
            var url = '/collaboration/v1/notifications?$filter=collectionName=';
            url = url + '\'' + relatedItemType + '_' + relatedTypeId + '\' and entityId=' + userId;
            return this.http.delete(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })));
        };
        /**
         * @param {?} relatedItemType
         * @param {?} relatedTypeId
         * @param {?} userId
         * @return {?}
         */
        LiveAppsService.prototype.getNotifications = /**
         * @param {?} relatedItemType
         * @param {?} relatedTypeId
         * @param {?} userId
         * @return {?}
         */
        function (relatedItemType, relatedTypeId, userId) {
            /** @type {?} */
            var url = '/collaboration/v1/notifications?$filter=collectionName=\'' + relatedItemType + '_' + relatedTypeId
                + '\' and entityId=' + userId;
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return new NotificationList().deserialize(value); })));
        };
        /**
         * @param {?} noteId
         * @return {?}
         */
        LiveAppsService.prototype.deleteNote = /**
         * @param {?} noteId
         * @return {?}
         */
        function (noteId) {
            /** @type {?} */
            var url = '/collaboration/v1/notes/' + noteId;
            return this.http.delete(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })));
        };
        /* end notes service */
        /* end notes service */
        /**
         * @param {?} sandboxId
         * @param {?} top
         * @param {?} useCache
         * @return {?}
         */
        LiveAppsService.prototype.getGroups = /* end notes service */
        /**
         * @param {?} sandboxId
         * @param {?} top
         * @param {?} useCache
         * @return {?}
         */
        function (sandboxId, top, useCache) {
            /** @type {?} */
            var url = '/organisation/v1/groups?$sandbox=' + sandboxId + '&$top=' + top;
            /** @type {?} */
            var headers;
            if (useCache) {
                headers = new http.HttpHeaders().set('cacheResponse', 'true');
            }
            else {
                headers = new http.HttpHeaders();
            }
            return this.http.get(url, { headers: headers })
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} groups
             * @return {?}
             */
            function (groups) { return new Groups().deserialize({ groups: groups }); })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} userId
         * @param {?} top
         * @param {?} useCache
         * @return {?}
         */
        LiveAppsService.prototype.getGroupMemberships = /**
         * @param {?} sandboxId
         * @param {?} userId
         * @param {?} top
         * @param {?} useCache
         * @return {?}
         */
        function (sandboxId, userId, top, useCache) {
            /** @type {?} */
            var url = '/organisation/v1/users/' + userId + '/groups' + '?$sandbox=' + sandboxId + '&$top=' + top;
            /** @type {?} */
            var headers;
            if (useCache) {
                headers = new http.HttpHeaders().set('cacheResponse', 'true');
            }
            else {
                headers = new http.HttpHeaders();
            }
            return this.http.get(url, { headers: headers })
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} groups
             * @return {?}
             */
            function (groups) { return new Groups().deserialize({ groups: groups }); })));
        };
        LiveAppsService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        LiveAppsService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: common.Location },
            { type: tcCoreLib.TcSharedStateService }
        ]; };
        /** @nocollapse */ LiveAppsService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function LiveAppsService_Factory() { return new LiveAppsService(core.ɵɵinject(http.HttpClient), core.ɵɵinject(common.Location), core.ɵɵinject(tcCoreLib.TcSharedStateService)); }, token: LiveAppsService, providedIn: "root" });
        return LiveAppsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Generic component extended by others
     *
     * \@example <tcla-live-apps-component></tcla-live-apps-component>
     */
    var LiveAppsComponent = /** @class */ (function () {
        function LiveAppsComponent() {
            var _this = this;
            // use the _destroyed$/takeUntil pattern to avoid memory leaks if a response was never received
            this._destroyed$ = new rxjs.Subject();
            this.resize = (/**
             * @return {?}
             */
            function () {
                // explicit size changes
                if (_this.observer) {
                    setTimeout((/**
                     * @param {?} handler
                     * @return {?}
                     */
                    function (handler) {
                        _this.observer.next(_this.componentDiv.nativeElement.offsetWidth);
                    }));
                }
                _this.componentChildDivs.forEach((/**
                 * @param {?} child
                 * @return {?}
                 */
                function (child) {
                    if (child.resize) {
                        child.resize();
                    }
                }));
            });
        }
        /**
         * @param {?} event
         * @return {?}
         */
        LiveAppsComponent.prototype.onResize = /**
         * @param {?} event
         * @return {?}
         */
        function (event) {
            var _this = this;
            // window resize changes
            if (this.observer) {
                setTimeout((/**
                 * @param {?} handler
                 * @return {?}
                 */
                function (handler) {
                    _this.observer.next(_this.componentDiv.nativeElement.offsetWidth);
                }));
            }
        };
        /**
         * @return {?}
         */
        LiveAppsComponent.prototype.setupWidthObserver = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.containerChanges$ = new rxjs.Observable((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                if (!_this.observer) {
                    _this.observer = observer;
                }
                // send initial value - need async so any flex items have resized
                setTimeout((/**
                 * @param {?} handler
                 * @return {?}
                 */
                function (handler) {
                    observer.next(_this.componentDiv.nativeElement.offsetWidth);
                }));
            })).pipe(distinctUntilChanged.distinctUntilChanged(), operators.map((/**
             * @param {?} width
             * @return {?}
             */
            function (width) {
                if (_this.widget && width) {
                    _this.widget.width = width;
                }
                return _this.widget;
            })));
        };
        /**
         * @return {?}
         */
        LiveAppsComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            // components that extend this can use the widget.width object to detect size of container by subscribing to containerChanges$
            // we detect div size changes using two methods:
            // 1: if window resizes
            // 2: if a manual resize of the element is triggered - this.resize() - (example - from a button in UI)
            this.setupWidthObserver();
        };
        /**
         * @return {?}
         */
        LiveAppsComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            // on destroy
            this._destroyed$.next();
        };
        /**
         * @return {?}
         */
        LiveAppsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.widget = new tcCoreLib.TcComponent();
        };
        LiveAppsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-component',
                        template: "<p>\n  New Live Apps Component\n</p>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsComponent.ctorParameters = function () { return []; };
        LiveAppsComponent.propDecorators = {
            componentDiv: [{ type: core.ViewChild, args: ['componentDiv', { static: false },] }],
            componentChildDivs: [{ type: core.ViewChildren, args: ['componentChildDiv',] }],
            onResize: [{ type: core.HostListener, args: ['window:resize', ['$event'],] }]
        };
        return LiveAppsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Lists live apps applications in drop down list allowing selection of app
     *
     * ![alt-text](../live-apps-applications.png "Image")
     *
     * \@example <tcla-live-apps-applications></tcla-live-apps-applications>
     */
    var LiveAppsApplicationsComponent = /** @class */ (function (_super) {
        __extends(LiveAppsApplicationsComponent, _super);
        function LiveAppsApplicationsComponent(liveapps) {
            var _this = _super.call(this) || this;
            _this.liveapps = liveapps;
            /**
             * Application selected from dropdown (output)
             */
            _this.selectedApp = _this.selectedApp ? _this.selectedApp : new CaseType();
            /**
             * ~event selection : Value selected in child component
             * ~payload CaseType : type varies.  but is when something is selected in a drop down it is passed back to the caller
             */
            _this.selection = new core.EventEmitter();
            _this.applications = new CaseTypesList();
            _this.changeAppSelection = (/**
             * @param {?} appSelected
             * @return {?}
             */
            function (appSelected) {
                _this.selectedApp = _this.applications.casetypes.find((/**
                 * @param {?} casetype
                 * @return {?}
                 */
                function (casetype) {
                    return casetype.applicationId === appSelected.applicationId;
                }));
            });
            _this.selectApplication = (/**
             * @param {?} selectionEvent
             * @return {?}
             */
            function (selectionEvent) {
                _this.selectedApp = selectionEvent.source.value;
                _this.selection.emit(selectionEvent.source.value);
            });
            _this.refresh = (/**
             * @param {?} bypassCache
             * @return {?}
             */
            function (bypassCache) {
                _this.liveapps.getApplications(_this.sandboxId, _this.appIds, 100, bypassCache)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} applicationList
                 * @return {?}
                 */
                function (applicationList) {
                    _this.applications = applicationList;
                    if (_this.selectedApp.applicationId) {
                        _this.selectedApp = applicationList.casetypes.find((/**
                         * @param {?} casetype
                         * @return {?}
                         */
                        function (casetype) {
                            return casetype.applicationId === _this.selectedApp.applicationId;
                        }));
                        // this.selection.emit(this.selectedApp);
                    }
                    else 
                    // select first as default
                    if (applicationList.casetypes.length > 0 && _this.selectFirstApp) {
                        _this.selectedApp = applicationList.casetypes[0];
                        _this.selection.emit(applicationList.casetypes[0]);
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error retrieving applications: ' + error.error.errorMsg; }));
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsApplicationsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.refresh(false);
        };
        LiveAppsApplicationsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-applications',
                        template: "<div class=\"tcs-application-selector\" fxFlex style=\"margin-left: 10px;\">\n    <mat-label></mat-label>\n    <mat-select *ngIf=\"selectedApp\" class=\"tcs-application-selector-option\" [disableOptionCentering]=\"true\" placeholder=\"Application\" [(value)]=\"selectedApp\" (selectionChange)=\"selectApplication($event)\" matTooltip=\"{{selectedApp.applicationName}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\n      <mat-option *ngFor=\"let application of applications.casetypes\" [value]=\"application\">\n        {{application.label | ellipsis : 20}}\n      </mat-option>\n    </mat-select>\n</div>\n\n\n\n<!--div *ngIf=\"errorMessage\">{{errorMessage}}</div>\n<div *ngIf=\"applications\" class=\"la-applications-div\" fxLayoutAlign=\"space-around start\">\n  <div class=\"la-applications-card\" fxLayout=\"column\">\n    <h3>Select application:</h3>\n    <div class=\"la-application-selection\">\n      <div class=\"la-available-sub\" (click)=\"selectApplication(application)\" *ngFor=\"let application of applications.casetypes\">\n        <div class=\"la-application-name\">{{application.applicationName}}</div>\n        <div fxLayout=\"column\" class=\"la-application-selection-dtl\" fxLayoutAlign=\"start start\">\n          <div>Application Id: {{application.applicationId}}</div>\n          <div>Type Id: {{application.id}}</div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div-->\n",
                        styles: ["::ng-deep .tcs-application-selector .mat-form-field-underline{display:none}:host ::ng-deep .mat-select-value{min-width:100px;max-width:100%;width:auto}.la-applications-div{margin-top:50px}.la-applications-card{width:500px}.la-available-sub:hover{box-shadow:0 7px 14px 0 rgba(0,0,0,.3);-webkit-transition:.2s ease-in-out;transition:.2s ease-in-out;cursor:pointer}.la-available-sub{border:1px solid #dedede;border-radius:4px;box-shadow:0 1px 4px 0 rgba(0,0,0,.1);padding:20px 31px 31px;margin-top:5px;margin-bottom:5px}.la-application-name{font-size:18px;font-weight:700}:host ::ng-deep .tcs-application-selector-option .mat-select-value span{font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;color:#0081cb}:host ::ng-deep .tcs-application-selector-option .mat-select-arrow-wrapper div{color:#0081cb}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsApplicationsComponent.ctorParameters = function () { return [
            { type: LiveAppsService }
        ]; };
        LiveAppsApplicationsComponent.propDecorators = {
            sandboxId: [{ type: core.Input }],
            appIds: [{ type: core.Input }],
            selectFirstApp: [{ type: core.Input }],
            selectedApp: [{ type: core.Input }],
            selection: [{ type: core.Output }]
        };
        return LiveAppsApplicationsComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Selection of app + searching for cases
     *
     *  ![alt-text](../live-apps-case-search.png "Image")
     *
     * \@example <tcla-live-apps-case-search></tcla-live-apps-case-search>
     */
    var LiveAppsCaseSearchComponent = /** @class */ (function (_super) {
        __extends(LiveAppsCaseSearchComponent, _super);
        function LiveAppsCaseSearchComponent(liveapps) {
            var _this = _super.call(this) || this;
            _this.liveapps = liveapps;
            /**
             * ~event foundRefs : Search completed (caseRefs returned)
             * ~payload CaseSearchResults : caseRefs matching the search (so parent can display them in case list component)
             */
            _this.foundRefs = new core.EventEmitter();
            _this.forcedSearch = false;
            // case type selector
            _this.selectedApp = new CaseType();
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                if (_this.applicationsComponent) {
                    _this.applicationsComponent.refresh(true);
                }
            });
            _this.setCaseType = (/**
             * @param {?} caseType
             * @return {?}
             */
            function (caseType) {
                _this.selectedApp = caseType;
                _this.doSearch();
                _this.applicationsComponent.changeAppSelection(caseType);
            });
            _this.setSelectedStateId = (/**
             * @param {?} stateId
             * @param {?} stateLabel
             * @return {?}
             */
            function (stateId, stateLabel) {
                _this.selectedStateId = stateId;
                _this.selectedStateLabel = stateLabel;
                // not currently supported to limit search by stateId
                // this.doSearch(stateId);
            });
            // handle search app selection
            _this.handleSearchAppSelection = (/**
             * @param {?} application
             * @return {?}
             */
            function (application) {
                _this.selectedApp = application;
                _this.doSearch();
            });
            // clear search results
            _this.clearResults = (/**
             * @return {?}
             */
            function () {
                _this.searchString = '';
                _this.selectedStateId = undefined;
                _this.selectedStateLabel = undefined;
                _this.doSearch();
            });
            _this.forceSearch = (/**
             * @return {?}
             */
            function () {
                _this.forcedSearch = true;
                _this.liveapps.caseSearchEntries(_this.searchBox.nativeElement.value, _this.sandboxId, _this.selectedApp.applicationId, _this.selectedApp.id, true, 0, 1000, null).subscribe((/**
                 * @param {?} results
                 * @return {?}
                 */
                function (results) {
                    _this.foundRefs.emit(results);
                }));
            });
            _this.doSearch = (/**
             * @param {?=} stateId
             * @return {?}
             */
            function (stateId) {
                _this.forcedSearch = false;
                _this.searchBox.nativeElement.value = '';
                /** @type {?} */
                var result = new CaseSearchResults().deserialize({ caserefs: [], searchString: '' });
                _this.foundRefs.emit(result);
                _this.searchTerm$ = new rxjs.Subject();
                _this.searchTerm$.subscribe((/**
                 * @param {?} next
                 * @return {?}
                 */
                function (next) {
                    _this.searchString = next;
                    return next;
                }));
                _this.searchValue = _this.searchTerm$.asObservable();
                if (_this.selectedApp.applicationId && _this.selectedApp.id && _this.sandboxId) {
                    /** @type {?} */
                    var skip = 0;
                    /** @type {?} */
                    var top_1 = 1000;
                    // Note: The API limits searches to 1000 items
                    // The service is configured to optimize performance by only returning case references at this stage
                    // The case details will only be loaded when the item is rendered (for example in the case-list component)
                    // Any case list component should use cdk virtual scroll to ensure 1000 case details are not loaded in one go
                    // (from the API or to the DOM)
                    _this.liveapps.caseSearch(_this.searchTerm$, _this.sandboxId, _this.selectedApp.applicationId, _this.selectedApp.id, skip, top_1, stateId ? stateId : null)
                        .subscribe((/**
                     * @param {?} results
                     * @return {?}
                     */
                    function (results) {
                        _this.foundRefs.emit(results);
                    }));
                }
            });
            return _this;
        }
        LiveAppsCaseSearchComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-search',
                        template: "<div fxLayout=\"row\" fxLayout=\"center center\" style=\"max-width: 700px; width: 100%;\">\n  <div class=\"tcs-search-box\" fxlayout=\"row\" fxLayoutAlign=\"space-around center\" fxFlex>\n    <tcla-live-apps-applications fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-search-application-selector\" [appIds]=\"appIds\" [sandboxId]=\"sandboxId\" [selectFirstApp]=\"true\" (selection)=\"handleSearchAppSelection($event)\"></tcla-live-apps-applications>\n    <div class=\"tcs-search-input-container\" fxFlex>\n      <!-- free search by state with state filter currently not supported -->\n      <!--div class=\"tcs-state-filter-marker\" *ngIf=\"selectedStateLabel\" fxLayout=\"row\">[<div class=\"tcs-type-filter-text-highlight\">{{selectedStateLabel}}</div>]&nbsp;</div-->\n      <input #searchBox class=\"tcs-search-input\" placeholder=\"{{ selectedApp.applicationName ? 'Search within ' + selectedApp.applicationName + ' cases' : 'Select a case type to search cases' }}\" (keyup)=\"searchTerm$.next($event.target.value)\" [disabled]=\"!selectedApp.applicationId\" fxFlex>\n      <div fxLayoutAlign=\"center end\">\n        <mat-icon *ngIf=\"forcedSearch || searchString\" class=\"tcs-icon tcs-close-icon\" svgIcon=\"tcs-close-icon\" (click)=\"clearResults()\"></mat-icon>\n        <mat-icon *ngIf=\"!forcedSearch && !searchString\" class=\"tcs-icon tcs-search-icon\" svgIcon=\"tcs-search-icon\" (click)=\"forceSearch()\"></mat-icon>\n      </div>\n    </div>\n  </div>\n</div>\n",
                        styles: [".tcs-search-box{width:100%;height:44px;box-shadow:inset 0 1px 3px 0 rgba(0,0,0,.5);background-color:#fff}.tcs-search-input{height:24px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;border:none}.tcs-search-input:focus{outline:0}.tcs-search-input::-webkit-input-placeholder{opacity:.38}.tcs-search-input::-moz-placeholder{opacity:.38}.tcs-search-input::-ms-input-placeholder{opacity:.38}.tcs-search-input::placeholder{opacity:.38}.tcs-search-input-container{margin-left:20px;margin-right:20px}.tcs-search-application-selector{width:200px;margin-left:5px;margin-right:5px;background-color:#eee;padding-left:5px;padding-right:5px;padding-top:4px;height:35px}:host ::ng-deep .tcs-search-icon:hover .svg-content{fill:#0081cb}:host ::ng-deep .tcs-close-icon:hover .svg-content{fill:#0081cb}.tcs-close-icon:hover,.tcs-search-icon:hover{cursor:pointer}.tcs-type-filter-text{font-family:Source Sans Pro;font-size:12px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-type-filter-text-highlight{color:#ff7800}.tcs-state-filter-marker{margin-top:2px}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCaseSearchComponent.ctorParameters = function () { return [
            { type: LiveAppsService }
        ]; };
        LiveAppsCaseSearchComponent.propDecorators = {
            searchBox: [{ type: core.ViewChild, args: ['searchBox', { static: false },] }],
            sandboxId: [{ type: core.Input }],
            appIds: [{ type: core.Input }],
            foundRefs: [{ type: core.Output }],
            applicationsComponent: [{ type: core.ViewChild, args: [LiveAppsApplicationsComponent, { static: false },] }]
        };
        return LiveAppsCaseSearchComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Renders list of cases for caserefs
     *
     * ![alt-text](../live-apps-case-list.png "Image")
     *
     * \@example <tcla-live-apps-case-list></tcla-live-apps-case-list>
     */
    var LiveAppsCaseListComponent = /** @class */ (function (_super) {
        __extends(LiveAppsCaseListComponent, _super);
        function LiveAppsCaseListComponent(liveapps) {
            var _this = _super.call(this) || this;
            _this.liveapps = liveapps;
            /**
             * ~event clickCase : Case clicked
             * ~payload CaseRoute : CaseRoute object output when case is clicked so calling component can route accordingly - ie. route to case
             */
            _this.clickCase = new core.EventEmitter();
            /**
             * ~event clearMatches : Clear Matches button clicked
             *
             */
            _this.clearMatches = new core.EventEmitter();
            _this.clickCaseAction = (/**
             * @param {?} caseRoute
             * @return {?}
             */
            function (caseRoute) {
                _this.clickCase.emit(caseRoute);
            });
            _this.clearMatchingCases = (/**
             * @return {?}
             */
            function () {
                _this.clearMatches.emit();
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsCaseListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        LiveAppsCaseListComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-list',
                        template: "<div class=\"tcs-case-list-box\" fxLayout=\"column\" fxFill>\n  <div class=\"tcs-case-list-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    <div fxFlex fxLayoutAlign=\"start center\">\n      <mat-icon class=\"tcs-icon tcs-caselist-icon\" svgIcon=\"tcs-caselist-icon\"></mat-icon>\n      <div class=\"tcs-case-list-header-text\">{{headerText}}</div>\n      <div fxFlex class=\"tcs-type-filter-text\" fxLayoutAlign=\"end center\">\n        <div *ngIf=\"headerMessage\" fxLayout=\"row\">\n          [\n          <div class=\"tcs-type-filter-text-highlight\">{{headerMessage}}</div>\n          ]\n        </div>\n        <mat-icon (click)=\"clearMatchingCases()\" class=\"tcs-icon tcs-icon-active tcs-clear-cases-icon\" svgIcon=\"tcs-clear-icon\" matTooltip=\"Clear Matching Cases\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\"></mat-icon>\n      </div>\n    </div>\n  </div>\n\n  <div style=\"height: 100%;\" fxLayout=\"row\">\n    <cdk-virtual-scroll-viewport fxFlex class=\"tcs-case-list-flow-list\" itemSize=\"56\">\n      <div class=\"tcs-case-list-item-box\" *cdkVirtualFor=\"let caseRef of caseRefs; templateCacheSize: 0; let index = index\">\n        <tcla-live-apps-case-summary #componentChildDiv [uiAppId]=\"uiAppId\" [typeBar]=\"true\" [borderCard]=\"false\" [displayType]=\"displayType\" [sandboxId]=\"sandboxId\" [caseRef]=\"caseRef\" [highlight]=\"highlight\" (clickCase)=\"clickCaseAction($event)\"></tcla-live-apps-case-summary>\n        <div class=\"tcs-case-summary-line\"></div>\n      </div>\n    </cdk-virtual-scroll-viewport>\n  </div>\n\n</div>\n",
                        styles: [".tcs-case-list-box{width:100%;height:100%;border-radius:3px;box-shadow:0 2px 8px 0 #dedede;background-color:#fff}.tcs-case-list-header{min-height:40px;height:40px;max-height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-case-list-header-text{font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-case-list-flow-list{margin:24px;overflow-y:auto}:host ::ng-deep .tcs-case-list-flow-list.cdk-virtual-scroll-orientation-vertical .cdk-virtual-scroll-content-wrapper{width:100%}.tcs-case-list-item-box{margin:3px 5px 10px}.tcs-icon.tcs-icon-active:hover{cursor:pointer}:host ::ng-deep .tcs-icon.tcs-icon-active:hover .svg-content{fill:#0081cb}.tcs-case-summary-line{padding:0;margin:4px 5px 0;border-bottom:1.1px solid #f4f4f4}.tcs-type-filter-text{font-family:Source Sans Pro;font-size:12px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-type-filter-text-highlight{color:#ff7800}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCaseListComponent.ctorParameters = function () { return [
            { type: LiveAppsService }
        ]; };
        LiveAppsCaseListComponent.propDecorators = {
            headerText: [{ type: core.Input }],
            displayType: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }],
            uiAppId: [{ type: core.Input }],
            caseRefs: [{ type: core.Input }],
            highlight: [{ type: core.Input }],
            headerMessage: [{ type: core.Input }],
            clickCase: [{ type: core.Output }],
            clearMatches: [{ type: core.Output }]
        };
        return LiveAppsCaseListComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CaseCardConfig = /** @class */ (function () {
        function CaseCardConfig() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseCardConfig.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CaseCardConfig;
    }());
    var StateColorMapRec = /** @class */ (function () {
        function StateColorMapRec() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        StateColorMapRec.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return StateColorMapRec;
    }());
    var StateColorMap = /** @class */ (function () {
        function StateColorMap() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        StateColorMap.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return StateColorMap;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DEFAULT_COLORS = [
        '#3E94C0', '#49B3D3', '#76C6CF', '#A9DACD', '#DCECC9',
        '#FFAB40', '#FFD180', '#FFE0B2', '#FFF3E0', '#81D4FA',
        '#B3E5FC', '#8AF2F2', '#91A3AE', '#CED8DD', '#EBEFF1',
        '#6A1B9A', '#AD1457', '#EC407A', '#C4469E', '#BA68C8',
        '#8C9EFF', '#FF8A80', '#546F7A', '#263237'
    ];
    /** @type {?} */
    var DEFAULT_TYPE_COLOR = '#8197c0';
    /** @type {?} */
    var DEFAULT_STATE_COLOR = '#8197c0';
    /** @type {?} */
    var GENERIC_STATE_ICON_SVG = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 14 14">\n' +
        '    <path fill="<DYNAMICFILL>" fill-rule="nonzero" d="M.045 1.154h13.91v2.133H.045V1.154zM.8 4.75h12.364v8.19c0 .596-.487 1.083-1.082 1.083h-10.2A1.085 1.085 0 0 1 .8 12.94V4.75zm7.978 2.447V5.776H5.222v1.421h3.556z"/>\n' +
        '</svg>\n';
    /** @type {?} */
    var GENERIC_CASETYPE_ICON_SVG = '<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 48 48">\n' +
        '    <path fill="<DYNAMICFILL>" fill-rule="evenodd" d="M42 42H6c-1.103 0-2-.898-2-2V26.61c4.43 2.623 10.208 3.96 15.729 4.422v1.504c0 1.326.948 2.4 2.118 2.4h4.764c1.17 0 2.118-1.074 2.118-2.4V31.04c6.16-.503 11.505-2.008 15.271-4.264v13.223c0 1.103-.897 2-2 2zM6 15.995h36c1.103 0 2 .898 2 2v3.583c-2.798 2.727-8.447 4.664-15.271 5.268v-1.511c0-1.326-.948-2.4-2.117-2.4h-4.765c-1.17 0-2.118 1.074-2.118 2.4v1.51c-6.651-.6-12.41-2.518-15.729-5.348v-3.501c0-1.103.897-2 2-2zm10.655-8.89c0-.063.023-.098.016-.106l14.944-.011s.04.033.04.117v4.89h-15v-4.89zM42 11.996h-6.345v-4.89C35.655 4.842 33.861 3 31.657 3H16.653c-2.204 0-3.998 1.842-3.998 4.106v4.89H6c-3.308 0-6 2.692-6 6V40c0 3.31 2.692 6 6 6h36c3.309 0 6-2.69 6-6V17.997c0-3.31-2.691-6.001-6-6.001z"/>\n' +
        '</svg>\n';
    var TcCaseCardConfigService = /** @class */ (function () {
        function TcCaseCardConfigService(http, liveAppsService, sharedStateService, location) {
            this.http = http;
            this.liveAppsService = liveAppsService;
            this.sharedStateService = sharedStateService;
            this.location = location;
        }
        /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} uiAppId
         * @return {?}
         */
        TcCaseCardConfigService.prototype.createCardConfig = /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} uiAppId
         * @return {?}
         */
        function (sandboxId, appId, uiAppId) {
            /** @type {?} */
            var ssName = uiAppId + '.' + appId + '.stateconfig.tibcolabs.client.context.PUBLIC';
            /** @type {?} */
            var content = new tcCoreLib.SharedStateContent();
            content.json = tcCoreLib.TcCoreCommonFunctions.escapeString(JSON.stringify({}));
            return this.sharedStateService.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)
                .pipe(operators.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                return value;
            })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} uiAppId
         * @param {?} config
         * @param {?} id
         * @return {?}
         */
        TcCaseCardConfigService.prototype.updateCardConfig = /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} uiAppId
         * @param {?} config
         * @param {?} id
         * @return {?}
         */
        function (sandboxId, appId, uiAppId, config, id) {
            /** @type {?} */
            var ssName = uiAppId + '.' + appId + '.stateconfig.tibcolabs.client.context.PUBLIC';
            /** @type {?} */
            var content = new tcCoreLib.SharedStateContent();
            content.json = tcCoreLib.TcCoreCommonFunctions.escapeString(JSON.stringify(config));
            /** @type {?} */
            var entry = new tcCoreLib.SharedStateEntry();
            entry.content = content;
            entry.sandboxId = sandboxId;
            entry.name = ssName;
            entry.type = 'PUBLIC';
            entry.id = id;
            /** @type {?} */
            var ssList = new tcCoreLib.SharedStateList();
            ssList.sharedStateEntries = [];
            ssList.sharedStateEntries.push(entry);
            return this.sharedStateService.updateSharedState(ssList.sharedStateEntries)
                .pipe(operators.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                return new CardConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));
            })));
        };
        /**
         * @param {?} states
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} uiAppId
         * @param {?} caseTypeId
         * @param {?} defaultCaseTypeColor
         * @param {?} defaultCaseTypeIcon
         * @param {?} defaultStateColor
         * @param {?} defaultStateIcon
         * @return {?}
         */
        TcCaseCardConfigService.prototype.createNewCardConfig = /**
         * @param {?} states
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} uiAppId
         * @param {?} caseTypeId
         * @param {?} defaultCaseTypeColor
         * @param {?} defaultCaseTypeIcon
         * @param {?} defaultStateColor
         * @param {?} defaultStateIcon
         * @return {?}
         */
        function (states, sandboxId, appId, uiAppId, caseTypeId, defaultCaseTypeColor, defaultCaseTypeIcon, defaultStateColor, defaultStateIcon) {
            var _this = this;
            // create new config and return it
            /** @type {?} */
            var newConfig$ = this.createCardConfig(sandboxId, appId, uiAppId);
            /** @type {?} */
            var updatedConfig$ = newConfig$.pipe(operators.mergeMap((/**
             * @param {?} id
             * @return {?}
             */
            function (id) {
                /** @type {?} */
                var stateMap = [];
                // one record for the case type icon config
                stateMap.push(new IconMap(true, caseTypeId, defaultCaseTypeColor, defaultCaseTypeIcon));
                states.forEach((/**
                 * @param {?} state
                 * @return {?}
                 */
                function (state) {
                    stateMap.push(new IconMap(false, state.value, defaultStateColor, defaultStateIcon));
                }));
                /** @type {?} */
                var newCardConfig = new CardConfig().deserialize({ id: id, useCaseTypeColor: true, stateMap: stateMap });
                return _this.updateCardConfig(sandboxId, appId, uiAppId, newCardConfig, id).pipe(operators.tap((/**
                 * @param {?} config
                 * @return {?}
                 */
                function (config) {
                    // trigger update of the cache
                    _this.getCardConfig(uiAppId, appId, true, true);
                })), operators.map((/**
                 * @param {?} newcard
                 * @return {?}
                 */
                function (newcard) {
                    return new CaseCardConfig().deserialize({ states: states, cardConfig: newcard });
                })));
            })));
            return updatedConfig$;
        };
        /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} uiAppId
         * @param {?} caseTypeId
         * @param {?} defaultCaseTypeColor
         * @param {?} defaultCaseTypeIcon
         * @param {?} defaultStateColor
         * @param {?} defaultStateIcon
         * @return {?}
         */
        TcCaseCardConfigService.prototype.getCaseCardConfig = /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} uiAppId
         * @param {?} caseTypeId
         * @param {?} defaultCaseTypeColor
         * @param {?} defaultCaseTypeIcon
         * @param {?} defaultStateColor
         * @param {?} defaultStateIcon
         * @return {?}
         */
        function (sandboxId, appId, uiAppId, caseTypeId, defaultCaseTypeColor, defaultCaseTypeIcon, defaultStateColor, defaultStateIcon) {
            var _this = this;
            /** @type {?} */
            var states$ = this.liveAppsService.getCaseTypeStates(sandboxId, appId, 100);
            /** @type {?} */
            var cardConfig$ = this.getCardConfig(uiAppId, appId, true, false).pipe(operators.map((/**
             * @param {?} config
             * @return {?}
             */
            function (config) {
                return config;
            })));
            return states$.pipe(operators.mergeMap((/**
             * @param {?} states
             * @return {?}
             */
            function (states) {
                return cardConfig$.pipe(operators.mergeMap((/**
                 * @param {?} config
                 * @return {?}
                 */
                function (config) {
                    if (config) {
                        /** @type {?} */
                        var cardConfig = new CaseCardConfig().deserialize({ states: states.states, cardConfig: config });
                        return rxjs.of(cardConfig);
                    }
                    else {
                        return _this.createNewCardConfig(states.states, sandboxId, appId, uiAppId, caseTypeId, defaultCaseTypeColor, defaultCaseTypeIcon, defaultStateColor, defaultStateIcon).pipe(operators.map((/**
                         * @param {?} newCardConfig
                         * @return {?}
                         */
                        function (newCardConfig) {
                            return newCardConfig;
                        })));
                    }
                })));
            })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} uiAppId
         * @param {?} updatedConfig
         * @return {?}
         */
        TcCaseCardConfigService.prototype.updateCaseCardConfig = /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} uiAppId
         * @param {?} updatedConfig
         * @return {?}
         */
        function (sandboxId, appId, uiAppId, updatedConfig) {
            var _this = this;
            return this.updateCardConfig(sandboxId, appId, uiAppId, updatedConfig.cardConfig, updatedConfig.cardConfig.id).pipe(operators.map((/**
             * @param {?} cardconfig
             * @return {?}
             */
            function (cardconfig) {
                updatedConfig.cardConfig = cardconfig;
                // remember to flush cache
                _this.getCardConfig(uiAppId, appId, true, true).subscribe();
                return updatedConfig;
            })));
        };
        /**
         * @param {?} uiAppId
         * @param {?} appId
         * @param {?} useCache
         * @param {?} flushCache
         * @return {?}
         */
        TcCaseCardConfigService.prototype.getCardConfig = /**
         * @param {?} uiAppId
         * @param {?} appId
         * @param {?} useCache
         * @param {?} flushCache
         * @return {?}
         */
        function (uiAppId, appId, useCache, flushCache) {
            /** @type {?} */
            var ssName = uiAppId + '.' + appId + '.stateconfig.tibcolabs.client.context.PUBLIC';
            return this.sharedStateService.getSharedState(ssName, 'PUBLIC', useCache, flushCache).pipe(operators.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value.sharedStateEntries.length > 0) {
                    /** @type {?} */
                    var ssresult = new CardConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));
                    ssresult.id = value.sharedStateEntries[0].id;
                    return ssresult;
                }
                else {
                    return undefined;
                }
            })));
        };
        /**
         * @param {?} appId
         * @param {?} uiAppId
         * @return {?}
         */
        TcCaseCardConfigService.prototype.getStateColorInfo = /**
         * @param {?} appId
         * @param {?} uiAppId
         * @return {?}
         */
        function (appId, uiAppId) {
            return this.getCardConfig(uiAppId, appId, true, false).pipe(operators.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                if (val) {
                    /** @type {?} */
                    var config = val;
                    /** @type {?} */
                    var stateColorMap_1 = new StateColorMap();
                    stateColorMap_1.stateColorRecs = [];
                    config.stateMap.forEach((/**
                     * @param {?} stateMapRec
                     * @return {?}
                     */
                    function (stateMapRec) {
                        /** @type {?} */
                        var stateColorMapRec = new StateColorMapRec().deserialize({ state: stateMapRec.state, color: stateMapRec.fill });
                        if (stateMapRec.isCaseType) {
                            stateColorMap_1.caseTypeColor = stateMapRec.fill;
                        }
                        stateColorMap_1.stateColorRecs.push(stateColorMapRec);
                    }));
                    return stateColorMap_1;
                }
                else {
                    return new StateColorMap();
                }
            })));
        };
        /**
         * @param {?} appId
         * @param {?} uiAppId
         * @param {?} state
         * @return {?}
         */
        TcCaseCardConfigService.prototype.getColorForState = /**
         * @param {?} appId
         * @param {?} uiAppId
         * @param {?} state
         * @return {?}
         */
        function (appId, uiAppId, state) {
            return this.getCardConfig(uiAppId, appId, true, false).pipe(operators.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                /** @type {?} */
                var stateMap = val.stateMap.find((/**
                 * @param {?} stateRec
                 * @return {?}
                 */
                function (stateRec) {
                    return stateRec.state === state;
                }));
                return (stateMap ? stateMap.fill : undefined);
            })));
        };
        /**
         * @param {?} caseinfo
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} uiAppId
         * @return {?}
         */
        TcCaseCardConfigService.prototype.parseCaseInfo = /**
         * @param {?} caseinfo
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} uiAppId
         * @return {?}
         */
        function (caseinfo, sandboxId, appId, typeId, uiAppId) {
            // in order to get all the info we need we actually need to call up to 4 observables in parallel
            /** @type {?} */
            var caseInfo$ = this.liveAppsService.getCaseTypeBasicInfo(sandboxId, appId, typeId, 100).pipe(operators.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return caseinfo.metadata.applicationLabel = val.label; })));
            /** @type {?} */
            var cardConfig$ = this.getCardConfig(uiAppId, appId, true, false).pipe(operators.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                /** @type {?} */
                var stateId = caseinfo.summaryObj.state;
                /** @type {?} */
                var stateConfig;
                if (val !== undefined && val.stateMap) {
                    val.stateMap.forEach((/**
                     * @param {?} state
                     * @return {?}
                     */
                    function (state) {
                        if (state.state === stateId) {
                            stateConfig = state;
                            caseinfo.metadata.stateColor = stateConfig.fill;
                            caseinfo.metadata.stateIcon = stateConfig.icon;
                        }
                        if (state.isCaseType) {
                            stateConfig = state;
                            caseinfo.metadata.caseTypeColor = stateConfig.fill;
                            caseinfo.metadata.caseTypeIcon = stateConfig.icon;
                        }
                        caseinfo.metadata.useCaseTypeColor = val.useCaseTypeColor ? val.useCaseTypeColor : false;
                    }));
                }
                // defaults
                if (!caseinfo.metadata.stateColor) {
                    caseinfo.metadata.stateColor = DEFAULT_STATE_COLOR;
                }
                if (!caseinfo.metadata.stateIcon) {
                    caseinfo.metadata.stateIcon = 'assets/icons/ic-generic-state.svg';
                }
                if (!caseinfo.metadata.caseTypeColor) {
                    caseinfo.metadata.caseTypeColor = DEFAULT_TYPE_COLOR;
                }
                if (!caseinfo.metadata.caseTypeIcon) {
                    caseinfo.metadata.caseTypeIcon = 'assets/icons/ic-generic-casetype.svg';
                }
            })));
            /** @type {?} */
            var forkJoinArray = [caseInfo$, cardConfig$];
            /** @type {?} */
            var creatorInfo$;
            /** @type {?} */
            var modifiedInfo$;
            if (caseinfo.metadata.createdBy) {
                creatorInfo$ = this.liveAppsService.getUserInfo(caseinfo.metadata.createdBy).pipe(operators.map((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) { return caseinfo.metadata.createdByDetails = val ? val : new UserInfo(); })));
                forkJoinArray.push(creatorInfo$);
            }
            else {
                caseinfo.metadata.createdByDetails = new UserInfo();
            }
            if (caseinfo.metadata.modifiedBy) {
                modifiedInfo$ = this.liveAppsService.getUserInfo(caseinfo.metadata.modifiedBy).pipe(operators.map((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) { return caseinfo.metadata.modifiedByDetails = val ? val : new UserInfo(); })));
                forkJoinArray.push(modifiedInfo$);
            }
            else {
                caseinfo.metadata.modifiedByDetails = new UserInfo();
            }
            // call all the observables at once and return the Observable to the parsed CaseInfo
            return rxjs.forkJoin(forkJoinArray).pipe(operators.map((/**
             * @param {?} resultArr
             * @return {?}
             */
            function (resultArr) {
                return caseinfo;
            })));
        };
        /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} uiAppId
         * @return {?}
         */
        TcCaseCardConfigService.prototype.getCaseWithSummary = /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} uiAppId
         * @return {?}
         */
        function (caseRef, sandboxId, uiAppId) {
            var _this = this;
            // get the base caseinfo from the API, then call parseCaseInfo to create an Observable with all the extra data we need
            /** @type {?} */
            var url = '/case/v1/cases/' + caseRef + '/' + '?$sandbox=' + sandboxId + '&$select=cr, uc, m, s';
            return this.http.get(url).pipe(operators.mergeMap((/**
             * @param {?} caseinfo
             * @return {?}
             */
            function (caseinfo) {
                /** @type {?} */
                var caseinf = new CaseInfo().deserialize(caseinfo);
                if (caseinf.caseReference === undefined) {
                    // case is likely no longer visible to this user so handle as deleted
                    return rxjs.of(new CaseInfo().deserialize({ deleted: true }));
                }
                return _this.parseCaseInfo(caseinf, sandboxId, caseinf.metadata.applicationId, caseinf.metadata.typeId, uiAppId);
            })), operators.catchError((/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                if (err.error.errorCode === 'CM_CASEREF_NOTEXIST') {
                    // case deleted
                    return rxjs.of(new CaseInfo().deserialize({ deleted: true }));
                }
                return rxjs.throwError(err);
            })));
        };
        TcCaseCardConfigService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TcCaseCardConfigService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: LiveAppsService },
            { type: tcCoreLib.TcSharedStateService },
            { type: common.Location }
        ]; };
        /** @nocollapse */ TcCaseCardConfigService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function TcCaseCardConfigService_Factory() { return new TcCaseCardConfigService(core.ɵɵinject(http.HttpClient), core.ɵɵinject(LiveAppsService), core.ɵɵinject(tcCoreLib.TcSharedStateService), core.ɵɵinject(common.Location)); }, token: TcCaseCardConfigService, providedIn: "root" });
        return TcCaseCardConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * renders a single icon for a state
     *
     * ![alt-text](../live-apps-state-icon.png "")
     *
     * \@example <tcla-live-apps-state-icon></tcla-live-apps-state-icon>
     */
    var LiveAppsStateIconComponent = /** @class */ (function (_super) {
        __extends(LiveAppsStateIconComponent, _super);
        function LiveAppsStateIconComponent(sanitizer, http, liveapps, location) {
            var _this = _super.call(this) || this;
            _this.sanitizer = sanitizer;
            _this.http = http;
            _this.liveapps = liveapps;
            _this.location = location;
            _this.svgcontents = undefined;
            _this.refillSVG = (/**
             * @param {?} fill
             * @return {?}
             */
            function (fill) {
                /** @type {?} */
                var updatedsvg = this.svgcontents.replace('fill="<DYNAMICFILL>"', 'fill="' + fill + '"');
                /** @type {?} */
                var newval = this.sanitizer.bypassSecurityTrustHtml(updatedsvg);
                this.iconSVG = newval;
            });
            _this.refresh = (/**
             * @param {?} icon
             * @param {?} fill
             * @return {?}
             */
            function (icon, fill) {
                /** @type {?} */
                var url;
                if (icon && icon !== 'assets/icons/ic-generic-casetype.svg' && icon !== 'assets/icons/ic-generic-state.svg') {
                    if (icon.slice(0, 13) === 'assets/icons/') {
                        // if icon is in assets folder we need to prepare the Url
                        url = tcCoreLib.TcCoreCommonFunctions.prepareUrlForStaticResource(_this.location, icon);
                    }
                    else {
                        url = '/' + icon;
                    }
                    _this.liveapps.getIconSVGText(url)
                        .pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                        .subscribe((/**
                     * @param {?} val
                     * @return {?}
                     */
                    function (val) {
                        _this.svgcontents = val;
                        val = val.toString().replace('fill="<DYNAMICFILL>"', 'fill="' + fill + '"');
                        /** @type {?} */
                        var newval = _this.sanitizer.bypassSecurityTrustHtml(val);
                        _this.iconSVG = newval;
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        console.log('Unable to retrieve icon: ' + error.errorMsg);
                    }));
                }
                else {
                    // use generic icon
                    /** @type {?} */
                    var svgcontents = void 0;
                    if (icon === 'assets/icons/ic-generic-casetype.svg') {
                        svgcontents = GENERIC_CASETYPE_ICON_SVG;
                    }
                    else {
                        svgcontents = GENERIC_STATE_ICON_SVG;
                    }
                    _this.svgcontents = svgcontents;
                    svgcontents = svgcontents.replace('fill="<DYNAMICFILL>"', 'fill="' + fill + '"');
                    /** @type {?} */
                    var newval = _this.sanitizer.bypassSecurityTrustHtml(svgcontents);
                    _this.iconSVG = newval;
                }
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsStateIconComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            // this.refresh(this.iconPath, this.color);
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        LiveAppsStateIconComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if ((changes.iconPath && (changes.iconPath.currentValue !== changes.iconPath.previousValue)) || (changes.color && (changes.color.currentValue !== changes.color.previousValue))) {
                this.refresh(this.iconPath, this.color);
            }
        };
        LiveAppsStateIconComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-state-icon',
                        template: "<div class=\"la-state-icon-svg\" [innerHtml]=\"iconSVG\" fxLayoutAlign=\"start center\"></div>\n",
                        styles: [":host ::ng-deep .la-state-icon-svg svg{height:16px;width:16px}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsStateIconComponent.ctorParameters = function () { return [
            { type: platformBrowser.DomSanitizer },
            { type: http.HttpClient },
            { type: LiveAppsService },
            { type: common.Location }
        ]; };
        LiveAppsStateIconComponent.propDecorators = {
            id: [{ type: core.Input }],
            iconPath: [{ type: core.Input }],
            color: [{ type: core.Input }],
            iconHostURL: [{ type: core.Input }],
            appId: [{ type: core.Input }]
        };
        return LiveAppsStateIconComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Renders case summary cards
     *
     * ![alt-text](../live-apps-case-summary.png "Image")
     *
     * ![alt-text](../live-apps-case-summary-2.png "Image")
     *
     * \@example <tcla-live-apps-case-summary></tcla-live-apps-case-summary>
     */
    var LiveAppsCaseSummaryComponent = /** @class */ (function (_super) {
        __extends(LiveAppsCaseSummaryComponent, _super);
        function LiveAppsCaseSummaryComponent(liveapps, caseCardConfigService, sanitizer) {
            var _this = _super.call(this) || this;
            _this.liveapps = liveapps;
            _this.caseCardConfigService = caseCardConfigService;
            _this.sanitizer = sanitizer;
            /**
             * ~event clickCase : Case clicked
             * ~payload CaseRoute : CaseRoute object output when case is clicked so calling component can route accordingly - ie. route to case
             */
            _this.clickCase = new core.EventEmitter();
            /**
             * ~event deleted : Case Displayed has been deleted
             * ~payload string : string emitted when summary tries to load data for a case that has been deleted (so it can be hidden.removed from - for example recent cases list)
             */
            _this.deleted = new core.EventEmitter();
            _this.clickCaseAction = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var caseRoute = new CaseRoute().deserialize({ caseRef: _this.caseRef, appId: _this.appId, typeId: _this.typeId, workitemId: _this.workitemId });
                _this.clickCase.emit(caseRoute);
            });
            _this.restylePreview = (/**
             * @param {?} icon
             * @param {?} fill
             * @return {?}
             */
            function (icon, fill) {
                _this.metadata.stateIcon = icon;
                _this.metadata.stateColor = fill;
                _this.stateIconComponent.refresh(icon, fill);
            });
            _this.restylePreviewCaseType = (/**
             * @param {?} icon
             * @param {?} fill
             * @return {?}
             */
            function (icon, fill) {
                _this.metadata.caseTypeIcon = icon;
                _this.metadata.caseTypeColor = fill;
                _this.caseTypeIconComponent.refresh(icon, fill);
            });
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                if (!_this.configMode) {
                    _this.caseCardConfigService.getCaseWithSummary(_this.caseRef, _this.sandboxId, _this.uiAppId)
                        .pipe(operators.take(1), operators.takeUntil(_this._destroyed$)).subscribe((/**
                     * @param {?} caseinfo
                     * @return {?}
                     */
                    function (caseinfo) {
                        if (!caseinfo.deleted) {
                            _this.appId = caseinfo.metadata.applicationId;
                            _this.typeId = caseinfo.metadata.typeId;
                            _this.casedata = caseinfo.untaggedCasedataObj;
                            _this.metadata = caseinfo.metadata;
                            _this.summary = caseinfo.summaryObj;
                            _this.summaryKeys = Object.keys(_this.summary);
                            _this.summaryValues = Object.values(_this.summary);
                        }
                        else {
                            // notify parent case has been deleted
                            _this.deleted.emit(_this.caseRef);
                        }
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        _this.errorMessage = 'Error retrieving case data: ' + error.error.errorMsg;
                    }));
                }
                else {
                    /** @type {?} */
                    var sampleCaseInfoJSON = '{\n' +
                        '  "untaggedCasedata": "",\n' +
                        '  "summary": "{\\"state\\":\\"Current State\\",\\"Summary1\\":\\"000001\\",\\"Summary2\\":\\"summary data\\",\\"Summary3\\":\\"summary data\\"}",\n' +
                        '  "metadata": {\n' +
                        '    "createdBy": "-1",\n' +
                        '    "creationTimestamp": "2018-11-27T08:40:03.404Z",\n' +
                        '    "createdByDetails": {\n' +
                        '      "username": "creator@mycompany.com"\n' +
                        '    },\n' +
                        '    "modifiedBy": "-1",\n' +
                        '    "modificationTimestamp": "2018-11-27T08:40:22.010Z",\n' +
                        '    "lockType": "1",\n' +
                        '    "msLockExpiry": "1543308022271",\n' +
                        '    "msSystemTime": "1545127800839",\n' +
                        '    "applicationId": "934",\n' +
                        '    "typeId": "1"\n' +
                        '  },\n' +
                        '  "summaryObj": {\n' +
                        '    "state": "Current State",\n' +
                        '    "Summary 1": "000001",\n' +
                        '    "Summary 2": "The case name",\n' +
                        '    "Summary 3": "The case description"\n' +
                        '  },\n' +
                        '  "untaggedCasedataObj": {\n' +
                        '  }\n' +
                        '}';
                    /** @type {?} */
                    var caseinfo = new CaseInfo().deserialize(JSON.parse(sampleCaseInfoJSON));
                    _this.casedata = caseinfo.untaggedCasedataObj;
                    _this.metadata = caseinfo.metadata;
                    _this.summary = caseinfo.summaryObj;
                    _this.summaryKeys = Object.keys(_this.summary);
                    _this.summaryValues = Object.values(_this.summary);
                    _this.metadata.stateIcon = _this.configModeIcon;
                    _this.metadata.stateColor = _this.configModeColor;
                    _this.metadata.caseTypeColor = _this.configModeCaseTypeColor;
                    _this.metadata.caseTypeIcon = _this.configModeCaseTypeIcon;
                    _this.metadata.applicationLabel = _this.configModeAppTypeLabel;
                }
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsCaseSummaryComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngAfterViewInit.call(this);
            this.containerChanges$.subscribe();
        };
        /**
         * @return {?}
         */
        LiveAppsCaseSummaryComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngOnInit.call(this);
            this.refresh();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        LiveAppsCaseSummaryComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.configModeAppTypeLabel && !changes.configModeAppTypeLabel.isFirstChange() && (changes.configModeAppTypeLabel.currentValue !== changes.configModeAppTypeLabel.previousValue)) {
                this.refresh();
            }
        };
        LiveAppsCaseSummaryComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-summary',
                        template: "<div #componentDiv fxFill>\n  <div *ngIf=\"displayType === 'miniCard'\" (click)=\"clickCaseAction()\" style=\"height: 100%\">\n    <mat-card *ngIf=\"configMode || (metadata && metadata.applicationLabel && metadata.createdByDetails && metadata.stateColor && metadata.stateIcon && metadata.caseTypeIcon && metadata.caseTypeColor)\" class=\"tcs-case-summary-mini-card\" [ngClass]=\"{border: borderCard}\" fxLayout=\"row\" fxLayoutAlign=\"start stretch\">\n      <div *ngIf=\"typeBar\" class=\"tcs-case-summary-mini-card-side-bar\" [style.background-color]=\"metadata.useCaseTypeColor ? metadata.caseTypeColor : metadata.stateColor\"></div>\n      <div class=\"tcs-case-summary-mini-card-right-content\" fxFlex>\n        <div class=\"tcs-case-summary-mini-card-left\" fxLayout=\"column\" fxLayoutAlign=\"space-between start\" fxFlex>\n          <div *ngIf=\"description\" class=\"tcs-case-summary-summary1-text mini\" matTooltip=\"{{description}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\">{{description | ellipsis: 45}}</div>\n          <div *ngIf=\"!description && summaryValues[1]\" class=\"tcs-case-summary-summary1-text mini\" matTooltip=\"{{summaryKeys[1]}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\">{{summaryValues[1]  | ellipsis: 45}}</div>\n          <div class=\"tcs-case-summary-creation-text\" fxLayout=\"row\">\n            <div *ngIf=\"metadata.createdByDetails\">Created {{metadata.creationTimestamp | durationSince}} by {{metadata.createdByDetails.username ? metadata.createdByDetails.username: 'system'}}</div>\n          </div>\n          <div *ngIf=\"summaryValues[2]\" class=\"tcs-case-summary-summary2-text mini\" matTooltip=\"{{summaryValues[2]}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">{{summaryValues[2] | ellipsis: 45}}</div>\n          <div class=\"tcs-case-summary-mini-card-state-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <tcla-live-apps-state-icon #caseTypeIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.caseTypeIcon\" [color]=\"metadata.caseTypeColor\" matTooltipShowDelay=\"1000\" matTooltip=\"Case type: {{metadata.applicationLabel}}\"></tcla-live-apps-state-icon>\n            <div class=\"tcs-case-summary-state-text\" matTooltip=\"{{summaryValues[1]}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\">{{metadata.applicationLabel}}</div>\n            <div fxLayout=\"row\" fxLayoutAlign=\"end center\" fxFlex>\n              <tcla-live-apps-state-icon #caseStateIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.stateIcon\" [color]=\"metadata.stateColor\" [appId]=\"appId\"></tcla-live-apps-state-icon>\n              <div class=\"tcs-case-summary-state-text\">{{summaryValues[0]}}</div>\n            </div>\n          </div>\n        </div>\n        <div class=\"tcs-case-summary-mini-card-right\" fxLayout=\"row\" fxLayoutAlign=\"end center\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\" matTooltip=\"Open Case\">\n          <mat-icon class=\"tcs-icon tcs-case-summary-details-icon\" svgIcon=\"tcs-summary-details-button\"></mat-icon>\n        </div>\n      </div>\n    </mat-card>\n  </div>\n\n  <div *ngIf=\"displayType === 'wiMiniCard'\" (click)=\"clickCaseAction()\" style=\"height: 100%\">\n    <mat-card *ngIf=\"configMode || (metadata && metadata.applicationLabel && metadata.createdByDetails && metadata.stateColor && metadata.stateIcon && metadata.caseTypeIcon && metadata.caseTypeColor)\" class=\"tcs-case-summary-mini-card\" [ngClass]=\"{border: borderCard}\" fxLayout=\"row\" fxLayoutAlign=\"start stretch\">\n      <div *ngIf=\"typeBar\" class=\"tcs-case-summary-mini-card-side-bar\" [style.background-color]=\"metadata.useCaseTypeColor ? metadata.caseTypeColor : metadata.stateColor\"></div>\n      <div class=\"tcs-case-summary-mini-card-right-content\" fxFlex>\n        <div class=\"tcs-case-summary-mini-card-left\" fxLayout=\"column\" fxLayoutAlign=\"space-between start\" fxFlex>\n          <div fxLayout=\"row\">\n            <div *ngIf=\"workitemId\" class=\"tcs-case-summary-summary1-text mini\">{{workitemId}}:&nbsp;</div>\n            <div *ngIf=\"description\" class=\"tcs-case-summary-summary1-text mini\" matTooltip=\"{{description}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\">{{description | ellipsis: 45}}</div>\n          </div>\n          <div class=\"tcs-case-summary-creation-text\" fxLayout=\"row\">\n            <div *ngIf=\"metadata.createdByDetails\">Created {{metadata.creationTimestamp | durationSince}} by {{metadata.createdByDetails.username ? metadata.createdByDetails.username: 'system'}}</div>\n          </div>\n          <div *ngIf=\"summaryValues[2]\" class=\"tcs-case-summary-summary2-text mini\" matTooltip=\"{{summaryValues[2]}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">{{summaryValues[2] | ellipsis: 45}}</div>\n          <div class=\"tcs-case-summary-mini-card-state-box\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n            <tcla-live-apps-state-icon #caseTypeIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.caseTypeIcon\" [color]=\"metadata.caseTypeColor\" matTooltipShowDelay=\"1000\" matTooltip=\"Case type: {{metadata.applicationLabel}}\"></tcla-live-apps-state-icon>\n            <div class=\"tcs-case-summary-state-text\" matTooltip=\"{{summaryValues[1]}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\">{{metadata.applicationLabel}}</div>\n            <div fxLayout=\"row\" fxLayoutAlign=\"end center\" fxFlex>\n              <tcla-live-apps-state-icon #caseStateIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.stateIcon\" [color]=\"metadata.stateColor\" [appId]=\"appId\"></tcla-live-apps-state-icon>\n              <div class=\"tcs-case-summary-state-text\">{{summaryValues[0]}}</div>\n            </div>\n          </div>\n        </div>\n        <div class=\"tcs-case-summary-mini-card-right\" fxLayout=\"row\" fxLayoutAlign=\"end center\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\" matTooltip=\"Open Case\">\n          <mat-icon class=\"tcs-icon tcs-case-summary-details-icon\" svgIcon=\"tcs-summary-details-button\"></mat-icon>\n        </div>\n      </div>\n    </mat-card>\n  </div>\n\n  <div *ngIf=\"displayType === 'card'\" style=\"height: 100%\">\n  <mat-card *ngIf=\"configMode || (metadata && metadata.applicationLabel && metadata.createdByDetails && metadata.stateColor && metadata.stateIcon && metadata.caseTypeIcon && metadata.caseTypeColor)\" class=\"tcs-case-summary-card\" fxLayout=\"column\" fxLayoutAlign=\"start start\" (click)=\"clickCaseAction()\">\n    <div *ngIf=\"typeBar\" class=\"tcs-case-summary-header\" [style.background-color]=\"metadata.useCaseTypeColor ? metadata.caseTypeColor : metadata.stateColor\"></div>\n    <div class=\"tcs-case-summary-card-contents\" fxFlex fxLayout=\"column\" fxLayoutAlign=\"center center\">\n      <div fxFlex>\n        <div class=\"tcs-case-summary-case-type-text\">{{metadata.applicationLabel}}</div>\n      </div>\n      <div fxFlex>\n        <div *ngIf=\"summaryValues[1]\" class=\"tcs-case-summary-summary1-text\" matTooltip=\"{{summaryKeys[1]}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\">{{summaryValues[1] | ellipsis: 45}}</div>\n      </div>\n      <div fxFlex>\n        <div class=\"tcs-case-summary-creation-text\">\n          <div *ngIf=\"metadata.createdByDetails\">Created {{metadata.creationTimestamp | durationSince}} by {{metadata.createdByDetails.username ? metadata.createdByDetails.username : 'system'}}</div>\n        </div>\n      </div>\n      <div fxFlex>\n        <div class=\"tcs-case-summary-line\"></div>\n      </div>\n      <div fxFlex>\n        <div *ngIf=\"summaryValues[2]\" class=\"tcs-case-summary-summary2-text\">{{summaryValues[2]}}</div>\n      </div>\n    </div>\n    <div class=\"tcs-case-summary-case-footer\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n      <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        <tcla-live-apps-state-icon #caseTypeIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.caseTypeIcon\" [color]=\"metadata.caseTypeColor\" matTooltipShowDelay=\"1000\" matTooltip=\"Case type: {{metadata.applicationLabel}}\"></tcla-live-apps-state-icon>\n        <tcla-live-apps-state-icon #caseStateIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.stateIcon\" [color]=\"metadata.stateColor\" [appId]=\"appId\"></tcla-live-apps-state-icon>\n        <div class=\"tcs-case-summary-state-text\">{{summaryValues[0]}}</div>\n      </div>\n      <div class=\"tcs-case-summary-view-details\" fxLayout=\"row\" fxLayoutAlign=\"end center\" matTooltipPosition=\"above\" matTooltip=\"Open Case\" matTooltipShowDelay=\"1000\">\n        <div class=\"tcs-case-summary-view-details-text\">View Details</div>\n        <mat-icon class=\"tcs-icon tcs-case-summary-details-icon\" svgIcon=\"tcs-summary-details-button\"></mat-icon>\n      </div>\n    </div>\n  </mat-card>\n  </div>\n  <div class=\"summary-card-list-format\" *ngIf=\"displayType === 'list'\" style=\"min-height: 50px; height: 100%; background-color: white\">\n    <mat-card *ngIf=\"configMode || (metadata && metadata.applicationLabel && metadata.createdByDetails && metadata.stateColor && metadata.stateIcon && metadata.caseTypeIcon && metadata.caseTypeColor)\" class=\"tcs-case-summary-list-card\" [ngClass]=\"{border: borderCard}\" fxLayout=\"row\" fxLayoutAlign=\"start stretch\" (click)=\"clickCaseAction()\">\n      <div *ngIf=\"typeBar\" class=\"tcs-case-summary-mini-card-side-bar\" [style.background-color]=\"metadata.useCaseTypeColor ? metadata.caseTypeColor : metadata.stateColor\"></div>\n      <div class=\"tcs-case-summary-mini-card-right-content\" fxFlex>\n        <div class=\"tcs-case-summary-list-card-left\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex fxLayoutGap=\"10px\">\n          <div class=\"tcs-case-summary-list-summary1-text tcs-case-summary-list-details-box\">\n            <div fxFlex=\"nogrow\" *ngIf=\"summaryValues[1]\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\" [innerHTML]=\"summaryValues[1] | ellipsis : 20 | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\" matTooltipShowDelay=\"1000\" matTooltip=\"{{summaryValues[1]}}\"></div>\n          </div>\n          <div *ngIf=\"widget.gtXs\">\n            <div *ngIf=\"widget.ltMd\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"5px\">\n              <!-- App Icon and label -->\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-case-summary-list-details-box\">\n                <tcla-live-apps-state-icon #caseTypeIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.caseTypeIcon\" [color]=\"metadata.caseTypeColor\" matTooltipShowDelay=\"1000\" matTooltip=\"Case type: {{metadata.applicationLabel}}\"></tcla-live-apps-state-icon>\n                <div class=\"tcs-case-summary-state-text\">{{metadata.applicationLabel |  ellipsis: 20}}</div>\n              </div>\n              <!-- State Icon and Label -->\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-case-summary-list-details-box\">\n                <tcla-live-apps-state-icon #caseStateIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.stateIcon\" [color]=\"metadata.stateColor\" [appId]=\"appId\"></tcla-live-apps-state-icon>\n                <div class=\"tcs-case-summary-state-text\">{{summaryValues[0]}}</div>\n              </div>\n            </div>\n            <div *ngIf=\"widget.gtSm\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-case-summary-list-details-box\">\n              <tcla-live-apps-state-icon #caseTypeIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.caseTypeIcon\" [color]=\"metadata.caseTypeColor\" matTooltipShowDelay=\"1000\" matTooltip=\"Case type: {{metadata.applicationLabel}}\"></tcla-live-apps-state-icon>\n              <div class=\"tcs-case-summary-state-text\">{{metadata.applicationLabel |  ellipsis: 20}}</div>\n            </div>\n            <div *ngIf=\"widget.gtSm\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-case-summary-list-details-box\">\n              <tcla-live-apps-state-icon #caseStateIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.stateIcon\" [color]=\"metadata.stateColor\" [appId]=\"appId\"></tcla-live-apps-state-icon>\n              <div class=\"tcs-case-summary-state-text\">{{summaryValues[0]}}</div>\n            </div>\n          </div>\n          <div *ngIf=\"widget.ltMd\" class=\"summary-text-ltmd\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxLayoutGap=\"5px\" style=\"max-width: 180px;width: 180px\">\n            <div class=\"tcs-case-summary-list-summary2-text tcs-case-summary-list-large-details-box\">\n              <div fxFlex *ngIf=\"summaryValues[2]\" [innerHTML]=\"summaryValues[2] | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\" matTooltipShowDelay=\"1000\" matTooltip=\"{{summaryValues[2]}}\"></div>\n            </div>\n            <div class=\"tcs-case-summary-list-summary3-text tcs-case-summary-list-details-box\">\n              <div fxFlex=\"nogrow\" *ngIf=\"summaryValues[3]\" [innerHTML]=\"summaryValues[3] | ellipsis : 20 | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\" matTooltipShowDelay=\"1000\" matTooltip=\"{{summaryValues[3]}}\"></div>\n            </div>\n          </div>\n          <div *ngIf=\"widget.gtSm\" class=\"tcs-case-summary-list-summary2-text tcs-case-summary-list-large-details-box\">\n            <div fxFlex *ngIf=\"summaryValues[2]\" [innerHTML]=\"summaryValues[2] | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\" matTooltipShowDelay=\"1000\" matTooltip=\"{{summaryValues[2]}}\"></div>\n          </div>\n          <div *ngIf=\"widget.gtSm\" fxFlex=\"nogrow\" class=\"tcs-case-summary-list-summary3-text tcs-case-summary-list-details-box\">\n            <div fxFlex=\"nogrow\" *ngIf=\"summaryValues[3]\" [innerHTML]=\"summaryValues[3] | ellipsis : 20 | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\" matTooltipShowDelay=\"1000\" matTooltip=\"{{summaryValues[3]}}\"></div>\n          </div>\n          <div fxFlex class=\"tcs-case-summary-list-details-box tcs-case-summary-creation-text\" fxLayoutAlign=\"center center\">\n            <div *ngIf=\"metadata.createdByDetails\">Created {{metadata.creationTimestamp | durationSince}} by {{metadata.createdByDetails.username ? metadata.createdByDetails.username : 'system'}}</div>\n          </div>\n        </div>\n\n        <div class=\"tcs-case-summary-mini-card-right\" fxLayout=\"row\" fxLayoutAlign=\"end center\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\" matTooltip=\"Open Case\">\n          <mat-icon class=\"tcs-icon tcs-case-summary-details-icon\" svgIcon=\"tcs-summary-details-button\"></mat-icon>\n        </div>\n      </div>\n    </mat-card>\n  </div>\n\n  <div *ngIf=\"displayType === 'miniList'\" style=\"min-height: 50px; background-color: white\">\n    <mat-card *ngIf=\"configMode || (metadata && metadata.applicationLabel && metadata.createdByDetails && metadata.stateColor && metadata.stateIcon && metadata.caseTypeIcon && metadata.caseTypeColor)\" class=\"tcs-case-summary-list-card\" [ngClass]=\"{border: borderCard}\" fxLayout=\"row\" fxLayoutAlign=\"start stretch\" (click)=\"clickCaseAction()\">\n      <div *ngIf=\"typeBar\" class=\"tcs-case-summary-mini-card-side-bar\" [style.background-color]=\"metadata.useCaseTypeColor ? metadata.caseTypeColor : metadata.stateColor\"></div>\n      <div class=\"tcs-case-summary-mini-card-right-content\" fxFlex>\n        <div class=\"tcs-case-summary-list-card-left\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex fxLayoutGap=\"10px\">\n          <div class=\"tcs-case-summary-list-summary1-text tcs-case-summary-list-details-box\">\n            <div fxFlex=\"nogrow\" *ngIf=\"summaryValues[1]\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\" [innerHTML]=\"summaryValues[1] | ellipsis : 20 | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\" matTooltipShowDelay=\"1000\" matTooltip=\"{{summaryValues[1]}}\"></div>\n          </div>\n        </div>\n        <div class=\"tcs-case-summary-mini-card-right\" fxLayout=\"row\" fxLayoutAlign=\"end center\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\" matTooltip=\"Open Case\">\n          <mat-icon class=\"tcs-icon tcs-case-summary-details-icon\" svgIcon=\"tcs-summary-details-button\"></mat-icon>\n        </div>\n      </div>\n    </mat-card>\n  </div>\n\n\n  <div *ngIf=\"displayType === 'staticlist'\" style=\"min-height: 50px;  height: 100%; background-color: white\">\n    <mat-card *ngIf=\"configMode || (metadata && metadata.applicationLabel && metadata.createdByDetails && metadata.stateColor && metadata.stateIcon && metadata.caseTypeIcon && metadata.caseTypeColor)\" class=\"tcs-case-summary-static-list-card\" [ngClass]=\"{border: borderCard}\" fxLayout=\"row\" fxLayoutAlign=\"start stretch\">\n      <div *ngIf=\"typeBar\" class=\"tcs-case-summary-mini-card-side-bar\" [style.background-color]=\"metadata.useCaseTypeColor ? metadata.caseTypeColor : metadata.stateColor\"></div>\n      <div class=\"tcs-case-summary-mini-card-right-content\" fxFlex>\n        <div class=\"tcs-case-summary-list-card-left\" fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFlex fxLayoutGap=\"10px\">\n          <div class=\"tcs-case-summary-list-summary1-text tcs-case-summary-list-details-box\">\n            <div fxFlex=\"nogrow\" *ngIf=\"summaryValues[1]\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\" [innerHTML]=\"summaryValues[1] | ellipsis : 20 | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\" matTooltipShowDelay=\"1000\" matTooltip=\"{{summaryValues[1]}}\"></div>\n          </div>\n          <div *ngIf=\"widget.ltMd\" class=\"summary-text-ltmd\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxLayoutGap=\"5px\" style=\"max-width: 180px;width: 180px\">\n            <div class=\"tcs-case-summary-list-summary2-text tcs-case-summary-list-large-details-box\">\n              <div fxFlex *ngIf=\"summaryValues[2]\" [innerHTML]=\"summaryValues[2] | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\" matTooltipShowDelay=\"1000\" matTooltip=\"{{summaryValues[2]}}\"></div>\n            </div>\n            <div class=\"tcs-case-summary-list-summary3-text tcs-case-summary-list-details-box\">\n              <div fxFlex=\"nogrow\" *ngIf=\"summaryValues[3]\" [innerHTML]=\"summaryValues[3] | ellipsis : 20 | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\" matTooltipShowDelay=\"1000\" matTooltip=\"{{summaryValues[3]}}\"></div>\n            </div>\n          </div>\n          <div *ngIf=\"widget.gtSm\" class=\"tcs-case-summary-list-summary2-text tcs-case-summary-list-large-details-box\">\n            <div fxFlex *ngIf=\"summaryValues[2]\" [innerHTML]=\"summaryValues[2] | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\" matTooltipShowDelay=\"1000\" matTooltip=\"{{summaryValues[2]}}\"></div>\n          </div>\n          <div *ngIf=\"widget.gtSm\" fxFlex=\"nogrow\" class=\"tcs-case-summary-list-summary3-text tcs-case-summary-list-details-box\">\n            <div fxFlex=\"nogrow\" *ngIf=\"summaryValues[3]\" [innerHTML]=\"summaryValues[3] | ellipsis : 20 | highlight : highlight : 'Multi-Match' : false : 'tcs-case-summary-highlight'\" matTooltipShowDelay=\"1000\" matTooltip=\"{{summaryValues[3]}}\"></div>\n          </div>\n          <div *ngIf=\"widget.gtXs\">\n            <div *ngIf=\"widget.ltMd\" fxLayout=\"column\" fxLayoutAlign=\"center center\" fxLayoutGap=\"5px\">\n              <!-- App Icon and label -->\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-case-summary-list-details-box\">\n                <tcla-live-apps-state-icon #caseTypeIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.caseTypeIcon\" [color]=\"metadata.caseTypeColor\" matTooltipShowDelay=\"1000\" matTooltip=\"Case type: {{metadata.applicationLabel}}\"></tcla-live-apps-state-icon>\n                <div class=\"tcs-case-summary-state-text\">{{metadata.applicationLabel |  ellipsis: 20}}</div>\n              </div>\n              <!-- State Icon and Label -->\n              <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-case-summary-list-details-box\">\n                <tcla-live-apps-state-icon #caseStateIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.stateIcon\" [color]=\"metadata.stateColor\" [appId]=\"appId\"></tcla-live-apps-state-icon>\n                <div class=\"tcs-case-summary-state-text\">{{summaryValues[0]}}</div>\n              </div>\n            </div>\n            <div *ngIf=\"widget.gtSm\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-case-summary-list-details-box\">\n              <tcla-live-apps-state-icon #caseTypeIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.caseTypeIcon\" [color]=\"metadata.caseTypeColor\" matTooltipShowDelay=\"1000\" matTooltip=\"Case type: {{metadata.applicationLabel}}\"></tcla-live-apps-state-icon>\n              <div class=\"tcs-case-summary-state-text\">{{metadata.applicationLabel |  ellipsis: 20}}</div>\n            </div>\n            <div *ngIf=\"widget.gtSm\" fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-case-summary-list-details-box\">\n              <tcla-live-apps-state-icon #caseStateIcon class=\"tcs-case-summary-state-icon\" [iconPath]=\"metadata.stateIcon\" [color]=\"metadata.stateColor\" [appId]=\"appId\"></tcla-live-apps-state-icon>\n              <div class=\"tcs-case-summary-state-text\">{{summaryValues[0]}}</div>\n            </div>\n          </div>\n          <div fxFlex class=\"tcs-case-summary-list-details-box tcs-case-summary-creation-text\" fxLayoutAlign=\"center center\">\n            <div *ngIf=\"metadata.createdByDetails\">Created {{metadata.creationTimestamp | durationSince}} by {{metadata.createdByDetails.username ? metadata.createdByDetails.username : 'system'}}</div>\n          </div>\n        </div>\n      </div>\n    </mat-card>\n  </div>\n</div>\n",
                        styles: [".tcs-case-summary-list{width:100%;height:190px;border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff;padding:0}.tcs-case-summary-card{width:100%;height:100%;border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff;padding:0}.tcs-case-summary-mini-card{padding:0;height:100%;min-width:285px;min-height:91px;background-color:#fff;box-shadow:none;border-radius:3px}.tcs-case-summary-list-card{padding:0;height:100%;min-height:50px;overflow:hidden;background-color:#fff;box-shadow:none;border-radius:3px}.tcs-case-summary-static-list-card{padding:0;height:50px;min-height:50px;background-color:#fff;box-shadow:none;border-radius:3px}.tcs-case-summary-mini-card-right-content{padding:7px 5px}.tcs-case-summary-mini-card.border{box-shadow:0 2px 4px 0 rgba(0,0,0,.33);border-radius:3px}.tcs-case-summary-mini-card:hover{box-shadow:0 3px 8px 4px rgba(0,0,0,.33);border-radius:3px;cursor:pointer}.tcs-case-summary-card:hover{box-shadow:0 3px 8px 4px rgba(0,0,0,.33);cursor:pointer}.tcs-case-summary-list-card:hover{box-shadow:0 3px 8px 4px rgba(0,0,0,.33);border-radius:3px;cursor:pointer}.tcs-case-summary-header{width:100%;height:20px;border-radius:3px 3px 0 0}.tcs-case-summary-mini-card-side-bar{border-radius:3px 0 0 3px;width:20px}.tcs-case-summary-card-contents{width:100%;padding:4px 12px}.tcs-case-summary-case-footer{width:100%;height:36px;border-radius:0 0 3px 3px;background-color:#fff;padding-left:12px;padding-right:12px}.tcs-case-summary-case-type-text{font-family:Source Sans Pro;font-size:12px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;text-align:center;color:#727272}.tcs-case-summary-summary1-text{font-family:Source Sans Pro;font-size:16px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;text-align:center;color:#212121;margin-top:12px;height:18px;min-height:18px}.tcs-case-summary-summary1-text.mini{margin-top:0}.tcs-case-summary-creation-text{min-height:15px}.tcs-case-summary-creation-text div{font-family:Source Sans Pro;font-size:10px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#727272}.tcs-case-summary-line{padding:0;width:100%;margin:12px 20px 0;border-bottom:1.1px solid #f4f4f4}.tcs-case-summary-summary2-text{font-family:Source Sans Pro;font-size:12px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;text-align:center;color:#000;margin-top:8px}.tcs-case-summary-list-summary2-text{font-family:Source Sans Pro;font-size:12px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#000;padding-right:10px}.tcs-case-summary-list-summary3-text{font-family:Source Sans Pro;font-size:12px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#000}.tcs-case-summary-summary2-text.mini{margin-top:0}.tcs-case-summary-case-footer:hover,.tcs-case-summary-mini-card-right:hover{cursor:pointer}.tcs-case-summary-view-details-text{font-family:Source Sans Pro;font-size:10px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;text-align:right;color:#0081cb}.tcs-case-summary-state-text{font-family:Source Sans Pro;font-size:10px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#727272}.tcs-case-summary-details-icon{height:14px;width:14px;margin-left:5px}.tcs-case-summary-mini-card-state-box{width:100%}.tcs-case-summary-state-icon{margin-right:5px}.tcs-case-summary-list-card-left{margin-left:10px;margin-right:10px;overflow:hidden}.tcs-case-summary-list-details-box{min-width:130px}.tcs-case-summary-list-details-box.tcs-case-summary-creation-text{min-width:110px}.tcs-case-summary-list-summary1-text{min-width:100px;font-family:Source Sans Pro;font-size:16px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#212121;height:18px;min-height:18px}.tcs-case-summary-list-large-details-box{min-width:30%}:host ::ng-deep .tcs-case-summary-highlight{color:#000;font-weight:900}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCaseSummaryComponent.ctorParameters = function () { return [
            { type: LiveAppsService },
            { type: TcCaseCardConfigService },
            { type: platformBrowser.DomSanitizer }
        ]; };
        LiveAppsCaseSummaryComponent.propDecorators = {
            stateIconComponent: [{ type: core.ViewChild, args: ['caseStateIcon', { static: false },] }],
            caseTypeIconComponent: [{ type: core.ViewChild, args: ['caseTypeIcon', { static: false },] }],
            componentDiv: [{ type: core.ViewChild, args: ['componentDiv', { static: false },] }],
            configMode: [{ type: core.Input }],
            configModeColor: [{ type: core.Input }],
            configModeIcon: [{ type: core.Input }],
            configModeCaseTypeColor: [{ type: core.Input }],
            configModeCaseTypeIcon: [{ type: core.Input }],
            configModeAppTypeLabel: [{ type: core.Input }],
            caseRef: [{ type: core.Input }],
            description: [{ type: core.Input }],
            workitemId: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }],
            displayType: [{ type: core.Input }],
            borderCard: [{ type: core.Input }],
            typeBar: [{ type: core.Input }],
            uiAppId: [{ type: core.Input }],
            highlight: [{ type: core.Input }],
            clickCase: [{ type: core.Output }],
            deleted: [{ type: core.Output }]
        };
        return LiveAppsCaseSummaryComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * This Component allows to list, and add Notes to a Case-Instance or other Context e.g. a whole Application.
     * Any Note can have Sub-Notes to allow real collaboration.
     *
     * Note that since this component uses a virtual scroll the parent container must have height set or the notes won't appear
     *
     * ![alt-text](../live-apps-notes.png "Notes Component Image")
     *
     * \@example <tcla-live-apps-notes></tcla-live-apps-notes>
     */
    var LiveAppsNotesComponent = /** @class */ (function (_super) {
        __extends(LiveAppsNotesComponent, _super);
        function LiveAppsNotesComponent(liveapps, buttonsHelper) {
            var _this = _super.call(this) || this;
            _this.liveapps = liveapps;
            _this.buttonsHelper = buttonsHelper;
            /**
             * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
             */
            _this.showHeader = _this.showHeader ? _this.showHeader : true;
            _this.newNote = {};
            _this.skip = 0;
            _this.top = 20;
            _this.end = false;
            _this.toolbarButtons = [];
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                _this.skip = 0;
                _this.top = 20;
                _this.end = false;
                if (_this.threads && _this.threads.threads) {
                    _this.threads.threads.length = 0;
                }
                _this.getBatch();
                _this.getNotifications();
            });
            _this.getBatch = (/**
             * @return {?}
             */
            function () {
                if (!_this.end) {
                    _this.liveapps.getThreads(_this.relatedItemType, _this.relatedItemId, _this.skip, _this.top)
                        .pipe(operators.take(1), operators.takeUntil(_this._destroyed$)).subscribe((/**
                     * @param {?} threadList
                     * @return {?}
                     */
                    function (threadList) {
                        if (!_this.threads) {
                            _this.threads = threadList;
                        }
                        else {
                            // this will strip any duplicates that may have been retrieved due to fast scrolling
                            /** @type {?} */
                            var filteredEvents = threadList.threads.filter((/**
                             * @param {?} x
                             * @return {?}
                             */
                            function (x) { return _this.threads.threads.every((/**
                             * @param {?} y
                             * @return {?}
                             */
                            function (y) { return y.note.id !== x.note.id; })); }));
                            _this.threads.threads = _this.threads.threads.concat(filteredEvents);
                        }
                        if (threadList.threads.length < _this.top) {
                            _this.end = true;
                        }
                        else {
                            _this.skip = _this.skip + threadList.threads.length - 1;
                        }
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        _this.errorMessage = 'Error retrieving notes: ' + error.error.errorMsg;
                    }));
                }
            });
            _this.toggleReplies = (/**
             * @param {?} thread
             * @return {?}
             */
            function (thread) {
                thread.showReplies = !thread.showReplies;
            });
            _this.toggleNewReply = (/**
             * @param {?} thread
             * @return {?}
             */
            function (thread) {
                if (!thread.newReply) {
                    thread.newReply = {};
                }
                if (thread.showReplies && !thread.showNewReply) {
                    thread.newReply = {};
                    thread.showNewReply = true;
                }
                else {
                    thread.showNewReply = !thread.showNewReply;
                    thread.showReplies = !thread.showReplies;
                }
            });
            _this.createReply = (/**
             * @param {?} thread
             * @param {?} replyText
             * @return {?}
             */
            function (thread, replyText) {
                _this.liveapps.createReplyNote(thread.note, replyText, thread.note.id)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    _this.newNoteId = result;
                    thread.newReply.text = undefined;
                    _this.refresh();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { return _this.errorMessage = 'Error creating new note: ' + error.error.errorMessage; }));
            });
            _this.createThread = (/**
             * @param {?} noteText
             * @return {?}
             */
            function (noteText) {
                if (noteText !== undefined) {
                    _this.liveapps.createNote(_this.relatedItemType, 'RT_CASE', _this.relatedItemId, 'comments update', '', '', noteText)
                        .pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                        .subscribe((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        _this.newNoteId = result;
                        _this.newNote.text = undefined;
                        _this.refresh();
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) { return _this.errorMessage = 'Error creating new note: ' + error.error.errorMessage; }));
                }
            });
            _this.createToolbarButtons = (/**
             * @param {?} subscribed
             * @return {?}
             */
            function (subscribed) {
                /** @type {?} */
                var subscribeButton = _this.buttonsHelper.createButton('subscribe', 'tcs-collaboration-unsubscribed', true, 'Enable Notifications', !subscribed, !subscribed);
                /** @type {?} */
                var unSubscribeButton = _this.buttonsHelper.createButton('unsubscribe', 'tcs-collaboration-subscribed', true, 'Disable Notifications', subscribed, subscribed);
                /** @type {?} */
                var buttons = [subscribeButton, unSubscribeButton];
                return buttons;
            });
            _this.setupNotificationButtons = (/**
             * @param {?} subscribed
             * @return {?}
             */
            function (subscribed) {
                /** @type {?} */
                var buttons = _this.createToolbarButtons(subscribed);
                _this.buttonsHelper.updateButtons(buttons, _this.toolbarButtons);
            });
            _this.updateButtonDef = (/**
             * @param {?} updatedToolbarButtons
             * @return {?}
             */
            function (updatedToolbarButtons) {
                updatedToolbarButtons.forEach((/**
                 * @param {?} updatedButton
                 * @return {?}
                 */
                function (updatedButton) {
                    /** @type {?} */
                    var idx = _this.toolbarButtons.findIndex((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return item.id === updatedButton.id; }));
                    _this.toolbarButtons[idx] = updatedButton;
                }));
            });
            _this.handleToolbarButtonEvent = (/**
             * @param {?} id
             * @return {?}
             */
            function (id) {
                if (id === 'subscribe') {
                    _this.subscribe();
                }
                else if (id === 'unsubscribe') {
                    _this.unsubscribe();
                }
            });
            _this.recreateButtonsForNotifications = (/**
             * @param {?} subscribed
             * @return {?}
             */
            function (subscribed) {
                /** @type {?} */
                var buttons = _this.createToolbarButtons(subscribed);
                _this.buttonsHelper.updateButtons(buttons, _this.toolbarButtons);
            });
            _this.getNotifications = (/**
             * @return {?}
             */
            function () {
                _this.liveapps.getNotifications(_this.relatedItemType, _this.relatedItemId, _this.userId)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    /** @type {?} */
                    var notificationList = result;
                    if (notificationList.notifications.length > 0) {
                        _this.subscribed = true;
                        _this.setupNotificationButtons(true);
                    }
                    else {
                        _this.subscribed = false;
                        _this.setupNotificationButtons(false);
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { return _this.errorMessage = 'Error creating new note: ' + error.error.errorMessage; }));
            });
            _this.subscribe = (/**
             * @return {?}
             */
            function () {
                _this.liveapps.subscribeToNotes(_this.relatedItemType, _this.relatedItemId)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result) {
                        _this.subscribed = true;
                        _this.recreateButtonsForNotifications(true);
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { return _this.errorMessage = 'Error creating new note: ' + error.error.errorMessage; }));
            });
            _this.unsubscribe = (/**
             * @return {?}
             */
            function () {
                _this.liveapps.unsubscribeToNotes(_this.relatedItemType, _this.relatedItemId, _this.userId)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    _this.subscribed = false;
                    _this.recreateButtonsForNotifications(false);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { return _this.errorMessage = 'Error creating new note: ' + error.error.errorMessage; }));
            });
            _this.editNote = (/**
             * @param {?} thread
             * @return {?}
             */
            function (thread) {
                thread.editMode = !thread.editMode;
            });
            _this.updateNote = (/**
             * @param {?} note
             * @param {?} updatedText
             * @return {?}
             */
            function (note, updatedText) {
                console.log('Updating note');
                note.text = updatedText;
                _this.liveapps.updateNote(note, note.id)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    console.log('Note updated');
                    _this.refresh();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { return _this.errorMessage = 'Error updating note: ' + error.error.errorMessage; }));
            });
            _this.deleteNote = (/**
             * @param {?} id
             * @return {?}
             */
            function (id) {
                console.log('Deleting note');
                _this.liveapps.deleteNote(id)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    console.log('Note deleted: ' + result);
                    _this.refresh();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { return _this.errorMessage = 'Error creating new note: ' + error.error.errorMessage; }));
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsNotesComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            // this.refresh();
            this.newNote.text = '';
        };
        LiveAppsNotesComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-notes',
                        template: "<div class=\"tcs-notes-pane\" fxLayout=\"column\" fxFill style=\"overflow: hidden;\">\n  <tc-tibco-cloud-widget-header fxFlex=\"nogrow\" [headerText]=\"'Notes'\" [icon]=\"'tcs-collaboration-feed'\"\n                                [toolbarButtons]=\"toolbarButtons\" [showHeader]=\"showHeader\"\n                                (toolbarButtonEvent)=\"handleToolbarButtonEvent($event)\"></tc-tibco-cloud-widget-header>\n  <div class=\"tcs-collaboration-pane\" fxLayout=\"column\" fxFlex=\"grow\" style=\"\">\n    <div class=\"tcs-collaboration-existing-threads\" fxLayout=\"column\" fxFlex>\n      <!--div *ngIf=\"threads && threads.threads.length > 0\"-->\n      <div style=\"height: 100%;\">\n        <cdk-virtual-scroll-viewport style=\"height: 100%\" itemSize=\"50\" (scrolledIndexChange)=\"getBatch()\">\n\n          <!--div class=\"tcs-collaboration-detail-box tcs-collaboration-thread\" [ngClass]=\"{ editing: thread.editMode }\" *ngFor=\"let thread of threads.threads | reverse\" fxLayout=\"column\"-->\n          <div *ngIf=\"threads && threads.threads\">\n            <div class=\"tcs-collaboration-detail-box tcs-collaboration-thread\" [ngClass]=\"{ editing: thread.editMode }\"\n                 *cdkVirtualFor=\"let thread of threads.threads\" fxLayout=\"column\">\n              <div class=\"tcs-thread-box\">\n                <!-- collaboration threads -->\n                <div class=\"tcs-collaboration-entry\">\n                  <div *ngIf=\"!thread.editMode\">\n                    <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\n                      <span class=\"tcs-collaboration-thread-author\">{{thread.note.createdByName}}</span>\n                      <div fxLayoutAlign=\"row\">\n                      <span *ngIf=\"thread.note.modifiedDate > thread.note.createdDate\" class=\"tcs-collaboration-edited\">Edited\n                      </span>\n                        <span class=\"tcs-collaboration-thread-date\">{{thread.note.modifiedDate | durationSince}}</span>\n                      </div>\n                    </div>\n                    <span class=\"tcs-collaboration-thread-text\" matTooltip=\"{{thread.note.text}}\"\n                          matTooltipShowDelay=\"1000\"\n                          matTooltipPosition=\"below\">{{thread.note.text | ellipsis: 70}}</span>\n                  </div>\n                  <tcla-live-apps-notes-editor *ngIf=\"thread.editMode\" [noteText]=\"thread.note.text\"\n                                               (noteSubmitted)=\"updateNote(thread.note, $event)\"></tcla-live-apps-notes-editor>\n                </div>\n                <div class=\"tcs-icon-row\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                  <div class=\"tcs-collaboration-thread-icon-left\">\n                    <mat-icon (click)=\"deleteNote(thread.note.id)\"\n                              class=\"tcs-icon tcs-icon-active tcs-collaboration-edit-buttons tcs-collaboration-delete-icon\"\n                              svgIcon=\"tcs-collaboration-delete\"></mat-icon>\n                    <mat-icon (click)=\"editNote(thread)\"\n                              class=\"tcs-icon tcs-icon-active tcs-collaboration-edit-buttons tcs-collaboration-edit-icon\"\n                              svgIcon=\"tcs-collaboration-edit\"></mat-icon>\n                  </div>\n                  <div class=\"tcs-collaboration-thread-icon-right\" fxLayoutAlign=\"end center\" fxLayoutGap=\"8px\">\n                    <span *ngIf=\"thread.note.thread.totalCount > 1\" class=\"tcs-collaboration-thread-replies\"\n                          (click)=\"toggleReplies(thread)\">{{thread.note.thread.totalCount - 1}} replies</span>\n                    <mat-icon (click)=\"toggleNewReply(thread)\" class=\"tcs-icon tcs-collaboration-reply-icon\"\n                              svgIcon=\"tcs-collaboration-reply\"></mat-icon>\n                  </div>\n                </div>\n              </div>\n              <div class=\"tcs-collaboration-line\"></div>\n              <!-- replies -->\n              <div class=\"tcs-collaboration-reply-box\" *ngIf=\"thread.showReplies\">\n                <div fxLayout=\"column\">\n                  <tcla-live-apps-notes-editor class=\"tcs-collaboration-new-reply-component\" *ngIf=\"thread.showNewReply\"\n                                               [isReply]=\"true\" [noteText]=\"thread.newReply.text\"\n                                               (noteSubmitted)=\"createReply(thread, $event)\"></tcla-live-apps-notes-editor>\n                  <div class=\"tcs-collaboration-line\"></div>\n                </div>\n                <div class=\"tcs-collaboration-detail-box tcs-collaboration-reply\"\n                     [ngClass]=\"{ editing: reply.editMode }\" *ngFor=\"let reply of thread.thread | reverse\"\n                     fxLayout=\"column\">\n                  <div class=\"tcs-thread-box\" fxLayout=\"row\">\n                    <mat-icon class=\"tcs-icon tcs-collaboration-reply-item-icon\"\n                              svgIcon=\"tcs-collaboration-reply\"></mat-icon>\n                    <div fxLayout=\"column\" class=\"tcs-collaboration-reply-details\">\n                      <div class=\"tcs-collaboration-entry\">\n                        <div *ngIf=\"!reply.editMode\">\n                          <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\n                            <span class=\"tcs-collaboration-thread-author\">{{reply.createdByName}}</span>\n                            <span class=\"tcs-collaboration-thread-date\">{{reply.modifiedDate | durationSince}}</span>\n                          </div>\n                          <span class=\"tcs-collaboration-thread-text\" matTooltip=\"{{reply.text}}\"\n                                matTooltipShowDelay=\"1000\"\n                                matTooltipPosition=\"below\">{{reply.text | ellipsis: 60}}</span>\n                        </div>\n                        <tcla-live-apps-notes-editor *ngIf=\"reply.editMode\" [noteText]=\"reply.text\"\n                                                     (noteSubmitted)=\"updateNote(reply, $event)\"></tcla-live-apps-notes-editor>\n                      </div>\n                      <div class=\"tcs-icon-row\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                        <div class=\"tcs-collaboration-thread-icon-left\">\n                          <mat-icon (click)=\"deleteNote(reply.id)\"\n                                    class=\"tcs-icon tcs-icon-active tcs-collaboration-edit-buttons tcs-collaboration-delete-icon\"\n                                    svgIcon=\"tcs-collaboration-delete\"></mat-icon>\n                          <mat-icon (click)=\"editNote(reply)\"\n                                    class=\"tcs-icon tcs-icon-active tcs-collaboration-edit-buttons tcs-collaboration-edit-icon\"\n                                    svgIcon=\"tcs-collaboration-edit\"></mat-icon>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"tcs-collaboration-reply-line\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"!(threads?.threads?.length > 0)\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxLayoutGap=\"10px\"\n               style=\"margin-top: 20px;\">\n            <mat-icon [svgIcon]=\"'ic-no-notes-icon'\" style=\"height: 48px; width: 48px;\"></mat-icon>\n            <div style=\"height: 100%\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n              <span class=\"tcs-no-item-text\">No notes found</span>\n            </div>\n          </div>\n        </cdk-virtual-scroll-viewport>\n      </div>\n    </div>\n    <tcla-live-apps-notes-editor class=\"tcs-collaboration-new-note-component\" [noteText]=\"newNote.text\"\n                                 (noteSubmitted)=\"createThread($event)\"></tcla-live-apps-notes-editor>\n  </div>\n</div>\n",
                        styles: [".tcs-notes-pane{border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff}.tcs-collaboration-pane{padding-top:10px}.tcs-collaboration-header{min-height:40px;height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-collaboration-header-text{margin-left:10px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px}.tcs-collaboration-thread-icon-left{height:24px;width:50px}.tcs-collaboration-existing-threads{overflow-y:auto}.tcs-collaboration-detail-box{min-height:85px;flex-shrink:0}.tcs-collaboration-detail-box.editing{min-height:109px}.tcs-collaboration-detail-box.editing>.tcs-thread-box{height:110px;background-color:#eef0f7}.tcs-collaboration-new-reply-box{-webkit-transition:background-color .5s;transition:background-color .5s;background-color:#eef0f7;margin-left:20px;padding-right:20px}.tcs-collaboration-detail-box.tcs-collaboration-reply.editing{min-height:100px}.tcs-collaboration-reply{padding-left:20px}.tcs-thread-box{height:86px}.tcs-thread-box:hover{background-color:#eef0f7;-webkit-transition:background-color .5s;transition:background-color .5s}.tcs-thread-box:hover .tcs-icon.tcs-icon-active{display:inline-block}.tcs-thread-box .tcs-icon.tcs-icon-active{display:none}.tcs-collaboration-entry{padding:10px 20px}.tcs-icon-row{padding-left:20px;padding-right:20px;padding-bottom:5px}.tcs-collaboration-thread-author{font-size:14px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px}.tcs-collaboration-thread-text{font-size:11px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px}.tcs-collaboration-thread-date{font-size:10px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#b6b6b6}.tcs-collaboration-edited{font-size:10px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#ef5350;padding-right:4px}.tcs-collaboration-reply-icon{-webkit-transform:scale(-1,1);transform:scale(-1,1)}.tcs-collaboration-reply-item-icon{-webkit-transform:scale(1,-1);transform:scale(1,-1);margin-top:10px}.tcs-collaboration-reply-details{width:100%}.tcs-collaboration-thread-replies{font-size:12px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#0081cb}.tcs-icon{height:20px;width:20px}:host ::ng-deep .tcs-icon.tcs-collaboration-edit-buttons:hover path.svg-content{fill:#0081cb;cursor:pointer}:host ::ng-deep .tcs-icon.tcs-collaboration-edit-buttons:hover g.svg-content{fill:#0081cb;cursor:pointer}.tcs-icon.tcs-collaboration-edit-icon{margin-left:5px}.tcs-icon.tcs-collaboration-send-icon{height:24px;width:24px;margin-left:12px}:host ::ng-deep .tcs-icon.tcs-collaboration-send-icon:hover path.svg-content{fill:#0081cb}.tcs-collaboration-line{padding:0;margin:0 20px;border-bottom:1.1px solid #f4f4f4}.tcs-collaboration-reply-line{padding:0;margin-top:0;margin-right:20px;margin-bottom:0;border-bottom:1.1px solid #f4f4f4}.tcs-collaboration-new-thread{margin-left:20px;margin-right:20px;max-height:85px;height:85px;min-height:85px}.tcs-collaboration-edit-thread{margin-top:10px}.tcs-collaboration-new-reply{margin:10px 20px}.tcs-collaboration-input{height:55px;max-width:100%;border-color:#d5e6ff;font-size:11px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#b6b6b6;resize:none;border-radius:3px}.tcs-collaboration-reply-textbox{height:55px;max-width:100%;border-color:#d5e6ff;font-size:11px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#b6b6b6;resize:none;border-radius:3px;margin-top:20px;margin-bottom:20px}.tcs-collaboration-edit{height:55px;max-width:100%;border-color:#d5e6ff;font-size:11px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#b6b6b6;resize:none;border-radius:3px}.tcs-collaboration-new-thread-form{max-width:90%;max-height:100%}.tcs-collaboration-new-note-component,.tcs-collaboration-new-reply-component{height:85px;min-height:85px;max-height:85px;margin-left:20px;margin-right:20px}.tcs-no-item-text{font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#b6b6b6}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsNotesComponent.ctorParameters = function () { return [
            { type: LiveAppsService },
            { type: tcCoreLib.TcButtonsHelperService }
        ]; };
        LiveAppsNotesComponent.propDecorators = {
            relatedItemType: [{ type: core.Input }],
            relatedItemId: [{ type: core.Input }],
            userId: [{ type: core.Input }],
            showHeader: [{ type: core.Input }]
        };
        return LiveAppsNotesComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DocumentAction = /** @class */ (function () {
        function DocumentAction() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        DocumentAction.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return DocumentAction;
    }());
    var Document = /** @class */ (function () {
        function Document() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        Document.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return Document;
    }());
    var DocumentList = /** @class */ (function () {
        function DocumentList() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        DocumentList.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            (/** @type {?} */ (this)).documents = [];
            Object.assign((/** @type {?} */ (this)).documents, input);
            return (/** @type {?} */ (this));
        };
        return DocumentList;
    }());
    var OrgFolder = /** @class */ (function () {
        function OrgFolder() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        OrgFolder.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return OrgFolder;
    }());
    var DocTags = /** @class */ (function () {
        function DocTags() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        DocTags.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            return (/** @type {?} */ (this));
        };
        return DocTags;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TcDocumentService = /** @class */ (function () {
        function TcDocumentService(http, liveapps) {
            this.http = http;
            this.liveapps = liveapps;
        }
        /**
         * @param {?} name
         * @return {?}
         */
        TcDocumentService.prototype.createOrgFolder = /**
         * @param {?} name
         * @return {?}
         */
        function (name) {
            /** @type {?} */
            var url = '/webresource/v1/orgFolders/';
            /** @type {?} */
            var body = new OrgFolder().deserialize({ name: name });
            /** @type {?} */
            var bodyStr = JSON.stringify(body);
            /** @type {?} */
            var headers = new http.HttpHeaders()
                .set('Content-Type', 'application/json');
            return this.http.post(url, bodyStr, { headers: headers }).pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} response
             * @return {?}
             */
            function (response) { return new ApiResponseText().deserialize(response); })));
        };
        /**
         * @param {?} name
         * @param {?} useCache
         * @param {?} flushCache
         * @return {?}
         */
        TcDocumentService.prototype.getOrgFolder = /**
         * @param {?} name
         * @param {?} useCache
         * @param {?} flushCache
         * @return {?}
         */
        function (name, useCache, flushCache) {
            var _this = this;
            /** @type {?} */
            var url = '/webresource/v1/orgFolders/' + name + '/';
            /** @type {?} */
            var headers = new http.HttpHeaders();
            if (useCache) {
                headers = headers.set('cacheResponse', 'true');
            }
            if (flushCache) {
                headers = headers.set('flushCache', 'true');
            }
            /** @type {?} */
            var options = { headers: headers };
            return this.http.get(url, options).pipe(operators.map((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                return new OrgFolder().deserialize(response);
            })), operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                /** @type {?} */
                var apiError = new ApiResponseError().deserialize(error.error);
                if (apiError.errorCode === 'WR_FOLDER_DOES_NOT_EXIST') {
                    return _this.createOrgFolder(name).pipe(operators.flatMap((/**
                     * @param {?} newOrgFolder
                     * @return {?}
                     */
                    function (newOrgFolder) {
                        // trigger cache flush
                        return _this.getOrgFolder(name, true, true);
                    })));
                }
                else {
                    rxjs.throwError(error);
                }
            })));
        };
        /**
         * @param {?} name
         * @return {?}
         */
        TcDocumentService.prototype.initOrgFolder = /**
         * @param {?} name
         * @return {?}
         */
        function (name) {
            var _this = this;
            /** @type {?} */
            var orgFolder$ = this.getOrgFolder(name, true, false).pipe(operators.map((/**
             * @param {?} orgFolderResp
             * @return {?}
             */
            function (orgFolderResp) {
                return new ApiResponseText().deserialize({ message: 'orgFolder ok' });
            })), operators.catchError((/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                /** @type {?} */
                var apiError = new ApiResponseError().deserialize(error.error);
                if (apiError.errorCode === 'WR_FOLDER_DOES_NOT_EXIST') {
                    return _this.createOrgFolder(name).pipe(operators.map((/**
                     * @param {?} newOrgFolder
                     * @return {?}
                     */
                    function (newOrgFolder) {
                        // trigger cache flush
                        _this.getOrgFolder(name, true, true).subscribe();
                        return newOrgFolder;
                    })));
                }
                else {
                    rxjs.throwError(error);
                }
            })));
            return orgFolder$;
        };
        /**
         * @param {?} folderType
         * @param {?} folderId
         * @param {?} sandboxId
         * @param {?} filter
         * @return {?}
         */
        TcDocumentService.prototype.listDocuments = /**
         * @param {?} folderType
         * @param {?} folderId
         * @param {?} sandboxId
         * @param {?} filter
         * @return {?}
         */
        function (folderType, folderId, sandboxId, filter) {
            var _this = this;
            /** @type {?} */
            var url;
            url = '/webresource/v1/' + folderType + '/' + folderId + '/artifacts/';
            if (sandboxId) {
                url = url + '?$sandbox=' + sandboxId;
            }
            if (filter) {
                url = url + '&$filter=contains(name,\'' + filter + '\')';
            }
            return this.http.get(url)
                .pipe(operators.map((/**
             * @param {?} docs
             * @return {?}
             */
            function (docs) {
                /** @type {?} */
                var docList = new DocumentList().deserialize(docs);
                for (var x = 0; x < docList.documents.length; x++) {
                    docList.documents[x] = _this.parseDocument(docList.documents[x]);
                }
                return docList;
            })));
        };
        /**
         * @private
         * @param {?} document
         * @return {?}
         */
        TcDocumentService.prototype.parseDocument = /**
         * @private
         * @param {?} document
         * @return {?}
         */
        function (document) {
            /** @type {?} */
            var splitDocName = document.name.split('.');
            if (splitDocName.length > 1) {
                document.extension = splitDocName[splitDocName.length - 1];
            }
            else {
                document.extension = '';
            }
            document.fileIcon = this.getIcon(document.extension);
            document.fileSize = tcCoreLib.TcCoreCommonFunctions.fileSizeToHuman(Number(document.size));
            this.liveapps.getUserInfo(document.author).subscribe((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                document.authorDetails = val;
                return document;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { console.log('Unable to retrieve user details for user: ' + error.errorMsg); }));
            this.liveapps.getUserInfo(document.lastModifiedBy).subscribe((/**
             * @param {?} val
             * @return {?}
             */
            function (val) {
                document.lastModifiedByDetails = val;
                return document;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { console.log('Unable to retrieve user details for user: ' + error.errorMsg); }));
            return document;
        };
        /**
         * @param {?} folderType
         * @param {?} folderId
         * @param {?} documentName
         * @param {?} sandboxId
         * @return {?}
         */
        TcDocumentService.prototype.deleteDocument = /**
         * @param {?} folderType
         * @param {?} folderId
         * @param {?} documentName
         * @param {?} sandboxId
         * @return {?}
         */
        function (folderType, folderId, documentName, sandboxId) {
            /** @type {?} */
            var url = '/webresource/v1/' + folderType + '/' + folderId + '/artifacts/' + documentName + '?$sandbox=' + sandboxId;
            return this.http.delete(url)
                .pipe(operators.map((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return new ApiResponseText().deserialize(val); })));
        };
        /**
         * @param {?} folderType
         * @param {?} folderId
         * @param {?} docId
         * @param {?} docVersion
         * @param {?} sandboxId
         * @return {?}
         */
        TcDocumentService.prototype.getUrlForDocument = /**
         * @param {?} folderType
         * @param {?} folderId
         * @param {?} docId
         * @param {?} docVersion
         * @param {?} sandboxId
         * @return {?}
         */
        function (folderType, folderId, docId, docVersion, sandboxId) {
            /** @type {?} */
            var url = '/webresource/';
            if (folderType === 'orgFolders') {
                url = url + 'orgFolders/' + folderId;
            }
            else {
                url = url + 'folders/' + folderId;
            }
            if (sandboxId && folderType !== 'orgFolders') {
                url = url + '/' + sandboxId;
            }
            url = url + '/' + docId;
            if (docVersion) {
                url = url + '?$version=' + docVersion;
            }
            return url;
        };
        /**
         * @param {?} folderType
         * @param {?} folderId
         * @param {?} docId
         * @param {?} docVersion
         * @param {?} sandboxId
         * @return {?}
         */
        TcDocumentService.prototype.downloadDocument = /**
         * @param {?} folderType
         * @param {?} folderId
         * @param {?} docId
         * @param {?} docVersion
         * @param {?} sandboxId
         * @return {?}
         */
        function (folderType, folderId, docId, docVersion, sandboxId) {
            /** @type {?} */
            var url = '/webresource/';
            if (folderType === 'orgFolders') {
                url = url + 'orgFolders/' + folderId;
            }
            else {
                url = url + 'folders/' + folderId;
            }
            if (sandboxId && folderType !== 'orgFolders') {
                url = url + '/' + sandboxId;
            }
            url = url + '/' + docId + '?$download=true';
            if (docVersion) {
                url = url + '&$version=' + docVersion;
            }
            // todo: Check whether application/octet-stream is ok or whether we should change it
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'Content-Type': 'application/octet-stream',
            });
            return this.http.get(url, { headers: headers, responseType: (/** @type {?} */ ('blob')) });
        };
        /**
         * @param {?} folderType
         * @param {?} folderId
         * @param {?} sandboxId
         * @param {?} fileToUpload
         * @param {?} fileName
         * @param {?} description
         * @return {?}
         */
        TcDocumentService.prototype.uploadDocument = /**
         * @param {?} folderType
         * @param {?} folderId
         * @param {?} sandboxId
         * @param {?} fileToUpload
         * @param {?} fileName
         * @param {?} description
         * @return {?}
         */
        function (folderType, folderId, sandboxId, fileToUpload, fileName, description) {
            /** @type {?} */
            var url = '/webresource/v1/' + folderType
                + '/' + folderId
                + '/artifacts/' + fileName + '/upload/';
            if (sandboxId) {
                url = url + '?$sandbox=' + sandboxId;
            }
            if (description) {
                url = url + '&description=' + description;
            }
            /** @type {?} */
            var headers = new http.HttpHeaders({
                'accept': 'application/json',
                'Content-Type': 'multipart/form-data',
                'filename': fileName,
                'enctype': 'multipart/form-data'
            });
            /** @type {?} */
            var formData = new FormData();
            formData.append('artifactContents', fileToUpload);
            return this.http.post(url, formData, { headers: headers, reportProgress: true, observe: 'events' });
        };
        /**
         * @private
         * @param {?} extension
         * @return {?}
         */
        TcDocumentService.prototype.getIcon = /**
         * @private
         * @param {?} extension
         * @return {?}
         */
        function (extension) {
            if (extension === 'txt') {
                return ('doc');
            }
            else if (extension === 'css') {
                return ('doc');
            }
            else if (extension === 'js') {
                return ('doc');
            }
            else if (extension === 'pdf') {
                return ('doc');
            }
            else if (extension === 'xml') {
                return ('doc');
            }
            else if (extension === 'doc') {
                return ('doc');
            }
            else if (extension === 'zip') {
                return ('zip');
            }
            else if (extension === 'ppt') {
                return ('doc');
            }
            else if (extension === 'png') {
                return ('image');
            }
            else {
                return ('doc');
            }
        };
        TcDocumentService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TcDocumentService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: LiveAppsService }
        ]; };
        /** @nocollapse */ TcDocumentService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function TcDocumentService_Factory() { return new TcDocumentService(core.ɵɵinject(http.HttpClient), core.ɵɵinject(LiveAppsService)); }, token: TcDocumentService, providedIn: "root" });
        return TcDocumentService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Document List and upload Component
     *
     * This Component allows to list, upload, download, Documents attached to a Case-Instance or a whole Application.
     * In the Upload Dialog the User is able to select a local File and enter a short Description.
     *
     * The Component stores also the following Data
     * - uploading User
     * - Timestamp
     * - File Size
     *
     * Document List<br>
     * ![alt-text](../live-apps-documents.png "Documents Component Image")
     * Document Upload Dialog <br>
     * ![alt-text](../Docs-Upload.png "Documents Component Image")
     *
     * \@example <tcla-live-apps-documents></tcla-live-apps-documents>
     */
    var LiveAppsDocumentsComponent = /** @class */ (function (_super) {
        __extends(LiveAppsDocumentsComponent, _super);
        function LiveAppsDocumentsComponent(liveapps, documentsService, dialog) {
            var _this = _super.call(this) || this;
            _this.liveapps = liveapps;
            _this.documentsService = documentsService;
            _this.dialog = dialog;
            /**
             * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
             */
            _this.showHeader = _this.showHeader ? _this.showHeader : true;
            /**
             * Custom Document Action Event: fired when a custom action is clicked for a document (outputs the action name and a document (DocumentAction))
             */
            _this.customActionClicked = new core.EventEmitter();
            _this.fileToUpload = undefined;
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                _this.listDocuments();
            });
            _this.customActionClick = (/**
             * @param {?} action
             * @param {?} document
             * @return {?}
             */
            function (action, document) {
                _this.customActionClicked.emit(new DocumentAction().deserialize({
                    action: action,
                    document: document
                }));
            });
            _this.listDocuments = (/**
             * @return {?}
             */
            function () {
                _this.documentsService.listDocuments(_this.folderType, _this.folderId, _this.sandboxId, _this.filter)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} documentslist
                 * @return {?}
                 */
                function (documentslist) {
                    _this.documents = documentslist.documents;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error retrieving case states: ' + error.error.errorMsg; }));
            });
            _this.uploadDocument = (/**
             * @param {?} doc
             * @return {?}
             */
            function (doc) {
            });
            _this.removeDocument = (/**
             * @param {?} doc
             * @return {?}
             */
            function (doc) {
                _this.documentsService.deleteDocument(_this.folderType, _this.folderId, doc.name, _this.sandboxId)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    console.log(val);
                    _this.refresh();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error removing document: ' + error.errorMsg; }));
            });
            _this.viewDocument = (/**
             * @param {?} doc
             * @return {?}
             */
            function (doc) {
                /** @type {?} */
                var viewDocDialogRef = _this.dialog.open(LiveAppsDocumentViewerDialogComponent, {
                    width: '75%',
                    height: '75%',
                    data: {
                        doc: doc,
                        folderType: _this.folderType,
                        folderId: _this.folderId,
                        sandboxId: _this.sandboxId
                    }
                });
                viewDocDialogRef.afterClosed().subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                }));
            });
            _this.downloadDocument = (/**
             * @param {?} doc
             * @return {?}
             */
            function (doc) {
                _this.documentsService.downloadDocument(_this.folderType, _this.folderId, doc.name, doc.artifactVersion, _this.sandboxId)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} data
                 * @return {?}
                 */
                function (data) {
                    // todo: check if this works on all browsers
                    /** @type {?} */
                    var downloadURL = window.URL.createObjectURL(data);
                    /** @type {?} */
                    var link = document.createElement('a');
                    link.href = downloadURL;
                    link.download = doc.name;
                    link.click();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error downloading document: ' + error.errorMsg; }));
            });
            return _this;
        }
        /**
         * @param {?} files
         * @return {?}
         */
        LiveAppsDocumentsComponent.prototype.attachFile = /**
         * @param {?} files
         * @return {?}
         */
        function (files) {
            this.uploadMessage = '';
            this.fileToUpload = files.item(0);
        };
        /**
         * @param {?} description
         * @return {?}
         */
        LiveAppsDocumentsComponent.prototype.setFileDescription = /**
         * @param {?} description
         * @return {?}
         */
        function (description) {
            this.fileDescription = description;
        };
        /**
         * @param {?} fileToUpload
         * @param {?} description
         * @return {?}
         */
        LiveAppsDocumentsComponent.prototype.uploadFile = /**
         * @param {?} fileToUpload
         * @param {?} description
         * @return {?}
         */
        function (fileToUpload, description) {
            var _this = this;
            this.fileToUpload = fileToUpload;
            this.uploadMessage = 'Uploading: ' + fileToUpload.name;
            this.fileDescription = description;
            this.uploadProgress = 0;
            if (this.fileToUpload) {
                this.documentsService.uploadDocument(this.folderType, this.folderId, this.sandboxId, this.fileToUpload, this.fileToUpload.name, this.fileDescription)
                    .subscribe((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    if (response.type === http.HttpEventType.UploadProgress) {
                        _this.uploadProgress = Math.round(100 * response.loaded / response.total);
                        if (_this.uploadProgress === 100) {
                            _this.fileToUpload = undefined;
                            _this.uploadMessage = 'Uploaded: ' + fileToUpload.name;
                            // api seems not to show new documents straight away sometimes - so this minimizes the chances of that if file > 1mb
                            if (fileToUpload.size > 1000000) {
                                setTimeout((/**
                                 * @return {?}
                                 */
                                function () { _this.refresh(); }), 2000);
                            }
                            else {
                                _this.refresh();
                            }
                            setTimeout((/**
                             * @return {?}
                             */
                            function () { _this.uploadMessage = ''; _this.uploadProgress = undefined; }), 5000);
                        }
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { console.log('error'); _this.errorMessage = 'Error uploading document: ' + error.errorMsg; }));
            }
        };
        /**
         * @return {?}
         */
        LiveAppsDocumentsComponent.prototype.openDialog = /**
         * @return {?}
         */
        function () {
            var _this = this;
            // only allow if upload not in progress
            if (!this.uploadProgress || this.uploadProgress === 100) {
                /** @type {?} */
                var dialogRef = this.dialog.open(LiveAppsDocumentUploadDialogComponent, {
                    width: '500px',
                    data: {}
                });
                dialogRef.componentInstance.fileevent.subscribe((/**
                 * @param {?} $e
                 * @return {?}
                 */
                function ($e) {
                    _this.uploadFile($e.file, $e.description);
                }));
                dialogRef.afterClosed().subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                }));
            }
        };
        /**
         * @return {?}
         */
        LiveAppsDocumentsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.refresh();
        };
        LiveAppsDocumentsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-documents',
                        template: "<div class=\"tcs-documents-pane\" fxFill fxLayout=\"column\">\n  <div *ngIf=\"showHeader\" class=\"tcs-documents-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    <div fxLayoutAlign=\"start center\">\n      <mat-icon class=\"tcs-icon tcs-icon-active tcs-collaboration-feed\" svgIcon=\"tcs-document-library\"></mat-icon>\n      <div class=\"tcs-documents-header-text\">{{folderDescription ? folderDescription : 'Documents'}}</div>\n    </div>\n    <mat-icon (click)=\"openDialog()\" [ngClass]=\"{'tcs-icon-disabled' : uploadProgress < 100}\" class=\"tcs-icon tcs-icon-active tcs-document-edit-buttons tcs-document-upload-icon\" [matTooltip]=\"(uploadProgress && uploadProgress !== 100) ? 'Please wait for existing document to upload' : 'Upload Document'\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\" svgIcon=\"tcs-document-upload\"></mat-icon>\n  </div>\n  <div *ngIf=\"!showHeader\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <mat-icon style=\"margin: 5px\" [ngClass]=\"{'tcs-icon-disabled' : uploadProgress < 100}\" (click)=\"openDialog()\" class=\"tcs-icon tcs-icon-active tcs-document-edit-buttons tcs-document-upload-icon\" [matTooltip]=\"(uploadProgress && uploadProgress !== 100) ? 'Please wait for existing document to upload' : 'Upload Document'\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\" svgIcon=\"tcs-document-upload\"></mat-icon>\n  </div>\n  <div fxLayout=\"column\" style=\"overflow: auto\">\n    <div *ngIf=\"uploadProgress\">\n      <div>{{uploadMessage}}</div>\n      <mat-progress-bar\n        mode=\"determinate\"\n        [value]=\"uploadProgress\"\n      >\n      </mat-progress-bar>\n    </div>\n    <div class=\"tcs-document-list\" fxLayout=\"column\">\n      <div *ngIf=\"documents && documents.length > 0\">\n        <div class=\"tcs-document-detail-box tcs-document\" *ngFor=\"let document of documents | orderByDate: 'lastModifiedDate'\" fxLayout=\"column\">\n          <div class=\"tcs-document-box\" fxLayoutAlign=\"space-between center\" fxLayout=\"row\" fxFlex>\n            <div fxLayoutAlign=\"start center\">\n              <mat-icon class=\"tcs-icon tcs-icon-active tcs-document-type-icon\" svgIcon=\"tcs-document-{{document.fileIcon}}\"></mat-icon>\n            </div>\n            <div class=\"tcs-document-details-text-box\" fxLayout=\"column\" fxLayoutAlign=\"center start\" fxFlex>\n                <div fxLayout=\"row\" fxLayoutAlign=\"start center\" fxFill>\n                  <div class=\"tcs-document-name-text\" matTooltip=\"{{document.name}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">{{document.name | ellipsis: 30}}</div>\n                  <div fxLayout=\"row\" fxLayoutAlign=\"end center\" fxFlex>\n                    <div class=\"tcs-document-filesize-text\">&nbsp;({{document.fileSize}})</div>\n                  </div>\n                </div>\n                <div class=\"tcs-document-comment-text\" matTooltip=\"{{document.description}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">{{document.description | ellipsis: 50}}</div>\n              <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n                <div class=\"tcs-document-modified-text\">{{document.lastModifiedDate | durationSince}}</div>\n                <div *ngIf=\"document.lastModifiedByDetails\" class=\"tcs-document-modified-text\" matTooltip=\"{{document.lastModifiedByDetails.username}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">&nbsp;by {{document.lastModifiedByDetails.username | ellipsis: 40}}</div>\n              </div>\n            </div>\n\n            <div fxLayoutAlign=\"end center\">\n              <mat-icon [matMenuTriggerFor]=\"docActionMenu\" class=\"tcs-icon tcs-icon-active tcs-document-action-icon\" svgIcon=\"tcs-document-action\"></mat-icon>\n              <mat-menu #docActionMenu=\"matMenu\" class=\"tcs-icon tcs-icon-active tcs-document-action-icon\">\n                <button class=\"tcs-document-action-text\" mat-menu-item (click)=\"viewDocument(document)\">View</button>\n                <button class=\"tcs-document-action-text\" mat-menu-item (click)=\"downloadDocument(document)\">Download</button>\n                <button class=\"tcs-document-action-text\" mat-menu-item (click)=\"removeDocument(document)\">Delete</button>\n                <button *ngFor=\"let customAction of customActions\" class=\"tcs-document-action-text\" mat-menu-item (click)=\"customActionClick(customAction, document)\">{{customAction}}</button>\n              </mat-menu>\n\n\n            </div>\n          </div>\n          <div class=\"tcs-document-line\"></div>\n        </div>\n      </div>\n      <div *ngIf=\"!(documents?.length > 0)\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxLayoutGap=\"10px\" style=\"margin-top: 20px;\">\n        <mat-icon [svgIcon]=\"'ic-no-docs-icon'\" style=\"height: 48px; width: 48px;\"></mat-icon>\n        <div style=\"height: 100%\" fxLayoutAlign=\"start center\">\n          <span class=\"tcs-no-item-text\">No documents found</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n",
                        styles: [".tcs-hidden-input{display:none}.tcs-small-pane{width:400px;max-width:400px;height:386px;max-height:400px;border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff;margin:0;padding:0}.tcs-documents-pane{border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff}.tcs-documents-header{min-height:40px;height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-documents-header-text{margin-left:10px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px}.tcs-document-name-text{font-family:Source Sans Pro;font-size:16px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#0081cb}.tcs-document-comment-text{font-family:Source Sans Pro;font-size:12px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#727272}.tcs-document-filesize-text,.tcs-document-modified-text{font-family:Source Sans Pro;font-size:10px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#b6b6b6}.tcs-document-details-text-box{padding:2px 10px}:host ::ng-deep .tcs-icon-disabled.tcs-icon.tcs-document-edit-buttons path.svg-content{fill:#b6b6b6}:host ::ng-deep .tcs-icon-disabled.tcs-icon.tcs-document-edit-buttons:hover path.svg-content{fill:#b6b6b6;cursor:not-allowed}:host ::ng-deep .tcs-icon.tcs-document-edit-buttons:hover path.svg-content{fill:#0081cb;cursor:pointer}:host ::ng-deep .tcs-icon.tcs-document-edit-icon:hover path.svg-content{fill:#0081cb;cursor:pointer}.tcs-document-detail-box{min-height:85px;flex-shrink:0;padding-left:20px;padding-right:20px}.tcs-document-detail-box:hover{background-color:#eef0f7;-webkit-transition:background-color .5s;transition:background-color .5s}.tcs-document-line{padding:0;margin:0 20px;border-bottom:1.1px solid #f4f4f4}.tcs-document-list{overflow-y:auto}.tcs-no-item-text{font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#b6b6b6}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsDocumentsComponent.ctorParameters = function () { return [
            { type: LiveAppsService },
            { type: TcDocumentService },
            { type: material.MatDialog }
        ]; };
        LiveAppsDocumentsComponent.propDecorators = {
            sandboxId: [{ type: core.Input }],
            folderType: [{ type: core.Input }],
            folderId: [{ type: core.Input }],
            filter: [{ type: core.Input }],
            folderDescription: [{ type: core.Input }],
            showHeader: [{ type: core.Input }],
            customActions: [{ type: core.Input }],
            customActionClicked: [{ type: core.Output }]
        };
        return LiveAppsDocumentsComponent;
    }(LiveAppsComponent));
    var LiveAppsDocumentUploadDialogComponent = /** @class */ (function () {
        function LiveAppsDocumentUploadDialogComponent(dialogRef) {
            var _this = this;
            this.dialogRef = dialogRef;
            this.fileevent = new core.EventEmitter();
            this.fileToUpload = undefined;
            this.description = undefined;
            this.uploadFile = (/**
             * @return {?}
             */
            function () {
                if (_this.fileToUpload) {
                    _this.fileevent.emit({ file: _this.fileToUpload, description: _this.description });
                    _this.dialogRef.close();
                }
            });
        }
        /**
         * @param {?} description
         * @return {?}
         */
        LiveAppsDocumentUploadDialogComponent.prototype.setFileDescription = /**
         * @param {?} description
         * @return {?}
         */
        function (description) {
            this.description = description;
        };
        /**
         * @param {?} files
         * @return {?}
         */
        LiveAppsDocumentUploadDialogComponent.prototype.attachFile = /**
         * @param {?} files
         * @return {?}
         */
        function (files) {
            // this.uploadMessage = '';
            this.fileToUpload = files.item(0);
        };
        /**
         * @return {?}
         */
        LiveAppsDocumentUploadDialogComponent.prototype.onNoClick = /**
         * @return {?}
         */
        function () {
            this.dialogRef.close();
        };
        LiveAppsDocumentUploadDialogComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-document-upload-dialog',
                        template: "<h1 mat-dialog-title>Upload New File</h1>\n<div mat-dialog-content>\n  <form #fileUploadForm=\"ngForm\" fxFlex fxLayout=\"column\">\n    <div fxLayout=\"row\">\n      <button type=\"button\" mat-raised-button (click)=\"fileInput.click()\">Choose File To Upload</button>\n      <div *ngIf=\"fileToUpload\">{{fileToUpload.name}}</div>\n      <!-- below input is hidden and enabled by above button -->\n      <input class=\"tcs-hidden-input\" (change)=\"attachFile($event.target.files)\" #fileInput type=\"file\" id=\"file\">\n    </div>\n    <mat-form-field fxFlex>\n      <input matInput name=\"description\" type=\"text\" placeholder=\"Comments\" [(ngModel)]=\"description\"/>\n    </mat-form-field>\n\n  </form>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"uploadFile()\" type=\"submit\" [disabled]=\"!fileToUpload\">Upload</button>\n  <button mat-button (click)=\"onNoClick()\">Cancel</button>\n</div>\n",
                        styles: [".tcs-hidden-input{display:none}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsDocumentUploadDialogComponent.ctorParameters = function () { return [
            { type: material.MatDialogRef }
        ]; };
        LiveAppsDocumentUploadDialogComponent.propDecorators = {
            fileevent: [{ type: core.Output }]
        };
        return LiveAppsDocumentUploadDialogComponent;
    }());
    var LiveAppsDocumentViewerDialogComponent = /** @class */ (function () {
        function LiveAppsDocumentViewerDialogComponent(dialogRef, data) {
            this.dialogRef = dialogRef;
            this.data = data;
            this.doc = this.data.doc;
            this.folderType = this.data.folderType;
            this.folderId = this.data.folderId;
            this.sandboxId = this.data.sandboxId;
        }
        /**
         * @return {?}
         */
        LiveAppsDocumentViewerDialogComponent.prototype.onNoClick = /**
         * @return {?}
         */
        function () {
            this.dialogRef.close();
        };
        LiveAppsDocumentViewerDialogComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-document-viewer-dialog',
                        template: "<div fxFill fxLayout=\"column\">\n<h1 mat-dialog-title>View Document</h1>\n<div mat-dialog-content fxFlex=\"grow\" style=\"overflow: hidden\">\n  <tcla-live-apps-document-viewer [document]=\"doc\" [folderId]=\"folderId\" [folderType]=\"folderType\" [sandboxId]=\"sandboxId\"></tcla-live-apps-document-viewer>\n</div>\n<div mat-dialog-actions>\n  <button mat-button (click)=\"onNoClick()\">Close</button>\n</div>\n</div>\n",
                        styles: [".tcs-hidden-input{display:none}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsDocumentViewerDialogComponent.ctorParameters = function () { return [
            { type: material.MatDialogRef },
            { type: undefined, decorators: [{ type: core.Inject, args: [material.MAT_DIALOG_DATA,] }] }
        ]; };
        return LiveAppsDocumentViewerDialogComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CaseInfoWithSchema = /** @class */ (function () {
        function CaseInfoWithSchema() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseInfoWithSchema.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CaseInfoWithSchema;
    }());
    var PurgeResult = /** @class */ (function () {
        function PurgeResult() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        PurgeResult.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return PurgeResult;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TcCaseDataService = /** @class */ (function () {
        function TcCaseDataService(http, liveAppsService, caseCardConfigService) {
            this.http = http;
            this.liveAppsService = liveAppsService;
            this.caseCardConfigService = caseCardConfigService;
        }
        /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @return {?}
         */
        TcCaseDataService.prototype.getCaseState = /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @return {?}
         */
        function (caseRef, sandboxId) {
            /** @type {?} */
            var url = '/case/v1/cases/' + caseRef + '/' + '?$sandbox=' + sandboxId + '&$select=s';
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} caseinfo
             * @return {?}
             */
            function (caseinfo) {
                /** @type {?} */
                var caseinf = new CaseInfo().deserialize(caseinfo);
                /** @type {?} */
                var state = caseinf.summaryObj.state;
                return state;
            })));
        };
        /**
         * @param {?} applicationId
         * @param {?} typeId
         * @param {?} sandboxId
         * @return {?}
         */
        TcCaseDataService.prototype.purgeAllCases = /**
         * @param {?} applicationId
         * @param {?} typeId
         * @param {?} sandboxId
         * @return {?}
         */
        function (applicationId, typeId, sandboxId) {
            /** @type {?} */
            var url = '/case/v1/cases/?$sandbox=1930&$filter=applicationId eq 2550 and typeId eq 1 and purgeable eq TRUE';
            return this.http.delete(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                return new PurgeResult().deserialize(result);
            })));
        };
        /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} uiAppId
         * @return {?}
         */
        TcCaseDataService.prototype.getCaseWithSchema = /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} uiAppId
         * @return {?}
         */
        function (caseRef, sandboxId, appId, typeId, uiAppId) {
            var _this = this;
            /** @type {?} */
            var url = '/case/v1/cases/' + caseRef + '/' + '?$sandbox=' + sandboxId + '&$select=uc, m, s';
            // Make the two required API calls
            /** @type {?} */
            var caseSchema = this.liveAppsService.getCaseTypeSchema(sandboxId, appId, 100).pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} typesList
             * @return {?}
             */
            function (typesList) {
                // get schema for case type
                /** @type {?} */
                var requestedType;
                typesList.casetypes.forEach((/**
                 * @param {?} cType
                 * @return {?}
                 */
                function (cType) {
                    if (cType.id === typeId) {
                        requestedType = cType;
                    }
                }));
                return requestedType;
            })));
            /** @type {?} */
            var caseData = this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} caseinfo
             * @return {?}
             */
            function (caseinfo) {
                /** @type {?} */
                var caseinf = new CaseInfo().deserialize(caseinfo);
                _this.caseCardConfigService.parseCaseInfo(caseinf, sandboxId, caseinf.metadata.applicationId, caseinf.metadata.typeId, uiAppId);
                return caseinf;
            })));
            // Combine the results of both calls into a single response
            /** @type {?} */
            var test1 = rxjs.zip(caseSchema, caseData).pipe(operators.map((/**
             * @param {?} caseInfoArray
             * @return {?}
             */
            function (caseInfoArray) {
                return new CaseInfoWithSchema().deserialize({ caseInfo: caseInfoArray[1], caseSchema: caseInfoArray[0].jsonSchema, applicationName: caseInfoArray[0].applicationName, applicationInternalName: caseInfoArray[0].applicationInternalName, name: caseInfoArray[0].name });
            })));
            return test1;
        };
        TcCaseDataService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TcCaseDataService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: LiveAppsService },
            { type: TcCaseCardConfigService }
        ]; };
        /** @nocollapse */ TcCaseDataService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function TcCaseDataService_Factory() { return new TcCaseDataService(core.ɵɵinject(http.HttpClient), core.ɵɵinject(LiveAppsService), core.ɵɵinject(TcCaseCardConfigService)); }, token: TcCaseDataService, providedIn: "root" });
        return TcCaseDataService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var StateAuditEventList = /** @class */ (function () {
        function StateAuditEventList() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        StateAuditEventList.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            (/** @type {?} */ (this)).auditEvents = [];
            Object.assign((/** @type {?} */ (this)).auditEvents, input);
            return (/** @type {?} */ (this));
        };
        return StateAuditEventList;
    }());
    var StateTrackerData = /** @class */ (function () {
        function StateTrackerData() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        StateTrackerData.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return StateTrackerData;
    }());
    var TrackerState = /** @class */ (function () {
        function TrackerState() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        TrackerState.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return TrackerState;
    }());
    var StateTracker = /** @class */ (function () {
        function StateTracker() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        StateTracker.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            (/** @type {?} */ (this)).states = [];
            Object.assign((/** @type {?} */ (this)).states, input);
            return (/** @type {?} */ (this));
        };
        return StateTracker;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var MILESTONE_SVG = {
        END_SECTION_COMPLETED_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
            '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z"/>\n' +
            '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
            '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
            '    </text>\n' +
            '</svg>\n',
        END_SECTION_INPROGESS_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
            '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z"/>\n' +
            '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
            '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
            '    </text>\n' +
            '</svg>\n',
        END_SECTION_PENDING_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
            '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M0 0h76c9.941 0 18 8.059 18 18s-8.059 18-18 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0z"/>\n' +
            '    <text class="pending-text" fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
            '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
            '    </text>\n' +
            '</svg>\n',
        FIRST_SECTION_COMPLETED_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
            '<path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z"/>\n' +
            '<text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
            '    <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
            '</text>\n' +
            '</svg>\n',
        FIRST_SECTION_INPROGRESS_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
            '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z"/>\n' +
            '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
            '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
            '    </text>\n' +
            '</svg>',
        FIRST_SECTION_PENDING_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="94" height="36" viewBox="0 0 94 36">\n' +
            '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M93.42 0C87.176 3.675 83 10.361 83 18c0 7.639 4.176 14.325 10.42 18H0c6.36-3.675 10.614-10.361 10.614-18C10.614 10.361 6.36 3.675 0 0h93.42z"/>\n' +
            '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
            '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
            '    </text>\n' +
            '</svg>\n',
        MIDDLE_SECTION_COMPLETED_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="164" height="36" viewBox="0 0 164 36">\n' +
            '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z"/>\n' +
            '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
            '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
            '    </text>\n' +
            '</svg>\n',
        MIDDLE_SECTION_INPROGRESS_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="164" height="36" viewBox="0 0 164 36">\n' +
            '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z"/>\n' +
            '    <text fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
            '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
            '    </text>\n' +
            '</svg>\n',
        MIDDLE_SECTION_PENDING_SVG: '<svg xmlns="http://www.w3.org/2000/svg" width="164" height="36" viewBox="0 0 164 36">\n' +
            '    <path class="{{milestoneBgClass}}" fill="none" fill-rule="evenodd" d="M164 0c-6.09 3.675-10.163 10.361-10.163 18 0 7.639 4.073 14.325 10.163 18H0c6.095-3.675 10.172-10.361 10.172-18C10.172 10.361 6.095 3.675 0 0h164z"/>\n' +
            '    <text class="pending-text" fill="#FFF" font-family="SourceSansPro-Regular, Source Sans Pro" font-size="14">\n' +
            '        <tspan x="16" y="23" class="{{milestoneLabelClass}}">{{milestoneLabel}}</tspan>\n' +
            '    </text>\n' +
            '</svg>\n'
    };
    var TcCaseStatesService = /** @class */ (function () {
        function TcCaseStatesService(http, liveAppsService, caseDataService, sanitizer, location) {
            var _this = this;
            this.http = http;
            this.liveAppsService = liveAppsService;
            this.caseDataService = caseDataService;
            this.sanitizer = sanitizer;
            this.location = location;
            this.getTrackerData = (/**
             * @param {?} caseRef
             * @param {?} sandboxId
             * @param {?} appId
             * @return {?}
             */
            function (caseRef, sandboxId, appId) {
                // merge the result of these three API calls into one object
                /** @type {?} */
                var caseState$ = _this.caseDataService.getCaseState(caseRef, sandboxId);
                /** @type {?} */
                var possibleStates$ = _this.liveAppsService.getCaseTypeStates(sandboxId, appId, 100);
                /** @type {?} */
                var stateAudit$ = _this.getCaseStateAudit(caseRef, sandboxId);
                return rxjs.forkJoin([caseState$, possibleStates$, stateAudit$]).pipe(operators.map((/**
                 * @param {?} resultArr
                 * @return {?}
                 */
                function (resultArr) {
                    return new StateTrackerData().deserialize({ possibleStates: resultArr[1], currentState: resultArr[0], caseAudit: resultArr[2].auditEvents });
                })));
            });
            this.buildTracker = (/**
             * @param {?} trackerData
             * @return {?}
             */
            function (trackerData) {
                /** @type {?} */
                var tracker = new StateTracker();
                tracker.states = [];
                if (trackerData.caseAudit.length <= 0) {
                    // if no audit it has likely been deleted and we cannot create a milestone trailer
                    tracker.valid = false;
                }
                else {
                    // work out the status of each state
                    // possible states: 'pending', 'inprogress', 'completed'
                    trackerData.possibleStates.states.forEach((/**
                     * @param {?} state
                     * @return {?}
                     */
                    function (state) {
                        /** @type {?} */
                        var stateLabel = state.label;
                        /** @type {?} */
                        var stateName = state.value;
                        /** @type {?} */
                        var trackerState = new TrackerState();
                        trackerState.phase = '';
                        trackerState.previousPhase = '';
                        // no specific name coming from API so use label.
                        trackerState.name = state.label;
                        trackerState.label = state.label;
                        trackerState.isTerminal = state.isTerminal ? state.isTerminal : false;
                        // find last event for this state
                        /** @type {?} */
                        var reversedEvents = [];
                        Object.assign(reversedEvents, trackerData.caseAudit);
                        reversedEvents.reverse();
                        /** @type {?} */
                        var idx = reversedEvents.findIndex((/**
                         * @param {?} auditEvent
                         * @return {?}
                         */
                        function (auditEvent) { return auditEvent.caseState.value === state.value; }));
                        /** @type {?} */
                        var origIdx = (trackerData.caseAudit.length - 1) - idx;
                        /** @type {?} */
                        var thisEvent;
                        if (idx === -1) {
                            // no audit events so we haven't reached this state yet
                            trackerState.status = 'pending';
                        }
                        else {
                            thisEvent = trackerData.caseAudit[origIdx];
                            trackerState.user = thisEvent.principalName ? thisEvent.principalName.value : 'system';
                            trackerState.changed = thisEvent.creationTime ? thisEvent.creationTime.value : '';
                            trackerState.phase = thisEvent.phaseLabel ? thisEvent.phaseLabel.value : undefined;
                            trackerState.previousPhase = thisEvent.previousPhaseLabel ? thisEvent.previousPhaseLabel.value : undefined;
                            if (state.isTerminal) {
                                // if we have audit for this state and it is terminal it must be completed
                                trackerState.status = 'completed';
                            }
                            else if ((trackerData.caseAudit.length - 1) === origIdx) {
                                // if this is the last audit entry then it is in progress
                                trackerState.status = 'inprogress';
                            }
                            else {
                                // otherwise it must be completed
                                trackerState.status = 'completed';
                            }
                        }
                        tracker.states.push(trackerState);
                        tracker.valid = true;
                    }));
                }
                return tracker;
            });
            this.getTracker = (/**
             * @param {?} caseRef
             * @param {?} sandboxId
             * @param {?} appId
             * @return {?}
             */
            function (caseRef, sandboxId, appId) {
                /** @type {?} */
                var tracker$ = _this.getTrackerData(caseRef, sandboxId, appId).pipe(operators.map((/**
                 * @param {?} trackerData
                 * @return {?}
                 */
                function (trackerData) {
                    return _this.buildTracker(trackerData);
                })));
                return tracker$;
            });
        }
        /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} appId
         * @return {?}
         */
        TcCaseStatesService.prototype.getCaseStateAuditWithTerminal = /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} appId
         * @return {?}
         */
        function (caseRef, sandboxId, appId) {
            /** @type {?} */
            var possibleStates$ = this.liveAppsService.getCaseTypeStates(sandboxId, appId, 100);
            /** @type {?} */
            var caseStateAudit$ = this.getCaseStateAudit(caseRef, sandboxId);
            return rxjs.forkJoin([possibleStates$, caseStateAudit$]).pipe(operators.map((/**
             * @param {?} resultArr
             * @return {?}
             */
            function (resultArr) {
                /** @type {?} */
                var possibleStates = resultArr[0];
                /** @type {?} */
                var caseStateAudit = resultArr[1];
                // mark if any are terminal states
                caseStateAudit.auditEvents.forEach((/**
                 * @param {?} auditEvent
                 * @return {?}
                 */
                function (auditEvent) {
                    /** @type {?} */
                    var foundState = possibleStates.states.find((/**
                     * @param {?} state
                     * @return {?}
                     */
                    function (state) { return state.value === auditEvent.caseState.value; }));
                    auditEvent.isTerminal = foundState.isTerminal ? foundState.isTerminal : false;
                }));
                return caseStateAudit;
            })));
        };
        /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @return {?}
         */
        TcCaseStatesService.prototype.getCaseStateAudit = /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @return {?}
         */
        function (caseRef, sandboxId) {
            /** @type {?} */
            var url = '/event/v1/auditEvents?$sandbox=' + sandboxId
                + '&$filter=type eq \'casestate\''
                + ' and id eq \'' + caseRef + '\'';
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} caseaudit
             * @return {?}
             */
            function (caseaudit) { return new StateAuditEventList().deserialize(caseaudit); })));
        };
        /**
         * @param {?} stateLabel
         * @param {?} labelClass
         * @param {?} bgClass
         * @param {?} svgFileName
         * @return {?}
         */
        TcCaseStatesService.prototype.getMilestoneSectionSvg = /**
         * @param {?} stateLabel
         * @param {?} labelClass
         * @param {?} bgClass
         * @param {?} svgFileName
         * @return {?}
         */
        function (stateLabel, labelClass, bgClass, svgFileName) {
            /*return this.liveAppsService.getIconSVGText(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/icons/milestones/' + svgFileName)).pipe(
              map(svgcontents => {
                let updatedsvg = svgcontents.replace('{{milestoneLabel}}', stateLabel);
                updatedsvg = updatedsvg.replace('{{milestoneBgClass}}', bgClass);
                updatedsvg = updatedsvg.replace('{{milestoneLabelClass}}', labelClass);
                const newval = this.sanitizer.bypassSecurityTrustHtml(updatedsvg);
                return newval;
              })
            );*/
            // convert svgFileName to the inline property name
            svgFileName = svgFileName.toUpperCase();
            /** @type {?} */
            var regEx = /-|\./gi;
            svgFileName = svgFileName.replace(regEx, '_');
            /** @type {?} */
            var svgcontents = MILESTONE_SVG[svgFileName];
            if (svgcontents) {
                /** @type {?} */
                var updatedsvg = svgcontents.replace('{{milestoneLabel}}', stateLabel);
                updatedsvg = updatedsvg.replace('{{milestoneBgClass}}', bgClass);
                updatedsvg = updatedsvg.replace('{{milestoneLabelClass}}', labelClass);
                /** @type {?} */
                var newval = this.sanitizer.bypassSecurityTrustHtml(updatedsvg);
                return newval;
            }
            else {
                return undefined;
            }
        };
        TcCaseStatesService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TcCaseStatesService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: LiveAppsService },
            { type: TcCaseDataService },
            { type: platformBrowser.DomSanitizer },
            { type: common.Location }
        ]; };
        /** @nocollapse */ TcCaseStatesService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function TcCaseStatesService_Factory() { return new TcCaseStatesService(core.ɵɵinject(http.HttpClient), core.ɵɵinject(LiveAppsService), core.ɵɵinject(TcCaseDataService), core.ɵɵinject(platformBrowser.DomSanitizer), core.ɵɵinject(common.Location)); }, token: TcCaseStatesService, providedIn: "root" });
        return TcCaseStatesService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Case States/Milestone view
     *
     * ![alt-text](../live-apps-case-states.png "Image")
     *
     * \@example <tcla-live-apps-case-states></tcla-live-apps-case-states>
     */
    var LiveAppsCaseStatesComponent = /** @class */ (function (_super) {
        __extends(LiveAppsCaseStatesComponent, _super);
        function LiveAppsCaseStatesComponent(caseStatesService, durationSince) {
            var _this = _super.call(this) || this;
            _this.caseStatesService = caseStatesService;
            _this.durationSince = durationSince;
            _this.getToolTipText = (/**
             * @param {?} trackerState
             * @return {?}
             */
            function (trackerState) {
                /** @type {?} */
                var toolTipText = '';
                if (trackerState.status != 'pending') {
                    toolTipText = toolTipText + trackerState.user + ' ' + _this.durationSince.transform(trackerState.changed);
                }
                return toolTipText;
            });
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                _this.caseStatesService.getTracker(_this.caseRef, _this.sandboxId, _this.appId).pipe(operators.take(1), operators.takeUntil(_this._destroyed$)).subscribe((/**
                 * @param {?} tracker
                 * @return {?}
                 */
                function (tracker) {
                    _this.tracker = tracker;
                    if (!tracker.valid) {
                        console.error('Unable to create milestone trailer. Case Audit likely removed due to subscription retention period.');
                    }
                    return tracker;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error constructing state tracker: ' + error.error.errorMsg; }));
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsCaseStatesComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.refresh();
        };
        LiveAppsCaseStatesComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-states',
                        template: "<div fxFlex class=\"starters-case-states-container\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n  <div *ngIf=\"tracker && tracker.valid\">\n    <span class=\"tc-milestone-title\" fxLayoutAlign=\"start center\">Milestones</span>\n    <div fxFlex class=\"starters-milestone-trailer\" fxLayout=\"row wrap\">\n      <div class=\"starters-ms-wrapper\" *ngFor=\"let trackerState of tracker.states; first as isFirst; last as isLast\" ngclass=\"{'starters-milestone-first-section': isFirst, 'starters-milestone-mid-section': (!isFirst && !isLast), 'starters-milestone-end-section': isLast}\">\n        <tcla-live-apps-milestone [isFirst]=\"isFirst\" [isLast]=\"isLast\" [isTerminal]=\"trackerState.isTerminal\" [label]=\"trackerState.label\" [phase]=\"trackerState.phase\" [previousPhase]=\"trackerState.previousPhase\" [status]=\"trackerState.status\" [matTooltip]=\"getToolTipText(trackerState)\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\"></tcla-live-apps-milestone>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"tracker && !tracker.valid\">\n    <span class=\"tc-milestone-title\">Milestone data not available</span>\n  </div>\n</div>\n\n\n",
                        styles: [".tc-milestone-title{min-width:150px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;color:#000}:host ::ng-deep tcla-live-apps-milestone .tc-ms-pending-bg{fill:#dedede}:host ::ng-deep tcla-live-apps-milestone .tc-ms-inprogress-bg{fill:#0081cb}:host ::ng-deep tcla-live-apps-milestone .tc-ms-completed-bg{fill:#062e79}:host ::ng-deep tcla-live-apps-milestone .tc-ms-completed-terminal-bg{fill:#04be5b}:host ::ng-deep tcla-live-apps-milestone .tc-ms-label{color:#000}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCaseStatesComponent.ctorParameters = function () { return [
            { type: TcCaseStatesService },
            { type: tcCoreLib.DurationSincePipe }
        ]; };
        LiveAppsCaseStatesComponent.propDecorators = {
            appId: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }],
            caseRef: [{ type: core.Input }]
        };
        return LiveAppsCaseStatesComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Manages summary card configuration
     *
     * \@example <tcla-live-apps-application-configuration></tcla-live-apps-application-configuration>
     */
    var LiveAppsApplicationConfigurationComponent = /** @class */ (function (_super) {
        __extends(LiveAppsApplicationConfigurationComponent, _super);
        function LiveAppsApplicationConfigurationComponent(http, sanitizer, liveapps, caseCardConfigService, documentsService, dialog, location) {
            var _this = _super.call(this) || this;
            _this.http = http;
            _this.sanitizer = sanitizer;
            _this.liveapps = liveapps;
            _this.caseCardConfigService = caseCardConfigService;
            _this.documentsService = documentsService;
            _this.dialog = dialog;
            _this.location = location;
            /**
             * ~event configChanged : Configuration values changed
             * ~payload CaseCardConfig : CaseCardConfig object when configuration is changed (so called can do a save with data)
             */
            _this.configChanged = new core.EventEmitter();
            // prepareExternalUrl will add the base href
            _this.DEFAULT_CASE_TYPE_ICON = 'assets/icons/ic-generic-casetype.svg';
            _this.DEFAULT_CASE_TYPE_COLOR = DEFAULT_TYPE_COLOR;
            _this.DEFAULT_CASE_STATE_ICON = 'assets/icons/ic-generic-state.svg';
            _this.DEFAULT_CASE_STATE_COLOR = DEFAULT_STATE_COLOR;
            _this.DEFAULT_COLOR_PALETTE = DEFAULT_COLORS;
            _this.getConfigForState = (/**
             * @param {?} state
             * @return {?}
             */
            function (state) {
                /** @type {?} */
                var reqIconMap;
                if (_this.caseCardConfig.cardConfig && _this.caseCardConfig.cardConfig.stateMap) {
                    _this.caseCardConfig.cardConfig.stateMap.forEach((/**
                     * @param {?} stateMap
                     * @return {?}
                     */
                    function (stateMap) {
                        if (stateMap.state === state.value) {
                            reqIconMap = stateMap;
                        }
                    }));
                }
                return reqIconMap ? reqIconMap : new IconMap(false, state.value, _this.DEFAULT_CASE_STATE_COLOR, _this.DEFAULT_CASE_STATE_ICON);
            });
            _this.getConfigForCaseType = (/**
             * @param {?} caseTypeId
             * @return {?}
             */
            function (caseTypeId) {
                /** @type {?} */
                var reqIconMap;
                if (_this.caseCardConfig.cardConfig && _this.caseCardConfig.cardConfig.stateMap) {
                    _this.caseCardConfig.cardConfig.stateMap.forEach((/**
                     * @param {?} stateMap
                     * @return {?}
                     */
                    function (stateMap) {
                        if (stateMap.isCaseType) {
                            reqIconMap = stateMap;
                        }
                    }));
                }
                return reqIconMap ? reqIconMap : new IconMap(true, caseTypeId, _this.DEFAULT_CASE_TYPE_COLOR, _this.DEFAULT_CASE_TYPE_ICON);
            });
            _this.updateIconMap = (/**
             * @param {?} stateConfig
             * @return {?}
             */
            function (stateConfig) {
                /** @type {?} */
                var foundMap;
                if (_this.caseCardConfig.cardConfig && _this.caseCardConfig.cardConfig.stateMap) {
                    _this.caseCardConfig.cardConfig.stateMap.forEach((/**
                     * @param {?} stateMap
                     * @return {?}
                     */
                    function (stateMap) {
                        if (stateMap.state === stateConfig.state) {
                            foundMap = stateConfig;
                            stateMap.state = stateConfig.state;
                            stateMap.icon = stateConfig.icon;
                            stateMap.fill = stateConfig.fill;
                        }
                    }));
                    if (foundMap) {
                        foundMap = stateConfig;
                    }
                    else {
                        _this.caseCardConfig.cardConfig.stateMap.push(stateConfig);
                    }
                }
                else {
                    _this.caseCardConfig.cardConfig.stateMap = [];
                    _this.caseCardConfig.cardConfig.stateMap.push(stateConfig);
                }
                _this.configChanged.emit(_this.caseCardConfig);
            });
            _this.handleCaseTypeColorToggleChange = (/**
             * @param {?} changes
             * @return {?}
             */
            function (changes) {
                _this.caseCardConfig.cardConfig.useCaseTypeColor = changes.checked ? changes.checked : false;
                if (changes.checked) {
                    _this.caseSummaryComponent.forEach((/**
                     * @param {?} comp
                     * @return {?}
                     */
                    function (comp) {
                        comp.restylePreview(_this.selectedStateConfig.icon, _this.caseTypeColor);
                    }));
                }
                _this.configChanged.emit(_this.caseCardConfig);
            });
            _this.setFill = (/**
             * @param {?} fill
             * @param {?} stateConfig
             * @return {?}
             */
            function (fill, stateConfig) {
                _this.caseSummaryComponent.forEach((/**
                 * @param {?} comp
                 * @return {?}
                 */
                function (comp) {
                    comp.restylePreview(stateConfig.icon, fill);
                }));
                _this.stateIconComponents.find((/**
                 * @param {?} comp
                 * @return {?}
                 */
                function (comp) {
                    return comp.id === stateConfig.state;
                })).refillSVG(fill);
                _this.configChanged.emit(_this.caseCardConfig);
            });
            _this.setCaseTypeFill = (/**
             * @param {?} fill
             * @param {?} stateConfig
             * @return {?}
             */
            function (fill, stateConfig) {
                _this.caseSummaryComponent.forEach((/**
                 * @param {?} comp
                 * @return {?}
                 */
                function (comp) {
                    comp.restylePreviewCaseType(stateConfig.icon, fill);
                }));
                _this.stateIconComponents.find((/**
                 * @param {?} comp
                 * @return {?}
                 */
                function (comp) {
                    return (comp.id === stateConfig.state && stateConfig.isCaseType);
                })).refillSVG(fill);
                _this.configChanged.emit(_this.caseCardConfig);
            });
            _this.selectState = (/**
             * @param {?} state
             * @return {?}
             */
            function (state) {
                _this.selectedStateConfig = _this.getConfigForState(state);
                if (!_this.caseCardConfig.cardConfig.useCaseTypeColor) {
                    _this.caseSummaryComponent.forEach((/**
                     * @param {?} comp
                     * @return {?}
                     */
                    function (comp) {
                        comp.restylePreview(_this.selectedStateConfig.icon, _this.selectedStateConfig.fill);
                    }));
                }
            });
            _this.setNewStateIcon = (/**
             * @param {?} url
             * @return {?}
             */
            function (url) {
                _this.selectedStateConfig.icon = url;
                _this.stateIconComponents.find((/**
                 * @param {?} comp
                 * @return {?}
                 */
                function (comp) {
                    return (comp.id === _this.selectedStateConfig.state);
                })).refresh(_this.selectedStateConfig.icon, _this.selectedStateConfig.fill);
                _this.caseSummaryComponent.forEach((/**
                 * @param {?} comp
                 * @return {?}
                 */
                function (comp) {
                    comp.restylePreview(_this.selectedStateConfig.icon, _this.selectedStateConfig.fill);
                }));
                _this.updateIconMap(_this.selectedStateConfig);
            });
            _this.setNewCaseTypeIcon = (/**
             * @param {?} url
             * @return {?}
             */
            function (url) {
                _this.caseTypeIcon = url;
                _this.stateIconComponents.find((/**
                 * @param {?} comp
                 * @return {?}
                 */
                function (comp) {
                    return (comp.id === _this.appTypeLabel);
                })).refresh(_this.caseTypeIcon, _this.caseTypeColor);
                _this.caseSummaryComponent.forEach((/**
                 * @param {?} comp
                 * @return {?}
                 */
                function (comp) {
                    comp.restylePreviewCaseType(_this.caseTypeIcon, _this.caseTypeColor);
                }));
                _this.updateIconMap(new IconMap(true, _this.appTypeLabel, _this.caseTypeColor, _this.caseTypeIcon));
            });
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                // need states & cardConfig
                _this.selectedCaseTypeConfig = null;
                _this.caseCardConfigService.getCaseCardConfig(_this.sandboxId, _this.appId, _this.uiAppId, _this.appTypeLabel, _this.DEFAULT_CASE_TYPE_COLOR, _this.DEFAULT_CASE_TYPE_ICON, _this.DEFAULT_CASE_STATE_COLOR, _this.DEFAULT_CASE_STATE_ICON).pipe(operators.take(1), operators.takeUntil(_this._destroyed$)).subscribe((/**
                 * @param {?} caseCardConfig
                 * @return {?}
                 */
                function (caseCardConfig) {
                    _this.caseCardConfig = caseCardConfig;
                    // set default selected to first state for this case type (0 is case type)
                    _this.selectedStateConfig = _this.caseCardConfig.cardConfig.stateMap[1];
                    /** @type {?} */
                    var caseTypeRec = _this.caseCardConfig.cardConfig.stateMap.find((/**
                     * @param {?} stateMap
                     * @return {?}
                     */
                    function (stateMap) {
                        return stateMap.isCaseType;
                    }));
                    _this.caseTypeIcon = caseTypeRec.icon;
                    _this.caseTypeColor = caseTypeRec.fill;
                    _this.selectedCaseTypeConfig = _this.getConfigForCaseType(_this.appTypeLabel);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error retrieving case card config: ' + error.error.errorMsg; }));
            });
            return _this;
        }
        /*public saveConfig = () => {
          this.caseCardConfigService.updateCaseCardConfig(this.sandboxId, this.appId, this.uiAppId, this.caseCardConfig)
            .pipe(
              take(1),
              takeUntil(this._destroyed$),
              map(caseCardConfig => {
                this.caseCardConfig = caseCardConfig;
              })
            ).subscribe(null, error => { console.log('Unable to update case card config: ' + error.errorMsg); }
          );
        }*/
        /*public saveConfig = () => {
            this.caseCardConfigService.updateCaseCardConfig(this.sandboxId, this.appId, this.uiAppId, this.caseCardConfig)
              .pipe(
                take(1),
                takeUntil(this._destroyed$),
                map(caseCardConfig => {
                  this.caseCardConfig = caseCardConfig;
                })
              ).subscribe(null, error => { console.log('Unable to update case card config: ' + error.errorMsg); }
            );
          }*/
        /**
         * @param {?} state
         * @param {?} isCaseType
         * @return {?}
         */
        LiveAppsApplicationConfigurationComponent.prototype.openDialog = /*public saveConfig = () => {
            this.caseCardConfigService.updateCaseCardConfig(this.sandboxId, this.appId, this.uiAppId, this.caseCardConfig)
              .pipe(
                take(1),
                takeUntil(this._destroyed$),
                map(caseCardConfig => {
                  this.caseCardConfig = caseCardConfig;
                })
              ).subscribe(null, error => { console.log('Unable to update case card config: ' + error.errorMsg); }
            );
          }*/
        /**
         * @param {?} state
         * @param {?} isCaseType
         * @return {?}
         */
        function (state, isCaseType) {
            var _this = this;
            if (!isCaseType) {
                this.selectState(state);
            }
            else {
                state = new CaseTypeState().deserialize({ value: this.appTypeLabel });
            }
            /** @type {?} */
            var dialogRef = this.dialog.open(LiveAppsStateIconUploadDialogComponent, {
                width: '500px',
                data: { state: state, isCaseType: isCaseType }
            });
            dialogRef.componentInstance.fileevent.subscribe((/**
             * @param {?} $e
             * @return {?}
             */
            function ($e) {
                _this.uploadFile($e.file, $e.state, $e.isCaseType);
            }));
            dialogRef.afterClosed().subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
            }));
        };
        /**
         * @param {?} file
         * @param {?} state
         * @param {?} isStateIcon
         * @return {?}
         */
        LiveAppsApplicationConfigurationComponent.prototype.uploadFile = /**
         * @param {?} file
         * @param {?} state
         * @param {?} isStateIcon
         * @return {?}
         */
        function (file, state, isStateIcon) {
            var _this = this;
            if (file) {
                /** @type {?} */
                var url = 'webresource/v1/orgFolders/' + this.folderId + '/' + this.appId + '.' + file.name;
                /** @type {?} */
                var dlUrl_1 = 'webresource/orgFolders/' + this.folderId + '/' + this.appId + '.' + file.name;
                this.liveapps.clearFromIconSVGTextCache(url);
                this.documentsService.uploadDocument('orgFolders', this.folderId, this.sandboxId, file, (this.appId + '.' + file.name), '')
                    .subscribe((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    if (!isStateIcon) {
                        _this.setNewStateIcon(dlUrl_1);
                    }
                    else {
                        _this.setNewCaseTypeIcon(dlUrl_1);
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { console.log('error'); _this.errorMessage = 'Error uploading state icon: ' + error.errorMsg; }));
            }
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        LiveAppsApplicationConfigurationComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.appId && (changes.appId.currentValue !== changes.appId.previousValue)) {
                this.refresh();
            }
        };
        LiveAppsApplicationConfigurationComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-application-configuration',
                        template: "<div *ngIf=\"appId\" class=\"tcs-case-card-customization\" fxLayout=\"column\">\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-around stretch\" fxFlex>\n      <div fxLayout=\"column\" fxLayoutAlign=\"start center\" fxFlex>\n        <div fxLayout=\"column\" fxLayoutAlign=\"start center\">\n          <div class=\"tcs-case-card-customization-section-text\">Preview</div>\n        </div>\n        <div class=\"tcs-case-card-customization-preview\" fxLayout=\"column\" fxLayoutAlign=\"start center\" fxFlex>\n          <div *ngIf=\"selectedStateConfig && caseTypeColor && caseTypeIcon\" style=\"border-radius: 3px; margin: 5px;\" fxLayout=\"column\" fxLayoutAlign=\"space-around center\">\n            <tcla-live-apps-case-summary style=\"margin: 5px;\" [displayType]=\"'card'\" [typeBar]=\"true\" [configMode]=\"true\" [configModeColor]=\"caseCardConfig.cardConfig.useCaseTypeColor ? caseTypeColor : selectedStateConfig.fill\" [configModeIcon]=\"selectedStateConfig.icon\" [configModeCaseTypeColor]=\"caseTypeColor\" [configModeCaseTypeIcon]=\"caseTypeIcon\" [configModeAppTypeLabel]=\"appTypeLabel\"></tcla-live-apps-case-summary>\n            <tcla-live-apps-case-summary style=\"margin: 5px;\" [displayType]=\"'miniCard'\" [typeBar]=\"true\" [configMode]=\"true\" [configModeColor]=\"caseCardConfig.cardConfig.useCaseTypeColor ? caseTypeColor : selectedStateConfig.fill\" [configModeIcon]=\"selectedStateConfig.icon\" [configModeCaseTypeColor]=\"caseTypeColor\" [configModeCaseTypeIcon]=\"caseTypeIcon\" [configModeAppTypeLabel]=\"appTypeLabel\"></tcla-live-apps-case-summary>\n          </div>\n        </div>\n      </div>\n      <div class=\"tcs-case-card-customization-divider\"></div>\n      <div fxLayout=\"column\" fxLayoutAlign=\"start center\" fxFlex>\n        <div fxLayout=\"column\" fxLayoutAlign=\"start center\">\n          <div class=\"tcs-case-card-customization-section-text\">Configure Icons</div>\n        </div>\n        <div fxFlex>\n          <div fxFlex class=\"tcs-case-states-list\" *ngIf=\"caseCardConfig && caseCardConfig.cardConfig && caseCardConfig.states\" fxLayout=\"column\" fxLayoutAlign=\"start center\">\n            <div class=\"tcs-case-states-list-inner\">\n              <div class=\"case-type-color-toggle\">\n                <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                  <mat-slide-toggle\n                  class=\"use-case-type-color\"\n                  [labelPosition]=\"'before'\"\n                  [checked]=\"caseCardConfig.cardConfig.useCaseTypeColor\"\n                  (change)=\"handleCaseTypeColorToggleChange($event)\">\n                  Use Case Type Color for color bar\n                  </mat-slide-toggle>\n                </div>\n              </div>\n              <div class=\"tcs-case-states-list-row\">\n                  <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                    <div fxLayoutAlign=\"start center\" style=\"min-width: 170px;\">Case Type Icon</div>\n                    <tcla-live-apps-state-icon style=\"margin-left: 10px; margin-right: 10px; min-width: 14px;\" #iconcomp [id]=\"appTypeLabel\" [iconPath]=\"selectedCaseTypeConfig.icon\" [color]=\"selectedCaseTypeConfig.fill\"\n                                               [appId]=\"appId\" [(colorPicker)]=\"selectedCaseTypeConfig.fill\" (colorPickerChange)=\"setCaseTypeFill($event, selectedCaseTypeConfig)\" [cpPresetColors]=\"DEFAULT_COLOR_PALETTE\" [cpPositionOffset]=\"'-40%'\"\n                                              matTooltip=\"Click to change color\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\n                    </tcla-live-apps-state-icon>\n                    <mat-icon (click)=\"openDialog(null, true)\" class=\"tcs-icon tcs-icon-active tcs-config-button tcs-document-upload-button\" svgIcon=\"tcs-document-upload\"\n                              matTooltip=\"Click to upload new icon\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\n                    </mat-icon>\n                    <mat-icon class=\"tcs-icon tcs-icon-active tcs-config-button-placeholder\"></mat-icon>\n                  </div>\n              </div>\n              <div class=\"tcs-case-states-icon-divider\"></div>\n              <!-- case state icons -->\n              <div *ngFor=\"let state of caseCardConfig.states\" class=\"tcs-case-states-list-row\" (click)=\"selectState(state)\">\n                <div *ngIf=\"getConfigForState(state); let stateConfig;\">\n                  <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                    <div fxLayoutAlign=\"start center\" style=\"min-width: 170px;\">{{state.label | ellipsis: 25}}</div>\n                    <tcla-live-apps-state-icon style=\"margin-left: 10px; margin-right: 10px; min-width: 14px;\" #iconcomp [id]=\"state.value\" [iconPath]=\"stateConfig.icon\" [color]=\"stateConfig.fill\"\n                                               [appId]=\"appId\" [(colorPicker)]=\"stateConfig.fill\" (colorPickerChange)=\"setFill($event, stateConfig)\" [cpPresetColors]=\"DEFAULT_COLOR_PALETTE\" [cpPositionOffset]=\"'-40%'\"\n                                              matTooltip=\"Click to change color\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\n                    </tcla-live-apps-state-icon>\n                    <mat-icon (click)=\"openDialog(state, false)\" class=\"tcs-icon tcs-icon-active tcs-config-button tcs-document-upload-button\" svgIcon=\"tcs-document-upload\"\n                              matTooltip=\"Click to upload new icon\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\n                    </mat-icon>\n                    <mat-icon class=\"tcs-icon tcs-icon-active tcs-config-button-placeholder\"></mat-icon>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n\n  <!--div class=\"tcs-case-card-customization-footer\" fxLayout=\"column\" fxLayoutAlign=\"end stretch\">\n    <div class=\"tcs-case-card-customization-action-buttons\" fxLayout=\"row\" fxLayoutAlign=\"center center\">\n      <button class=\"tcs-save-app-config-button\" mat-button (click)=\"saveConfig()\" type=\"submit\">Save Configuration</button>\n    </div>\n  </div-->\n</div>\n",
                        styles: [".tcs-case-card-customization{min-width:775px;min-height:370px;background-color:#fff}.tcs-case-card-customization *{font-family:Source Sans Pro;font-size:12px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;text-align:center;color:#000}.case-type-color-toggle{margin-bottom:10px;margin-top:10px}.tcs-case-card-customization-header{height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-case-card-customization .tcs-case-card-customization-header-text{font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-case-card-customization-action-buttons{margin-top:10px;margin-bottom:10px}.tcs-case-card-customization-divider{padding:0;margin:4px 5px 0;border-left:1.1px solid #f4f4f4}.tcs-case-card-customization .tcs-case-card-customization-section-text{font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#000}.tcs-case-states-list{margin:5px}.tcs-case-card-customization-preview app-live-apps-case-summary,.tcs-case-states-list-inner{overflow-y:auto}.tcs-case-states-list-row{border-radius:3px;padding:3px;margin-left:15px;margin-right:15px}.tcs-case-states-list-row:hover{-webkit-transition:background-color .5s;transition:background-color .5s;background-color:#eef0f7}.tcs-icon-active.tcs-config-button{display:none}.tcs-icon-active.tcs-config-button-placeholder{display:inline-block;width:24px}.tcs-case-states-list-row:hover .tcs-icon-active.tcs-config-button{display:inline-block}.tcs-case-states-list-row:hover .tcs-icon-active.tcs-config-button-placeholder{display:none}.tcs-case-states-icon-divider{padding:0;margin:2px 15px 4px 10px;border-bottom:1.1px solid #f4f4f4}.tcs-save-app-config-button{height:35px}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsApplicationConfigurationComponent.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: platformBrowser.DomSanitizer },
            { type: LiveAppsService },
            { type: TcCaseCardConfigService },
            { type: TcDocumentService },
            { type: material.MatDialog },
            { type: common.Location }
        ]; };
        LiveAppsApplicationConfigurationComponent.propDecorators = {
            stateIconComponents: [{ type: core.ViewChildren, args: ['iconcomp',] }],
            caseSummaryComponent: [{ type: core.ViewChildren, args: [LiveAppsCaseSummaryComponent,] }],
            appId: [{ type: core.Input }],
            appTypeLabel: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }],
            uiAppId: [{ type: core.Input }],
            folderId: [{ type: core.Input }],
            configChanged: [{ type: core.Output }]
        };
        return LiveAppsApplicationConfigurationComponent;
    }(LiveAppsComponent));
    var LiveAppsStateIconUploadDialogComponent = /** @class */ (function () {
        function LiveAppsStateIconUploadDialogComponent(dialogRef, data) {
            var _this = this;
            this.dialogRef = dialogRef;
            this.data = data;
            this.fileevent = new core.EventEmitter();
            this.fileToUpload = undefined;
            this.description = undefined;
            this.uploadFile = (/**
             * @return {?}
             */
            function () {
                if (_this.fileToUpload) {
                    _this.fileevent.emit({ file: _this.fileToUpload, state: _this.data.state, isCaseType: _this.data.isCaseType });
                    _this.dialogRef.close();
                }
            });
        }
        /**
         * @param {?} description
         * @return {?}
         */
        LiveAppsStateIconUploadDialogComponent.prototype.setFileDescription = /**
         * @param {?} description
         * @return {?}
         */
        function (description) {
            this.description = description;
        };
        /**
         * @param {?} files
         * @return {?}
         */
        LiveAppsStateIconUploadDialogComponent.prototype.attachFile = /**
         * @param {?} files
         * @return {?}
         */
        function (files) {
            this.fileToUpload = files.item(0);
            /*const myReader: FileReader = new FileReader();
            myReader.readAsText(this.fileToUpload);
            this.fileText = myReader.result.toString();*/
        };
        /**
         * @return {?}
         */
        LiveAppsStateIconUploadDialogComponent.prototype.onNoClick = /**
         * @return {?}
         */
        function () {
            this.dialogRef.close();
        };
        LiveAppsStateIconUploadDialogComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-state-icon-upload-dialog',
                        template: "  <h1 mat-dialog-title>Upload New Icon (svg) for '{{data.state.value}}'</h1>\n  <div mat-dialog-content class=\"tcs-state-icon-upload-dialog\">\n    <form #fileUploadForm=\"ngForm\" fxFlex fxLayout=\"column\">\n      <div fxLayout=\"row\" fxLayoutAlign=\"start space-between\">\n        <button type=\"button\" mat-raised-button (click)=\"fileInput.click()\">Choose File To Upload</button>\n        <div *ngIf=\"fileToUpload\">{{fileToUpload.name}}</div>\n        <!-- below input is hidden and enabled by above button -->\n        <input class=\"tcs-hidden-input\" (change)=\"attachFile($event.target.files)\" accept=\"image/svg+xml\" #fileInput type=\"file\" id=\"file\">\n      </div>\n    </form>\n  </div>\n  <div mat-dialog-actions>\n    <button mat-button (click)=\"uploadFile()\" type=\"submit\" [disabled]=\"!fileToUpload\">Upload</button>\n    <button mat-button (click)=\"onNoClick()\">Cancel</button>\n  </div>\n",
                        styles: [".tcs-hidden-input{display:none}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsStateIconUploadDialogComponent.ctorParameters = function () { return [
            { type: material.MatDialogRef },
            { type: undefined, decorators: [{ type: core.Inject, args: [material.MAT_DIALOG_DATA,] }] }
        ]; };
        LiveAppsStateIconUploadDialogComponent.propDecorators = {
            fileevent: [{ type: core.Output }]
        };
        return LiveAppsStateIconUploadDialogComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * This Component allows to list your Favorite Cases.
     *
     * ![alt-text](../live-apps-favorite-cases.png "Documents Component Image")
     *
     * \@example <tcla-live-apps-favorite-cases></tcla-live-apps-favorite-cases>
     */
    var LiveAppsFavoriteCasesComponent = /** @class */ (function (_super) {
        __extends(LiveAppsFavoriteCasesComponent, _super);
        function LiveAppsFavoriteCasesComponent(liveapps) {
            var _this = _super.call(this) || this;
            _this.liveapps = liveapps;
            /**
             * case card format - list, card, miniCard, staticList (no click event)
             */
            _this.displayType = _this.displayType ? _this.displayType : 'miniCard'; // miniCard, card, list
            // miniCard, card, list
            /**
             * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
             */
            _this.showHeader = _this.showHeader ? _this.showHeader : true;
            /**
             * ~event clickCase : Case clicked
             * ~payload CaseRoute : CaseRoute object output when case is clicked so calling component can route accordingly - ie. route to case
             */
            _this.clickCase = new core.EventEmitter();
            _this.clickCaseAction = (/**
             * @param {?} caseRoute
             * @return {?}
             */
            function (caseRoute) {
                _this.clickCase.emit(caseRoute);
            });
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                _this.favoriteCases = [];
                _this.liveapps.getFavoriteCases(_this.uiAppId, _this.sandboxId)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$)).subscribe((/**
                 * @param {?} favoriteCases
                 * @return {?}
                 */
                function (favoriteCases) {
                    _this.favoriteCases = favoriteCases.caseRefs || [];
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error retrieving favorite cases: ' + error.error.errorMsg; }));
            });
            _this.clearFavoriteCases = (/**
             * @return {?}
             */
            function () {
                _this.liveapps.setFavoriteCase('-1', _this.uiAppId, _this.sandboxId);
                _this.favoriteCases = [];
            });
            _this.handleDeleted = (/**
             * @param {?} caseRef
             * @return {?}
             */
            function (caseRef) {
                _this.favoriteCases.splice(_this.favoriteCases.indexOf(caseRef), 1);
                _this.liveapps.setFavoriteCase(caseRef, _this.uiAppId, _this.sandboxId);
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsFavoriteCasesComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            _super.prototype.ngAfterViewInit.call(this);
            this.containerChanges$.subscribe((/**
             * @param {?} widget
             * @return {?}
             */
            function (widget) {
                _this.cardWidthPct = tcCoreLib.TcCoreCommonFunctions.calcSummaryCardPct(widget);
            }));
        };
        /**
         * @return {?}
         */
        LiveAppsFavoriteCasesComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngOnInit.call(this);
            this.refresh();
        };
        LiveAppsFavoriteCasesComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-favorite-cases',
                        template: "<div #componentDiv class=\"tcs-case-favorites-box\" fxLayout=\"column\" fxFill>\n  <div *ngIf=\"showHeader\" class=\"tcs-case-favorites-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    <div fxLayoutAlign=\"start center\">\n      <mat-icon class=\"tcs-icon tcs-favorites-icon\" svgIcon=\"tcs-favorites-icon\"></mat-icon>\n      <div class=\"tcs-case-favorites-header-text\">Favorites</div>\n    </div>\n    <mat-icon (click)=\"clearFavoriteCases()\" class=\"tcs-icon tcs-icon-active tcs-clear-favorite-icon\" svgIcon=\"tcs-clear-icon\" matTooltip=\"Clear Favorites\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\"></mat-icon>\n  </div>\n  <div *ngIf=\"!showHeader\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <mat-icon style=\"margin: 5px\" (click)=\"clearFavoriteCases()\" class=\"tcs-icon tcs-icon-active tcs-clear-favorite-icon\" svgIcon=\"tcs-clear-icon\" matTooltip=\"Clear Favorites\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\"></mat-icon>\n  </div>\n  <div *ngIf=\"favoriteCases.length > 0\" class=\"tcs-case-favorites-flow-list\" fxLayout=\"column\" fxLayout=\"row wrap\">\n    <div class=\"tcs-case-favorite-item-box\" *ngFor=\"let case of favoriteCases\" [fxFlex]=\"cardWidthPct\">\n      <tcla-live-apps-case-summary [uiAppId]=\"uiAppId\" [typeBar]=\"true\" [borderCard]=\"false\" [displayType]=\"displayType\" [sandboxId]=\"sandboxId\" [caseRef]=\"case\" (clickCase)=\"clickCaseAction($event)\" (deleted)=\"handleDeleted($event)\"></tcla-live-apps-case-summary>\n      <div class=\"tcs-case-summary-line\"></div>\n    </div>\n  </div>\n  <div *ngIf=\"!(favoriteCases.length > 0)\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxLayoutGap=\"10px\" style=\"margin: 20px;\">\n    <mat-icon [svgIcon]=\"'ic-no-cases-icon'\" style=\"height: 48px; width: 48px;\"></mat-icon>\n    <div style=\"height: 100%; margin: 5px\" fxLayoutAlign=\"start center\">\n      <span class=\"tcs-no-item-text\">No cases found</span>\n    </div>\n  </div>\n</div>\n",
                        styles: [".tcs-case-favorites-box{border-radius:3px;box-shadow:0 2px 8px 0 #dedede;background-color:#fff}.tcs-case-favorites-header{min-height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-case-favorites-header-text{font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-case-favorites-flow-list{margin:10px;overflow-y:auto;padding:4px}.tcs-case-favorite-item-box{padding:5px}.tcs-icon.tcs-icon-active:hover{cursor:pointer}:host ::ng-deep .tcs-icon.tcs-icon-active:hover .svg-content{fill:#0081cb}.tcs-case-summary-line{padding:0;margin:4px 5px 0;border-bottom:1.1px solid #f4f4f4}.tcs-no-item-text{font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#b6b6b6}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsFavoriteCasesComponent.ctorParameters = function () { return [
            { type: LiveAppsService }
        ]; };
        LiveAppsFavoriteCasesComponent.propDecorators = {
            sandboxId: [{ type: core.Input }],
            uiAppId: [{ type: core.Input }],
            displayType: [{ type: core.Input }],
            showHeader: [{ type: core.Input }],
            clickCase: [{ type: core.Output }]
        };
        return LiveAppsFavoriteCasesComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AuditEventList = /** @class */ (function () {
        function AuditEventList() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        AuditEventList.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            (/** @type {?} */ (this)).auditevents = [];
            Object.assign((/** @type {?} */ (this)).auditevents, input);
            return (/** @type {?} */ (this));
        };
        return AuditEventList;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TcCaseAuditService = /** @class */ (function () {
        function TcCaseAuditService(http) {
            this.http = http;
        }
        /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} startAt
         * @param {?} top
         * @return {?}
         */
        TcCaseAuditService.prototype.getCaseAudit = /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} startAt
         * @param {?} top
         * @return {?}
         */
        function (caseRef, sandboxId, startAt, top) {
            /** @type {?} */
            var url = '/event/v1/auditEvents?$sandbox=' + sandboxId
                + '&$filter=type eq \'case\''
                + ' and id eq \'' + caseRef + '\'';
            url = (startAt !== undefined) ? (url + '&$startat=' + startAt) : url;
            url = top ? (url + '&$top=' + top) : url;
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} caseaudit
             * @return {?}
             */
            function (caseaudit) { return new AuditEventList().deserialize(caseaudit); })));
        };
        TcCaseAuditService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TcCaseAuditService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        /** @nocollapse */ TcCaseAuditService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function TcCaseAuditService_Factory() { return new TcCaseAuditService(core.ɵɵinject(http.HttpClient)); }, token: TcCaseAuditService, providedIn: "root" });
        return TcCaseAuditService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Render audit trail for a case
     *
     *  ![alt-text](../live-apps-case-audit.png "Image")
     *
     * \@example <tcla-live-apps-case-audit></tcla-live-apps-case-audit>
     */
    var LiveAppsCaseAuditComponent = /** @class */ (function (_super) {
        __extends(LiveAppsCaseAuditComponent, _super);
        function LiveAppsCaseAuditComponent(caseAuditService) {
            var _this = _super.call(this) || this;
            _this.caseAuditService = caseAuditService;
            _this.auditEvents = [];
            _this.startat = undefined;
            _this.top = 20;
            _this.end = false;
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                _this.startat = undefined;
                _this.top = 20;
                _this.end = false;
                _this.auditEvents = [];
                _this.getAuditEvents(_this.caseRef, _this.sandboxId, _this.startat, _this.top);
            });
            _this.getAuditEvents = (/**
             * @param {?} caseRef
             * @param {?} sandboxId
             * @param {?} startAt
             * @param {?} top
             * @return {?}
             */
            function (caseRef, sandboxId, startAt, top) {
                _this.caseAuditService.getCaseAudit(_this.caseRef, _this.sandboxId, _this.startat, _this.top)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$)).subscribe((/**
                 * @param {?} auditeventlist
                 * @return {?}
                 */
                function (auditeventlist) {
                    // this will strip any duplicates that may have been retrieved due to fast scrolling
                    /** @type {?} */
                    var filteredEvents = auditeventlist.auditevents.filter((/**
                     * @param {?} x
                     * @return {?}
                     */
                    function (x) { return _this.auditEvents.every((/**
                     * @param {?} y
                     * @return {?}
                     */
                    function (y) { return y.key.value !== x.key.value; })); }));
                    _this.auditEvents = _this.auditEvents.concat(filteredEvents);
                    if (auditeventlist.auditevents.length < _this.top) {
                        _this.end = true;
                    }
                    else {
                        _this.startat = auditeventlist.auditevents[auditeventlist.auditevents.length - 1].key.value;
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.errorMessage = 'Error retrieving case audit: ' + error.error.errorMsg;
                }));
            });
            _this.getNextBatch = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (!_this.end) {
                    _this.getAuditEvents(_this.caseRef, _this.sandboxId, _this.startat, _this.top);
                }
            });
            return _this;
        }
        LiveAppsCaseAuditComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-audit',
                        template: "<div class=\"tcs-case-audit-pane\" fxLayout=\"column\" fxFill style=\"overflow: hidden;\">\n  <tc-tibco-cloud-widget-header fxFlex=\"nogrow\" [headerText]=\"'Audit'\"\n                                [icon]=\"'tcs-recent-icon'\"></tc-tibco-cloud-widget-header>\n\n\n  <!--div *ngIf=\"auditEvents && auditEvents.length > 0\" class=\"tcs-case-audit-container\">\n\n  </div-->\n  <div class=\"audit-template\" fxFlex>\n    <cdk-virtual-scroll-viewport style=\"height: 100%\" itemSize=\"50\" (scrolledIndexChange)=\"getNextBatch($event)\">\n      <ul style=\"\"\n          *cdkVirtualFor=\"let item of auditEvents; let i = index\">\n        <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'BP_INSTANCE_CREATED'\">\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"BP_INSTANCE_CREATED\"></mat-icon>\n          </div>\n          <div class=\"audit-details\">\n            <li>\n              <span *ngIf=\"item.principalName\">{{item.principalName.value}} </span>\n              <span>\n                      <span> started </span>\n                      <b>{{item.procName.value}}</b>\n                      <span> on {{item.creationTime.value | date:'full'}}</span>\n                  </span>\n            </li>\n          </div>\n          <div class=\"audit-line\"></div>\n        </div>\n        <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'BP_AUTO_STARTED_INSTANCE'\">\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"BP_AUTO_STARTED_INSTANCE\"></mat-icon>\n          </div>\n          <li>\n            <!--span *ngIf=\"item.principalName\">{{item.principalName.value}} </span-->\n            <span>\n                    <b>{{item.procName.value}}</b>\n                    <span> auto initiated on {{item.creationTime.value | date:'full'}}</span>\n                </span>\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n        <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'BP_DELAYED_AUTO_STARTED_INSTANCE'\">\n          <!-- todo: JS fix this -->\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"BP_DELAYED_AUTO_STARTED_INSTANCE\"></mat-icon>\n          </div>\n          <li>\n          <span>\n                    <b>{{item.procName.value}}</b>\n\t\t\t\t\t<span> deadline auto initiated on {{item.creationTime.value | date:'full'}}</span>\n          <span>. </span>\n          <span> Time to deadline {{item.delayTime.value}}></span>. </span>\n            <!--span class=\"skip-delay\" *ngIf=\"isInstanceDelayed(item)\" ng-click=\"skipDelay(item)\" skip\"></span>\n                  </span-->\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n        <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'BP_DELAYED_AUTO_START_TIMER_EXPIRED'\">\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"BP_DELAYED_AUTO_START_TIMER_EXPIRED\"></mat-icon>\n          </div>\n          <li>\n          <span>\n            <b>{{item.procName.value}}</b>\n\t\t\t\t\t  <span> deadline reached {{item.creationTime.value | date: 'full'}}></span>\n          </span>\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n        <div class=\"tcs-case-audit-dtl\"\n             *ngIf=\"item.messageId.value === 'BP_DELAYED_AUTO_STARTED_INSTANCE_CANCELLED_DUE_TO_STATE_CHANGE'\">\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"BP_DELAYED_AUTO_STARTED_INSTANCE_CANCELLED_DUE_TO_STATE_CHANGE\"></mat-icon>\n          </div>\n          <li>\n            <!--span *ngIf=\"item.principalName\">{{item.principalName.value}} </span-->\n            <span>\n                    <b>{{item.procName.value}}</b>\n            <span> deadline cancelled {{item.creationTime.value | date: 'full'}}</span>\n          </span>\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n        <div class=\"tcs-case-audit-dtl\"\n             *ngIf=\"item.messageId.value === 'BP_TASK_CREATED' && ['User Task','Email Task','Calculation Task','TCI Task','AuditSafe Task'].indexOf(item.taskType.value) > -1\">\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"{{item.taskType.value}}\"></mat-icon>\n          </div>\n          <li>\n                <span>\n                    <b>{{item.taskName.value}}</b>\n                    <span> initiated on {{item.creationTime.value | date: 'full'}}</span>\n                </span>\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n\n        <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'CM_CASE_CREATED'\">\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"CM_CASE_CREATED\"></mat-icon>\n          </div>\n          <li>\n            <span *ngIf=\"item.principalName\">{{item.principalName.value}}</span>\n            <span class=\"spanPadding\">\n                    <span> created </span>\n                    <b> {{item.label.value}}</b>\n                    <span> in state</span>\n                    <span class=\"audit-state\">\"{{item.caseState.value}}\"</span>\n                    <span> on {{item.creationTime.value | date: 'full'}}</span>\n                </span>\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n\n        <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'CM_CASE_UPDATED_STATE_CHANGED'\">\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"CM_CASE_UPDATED_STATE_CHANGED\"></mat-icon>\n          </div>\n          <li>\n            <span *ngIf=\"item.principalName\">{{item.principalName.value}}</span>\n            <span class=\"spanPadding\">\n                    <span> updated </span>\n                    <b> {{item.label.value}}</b>\n                    <span>, new state is></span>\n                    <span class=\"audit-state\"> \"{{item.caseState.value}}\" </span>\n                    <span> on {{item.creationTime.value | date: 'full'}}</span>\n                </span>\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n\n        <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'CM_CASE_UPDATED'\">\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"CM_CASE_UPDATED\"></mat-icon>\n          </div>\n          <li>\n            <span *ngIf=\"item.principalName\">{{item.principalName.value}}</span>\n            <span class=\"spanPadding\">\n                    <span> updated </span>\n                    <b> {{item.label.value}} </b>\n                    <span> on {{item.creationTime.value | date: 'full'}}</span>\n                </span>\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n\n        <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'WR_FOLDER_ARTIFACT_CREATED'\">\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"WR_FOLDER_ARTIFACT_CREATED\"></mat-icon>\n          </div>\n          <li>\n            <span *ngIf=\"item.principalName\">{{item.principalName.value}}</span>\n            <span class=\"spanPadding\">\n                    <span> uploaded </span>\n                    <span>{{item.artifactName.value}}</span>\n                    <span> on {{item.creationTime.value | date:'full'}}</span>\n                </span>\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n\n        <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'WR_FOLDER_ARTIFACT_UPDATED'\">\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"WR_FOLDER_ARTIFACT_UPDATED\"></mat-icon>\n          </div>\n          <li>\n            <span *ngIf=\"item.principalName\">{{item.principalName.value}}</span>\n            <span class=\"spanPadding\">\n                    <span> updated </span>\n                    <span>{{item.artifactName.value}}</span>\n                    <span> on {{item.creationTime.value | date:'full'}}</span>\n                </span>\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n\n        <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'WR_FOLDER_ARTIFACT_DELETED'\">\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"WR_FOLDER_ARTIFACT_DELETED\"></mat-icon>\n          </div>\n          <li>\n            <span *ngIf=\"item.principalName\">{{item.principalName.value}}</span>\n            <span class=\"spanPadding\">\n                    <span> deleted </span>\n                    <span>{{item.artifactName.value}}</span>\n                    <span> on {{item.creationTime.value | date:'full'}}</span>\n                </span>\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n\n        <div class=\"tcs-case-audit-dtl\"\n             *ngIf=\"item.messageId.value === 'BP_TASK_COMPLETED' && ['User Task','Email Task','Calculation Task','TCI Task','AuditSafe Task'].indexOf(item.taskType.value) > -1\">\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"{{item.taskType.value}}\"></mat-icon>\n          </div>\n          <li>\n            <span *ngIf=\"item.principalName\">{{item.principalName.value}} </span>\n            <span>\n                    <span> completed </span>\n                    <b> {{item.taskName.value}} </b>\n                    <span> on {{item.creationTime.value | date: 'full'}}</span>\n                </span>\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n        <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.messageId.value === 'BP_INSTANCE_COMPLETED'\">\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"BP_INSTANCE_COMPLETED\"></mat-icon>\n          </div>\n          <li>\n                <span>\n                    <b>{{item.procName.value}} </b>\n                    <span> on {{item.creationTime.value | date: 'full'}}</span>\n                </span>\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n        <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.severity.value === 'ERROR'\">\n          <div class=\"audit-icon-container\">\n            <mat-icon svgIcon=\"ERROR\"></mat-icon>\n          </div>\n          <li>\n                <span *ngIf=\"item.principalName\">{{item.principalName.value}} has error at {{item.taskName.value}}\n                </span>\n            <b> {{item.message.value | parseAuditMessage : item }}</b>\n            <span> on {{item.creationTime.value | date: 'full'}}</span>\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n        <div class=\"tcs-case-audit-dtl\" *ngIf=\"item.severity.value === 'WARN'\">\n          <div class=\"audit-icon-container warn-icon\">\n            <mat-icon svgIcon=\"ERROR\"></mat-icon>\n          </div>\n          <li>\n                <span *ngIf=\"item.principalName\">{{item.principalName.value}} has warning at {{item.taskName.value}}>\n                </span>\n            <b> {{item.message.value | parseAuditMessage : item }}</b>\n            <span> on {{item.creationTime.value | date: 'full'}}</span>\n          </li>\n          <div class=\"audit-line\"></div>\n        </div>\n\n\n      </ul>\n    </cdk-virtual-scroll-viewport>\n  </div>\n</div>\n",
                        styles: [".tcs-case-audit-pane{border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff}.tcs-case-audit-container{height:100%;overflow-x:auto;padding:11px}.tcs-case-audit-dtl{height:70px}.audit-template{padding:20px}.audit-template span{font-family:Source Sans Pro;font-size:12px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal}.audit-template ul{padding-left:25px;border-left:2px solid #bfbfbf;display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center;position:relative;margin-left:20px;margin-right:20px}.audit-icon-container{background-color:#fff;padding:5px;position:absolute;left:-19px;border-radius:50%;border:1px solid #0081cb}.audit-icon-container mat-icon{padding:4px}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCaseAuditComponent.ctorParameters = function () { return [
            { type: TcCaseAuditService }
        ]; };
        LiveAppsCaseAuditComponent.propDecorators = {
            caseRef: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }]
        };
        return LiveAppsCaseAuditComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Displays data for a case in a widget (high level)
     *
     * ![alt-text](../live-apps-case-data.png "Image")
     *
     * \@example <tcla-live-apps-case-data></tcla-live-apps-case-data>
     */
    var LiveAppsCaseDataComponent = /** @class */ (function (_super) {
        __extends(LiveAppsCaseDataComponent, _super);
        function LiveAppsCaseDataComponent(caseDataService) {
            var _this = _super.call(this) || this;
            _this.caseDataService = caseDataService;
            /**
             * Allow override of forms framework
             * Options: bootstrap-4 or material-design
             */
            _this.formsFramework = _this.formsFramework ? _this.formsFramework : 'material-design';
            /**
             * not used
             */
            _this.customDataId = _this.customDataId ? _this.customDataId : 'default';
            /**
             * Emit event to cause refresh of page
             * *
             */
            _this.refreshEvent = new core.EventEmitter();
            _this.casedata$ = new rxjs.ReplaySubject();
            _this.summary$ = new rxjs.ReplaySubject();
            _this.metadata$ = new rxjs.ReplaySubject();
            _this.schema$ = new rxjs.ReplaySubject();
            _this.triggerRefresh = (/**
             * @return {?}
             */
            function () {
                _this.refreshEvent.emit();
            });
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                _this.caseDataService.getCaseWithSchema(_this.caseRef, _this.sandboxId, _this.appId, _this.typeId, _this.uiAppId)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$)).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    _this.casedata = result.caseInfo.untaggedCasedataObj;
                    _this.metadata = result.caseInfo.metadata;
                    _this.summary = result.caseInfo.summaryObj;
                    _this.schema = result.caseSchema;
                    _this.name = result.name;
                    _this.formRef = result.applicationName + '.' + result.applicationInternalName + '.casedata.' + _this.customDataId;
                    _this.casedata$.next(_this.casedata);
                    _this.summary$.next(_this.summary);
                    _this.metadata$.next(_this.metadata);
                    _this.schema$.next(_this.schema);
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error retrieving case data: ' + error.error.errorMsg; }));
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsCaseDataComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.refresh();
        };
        LiveAppsCaseDataComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-data',
                        template: "<div class=\"tcs-case-data-pane\" fxLayout=\"column\" fxFill style=\"overflow: hidden;\">\n  <tc-tibco-cloud-widget-header *ngIf=\"showHeader\" fxFlex=\"nogrow\" [headerText]=\"'Case Data'\" [icon]=\"'tcs-case-data-icon'\"></tc-tibco-cloud-widget-header>\n  <tcla-live-apps-case-data-display fxFlex=\"grow\" id=\"readOnlyDiv\" style=\"overflow:auto\" *ngIf=\"casedata && schema\" [schema]=\"schema\" [sandboxId]=\"sandboxId\" [caseRef]=\"caseRef\" [appId]=\"appId\" [typeId]=\"typeId\" [caseData]=\"casedata\" [layout]=\"layout\" [customFormDefs]=\"customFormDefs\" [formsFramework]=\"formsFramework\" [formRef]=\"formRef\" [name]=\"name\" (refreshEvent)=\"triggerRefresh()\"></tcla-live-apps-case-data-display>\n</div>\n",
                        styles: [".tcs-case-data-pane{border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff}.tcs-case-data-header{height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-case-data-header-text{margin-left:10px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCaseDataComponent.ctorParameters = function () { return [
            { type: TcCaseDataService }
        ]; };
        LiveAppsCaseDataComponent.propDecorators = {
            caseRef: [{ type: core.Input }],
            appId: [{ type: core.Input }],
            typeId: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }],
            uiAppId: [{ type: core.Input }],
            showHeader: [{ type: core.Input }],
            layout: [{ type: core.Input }],
            formsFramework: [{ type: core.Input }],
            customFormDefs: [{ type: core.Input }],
            customDataId: [{ type: core.Input }],
            refreshEvent: [{ type: core.Output }]
        };
        return LiveAppsCaseDataComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LaProcessSelection = /** @class */ (function () {
        // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
        function LaProcessSelection(type, appSchema, caseIdAttribute, process, ref, caseReference) {
            this.type = type;
            this.appSchema = appSchema;
            this.caseIdAttribute = caseIdAttribute;
            this.process = process;
            this.ref = ref;
            this.caseReference = caseReference;
        }
        return LaProcessSelection;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TcCaseProcessesService = /** @class */ (function () {
        function TcCaseProcessesService(http, liveAppsService, caseDataService) {
            var _this = this;
            this.http = http;
            this.liveAppsService = liveAppsService;
            this.caseDataService = caseDataService;
            this.getCaseIDAttributeName = (/**
             * @param {?} caseType
             * @return {?}
             */
            function (caseType) {
                /** @type {?} */
                var caseIdAttrib;
                caseType.attributes.forEach((/**
                 * @param {?} attribute
                 * @return {?}
                 */
                function (attribute) {
                    if (attribute.isIdentifier) {
                        caseIdAttrib = attribute;
                    }
                }));
                return caseIdAttrib;
            });
            // this is a helper function that given a case type 'schema' for the whole application will create an LaProcessSelection object
            // containing both the appSchema and particular details for this action
            // this object is required to submit the process later.
            this.createLaProcessSelection = (/**
             * @param {?} schema
             * @param {?} appId
             * @param {?} typeId
             * @param {?} action
             * @param {?} creator
             * @param {?} caseRef
             * @return {?}
             */
            function (schema, appId, typeId, action, creator, caseRef) {
                /** @type {?} */
                var processSelection;
                schema.casetypes.forEach((/**
                 * @param {?} casetype
                 * @return {?}
                 */
                function (casetype) {
                    // the schema will contain definitions for both the 'case' and any defined types in that case.
                    // We want the schema for this 'case'.
                    if (casetype.applicationId === appId && casetype.id === typeId) {
                        // if ( casetype.jsonSchema !== undefined) {
                        if (action) {
                            /** @type {?} */
                            var caseActionList = casetype.actions ? casetype.actions : [];
                            // now find the selected action
                            caseActionList.forEach((/**
                             * @param {?} actionDef
                             * @return {?}
                             */
                            function (actionDef) {
                                if (action.id === actionDef.id) {
                                    if (!actionDef.jsonSchema) {
                                        // create blank form schema
                                        actionDef.jsonSchema = new JsonSchema();
                                        actionDef.jsonSchema.type = 'object';
                                        actionDef.jsonSchema.properties = [];
                                    }
                                    processSelection = new LaProcessSelection('action', schema, _this.getCaseIDAttributeName(casetype), actionDef, 
                                    // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
                                    (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'action' + '.' + actionDef.name), caseRef);
                                }
                            }));
                            if (!processSelection) {
                                // no schema for this process
                                /** @type {?} */
                                var process = new Process().deserialize({ jsonSchema: { $schema: 'NOSCHEMA' }, name: action.name, id: action.id });
                                processSelection = new LaProcessSelection('action', schema, _this.getCaseIDAttributeName(casetype), process, 
                                // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
                                (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'action' + '.' + action.name), caseRef);
                            }
                        }
                        else if (creator) {
                            /** @type {?} */
                            var caseCreatorList = casetype.creators ? casetype.creators : [];
                            // now find the selected action
                            caseCreatorList.forEach((/**
                             * @param {?} creatorDef
                             * @return {?}
                             */
                            function (creatorDef) {
                                if (creator.id === creatorDef.id) {
                                    if (!creatorDef.jsonSchema) {
                                        // create blank form schema
                                        creatorDef.jsonSchema = new JsonSchema();
                                        creatorDef.jsonSchema.type = 'object';
                                        creatorDef.jsonSchema.properties = [];
                                    }
                                    processSelection = new LaProcessSelection('creator', schema, _this.getCaseIDAttributeName(casetype), creatorDef, 
                                    // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
                                    (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'creator' + '.' + creatorDef.name), null);
                                }
                            }));
                            if (!processSelection) {
                                // no schema for this process
                                /** @type {?} */
                                var process = new Process().deserialize({ jsonSchema: { $schema: 'NOSCHEMA' }, name: creator.name, id: creator.id });
                                processSelection = new LaProcessSelection('creator', schema, _this.getCaseIDAttributeName(casetype), process, 
                                // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
                                (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'creator' + '.' + creator.name), null);
                            }
                        }
                    }
                    // }
                }));
                return processSelection;
            });
        }
        //  This service gets the case state then uses that and the caseRef to get the available actions.
        //  This service gets the case state then uses that and the caseRef to get the available actions.
        /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @return {?}
         */
        TcCaseProcessesService.prototype.getCaseActionsForCaseRef = 
        //  This service gets the case state then uses that and the caseRef to get the available actions.
        /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @return {?}
         */
        function (caseRef, sandboxId, appId, typeId) {
            var _this = this;
            /** @type {?} */
            var caseState$ = this.caseDataService.getCaseState(caseRef, sandboxId);
            /** @type {?} */
            var caseActions$ = caseState$.pipe(operators.flatMap((/**
             * @param {?} caseState
             * @return {?}
             */
            function (caseState) {
                return _this.getCaseActions(caseRef, sandboxId, appId, typeId, caseState);
            })));
            return caseActions$;
        };
        // todo: Note this is not a public API - update when Public API available
        // todo: Note this is not a public API - update when Public API available
        /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} caseState
         * @return {?}
         */
        TcCaseProcessesService.prototype.getCaseActions = 
        // todo: Note this is not a public API - update when Public API available
        /**
         * @param {?} caseRef
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} caseState
         * @return {?}
         */
        function (caseRef, sandboxId, appId, typeId, caseState) {
            // https://eu.liveapps.cloud.tibco.com/pageflow/caseActions?$sandbox=31&
            // $filter=applicationId%20eq%201742%20and%20caseType%20eq%201%20and%20caseState%20eq%20Responded%20and%20caseRef%20eq%20150491
            /** @type {?} */
            var url = '/pageflow/v1/caseActions?$sandbox=' + sandboxId
                + '&$filter=applicationId eq ' + appId
                + ' and caseType eq ' + typeId
                + ' and caseState eq ' + caseState
                + ' and caseRef eq ' + caseRef;
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} caseactions
             * @return {?}
             */
            function (caseactions) {
                /** @type {?} */
                var caList = new CaseActionsList().deserialize(caseactions);
                // non public API returns action Id as number, switch to string to match other APIs
                caList.actions.forEach((/**
                 * @param {?} action
                 * @return {?}
                 */
                function (action) {
                    if (typeof action.id === 'number') {
                        action.id = String(action.id);
                    }
                }));
                return caList;
            })));
        };
        // todo: Note this is not a public API - update when Public API available
        // todo: Note this is not a public API - update when Public API available
        /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @return {?}
         */
        TcCaseProcessesService.prototype.getCaseCreators = 
        // todo: Note this is not a public API - update when Public API available
        /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @return {?}
         */
        function (sandboxId, appId, typeId) {
            /** @type {?} */
            var url = '/pageflow/v1/caseCreators?$sandbox=' + sandboxId
                + '&$filter=applicationId eq ' + appId
                + ' and caseType eq ' + typeId;
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} casecreators
             * @return {?}
             */
            function (casecreators) {
                /** @type {?} */
                var ccList = new CaseCreatorsList().deserialize(casecreators);
                // non public API returns creator Id as number, switch to string to match other APIs
                ccList.creators.forEach((/**
                 * @param {?} creator
                 * @return {?}
                 */
                function (creator) {
                    if (typeof creator.id === 'number') {
                        creator.id = String(creator.id);
                    }
                }));
                return ccList;
            })));
        };
        /**
         * @param {?} caseRef
         * @param {?} appId
         * @param {?} typeId
         * @param {?} sandboxId
         * @param {?} action
         * @param {?} creator
         * @param {?} top
         * @return {?}
         */
        TcCaseProcessesService.prototype.getProcessDetails = /**
         * @param {?} caseRef
         * @param {?} appId
         * @param {?} typeId
         * @param {?} sandboxId
         * @param {?} action
         * @param {?} creator
         * @param {?} top
         * @return {?}
         */
        function (caseRef, appId, typeId, sandboxId, action, creator, top) {
            var _this = this;
            return this.liveAppsService.getCaseTypeSchema(sandboxId, appId, top).pipe(operators.map((/**
             * @param {?} schema
             * @return {?}
             */
            function (schema) {
                return _this.createLaProcessSelection(schema, appId, typeId, action ? action : null, creator ? creator : null, caseRef);
            })));
        };
        /**
         * @param {?} caseRef
         * @param {?} appId
         * @param {?} typeId
         * @param {?} sandboxId
         * @param {?} updateActionLabel
         * @param {?} data
         * @return {?}
         */
        TcCaseProcessesService.prototype.caseDataFormUpdate = /**
         * @param {?} caseRef
         * @param {?} appId
         * @param {?} typeId
         * @param {?} sandboxId
         * @param {?} updateActionLabel
         * @param {?} data
         * @return {?}
         */
        function (caseRef, appId, typeId, sandboxId, updateActionLabel, data) {
            var _this = this;
            // get the creator details
            /** @type {?} */
            var creators$ = this.getCaseActionsForCaseRef(caseRef, sandboxId, appId, typeId);
            return creators$.pipe(operators.flatMap((/**
             * @param {?} actions
             * @return {?}
             */
            function (actions) {
                /** @type {?} */
                var updateAction = actions.actions.find((/**
                 * @param {?} act
                 * @return {?}
                 */
                function (act) {
                    return act.label === updateActionLabel;
                }));
                if (updateAction) {
                    return _this.liveAppsService.runProcess(sandboxId, appId, updateAction.id, caseRef, data);
                }
                else {
                    console.error('No update action found with label:', updateActionLabel);
                    rxjs.throwError('No update action found with label: ' + updateActionLabel);
                }
            })));
        };
        TcCaseProcessesService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TcCaseProcessesService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: LiveAppsService },
            { type: TcCaseDataService }
        ]; };
        /** @nocollapse */ TcCaseProcessesService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function TcCaseProcessesService_Factory() { return new TcCaseProcessesService(core.ɵɵinject(http.HttpClient), core.ɵɵinject(LiveAppsService), core.ɵɵinject(TcCaseDataService)); }, token: TcCaseProcessesService, providedIn: "root" });
        return TcCaseProcessesService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Renders case action buttons
     *
     * ![alt-text](../live-apps-case-actions.png "Image")
     *
     * \@example <tcla-live-apps-case-actions></tcla-live-apps-case-actions>
     */
    var LiveAppsCaseActionsComponent = /** @class */ (function (_super) {
        __extends(LiveAppsCaseActionsComponent, _super);
        function LiveAppsCaseActionsComponent(liveapps, caseProcessesService) {
            var _this = _super.call(this) || this;
            _this.liveapps = liveapps;
            _this.caseProcessesService = caseProcessesService;
            /**
             * Max Actions that can be run simultaneously
             */
            _this.maxActions = 1;
            /**
             * ~event actionClicked : Case Action selected
             * ~payload LaProcessSelection : LaProcessSelection object output when an action is clicked (ie. message to parent to run action component)
             */
            _this.actionClicked = new core.EventEmitter();
            _this.disabled = false;
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                _this.caseProcessesService.getCaseActionsForCaseRef(_this.caseRef, _this.sandboxId, _this.appId, _this.typeId)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$)).subscribe((/**
                 * @param {?} caseactions
                 * @return {?}
                 */
                function (caseactions) {
                    if (_this.actionFilter) {
                        caseactions.actions = caseactions.actions.filter((/**
                         * @param {?} act
                         * @return {?}
                         */
                        function (act) {
                            // check if it matches any of the actionFilters
                            /** @type {?} */
                            var test = true;
                            _this.actionFilter.forEach((/**
                             * @param {?} actfilter
                             * @return {?}
                             */
                            function (actfilter) {
                                if (test && act.label.substr(0, actfilter.length) === actfilter) {
                                    test = false;
                                }
                            }));
                            return test;
                        }));
                    }
                    _this.caseactions = caseactions.actions;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; }));
            });
            _this.toggleEnable = (/**
             * @return {?}
             */
            function () {
                _this.disabled = !_this.disabled;
            });
            return _this;
        }
        /**
         * @param {?} action
         * @return {?}
         */
        LiveAppsCaseActionsComponent.prototype.selectAction = /**
         * @param {?} action
         * @return {?}
         */
        function (action) {
            var _this = this;
            this.caseProcessesService.getProcessDetails(this.caseRef, this.appId, this.typeId, this.sandboxId, action, null, 100).pipe(operators.take(1), operators.takeUntil(this._destroyed$), operators.tap((/**
             * @param {?} processDetails
             * @return {?}
             */
            function (processDetails) {
                if (!processDetails || !processDetails.process || (processDetails.process.jsonSchema.$schema === 'NOSCHEMA')) {
                    // This will be triggered when no form schema is available
                    // Typically happens when:
                    // 1) The form has elements that are not supported by the Live Apps API for form schemas such as participant selectors
                    // 2) The Live Apps application is legacy and has no form schema at all, redeploying the live apps application would fix this.
                    console.error('No schema available for this case type: The form may not be supported or you may need to update/re-deploy the live apps application');
                }
            })))
                .subscribe((/**
             * @param {?} processSchema
             * @return {?}
             */
            function (processSchema) {
                _this.actionClicked.emit(processSchema);
                return processSchema;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { _this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; }));
        };
        /**
         * @return {?}
         */
        LiveAppsCaseActionsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.refresh();
        };
        LiveAppsCaseActionsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-actions',
                        template: "<div fxLayout=\"row\">\n  <button [disabled]=\"disabled\" [ngClass]=\"disabled ? 'disabled' : ''\" mat-button class=\"tcs-case-action-button\" *ngFor=\"let action of caseactions| slice:0:maxActions\"\n          matTooltip=\"{{action.label}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\"\n          (click)=\"selectAction(action)\">\n    {{action.label | ellipsis: 30 }}\n  </button>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\" style=\"width: 75px\" *ngIf=\"caseactions && caseactions.length > maxActions\">\n    <mat-select class=\"tcs-case-action-option\" [disableOptionCentering]=\"true\" placeholder=\"More\" matTooltip=\"\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\n      <mat-option *ngFor=\"let action of caseactions | slice:maxActions:caseactions.length\" [value]=\"\" (click)=\"selectAction(action)\">\n        <span>{{action.label}}</span>\n      </mat-option>\n    </mat-select>\n  </div>\n</div>\n",
                        styles: [".tcs-case-action-button{height:40px;border-radius:3px;background-color:#fff;color:#0081cb;font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:.2px;margin:5px;border:1px solid #0081cb}.tcs-case-action-button.disabled{border:none}.tcs-case-action-option{padding-top:9px;padding-left:10px;padding-right:10px;height:40px;border-radius:3px;background-color:#fff;color:#0081cb;border:1px solid #0081cb}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCaseActionsComponent.ctorParameters = function () { return [
            { type: LiveAppsService },
            { type: TcCaseProcessesService }
        ]; };
        LiveAppsCaseActionsComponent.propDecorators = {
            caseRef: [{ type: core.Input }],
            appId: [{ type: core.Input }],
            typeId: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }],
            maxActions: [{ type: core.Input }],
            actionFilter: [{ type: core.Input }],
            actionClicked: [{ type: core.Output }]
        };
        return LiveAppsCaseActionsComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Recent cases widget, this Component list recent visited Cases.
     *
     * ![alt-text](../live-apps-recent-cases.png "")
     *
     * \@example <tcla-live-apps-recent-cases></tcla-live-apps-recent-cases>
     */
    var LiveAppsRecentCasesComponent = /** @class */ (function (_super) {
        __extends(LiveAppsRecentCasesComponent, _super);
        function LiveAppsRecentCasesComponent(liveapps) {
            var _this = _super.call(this) || this;
            _this.liveapps = liveapps;
            /**
             * case card format - list, card, miniCard, staticList (no click event)
             */
            _this.displayType = _this.displayType ? _this.displayType : 'miniCard'; // miniCard, card, list
            // miniCard, card, list
            /**
             * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
             */
            _this.showHeader = _this.showHeader ? _this.showHeader : true;
            /**
             * ~event clickCase : Case clicked
             * ~payload CaseRoute : CaseRoute object output when case is clicked so calling component can route accordingly - ie. route to case
             */
            _this.clickCase = new core.EventEmitter();
            _this.clickCaseAction = (/**
             * @param {?} caseRoute
             * @return {?}
             */
            function (caseRoute) {
                _this.clickCase.emit(caseRoute);
            });
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                _this.recentCases = [];
                _this.liveapps.getRecentCases(_this.uiAppId, _this.sandboxId)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$)).subscribe((/**
                 * @param {?} next
                 * @return {?}
                 */
                function (next) {
                    _this.recentCases = next.caseRefs || [];
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error retrieving recent cases: ' + error.error.errorMsg; }));
            });
            _this.clearRecentCases = (/**
             * @return {?}
             */
            function () {
                // -1 will clear recent cases
                _this.liveapps.setRecentCase('-1', _this.uiAppId, _this.sandboxId);
                _this.recentCases = [];
            });
            _this.handleDeleted = (/**
             * @param {?} caseRef
             * @return {?}
             */
            function (caseRef) {
                _this.recentCases.splice(_this.recentCases.indexOf(caseRef), 1);
                _this.liveapps.unsetRecentCase(caseRef, _this.uiAppId, _this.sandboxId);
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsRecentCasesComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            _super.prototype.ngAfterViewInit.call(this);
            this.cardWidthPct = tcCoreLib.TcCoreCommonFunctions.calcSummaryCardPct(this.widget);
            this.containerChanges$.subscribe((/**
             * @param {?} widget
             * @return {?}
             */
            function (widget) {
                _this.cardWidthPct = tcCoreLib.TcCoreCommonFunctions.calcSummaryCardPct(widget);
            }));
        };
        /**
         * @return {?}
         */
        LiveAppsRecentCasesComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngOnInit.call(this);
            this.refresh();
        };
        LiveAppsRecentCasesComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-recent-cases',
                        template: "<div #componentDiv class=\"tcs-case-recent-box\" fxLayout=\"column\" fxFill>\n  <div *ngIf=\"showHeader\" class=\"tcs-case-recent-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    <div fxLayoutAlign=\"start center\">\n      <mat-icon class=\"tcs-icon tcs-recent-icon\" svgIcon=\"tcs-recent-icon\"></mat-icon>\n      <div class=\"tcs-case-recent-header-text\">Recent</div>\n    </div>\n    <mat-icon (click)=\"clearRecentCases()\" class=\"tcs-icon tcs-icon-active tcs-clear-recent-icon\" svgIcon=\"tcs-clear-icon\" matTooltip=\"Clear Recent Cases\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\"></mat-icon>\n  </div>\n  <div *ngIf=\"!showHeader\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n    <mat-icon style=\"margin: 5px\" (click)=\"clearRecentCases()\" class=\"tcs-icon tcs-icon-active tcs-clear-recent-icon\" svgIcon=\"tcs-clear-icon\" matTooltip=\"Clear Recent Cases\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\"></mat-icon>\n  </div>\n  <div *ngIf=\"recentCases.length > 0\"class=\"tcs-case-recent-flow-list\" fxLayout=\"column\" fxLayout=\"row wrap\">\n    <div class=\"tcs-case-recent-item-box\" *ngFor=\"let case of recentCases\" [fxFlex]=\"cardWidthPct\">\n      <tcla-live-apps-case-summary [uiAppId]=\"uiAppId\" [typeBar]=\"true\" [borderCard]=\"false\" [displayType]=\"displayType\" [sandboxId]=\"sandboxId\" [caseRef]=\"case\" (clickCase)=\"clickCaseAction($event)\" (deleted)=\"handleDeleted($event)\"></tcla-live-apps-case-summary>\n      <div class=\"tcs-case-recent-line\"></div>\n    </div>\n  </div>\n  <div *ngIf=\"!(recentCases.length > 0)\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxLayoutGap=\"10px\" style=\"margin: 20px;\">\n    <mat-icon [svgIcon]=\"'ic-no-cases-icon'\" style=\"height: 48px; width: 48px;\"></mat-icon>\n    <div style=\"height: 100%\" fxLayoutAlign=\"start center\">\n      <span class=\"tcs-no-item-text\">No cases found</span>\n    </div>\n  </div>\n</div>\n",
                        styles: [".tcs-case-recent-box{border-radius:3px;box-shadow:0 2px 8px 0 #dedede;background-color:#fff}.tcs-case-recent-header{min-height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-case-recent-header-text{font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-case-recent-flow-list{margin:10px;overflow-y:auto;padding:4px}.tcs-case-recent-item-box{padding:5px}.tcs-icon.tcs-icon-active:hover{cursor:pointer}:host ::ng-deep .tcs-icon.tcs-icon-active:hover .svg-content{fill:#0081cb}.tcs-case-recent-line{padding:0;margin:4px 5px 0;border-bottom:1.1px solid #f4f4f4}.tcs-no-item-text{font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#b6b6b6}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsRecentCasesComponent.ctorParameters = function () { return [
            { type: LiveAppsService }
        ]; };
        LiveAppsRecentCasesComponent.propDecorators = {
            sandboxId: [{ type: core.Input }],
            uiAppId: [{ type: core.Input }],
            displayType: [{ type: core.Input }],
            showHeader: [{ type: core.Input }],
            clickCase: [{ type: core.Output }],
            componentDiv: [{ type: core.ViewChild, args: ['componentDiv', { static: false },] }]
        };
        return LiveAppsRecentCasesComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Provides case audit summary for states
     *
     * ![alt-text](../live-apps-case-state-audit.png "Image")
     *
     * \@example <tcla-live-apps-case-state-audit></tcla-live-apps-case-state-audit>
     */
    var LiveAppsCaseStateAuditComponent = /** @class */ (function (_super) {
        __extends(LiveAppsCaseStateAuditComponent, _super);
        function LiveAppsCaseStateAuditComponent(caseStatesService) {
            var _this = _super.call(this) || this;
            _this.caseStatesService = caseStatesService;
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                _this.caseStatesService.getCaseStateAuditWithTerminal(_this.caseRef, _this.sandboxId, _this.appId)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$)).subscribe((/**
                 * @param {?} auditeventlist
                 * @return {?}
                 */
                function (auditeventlist) {
                    _this.auditEvents = auditeventlist.auditEvents;
                    if (!_this.auditEvents || _this.auditEvents.length <= 0) {
                        console.error('Unable to create states audit view. Case Audit likely removed due to subscription retention period.');
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error retrieving case audit: ' + error.error.errorMsg; }));
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsCaseStateAuditComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.refresh();
        };
        LiveAppsCaseStateAuditComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-state-audit',
                        template: "<div class=\"tcs-state-audit-pane\" fxLayout=\"column\" fxFill style=\"overflow: hidden;\">\n  <tc-tibco-cloud-widget-header [headerText]=\"'States'\" [icon]=\"'tcs-case-state-audit-icon'\"></tc-tibco-cloud-widget-header>\n  <div *ngIf=\"auditEvents && auditEvents.length > 0\" class=\"tcs-state-audit-container\">\n    <div class=\"tcs-state-audit-details\" fxLayout=\"column\" fxLayoutAlign=\"start start\">\n      <div *ngFor=\"let state of auditEvents; first as isFirst; last as isLast\"\n           [ngClass]=\"isFirst ? 'tcs-mini-state-item-first' : (isLast ? 'tcs-mini-state-item-last' : 'tcs-mini-state-item-middle')\">\n        <div fxLayout=\"row\">\n          <mat-icon class=\"tcs-mini-state-icon\"\n                    [svgIcon]=\"isLast ? (state.isTerminal ? 'tcs-mini-state-terminal-completed' : 'tcs-mini-state-current') : 'tcs-mini-state-completed'\"></mat-icon>\n          <li class=\"tcs-mini-state-details\" fxLayout=\"column\" fxLayoutAlign=\"start start\"\n              ng-class=\"{'underline':smallContainer}\">\n            <div class=\"tcs-mini-state-primary-label\"><span>{{state.caseState.value}}</span></div>\n            <div class=\"tcs-mini-state-secondary-label\">\n              <span *ngIf=\"state.principalName\">By {{state.principalName.value}}</span>\n              <span class=\"tcs-mini-state-spanPadding\"> on {{state.creationTime.value | date: \"medium\"}}</span>\n            </div>\n          </li>\n        </div>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"!auditEvents || auditEvents.length <= 0\">\n    <span class=\"tc-no-audit-data\">Audit data not available</span>\n  </div>\n</div>\n",
                        styles: [".tcs-state-audit-pane{border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff}.tcs-mini-state-item-middle{padding-top:30px;border-left:3px solid #062e79;margin-top:-10px}.tcs-mini-state-item-first{border-left:3px solid #062e79}.tcs-mini-state-item-last{margin-top:-10px;padding-top:30px;border-left:3px solid #062e79}.tcs-state-audit-container{overflow-x:auto;padding:11px}.tc-no-audit-data{padding:20px;min-width:150px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;color:#000}.tcs-mini-state-item-last:after{content:'';display:-webkit-box;display:flex;-webkit-box-orient:horizontal;-webkit-box-direction:normal;flex-direction:row;-webkit-box-align:center;align-items:center;position:relative;left:-46px;top:0;background-color:red;width:10px;height:0;margin-top:-12px}.tcs-mini-state-icon{position:relative;left:-13px}.tcs-state-audit-details{padding:10px 20px}.tcs-mini-state-details{margin-left:10px}.tcs-mini-state-primary-label{font-family:Source Sans Pro;font-size:14px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:.2px;color:#212121}.tcs-mini-state-secondary-label{font-family:Source Sans Pro;font-size:14px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:.2px;color:#b6b6b6}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCaseStateAuditComponent.ctorParameters = function () { return [
            { type: TcCaseStatesService }
        ]; };
        LiveAppsCaseStateAuditComponent.propDecorators = {
            caseRef: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }],
            appId: [{ type: core.Input }]
        };
        return LiveAppsCaseStateAuditComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Editor component to edit a note
     *
     * ![alt-text](../live-apps-notes-editor.png "")
     *
     * \@example <tcla-live-apps-notes-editor></tcla-live-apps-notes-editor>
     */
    var LiveAppsNotesEditorComponent = /** @class */ (function (_super) {
        __extends(LiveAppsNotesEditorComponent, _super);
        function LiveAppsNotesEditorComponent() {
            var _this = _super.call(this) || this;
            // use 'CASE_APP' to share notes with case manager
            _this.isReply = false;
            /**
             * ~event noteSubmitted : Internal
             */
            _this.noteSubmitted = new core.EventEmitter(); // notify text submitted
            _this.submitNote = (/**
             * @param {?} noteText
             * @return {?}
             */
            function (noteText) {
                _this.noteSubmitted.emit(noteText);
                _this.noteText = undefined;
            });
            return _this;
        }
        LiveAppsNotesEditorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-notes-editor',
                        template: "<div class=\"tcs-collaboration-new-thread\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxFlex>\n  <mat-icon *ngIf=\"isReply\" class=\"tcs-icon tcs-collaboration-reply-item-icon\" svgIcon=\"tcs-collaboration-reply\"></mat-icon>\n  <form class=\"tcs-collaboration-new-thread-form\" #newThreadForm=\"ngForm\" fxFlex>\n    <textarea fxFlex class=\"tcs-collaboration-input\" [(ngModel)]=\"noteText\" name=\"noteText\" md-maxlength=\"10000\" placeholder=\"New Note... \" rows=\"2\"></textarea>\n  </form>\n  <mat-icon class=\"tcs-icon tcs-collaboration-send-icon\" svgIcon=\"tcs-collaboration-send\" (click)=\"submitNote(noteText)\"></mat-icon>\n</div>\n",
                        styles: [".tcs-collaboration-new-thread-form{max-width:90%;max-height:100%}.tcs-collaboration-input{height:55px;max-width:100%;border-color:#d5e6ff;font-size:11px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#b6b6b6;resize:none;border-radius:3px}.tcs-icon.tcs-collaboration-send-icon{height:24px;width:24px;margin-left:12px}.tcs-icon{height:20px;width:20px}.tcs-collaboration-reply-item-icon{-webkit-transform:scale(1,-1);transform:scale(1,-1);margin-top:10px}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsNotesEditorComponent.ctorParameters = function () { return []; };
        LiveAppsNotesEditorComponent.propDecorators = {
            noteText: [{ type: core.Input }],
            isReply: [{ type: core.Input }],
            noteSubmitted: [{ type: core.Output }]
        };
        return LiveAppsNotesEditorComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Component perform a Login in case there is no valid Session yet.
     *
     * If the user is not logged in the login component will be displayed automatically.
     *
     * ![alt-text](../Login.png "Image")
     */
    var LiveAppsLoginComponent = /** @class */ (function (_super) {
        __extends(LiveAppsLoginComponent, _super);
        function LiveAppsLoginComponent() {
            var _this = _super.call(this) || this;
            _this.loginContext = new core.EventEmitter();
            // run when logged in
            _this.handleLoggedIn = (/**
             * @param {?} loginInfo
             * @return {?}
             */
            function (loginInfo) {
                sessionStorage.setItem('loggedIn', Date.now().toString());
                // emit useful details about the login and session/claims
                _this.loginContext.emit(new LoginContext().deserialize({
                    authInfo: loginInfo.authInfo,
                    accessToken: loginInfo.accessToken
                }));
            });
            return _this;
        }
        LiveAppsLoginComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-login',
                        template: "<tc-tibco-cloud-login fxFill (loggedIn)=\"handleLoggedIn($event)\" [loginPrefill]=\"loginPrefill\"></tc-tibco-cloud-login>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsLoginComponent.ctorParameters = function () { return []; };
        LiveAppsLoginComponent.propDecorators = {
            loginContext: [{ type: core.Output }],
            loginPrefill: [{ type: core.Input }]
        };
        return LiveAppsLoginComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * High Level search widget component (wraps others)
     * This Component allows to search for existing Cases and list Case Cards.
     *
     * ![alt-text](../live-apps-search-widget.png "")
     *
     * \@example <tcla-live-apps-search-widget></tcla-live-apps-search-widget>
     */
    var LiveAppsSearchWidgetComponent = /** @class */ (function (_super) {
        __extends(LiveAppsSearchWidgetComponent, _super);
        function LiveAppsSearchWidgetComponent(liveapps) {
            var _this = _super.call(this) || this;
            _this.liveapps = liveapps;
            /**
             * The fixed height of the case list results pane
             */
            _this.resultsHeight = _this.resultsHeight ? _this.resultsHeight : '400px';
            /**
             * ~event caseSelected : Case Clicked
             * ~payload string : emits case reference when a case is clicked (so parent can navigate to case)
             */
            _this.caseSelected = new core.EventEmitter();
            // case search
            _this.matchedRefs = [];
            // handle case search results
            _this.handleSearchResults = (/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.message = undefined;
                _this.matchedRefs = data.caserefs;
                _this.searchString = data.searchString;
            });
            _this.handleClearMatches = (/**
             * @return {?}
             */
            function () {
                _this.caseSearchComponent.clearResults();
                _this.matchedRefs = [];
                _this.message = undefined;
            });
            // case clicked
            _this.clickCaseAction = (/**
             * @param {?} caseReference
             * @return {?}
             */
            function (caseReference) {
                _this.caseSelected.emit(caseReference);
            });
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                if (_this.caseSearchComponent) {
                    _this.caseSearchComponent.refresh();
                }
            });
            _this.searchCasesByState = (/**
             * @param {?} stateId
             * @param {?} stateLabel
             * @param {?} appId
             * @param {?} typeId
             * @param {?} message
             * @return {?}
             */
            function (stateId, stateLabel, appId, typeId, message) {
                _this.caseSearchComponent.setCaseType(new CaseType().deserialize({ applicationId: appId, id: typeId }));
                _this.caseSearchComponent.setSelectedStateId(stateId, stateLabel);
                _this.message = message;
                _this.liveapps.caseSearchEntries('', _this.sandboxId, appId, typeId, true, 0, 1000, stateId).subscribe((/**
                 * @param {?} results
                 * @return {?}
                 */
                function (results) {
                    _this.matchedRefs = results.caserefs;
                }));
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsSearchWidgetComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngAfterViewInit.call(this);
            this.containerChanges$.subscribe();
        };
        /**
         * @return {?}
         */
        LiveAppsSearchWidgetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngOnInit.call(this);
        };
        LiveAppsSearchWidgetComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-search-widget',
                        template: "<div fxFill fxLayout=\"column\" #componentDiv>\n  <div fxLayout=\"row\" style=\"margin-top: 10px; margin-bottom: 10px;\">\n    <tcla-live-apps-case-search fxFlex fxLayoutAlign=\"center center\" [sandboxId]=\"sandboxId\" [appIds]=\"appIds\" (foundRefs)=\"handleSearchResults($event)\"></tcla-live-apps-case-search>\n  </div>\n  <div *ngIf=\"matchedRefs.length>0\" fxLayout=\"row\" fxLayoutAlign=\"space-around start\" [ngStyle]=\"{'min-height' : resultsHeight}\" style=\"margin-left: 50px; margin-right: 50px; margin-top: 20px; margin-bottom: 20px; height: 100%;\">\n    <tcla-live-apps-case-list #componentChildDiv fxFlex style=\"height: 100%\" [sandboxId]=\"sandboxId\" [uiAppId]=\"uiAppId\" [caseRefs]=\"matchedRefs\" [displayType]=\"widget.gtXs ? 'list' : 'miniCard'\" [headerText]=\"'Matching Cases'\" [headerMessage]=\"message\" [highlight]=\"searchString\" (clickCase)=\"clickCaseAction($event)\" (clearMatches)=\"handleClearMatches()\"></tcla-live-apps-case-list>\n    <!--tcla-live-apps-case-list #componentChildDiv fxFlex style=\"height: 100%\" [sandboxId]=\"sandboxId\" [uiAppId]=\"uiAppId\" [caseRefs]=\"matchedRefs\" [displayType]=\"'list'\" [headerText]=\"'Matching Cases'\" [headerMessage]=\"message\" [highlight]=\"searchString\" (clickCase)=\"clickCaseAction($event)\" (clearMatches)=\"handleClearMatches()\"></tcla-live-apps-case-list-->\n  </div>\n</div>\n\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsSearchWidgetComponent.ctorParameters = function () { return [
            { type: LiveAppsService }
        ]; };
        LiveAppsSearchWidgetComponent.propDecorators = {
            sandboxId: [{ type: core.Input }],
            uiAppId: [{ type: core.Input }],
            appIds: [{ type: core.Input }],
            resultsHeight: [{ type: core.Input }],
            caseSelected: [{ type: core.Output }],
            caseSearchComponent: [{ type: core.ViewChild, args: [LiveAppsCaseSearchComponent, { static: false },] }],
            componentDiv: [{ type: core.ViewChild, args: ['componentDiv', { static: false },] }],
            componentDivs: [{ type: core.ViewChildren, args: ['componentDiv',] }]
        };
        return LiveAppsSearchWidgetComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Handles rendering of case creator form.
     *
     * \@example <tcla-live-apps-case-creator></tcla-live-apps-case-creator>
     */
    var LiveAppsCaseCreatorComponent = /** @class */ (function (_super) {
        __extends(LiveAppsCaseCreatorComponent, _super);
        function LiveAppsCaseCreatorComponent(liveapps) {
            var _this = _super.call(this) || this;
            _this.liveapps = liveapps;
            /**
             * Enable legacy creators
             */
            _this.legacyCreators = _this.legacyCreators ? _this.legacyCreators : false;
            /**
             * Allow override of forms framework
             * Options: bootstrap-4 or material-design
             */
            _this.formsFramework = _this.formsFramework ? _this.formsFramework : 'material-design';
            /**
             * ~event caseChanged : Case action started (process started)
             * ~payload ProcessId : ProcessId object passed when a case has been updated or created by a process (action/creator)
             */
            _this.caseChanged = new core.EventEmitter();
            _this.isCustomForm = false;
            _this.handleSubmit = (/**
             * @param {?} data
             * @param {?} caseRef
             * @return {?}
             */
            function (data, caseRef) {
                // if no_process_submit then no need to run process as this was done inside a custom form app
                if (data !== 'NO_PROCESS_SUBMIT') {
                    // run the process
                    _this.liveapps.runProcess(_this.sandboxId, _this.applicationId, _this.process.process.id, caseRef, data)
                        .pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                        .subscribe((/**
                     * @param {?} response
                     * @return {?}
                     */
                    function (response) {
                        if (response) {
                            if (!response.data.errorMsg) {
                                // parse data to object
                                response.data = JSON.parse(response.data);
                                // case created send back response including caseIdentifier if one is present
                                /** @type {?} */
                                var caseIdentifier = void 0;
                                /** @type {?} */
                                var caseReference = void 0;
                                if (response.caseIdentifier) {
                                    caseIdentifier = response.caseIdentifier;
                                }
                                if (response.caseReference) {
                                    caseReference = response.caseReference;
                                }
                                /** @type {?} */
                                var processResponse = new ProcessId().deserialize({ 'caseIdentifier': caseIdentifier, 'caseReference': caseReference });
                                _this.caseChanged.emit(processResponse);
                                _this.schema = undefined;
                                _this.data = undefined;
                                _this.layout = undefined;
                            }
                            else {
                                console.error('Unable to run case creator');
                                console.error(response.data.errorMsg);
                            }
                        }
                    }), (/**
                     * @param {?} error
                     * @return {?}
                     */
                    function (error) {
                        console.error('Unable to run case creator');
                        console.error(error);
                    }));
                }
                else {
                    /** @type {?} */
                    var processResponse = new ProcessId().deserialize({ 'caseIdentifier': undefined, 'caseReference': undefined });
                    _this.caseChanged.emit(processResponse);
                    _this.schema = undefined;
                    _this.data = undefined;
                    _this.layout = undefined;
                }
            });
            _this.handleLegacyProcessComplete = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var processResponse = new ProcessId().deserialize({ 'caseIdentifier': undefined, 'caseReference': undefined });
                _this.caseChanged.emit(processResponse);
            });
            _this.handleLegacyProcessCancelled = (/**
             * @return {?}
             */
            function () {
                // -1 for caseReference means cancelled
                /** @type {?} */
                var processResponse = new ProcessId().deserialize({ 'caseIdentifier': undefined, 'caseReference': '-1' });
                _this.caseChanged.emit(processResponse);
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsCaseCreatorComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.options = {
                defaultOptions: {
                    'appearance': 'legacy'
                }
            };
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        LiveAppsCaseCreatorComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            // handle input param changes
            if (changes.process && changes.process.currentValue && (changes.process.currentValue !== changes.process.previousValue)) {
                if (this.customFormDefs && this.customFormDefs.customForms) {
                    this.isCustomForm = (this.customFormDefs.customForms.findIndex((/**
                     * @param {?} form
                     * @return {?}
                     */
                    function (form) {
                        return (form === _this.process.ref);
                    })) !== -1);
                }
                else {
                    this.isCustomForm = false;
                }
                if (changes.process.currentValue.process.jsonSchema.$schema === 'NOSCHEMA') {
                    this.schema = undefined;
                }
                else {
                    this.schema = changes.process.currentValue.process.jsonSchema;
                }
            }
            else if (changes.applicationId && (changes.applicationId.currentValue !== changes.applicationId.previousValue)) {
                // appId has changed: make sure no process selected/form displayed
                this.process = undefined;
            }
            if (changes.layout && (changes.layout.currentValue !== changes.layout.previousValue)) {
                this.layout = changes.layout.currentValue;
            }
            if (changes.dataOverride && (changes.dataOverride.currentValue !== changes.dataOverride.previousValue)) {
                this.data = this.dataOverride;
            }
        };
        LiveAppsCaseCreatorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-creator',
                        template: "<div fxFill>\n  <tcfrm-rendered-form *ngIf=\"process && (!legacyCreators || isCustomForm)\" style=\"overflow: auto;\" [formsFramework]=\"formsFramework\" [customFormDefs]=customFormDefs [formRef]=\"process.ref\" [appId]=\"applicationId\" [customFormDefs]=\"customFormDefs\" [schema]=\"schema\" [layout]=\"layout\" [data]=\"data\" [options]=\"options\" (formSubmit)=\"handleSubmit($event, undefined)\"></tcfrm-rendered-form>\n  <tcla-live-apps-legacy-process *ngIf=\"process && legacyCreators && !isCustomForm\" [process]=\"process\" [type]=\"'creator'\" [applicationId]=\"applicationId\" [typeId]=\"typeId\" (processCancelled)=\"handleLegacyProcessCancelled()\" (processComplete)=\"handleLegacyProcessComplete()\" class=\"live-apps-widget\" fxFill></tcla-live-apps-legacy-process>\n</div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCaseCreatorComponent.ctorParameters = function () { return [
            { type: LiveAppsService }
        ]; };
        LiveAppsCaseCreatorComponent.propDecorators = {
            sandboxId: [{ type: core.Input }],
            applicationId: [{ type: core.Input }],
            typeId: [{ type: core.Input }],
            process: [{ type: core.Input }],
            dataOverride: [{ type: core.Input }],
            customFormDefs: [{ type: core.Input }],
            legacyCreators: [{ type: core.Input }],
            formsFramework: [{ type: core.Input }],
            caseChanged: [{ type: core.Output }]
        };
        return LiveAppsCaseCreatorComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LiveAppsCreatorSelectorComponent = /** @class */ (function (_super) {
        __extends(LiveAppsCreatorSelectorComponent, _super);
        function LiveAppsCreatorSelectorComponent(liveapps) {
            var _this = _super.call(this) || this;
            _this.liveapps = liveapps;
            /**
             * ~event creatorSelection : Case Creator selected
             * ~payload LaProcessSelection : LaProcessSelection object output when a creator is selected from a drop down
             */
            _this.creatorSelection = new core.EventEmitter();
            // run when the user clicks on a case creator
            _this.selectProcess = (/**
             * @param {?} process
             * @return {?}
             */
            function (process) {
                _this.creatorSelection.emit(new LaProcessSelection('creator', _this.appSchema, _this.getCaseIDAttributeName(), process, 
                // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
                (_this.caseType.applicationName + '.' + _this.caseType.applicationInternalName + '.' + 'creator' + '.' + process.name), undefined));
            });
            _this.reset = (/**
             * @return {?}
             */
            function () {
                _this.creatorSelector.value = undefined;
            });
            _this.getCaseIDAttributeName = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var caseIdAttrib;
                _this.caseType.attributes.forEach((/**
                 * @param {?} attribute
                 * @return {?}
                 */
                function (attribute) {
                    if (attribute.isIdentifier) {
                        caseIdAttrib = attribute;
                    }
                }));
                return caseIdAttrib;
            });
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                // retrieve the schema for this case type so we can display case creators and case actions for this case type
                _this.liveapps.getCaseTypeSchema(_this.sandboxId, _this.appId, 100)
                    .subscribe((/**
                 * @param {?} schema
                 * @return {?}
                 */
                function (schema) {
                    _this.appSchema = schema;
                    schema.casetypes.forEach((/**
                     * @param {?} casetype
                     * @return {?}
                     */
                    function (casetype) {
                        // the schema will contain definitions for both the 'case' and any defined types in that case.
                        // We want the schema for this 'case'.
                        if (casetype.applicationId === _this.appId && casetype.id === _this.typeId) {
                            if (casetype.jsonSchema !== undefined) {
                                _this.caseType = casetype;
                                _this.caseCreatorList = casetype.creators ? casetype.creators : [];
                                if (_this.caseCreatorList.length === 1) {
                                    _this.selectProcess(_this.caseCreatorList[0]);
                                }
                            }
                            else {
                                console.error('No schema returned for this case type: You may need to update/re-deploy the live apps application');
                            }
                        }
                    }));
                }));
            });
            return _this;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        LiveAppsCreatorSelectorComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.appId && (changes.appId.currentValue !== changes.appId.previousValue)) {
                this.caseCreatorList = [];
                this.refresh();
            }
        };
        LiveAppsCreatorSelectorComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-creator-selector',
                        template: "<div *ngIf=\"caseCreatorList && caseCreatorList.length > 1\" fxFlex style=\"margin-left: 10px;\">\n    <span class=\"tcs-case-creation-dialog-instruction\">Select a case creator</span>\n    <mat-select #creatorSelector class=\"tcs-creator-selector-option\" [disableOptionCentering]=\"true\"\n                placeholder=\"Case Creators\" (selectionChange)=\"selectProcess($event.value)\">\n      <mat-option *ngFor=\"let creator of caseCreatorList\" [value]=\"creator\">\n        <span>{{creator.name}}</span>\n      </mat-option>\n    </mat-select>\n</div>\n",
                        styles: [":host ::ng-deep .tcs-creator-selector-option .mat-select-value span{font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;color:#0081cb}:host ::ng-deep .tcs-creator-selector-option .mat-select-arrow-wrapper div{color:#0081cb}:host ::ng-deep .mat-select-value{min-width:100px;max-width:100%;width:auto}.tcs-creators-box{width:200px;height:44px;box-shadow:inset 0 1px 3px 0 rgba(0,0,0,.5);background-color:#fff}tcs-creator-selector-option{width:170px;margin-left:5px;margin-right:5px;background-color:#eee;padding-left:20px;padding-right:20px;height:35px}.tcs-case-creation-dialog-instruction{font-family:Source Sans Pro;font-size:16px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#727272}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCreatorSelectorComponent.ctorParameters = function () { return [
            { type: LiveAppsService }
        ]; };
        LiveAppsCreatorSelectorComponent.propDecorators = {
            creatorSelector: [{ type: core.ViewChild, args: ['creatorSelector', { static: false },] }],
            sandboxId: [{ type: core.Input }],
            appId: [{ type: core.Input }],
            typeId: [{ type: core.Input }],
            creatorSelection: [{ type: core.Output }]
        };
        return LiveAppsCreatorSelectorComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Wraps case creator selection and execution of creator
     *
     * \@example <tcla-live-apps-creators></tcla-live-apps-creators>
     */
    var LiveAppsCreatorsComponent = /** @class */ (function () {
        function LiveAppsCreatorsComponent() {
            var _this = this;
            /**
             * Enable legacy creators
             */
            this.legacyCreators = this.legacyCreators ? this.legacyCreators : false;
            /**
             * Allow override of forms framework
             * Options: bootstrap-4 or material-design
             */
            this.formsFramework = this.formsFramework ? this.formsFramework : 'material-design';
            /**
             * ~event caseCreated : Case Creator started (process started)
             * ~payload ProcessId : ProcessId object output on case creation (details of process started)
             */
            this.caseCreated = new core.EventEmitter();
            // handle form submit
            this.handleSubmit = (/**
             * @param {?} data
             * @return {?}
             */
            function (data) {
                _this.caseCreated.emit(data);
                /*if (this.creatorSelector) {
                  this.creatorSelector.reset();
                }*/
            });
            // handle case creator selection
            this.handleCreatorSelection = (/**
             * @param {?} process
             * @return {?}
             */
            function (process) {
                _this.selectedProcess = process;
            });
        }
        /**
         * @return {?}
         */
        LiveAppsCreatorsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            console.log(this.applicationId);
        };
        LiveAppsCreatorsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-creators',
                        template: "<div fxLayout=\"column\" fxFlexFill>\n  <!--tcla-live-apps-creator-selector #creatorSelector style=\"\" [sandboxId]=\"sandboxId\" [appId]=\"applicationId\" [typeId]=\"typeId\" (creatorSelection)=\"handleCreatorSelection($event)\"></tcla-live-apps-creator-selector-->\n  <tcla-live-apps-case-creators *ngIf=\"!selectedProcess\" #creatorSelector style=\"\" [sandboxId]=\"sandboxId\" [appId]=\"applicationId\" [typeId]=\"typeId\" (creatorClicked)=\"handleCreatorSelection($event)\"></tcla-live-apps-case-creators>\n  <tcla-live-apps-case-creator style=\"overflow: auto; height: 100%\" [formsFramework]=\"formsFramework\" [sandboxId]=\"sandboxId\" [applicationId]=\"applicationId\" [typeId]=\"typeId\" [process]=\"selectedProcess\" [dataOverride]=\"dataOverride\" [customFormDefs]=\"customFormDefs\" [legacyCreators]=\"legacyCreators\" (caseChanged)=\"handleSubmit($event)\"></tcla-live-apps-case-creator>\n</div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCreatorsComponent.ctorParameters = function () { return []; };
        LiveAppsCreatorsComponent.propDecorators = {
            creatorSelector: [{ type: core.ViewChild, args: ['creatorSelector', { static: false },] }],
            sandboxId: [{ type: core.Input }],
            applicationId: [{ type: core.Input }],
            typeId: [{ type: core.Input }],
            dataOverride: [{ type: core.Input }],
            customFormDefs: [{ type: core.Input }],
            legacyCreators: [{ type: core.Input }],
            formsFramework: [{ type: core.Input }],
            caseCreated: [{ type: core.Output }]
        };
        return LiveAppsCreatorsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Wraps legacy angularjs form renderer
     *
     * \@example <tcla-live-apps-legacy-form></tcla-live-apps-legacy-form>
     */
    var LiveAppsLegacyProcessComponent = /** @class */ (function (_super) {
        __extends(LiveAppsLegacyProcessComponent, _super);
        function LiveAppsLegacyProcessComponent(visibilityService, host, legacyIframeService) {
            var _this = _super.call(this) || this;
            _this.visibilityService = visibilityService;
            _this.host = host;
            _this.legacyIframeService = legacyIframeService;
            _this.legacyIframeId = _this.legacyIframeId ? _this.legacyIframeId : 'legacyProcessFrame';
            _this.processComplete = new core.EventEmitter();
            _this.processCancelled = new core.EventEmitter();
            _this.processActive = false;
            _this.changeProcess = (/**
             * @param {?} process
             * @return {?}
             */
            function (process) {
                // process has changed
                _this.renderProcess(process);
            });
            _this.renderProcess = (/**
             * @param {?} process
             * @return {?}
             */
            function (process) {
                if (_this.processActive && _this.openProcessId) {
                    // opening a new process so cancel old one
                    _this.cancelProcess(false);
                }
                // send message to external form app
                _this.formDiv.contentWindow.postMessage({
                    action: _this.type === 'creator' ? 'runCreator' : 'runAction',
                    processId: process.process.id,
                    caseRef: process.caseReference,
                    caseState: _this.caseState,
                    applicationId: _this.applicationId,
                    typeId: _this.typeId
                }, window.location.origin);
                // position the form iframe over the processDiv placeholder
                _this.processActive = true;
                _this.openProcessId = process.process.id;
                _this.resizeProcess();
            });
            _this.receiveMessage = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event.data.action === 'processComplete') {
                    _this.processActive = false;
                    _this.openProcessId = undefined;
                    _this.hideProcess();
                    _this.processComplete.emit();
                }
                else if (event.data.action === 'processCancelled') {
                    _this.processActive = false;
                    _this.openProcessId = undefined;
                    _this.hideProcess();
                    _this.processCancelled.emit();
                }
            });
            _this.cancelProcess = (/**
             * @param {?=} emit
             * @return {?}
             */
            function (emit) {
                _this.formDiv.contentWindow.postMessage({ 'action': 'cancelProcess' }, window.location.origin);
                _this.processActive = false;
                _this.openProcessId = undefined;
                _this.hideProcess();
                if (emit) {
                    _this.processCancelled.emit();
                }
            });
            _this.hideProcess = (/**
             * @return {?}
             */
            function () {
                // hide the iframe!
                _this.formDiv.style.top = '-1000px';
                _this.formDiv.style.left = '-1000px';
                _this.formDiv.style.zIndex = '1';
            });
            _this.resizeProcess = (/**
             * @return {?}
             */
            function () {
                // position the form iframe over the processDiv placeholder
                setTimeout((/**
                 * @param {?} handler
                 * @return {?}
                 */
                function (handler) {
                    /** @type {?} */
                    var rect = _this.target.getBoundingClientRect();
                    _this.formDiv.style.top = rect.top.toString() + 'px';
                    _this.formDiv.style.left = rect.left.toString() + 'px';
                    _this.formDiv.style.height = rect.height.toString() + 'px';
                    _this.formDiv.style.width = rect.width.toString() + 'px';
                    _this.formDiv.style.position = 'absolute';
                    // creator needs 1001 so it is over the dialog box
                    _this.formDiv.style.zIndex = (_this.type === 'creator') ? '1001' : '1000';
                }), 1000);
            });
            _this.initialize = (/**
             * @return {?}
             */
            function () {
                // listen for messages from the iframe
                window.addEventListener('message', _this.receiveMessage, false);
                // we only want to render the process when the element is visible
                /** @type {?} */
                var inSight$ = _this.visibilityService.elementInSight(_this.host);
                inSight$.subscribe((/**
                 * @param {?} next
                 * @return {?}
                 */
                function (next) {
                    if (!next) {
                        // element not visible so hide the process if it is showing
                        if (_this.processActive && _this.target) {
                            _this.hideProcess();
                        }
                    }
                    else {
                        // element is visible
                        if (!_this.processActive) {
                            // if process not already showing - show it
                            // first get a handle on the target div and the legacy iframe
                            _this.target = document.getElementById('processDiv');
                            _this.formDiv = document.getElementById(_this.legacyIframeId);
                            if (_this.openProcessId) {
                                // trigger display of the process
                                _this.renderProcess(_this.process);
                            }
                        }
                        else {
                            _this.resizeProcess();
                        }
                    }
                }));
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsLegacyProcessComponent.prototype.isFormActive = /**
         * @return {?}
         */
        function () {
            return this.processActive;
        };
        /**
         * @return {?}
         */
        LiveAppsLegacyProcessComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            _super.prototype.ngAfterViewInit.call(this);
            this.openProcessId = this.process.process.id;
            this.containerChanges$.subscribe((/**
             * @param {?} widget
             * @return {?}
             */
            function (widget) {
                if (_this.processActive && _this.target) {
                    _this.resizeProcess();
                }
            }));
            // wait for iframe to load before doing anything else
            // this observable will emit true once the iFrame is loaded
            this.legacyIframeService.processStatus.subscribe((/**
             * @param {?} loaded
             * @return {?}
             */
            function (loaded) {
                if (loaded) {
                    // iframe is loaded
                    _this.initialize();
                }
            }));
        };
        /**
         * @return {?}
         */
        LiveAppsLegacyProcessComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.openProcessId) {
                this.cancelProcess();
            }
        };
        LiveAppsLegacyProcessComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-legacy-process',
                        template: "<div #componentDiv fxFill id=\"processDiv\" style=\"border: none;\"></div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsLegacyProcessComponent.ctorParameters = function () { return [
            { type: tcCoreLib.TcVisibilityService },
            { type: core.ElementRef },
            { type: tcCoreLib.LegacyIframeService }
        ]; };
        LiveAppsLegacyProcessComponent.propDecorators = {
            legacyIframeId: [{ type: core.Input }],
            process: [{ type: core.Input }],
            type: [{ type: core.Input }],
            applicationId: [{ type: core.Input }],
            typeId: [{ type: core.Input }],
            caseRef: [{ type: core.Input }],
            caseState: [{ type: core.Input }],
            processComplete: [{ type: core.Output }],
            processCancelled: [{ type: core.Output }]
        };
        return LiveAppsLegacyProcessComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Wraps rendering an execution of an action
     *
     * \@example <tcla-live-apps-case-action></tcla-live-apps-case-action>
     */
    var LiveAppsCaseActionComponent = /** @class */ (function (_super) {
        __extends(LiveAppsCaseActionComponent, _super);
        function LiveAppsCaseActionComponent(lasvc) {
            var _this = _super.call(this, lasvc) || this;
            _this.lasvc = lasvc;
            /**
             * Enable legacy actions
             */
            _this.legacyActions = _this.legacyActions ? _this.legacyActions : false;
            /**
             * Allow override of forms framework
             * Options: bootstrap-4 or material-design
             */
            _this.formsFramework = _this.formsFramework ? _this.formsFramework : 'material-design';
            _this.getCaseData = (/**
             * @param {?} caseRef
             * @return {?}
             */
            function (caseRef) {
                // retrieve the case data for this case reference
                _this.liveapps.getCase(_this.caseRef, _this.sandboxId, _this.applicationId, _this.typeId)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    var _a, _b;
                    if (result.metadata.applicationId === _this.applicationId.toString()) {
                        /** @type {?} */
                        var casedata = result.untaggedCasedataObj;
                        _this.caseState = casedata.state;
                        _this.originalData = (_a = {},
                            _a[_this.process.process.name] = casedata,
                            _a);
                        // JS: use name rather than internalObjectName to handle appliction name change
                        /** @type {?} */
                        var caseTypeName = _this.getMainCaseTypeFromSchema(_this.typeId, _this.process).name;
                        _this.data = (_b = {},
                            _b[caseTypeName] = casedata,
                            _b);
                    }
                    else {
                        console.error('The selected case is not the right case type for this action');
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    // Emit any error retrieving case data to the parent
                    console.error('Unable to retrieve case data');
                    console.error(error);
                }));
            });
            _this.cancelAction = (/**
             * @return {?}
             */
            function () {
                if (_this.legacyProcessComponent) {
                    _this.legacyProcessComponent.cancelProcess();
                }
            });
            return _this;
        }
        /**
         * @private
         * @param {?} typeId
         * @param {?} process
         * @return {?}
         */
        LiveAppsCaseActionComponent.prototype.getMainCaseTypeFromSchema = /**
         * @private
         * @param {?} typeId
         * @param {?} process
         * @return {?}
         */
        function (typeId, process) {
            /** @type {?} */
            var requestedType;
            process.appSchema.casetypes.forEach((/**
             * @param {?} cType
             * @return {?}
             */
            function (cType) {
                if (cType.id === typeId) {
                    requestedType = cType;
                }
            }));
            return requestedType;
        };
        /**
         * @return {?}
         */
        LiveAppsCaseActionComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            // set default layout
            // this.layout = [];
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        LiveAppsCaseActionComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            // the extended class will detect change in the process and layout passed
            _super.prototype.ngOnChanges.call(this, changes);
            // handle input param changes
            if ((changes.caseRef && changes.caseRef.currentValue && (changes.caseRef.currentValue !== changes.caseRef.previousValue))
                || (changes.process && changes.process.currentValue && (changes.process.currentValue !== changes.process.previousValue))) {
                // get case data if anything changes
                if (changes.process.currentValue) {
                    this.getCaseData(this.caseRef);
                }
            }
            // handle process change for legacy action process
            if (changes.process && changes.process.currentValue && (changes.process.currentValue !== changes.process.previousValue)) {
                if (this.legacyProcessComponent) {
                    this.legacyProcessComponent.changeProcess(changes.process.currentValue);
                }
            }
        };
        LiveAppsCaseActionComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-action',
                        template: "<div class=\"tcs-case-action-pane\" fxLayout=\"column\" fxFill>\n  <tc-tibco-cloud-widget-header *ngIf=\"showHeader\" fxFlex=\"nogrow\" [headerText]=\"'Action'\" [icon]=\"'tcs-case-action-item'\"></tc-tibco-cloud-widget-header>\n  <tcfrm-rendered-form *ngIf=\"data && process && (!legacyActions || isCustomForm)\" [schema]=\"schema\" [layout]=\"layout\" [data]=\"data\" [caseRef]=\"caseRef\" [appId]=\"applicationId\" [customFormDefs]=\"customFormDefs\" [formsFramework]=\"formsFramework\" [formRef]=\"process.ref\" (formSubmit)=\"handleSubmit($event, caseRef)\"></tcfrm-rendered-form>\n  <tcla-live-apps-legacy-process *ngIf=\"data && process && legacyActions && !isCustomForm\" [process]=\"process\" [caseState]=\"caseState\" [type]=\"'action'\" [applicationId]=\"applicationId\" [typeId]=\"typeId\" [caseRef]=\"caseRef\" (processCancelled)=\"handleLegacyProcessCancelled()\" (processComplete)=\"handleLegacyProcessComplete()\" class=\"live-apps-widget\" fxFill></tcla-live-apps-legacy-process>\n</div>\n",
                        styles: [".tcs-case-action-pane{border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff}.tcs-case-action-header{height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-case-action-header-text{margin-left:10px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCaseActionComponent.ctorParameters = function () { return [
            { type: LiveAppsService }
        ]; };
        LiveAppsCaseActionComponent.propDecorators = {
            caseRef: [{ type: core.Input }],
            showHeader: [{ type: core.Input }],
            legacyActions: [{ type: core.Input }],
            formsFramework: [{ type: core.Input }],
            legacyProcessComponent: [{ type: core.ViewChild, args: [LiveAppsLegacyProcessComponent, { static: false },] }]
        };
        return LiveAppsCaseActionComponent;
    }(LiveAppsCaseCreatorComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Not used by app but wraps action list and action execution.
     *
     * \@example <tcla-live-apps-actions></tcla-live-apps-actions>
     */
    var LiveAppsActionsComponent = /** @class */ (function () {
        function LiveAppsActionsComponent() {
            var _this = this;
            /**
             * Allow override of forms framework
             * Options: bootstrap-4 or material-design
             */
            this.formsFramework = this.formsFramework ? this.formsFramework : 'material-design';
            /**
             * ~event caseActioned : Case action starterd (process started)
             * ~payload ProcessId : processId of started process in live apps (action)
             */
            this.caseActioned = new core.EventEmitter();
            // action clicked
            this.handleActionCompleted = (/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                _this.caseActioned.emit(result);
                _this.actionSelector.toggleEnable();
            });
            this.handleActionClicked = (/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                _this.actionSelector.toggleEnable();
                _this.selectedAction = action;
            });
        }
        /**
         * @return {?}
         */
        LiveAppsActionsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        LiveAppsActionsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-actions',
                        template: "<div fxLayout=\"column\" fxFlexFill>\n  <tcla-live-apps-case-actions [sandboxId]=\"sandboxId\" [typeId]=\"typeId\" [appId]=\"applicationId\" [caseRef]=\"caseRef\" [maxActions]=\"5\" [actionFilter]=\"actionFilter\" (actionClicked)=\"handleActionClicked($event)\"></tcla-live-apps-case-actions>\n  <tcla-live-apps-case-action *ngIf=\"selectedAction\" [process]=\"selectedAction\" [caseRef]=\"caseRef\" [typeId]=\"typeId\" [applicationId]=\"applicationId\" [sandboxId]=\"sandboxId\" [formsFramework]=\"formsFramework\"></tcla-live-apps-case-action>\n</div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsActionsComponent.ctorParameters = function () { return []; };
        LiveAppsActionsComponent.propDecorators = {
            actionSelector: [{ type: core.ViewChild, args: [LiveAppsCaseActionsComponent, { static: false },] }],
            caseRef: [{ type: core.Input }],
            caseState: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }],
            applicationId: [{ type: core.Input }],
            typeId: [{ type: core.Input }],
            customFormDefs: [{ type: core.Input }],
            formsFramework: [{ type: core.Input }],
            actionFilter: [{ type: core.Input }],
            caseActioned: [{ type: core.Output }]
        };
        return LiveAppsActionsComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ClaimsResolver = /** @class */ (function () {
        function ClaimsResolver(liveapps) {
            this.liveapps = liveapps;
        }
        /**
         * @return {?}
         */
        ClaimsResolver.prototype.resolve = /**
         * @return {?}
         */
        function () {
            // note claims will be cached at http level
            // logout required to update them anyway
            // note claims will be cached at http level
            // logout required to update them anyway
            /** @type {?} */
            var claims = this.liveapps.getClaims()
                .pipe(operators.map((/**
             * @param {?} claim
             * @return {?}
             */
            function (claim) {
                claim.sandboxes.forEach((/**
                 * @param {?} sandbox
                 * @return {?}
                 */
                function (sandbox) {
                    if (sandbox.type === 'Production') {
                        claim.primaryProductionSandbox = sandbox;
                    }
                }));
                return claim;
            })));
            return claims;
        };
        ClaimsResolver.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        ClaimsResolver.ctorParameters = function () { return [
            { type: LiveAppsService }
        ]; };
        return ClaimsResolver;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CaseGuard = /** @class */ (function () {
        function CaseGuard(liveapps, router) {
            this.liveapps = liveapps;
            this.router = router;
        }
        /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        CaseGuard.prototype.canActivate = /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        function (route, state) {
            var _this = this;
            // get app config
            /** @type {?} */
            var caseRef = route.url[route.url.length - 1].path;
            /** @type {?} */
            var claimsResolver = new ClaimsResolver(this.liveapps);
            /** @type {?} */
            var decision = claimsResolver.resolve()
                .pipe(
            // use flatMap so we can pass the config into the getCaseByRef call)
            operators.flatMap((/**
             * @param {?} claims
             * @return {?}
             */
            function (claims) {
                return _this.liveapps.getCaseByRef(claims.primaryProductionSandbox.id, caseRef)
                    .pipe(operators.map((/**
                 * @param {?} caseinfo
                 * @return {?}
                 */
                function (caseinfo) {
                    if (caseinfo) {
                        return true;
                    }
                    else {
                        // TODO: Externalize redirect URL
                        _this.router.navigate(['/starterApp/home'], {});
                        return false;
                    }
                })), operators.catchError((/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    // if the case is not found (someone tried to manually route to an invalid caseref) then redirect back to home
                    console.error('Unable to load case ' + caseRef + ' are you sure that is a valid case reference?');
                    // TODO: Externalize redirect URL
                    _this.router.navigate(['/starterApp/home'], {});
                    return rxjs.throwError(error);
                })));
            })));
            return decision;
        };
        CaseGuard.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CaseGuard.ctorParameters = function () { return [
            { type: LiveAppsService },
            { type: router.Router }
        ]; };
        return CaseGuard;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Renders case data in a form
     *
     * ![alt-text](../live-apps-case-data-display.png "Image")
     *
     * \@example <tcla-live-apps-case-data-display></tcla-live-apps-case-data-display>
     */
    var LiveAppsCaseDataDisplayComponent = /** @class */ (function () {
        function LiveAppsCaseDataDisplayComponent(caseProcessService) {
            this.caseProcessService = caseProcessService;
            this.DEFAULT_CASE_DATA_LAYOUT = [
                '*',
                { type: 'submit', title: 'Save', condition: '1===2' },
                { type: 'actions', title: 'hello', condition: '1===2' }
            ];
            /**
             * Allow override of forms framework
             * Options: bootstrap-4 or material-design
             */
            this.formsFramework = this.formsFramework ? this.formsFramework : 'material-design';
            /**
             * Layout object that can be passed to override default layout of the form renderer
             */
            this.layout = this.layout ? this.layout : this.DEFAULT_CASE_DATA_LAYOUT;
            /**
             * Emit event to cause refresh of page
             * *
             */
            this.refreshEvent = new core.EventEmitter();
        }
        /**
         * @param {?} data
         * @return {?}
         */
        LiveAppsCaseDataDisplayComponent.prototype.updateDataAction = /**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            var _this = this;
            var _a;
            data = (_a = {},
                _a[this.name] = data,
                _a);
            this.caseProcessService.caseDataFormUpdate(this.caseRef, this.appId, this.typeId, this.sandboxId, '$Update', data).subscribe((/**
             * @param {?} next
             * @return {?}
             */
            function (next) {
                _this.refreshEvent.emit();
            }), (/**
             * @param {?} error1
             * @return {?}
             */
            function (error1) {
                console.error('Unable to trigger update of case data');
            }));
        };
        /**
         * @return {?}
         */
        LiveAppsCaseDataDisplayComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            // since this is the 'display' of case data we set to readonly and no validation
            // legacy makes the labels appear above the data
            this.options = {
                defaultOptions: {
                    'readonly': true,
                    'appearance': 'legacy'
                },
                'validateOnRender': false
            };
            console.log(this.schema);
        };
        LiveAppsCaseDataDisplayComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-data-display',
                        template: "<tcfrm-rendered-form *ngIf=\"schema && caseData && options\" [schema]=\"schema\" [layout]=\"layout\" [data]=\"caseData\" [caseRef]=\"caseRef\" [appId]=\"appId\" [options]=\"options\" [customFormDefs]=\"customFormDefs\" [formsFramework]=\"formsFramework\" [formRef]=\"formRef\" (formSubmit)=\"updateDataAction($event)\"></tcfrm-rendered-form>\n",
                        styles: [":host ::ng-deep button{visibility:hidden}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCaseDataDisplayComponent.ctorParameters = function () { return [
            { type: TcCaseProcessesService }
        ]; };
        LiveAppsCaseDataDisplayComponent.propDecorators = {
            sandboxId: [{ type: core.Input }],
            caseData: [{ type: core.Input }],
            appId: [{ type: core.Input }],
            typeId: [{ type: core.Input }],
            caseRef: [{ type: core.Input }],
            name: [{ type: core.Input }],
            schema: [{ type: core.Input }],
            formsFramework: [{ type: core.Input }],
            layout: [{ type: core.Input }],
            customFormDefs: [{ type: core.Input }],
            formRef: [{ type: core.Input }],
            refreshEvent: [{ type: core.Output }]
        };
        return LiveAppsCaseDataDisplayComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TcRolesService = /** @class */ (function () {
        function TcRolesService() {
            var _this = this;
            this.currentRole = undefined;
            this.hasRoleAccess = (/**
             * @param {?} roleReq
             * @param {?} roles
             * @return {?}
             */
            function (roleReq, roles) {
                /** @type {?} */
                var reqRole = roles.roles.find((/**
                 * @param {?} role
                 * @return {?}
                 */
                function (role) {
                    return (role.id === roleReq);
                }));
                return reqRole ? true : false;
            });
            this.hasButtonAccess = (/**
             * @param {?} buttonId
             * @param {?} access
             * @return {?}
             */
            function (buttonId, access) {
                return access.buttonIds.indexOf(buttonId) > -1;
            });
            this.amIConfigurator = (/**
             * @param {?} roles
             * @return {?}
             */
            function (roles) {
                /** @type {?} */
                var reqRole = roles.roles.find((/**
                 * @param {?} role
                 * @return {?}
                 */
                function (role) {
                    return (role.configuration === true);
                }));
                return reqRole ? true : false;
            });
            this.getCurrentRole = (/**
             * @return {?}
             */
            function () {
                return _this.currentRole;
            });
            this.setCurrentRole = (/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                _this.currentRole = role;
            });
        }
        /**
         * @param {?} roleId
         * @param {?} roles
         * @return {?}
         */
        TcRolesService.prototype.checkRole = /**
         * @param {?} roleId
         * @param {?} roles
         * @return {?}
         */
        function (roleId, roles) {
            return this.hasRoleAccess(roleId, roles);
        };
        /**
         * @param {?} buttonId
         * @param {?} access
         * @return {?}
         */
        TcRolesService.prototype.checkButton = /**
         * @param {?} buttonId
         * @param {?} access
         * @return {?}
         */
        function (buttonId, access) {
            return this.hasButtonAccess(buttonId, access);
        };
        TcRolesService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TcRolesService.ctorParameters = function () { return []; };
        /** @nocollapse */ TcRolesService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function TcRolesService_Factory() { return new TcRolesService(); }, token: TcRolesService, providedIn: "root" });
        return TcRolesService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Wraps legacy angularjs form renderer
     *
     * \@example <tcla-live-apps-legacy-form></tcla-live-apps-legacy-form>
     */
    var LiveAppsLegacyFormComponent = /** @class */ (function (_super) {
        __extends(LiveAppsLegacyFormComponent, _super);
        function LiveAppsLegacyFormComponent(visibilityService, host, legacyIframeService) {
            var _this = _super.call(this) || this;
            _this.visibilityService = visibilityService;
            _this.host = host;
            _this.legacyIframeService = legacyIframeService;
            _this.legacyIframeId = _this.legacyIframeId ? _this.legacyIframeId : 'legacyWorkitemFrame';
            _this.workitemComplete = new core.EventEmitter();
            _this.wiActive = false;
            _this.renderWi = (/**
             * @param {?} wiId
             * @return {?}
             */
            function (wiId) {
                if (_this.wiActive && _this.openWiId) {
                    // opening a new workitem so cancel old one
                    _this.cancelWi(wiId);
                }
                // send message to external form app
                _this.formDiv.contentWindow.postMessage({ 'action': 'openWI', 'wiId': wiId }, window.location.origin);
                // position the form iframe over the workitemDiv placeholder
                _this.wiActive = true;
                _this.openWiId = wiId;
                _this.resizeWi();
            });
            _this.receiveMessage = (/**
             * @param {?} event
             * @return {?}
             */
            function (event) {
                if (event.data.action === 'wiCompleted') {
                    _this.wiActive = false;
                    /** @type {?} */
                    var wiId = _this.openWiId;
                    _this.openWiId = undefined;
                    _this.hideWi();
                    _this.workitemComplete.emit(wiId);
                }
            });
            _this.cancelWi = (/**
             * @param {?} wiId
             * @return {?}
             */
            function (wiId) {
                _this.formDiv.contentWindow.postMessage({ 'action': 'cancelWI', 'wiId': _this.openWiId }, window.location.origin);
                _this.wiActive = false;
                _this.openWiId = undefined;
                _this.hideWi();
            });
            _this.hideWi = (/**
             * @return {?}
             */
            function () {
                // hide the iframe!
                _this.formDiv.style.top = '-1000px';
                _this.formDiv.style.left = '-1000px';
                _this.formDiv.style.zIndex = '1';
            });
            _this.resizeWi = (/**
             * @return {?}
             */
            function () {
                // position the form iframe over the workitemDiv placeholder
                setTimeout((/**
                 * @param {?} handler
                 * @return {?}
                 */
                function (handler) {
                    /** @type {?} */
                    var rect = _this.target.getBoundingClientRect();
                    _this.formDiv.style.top = rect.top.toString() + 'px';
                    _this.formDiv.style.left = rect.left.toString() + 'px';
                    _this.formDiv.style.height = rect.height.toString() + 'px';
                    _this.formDiv.style.width = rect.width.toString() + 'px';
                    _this.formDiv.style.position = 'absolute';
                    _this.formDiv.style.zIndex = '1000';
                }), 1000);
            });
            _this.initialize = (/**
             * @return {?}
             */
            function () {
                // listen for messages from the iframe
                window.addEventListener('message', _this.receiveMessage, false);
                // we only want to render the workitem when the element is visible
                /** @type {?} */
                var inSight$ = _this.visibilityService.elementInSight(_this.host);
                inSight$.subscribe((/**
                 * @param {?} next
                 * @return {?}
                 */
                function (next) {
                    if (!next) {
                        // element not visible so hide the workitem if it is showing
                        if (_this.wiActive && _this.target) {
                            _this.hideWi();
                        }
                    }
                    else {
                        // element is visible
                        if (!_this.wiActive) {
                            // if workitem not already showing - show it
                            // first get a handle on the target div and the legacy iframe
                            _this.target = document.getElementById('workitemDiv');
                            _this.formDiv = document.getElementById(_this.legacyIframeId);
                            if (_this.workitemId) {
                                // trigger display of the workitem
                                _this.renderWi(_this.workitemId);
                            }
                        }
                        else {
                            _this.resizeWi();
                        }
                    }
                }));
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsLegacyFormComponent.prototype.isFormActive = /**
         * @return {?}
         */
        function () {
            return this.wiActive;
        };
        /**
         * @return {?}
         */
        LiveAppsLegacyFormComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            _super.prototype.ngAfterViewInit.call(this);
            this.containerChanges$.subscribe((/**
             * @param {?} widget
             * @return {?}
             */
            function (widget) {
                if (_this.wiActive && _this.target) {
                    _this.resizeWi();
                }
            }));
            // wait for iframe to load before doing anything else
            // this observable will emit true once the iFrame is loaded
            this.legacyIframeService.workitemStatus.subscribe((/**
             * @param {?} loaded
             * @return {?}
             */
            function (loaded) {
                if (loaded) {
                    // iframe is loaded
                    _this.initialize();
                }
            }));
        };
        /**
         * @return {?}
         */
        LiveAppsLegacyFormComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.openWiId) {
                this.cancelWi(this.workitemId);
            }
        };
        LiveAppsLegacyFormComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-legacy-form',
                        template: "<div #componentDiv fxFill id=\"workitemDiv\" style=\"border: none;\"></div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsLegacyFormComponent.ctorParameters = function () { return [
            { type: tcCoreLib.TcVisibilityService },
            { type: core.ElementRef },
            { type: tcCoreLib.LegacyIframeService }
        ]; };
        LiveAppsLegacyFormComponent.propDecorators = {
            legacyIframeId: [{ type: core.Input }],
            workitemId: [{ type: core.Input }],
            workitemComplete: [{ type: core.Output }]
        };
        return LiveAppsLegacyFormComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TcWorkitemsService = /** @class */ (function () {
        function TcWorkitemsService(http) {
            this.http = http;
        }
        // todo: Note this is not a public API - update when Public API available
        // todo: Note this is not a public API - update when Public API available
        /**
         * @param {?} sandboxId
         * @param {?} appIds
         * @param {?} caseRef
         * @param {?} skip
         * @param {?} top
         * @return {?}
         */
        TcWorkitemsService.prototype.getWorkitems = 
        // todo: Note this is not a public API - update when Public API available
        /**
         * @param {?} sandboxId
         * @param {?} appIds
         * @param {?} caseRef
         * @param {?} skip
         * @param {?} top
         * @return {?}
         */
        function (sandboxId, appIds, caseRef, skip, top) {
            // https://eu.liveapps.cloud.tibco.com/work/workListItems?$sandbox=31&$skip=0&$top=100
            // https://eu.liveapps.cloud.tibco.com/work/workListItems?$sandbox=31&$skip=0&$top=100&$filter=caseref%20eq%20275481
            /** @type {?} */
            var url = '/work/workListItems?$sandbox=' + sandboxId
                + '&$skip=' + skip
                + '&$top=' + top;
            /** @type {?} */
            var filter;
            if (!caseRef) {
                // filter using appIds
                /** @type {?} */
                var filterStr_1 = 'applicationId eq \'<appId>\'';
                if (appIds && appIds.length > 0) {
                    appIds.forEach((/**
                     * @param {?} appId
                     * @return {?}
                     */
                    function (appId) {
                        if (!filter) {
                            filter = filterStr_1.replace('<appId>', appId);
                        }
                        else {
                            filter = filter + ' or ' + filterStr_1.replace('<appId>', appId);
                        }
                    }));
                }
            }
            else {
                // filter using caseRef
                filter = 'caseref eq ' + caseRef;
            }
            url = url + '&$filter=' + filter;
            return this.http.get(url)
                .pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.map((/**
             * @param {?} workitems
             * @return {?}
             */
            function (workitems) {
                return workitems;
            })));
        };
        TcWorkitemsService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TcWorkitemsService.ctorParameters = function () { return [
            { type: http.HttpClient }
        ]; };
        /** @nocollapse */ TcWorkitemsService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function TcWorkitemsService_Factory() { return new TcWorkitemsService(core.ɵɵinject(http.HttpClient)); }, token: TcWorkitemsService, providedIn: "root" });
        return TcWorkitemsService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Workitems widget, this Component lists workitems.
     *
     *
     * ![alt-text](../live-apps-workitems.png "")
     *
     * \@example <tcla-live-apps-workitems></tcla-live-apps-workitems>
     */
    var LiveAppsWorkitemsComponent = /** @class */ (function (_super) {
        __extends(LiveAppsWorkitemsComponent, _super);
        function LiveAppsWorkitemsComponent(workitemsService) {
            var _this = _super.call(this) || this;
            _this.workitemsService = workitemsService;
            /**
             * case card format - list, card, miniCard, staticList (no click event)
             */
            _this.displayType = _this.displayType ? _this.displayType : 'wiMiniCard'; // miniCard, card, list
            // miniCard, card, list
            /**
             * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
             */
            _this.showHeader = _this.showHeader ? _this.showHeader : true;
            /**
             * ~event clickCase : Case clicked
             * ~payload CaseRoute : CaseRoute object output when case is clicked so calling component can route accordingly - ie. route to case
             */
            _this.clickCase = new core.EventEmitter();
            _this.clickWorkitemAction = (/**
             * @param {?} caseRoute
             * @return {?}
             */
            function (caseRoute) {
                _this.clickCase.emit(caseRoute);
            });
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                _this.workitems = [];
                _this.workitemsService.getWorkitems(_this.sandboxId, _this.appIds, _this.caseRef, 0, 20)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$)).subscribe((/**
                 * @param {?} next
                 * @return {?}
                 */
                function (next) {
                    _this.workitems = next || [];
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error retrieving workitems: ' + error.error.errorMsg; }));
            });
            _this.handleDeleted = (/**
             * @param {?} caseRef
             * @param {?} workitemId
             * @return {?}
             */
            function (caseRef, workitemId) {
                _this.workitems.splice(_this.workitems.findIndex(((/**
                 * @param {?} wi
                 * @return {?}
                 */
                function (wi) {
                    console.warn('Workitem: ', workitemId + ' for case: ' + caseRef + ' not shown as case deleted');
                    return wi.header.itemContext.caseRef === caseRef;
                }))), 1);
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsWorkitemsComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            _super.prototype.ngAfterViewInit.call(this);
            this.cardWidthPct = tcCoreLib.TcCoreCommonFunctions.calcSummaryCardPct(this.widget);
            this.containerChanges$.subscribe((/**
             * @param {?} widget
             * @return {?}
             */
            function (widget) {
                _this.cardWidthPct = tcCoreLib.TcCoreCommonFunctions.calcSummaryCardPct(widget);
            }));
        };
        /**
         * @return {?}
         */
        LiveAppsWorkitemsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngOnInit.call(this);
            this.refresh();
        };
        LiveAppsWorkitemsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-workitems',
                        template: "<div #componentDiv class=\"tcs-case-recent-box\" fxLayout=\"column\" fxFill>\n  <div *ngIf=\"showHeader\" class=\"tcs-case-recent-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    <div fxLayoutAlign=\"start center\">\n      <mat-icon class=\"tcs-icon tcs-recent-icon\" svgIcon=\"tcs-recent-icon\"></mat-icon>\n      <div class=\"tcs-case-recent-header-text\">Workitems</div>\n    </div>\n  </div>\n  <div *ngIf=\"!showHeader\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n  </div>\n  <div *ngIf=\"workitems.length > 0\"class=\"tcs-case-recent-flow-list\" fxLayout=\"column\" fxLayout=\"row wrap\">\n    <div class=\"tcs-case-recent-item-box\" *ngFor=\"let workitem of workitems\" [fxFlex]=\"cardWidthPct\">\n      <tcla-live-apps-case-summary [uiAppId]=\"uiAppId\" [typeBar]=\"true\" [borderCard]=\"false\" [displayType]=\"displayType\" [sandboxId]=\"sandboxId\" [caseRef]=\"workitem.header.itemContext.caseRef\" [description]=\"workitem.header.description\" [workitemId]=\"workitem.id\" (clickCase)=\"clickWorkitemAction($event)\" (deleted)=\"handleDeleted($event, workitem.id)\"></tcla-live-apps-case-summary>\n      <div class=\"tcs-case-recent-line\"></div>\n    </div>\n  </div>\n  <div *ngIf=\"!(workitems.length > 0)\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxLayoutGap=\"10px\" style=\"margin: 20px;\">\n    <mat-icon [svgIcon]=\"'ic-no-cases-icon'\" style=\"height: 48px; width: 48px;\"></mat-icon>\n    <div style=\"height: 100%\" fxLayoutAlign=\"start center\">\n      <span class=\"tcs-no-item-text\">No workitems found</span>\n    </div>\n  </div>\n</div>\n",
                        styles: [".tcs-case-recent-box{border-radius:3px;box-shadow:0 2px 8px 0 #dedede;background-color:#fff}.tcs-case-recent-header{min-height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-case-recent-header-text{font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-case-recent-flow-list{margin:24px;overflow-y:auto}.tcs-case-recent-item-box{padding:2px}.tcs-icon.tcs-icon-active:hover{cursor:pointer}:host ::ng-deep .tcs-icon.tcs-icon-active:hover .svg-content{fill:#0081cb}.tcs-case-recent-line{padding:0;margin:4px 5px 0;border-bottom:1.1px solid #f4f4f4}.tcs-no-item-text{font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#b6b6b6}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsWorkitemsComponent.ctorParameters = function () { return [
            { type: TcWorkitemsService }
        ]; };
        LiveAppsWorkitemsComponent.propDecorators = {
            sandboxId: [{ type: core.Input }],
            uiAppId: [{ type: core.Input }],
            appIds: [{ type: core.Input }],
            caseRef: [{ type: core.Input }],
            displayType: [{ type: core.Input }],
            showHeader: [{ type: core.Input }],
            clickCase: [{ type: core.Output }],
            componentDiv: [{ type: core.ViewChild, args: ['componentDiv', { static: false },] }]
        };
        return LiveAppsWorkitemsComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * High level component to allow interaction with case.
     *
     *  ![alt-text](../live-apps-case-cockpit.png "Image")
     *
     * \@example <tcla-live-apps-case-cockpit></tcla-live-apps-case-cockpit>
     */
    var LiveAppsCaseCockpitComponent = /** @class */ (function () {
        function LiveAppsCaseCockpitComponent(liveapps, buttonsHelper, router, rolesService) {
            var _this = this;
            this.liveapps = liveapps;
            this.buttonsHelper = buttonsHelper;
            this.router = router;
            this.rolesService = rolesService;
            // this default layout displays all data but will hide buttons
            this.DEFAULT_CASE_DATA_LAYOUT = [
                '*',
                { type: 'submit', title: 'Save', condition: '1===2' },
                { type: 'actions', title: 'Hidden', condition: '1===2' }
            ];
            /**
             * Enable legacy workitems
             */
            this.legacyWorkitems = this.legacyWorkitems ? this.legacyWorkitems : false;
            /**
             * Enable legacy actions
             */
            this.legacyActions = this.legacyActions ? this.legacyActions : false;
            /**
             * Layout object that can be passed to override default layout of the form renderer
             */
            this.layout = this.layout ? this.layout : this.DEFAULT_CASE_DATA_LAYOUT;
            /**
             * Allow override of forms framework
             * Options: bootstrap-4 or material-design
             */
            this.formsFramework = this.formsFramework ? this.formsFramework : 'material-design';
            /**
             * Whether to show workitems in context panel (default true)
             */
            this.showWorkitems = this.showWorkitems ? this.showWorkitems : true;
            /**
             * Whether to show notes in context panel (default true)
             */
            this.showNotes = this.showNotes ? this.showNotes : true;
            /**
             * Whether to show documents in context panel (default true)
             */
            this.showDocuments = this.showDocuments ? this.showDocuments : true;
            /**
             * Whether to show states in context panel (default true)
             */
            this.showStates = this.showStates ? this.showStates : true;
            /**
             * Whether to show audit in context panel (default true)
             */
            this.showAudit = this.showAudit ? this.showAudit : true;
            /**
             * ~event routeAction : Component requests route to another page
             * ~payload RouteAction : RouteAction object to tell caller to navigate somewhere
             */
            this.routeAction = new core.EventEmitter();
            this.valid = false;
            this.toolbarButtons = [];
            this.incConfigButton = true;
            this.incFavButton = true;
            this.incRefreshButton = true;
            this.incHomeButton = true;
            this.formTabs = [];
            this.actionVisible = false;
            this.selected = new forms.FormControl(0);
            // use the _destroyed$/takeUntil pattern to avoid memory leaks if a response was never received
            this._destroyed$ = new rxjs.Subject();
            this.createToolbarButtons = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var buttons = [];
                if (_this.incConfigButton) {
                    /** @type {?} */
                    var configButton = _this.buttonsHelper.createButton('config', 'tcs-capabilities', true, 'Config', (_this.access ? _this.rolesService.checkButton('configure', _this.access) : true), true);
                    buttons.push(configButton);
                }
                if (_this.incFavButton) {
                    /** @type {?} */
                    var favButton = _this.buttonsHelper.createButton('favorite', 'tcs-favorites-icon', _this.isFavorite, 'Toggle Favorite', (_this.access ? _this.rolesService.checkButton('favorite', _this.access) : true), true);
                    buttons.push(favButton);
                }
                if (_this.incRefreshButton) {
                    /** @type {?} */
                    var refreshButton = _this.buttonsHelper.createButton('refresh', 'tcs-refresh-icon', true, 'Refresh', (_this.access ? _this.rolesService.checkButton('refresh', _this.access) : true), true);
                    buttons.push(refreshButton);
                }
                if (_this.incHomeButton) {
                    /** @type {?} */
                    var homeButton = _this.buttonsHelper.createButton('close', 'tcs-close-icon', true, 'Close', true, true);
                    buttons.push(homeButton);
                }
                return buttons;
            });
            this.handleToolbarButtonEvent = (/**
             * @param {?} buttonId
             * @return {?}
             */
            function (buttonId) {
                if (buttonId === 'favorite') {
                    _this.toggleFavorite();
                }
                if (buttonId === 'refresh') {
                    _this.refresh();
                }
                if (buttonId === 'close') {
                    _this.routeAction.emit(new tcCoreLib.RouteAction('backClicked', null));
                }
                if (buttonId === 'config') {
                    _this.routeAction.emit(new tcCoreLib.RouteAction('configClicked', null));
                }
            });
            this.handleActionSelection = (/**
             * @param {?} actionSelection
             * @return {?}
             */
            function (actionSelection) {
                // this.caseActionsComponent.toggleEnable();
                // this.actionSelection = actionSelection;
                _this.addActionFormTab(actionSelection);
            });
            this.handleActionCompleted = (/**
             * @param {?} formTab
             * @return {?}
             */
            function (formTab) {
                _this.caseActionsComponent.toggleEnable();
                _this.formTabs.splice(_this.formTabs.findIndex((/**
                 * @param {?} tab
                 * @return {?}
                 */
                function (tab) {
                    return tab.type === 'actionTab' && tab.action === formTab.action;
                })), 1);
                _this.selected.setValue(0);
                // to allow case to update async before we refresh
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.refresh();
                }), 1000);
            });
            this.handleClickWorkitem = (/**
             * @param {?} caseroute
             * @return {?}
             */
            function (caseroute) {
                console.log(caseroute.workitemId);
                // remove any existing WI
                /** @type {?} */
                var exWiTabIdx = _this.formTabs.findIndex((/**
                 * @param {?} tab
                 * @return {?}
                 */
                function (tab) {
                    return tab.type === 'wiTab' && tab.workitemId === tab.workitemId;
                }));
                if (exWiTabIdx && exWiTabIdx !== -1) {
                    _this.formTabs.splice(exWiTabIdx, 1);
                }
                _this.addWiFormTab(caseroute.workitemId);
            });
            this.refresh = (/**
             * @return {?}
             */
            function () {
                if (_this.caseSummaryComponent) {
                    _this.caseSummaryComponent.refresh();
                }
                if (_this.caseDataComponent) {
                    _this.caseDataComponent.refresh();
                }
                if (_this.caseStatesComponent) {
                    _this.caseStatesComponent.refresh();
                }
                if (_this.caseActionsComponent) {
                    _this.caseActionsComponent.refresh();
                }
                if (_this.caseAuditComponent) {
                    _this.caseAuditComponent.refresh();
                }
                if (_this.caseStateAuditComponent) {
                    _this.caseStateAuditComponent.refresh();
                }
                if (_this.caseStatesComponent) {
                    _this.caseStatesComponent.refresh();
                }
                if (_this.caseDocumentsComponent) {
                    _this.caseDocumentsComponent.refresh();
                }
                if (_this.caseNotesComponent) {
                    _this.caseNotesComponent.refresh();
                }
                if (_this.caseWorkitemsComponent) {
                    _this.caseWorkitemsComponent.refresh();
                }
            });
            this.toggleFavorite = (/**
             * @return {?}
             */
            function () {
                _this.liveapps.setFavoriteCase(_this.caseRef, _this.uiAppId, _this.sandboxId);
                _this.isFavorite = !_this.isFavorite;
                /** @type {?} */
                var updatedFavButton = _this.buttonsHelper.createButton('favorite', 'tcs-favorites-icon', _this.isFavorite, 'Toggle Favorite', true, true);
                _this.toolbarButtons = _this.buttonsHelper.updateButtons([updatedFavButton], _this.toolbarButtons);
            });
            this.handleWorkitemComplete = (/**
             * @param {?} wiId
             * @return {?}
             */
            function (wiId) {
                _this.formTabs.splice(_this.formTabs.findIndex((/**
                 * @param {?} tab
                 * @return {?}
                 */
                function (tab) {
                    return tab.type === 'wiTab' && tab.workitemId === wiId;
                })), 1);
                _this.selected.setValue(0);
                setTimeout((/**
                 * @return {?}
                 */
                function () {
                    _this.refresh();
                }), 1000);
            });
            this.handleTabCancel = (/**
             * @param {?} formTab
             * @return {?}
             */
            function (formTab) {
                if (formTab.type === 'wiTab') {
                    _this.workitemComponent.cancelWi(formTab.workitemId);
                    _this.formTabs.splice(_this.formTabs.findIndex((/**
                     * @param {?} tab
                     * @return {?}
                     */
                    function (tab) {
                        return tab.type === 'wiTab' && tab.workitemId === formTab.workitemId;
                    })), 1);
                    // if we are closing the selected tab then switch to the first tab
                    /** @type {?} */
                    var currentTabIdx = _this.dataTabGroups._tabs.toArray().findIndex((/**
                     * @param {?} tab
                     * @return {?}
                     */
                    function (tab) {
                        return tab.textLabel === 'wiTab';
                    }));
                    if (currentTabIdx === _this.dataTabGroups.selectedIndex) {
                        _this.selected.setValue(0);
                    }
                }
                else if (formTab.type === 'actionTab') {
                    _this.formTabs.splice(_this.formTabs.findIndex((/**
                     * @param {?} tab
                     * @return {?}
                     */
                    function (tab) {
                        return tab.type === 'actionTab' && tab.action === formTab.action;
                    })), 1);
                    // if we are closing the selected tab then switch to the first tab
                    /** @type {?} */
                    var currentTabIdx = _this.dataTabGroups._tabs.toArray().findIndex((/**
                     * @param {?} tab
                     * @return {?}
                     */
                    function (tab) {
                        return tab.textLabel === 'actionTab';
                    }));
                    if (currentTabIdx === _this.dataTabGroups.selectedIndex) {
                        _this.selected.setValue(0);
                    }
                    _this.caseActionComponent.cancelAction();
                    _this.caseActionsComponent.toggleEnable();
                }
            });
            this.addWiFormTab = (/**
             * @param {?} wiId
             * @return {?}
             */
            function (wiId) {
                _this.formTabs.push(new FormTab().deserialize({
                    type: 'wiTab',
                    title: 'WorkItem: ' + wiId,
                    workitemId: wiId
                }));
                _this.selected.setValue(_this.formTabs.length);
            });
            this.addActionFormTab = (/**
             * @param {?} actionSelection
             * @return {?}
             */
            function (actionSelection) {
                /** @type {?} */
                var newTab = new FormTab().deserialize({
                    type: 'actionTab',
                    title: 'Action: ' + actionSelection.process.name,
                    workitemId: undefined,
                    action: actionSelection
                });
                _this.formTabs.push(newTab);
                _this.selectedTab = newTab;
                setTimeout((/**
                 * @param {?} handler
                 * @return {?}
                 */
                function (handler) {
                    _this.selected.setValue(_this.formTabs.length);
                }));
                _this.caseActionsComponent.toggleEnable();
            });
            this.handleTabChange = (/**
             * @param {?} tabChange
             * @return {?}
             */
            function (tabChange) {
                if (tabChange.tab.textLabel === 'actionTab') {
                    document.getElementById('dataTabGroup').style.height = '0px';
                    setTimeout((/**
                     * @param {?} handler
                     * @return {?}
                     */
                    function (handler) {
                        _this.actionVisible = true;
                    }));
                }
                else {
                    document.getElementById('dataTabGroup').style.height = '100%';
                    _this.actionVisible = false;
                }
            });
        }
        /**
         * @return {?}
         */
        LiveAppsCaseCockpitComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (!isNaN(Number(this.caseRef))) {
                // dont set recent if it is in the exclude app list
                if (!this.exclRecentAppIds || (this.exclRecentAppIds.indexOf(this.appId) === -1)) {
                    this.liveapps.setRecentCase(this.caseRef, this.uiAppId, this.sandboxId);
                }
                this.valid = true;
            }
            if (this.incFavButton) {
                this.liveapps.isFavoriteCase(this.caseRef, this.uiAppId, this.sandboxId)
                    .pipe(operators.take(1), operators.takeUntil(this._destroyed$))
                    .subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    _this.isFavorite = result;
                    _this.toolbarButtons = _this.toolbarButtons.concat(_this.createToolbarButtons());
                    return result;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.errorMessage = 'Error retrieving isFavorite: ' + error.error.errorMsg;
                }));
            }
            else {
                this.toolbarButtons = this.toolbarButtons.concat(this.createToolbarButtons());
            }
        };
        /**
         * @return {?}
         */
        LiveAppsCaseCockpitComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this._destroyed$.next();
        };
        /**
         * @return {?}
         */
        LiveAppsCaseCockpitComponent.prototype.ngAfterViewInit = /**
         * @return {?}
         */
        function () {
            this.matTabGroup._tabs.reset(__spread(this.inclusiveTabs.toArray(), this.tabsFromNgContent.toArray()));
            // this.matTabGroup.afterViewInit();
            if (this.workitemId) {
                this.addWiFormTab(this.workitemId);
            }
        };
        LiveAppsCaseCockpitComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-cockpit',
                        template: "<div fxFill fxLayout=\"column\" fxLayoutAlign=\"space-between stretch\" style=\"overflow: hidden\">\n  <tc-tibco-cloud-menu-bar [toolbarButtons]=\"toolbarButtons\" (toolbarButtonEvent)=\"handleToolbarButtonEvent($event)\">\n    <!-- this is content projection. Tibco cloud menu bar contains ng-template and content here is projected inside the ng-content -->\n    <tcla-live-apps-case-summary fxFlex class=\"live-apps-widget\" [uiAppId]=\"uiAppId\" [typeBar]=\"true\" [borderCard]=\"false\" [displayType]=\"'staticlist'\" [sandboxId]=\"sandboxId\" [caseRef]=\"caseRef\"></tcla-live-apps-case-summary>\n    <ng-content select=\"[customToolbarContent]\" fxFlex></ng-content>\n  </tc-tibco-cloud-menu-bar>\n  <div *ngIf=\"valid\" fxLayout=\"column\" fxFlex fxFill style=\"padding: 20px; overflow: hidden;\">\n    <div fxLayout=\"row\" fxLayoutAlign=\"start start\">\n      <tcla-live-apps-case-states fxFlex [sandboxId]=\"sandboxId\" [caseRef]=\"caseRef\" [appId]=\"appId\"></tcla-live-apps-case-states>\n    </div>\n    <div fxLayout=\"row\" fxLayoutAlign=\"end center\" class=\"tcs-actions-bar\">\n      <tcla-live-apps-case-actions [sandboxId]=\"sandboxId\" [typeId]=\"typeId\" [appId]=\"appId\" [caseRef]=\"caseRef\" [maxActions]=\"5\" (actionClicked)=\"handleActionSelection($event)\"></tcla-live-apps-case-actions>\n    </div>\n    <div fxLayout=\"row\" style=\"overflow: hidden; height: 100%\">\n      <div fxFlex fxLayoutGap=\"20px\" fxLayout.gt-md=\"row\" fxLayout.lt-lg=\"column\" ngStyle.lt-lg=\"overflow: auto\">\n        <div fxLayout=\"column\" fxFlex.gt-md=\"1 0 50\" fxFlex.lt-lg=\"none\">\n          <mat-tab-group id=\"dataTabGroup\" #dataTabGroup style=\"overflow: hidden; min-height: 49px; height: 100%;\" (selectedTabChange)=\"handleTabChange($event)\" [selectedIndex]=\"selected.value\">\n            <mat-tab label=\"Case Data\">\n              <ng-template matTabContent>\n                <tcla-live-apps-case-data class=\"live-apps-widget\" fxFill [caseRef]=\"caseRef\" [sandboxId]=\"sandboxId\" [uiAppId]=\"uiAppId\" [appId]=\"appId\" [typeId]=\"typeId\" [layout]=\"layout\" [showHeader]=\"false\" [customFormDefs]=\"customFormDefs\" [formsFramework]=\"formsFramework\" (refreshEvent)=\"refresh()\"></tcla-live-apps-case-data>\n              </ng-template>\n            </mat-tab>\n            <mat-tab *ngFor=\"let tab of formTabs\" [label]=\"tab.type === 'actionTab' ? 'actionTab' : 'wiTab'\">\n                <ng-template mat-tab-label>\n                  <span>{{tab.title}}</span>\n                  <mat-icon fxLayoutAlign=\"end start\" class=\"tcs-cancel-action-button\" [svgIcon]=\"'tcs-close-icon'\" (click)=\"handleTabCancel(tab)\"></mat-icon>\n                </ng-template>\n                <tcla-live-apps-legacy-form *ngIf=\"tab.type === 'wiTab'\" class=\"live-apps-widget\" [workitemId]=\"tab.workitemId\" (workitemComplete)=\"handleWorkitemComplete($event)\" fxFill></tcla-live-apps-legacy-form>\n            </mat-tab>\n          </mat-tab-group>\n          <!-- Using a hidden tab here to workaround the fact that web components seems to disappear on tab change-->\n          <div *ngIf=\"selectedTab\" [hidden]=\"!actionVisible\" style=\"overflow: auto; height: 100%\">\n            <tcla-live-apps-case-action [customFormDefs]=\"customFormDefs\" [legacyActions]=\"legacyActions\" [process]=\"selectedTab.action\" [caseRef]=\"caseRef\" [typeId]=\"typeId\" [applicationId]=\"appId\" [sandboxId]=\"sandboxId\" [formsFramework]=\"formsFramework\" (caseChanged)=\"handleActionCompleted(selectedTab)\"></tcla-live-apps-case-action>\n          </div>\n        </div>\n        <div fxLayout=\"column\" fxFlex.gt-md=\"1 1 50\" fxFlex.lt-lg=\"none\" ngStyle.lt-lg=\"min-height: 500px\" fxLayoutGap=\"20px\" style=\"overflow: hidden;\" *ngIf=\"showAudit || showNotes || showDocuments || showStates || tabsFromNgContent.length > 0\">\n          <mat-tab-group #contextTabGroup style=\"overflow: hidden; height: 100%\">\n            <ng-content></ng-content>\n            <mat-tab #contextTabs label=\"Workitems\" *ngIf=\"legacyWorkitems && showWorkitems\">\n              <ng-template matTabContent>\n                <tcla-live-apps-workitems [caseRef]=\"caseRef\" [uiAppId]=\"uiAppId\" [displayType]=\"'miniCard'\" [sandboxId]=\"sandboxId\" [showHeader]=\"true\" (clickCase)=\"handleClickWorkitem($event)\"></tcla-live-apps-workitems>\n              </ng-template>\n            </mat-tab>\n            <mat-tab #contextTabs label=\"Notes\" *ngIf=\"showNotes\">\n              <ng-template matTabContent>\n                <tcla-live-apps-notes class=\"live-apps-widget\" [relatedItemType]=\"'CASE_APP'\" [relatedItemId]=\"caseRef\" [userId]=\"userId\"></tcla-live-apps-notes>\n              </ng-template>\n            </mat-tab>\n            <mat-tab #contextTabs label=\"Documents\" *ngIf=\"showDocuments\">\n              <ng-template matTabContent>\n                <tcla-live-apps-documents class=\"live-apps-widget\" [sandboxId]=\"sandboxId\" [folderId]=\"caseRef\" [folderType]=\"'caseFolders'\"></tcla-live-apps-documents>\n              </ng-template>\n            </mat-tab>\n            <mat-tab #contextTabs label=\"States\" *ngIf=\"showStates\">\n              <ng-template matTabContent>\n                <tcla-live-apps-case-state-audit [caseRef]=\"caseRef\" [sandboxId]=\"sandboxId\" [appId]=\"appId\"></tcla-live-apps-case-state-audit>\n              </ng-template>\n            </mat-tab>\n            <mat-tab #contextTabs label=\"Audit\" *ngIf=\"showAudit\">\n              <ng-template matTabContent>\n                <tcla-live-apps-case-audit [sandboxId]=\"sandboxId\" [caseRef]=\"caseRef\"></tcla-live-apps-case-audit>\n              </ng-template>\n            </mat-tab>\n          </mat-tab-group>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n",
                        styles: [".live-apps-widget{background-color:#fff;border-radius:3px}.tcs-actions-bar{height:50px;margin-top:5px}:host ::ng-deep .tcs-cancel-action-button svg{width:15px;height:15px}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCaseCockpitComponent.ctorParameters = function () { return [
            { type: LiveAppsService },
            { type: tcCoreLib.TcButtonsHelperService },
            { type: router.Router },
            { type: TcRolesService }
        ]; };
        LiveAppsCaseCockpitComponent.propDecorators = {
            matTabGroup: [{ type: core.ViewChild, args: ['contextTabGroup', { static: false },] }],
            inclusiveTabs: [{ type: core.ViewChildren, args: ['contextTabs',] }],
            tabsFromNgContent: [{ type: core.ContentChildren, args: ['projectedTab',] }],
            uiAppId: [{ type: core.Input }],
            appId: [{ type: core.Input }],
            typeId: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }],
            caseRef: [{ type: core.Input }],
            workitemId: [{ type: core.Input }],
            userId: [{ type: core.Input }],
            exclRecentAppIds: [{ type: core.Input }],
            roles: [{ type: core.Input }],
            access: [{ type: core.Input }],
            customFormDefs: [{ type: core.Input }],
            legacyWorkitems: [{ type: core.Input }],
            legacyActions: [{ type: core.Input }],
            layout: [{ type: core.Input }],
            formsFramework: [{ type: core.Input }],
            showWorkitems: [{ type: core.Input }],
            showNotes: [{ type: core.Input }],
            showDocuments: [{ type: core.Input }],
            showStates: [{ type: core.Input }],
            showAudit: [{ type: core.Input }],
            routeAction: [{ type: core.Output }],
            caseSummaryComponent: [{ type: core.ViewChild, args: [LiveAppsCaseSummaryComponent, { static: false },] }],
            caseDataComponent: [{ type: core.ViewChild, args: [LiveAppsCaseDataComponent, { static: false },] }],
            caseActionsComponent: [{ type: core.ViewChild, args: [LiveAppsCaseActionsComponent, { static: false },] }],
            caseActionComponent: [{ type: core.ViewChild, args: [LiveAppsCaseActionComponent, { static: false },] }],
            caseAuditComponent: [{ type: core.ViewChild, args: [LiveAppsCaseAuditComponent, { static: false },] }],
            caseDocumentsComponent: [{ type: core.ViewChild, args: [LiveAppsDocumentsComponent, { static: false },] }],
            caseNotesComponent: [{ type: core.ViewChild, args: [LiveAppsNotesComponent, { static: false },] }],
            caseStatesComponent: [{ type: core.ViewChild, args: [LiveAppsCaseStatesComponent, { static: false },] }],
            caseStateAuditComponent: [{ type: core.ViewChild, args: [LiveAppsCaseStateAuditComponent, { static: false },] }],
            workitemComponent: [{ type: core.ViewChild, args: [LiveAppsLegacyFormComponent, { static: false },] }],
            caseWorkitemsComponent: [{ type: core.ViewChild, args: [LiveAppsWorkitemsComponent, { static: false },] }],
            dataTabGroups: [{ type: core.ViewChild, args: ['dataTabGroup', { static: false },] }],
            dataTabGroupEl: [{ type: core.ViewChild, args: ['dataTabGroup', { static: false },] }]
        };
        return LiveAppsCaseCockpitComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Render a dynamic milestone SVG
     *
     * ![alt-text](../live-apps-milestone.png "Documents Component Image")
     *
     * \@example <tcla-live-apps-milestone></tcla-live-apps-milestone>
     */
    var LiveAppsMilestoneComponent = /** @class */ (function () {
        function LiveAppsMilestoneComponent(caseStatesService) {
            this.caseStatesService = caseStatesService;
        }
        /**
         * @return {?}
         */
        LiveAppsMilestoneComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            // work out which section the MS trailer is (first/middle/end)
            /** @type {?} */
            var section = this.isFirst ? 'first' : (this.isLast ? 'end' : 'middle');
            // construct the icon filename
            /** @type {?} */
            var svgFileName = section + '-section-' + this.status + '.svg';
            // work out correct class
            /** @type {?} */
            var bgClass;
            if (this.status === 'completed' && this.isTerminal) {
                bgClass = 'tc-ms-' + 'completed-terminal' + '-bg';
            }
            else {
                bgClass = 'tc-ms-' + this.status + '-bg';
            }
            this.milestoneSvg = 'tcs-milestone-' + this.status + (this.isTerminal ? '-terminal' : '');
            this.sectionSVG = this.caseStatesService.getMilestoneSectionSvg(this.label, 'tc-ms-label', bgClass, svgFileName);
        };
        LiveAppsMilestoneComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-milestone',
                        template: "<div class=\"tcs-milestone-block\" fxLayout=\"row\" fxLayoutAlign=\"center start\">\n  <mat-icon class=\"tc-ms-circle-icon\" [svgIcon]=\"milestoneSvg\"></mat-icon>\n  <div [innerHtml]=\"sectionSVG\" fxLayoutAlign=\"start center\"></div>\n</div>\n",
                        styles: [".tc-ms-circle-icon{height:36px;width:36px;margin-right:-8px;margin-left:-8px}.tcs-milestone-block{margin-bottom:1px;margin-top:1px}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsMilestoneComponent.ctorParameters = function () { return [
            { type: TcCaseStatesService }
        ]; };
        LiveAppsMilestoneComponent.propDecorators = {
            isFirst: [{ type: core.Input }],
            isLast: [{ type: core.Input }],
            status: [{ type: core.Input }],
            label: [{ type: core.Input }],
            isTerminal: [{ type: core.Input }],
            phase: [{ type: core.Input }],
            previousPhase: [{ type: core.Input }]
        };
        return LiveAppsMilestoneComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Manages liveapps settings for Config page
     *
     * \@example <tcla-live-apps-app-configuration-widget></tcla-live-apps-app-configuration-widget>
     */
    var LiveAppsAppConfigurationWidgetComponent = /** @class */ (function () {
        function LiveAppsAppConfigurationWidgetComponent() {
            var _this = this;
            /**
             * ~event configChanged : Configuration values changed
             * ~payload CaseCardConfig : CaseCardConfig object when configuration is changed (so called can do a save with data)
             */
            this.configChanged = new core.EventEmitter();
            /**
             * ~event appSelected : Case Type selected
             * ~payload CaseType : CaseType object of app selected
             */
            this.appSelected = new core.EventEmitter();
            this.handleConfigAppSelection = (/**
             * @param {?} application
             * @return {?}
             */
            function (application) {
                // handle selection of app to config
                _this.selectedAppConfig = application;
                _this.appSelected.emit(application);
            });
            this.handleConfigChanged = (/**
             * @param {?} caseCardConfig
             * @return {?}
             */
            function (caseCardConfig) {
                _this.configChanged.emit(caseCardConfig);
            });
        }
        /**
         * @return {?}
         */
        LiveAppsAppConfigurationWidgetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        LiveAppsAppConfigurationWidgetComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-app-configuration-widget',
                        template: "<div fxFill style=\"margin: 0px 20px 20px 20px\" fxLayout=\"column\">\n  <div fxLayout=\"row\" fxLayoutAlign=\"start center\">\n    <span>Configure Live App Summary Cards for:</span>\n    <tcla-live-apps-applications style=\"margin-left: 5px; margin-top: -1px\" [sandboxId]=\"sandboxId\" [appIds]=\"appIds\" [selectFirstApp]=\"true\" (selection)=\"handleConfigAppSelection($event)\"></tcla-live-apps-applications>\n  </div>\n  <div fxLayout=\"column\" fxFlex style=\"overflow: auto\">\n    <tcla-live-apps-application-configuration *ngIf=\"selectedAppConfig\" [sandboxId]=\"sandboxId\" [uiAppId]=\"uiAppId\" [appId]=\"selectedAppConfig.applicationId\" [folderId]=\"folderId\" [appTypeLabel]=\"selectedAppConfig.label\" (configChanged)=\"handleConfigChanged($event)\"></tcla-live-apps-application-configuration>\n  </div>\n</div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsAppConfigurationWidgetComponent.ctorParameters = function () { return []; };
        LiveAppsAppConfigurationWidgetComponent.propDecorators = {
            appIds: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }],
            uiAppId: [{ type: core.Input }],
            folderId: [{ type: core.Input }],
            configChanged: [{ type: core.Output }],
            appSelected: [{ type: core.Output }]
        };
        return LiveAppsAppConfigurationWidgetComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Wraps case creators component (high level component)
     *
     * \@example <tcla-live-apps-case-creator-widget></tcla-live-apps-case-creator-widget>
     */
    var LiveAppsCaseCreatorWidgetComponent = /** @class */ (function () {
        function LiveAppsCaseCreatorWidgetComponent() {
            var _this = this;
            /**
             * ~event caseCreated : Case Creator started (process started)
             * ~payload ProcessId : ProcessId object output on case creation (details of process started)
             */
            this.caseCreated = new core.EventEmitter();
            // handle case created
            this.handleCaseCreation = (/**
             * @param {?} processId
             * @return {?}
             */
            function (processId) {
                _this.caseCreated.emit(processId);
            });
        }
        /**
         * @return {?}
         */
        LiveAppsCaseCreatorWidgetComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        LiveAppsCaseCreatorWidgetComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-creator-widget',
                        template: "<div>\n  <div fxLayout=\"row\" fxLayout=\"start stretch\">\n    <span style=\"width: 185px\">Select Case Creator: </span>\n    <tcla-live-apps-creators fxFlex [sandboxId]=\"sandboxId\" [applicationId]=\"application.id\" [typeId]=\"application.id\" (caseCreated)=\"handleCaseCreation($event)\"></tcla-live-apps-creators>\n  </div>\n</div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCaseCreatorWidgetComponent.ctorParameters = function () { return []; };
        LiveAppsCaseCreatorWidgetComponent.propDecorators = {
            application: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }],
            uiAppId: [{ type: core.Input }],
            initialData: [{ type: core.Input }],
            customFormDefs: [{ type: core.Input }],
            caseCreated: [{ type: core.Output }]
        };
        return LiveAppsCaseCreatorWidgetComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CaseCreatorSelectionContext = /** @class */ (function () {
        function CaseCreatorSelectionContext(application, initialData, sandboxId, customFormDefs, legacyCreators, formsFramework) {
            this.application = application;
            this.initialData = initialData;
            this.sandboxId = sandboxId;
            this.customFormDefs = customFormDefs;
            this.legacyCreators = legacyCreators;
            this.formsFramework = formsFramework;
        }
        return CaseCreatorSelectionContext;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Dialog used on home screen to allow case creation (wraps other components)
     *
     * \@example <tcla-live-apps-creator-dialog></tcla-live-apps-creator-dialog>
     */
    var LiveAppsCreatorDialogComponent = /** @class */ (function () {
        function LiveAppsCreatorDialogComponent(dialogRef, data) {
            var _this = this;
            this.dialogRef = dialogRef;
            this.data = data;
            this.handleCaseCreated = (/**
             * @param {?} createdCase
             * @return {?}
             */
            function (createdCase) {
                _this.createdCase = createdCase;
                if (!_this.createdCase.caseIdentifier && !_this.createdCase.caseReference) ;
                else if (_this.createdCase.caseReference === '-1') {
                    // legacy process cancelled
                    _this.dialogRef.close();
                }
            });
            this.openCase = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var caseRoute = new CaseRoute().deserialize({ caseRef: _this.createdCase.caseReference, appId: _this.application.applicationId, typeId: _this.application.id });
                _this.dialogRef.close(caseRoute);
            });
            this.closeDialog = (/**
             * @return {?}
             */
            function () {
                _this.dialogRef.close();
            });
            this.application = data.application;
            this.sandboxId = data.sandboxId;
            this.initialData = data.initialData;
            this.customFormDefs = data.customFormDefs;
            this.legacyCreators = data.legacyCreators;
            this.formsFramework = data.formsFramework;
        }
        LiveAppsCreatorDialogComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-creator-dialog',
                        template: "<div class=\"tcs-dialog-outer-div\">\n  <mat-toolbar class=\"tcs-case-creation-dialog-toolbar\">\n    <div fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxFlex>\n      <span class=\"tcs-case-creation-dialog-toolbar-text\">Create New {{application.applicationName}}</span>\n    </div>\n    <mat-icon fxLayout=\"column\" fxLayoutAlign=\"start end\" class=\"tcs-case-creation-dialog-icons\" [svgIcon]=\"'tcs-close-icon'\" (click)=\"closeDialog()\"></mat-icon>\n  </mat-toolbar>\n  <div mat-dialog-content class=\"tcs-case-creation-dialog\" fxLayout=\"column\">\n    <div *ngIf=\"!createdCase\" class=\"tcs-case-creation-dialog-details\">\n      <tcla-live-apps-creators [sandboxId]=\"sandboxId\" [applicationId]=\"application.applicationId\"\n                               [typeId]=\"application.id\" [dataOverride]=\"initialData\"\n                               [customFormDefs]=\"customFormDefs\"\n                               [formsFramework]=\"formsFramework\"\n                               [legacyCreators]=\"legacyCreators\"\n                               (caseCreated)=\"handleCaseCreated($event)\"></tcla-live-apps-creators>\n    </div>\n    <div *ngIf=\"createdCase\" class=\"tcs-case-created-confirmation-details\" fxLayout=\"row\" fxLayoutAlign=\"center start\">\n      <span class=\"tcs-case-created-confirmation-text\">New {{application.applicationName}}\n        case successfully submitted</span>\n      </div>\n  </div>\n  <!--div class=\"tcs-spacer\"></div-->\n  <mat-dialog-actions *ngIf=\"createdCase\" class=\"tcs-dialog-actions\" style=\"height: 100%\" fxLayout=\"row\" fxLayoutAlign=\"end end\">\n    <button *ngIf=\"createdCase.caseReference\" mat-button mat-flat-button color=\"primary\" (click)=\"openCase()\">Open Case</button>\n    <button mat-button (click)=\"closeDialog()\">Close</button>\n  </mat-dialog-actions>\n</div>\n",
                        styles: [".tcs-dialog-outer-div{height:100%;display:-webkit-box;display:flex;-webkit-box-orient:vertical;-webkit-box-direction:normal;flex-direction:column}.tcs-spacer{-webkit-box-flex:1;flex-grow:1}.tcs-case-creation-dialog-toolbar{padding-left:20px;padding-right:20px;background-color:#fff;border-bottom:1px solid #dcdcdc;min-height:63px}.tcs-case-creation-dialog.mat-dialog-content{height:100%;padding:0;margin:0}.tcs-case-creation-dialog-toolbar-text{font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px}.tcs-case-creation-dialog-details{height:100%;padding:20px}.tcs-case-created-confirmation-text{font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#b6b6b6}.tcs-case-creation-dialog-actions{padding:20px}:host ::ng-deep .tcs-dialog-actions.mat-dialog-actions{margin-bottom:0;padding:20px}.tcs-case-created-confirmation-details{padding:20px}.tcs-case-creation-dialog-icons{height:16px;width:16px}.tcs-case-creation-dialog-icons:hover{cursor:pointer}:host ::ng-deep .tcs-case-creation-dialog-icons:hover .svg-content{fill:#0081cb}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCreatorDialogComponent.ctorParameters = function () { return [
            { type: material.MatDialogRef },
            { type: CaseCreatorSelectionContext, decorators: [{ type: core.Inject, args: [material.MAT_DIALOG_DATA,] }] }
        ]; };
        return LiveAppsCreatorDialogComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CaseTypeReportRecordInfo = /** @class */ (function () {
        function CaseTypeReportRecordInfo() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseTypeReportRecordInfo.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CaseTypeReportRecordInfo;
    }());
    var CaseTypeReportRecord = /** @class */ (function () {
        function CaseTypeReportRecord() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseTypeReportRecord.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CaseTypeReportRecord;
    }());
    var CaseTypesReport = /** @class */ (function () {
        function CaseTypesReport() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseTypesReport.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CaseTypesReport;
    }());
    var CaseTypeStateReportStateInfo = /** @class */ (function () {
        function CaseTypeStateReportStateInfo() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseTypeStateReportStateInfo.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CaseTypeStateReportStateInfo;
    }());
    var CaseTypeStateReportRecord = /** @class */ (function () {
        function CaseTypeStateReportRecord() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseTypeStateReportRecord.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CaseTypeStateReportRecord;
    }());
    var CaseTypeStateReport = /** @class */ (function () {
        function CaseTypeStateReport() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        CaseTypeStateReport.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return CaseTypeStateReport;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TcLiveAppsReportingService = /** @class */ (function () {
        function TcLiveAppsReportingService(http, caseConfigService) {
            this.http = http;
            this.caseConfigService = caseConfigService;
        }
        /**
         * @param {?} report
         * @param {?} uiAppId
         * @return {?}
         */
        TcLiveAppsReportingService.prototype.parseCaseTypesReport = /**
         * @param {?} report
         * @param {?} uiAppId
         * @return {?}
         */
        function (report, uiAppId) {
            var _this = this;
            // add state colors for the report entries
            /** @type {?} */
            var caseStateColorMaps$ = [];
            report.caseTypes.forEach((/**
             * @param {?} caseType
             * @return {?}
             */
            function (caseType) {
                caseStateColorMaps$.push(_this.caseConfigService.getStateColorInfo(caseType.applicationId, uiAppId).pipe(operators.map((/**
                 * @param {?} stateColMap
                 * @return {?}
                 */
                function (stateColMap) {
                    return stateColMap;
                }))));
            }));
            return rxjs.forkJoin(caseStateColorMaps$).pipe(operators.map((/**
             * @param {?} resultArr
             * @return {?}
             */
            function (resultArr) {
                for (var x = 0; x < report.caseTypes.length; x++) {
                    report.caseTypes[x].caseTypeInfo.color = resultArr[x].caseTypeColor ? resultArr[x].caseTypeColor : undefined;
                }
                return report;
            })));
        };
        /**
         * @param {?} report
         * @param {?} applicationId
         * @param {?} uiAppId
         * @return {?}
         */
        TcLiveAppsReportingService.prototype.parseCaseStateReport = /**
         * @param {?} report
         * @param {?} applicationId
         * @param {?} uiAppId
         * @return {?}
         */
        function (report, applicationId, uiAppId) {
            // add state colors for the report entries
            return this.caseConfigService.getStateColorInfo(applicationId, uiAppId).pipe(operators.map((/**
             * @param {?} stateColorInfo
             * @return {?}
             */
            function (stateColorInfo) {
                report.caseStates.forEach((/**
                 * @param {?} caseState
                 * @return {?}
                 */
                function (caseState) {
                    /** @type {?} */
                    var stateRecord;
                    if (stateColorInfo && stateColorInfo.stateColorRecs) {
                        stateRecord = stateColorInfo.stateColorRecs.find((/**
                         * @param {?} stateRec
                         * @return {?}
                         */
                        function (stateRec) {
                            return stateRec.state === caseState.stateInfo.value;
                        }));
                    }
                    caseState.stateInfo.color = (stateRecord && stateRecord.color) ? stateRecord.color : undefined;
                }));
                return report;
            })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} appIds
         * @param {?} uiAppId
         * @return {?}
         */
        TcLiveAppsReportingService.prototype.getCaseTypesReport = /**
         * @param {?} sandboxId
         * @param {?} appIds
         * @param {?} uiAppId
         * @return {?}
         */
        function (sandboxId, appIds, uiAppId) {
            var _this = this;
            /** @type {?} */
            var url = '/case/reports/v1/caseTypesReport?$sandbox=' + sandboxId;
            return this.http.get(url).pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.flatMap((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                /** @type {?} */
                var originalResponse = new CaseTypesReport().deserialize(response);
                /**
                 * @param {?} element
                 * @param {?} index
                 * @param {?} array
                 * @return {?}
                 */
                function includeCaseType(element, index, array) {
                    return (appIds.indexOf(element.applicationId) !== -1);
                }
                /** @type {?} */
                var filteredResponse = new CaseTypesReport();
                if (appIds.length > 0) {
                    filteredResponse.caseTypes = originalResponse.caseTypes.filter(includeCaseType);
                }
                else {
                    filteredResponse.caseTypes = originalResponse.caseTypes;
                }
                return _this.parseCaseTypesReport(filteredResponse, uiAppId);
            })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} incTerminal
         * @param {?} uiAppId
         * @return {?}
         */
        TcLiveAppsReportingService.prototype.getCaseTypeStateReport = /**
         * @param {?} sandboxId
         * @param {?} appId
         * @param {?} typeId
         * @param {?} incTerminal
         * @param {?} uiAppId
         * @return {?}
         */
        function (sandboxId, appId, typeId, incTerminal, uiAppId) {
            var _this = this;
            /** @type {?} */
            var url = '/case/reports/v1/caseStatesReport?$sandbox=' + sandboxId
                + '&$filter=applicationId eq ' + appId
                + ' and typeId eq ' + typeId
                + ' and includeTerminalStates eq ' + String(incTerminal).toUpperCase();
            return this.http.get(url).pipe(operators.tap((/**
             * @param {?} val
             * @return {?}
             */
            function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), operators.flatMap((/**
             * @param {?} response
             * @return {?}
             */
            function (response) {
                /** @type {?} */
                var caseTypeStateReport = new CaseTypeStateReport().deserialize(response);
                return _this.parseCaseStateReport(caseTypeStateReport, appId, uiAppId);
            })));
        };
        TcLiveAppsReportingService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TcLiveAppsReportingService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: TcCaseCardConfigService }
        ]; };
        /** @nocollapse */ TcLiveAppsReportingService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function TcLiveAppsReportingService_Factory() { return new TcLiveAppsReportingService(core.ɵɵinject(http.HttpClient), core.ɵɵinject(TcCaseCardConfigService)); }, token: TcLiveAppsReportingService, providedIn: "root" });
        return TcLiveAppsReportingService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Home page active cases widget sub component
     *
     * \@example <tcla-live-apps-active-cases-report></tcla-live-apps-active-cases-report>
     */
    var LiveAppsActiveCasesReportComponent = /** @class */ (function (_super) {
        __extends(LiveAppsActiveCasesReportComponent, _super);
        function LiveAppsActiveCasesReportComponent(reportingService) {
            var _this = _super.call(this) || this;
            _this.reportingService = reportingService;
            /**
             * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
             */
            _this.maxLegendItems = _this.maxLegendItems ? _this.maxLegendItems : 8;
            /**
             * Whether to show percentages or raw case numbers on the doughnut chart
             */
            _this.showPercentages = _this.showPercentages ? _this.showPercentages : false;
            /**
             * ~event selectedCaseType : Case Type selected in vizualization
             * ~payload CaseTypeReportRecord : CaseTypeReportRecord object selected from component
             */
            _this.selectedCaseType = new core.EventEmitter();
            _this.renderChart = false;
            _this.doughnutChartData = [];
            _this.doughnutChartType = 'doughnut';
            _this.chartColors = [];
            _this.defaultColors = DEFAULT_COLORS.slice().reverse();
            _this.getCaseCount = (/**
             * @return {?}
             */
            function () {
                return _this.totalActiveCaseCount;
            });
            _this.doughnutChartOptions = {
                responsive: true,
                maintainAspectRatio: false,
                legend: {
                    display: false,
                    position: 'left'
                },
                layout: {
                    padding: {
                        left: 0,
                        right: 0,
                        top: 10,
                        bottom: 10
                    }
                },
                plugins: {
                    doughnutlabel: {
                        labels: [
                            {
                                text: _this.getCaseCount,
                                font: {
                                    size: '20',
                                    family: 'Source Sans Pro',
                                    weight: 'bold'
                                },
                                color: '#b6b6b6'
                            },
                            {
                                text: 'cases',
                                font: {
                                    size: '16',
                                    family: 'Source Sans Pro',
                                },
                                color: '#b6b6b6'
                            }
                        ]
                    },
                    datalabels: {
                        anchor: 'end',
                        backgroundColor: (/**
                         * @param {?} context
                         * @return {?}
                         */
                        function (context) {
                            return context.dataset.backgroundColor;
                        }),
                        borderColor: 'white',
                        borderRadius: 25,
                        borderWidth: 2,
                        color: 'white',
                        display: (/**
                         * @param {?} context
                         * @return {?}
                         */
                        function (context) {
                            /** @type {?} */
                            var dataset = context.dataset;
                            /** @type {?} */
                            var value = dataset.data[context.dataIndex];
                            return value > 0;
                        }),
                        font: {
                            weight: 'bold'
                        },
                        formatter: (/**
                         * @param {?} value
                         * @param {?} ctx
                         * @return {?}
                         */
                        function (value, ctx) {
                            /** @type {?} */
                            var datasets = ctx.chart.data.datasets;
                            if (datasets.indexOf(ctx.dataset) === datasets.length - 1) {
                                if (_this.showPercentages) {
                                    /** @type {?} */
                                    var sum = datasets[0].data.reduce((/**
                                     * @param {?} a
                                     * @param {?} b
                                     * @return {?}
                                     */
                                    function (a, b) { return a + b; }), 0);
                                    /** @type {?} */
                                    var percentage = Math.round((value / sum) * 100) + '%';
                                    return percentage;
                                }
                                else {
                                    return value;
                                }
                            }
                            else {
                                return 0;
                            }
                        })
                    }
                }
            };
            _this.initReportDataToChart = (/**
             * @param {?} reportData
             * @return {?}
             */
            function (reportData) {
                _this.doughnutChartData = [];
                _this.totalActiveCaseCount = 0;
                /** @type {?} */
                var activeCasesArray = [];
                /** @type {?} */
                var labels = [];
                /** @type {?} */
                var colorArray = [];
                // remove any taken colors from the defaultColors
                // we have to do this before parsing the record to avoid getting same colors
                reportData.caseTypes.forEach((/**
                 * @param {?} ct
                 * @return {?}
                 */
                function (ct) {
                    // remove color from defaults
                    if (ct.caseTypeInfo.color) {
                        _this.defaultColors = _this.defaultColors.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) { return item !== ct.caseTypeInfo.color; }));
                    }
                }));
                // parse record
                reportData.caseTypes.forEach((/**
                 * @param {?} caseType
                 * @return {?}
                 */
                function (caseType) {
                    activeCasesArray.push(caseType.activeStateCaseCount);
                    _this.totalActiveCaseCount = _this.totalActiveCaseCount + caseType.activeStateCaseCount;
                    _this.totalTerminatedCaseCount = _this.totalTerminatedCaseCount + caseType.terminalStateCaseCount;
                    labels.push(caseType.caseTypeInfo.label);
                    // we will re-color anything that has the default color
                    /** @type {?} */
                    var col;
                    if (caseType.caseTypeInfo.color && caseType.caseTypeInfo.color !== DEFAULT_TYPE_COLOR) {
                        // use the set color
                        col = caseType.caseTypeInfo.color;
                    }
                    else {
                        // try and get a color from the palette
                        /** @type {?} */
                        var palCol = _this.defaultColors.pop();
                        if (palCol) {
                            col = palCol;
                        }
                        else {
                            // if no more in palette use a random color!
                            /** @type {?} */
                            var i = Math.random() * 0xffffff;
                            /** @type {?} */
                            var p = parseInt(i.toString(), 0);
                            col = '#' + p.toString(16);
                        }
                    }
                    colorArray.push(col);
                }));
                // showing more than 8 in the legend will take up too much space
                _this.doughnutChartOptions.legend.display = labels.length <= 8;
                _this.doughnutChartData = activeCasesArray;
                _this.doughnutChartLabels = labels;
                _this.chartColors.push({ backgroundColor: colorArray });
                _this.renderChart = true;
            });
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                _this.reportingService.getCaseTypesReport(_this.sandboxId, _this.appIds, _this.uiAppId).pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} report
                 * @return {?}
                 */
                function (report) {
                    _this.caseTypesReport = report;
                    _this.initReportDataToChart(report);
                    return report;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error retrieving case types report: ' + error.error.errorMsg; }));
            });
            return _this;
        }
        // events
        // events
        /**
         * @param {?} __0
         * @return {?}
         */
        LiveAppsActiveCasesReportComponent.prototype.chartClicked = 
        // events
        /**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var event = _a.event, active = _a.active;
            if (active.length > 0) {
                /** @type {?} */
                var chart = active[0]._chart;
                /** @type {?} */
                var activePoints = chart.getElementAtEvent(event);
                if (activePoints.length > 0) {
                    // get the internal index of slice in pie chart
                    /** @type {?} */
                    var clickedElementIndex = activePoints[0]._index;
                    /** @type {?} */
                    var label = chart.data.labels[clickedElementIndex];
                    // get value by index
                    /** @type {?} */
                    var value = chart.data.datasets[0].data[clickedElementIndex];
                    this.caseTypesReport.caseTypes[clickedElementIndex].incTerminal = false;
                    this.selectedCaseType.emit(this.caseTypesReport.caseTypes[clickedElementIndex]);
                }
            }
        };
        /**
         * @param {?} __0
         * @return {?}
         */
        LiveAppsActiveCasesReportComponent.prototype.chartHovered = /**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var event = _a.event, active = _a.active;
            // console.log(event, active);
        };
        /**
         * @return {?}
         */
        LiveAppsActiveCasesReportComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
        function () {
            if (this.componentDiv && this.caseReportChart && this.componentDiv.nativeElement.offsetWidth) {
                if (this.widgetWidth !== this.componentDiv.nativeElement.offsetWidth || this.widgetHeight !== this.componentDiv.nativeElement.offsetHeight) {
                    this.widgetWidth = this.componentDiv.nativeElement.offsetWidth;
                    this.widgetHeight = this.componentDiv.nativeElement.offsetHeight;
                    this.caseReportChart.chart.resize();
                }
            }
        };
        /**
         * @return {?}
         */
        LiveAppsActiveCasesReportComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.refresh();
        };
        LiveAppsActiveCasesReportComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-active-cases-report',
                        template: "<div #componentDiv fxLayout=\"column\" fxFlex style=\"overflow: auto;\">\n  <div *ngIf=\"renderChart\" style=\"height:100%; width:100%; padding: 20px\" class=\"relative\">\n    <canvas #caseReportChart baseChart\n            [data]=\"doughnutChartData\"\n            [labels]=\"doughnutChartLabels\"\n            [chartType]=\"doughnutChartType\"\n            [options]=\"doughnutChartOptions\"\n            [colors]=\"chartColors\"\n            (chartHover)=\"chartHovered($event)\"\n            (chartClick)=\"chartClicked($event)\"\n    >\n    </canvas>\n  </div>\n</div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsActiveCasesReportComponent.ctorParameters = function () { return [
            { type: TcLiveAppsReportingService }
        ]; };
        LiveAppsActiveCasesReportComponent.propDecorators = {
            sandboxId: [{ type: core.Input }],
            appIds: [{ type: core.Input }],
            showHeader: [{ type: core.Input }],
            uiAppId: [{ type: core.Input }],
            maxLegendItems: [{ type: core.Input }],
            showPercentages: [{ type: core.Input }],
            selectedCaseType: [{ type: core.Output }],
            caseReportChart: [{ type: core.ViewChild, args: [ng2Charts.BaseChartDirective, { static: false },] }],
            componentDiv: [{ type: core.ViewChild, args: ['componentDiv', { static: false },] }]
        };
        return LiveAppsActiveCasesReportComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Home page active cases widget sub component
     *
     * \@example <tcla-live-apps-active-cases-for-type-report></tcla-live-apps-active-cases-for-type-report>
     */
    var LiveAppsActiveCasesForTypeReportComponent = /** @class */ (function (_super) {
        __extends(LiveAppsActiveCasesForTypeReportComponent, _super);
        function LiveAppsActiveCasesForTypeReportComponent(reportingService) {
            var _this = _super.call(this) || this;
            _this.reportingService = reportingService;
            /**
             * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
             */
            _this.maxLegendItems = _this.maxLegendItems ? _this.maxLegendItems : 8;
            /**
             * Whether to show percentages or raw case numbers on the doughnut chart
             */
            _this.showPercentages = _this.showPercentages ? _this.showPercentages : false;
            /**
             * ~event selectedCaseTypeState : Case Type state selected in vizualization
             * ~payload CaseTypeStateReportStateInfo : CaseTypeStateReportStateInfo object selected from component (to drive caller to display something different (drill down))
             */
            _this.selectedCaseTypeState = new core.EventEmitter();
            _this.renderChart = false;
            _this.doughnutChartData = [];
            _this.doughnutChartType = 'doughnut';
            _this.chartColors = [];
            _this.defaultColors = DEFAULT_COLORS.slice().reverse();
            _this.getCaseCount = (/**
             * @return {?}
             */
            function () {
                return _this.totalActiveCaseCount;
            });
            _this.doughnutChartOptions = {
                responsive: true,
                maintainAspectRatio: false,
                legend: {
                    position: 'left'
                },
                layout: {
                    padding: {
                        left: 0,
                        right: 0,
                        top: 10,
                        bottom: 10
                    }
                },
                plugins: {
                    doughnutlabel: {
                        labels: [
                            {
                                text: _this.getCaseCount,
                                font: {
                                    size: '20',
                                    family: 'Source Sans Pro',
                                    weight: 'bold'
                                },
                                color: '#FF7800'
                            },
                            {
                                text: 'cases',
                                font: {
                                    size: '16',
                                    family: 'Source Sans Pro',
                                },
                                color: '#FF7800'
                            }
                        ]
                    },
                    datalabels: {
                        anchor: 'end',
                        backgroundColor: (/**
                         * @param {?} context
                         * @return {?}
                         */
                        function (context) {
                            return context.dataset.backgroundColor;
                        }),
                        borderColor: 'white',
                        borderRadius: 25,
                        borderWidth: 2,
                        color: 'white',
                        display: (/**
                         * @param {?} context
                         * @return {?}
                         */
                        function (context) {
                            /** @type {?} */
                            var dataset = context.dataset;
                            /** @type {?} */
                            var value = dataset.data[context.dataIndex];
                            return value > 0;
                        }),
                        font: {
                            weight: 'bold'
                        },
                        formatter: (/**
                         * @param {?} value
                         * @param {?} ctx
                         * @return {?}
                         */
                        function (value, ctx) {
                            /** @type {?} */
                            var datasets = ctx.chart.data.datasets;
                            if (datasets.indexOf(ctx.dataset) === datasets.length - 1) {
                                if (_this.showPercentages) {
                                    /** @type {?} */
                                    var sum = datasets[0].data.reduce((/**
                                     * @param {?} a
                                     * @param {?} b
                                     * @return {?}
                                     */
                                    function (a, b) { return a + b; }), 0);
                                    /** @type {?} */
                                    var percentage = Math.round((value / sum) * 100) + '%';
                                    return percentage;
                                }
                                else {
                                    return value;
                                }
                            }
                            else {
                                return 0;
                            }
                        })
                    }
                }
            };
            _this.initReportDataToChart = (/**
             * @param {?} reportData
             * @param {?} status
             * @return {?}
             */
            function (reportData, status) {
                _this.doughnutChartData = [];
                _this.totalActiveCaseCount = 0;
                /** @type {?} */
                var casesByStateArray = [];
                /** @type {?} */
                var labels = [];
                /** @type {?} */
                var colorArray = [];
                // remove any taken colors from the defaultColors
                // we have to do this before parsing the record to avoid getting same colors
                reportData.caseStates.forEach((/**
                 * @param {?} cs
                 * @return {?}
                 */
                function (cs) {
                    // remove color from defaults
                    if (cs.stateInfo.color) {
                        _this.defaultColors = _this.defaultColors.filter((/**
                         * @param {?} item
                         * @return {?}
                         */
                        function (item) { return item !== cs.stateInfo.color; }));
                    }
                }));
                // parse record
                reportData.caseStates.forEach((/**
                 * @param {?} caseState
                 * @return {?}
                 */
                function (caseState) {
                    _this.totalActiveCaseCount = _this.totalActiveCaseCount + caseState.caseCount;
                    casesByStateArray.push(caseState.caseCount);
                    labels.push(caseState.stateInfo.label);
                    // we will re-color anything that has the default color
                    /** @type {?} */
                    var col;
                    if (caseState.stateInfo.color && caseState.stateInfo.color !== DEFAULT_TYPE_COLOR) {
                        // use the set color
                        col = caseState.stateInfo.color;
                    }
                    else {
                        // try and get a color from the palette
                        /** @type {?} */
                        var palCol = _this.defaultColors.pop();
                        if (palCol) {
                            col = palCol;
                        }
                        else {
                            // if no more in palette use a random color!
                            /** @type {?} */
                            var i = Math.random() * 0xffffff;
                            /** @type {?} */
                            var p = parseInt(i.toString(), 0);
                            col = '#' + p.toString(16);
                        }
                    }
                    colorArray.push(col);
                }));
                _this.doughnutChartData.push(casesByStateArray);
                _this.doughnutChartLabels = labels;
                _this.chartColors.push({ backgroundColor: colorArray });
                // showing more than 8 in the legend will take up too much space
                _this.doughnutChartOptions.legend.display = labels.length <= 8;
                _this.renderChart = true;
            });
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                _this.reportingService.getCaseTypeStateReport(_this.sandboxId, _this.appId, _this.typeId, false, _this.uiAppId).pipe(operators.take(1), operators.takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} report
                 * @return {?}
                 */
                function (report) {
                    _this.caseTypeStateReport = report;
                    _this.initReportDataToChart(report, status);
                    return report;
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error retrieving case types report: ' + error.error.errorMsg; }));
            });
            return _this;
        }
        // events
        // events
        /**
         * @param {?} __0
         * @return {?}
         */
        LiveAppsActiveCasesForTypeReportComponent.prototype.chartClicked = 
        // events
        /**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var event = _a.event, active = _a.active;
            if (active.length > 0) {
                /** @type {?} */
                var chart = active[0]._chart;
                /** @type {?} */
                var activePoints = chart.getElementAtEvent(event);
                if (activePoints.length > 0) {
                    // get the internal index of slice in pie chart
                    /** @type {?} */
                    var clickedElementIndex = activePoints[0]._index;
                    /** @type {?} */
                    var label = chart.data.labels[clickedElementIndex];
                    // get value by index
                    /** @type {?} */
                    var value = chart.data.datasets[0].data[clickedElementIndex];
                    console.log(clickedElementIndex, label, value);
                    this.selectedCaseTypeState.emit(this.caseTypeStateReport.caseStates[clickedElementIndex].stateInfo);
                }
            }
        };
        /**
         * @param {?} __0
         * @return {?}
         */
        LiveAppsActiveCasesForTypeReportComponent.prototype.chartHovered = /**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var event = _a.event, active = _a.active;
            // console.log(event, active);
        };
        /**
         * @return {?}
         */
        LiveAppsActiveCasesForTypeReportComponent.prototype.ngAfterViewChecked = /**
         * @return {?}
         */
        function () {
            if (this.componentDiv && this.caseTypeStateReport && this.componentDiv.nativeElement.offsetWidth) {
                if (this.widgetWidth !== this.componentDiv.nativeElement.offsetWidth || this.widgetHeight !== this.componentDiv.nativeElement.offsetHeight) {
                    this.widgetWidth = this.componentDiv.nativeElement.offsetWidth;
                    this.widgetHeight = this.componentDiv.nativeElement.offsetHeight;
                    this.caseTypeStateReportChart.chart.resize();
                }
            }
        };
        /**
         * @return {?}
         */
        LiveAppsActiveCasesForTypeReportComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        LiveAppsActiveCasesForTypeReportComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.appId && (changes.firstChange || (changes.appId.currentValue !== changes.appId.previousValue))) {
                this.refresh();
            }
        };
        LiveAppsActiveCasesForTypeReportComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-active-cases-for-type-report',
                        template: "<div #componentDiv fxLayout=\"column\" fxFlex style=\"overflow: auto\">\n  <div *ngIf=\"renderChart\" style=\"height:100%; width:100%; padding: 20px\" class=\"relative\">\n    <canvas #caseReportChart baseChart\n            [data]=\"doughnutChartData\"\n            [labels]=\"doughnutChartLabels\"\n            [chartType]=\"doughnutChartType\"\n            [options]=\"doughnutChartOptions\"\n            [colors]=\"chartColors\"\n            (chartHover)=\"chartHovered($event)\"\n            (chartClick)=\"chartClicked($event)\"\n    >\n    </canvas>\n  </div>\n</div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsActiveCasesForTypeReportComponent.ctorParameters = function () { return [
            { type: TcLiveAppsReportingService }
        ]; };
        LiveAppsActiveCasesForTypeReportComponent.propDecorators = {
            sandboxId: [{ type: core.Input }],
            appId: [{ type: core.Input }],
            typeId: [{ type: core.Input }],
            uiAppId: [{ type: core.Input }],
            maxLegendItems: [{ type: core.Input }],
            showPercentages: [{ type: core.Input }],
            selectedCaseTypeState: [{ type: core.Output }],
            caseTypeStateReportChart: [{ type: core.ViewChild, args: [ng2Charts.BaseChartDirective, { static: false },] }],
            componentDiv: [{ type: core.ViewChild, args: ['componentDiv', { static: false },] }]
        };
        return LiveAppsActiveCasesForTypeReportComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Home page active cases widget main component
     *
     * ![alt-text](../live-apps-active-cases-widget.png "Image")
     *
     * \@example <tcla-live-apps-active-cases-widget></tcla-live-apps-active-cases-widget>
     */
    var LiveAppsActiveCasesWidgetComponent = /** @class */ (function (_super) {
        __extends(LiveAppsActiveCasesWidgetComponent, _super);
        function LiveAppsActiveCasesWidgetComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
             */
            _this.maxLegendItems = _this.maxLegendItems ? _this.maxLegendItems : 8;
            /**
             * Whether to show percentages or raw case numbers on the doughnut chart
             */
            _this.showPercentages = _this.showPercentages ? _this.showPercentages : false;
            /**
             * ~event selectedCaseType : Case Type selected in vizualization
             * ~payload CaseTypeReportRecord : CaseTypeReportRecord object selected from component
             */
            _this.selectedCaseType = new core.EventEmitter();
            /**
             * ~event selectedCaseTypeState : Case Type state selected in vizualization
             * ~payload CaseTypeStateReportStateInfo : CaseTypeStateReportStateInfo object selected from component (to drive caller to display something different (drill down))
             */
            _this.selectedCaseTypeState = new core.EventEmitter();
            _this.handleCaseTypeSelected = (/**
             * @param {?} selected
             * @return {?}
             */
            function (selected) {
                _this.selectedCaseTypeReport = selected;
                _this.selectedCaseType.emit(selected);
            });
            _this.handleCaseTypeStateSelected = (/**
             * @param {?} selectedState
             * @return {?}
             */
            function (selectedState) {
                _this.selectedCaseTypeState.emit(selectedState);
            });
            _this.clearSelectedCaseType = (/**
             * @return {?}
             */
            function () {
                _this.selectedCaseTypeReport = undefined;
            });
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                if (_this.activeCasesComp) {
                    _this.activeCasesComp.refresh();
                }
                if (_this.activeCaseTypeComp) {
                    _this.activeCaseTypeComp.refresh();
                }
            });
            return _this;
        }
        LiveAppsActiveCasesWidgetComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-active-cases-widget',
                        template: "<div class=\"tcs-active-case-widget-pane\" fxFill fxLayout=\"column\">\n  <div *ngIf=\"showHeader\" class=\"tcs-active-case-widget-header\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n    <div fxLayoutAlign=\"start center\">\n      <mat-icon class=\"tcs-icon tcs-active-case-widget-icon\" svgIcon=\"ic-active-case-widget-icon\"></mat-icon>\n      <div class=\"tcs-active-case-widget-header-text\">Active Cases</div>\n    </div>\n    <div fxLayoutGap=\"10px\">\n      <div fxFlex fxLayout=\"row\" fxLayoutAlign=\"start center\">\n        <div class=\"tcs-type-filter-text\" *ngIf=\"selectedCaseTypeReport\" fxLayout=\"row\">\n          [\n          <div class=\"tcs-type-filter-text-highlight\">{{selectedCaseTypeReport.caseTypeInfo.label}}</div>\n          ]\n        </div>\n      </div>\n      <mat-icon *ngIf=\"selectedCaseTypeReport\" (click)=\"clearSelectedCaseType()\" class=\"tcs-icon tcs-icon-active tcs-clear-selected-case-type-icon\" svgIcon=\"tcs-clear-icon\" matTooltip=\"Clear Selected Case Type\" matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\"></mat-icon>\n    </div>\n  </div>\n  <div *ngIf=\"!showHeader\" fxLayout=\"row\" fxLayoutAlign=\"end center\">\n  </div>\n  <tcla-live-apps-active-cases-report *ngIf=\"!selectedCaseTypeReport\" fxFlex [maxLegendItems]=\"maxLegendItems\" [sandboxId]=\"sandboxId\" [appIds]=\"appIds\" [showPercentages]=\"showPercentages\" [uiAppId]=\"uiAppId\" (selectedCaseType)=\"handleCaseTypeSelected($event)\"></tcla-live-apps-active-cases-report>\n  <tcla-live-apps-active-cases-for-type-report *ngIf=\"selectedCaseTypeReport\" fxFlex [maxLegendItems]=\"maxLegendItems\" [sandboxId]=\"sandboxId\" [typeId]=\"selectedCaseTypeReport.caseTypeInfo.id\" [appId]=\"selectedCaseTypeReport.applicationId\" [showPercentages]=\"showPercentages\" [uiAppId]=\"uiAppId\" (selectedCaseTypeState)=\"handleCaseTypeStateSelected($event)\"></tcla-live-apps-active-cases-for-type-report>\n</div>\n",
                        styles: [".tcs-active-case-widget-pane{border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff}.tcs-active-case-widget-header{height:40px;min-height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-active-case-widget-header-text{font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-icon.tcs-icon-active:hover{cursor:pointer}:host ::ng-deep .tcs-icon.tcs-icon-active:hover .svg-content{fill:#0081cb}.tcs-type-filter-text{font-family:Source Sans Pro;font-size:12px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-type-filter-text-highlight{color:#ff7800}"]
                    }] }
        ];
        LiveAppsActiveCasesWidgetComponent.propDecorators = {
            sandboxId: [{ type: core.Input }],
            appIds: [{ type: core.Input }],
            showHeader: [{ type: core.Input }],
            uiAppId: [{ type: core.Input }],
            maxLegendItems: [{ type: core.Input }],
            showPercentages: [{ type: core.Input }],
            selectedCaseType: [{ type: core.Output }],
            selectedCaseTypeState: [{ type: core.Output }],
            activeCasesComp: [{ type: core.ViewChild, args: [LiveAppsActiveCasesReportComponent, { static: false },] }],
            activeCaseTypeComp: [{ type: core.ViewChild, args: [LiveAppsActiveCasesForTypeReportComponent, { static: false },] }]
        };
        return LiveAppsActiveCasesWidgetComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * High level component to allow home page view of system
     *
     * ![alt-text](../live-apps-home-cockpit.png "Documents Component Image")
     *
     * \@example <tcla-live-apps-home-cockpit></tcla-live-apps-home-cockpit>
     */
    var LiveAppsHomeCockpitComponent = /** @class */ (function () {
        function LiveAppsHomeCockpitComponent(buttonsHelper, dialog, rolesService) {
            var _this = this;
            this.buttonsHelper = buttonsHelper;
            this.dialog = dialog;
            this.rolesService = rolesService;
            /**
             * Enable legacy workitems
             */
            this.legacyWorkitems = this.legacyWorkitems ? this.legacyWorkitems : false;
            /**
             * Enable legacy creators
             */
            this.legacyCreators = this.legacyCreators ? this.legacyCreators : false;
            /**
             * Allow override of forms framework
             * Options: bootstrap-4 or material-design
             */
            this.formsFramework = this.formsFramework ? this.formsFramework : 'material-design';
            /**
             * ~event routeAction : Component requests route to another page
             * ~payload RouteAction : RouteAction object to tell caller to navigate somewhere
             */
            this.routeAction = new core.EventEmitter();
            this.toolbarButtons = [];
            this.incConfigButton = true;
            this.incRefreshButton = true;
            this.cockpitReady = false;
            this.clickCaseAction = (/**
             * @param {?} caseRoute
             * @return {?}
             */
            function (caseRoute) {
                // case clicked - tell parent (will pass caseRef and appId)
                _this.routeAction.emit(new tcCoreLib.RouteAction('caseClicked', caseRoute));
            });
            this.createToolbarButtons = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var buttons = [];
                // you can use the rolesService to either disable or hide the button as required - it returns true if the user has the roleId specified
                // const configButton = this.buttonsHelper.createButton('config', 'tcs-capabilities', true, 'Config', true, this.rolesService.checkRole('Partner Portal Configurator', this.roles));
                if (_this.incConfigButton) {
                    /** @type {?} */
                    var configButton = _this.buttonsHelper.createButton('config', 'tcs-capabilities', true, 'Config', (_this.access ? _this.rolesService.checkButton('configure', _this.access) : true), true);
                    buttons.push(configButton);
                }
                if (_this.incRefreshButton) {
                    /** @type {?} */
                    var refreshButton = _this.buttonsHelper.createButton('refresh', 'tcs-refresh-icon', true, 'Refresh', (_this.access ? _this.rolesService.checkButton('refresh', _this.access) : true), true);
                    buttons.push(refreshButton);
                }
                return buttons;
            });
            this.handleToolbarButtonEvent = (/**
             * @param {?} buttonId
             * @return {?}
             */
            function (buttonId) {
                if (buttonId === 'config') {
                    _this.routeAction.emit(new tcCoreLib.RouteAction('configClicked', null));
                }
                if (buttonId === 'refresh') {
                    _this.refresh();
                }
            });
            this.handleCreatorAppSelection = (/**
             * @param {?} application
             * @return {?}
             */
            function (application) {
                // this.openCreatorDialog(application, EXAMPLE_INITIAL_DATA, this.sandboxId);
                _this.openCreatorDialog(application, undefined, _this.sandboxId, _this.customFormDefs, _this.legacyCreators, _this.formsFramework);
            });
            this.handleReportCaseTypeSelection = (/**
             * @param {?} caseTypeReportRecord
             * @return {?}
             */
            function (caseTypeReportRecord) {
                _this.selectedCaseTypeReportRecord = caseTypeReportRecord;
            });
            this.handleReportCaseTypeStateSelection = (/**
             * @param {?} state
             * @return {?}
             */
            function (state) {
                if (_this.selectedCaseTypeReportRecord) {
                    _this.searchComponent.searchCasesByState(Number(state.id), state.label, _this.selectedCaseTypeReportRecord.applicationId, _this.selectedCaseTypeReportRecord.caseTypeInfo.id, _this.selectedCaseTypeReportRecord.caseTypeInfo.label + '|' + state.label);
                }
            });
            this.openCreatorDialog = (/**
             * @param {?} application
             * @param {?} initialData
             * @param {?} sandboxId
             * @param {?} customFormDefs
             * @param {?} legacyCreators
             * @param {?} formsFramework
             * @return {?}
             */
            function (application, initialData, sandboxId, customFormDefs, legacyCreators, formsFramework) {
                /** @type {?} */
                var dialogRef = _this.dialog.open(LiveAppsCreatorDialogComponent, {
                    width: '60%',
                    height: '80%',
                    maxWidth: '100vw',
                    maxHeight: '100vh',
                    panelClass: 'tcs-style-dialog',
                    data: new CaseCreatorSelectionContext(application, initialData, sandboxId, customFormDefs, legacyCreators, formsFramework)
                });
                dialogRef.afterClosed().subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result) {
                        _this.routeAction.emit(new tcCoreLib.RouteAction('caseClicked', result));
                    }
                }));
            });
            this.refresh = (/**
             * @return {?}
             */
            function () {
                if (_this.favoritesComponent) {
                    _this.favoritesComponent.refresh();
                }
                if (_this.recentsComponent) {
                    _this.recentsComponent.refresh();
                }
                if (_this.searchComponent) {
                    _this.searchComponent.refresh();
                }
                if (_this.collaborationComponent) {
                    _this.collaborationComponent.refresh();
                }
                if (_this.documentsComponent) {
                    _this.documentsComponent.refresh();
                }
                if (_this.activeCasesComponent) {
                    _this.activeCasesComponent.refresh();
                }
                if (_this.workitemsComponent) {
                    _this.workitemsComponent.refresh();
                }
            });
        }
        /**
         * @return {?}
         */
        LiveAppsHomeCockpitComponent.prototype.initialize = /**
         * @return {?}
         */
        function () {
            this.toolbarButtons = this.toolbarButtons.concat(this.createToolbarButtons());
            this.caseStartButtonActive = this.access ? this.rolesService.checkButton('caseStart', this.access) : true;
            this.cockpitReady = true;
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        LiveAppsHomeCockpitComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            // on first set call initialize
            if (changes.appIds.firstChange && changes.sandboxId.firstChange && changes.uiAppId.firstChange) {
                this.initialize();
            }
        };
        LiveAppsHomeCockpitComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-home-cockpit',
                        template: "<div fxLayout=\"column\" fxFlex *ngIf=\"cockpitReady\">\n  <div>\n    <tc-tibco-cloud-menu-bar [toolbarButtons]=\"toolbarButtons\" [headerText]=\"title\"\n                             (toolbarButtonEvent)=\"handleToolbarButtonEvent($event)\">\n      <div>\n        <ng-content select=\"[customToolbarContent]\" fxFlex></ng-content>\n        <tcla-live-apps-application-create-button *ngIf=\"caseStartButtonActive\"\n                                                  style=\"margin-right: 20px; margin-left: 20px\" [sandboxId]=\"sandboxId\"\n                                                  [appIds]=\"appIds\"\n                                                  (selection)=\"handleCreatorAppSelection($event)\"></tcla-live-apps-application-create-button>\n      </div>\n    </tc-tibco-cloud-menu-bar>\n  </div>\n\n  <div class=\"tcs-home-content\"\n       style=\"padding-left: 20px; padding-right: 20px; margin-top: 10px; padding-bottom: 120px; height: 100%; display: block;\">\n    <div style=\"height: 100%;\">\n      <div class=\"searchCasesWidget\" style=\"min-height: 86px;\">\n        <tcla-live-apps-search-widget fxFlex [appIds]=\"appIds\" [sandboxId]=\"sandboxId\" [uiAppId]=\"uiAppId\"\n                                      (caseSelected)=\"clickCaseAction($event)\"></tcla-live-apps-search-widget>\n      </div>\n      <!--div style=\"background-color: red; height: 600px; width: 100%;\">TEST BOX</div-->\n\n      <!--div fxFlex=\"noshrink\" style=\"margin-bottom: 20px; overflow: auto; min-height: 400px\" fxLayoutGap=\"20px\" fxLayout=\"row\" fxLayout.lt-md=\"column\"-->\n      <div style=\"margin-bottom: 20px; overflow: hidden; height: 100%; min-height: 750px; padding-bottom: 10px;\" fxLayoutGap=\"20px\"\n           fxLayout=\"row\" fxLayout.lt-md=\"column\">\n        <div fxFlex.gt-sm=\"grow\" fxLayout=\"row\" style=\"\" [ngStyle.lt-md]=\"'min-height: 400px;'\">\n          <mat-tab-group fxFlex>\n            <mat-tab label=\"Recent Cases\">\n              <ng-template matTabContent>\n                <div class=\"recentCasesWidget\" fxFill>\n                  <tcla-live-apps-recent-cases class=\"padded-widget\" [showHeader]=\"true\" [sandboxId]=\"sandboxId\"\n                                               [uiAppId]=\"uiAppId\"\n                                               (clickCase)=\"clickCaseAction($event)\"></tcla-live-apps-recent-cases>\n                </div>\n              </ng-template>\n            </mat-tab>\n            <mat-tab label=\"Favorite Cases\">\n              <ng-template matTabContent>\n                <div class=\"favoriteCasesWidget\" fxFill>\n                  <tcla-live-apps-favorite-cases class=\"padded-widget\" [showHeader]=\"true\" [sandboxId]=\"sandboxId\"\n                                                 [uiAppId]=\"uiAppId\"\n                                                 (clickCase)=\"clickCaseAction($event)\"></tcla-live-apps-favorite-cases>\n                </div>\n              </ng-template>\n            </mat-tab>\n            <mat-tab *ngIf=\"legacyWorkitems\" label=\"Workitems\">\n              <ng-template matTabContent>\n                <div class=\"favoriteCasesWidget\" fxFill>\n                  <tcla-live-apps-workitems #componentDiv class=\"padded-widget\" [showHeader]=\"true\"\n                                            [sandboxId]=\"sandboxId\"\n                                            [uiAppId]=\"uiAppId\" [appIds]=\"appIds\"\n                                            (clickCase)=\"clickCaseAction($event)\"></tcla-live-apps-workitems>\n                </div>\n              </ng-template>\n            </mat-tab>\n          </mat-tab-group>\n        </div>\n\n        <div fxFlex.gt-sm=\"40\" fxLayout=\"column\" [ngStyle.lt-md]=\"'min-height: 400px'\">\n          <div style=\"padding-top: 48px; height: 350px;\">\n            <tcla-live-apps-active-cases-widget [sandboxId]=\"sandboxId\" [appIds]=\"appIds\" [showHeader]=\"true\"\n                                                [showPercentages]=\"true\" [uiAppId]=\"uiAppId\"\n                                                (selectedCaseTypeState)=\"handleReportCaseTypeStateSelection($event)\"\n                                                (selectedCaseType)=\"handleReportCaseTypeSelection($event)\"></tcla-live-apps-active-cases-widget>\n          </div>\n          <div fxFlex=\"noshrink\" style=\"height: 350px;\">\n            <mat-tab-group fxFlex>\n              <mat-tab label=\"Collaboration\">\n                <div fxFill class=\"collaborationWidget\">\n                  <tcla-live-apps-notes [userId]=\"userId\" [showHeader]=\"true\" [relatedItemId]=\"uiAppId\"\n                                        [relatedItemType]=\"'CASE_APP'\"></tcla-live-apps-notes>\n                </div>\n              </mat-tab>\n              <mat-tab label=\"Documents\">\n                <div fxFill class=\"documentWidget\">\n                  <tcla-live-apps-documents [showHeader]=\"true\" [sandboxId]=\"sandboxId\" [folderId]=\"uiAppId + '_Docs'\"\n                                            [folderType]=\"'orgFolders'\"\n                                            [folderDescription]=\"'Document Library'\"></tcla-live-apps-documents>\n                </div>\n              </mat-tab>\n            </mat-tab-group>\n          </div>\n        </div>\n      </div>\n\n    </div>\n  </div>\n</div>\n",
                        styles: [".tc-home-welcome-text{font-family:Source Sans Pro;font-size:30px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#212121}.tcs-home-content{overflow:auto}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsHomeCockpitComponent.ctorParameters = function () { return [
            { type: tcCoreLib.TcButtonsHelperService },
            { type: material.MatDialog },
            { type: TcRolesService }
        ]; };
        LiveAppsHomeCockpitComponent.propDecorators = {
            uiAppId: [{ type: core.Input }],
            appIds: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }],
            userName: [{ type: core.Input }],
            userId: [{ type: core.Input }],
            email: [{ type: core.Input }],
            title: [{ type: core.Input }],
            roles: [{ type: core.Input }],
            access: [{ type: core.Input }],
            customFormDefs: [{ type: core.Input }],
            legacyWorkitems: [{ type: core.Input }],
            legacyCreators: [{ type: core.Input }],
            formsFramework: [{ type: core.Input }],
            routeAction: [{ type: core.Output }],
            favoritesComponent: [{ type: core.ViewChild, args: [LiveAppsFavoriteCasesComponent, { static: false },] }],
            recentsComponent: [{ type: core.ViewChild, args: [LiveAppsRecentCasesComponent, { static: false },] }],
            searchComponent: [{ type: core.ViewChild, args: [LiveAppsSearchWidgetComponent, { static: false },] }],
            collaborationComponent: [{ type: core.ViewChild, args: [LiveAppsNotesComponent, { static: false },] }],
            documentsComponent: [{ type: core.ViewChild, args: [LiveAppsDocumentsComponent, { static: false },] }],
            activeCasesComponent: [{ type: core.ViewChild, args: [LiveAppsActiveCasesWidgetComponent, { static: false },] }],
            workitemsComponent: [{ type: core.ViewChild, args: [LiveAppsWorkitemsComponent, { static: false },] }]
        };
        return LiveAppsHomeCockpitComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LiveAppsConfig = /** @class */ (function () {
        function LiveAppsConfig() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        LiveAppsConfig.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return LiveAppsConfig;
    }());
    var LiveAppsConfigHolder = /** @class */ (function () {
        function LiveAppsConfigHolder() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        LiveAppsConfigHolder.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return LiveAppsConfigHolder;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TcLiveAppsConfigService = /** @class */ (function () {
        function TcLiveAppsConfigService(location, sharedStateService) {
            this.location = location;
            this.sharedStateService = sharedStateService;
        }
        /**
         * @param {?} sandboxId
         * @param {?} uiAppId
         * @param {?} liveappsConfig
         * @return {?}
         */
        TcLiveAppsConfigService.prototype.createLiveAppsConfig = /**
         * @param {?} sandboxId
         * @param {?} uiAppId
         * @param {?} liveappsConfig
         * @return {?}
         */
        function (sandboxId, uiAppId, liveappsConfig) {
            /** @type {?} */
            var ssName = uiAppId + '.liveapps.config.tibcolabs.client.context.PUBLIC';
            /** @type {?} */
            var content = new tcCoreLib.SharedStateContent();
            content.json = tcCoreLib.TcCoreCommonFunctions.escapeString(JSON.stringify(liveappsConfig));
            return this.sharedStateService.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)
                .pipe(operators.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return value; })));
        };
        /**
         * @param {?} uiAppId
         * @param {?} useCache
         * @param {?} flushCache
         * @return {?}
         */
        TcLiveAppsConfigService.prototype.getLiveAppsConfig = /**
         * @param {?} uiAppId
         * @param {?} useCache
         * @param {?} flushCache
         * @return {?}
         */
        function (uiAppId, useCache, flushCache) {
            // if useCache is false this will trigger the service to update the cached version with latest
            /** @type {?} */
            var ssName = uiAppId + '.liveapps.config.tibcolabs.client.context.PUBLIC';
            return this.sharedStateService.getSharedState(ssName, 'PUBLIC', useCache, flushCache)
                .pipe(operators.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value.sharedStateEntries.length > 0) {
                    /** @type {?} */
                    var ssresult = new LiveAppsConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));
                    ssresult.id = value.sharedStateEntries[0].id;
                    return ssresult;
                }
                else {
                    return undefined;
                }
            })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} uiAppId
         * @param {?} liveappsConfig
         * @param {?} id
         * @return {?}
         */
        TcLiveAppsConfigService.prototype.updateLiveAppsConfig = /**
         * @param {?} sandboxId
         * @param {?} uiAppId
         * @param {?} liveappsConfig
         * @param {?} id
         * @return {?}
         */
        function (sandboxId, uiAppId, liveappsConfig, id) {
            var _this = this;
            /** @type {?} */
            var ssName = uiAppId + '.liveapps.config.tibcolabs.client.context.PUBLIC';
            /** @type {?} */
            var content = new tcCoreLib.SharedStateContent();
            content.json = tcCoreLib.TcCoreCommonFunctions.escapeString(JSON.stringify(liveappsConfig));
            /** @type {?} */
            var entry = new tcCoreLib.SharedStateEntry();
            entry.content = content;
            entry.sandboxId = sandboxId;
            entry.name = ssName;
            entry.type = 'PUBLIC';
            entry.id = id;
            /** @type {?} */
            var ssList = new tcCoreLib.SharedStateList();
            ssList.sharedStateEntries = [];
            ssList.sharedStateEntries.push(entry);
            return this.sharedStateService.updateSharedState(ssList.sharedStateEntries)
                .pipe(operators.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                // flush the cache
                _this.getLiveAppsConfig(uiAppId, true, true).subscribe();
                return new LiveAppsConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));
            })));
        };
        TcLiveAppsConfigService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TcLiveAppsConfigService.ctorParameters = function () { return [
            { type: common.Location },
            { type: tcCoreLib.TcSharedStateService }
        ]; };
        /** @nocollapse */ TcLiveAppsConfigService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function TcLiveAppsConfigService_Factory() { return new TcLiveAppsConfigService(core.ɵɵinject(common.Location), core.ɵɵinject(tcCoreLib.TcSharedStateService)); }, token: TcLiveAppsConfigService, providedIn: "root" });
        return TcLiveAppsConfigService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Special rendering of LiveAppsApplicationsComponent
     *
     * \@example <tcla-live-apps-application-list></tcla-live-apps-application-list>
     */
    var LiveAppsApplicationListComponent = /** @class */ (function (_super) {
        __extends(LiveAppsApplicationListComponent, _super);
        function LiveAppsApplicationListComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            /**
             * The app Ids selected (output)
             */
            _this.selectedAppIds = [];
            /**
             * ~event appsSelected : Applications selected in component (CaseType objects)
             * ~payload CaseType[] : Array of CaseType objects of what was selected
             */
            _this.appsSelected = new core.EventEmitter();
            /**
             * ~event appIdsSelected : Applications selected in component (appIds)
             * ~payload string[] : selected App Ids from the application list (used on config)
             */
            _this.appIdsSelected = new core.EventEmitter();
            _this.handleAppSelection = (/**
             * @param {?} selectionEvent
             * @return {?}
             */
            function (selectionEvent) {
                _this.appsSelected.emit(selectionEvent);
                /** @type {?} */
                var selIds = [];
                selectionEvent.forEach((/**
                 * @param {?} selected
                 * @return {?}
                 */
                function (selected) {
                    selIds.push(selected.applicationId);
                }));
                _this.appIdsSelected.emit(selIds);
            });
            _this.handleSelectAll = (/**
             * @return {?}
             */
            function () {
                _this.mySelectedOptions = _this.applications.casetypes;
                _this.appIdsSelected.emit(_this.getAppIds(_this.mySelectedOptions));
                _this.appsSelected.emit(_this.applications.casetypes);
            });
            _this.handleDeselectAll = (/**
             * @return {?}
             */
            function () {
                _this.mySelectedOptions = [];
                _this.appIdsSelected.emit([]);
                _this.appsSelected.emit([]);
            });
            _this.getAppIds = (/**
             * @param {?} casetypes
             * @return {?}
             */
            function (casetypes) {
                /** @type {?} */
                var selIds = [];
                casetypes.forEach((/**
                 * @param {?} selected
                 * @return {?}
                 */
                function (selected) {
                    selIds.push(selected.applicationId);
                }));
                return selIds;
            });
            _this.refresh = (/**
             * @param {?} bypassCache
             * @return {?}
             */
            function (bypassCache) {
                _this.liveapps.getApplications(_this.sandboxId, _this.appIds, 100, bypassCache)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$), operators.map((/**
                 * @param {?} applicationList
                 * @return {?}
                 */
                function (applicationList) {
                    _this.applications = applicationList;
                    // handle single app selection input
                    if (_this.selectedApp && _this.selectedApp.applicationId) {
                        _this.selectedApp = applicationList.casetypes.find((/**
                         * @param {?} casetype
                         * @return {?}
                         */
                        function (casetype) {
                            return casetype.applicationId === _this.selectedApp.applicationId;
                        }));
                        // this.selection.emit(this.selectedApp);
                    }
                    else if (_this.selectedAppIds && _this.selectedAppIds.length > 0) {
                        // pre select any casetypes that were passed in the selectedAppIds input attribute
                        _this.mySelectedOptions = _this.applications.casetypes.filter((/**
                         * @param {?} casetype
                         * @return {?}
                         */
                        function (casetype) {
                            return (_this.selectedAppIds.findIndex((/**
                             * @param {?} ct
                             * @return {?}
                             */
                            function (ct) {
                                return ct === casetype.applicationId;
                            })) !== -1);
                        }));
                    }
                })))
                    .subscribe(null, (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error retrieving applications: ' + error.error.errorMsg; }));
            });
            return _this;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        LiveAppsApplicationListComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            // only interested in initial selection - catching every change would create an infinite loop!
            if (changes.selectedAppIds && (changes.selectedAppIds.firstChange)) {
                this.refresh(false);
            }
        };
        /**
         * @return {?}
         */
        LiveAppsApplicationListComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            // leave this blank so superclass ngOnInit not called
        };
        LiveAppsApplicationListComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-application-list',
                        template: "<div fxFlex style=\"padding: 10px;\" fxLayout=\"column\">\n  <div fxLayout=\"row\" class=\"tcs-application-list-buttons\">\n    <button mat-button (click)=\"handleSelectAll()\">\n      <span>Select All</span>\n    </button>\n    <button mat-button (click)=\"handleDeselectAll()\">\n      <span>Deselect All</span>\n    </button>\n  </div>\n  <mat-selection-list class=\"tcs-application-list\" #selectedApps [(ngModel)]=\"mySelectedOptions\" (ngModelChange)=\"handleAppSelection($event)\"\n                      fxLayout=\"column\" fxLayout=\"row wrap\">\n    <mat-list-option class=\"tcs-application-option\" checkboxPosition=\"before\"\n                     *ngFor=\"let casetype of applications.casetypes\"\n                     [value]=\"casetype\">\n      <span>{{casetype.label}}</span>\n    </mat-list-option>\n  </mat-selection-list>\n</div>\n",
                        styles: [".tcs-application-option{max-width:320px}.tcs-application-list{overflow:auto}.tcs-application-list-buttons{min-height:40px}"]
                    }] }
        ];
        LiveAppsApplicationListComponent.propDecorators = {
            appSelectionList: [{ type: core.ViewChild, args: [material.MatSelectionList, { static: false },] }],
            selectedAppIds: [{ type: core.Input }],
            appsSelected: [{ type: core.Output }],
            appIdsSelected: [{ type: core.Output }]
        };
        return LiveAppsApplicationListComponent;
    }(LiveAppsApplicationsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Special rendering of LiveAppsApplicationsComponent
     *
     * ![alt-text](../live-apps-application-create-button.png "Image")
     *
     * \@example <tcla-live-apps-application-create-button></tcla-live-apps-application-create-button>
     */
    var LiveAppsApplicationCreateButtonComponent = /** @class */ (function (_super) {
        __extends(LiveAppsApplicationCreateButtonComponent, _super);
        function LiveAppsApplicationCreateButtonComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.handleCreatorAppSelection = (/**
             * @param {?} application
             * @return {?}
             */
            function (application) {
                _this.selection.emit(application);
            });
            _this.handleCreateCaseClick = (/**
             * @return {?}
             */
            function () {
                // console.log('Select Case: ' + this.applications.casetypes.length);
                if (_this.applications.casetypes.length === 1) {
                    // Open Case Directly
                    // console.log('Opening Case Directly...');
                    _this.handleCreatorAppSelection(_this.applications.casetypes[0]);
                }
            });
            return _this;
        }
        LiveAppsApplicationCreateButtonComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-application-create-button',
                        template: "<button mat-button [matMenuTriggerFor]=\"creatorApplicationMenu\" (click)=\"handleCreateCaseClick()\">\n  <mat-icon [svgIcon]=\"'tcs-case-start-icon'\"></mat-icon>\n  <span class=\"tcs-case-create-button-text\"> Create Case</span>\n</button>\n<mat-menu #creatorApplicationMenu=\"matMenu\">\n  <button mat-menu-item *ngFor=\"let application of applications.casetypes\" (click)=\"handleCreatorAppSelection(application)\">{{application.applicationName}}</button>\n</mat-menu>\n",
                        styles: [".tcs-case-create-button-text{font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;text-align:center;color:#0081cb}"]
                    }] }
        ];
        return LiveAppsApplicationCreateButtonComponent;
    }(LiveAppsApplicationsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Allow Selection of live apps applications (part of config)
     *
     * ![alt-text](../live-apps-settings.png "")
     *
     * \@example <tcla-live-apps-settings></tcla-live-apps-settings>
     */
    var LiveAppsSettingsComponent = /** @class */ (function (_super) {
        __extends(LiveAppsSettingsComponent, _super);
        function LiveAppsSettingsComponent(route, liveAppsConfigService, snackBar) {
            var _this = _super.call(this) || this;
            _this.route = route;
            _this.liveAppsConfigService = liveAppsConfigService;
            _this.snackBar = snackBar;
            _this.LIVE_APPS_URL = '/apps/dt-app/index.html#/application-content/';
            _this.handleEditLiveAppClick = (/**
             * @return {?}
             */
            function () {
                // window.open(this.LIVE_APPS_URL + applicationId);
                // currently no public API to get the appId version for design time to populate the URL
                window.open(_this.LIVE_APPS_URL);
            });
            _this.runSaveFunction = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var liveAppsConfig = new LiveAppsConfig().deserialize({
                    applicationIds: _this.selectedAppIds,
                    caseIconsFolderId: _this.liveAppsConfig.caseIconsFolderId,
                    documentAppId: _this.liveAppsConfig.documentAppId,
                    collaborationAppId: _this.liveAppsConfig.documentAppId
                });
                _this.liveAppsConfigService.updateLiveAppsConfig(_this.sandboxId, _this.generalConfig.uiAppId, liveAppsConfig, _this.liveAppsConfig.id).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    _this.snackBar.open('Live Apps App Selection Configuration settings saved', 'OK', {
                        duration: 3000
                    });
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.snackBar.open('Error saving Live Apps App Selection Configuration', 'OK', {
                        duration: 3000
                    });
                }));
            });
            return _this;
        }
        /**
         * @protected
         * @return {?}
         */
        LiveAppsSettingsComponent.prototype.getLiveAppsConfigService = /**
         * @protected
         * @return {?}
         */
        function () {
            return this.liveAppsConfigService;
        };
        /**
         * @param {?} appIds
         * @return {?}
         */
        LiveAppsSettingsComponent.prototype.handleAppIdSelection = /**
         * @param {?} appIds
         * @return {?}
         */
        function (appIds) {
            console.log('Selected: ', appIds);
            this.selectedAppIds = appIds;
        };
        /**
         * @return {?}
         */
        LiveAppsSettingsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.generalConfig = this.route.snapshot.data.laConfigHolder.generalConfig;
            this.liveAppsConfig = this.route.snapshot.data.laConfigHolder.liveAppsConfig;
            this.claims = this.route.snapshot.data.claims;
            this.sandboxId = Number(this.claims.primaryProductionSandbox.id).valueOf();
            this.selectedAppIds = this.liveAppsConfig.applicationIds;
        };
        LiveAppsSettingsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-settings',
                        template: "<div fxLayout=\"column\" class=\"tcs-live-apps-settings-pane\" fxFill>\n  <tc-tibco-cloud-widget-header style=\"height: 40px;\" [icon]=\"'tcs-capabilities'\" [headerText]=\"'Live Apps App Selection Configuration'\">\n</tc-tibco-cloud-widget-header>\n  <div fxFlex style=\"padding: 20px; height: 100%\" fxLayout=\"column\" fxFill>\n    <div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"5px\" style=\"height: 20px\">\n      <p>Choose the TIBCO Cloud Live Apps Applications to be used within this application:</p>\n      <mat-icon class=\"tcs-designer-link\" [svgIcon]=\"'tcs-application-edit'\" (click)=\"handleEditLiveAppClick()\" matTooltip=\"Open Live Apps Designer\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\"></mat-icon>\n    </div>\n    <tcla-live-apps-application-list class=\"tcs-app-selection-list-widget\" fxFlex=\"grow\" [sandboxId]=\"sandboxId\" [selectedAppIds]=\"selectedAppIds\" (appIdsSelected)=\"handleAppIdSelection($event)\"></tcla-live-apps-application-list>\n    <div fxFlex class=\"tcs-filler-panel\"></div>\n    <div fxLayout=\"column\" fxLayoutAlign=\"end end\" style=\"min-height: 50px\">\n      <button mat-raised-button color=\"primary\" (click)=\"runSaveFunction()\">Save</button>\n    </div>\n  </div>\n</div>\n",
                        styles: [".tcs-designer-link{margin-bottom:10px}.tcs-designer-link:hover{fill:#0081cb;cursor:pointer}.tcs-app-selection-list-widget,.tcs-live-apps-settings-pane{overflow:hidden}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsSettingsComponent.ctorParameters = function () { return [
            { type: router.ActivatedRoute },
            { type: TcLiveAppsConfigService },
            { type: material.MatSnackBar }
        ]; };
        return LiveAppsSettingsComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Configuration of summary cards
     *
     * ![alt-text](../live-apps-settings-summary-cards.png "")
     *
     * \@example <tcla-live-apps-settings-summary-cards></tcla-live-apps-settings-summary-cards>
     */
    var LiveAppsSettingsSummaryCardsComponent = /** @class */ (function (_super) {
        __extends(LiveAppsSettingsSummaryCardsComponent, _super);
        function LiveAppsSettingsSummaryCardsComponent(caseCardConfigService, routeExt, liveAppsConfigServiceExt, snackBar) {
            var _this = _super.call(this, routeExt, liveAppsConfigServiceExt, snackBar) || this;
            _this.caseCardConfigService = caseCardConfigService;
            _this.routeExt = routeExt;
            _this.liveAppsConfigServiceExt = liveAppsConfigServiceExt;
            _this.snackBar = snackBar;
            _this.handleConfigChanged = (/**
             * @param {?} caseCardConfig
             * @return {?}
             */
            function (caseCardConfig) {
                _this.caseCardConfig = caseCardConfig;
                console.log(caseCardConfig);
            });
            _this.handleAppSelection = (/**
             * @param {?} application
             * @return {?}
             */
            function (application) {
                _this.selectedApp = application;
            });
            _this.runSaveFunction = (/**
             * @return {?}
             */
            function () {
                _this.caseCardConfigService.updateCaseCardConfig(_this.sandboxId, _this.selectedApp.applicationId, _this.generalConfig.uiAppId, _this.caseCardConfig)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$)).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    _this.caseCardConfig = result;
                    _this.snackBar.open('Summary cards settings saved', 'OK', {
                        duration: 3000
                    });
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.snackBar.open('Error saving Summary Cards settings', 'OK', {
                        duration: 3000
                    });
                    console.log('Unable to update case card config: ' + error.errorMsg);
                }));
            });
            return _this;
        }
        LiveAppsSettingsSummaryCardsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-settings-summary-cards',
                        template: "<div fxLayout=\"column\" class=\"tcs-live-apps-summary-cards-settings\" fxFill>\n  <tc-tibco-cloud-widget-header style=\"height: 40px;\" [icon]=\"'tcs-capabilities'\" [headerText]=\"'Live Apps Summary Card Configuration'\"></tc-tibco-cloud-widget-header>\n\n  <div style=\"padding: 20px 20px 20px 20px;\" fxLayout=\"column\" fxFlex>\n    <div class=\"tcs-card-config-widget-pane\" fxFlex fxLayout=\"column\" fxLayoutAlign=\"start stretch\">\n      <tcla-live-apps-app-configuration-widget fxFlex=\"grow\" [sandboxId]=\"sandboxId\" [appIds]=\"liveAppsConfig.applicationIds\" [uiAppId]=\"generalConfig.uiAppId\" [folderId]=\"liveAppsConfig.caseIconsFolderId\" (configChanged)=\"handleConfigChanged($event)\" (appSelected)=\"handleAppSelection($event)\"></tcla-live-apps-app-configuration-widget>\n    </div>\n    <div fxLayout=\"column\" fxLayoutAlign=\"end end\" style=\"min-height: 50px\">\n      <button mat-raised-button color=\"primary\" (click)=\"runSaveFunction()\" [disabled]=\"!caseCardConfig || !selectedApp\">Save</button>\n    </div>\n  </div>\n</div>\n",
                        styles: [".tcs-card-config-widget-pane,.tcs-live-apps-summary-cards-settings{overflow:hidden}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsSettingsSummaryCardsComponent.ctorParameters = function () { return [
            { type: TcCaseCardConfigService },
            { type: router.ActivatedRoute },
            { type: TcLiveAppsConfigService },
            { type: material.MatSnackBar }
        ]; };
        return LiveAppsSettingsSummaryCardsComponent;
    }(LiveAppsSettingsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Allow Selection of live apps applications (part of config)
     *
     * ![alt-text](../live-apps-settings-recent-cases.png "")
     *
     * \@example <tcla-live-apps-settings-recent-cases></tcla-live-apps-settings-recent-cases>
     */
    var LiveAppsSettingsRecentCasesComponent = /** @class */ (function (_super) {
        __extends(LiveAppsSettingsRecentCasesComponent, _super);
        function LiveAppsSettingsRecentCasesComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.LIVE_APPS_URL = '/apps/dt-app/index.html#/application-content/';
            _this.runSaveFunction = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var liveAppsConfig = new LiveAppsConfig().deserialize({
                    applicationIds: _this.selectedAppIds,
                    recentExcludedAppIds: _this.excludeRecentIds,
                    caseIconsFolderId: _this.liveAppsConfig.caseIconsFolderId,
                    documentAppId: _this.liveAppsConfig.documentAppId,
                    collaborationAppId: _this.liveAppsConfig.documentAppId
                });
                // unable to use super.liveAppsConfigService
                _super.prototype.getLiveAppsConfigService.call(_this).updateLiveAppsConfig(_this.sandboxId, _this.generalConfig.uiAppId, liveAppsConfig, _this.liveAppsConfig.id).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    _this.snackBar.open('Recent cases settings saved', 'OK', {
                        duration: 3000
                    });
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.snackBar.open('Error saving Recent cases settings', 'OK', {
                        duration: 3000
                    });
                }));
            });
            return _this;
        }
        /**
         * @param {?} appIds
         * @return {?}
         */
        LiveAppsSettingsRecentCasesComponent.prototype.handleExcludeRecentAppIdSelection = /**
         * @param {?} appIds
         * @return {?}
         */
        function (appIds) {
            this.excludeRecentIds = appIds;
        };
        /**
         * @return {?}
         */
        LiveAppsSettingsRecentCasesComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            _super.prototype.ngOnInit.call(this);
            this.excludeRecentIds = this.liveAppsConfig.recentExcludedAppIds;
        };
        LiveAppsSettingsRecentCasesComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-settings-recent-cases',
                        template: "<div fxLayout=\"column\" class=\"tcs-live-apps-settings-pane\" fxFill>\n  <tc-tibco-cloud-widget-header style=\"height: 40px;\" [icon]=\"'tcs-capabilities'\" [headerText]=\"'Live Apps Recent Cases Configuration'\">\n</tc-tibco-cloud-widget-header>\n  <div fxFlex style=\"padding: 20px;\" fxLayout=\"column\" fxFill>\n    <div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"5px\" style=\"height: 20px\">\n      <p>Select any TIBCO Cloud Live Apps Applications you wish to EXCLUDE from recent cases:</p>\n      <mat-icon class=\"tcs-designer-link\" [svgIcon]=\"'tcs-application-edit'\" (click)=\"handleEditLiveAppClick()\" matTooltip=\"Open Live Apps Designer\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\"></mat-icon>\n    </div>\n    <tcla-live-apps-application-list class=\"tcs-app-selection-list-widget\" fxFlex=\"grow\" [sandboxId]=\"sandboxId\" [selectedAppIds]=\"excludeRecentIds\" (appIdsSelected)=\"handleExcludeRecentAppIdSelection($event)\"></tcla-live-apps-application-list>\n    <div fxFlex class=\"tcs-filler-panel\"></div>\n    <div fxLayout=\"column\" fxLayoutAlign=\"end end\" style=\"min-height: 50px\">\n      <button mat-raised-button color=\"primary\" (click)=\"runSaveFunction()\">Save</button>\n    </div>\n  </div>\n</div>\n",
                        styles: [".tcs-designer-link{margin-bottom:10px}.tcs-designer-link:hover{fill:#0081cb;cursor:pointer}.tcs-app-selection-list-widget,.tcs-live-apps-settings-pane{overflow:hidden}"]
                    }] }
        ];
        return LiveAppsSettingsRecentCasesComponent;
    }(LiveAppsSettingsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Configuration of roles
     *
     * ![alt-text](../live-apps-settings-roles.png "")
     *
     * \@example <tcla-live-apps-settings-roles></tcla-live-apps-settings-roles>
     */
    var LiveAppsSettingsRolesComponent = /** @class */ (function (_super) {
        __extends(LiveAppsSettingsRolesComponent, _super);
        function LiveAppsSettingsRolesComponent(route, generalConfigService, snackBar, dialog) {
            var _this = _super.call(this, route, generalConfigService, snackBar) || this;
            _this.route = route;
            _this.generalConfigService = generalConfigService;
            _this.snackBar = snackBar;
            _this.dialog = dialog;
            _this.deleteRoleFunction = (/**
             * @return {?}
             */
            function () {
                _this.generalConfig.roles = _this.generalConfig.roles.filter((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) { return element.id !== _this.currentRole.id; }));
                _this.currentRole = undefined;
            });
            _this.selectedRole = (/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                _this.currentRole = role;
            });
            _this.createRoleFunction = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var dialogRef = _this.dialog.open(tcCoreLib.TibcoCloudNewElementComponent, {
                    panelClass: 'tcs-style-dialog',
                    data: { resourceType: 'Role' }
                });
                dialogRef.afterClosed().subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result) {
                        /** @type {?} */
                        var newRole = new tcCoreLib.RoleAttribute().deserialize({ id: result.id, display: result.name, priority: 1 });
                        _this.generalConfig.roles.push(newRole);
                    }
                }));
            });
            return _this;
        }
        /**
         * @return {?}
         */
        LiveAppsSettingsRolesComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.generalConfig = _super.prototype.getRoute.call(this).snapshot.data.generalConfigHolder;
            this.roles = _super.prototype.getRoute.call(this).snapshot.data.allRoles;
            this.groups = _super.prototype.getRoute.call(this).snapshot.data.allGroups;
            this.claims = _super.prototype.getRoute.call(this).snapshot.data.claims;
            this.sandboxId = Number(this.claims.primaryProductionSandbox.id).valueOf();
        };
        LiveAppsSettingsRolesComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-settings-roles',
                        template: "<div fxLayout=\"column\" fxFill>\n    <tc-tibco-cloud-widget-header style=\"height: 40px;\" [icon]=\"'tcs-capabilities'\" [headerText]=\"'Role Configuration'\">\n    </tc-tibco-cloud-widget-header>\n    <div fxFlex style=\"padding: 20px; overflow: hidden\" fxLayout=\"column\">\n        <div style=\"overflow: auto;\">\n            <div fxLayout=\"column\" fxFlex>\n                <p>You can configure roles by here:</p>\n                <br>\n                <!-- Role specific -->\n                <mat-accordion>\n                    <mat-expansion-panel *ngFor=\"let role of generalConfig.roles\" (opened)=\"selectedRole(role)\">\n                        <mat-expansion-panel-header>\n                            <mat-panel-title>{{role.display}}</mat-panel-title>\n                        </mat-expansion-panel-header>\n                        <div fxLayout=\"column\">\n                            <div fxLayoutGap=\"10px\">\n                                <mat-form-field fxFlex=\"20\" style=\"min-width: 100px;\">\n                                    <input matInput placeholder=\"Id\" [(ngModel)]=\"role.id\" readonly>\n                                </mat-form-field>\n                                <mat-form-field fxFlex=\"40\" style=\"min-width: 400px;\">\n                                    <input matInput placeholder=\"Display Name\" [(ngModel)]=\"role.display\">\n                                </mat-form-field>\n                                <mat-form-field fxFlex=\"40\" style=\"min-width: 400px;\">\n                                    <mat-select [disableOptionCentering]=\"true\" placeholder=\"Live Apps Group\" [(value)]=\"role.group\" [disabled]=\"role.id === 'Administrator'\">\n                                        <mat-option *ngFor=\"let group of groups.groups\" [value]=\"group.name\">\n                                            <span matTooltip=\"{{group.description}}\" matTooltipShowDelay=\"1000\"\n                                                matTooltipPosition=\"below\">{{group.name}}</span>\n                                        </mat-option>\n                                    </mat-select>\n                                </mat-form-field>\n                            </div>\n                            <div fxLayoutGap=\"5px\">\n                                <mat-form-field fxFlex=\"20\">\n                                    <input matInput type=\"number\" min=\"0\" max=\"10\" placeholder=\"Priority\" [(ngModel)]=\"role.priority\">\n                                </mat-form-field>\n                            </div>\n                        </div>\n                    </mat-expansion-panel>\n                </mat-accordion>\n            </div>\n\n        </div>\n        <div fxFlex class=\"tcs-filler-panel\"></div>\n        <div fxLayout=\"row\" fxLayoutAlign=\"end end\" fxLayoutGap=\"10px\" style=\"min-height: 50px\">\n            <button mat-raised-button color=\"secondary\" [disabled]=\"!currentRole\"\n                (click)=\"deleteRoleFunction()\">Delete</button>\n            <button mat-raised-button color=\"secondary\" (click)=\"createRoleFunction()\">New</button>\n            <button mat-raised-button color=\"primary\" (click)=\"runSaveFunction()\">Save</button>\n        </div>\n    </div>\n</div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsSettingsRolesComponent.ctorParameters = function () { return [
            { type: router.ActivatedRoute },
            { type: tcCoreLib.TcGeneralConfigService },
            { type: material.MatSnackBar },
            { type: material.MatDialog }
        ]; };
        return LiveAppsSettingsRolesComponent;
    }(tcCoreLib.TibcoCloudSettingsGeneralComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Switch roles
     *
     * \@example <tcla-live-apps-role-switcher></tcla-live-apps-role-switcher>
     */
    var LiveAppsRoleSwitcherComponent = /** @class */ (function () {
        function LiveAppsRoleSwitcherComponent() {
            var _this = this;
            /**
             * ~event changeRoleEvent : Role selected
             * ~payload RoleAttribute : RoleAttribute object emitted when role is c hanged by switcher
             */
            this.changeRoleEvent = new core.EventEmitter();
            this.selectRole = (/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                _this.changeRoleEvent.emit(role);
            });
            this.compareObjects = (/**
             * @param {?} o1
             * @param {?} o2
             * @return {?}
             */
            function (o1, o2) {
                return o1.id === o2.id;
            });
        }
        /**
         * @return {?}
         */
        LiveAppsRoleSwitcherComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
        };
        LiveAppsRoleSwitcherComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-role-switcher',
                        template: "<div>\n    <mat-form-field>\n        <mat-label>Viewing as</mat-label>\n        <mat-select [(ngModel)]=\"selectedRole\" (selectionChange)=\"selectRole(selectedRole)\" [compareWith]=\"compareObjects\"> \n            <mat-option *ngFor=\"let role of roles\" [value]=\"role\">{{role.display}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsRoleSwitcherComponent.ctorParameters = function () { return []; };
        LiveAppsRoleSwitcherComponent.propDecorators = {
            roles: [{ type: core.Input }],
            selectedRole: [{ type: core.Input }],
            changeRoleEvent: [{ type: core.Output }]
        };
        return LiveAppsRoleSwitcherComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Wraps case creator and case creator list
     *
     * \@example <tcla-live-apps-case-creators></tcla-live-apps-case-creators>
     */
    var LiveAppsCaseCreatorsComponent = /** @class */ (function (_super) {
        __extends(LiveAppsCaseCreatorsComponent, _super);
        function LiveAppsCaseCreatorsComponent(liveapps, caseProcessesService) {
            var _this = _super.call(this) || this;
            _this.liveapps = liveapps;
            _this.caseProcessesService = caseProcessesService;
            /**
             * ~event creatorClicked : Case Creator selected
             * ~payload LaProcessSelection : LaProcessSelection object output when an action is clicked (ie. message to parent to run creator component)
             */
            _this.creatorClicked = new core.EventEmitter();
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                _this.caseProcessesService.getCaseCreators(_this.sandboxId, _this.appId, _this.typeId)
                    .pipe(operators.take(1), operators.takeUntil(_this._destroyed$)).subscribe((/**
                 * @param {?} casecreators
                 * @return {?}
                 */
                function (casecreators) {
                    _this.casecreators = casecreators.creators;
                    if (_this.casecreators.length === 1) {
                        _this.selectCreator(_this.casecreators[0]);
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { _this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; }));
            });
            return _this;
        }
        /**
         * @param {?} creator
         * @return {?}
         */
        LiveAppsCaseCreatorsComponent.prototype.selectCreator = /**
         * @param {?} creator
         * @return {?}
         */
        function (creator) {
            var _this = this;
            this.caseProcessesService.getProcessDetails(null, this.appId, this.typeId, this.sandboxId, null, creator, 100).pipe(operators.take(1), operators.takeUntil(this._destroyed$), operators.tap((/**
             * @param {?} processDetails
             * @return {?}
             */
            function (processDetails) {
                if (!processDetails || !processDetails.process || (processDetails.process.jsonSchema.$schema === 'NOSCHEMA')) {
                    // This will be triggered when no form schema is available
                    // Typically happens when:
                    // 1) The form has elements that are not supported by the Live Apps API for form schemas such as participant selectors
                    // 2) The Live Apps application is legacy and has no form schema at all, redeploying the live apps application would fix this.
                    console.error('No schema available for this case type: The form may not be supported or you may need to update/re-deploy the live apps application. Alternatively use a custom form.');
                }
            })))
                .subscribe((/**
             * @param {?} processSchema
             * @return {?}
             */
            function (processSchema) {
                _this.creatorClicked.emit(processSchema);
                return processSchema;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { _this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; }));
        };
        /**
         * @return {?}
         */
        LiveAppsCaseCreatorsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.refresh();
        };
        LiveAppsCaseCreatorsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-creators',
                        template: "<div *ngIf=\"casecreators && casecreators.length > 1\" fxFlex style=\"margin-left: 10px;\">\n  <span class=\"tcs-case-creation-dialog-instruction\">Select a case creator</span>\n  <mat-select #creatorSelector class=\"tcs-creator-selector-option\" [disableOptionCentering]=\"true\"\n              placeholder=\"Case Creators\" (selectionChange)=\"selectCreator($event.value)\">\n    <mat-option *ngFor=\"let creator of casecreators\" [value]=\"creator\">\n      <span>{{creator.label}}</span>\n    </mat-option>\n  </mat-select>\n</div>\n",
                        styles: [":host ::ng-deep .tcs-creator-selector-option .mat-select-value span{font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;color:#0081cb}:host ::ng-deep .tcs-creator-selector-option .mat-select-arrow-wrapper div{color:#0081cb}:host ::ng-deep .mat-select-value{min-width:100px;max-width:100%;width:auto}.tcs-creators-box{width:200px;height:44px;box-shadow:inset 0 1px 3px 0 rgba(0,0,0,.5);background-color:#fff}tcs-creator-selector-option{width:170px;margin-left:5px;margin-right:5px;background-color:#eee;padding-left:20px;padding-right:20px;height:35px}.tcs-case-creation-dialog-instruction{font-family:Source Sans Pro;font-size:16px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#727272}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsCaseCreatorsComponent.ctorParameters = function () { return [
            { type: LiveAppsService },
            { type: TcCaseProcessesService }
        ]; };
        LiveAppsCaseCreatorsComponent.propDecorators = {
            appId: [{ type: core.Input }],
            typeId: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }],
            creatorClicked: [{ type: core.Output }]
        };
        return LiveAppsCaseCreatorsComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ParseAuditMessagePipe = /** @class */ (function () {
        function ParseAuditMessagePipe() {
        }
        /**
         * @param {?} value
         * @param {?} item
         * @return {?}
         */
        ParseAuditMessagePipe.prototype.transform = /**
         * @param {?} value
         * @param {?} item
         * @return {?}
         */
        function (value, item) {
            // replace any {{paramX}} with the value in the item
            value = value.replace('{{param0}}', item.param0.value);
            value = value.replace('{{param1}}', item.param1.value);
            return value;
        };
        ParseAuditMessagePipe.decorators = [
            { type: core.Pipe, args: [{
                        name: 'parseAuditMessage'
                    },] }
        ];
        return ParseAuditMessagePipe;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Special (option list) rendering of LiveAppsCaseActionsComponent
     *
     * \@example <tcla-live-apps-case-actions-list></tcla-live-apps-case-actions-list>
     */
    var LiveAppsCaseActionsListComponent = /** @class */ (function (_super) {
        __extends(LiveAppsCaseActionsListComponent, _super);
        function LiveAppsCaseActionsListComponent() {
            var _this = _super !== null && _super.apply(this, arguments) || this;
            _this.refresh = (/**
             * @return {?}
             */
            function () {
                // retrieve the schema for this case type so we can display case creators and case actions for this case type
                _this.liveapps.getCaseTypeSchema(_this.sandboxId, _this.appId, 100)
                    .subscribe((/**
                 * @param {?} schema
                 * @return {?}
                 */
                function (schema) {
                    // this.appSchema = schema;
                    schema.casetypes.forEach((/**
                     * @param {?} casetype
                     * @return {?}
                     */
                    function (casetype) {
                        // the schema will contain definitions for both the 'case' and any defined types in that case.
                        // We want the schema for this 'case'.
                        if (casetype.applicationId === _this.appId && casetype.id === _this.typeId) {
                            if (casetype.jsonSchema !== undefined) {
                                // this.caseType = casetype;
                                _this.caseActionList = casetype.actions ? casetype.actions : [];
                                // if (this.caseActionList.length == 1) {
                                //     this.selectProcess(this.caseActionList[0]);
                                // }
                            }
                            else {
                                console.error('No schema returned for this case type: You may need to update/re-deploy the live apps application');
                            }
                        }
                    }));
                }));
            });
            _this.compareObjects = (/**
             * @param {?} o1
             * @param {?} o2
             * @return {?}
             */
            function (o1, o2) {
                return o1.id === _this.seletedActionId;
            });
            return _this;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        LiveAppsCaseActionsListComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (changes.appId && (changes.appId.currentValue !== changes.appId.previousValue)) {
                this.caseActionList = [];
                this.refresh();
            }
        };
        /**
         * @param {?} action
         * @return {?}
         */
        LiveAppsCaseActionsListComponent.prototype.selectAction = /**
         * @param {?} action
         * @return {?}
         */
        function (action) {
            var _this = this;
            this.caseProcessesService.getProcessDetails(this.caseRef, this.appId, this.typeId, this.sandboxId, action, null, 100).pipe(operators.take(1), operators.takeUntil(this._destroyed$), operators.tap((/**
             * @param {?} processDetails
             * @return {?}
             */
            function (processDetails) {
                if (!processDetails || !processDetails.process) {
                    // This will be triggered when no form schema is available
                    // Typically happens when:
                    // 1) The form has elements that are not supported by the Live Apps API for form schemas such as participant selectors
                    // 2) The Live Apps application is legacy and has no form schema at all, redeploying the live apps application would fix this.
                    console.error('No schema available for this case type: The form may not be supported or you may need to update/re-deploy the live apps application');
                }
            })))
                .subscribe((/**
             * @param {?} processSchema
             * @return {?}
             */
            function (processSchema) {
                _this.actionClicked.emit(processSchema);
                return processSchema;
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { _this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; }));
        };
        LiveAppsCaseActionsListComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-case-actions-list',
                        template: "<div fxFlex style=\"margin-left: 10px;\">\n    <mat-select class=\"tcs-action-selector-option\" [disableOptionCentering]=\"true\" [(ngModel)]=\"selectedAction\" [compareWith]=\"compareObjects\"\n        placeholder=\"Case Actions\" >\n        <mat-option *ngFor=\"let action of caseActionList\" [value]=\"action\" (click)=\"selectAction(action)\">\n            <span>{{action.name}}</span>\n        </mat-option>\n    </mat-select>\n</div>",
                        styles: [":host ::ng-deep .tcs-action-selector-option .mat-select-value span{font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;color:#0081cb}:host ::ng-deep .tcs-action-selector-option .mat-select-arrow-wrapper div{color:#0081cb}:host ::ng-deep .mat-select-value{min-width:100px;max-width:100%;width:auto}.tcs-actions-box{width:200px;height:44px;box-shadow:inset 0 1px 3px 0 rgba(0,0,0,.5);background-color:#fff}tcs-action-selector-option{width:170px;margin-left:5px;margin-right:5px;background-color:#eee;padding-left:20px;padding-right:20px;height:35px}.tcs-case-creation-dialog-instruction{font-family:Source Sans Pro;font-size:16px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#727272}"]
                    }] }
        ];
        LiveAppsCaseActionsListComponent.propDecorators = {
            seletedActionId: [{ type: core.Input }]
        };
        return LiveAppsCaseActionsListComponent;
    }(LiveAppsCaseActionsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Display document
     *
     * \@example <tcla-live-apps-document-viewer></tcla-live-apps-document-viewer>
     */
    var LiveAppsDocumentViewerComponent = /** @class */ (function () {
        function LiveAppsDocumentViewerComponent(sanitizer, documentsService, location) {
            this.sanitizer = sanitizer;
            this.documentsService = documentsService;
            this.location = location;
        }
        /**
         * @return {?}
         */
        LiveAppsDocumentViewerComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var preparedUrl = tcCoreLib.TcCoreCommonFunctions.prepareUrlForNonStaticResource(this.location, this.documentsService.getUrlForDocument(this.folderType, this.folderId, this.document.name, this.document.artifactVersion, this.sandboxId));
            this.sanitizedResourceUrl = this.sanitizer.bypassSecurityTrustResourceUrl(preparedUrl);
        };
        LiveAppsDocumentViewerComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-document-viewer',
                        template: "<div fxFill>\n  <iframe name=\"DocViewerFrame\" class=\"md-dialog-content\" fxFill [src]=\"sanitizedResourceUrl\">\n  </iframe>\n</div>\n",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsDocumentViewerComponent.ctorParameters = function () { return [
            { type: platformBrowser.DomSanitizer },
            { type: TcDocumentService },
            { type: common.Location }
        ]; };
        LiveAppsDocumentViewerComponent.propDecorators = {
            document: [{ type: core.Input }],
            folderType: [{ type: core.Input }],
            folderId: [{ type: core.Input }],
            sandboxId: [{ type: core.Input }]
        };
        return LiveAppsDocumentViewerComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Landing page
     *
     * This component allows a configurable landing page on a per role basis
     *
     * \@example <tcla-live-apps-landing-page></tcla-live-apps-landing-page>
     */
    var LiveAppsLandingPageComponent = /** @class */ (function () {
        function LiveAppsLandingPageComponent(router, landingPageService) {
            var _this = this;
            this.router = router;
            this.landingPageService = landingPageService;
            this.getStartedEvent = new core.EventEmitter();
            this.getStartedClick = (/**
             * @param {?} route
             * @return {?}
             */
            function (route) {
                _this.getStartedEvent.emit(route);
            });
        }
        /**
         * @return {?}
         */
        LiveAppsLandingPageComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.landingPageService.getLandingPageForRole(this.roleId, this.uiAppId).subscribe((/**
             * @param {?} landingPage
             * @return {?}
             */
            function (landingPage) {
                if (landingPage !== undefined) {
                    _this.title = landingPage.title;
                    _this.subtitle = landingPage.subtitle;
                    _this.backgroundImage = (landingPage.backgroundURL !== '' ? '/webresource/orgFolders/' + _this.uiAppId + '/background/' + landingPage.backgroundURL : '');
                    _this.topMargin = landingPage.topMargin ? landingPage.topMargin + 'px' : '0px';
                    _this.highlights = new Array();
                    _this.highlights.push(new tcCoreLib.LandingPageItemConfig().deserialize({
                        title: landingPage.highlights[0].title,
                        content: landingPage.highlights[0].content,
                        iconURL: landingPage.highlights[0].iconURL
                    }));
                    _this.highlights.push(new tcCoreLib.LandingPageItemConfig().deserialize({
                        title: landingPage.highlights[1].title,
                        content: landingPage.highlights[1].content,
                        iconURL: landingPage.highlights[1].iconURL
                    }));
                    _this.highlights.push(new tcCoreLib.LandingPageItemConfig().deserialize({
                        title: landingPage.highlights[2].title,
                        content: landingPage.highlights[2].content,
                        iconURL: landingPage.highlights[2].iconURL
                    }));
                    _this.actionButtons = new Array();
                    _this.actionButtons.push(new tcCoreLib.ActionButtonConfig().deserialize({ text: 'Get started', route: landingPage.homeRoute }));
                    _this.navigateURL = landingPage.homeRoute;
                }
                else {
                    _this.router.navigate(['errorHandler/NO_LANDING/NO_LANDING']);
                }
            }));
        };
        LiveAppsLandingPageComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-landing-page',
                        template: "<tc-tibco-cloud-splash-screen fxFill\n    [title]=\"title\" \n    [subTitle]=\"subtitle\" \n    [backGroundImage]=\"backgroundImage\"\n    [topMargin]=\"topMargin\"\n    [highlights]=\"highlights\"\n    [actionButtons]=\"actionButtons\"\n    (getStartedEvent)=\"getStartedClick($event)\">\n</tc-tibco-cloud-splash-screen>",
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsLandingPageComponent.ctorParameters = function () { return [
            { type: router.Router },
            { type: tcCoreLib.TcGeneralLandingPageService }
        ]; };
        LiveAppsLandingPageComponent.propDecorators = {
            uiAppId: [{ type: core.Input }],
            roleId: [{ type: core.Input }],
            getStartedEvent: [{ type: core.Output }]
        };
        return LiveAppsLandingPageComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TcAccessControlService = /** @class */ (function () {
        function TcAccessControlService(http, location, sharedStateService) {
            this.http = http;
            this.location = location;
            this.sharedStateService = sharedStateService;
        }
        /**
         * @param {?} sandboxId
         * @param {?} uiAppId
         * @param {?} accessControlConfig
         * @return {?}
         */
        TcAccessControlService.prototype.createLAccessControlConfig = /**
         * @param {?} sandboxId
         * @param {?} uiAppId
         * @param {?} accessControlConfig
         * @return {?}
         */
        function (sandboxId, uiAppId, accessControlConfig) {
            /** @type {?} */
            var ssName = uiAppId + '.accesscontrol.config.tibcolabs.client.context.PUBLIC';
            /** @type {?} */
            var content = new tcCoreLib.SharedStateContent();
            content.json = tcCoreLib.TcCoreCommonFunctions.escapeString(JSON.stringify(accessControlConfig));
            return this.sharedStateService.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)
                .pipe(operators.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) { return value; })));
        };
        /**
         * @param {?} uiAppId
         * @param {?} useCache
         * @param {?} flushCache
         * @return {?}
         */
        TcAccessControlService.prototype.getAccessControlConfig = /**
         * @param {?} uiAppId
         * @param {?} useCache
         * @param {?} flushCache
         * @return {?}
         */
        function (uiAppId, useCache, flushCache) {
            // if useCache is false this will trigger the service to update the cached version with latest
            /** @type {?} */
            var ssName = uiAppId + '.accesscontrol.config.tibcolabs.client.context.PUBLIC';
            return this.sharedStateService.getSharedState(ssName, 'PUBLIC', useCache, flushCache)
                .pipe(operators.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                if (value.sharedStateEntries.length > 0) {
                    /** @type {?} */
                    var ssresult = new RouteAccessControlConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));
                    ssresult.id = value.sharedStateEntries[0].id;
                    return ssresult;
                }
                else {
                    return undefined;
                }
            })));
        };
        /**
         * @param {?} sandboxId
         * @param {?} uiAppId
         * @param {?} accessControlConfig
         * @param {?} id
         * @return {?}
         */
        TcAccessControlService.prototype.updateAccessControlConfig = /**
         * @param {?} sandboxId
         * @param {?} uiAppId
         * @param {?} accessControlConfig
         * @param {?} id
         * @return {?}
         */
        function (sandboxId, uiAppId, accessControlConfig, id) {
            var _this = this;
            /** @type {?} */
            var ssName = uiAppId + '.accesscontrol.config.tibcolabs.client.context.PUBLIC';
            /** @type {?} */
            var content = new tcCoreLib.SharedStateContent();
            content.json = tcCoreLib.TcCoreCommonFunctions.escapeString(JSON.stringify(accessControlConfig));
            /** @type {?} */
            var entry = new tcCoreLib.SharedStateEntry();
            entry.content = content;
            entry.sandboxId = sandboxId;
            entry.name = ssName;
            entry.type = 'PUBLIC';
            entry.id = id;
            /** @type {?} */
            var ssList = new tcCoreLib.SharedStateList();
            ssList.sharedStateEntries = [];
            ssList.sharedStateEntries.push(entry);
            return this.sharedStateService.updateSharedState(ssList.sharedStateEntries)
                .pipe(operators.map((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                // flush the cache
                _this.getAccessControlConfig(uiAppId, true, true).subscribe();
                return new RouteAccessControlConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));
            })));
        };
        TcAccessControlService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root'
                    },] }
        ];
        /** @nocollapse */
        TcAccessControlService.ctorParameters = function () { return [
            { type: http.HttpClient },
            { type: common.Location },
            { type: tcCoreLib.TcSharedStateService }
        ]; };
        /** @nocollapse */ TcAccessControlService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function TcAccessControlService_Factory() { return new TcAccessControlService(core.ɵɵinject(http.HttpClient), core.ɵɵinject(common.Location), core.ɵɵinject(tcCoreLib.TcSharedStateService)); }, token: TcAccessControlService, providedIn: "root" });
        return TcAccessControlService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AccessControlConfigurationResolver = /** @class */ (function () {
        function AccessControlConfigurationResolver(location, http, accessControlService) {
            var _this = this;
            this.location = location;
            this.http = http;
            this.accessControlService = accessControlService;
            this.DEFAULT_CONFIG_URL = 'assets/config/routeAccessControl.json';
            this.APP_ID_URL = tcCoreLib.TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/uiAppId.json');
            // can be used to load defaultAppConfig from a JSON config
            this.getDefaultAppConfig = (/**
             * @return {?}
             */
            function () {
                return _this.http.get(tcCoreLib.TcCoreCommonFunctions.prepareUrlForStaticResource(_this.location, _this.DEFAULT_CONFIG_URL));
            });
            // loads uiAppId from json file in assets (appId.json)
            this.getAppId = (/**
             * @return {?}
             */
            function () {
                return _this.http.get(_this.APP_ID_URL).pipe(operators.map((/**
                 * @param {?} uiAppId
                 * @return {?}
                 */
                function (uiAppId) {
                    /** @type {?} */
                    var uiAppIdConfig = new tcCoreLib.UiAppIdConfig().deserialize(uiAppId);
                    _this.uiAppId = uiAppIdConfig.uiAppId;
                    return uiAppIdConfig;
                })));
            });
        }
        /**
         * @return {?}
         */
        AccessControlConfigurationResolver.prototype.resolve = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var accessConfig$ = this.getAppId().pipe(operators.switchMap((/**
             * @param {?} uiAppId
             * @return {?}
             */
            function (uiAppId) { return _this.accessControlService.getAccessControlConfig(uiAppId.uiAppId, true, false)
                .pipe(operators.mergeMap((/**
             * @param {?} accessControlConfig
             * @return {?}
             */
            function (accessControlConfig) {
                if (accessControlConfig === undefined) {
                    return _this.getDefaultAppConfig().pipe(operators.flatMap((/**
                     * @param {?} config
                     * @return {?}
                     */
                    function (config) {
                        _this.defaultAccessControlConfig = new RouteAccessControlConfig().deserialize(config);
                        _this.defaultAccessControlConfig.uiAppId = _this.uiAppId;
                        return _this.accessControlService.createLAccessControlConfig(_this.sandboxId, _this.uiAppId, _this.defaultAccessControlConfig)
                            .pipe(operators.flatMap((/**
                         * @param {?} result
                         * @return {?}
                         */
                        function (result) {
                            /** @type {?} */
                            var newAppConfig = _this.defaultAccessControlConfig;
                            newAppConfig.id = result;
                            return _this.accessControlService.updateAccessControlConfig(_this.sandboxId, _this.uiAppId, newAppConfig, result).pipe(operators.flatMap((
                            // trigger a read to flush the cache since we changed it
                            // trigger a read to flush the cache since we changed it
                            /**
                             * @param {?} updatedConf
                             * @return {?}
                             */
                            function (updatedConf) {
                                return _this.accessControlService.getAccessControlConfig(_this.uiAppId, true, true).pipe(operators.map((/**
                                 * @param {?} cachedConfig
                                 * @return {?}
                                 */
                                function (cachedConfig) {
                                    return cachedConfig;
                                })));
                            })));
                            // return newAppConfig;
                        })));
                    })));
                }
                else {
                    return rxjs.of(accessControlConfig);
                }
            }))); })));
            return accessConfig$;
        };
        AccessControlConfigurationResolver.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AccessControlConfigurationResolver.ctorParameters = function () { return [
            { type: common.Location },
            { type: http.HttpClient },
            { type: TcAccessControlService }
        ]; };
        return AccessControlConfigurationResolver;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RolesResolver = /** @class */ (function () {
        function RolesResolver(sharedStateService, generalConfigService, http, liveapps, location, router) {
            this.sharedStateService = sharedStateService;
            this.generalConfigService = generalConfigService;
            this.http = http;
            this.liveapps = liveapps;
            this.location = location;
            this.router = router;
            this.createRoles = (/**
             * @param {?} groups
             * @param {?} roles
             * @return {?}
             */
            function (groups, roles) {
                /** @type {?} */
                var calcRoles = [];
                roles.forEach((/**
                 * @param {?} role
                 * @return {?}
                 */
                function (role) {
                    /** @type {?} */
                    var targetGroup = groups.find((/**
                     * @param {?} grp
                     * @return {?}
                     */
                    function (grp) {
                        return (grp.name === role.group);
                    }));
                    if (targetGroup) {
                        calcRoles.push(role);
                    }
                }));
                return new Roles().deserialize(new Roles().deserialize({ roles: calcRoles }));
            });
        }
        /**
         * @return {?}
         */
        RolesResolver.prototype.resolve = /**
         * @return {?}
         */
        function () {
            var _this = this;
            // we will need the general config to understand the roles definition
            /** @type {?} */
            var generalConfigResolver = new tcCoreLib.GeneralConfigResolver(this.sharedStateService, this.generalConfigService, this.http, this.location, this.router);
            // aim is to return an object that only contains roles where the user is a member of the matching group
            /** @type {?} */
            var claimResolver$ = new ClaimsResolver(this.liveapps).resolve().pipe(operators.flatMap((/**
             * @param {?} claiminfo
             * @return {?}
             */
            function (claiminfo) {
                /** @type {?} */
                var sandboxId = claiminfo.primaryProductionSandbox.id;
                generalConfigResolver.setSandbox(Number(sandboxId));
                /** @type {?} */
                var generalConfig$ = generalConfigResolver.resolve();
                /** @type {?} */
                var groups$ = _this.liveapps.getGroupMemberships(+claiminfo.primaryProductionSandbox.id, claiminfo.id, 1000, true);
                return rxjs.forkJoin(generalConfig$, groups$).pipe(operators.map((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), configData = _b[0], groupData = _b[1];
                    return _this.createRoles(groupData.groups, configData.roles);
                })));
            })));
            return claimResolver$;
        };
        RolesResolver.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RolesResolver.ctorParameters = function () { return [
            { type: tcCoreLib.TcSharedStateService },
            { type: tcCoreLib.TcGeneralConfigService },
            { type: http.HttpClient },
            { type: LiveAppsService },
            { type: common.Location },
            { type: router.Router }
        ]; };
        return RolesResolver;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RoleActiveResolver = /** @class */ (function () {
        function RoleActiveResolver(rolesService, liveAppsService, tcSharedStateService, generalConfigService, httpClient, location, router) {
            this.rolesService = rolesService;
            this.liveAppsService = liveAppsService;
            this.tcSharedStateService = tcSharedStateService;
            this.generalConfigService = generalConfigService;
            this.httpClient = httpClient;
            this.location = location;
            this.router = router;
        }
        /**
         * @return {?}
         */
        RoleActiveResolver.prototype.resolve = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var currentRole = this.rolesService.getCurrentRole();
            if (currentRole === undefined) {
                /** @type {?} */
                var roleResolver$ = new RolesResolver(this.tcSharedStateService, this.generalConfigService, this.httpClient, this.liveAppsService, this.location, this.router);
                return roleResolver$.resolve().pipe(operators.map((/**
                 * @param {?} roles
                 * @return {?}
                 */
                function (roles) {
                    /** @type {?} */
                    var highestRole = roles.roles.reduce((/**
                     * @param {?} prev
                     * @param {?} current
                     * @return {?}
                     */
                    function (prev, current) {
                        return (prev.priority > current.priority) ? prev : current;
                    }));
                    _this.rolesService.setCurrentRole(highestRole);
                    return highestRole;
                })));
            }
            else {
                return rxjs.of(currentRole);
            }
        };
        RoleActiveResolver.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RoleActiveResolver.ctorParameters = function () { return [
            { type: TcRolesService },
            { type: LiveAppsService },
            { type: tcCoreLib.TcSharedStateService },
            { type: tcCoreLib.TcGeneralConfigService },
            { type: http.HttpClient },
            { type: common.Location },
            { type: router.Router }
        ]; };
        return RoleActiveResolver;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AccessResolver = /** @class */ (function () {
        function AccessResolver(location, http, accessControlService, rolesService, liveapps, route, sharedStateService, generalConfigService, router) {
            this.location = location;
            this.http = http;
            this.accessControlService = accessControlService;
            this.rolesService = rolesService;
            this.liveapps = liveapps;
            this.route = route;
            this.sharedStateService = sharedStateService;
            this.generalConfigService = generalConfigService;
            this.router = router;
        }
        /**
         * @return {?}
         */
        AccessResolver.prototype.resolve = /**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var accessControlConfiguration$ = new AccessControlConfigurationResolver(this.location, this.http, this.accessControlService).resolve();
            // we will need the active user role
            /** @type {?} */
            var activeRoleRes = new RoleActiveResolver(this.rolesService, this.liveapps, this.sharedStateService, this.generalConfigService, this.http, this.location, this.router);
            /** @type {?} */
            var activeRole$ = activeRoleRes.resolve();
            // run both in parallel then check access
            /** @type {?} */
            var accessControl$ = rxjs.forkJoin(accessControlConfiguration$, activeRole$).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), accessConfig = _b[0], activeRole = _b[1];
                return accessConfig.configuration.find((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) { return element.roleId === activeRole.id; }));
            })));
            return accessControl$;
        };
        AccessResolver.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AccessResolver.ctorParameters = function () { return [
            { type: common.Location },
            { type: http.HttpClient },
            { type: TcAccessControlService },
            { type: TcRolesService },
            { type: LiveAppsService },
            { type: router.ActivatedRoute },
            { type: tcCoreLib.TcSharedStateService },
            { type: tcCoreLib.TcGeneralConfigService },
            { type: router.Router }
        ]; };
        return AccessResolver;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var RoleGuard = /** @class */ (function () {
        function RoleGuard(liveapps, rolesService, http, location, route, sharedStateService, generalConfigService, accessControlService, router) {
            this.liveapps = liveapps;
            this.rolesService = rolesService;
            this.http = http;
            this.location = location;
            this.route = route;
            this.sharedStateService = sharedStateService;
            this.generalConfigService = generalConfigService;
            this.accessControlService = accessControlService;
            this.router = router;
            this.DEFAULT_CONFIG_URL = tcCoreLib.TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/routeAccessControl.json');
        }
        /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        RoleGuard.prototype.canActivate = /**
         * @param {?} route
         * @param {?} state
         * @return {?}
         */
        function (route, state) {
            /** @type {?} */
            var guardRoute = '';
            route.pathFromRoot.map((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (element.url.length === 1) {
                    guardRoute += '/' + element.url[0];
                }
            }));
            // we will need the active user role
            /** @type {?} */
            var activeResolver$ = new AccessResolver(this.location, this.http, this.accessControlService, this.rolesService, this.liveapps, this.route, this.sharedStateService, this.generalConfigService, this.router).resolve();
            // access control configuration to check current URL is on allowedRoutes
            /** @type {?} */
            var accessControlConfig$ = new AccessControlConfigurationResolver(this.location, this.http, this.accessControlService).resolve();
            // run both in parallel then check access
            return rxjs.forkJoin(activeResolver$, accessControlConfig$).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), activeResolver = _b[0], accessControlConfig = _b[1];
                // if guardRoute is not in allowedRoutes then OK
                if (accessControlConfig.allowedRoutes.indexOf(guardRoute) === -1) {
                    return true;
                }
                // Check guardRoute in active user role routes
                if (activeResolver.routes.indexOf(guardRoute) > -1) {
                    return true;
                }
                else {
                    return false;
                }
            })));
        };
        RoleGuard.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        RoleGuard.ctorParameters = function () { return [
            { type: LiveAppsService },
            { type: TcRolesService },
            { type: http.HttpClient },
            { type: common.Location },
            { type: router.ActivatedRoute },
            { type: tcCoreLib.TcSharedStateService },
            { type: tcCoreLib.TcGeneralConfigService },
            { type: TcAccessControlService },
            { type: router.Router }
        ]; };
        return RoleGuard;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LiveAppsSettingsAccessControlComponent = /** @class */ (function () {
        function LiveAppsSettingsAccessControlComponent(route, accessControlService, snackBar) {
            var _this = this;
            this.route = route;
            this.accessControlService = accessControlService;
            this.snackBar = snackBar;
            this.displayedColumns = [];
            this.dataSource = [];
            this.generateTables = (/**
             * @return {?}
             */
            function () {
                _this.displayedColumns = ['name'];
                _this.allRoles.roles.forEach((/**
                 * @param {?} role
                 * @return {?}
                 */
                function (role) {
                    _this.displayedColumns.push(role.id);
                }));
                // Create in dataSource all rows with the appropriate order
                _this.dataSource.push({ initial: 'Routes', isGroupBy: true });
                _this.accessControlConfiguration.allowedRoutes.forEach((/**
                 * @param {?} route
                 * @return {?}
                 */
                function (route) { return _this.dataSource.push({ name: route, type: 'route' }); }));
                _this.dataSource.push({ initial: 'Buttons', isGroupBy: true });
                _this.accessControlConfiguration.allowedButtonIds.forEach((/**
                 * @param {?} buttonId
                 * @return {?}
                 */
                function (buttonId) { return _this.dataSource.push({ name: buttonId, type: 'button' }); }));
                // Update the dataSource with the previous configuration
                _this.accessControlConfiguration.configuration.forEach((/**
                 * @param {?} configElement
                 * @return {?}
                 */
                function (configElement) {
                    // Routes
                    configElement.routes.forEach((/**
                     * @param {?} configRoute
                     * @return {?}
                     */
                    function (configRoute) {
                        /** @type {?} */
                        var row = _this.dataSource.filter((/**
                         * @param {?} entry
                         * @return {?}
                         */
                        function (entry) { return entry.name === configRoute; }))[0];
                        row[configElement.roleId] = true;
                    }));
                    // ButtonsIds
                    configElement.buttonIds.forEach((/**
                     * @param {?} configRoute
                     * @return {?}
                     */
                    function (configRoute) {
                        /** @type {?} */
                        var row = _this.dataSource.filter((/**
                         * @param {?} entry
                         * @return {?}
                         */
                        function (entry) { return entry.name === configRoute; }))[0];
                        row[configElement.roleId] = true;
                    }));
                }));
            });
            this.isSelected = (/**
             * @param {?} row
             * @param {?} role
             * @return {?}
             */
            function (row, role) {
                return row[role];
            });
            this.toggle = (/**
             * @param {?} row
             * @param {?} role
             * @return {?}
             */
            function (row, role) {
                /** @type {?} */
                var dsRow = _this.dataSource.filter((/**
                 * @param {?} entry
                 * @return {?}
                 */
                function (entry) { return entry.name === row.name; }))[0];
                if (dsRow[role]) {
                    delete dsRow[role];
                }
                else {
                    dsRow[role] = true;
                }
            });
        }
        /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        LiveAppsSettingsAccessControlComponent.prototype.isGroup = /**
         * @param {?} index
         * @param {?} item
         * @return {?}
         */
        function (index, item) {
            return item.isGroupBy;
        };
        /**
         * @return {?}
         */
        LiveAppsSettingsAccessControlComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.accessControlConfiguration = this.route.snapshot.data.accessControlConfigHolder;
            this.allRoles = this.route.snapshot.data.allRoles;
            this.generateTables();
        };
        /**
         * @return {?}
         */
        LiveAppsSettingsAccessControlComponent.prototype.runSaveFunction = /**
         * @return {?}
         */
        function () {
            var _this = this;
            var e_1, _a;
            this.accessControlConfiguration.configuration = [];
            var _loop_1 = function (role) {
                /** @type {?} */
                var userConfiguration = this_1.dataSource.filter((/**
                 * @param {?} entry
                 * @return {?}
                 */
                function (entry) { return entry[role.id]; }));
                /** @type {?} */
                var routes = userConfiguration.filter((/**
                 * @param {?} row
                 * @return {?}
                 */
                function (row) { return row.type === 'route'; })).map((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) { return element.name; }));
                /** @type {?} */
                var buttonIds = userConfiguration.filter((/**
                 * @param {?} row
                 * @return {?}
                 */
                function (row) { return row.type === 'button'; })).map((/**
                 * @param {?} element
                 * @return {?}
                 */
                function (element) { return element.name; }));
                this_1.accessControlConfiguration.configuration.push(new RouteAccessControlConfigurationElement().deserialize({ 'roleId': role.id, routes: routes, buttonIds: buttonIds }));
            };
            var this_1 = this;
            try {
                for (var _b = __values(this.allRoles.roles), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var role = _c.value;
                    _loop_1(role);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            this.accessControlService.updateAccessControlConfig(Number(this.route.snapshot.data.claims.primaryProductionSandbox.id).valueOf(), this.accessControlConfiguration.uiAppId, this.accessControlConfiguration, this.accessControlConfiguration.id).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                _this.snackBar.open('Access Control configuration saved', 'OK', {
                    duration: 3000
                });
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                _this.snackBar.open('Error saving Access Control configuration saved', 'OK', {
                    duration: 3000
                });
            }));
        };
        LiveAppsSettingsAccessControlComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-settings-access-control',
                        template: "<div fxLayout=\"column\" fxFill>\n  <tc-tibco-cloud-widget-header style=\"height: 40px;\" [icon]=\"'tcs-capabilities'\"\n                                [headerText]=\"'Access Control Configuration'\">\n  </tc-tibco-cloud-widget-header>\n  <div fxFlex style=\"padding: 20px; overflow: hidden\" fxLayout=\"column\">\n    <div style=\"overflow: auto;\" fxFlex fxLayout=\"column\">\n      <div fxLayout=\"column\">\n        <p>You can configure roles by here:</p>\n        <br>\n        <table fxFlex mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n\n          <!-- Name Column -->\n          <ng-container matColumnDef=\"name\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n          </ng-container>\n\n          <ng-container *ngFor=\"let role of allRoles.roles\" matColumnDef=\"{{role.id}}\">\n            <th mat-header-cell *matHeaderCellDef [ngClass]=\"'centered-cell'\">{{role.id}}</th>\n            <td mat-cell [ngClass]=\"'centered-cell'\" *matCellDef=\"let row\">\n              <!-- (click)=\"$event.stopPropagation()\" (change)=\"$event ? selection.toggle(row) : null\" [checked]=\"selection.isSelected(row)\" -->\n              <mat-checkbox [disabled]=\"(row.type === 'button' && row.name === 'configure') || (row.type === 'route' && row.name === '/starterApp/configuration') \"\n                            (click)=\"$event.stopPropagation()\" [checked]=\"isSelected(row, role.id)\"\n                            (change)=\"$event ? toggle(row, role.id) : null\"\n              ></mat-checkbox>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n          <!-- Group header -->\n          <ng-container matColumnDef=\"groupHeader\">\n            <td colspan=\"999\" mat-cell *matCellDef=\"let groupBy\"><strong>{{groupBy.initial}}</strong></td>\n          </ng-container>\n\n          <tr mat-row *matRowDef=\"let row; columns: ['groupHeader']; when: isGroup\"></tr>\n\n        </table>\n      </div>\n      <div fxFlex class=\"tcs-filler-panel\"></div>\n      <div fxLayout=\"row\" fxLayoutAlign=\"end end\" fxLayoutGap=\"10px\" style=\"min-height: 50px\">\n        <button mat-raised-button color=\"primary\" (click)=\"runSaveFunction()\">Save</button>\n      </div>\n    </div>\n  </div>\n</div>\n",
                        styles: [".centered-cell{text-align:center}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsSettingsAccessControlComponent.ctorParameters = function () { return [
            { type: router.ActivatedRoute },
            { type: TcAccessControlService },
            { type: material.MatSnackBar }
        ]; };
        return LiveAppsSettingsAccessControlComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Configuration of forms
     *
     * ![alt-text](../live-apps-settings-forms.png "")
     *
     * \@example <tcla-live-apps-settings-forms></tcla-live-apps-settings-forms>
     */
    var LiveAppsSettingsFormsComponent = /** @class */ (function (_super) {
        __extends(LiveAppsSettingsFormsComponent, _super);
        function LiveAppsSettingsFormsComponent(route, liveAppsConfigService, snackBar) {
            var _this = _super.call(this) || this;
            _this.route = route;
            _this.liveAppsConfigService = liveAppsConfigService;
            _this.snackBar = snackBar;
            _this.runSaveFunction = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var liveAppsConfig = new LiveAppsConfig().deserialize({
                    applicationIds: _this.selectedAppIds,
                    caseIconsFolderId: _this.liveAppsConfig.caseIconsFolderId,
                    documentAppId: _this.liveAppsConfig.documentAppId,
                    collaborationAppId: _this.liveAppsConfig.documentAppId,
                    legacyCreators: _this.liveAppsConfig.legacyCreators,
                    legacyActions: _this.liveAppsConfig.legacyActions,
                    legacyWorkitems: _this.liveAppsConfig.legacyWorkitems,
                    formsFramework: _this.liveAppsConfig.formsFramework
                });
                _this.liveAppsConfigService.updateLiveAppsConfig(_this.sandboxId, _this.generalConfig.uiAppId, liveAppsConfig, _this.liveAppsConfig.id).subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    _this.snackBar.open('Live Apps form configuration settings saved', 'OK', {
                        duration: 3000
                    });
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.snackBar.open('Error saving forms configuration', 'OK', {
                        duration: 3000
                    });
                }));
            });
            return _this;
        }
        /**
         * @protected
         * @return {?}
         */
        LiveAppsSettingsFormsComponent.prototype.getLiveAppsConfigService = /**
         * @protected
         * @return {?}
         */
        function () {
            return this.liveAppsConfigService;
        };
        /**
         * @param {?} appIds
         * @return {?}
         */
        LiveAppsSettingsFormsComponent.prototype.handleAppIdSelection = /**
         * @param {?} appIds
         * @return {?}
         */
        function (appIds) {
            console.log('Selected: ', appIds);
            this.selectedAppIds = appIds;
        };
        /**
         * @return {?}
         */
        LiveAppsSettingsFormsComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            this.generalConfig = this.route.snapshot.data.laConfigHolder.generalConfig;
            this.liveAppsConfig = this.route.snapshot.data.laConfigHolder.liveAppsConfig;
            this.claims = this.route.snapshot.data.claims;
            this.sandboxId = Number(this.claims.primaryProductionSandbox.id).valueOf();
            this.selectedAppIds = this.liveAppsConfig.applicationIds;
        };
        LiveAppsSettingsFormsComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-settings-forms',
                        template: "<div fxLayout=\"column\" class=\"tcs-live-apps-settings-pane\" fxFill>\n  <tc-tibco-cloud-widget-header style=\"height: 40px;\" [icon]=\"'tcs-capabilities'\" [headerText]=\"'Live Apps Form Configuration'\">\n  </tc-tibco-cloud-widget-header>\n  <div fxFlex style=\"padding: 20px;\" fxLayout=\"column\">\n    <div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"5px\" style=\"height: 20px\">\n      <p class=\"tcs-settings-text\">Select framework for generated forms (only applies when NOT using legacy or custom forms):</p>\n    </div>\n    <div fxLayout=\"column\" style=\"padding: 10px;\">\n      <mat-radio-group [(ngModel)]=\"liveAppsConfig.formsFramework\" fxLayout=\"column\">\n        <mat-radio-button class=\"tcs-radio-label-content\" value=\"material-design\">Material Design</mat-radio-button>\n        <mat-radio-button class=\"tcs-radio-label-content\" value=\"bootstrap-4\">Bootstrap 4</mat-radio-button>\n      </mat-radio-group>\n    </div>\n    <div fxLayout=\"row\" fxLayoutAlign=\"start start\" fxLayoutGap=\"5px\" style=\"height: 20px\">\n      <p class=\"tcs-settings-text\">Select whether to use Live Apps Case Manager Forms for this application:</p>\n    </div>\n    <div fxLayout=\"column\" style=\"padding: 10px;\">\n      <mat-checkbox [(ngModel)]=\"liveAppsConfig.legacyCreators\">\n        <mat-label class=\"tcs-checkbox-label\">Creators</mat-label>\n      </mat-checkbox>\n      <mat-checkbox [(ngModel)]=\"liveAppsConfig.legacyActions\">\n        <mat-label class=\"tcs-checkbox-label\">Actions</mat-label>\n      </mat-checkbox>\n      <mat-checkbox [(ngModel)]=\"liveAppsConfig.legacyWorkitems\">\n        <mat-label class=\"tcs-checkbox-label\">Workitems</mat-label>\n      </mat-checkbox>\n    </div>\n    <div fxFlex class=\"tcs-filler-panel\"></div>\n    <div fxLayout=\"column\" fxLayoutAlign=\"end end\" style=\"min-height: 50px\">\n      <button mat-raised-button color=\"primary\" (click)=\"runSaveFunction()\">Save</button>\n    </div>\n  </div>\n</div>\n",
                        styles: [".tcs-card-config-widget-pane,.tcs-live-apps-summary-cards-settings{overflow:hidden}.tcs-checkbox-label,.tcs-settings-text{font-family:Source Sans Pro;font-size:14px;font-weight:400;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px}:host ::ng-deep .tcs-radio-label-content .mat-radio-label-content{font-family:Source Sans Pro;font-size:14px;font-weight:400;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsSettingsFormsComponent.ctorParameters = function () { return [
            { type: router.ActivatedRoute },
            { type: TcLiveAppsConfigService },
            { type: material.MatSnackBar }
        ]; };
        return LiveAppsSettingsFormsComponent;
    }(LiveAppsComponent));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /* models used by landing page config */
    var   /* models used by landing page config */
    ActionButtonConfig = /** @class */ (function () {
        function ActionButtonConfig() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        ActionButtonConfig.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return ActionButtonConfig;
    }());
    var LandingPageItemConfig = /** @class */ (function () {
        function LandingPageItemConfig() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        LandingPageItemConfig.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return LandingPageItemConfig;
    }());
    var LandingPageConfig = /** @class */ (function () {
        function LandingPageConfig() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        LandingPageConfig.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return LandingPageConfig;
    }());
    var GeneralLandingPageConfig = /** @class */ (function () {
        function GeneralLandingPageConfig() {
        }
        /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        GeneralLandingPageConfig.prototype.deserialize = /**
         * @template THIS
         * @this {THIS}
         * @param {?} input
         * @return {THIS}
         */
        function (input) {
            Object.assign((/** @type {?} */ (this)), input);
            return (/** @type {?} */ (this));
        };
        return GeneralLandingPageConfig;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * Configuration page home
     *
     * \@example <tcla-live-apps-setting-landing></tcla-live-apps-setting-landing>
     */
    var LiveAppsSettingsLandingComponent = /** @class */ (function () {
        function LiveAppsSettingsLandingComponent(route, generalLandingPageConfigService, snackBar, dialog, documentsService) {
            var _this = this;
            this.route = route;
            this.generalLandingPageConfigService = generalLandingPageConfigService;
            this.snackBar = snackBar;
            this.dialog = dialog;
            this.documentsService = documentsService;
            /**
             * New Configuration
             */
            this.runNewConfiguration = (/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var dialogRef = _this.dialog.open(tcCoreLib.TibcoCloudNewElementComponent, {
                    width: '50%',
                    height: '30%',
                    maxWidth: '100vw',
                    maxHeight: '100vh',
                    panelClass: 'tcs-style-dialog',
                    data: { resourceType: 'Landing Page' }
                });
                dialogRef.afterClosed().subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    if (result) {
                        /** @type {?} */
                        var newElement = new LandingPageConfig().deserialize({
                            key: result.id,
                            description: result.name,
                            highlights: [new LandingPageItemConfig(), new LandingPageItemConfig(), new LandingPageItemConfig()]
                        });
                        _this.landingPages.push(newElement);
                        _this.selectedWelcomePage = newElement;
                    }
                }));
            });
            /**
             * Helper to Compare Objects
             */
            this.compareObjects = (/**
             * @param {?} o1
             * @param {?} o2
             * @return {?}
             */
            function (o1, o2) {
                return o1 === o2;
            });
        }
        /**
        * @ignore
        */
        /**
         * @ignore
         * @return {?}
         */
        LiveAppsSettingsLandingComponent.prototype.ngOnInit = /**
         * @ignore
         * @return {?}
         */
        function () {
            this.landingPagesConfig = this.route.snapshot.data.landingPagesConfigHolder;
            this.landingPages = this.landingPagesConfig.landingPage;
            this.allRoles = this.route.snapshot.data.allRolesHolder.roles.filter((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return !element.configuration; }));
            this.sandboxId = this.route.snapshot.data.claims.primaryProductionSandbox.id;
            this.uiAppId = this.route.snapshot.data.landingPagesConfigHolder.uiAppId;
            // If there is only one landing page selects it automatically
            if (this.landingPages.length == 1) {
                this.selectedWelcomePage = this.landingPages[0];
            }
        };
        /**
         * Save Configuration
         */
        /**
         * Save Configuration
         * @return {?}
         */
        LiveAppsSettingsLandingComponent.prototype.runSaveFunction = /**
         * Save Configuration
         * @return {?}
         */
        function () {
            var _this = this;
            this.generalLandingPageConfigService.updateGeneralLandingPageConfig(this.sandboxId, this.uiAppId, this.landingPagesConfig, this.landingPagesConfig.id).subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                _this.snackBar.open('Landing Pages configuration saved', 'OK', {
                    duration: 3000
                });
            }), (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.snackBar.open('Error saving Landing Pages configuration', 'OK', {
                    duration: 3000
                });
            }));
        };
        /**
         * Delete Configuration
         */
        /**
         * Delete Configuration
         * @return {?}
         */
        LiveAppsSettingsLandingComponent.prototype.runDeleteConfiguration = /**
         * Delete Configuration
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var pages = this.landingPages;
            pages.forEach((/**
             * @param {?} element
             * @return {?}
             */
            function (element) {
                if (element == _this.selectedWelcomePage) {
                    /** @type {?} */
                    var index = pages.indexOf(element, 0);
                    pages.splice(index, 1);
                    _this.selectedWelcomePage = undefined;
                }
            }));
        };
        /**
         * @param {?} imageFormat
         * @param {?} location
         * @param {?=} index
         * @return {?}
         */
        LiveAppsSettingsLandingComponent.prototype.openDialog = /**
         * @param {?} imageFormat
         * @param {?} location
         * @param {?=} index
         * @return {?}
         */
        function (imageFormat, location, index) {
            var _this = this;
            /** @type {?} */
            var dialogRef = this.dialog.open(tcCoreLib.TibcoCloudUploadDialogComponent, {
                width: '500px',
                data: {
                    title: 'Upload New ' + location + ' image',
                    allowedExtensions: imageFormat,
                    location: location,
                    index: index
                }
            });
            dialogRef.componentInstance.fileevent.subscribe((/**
             * @param {?} $e
             * @return {?}
             */
            function ($e) {
                _this.uploadFile($e.file, location, index);
            }));
            dialogRef.afterClosed().subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
            }));
        };
        /**
         * @param {?} file
         * @param {?} location
         * @param {?=} index
         * @return {?}
         */
        LiveAppsSettingsLandingComponent.prototype.uploadFile = /**
         * @param {?} file
         * @param {?} location
         * @param {?=} index
         * @return {?}
         */
        function (file, location, index) {
            if (file) {
                switch (location) {
                    case 'background':
                        this.selectedWelcomePage.backgroundURL = file.name;
                        break;
                    case 'hightlight':
                        this.selectedWelcomePage.highlights[index].iconURL = file.name;
                        break;
                    default:
                        break;
                }
                this.documentsService.uploadDocument('orgFolders', this.uiAppId, this.sandboxId, file, location + '%2F' + file.name, '')
                    .subscribe((/**
                 * @param {?} val
                 * @return {?}
                 */
                function (val) {
                    console.log("*********** DONE");
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { console.log('error', error.errorMsg); })); //); this.errorMessage = 'Error uploading state icon: ' +
            }
        };
        LiveAppsSettingsLandingComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'tcla-live-apps-settings-landing',
                        template: "<div fxLayout=\"column\" fxFill>\n    <tc-tibco-cloud-widget-header style=\"height: 40px;\" [icon]=\"'tcs-capabilities'\"\n        [headerText]=\"'Landing Page Configuration'\"></tc-tibco-cloud-widget-header>\n    <div fxFlex style=\"padding: 20px; overflow: hidden\" fxLayout=\"column\">\n        <div style=\"overflow: auto;\">\n            <div fxLayout=\"column\" fxFlex>\n                <p>You can manage the configuration for the landing pages here.</p>\n                <br>\n                <mat-form-field>\n                    <mat-label>Welcome Page Configuration</mat-label>\n                    <mat-select [(value)]=\"selectedWelcomePage\">\n                        <mat-option *ngFor=\"let landingPage of landingPages\" [value]=\"landingPage\">\n                            {{landingPage.key}}-{{landingPage.description}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n\n                <div *ngIf=\"selectedWelcomePage\">\n                    <div fxLayoutGap=\"10px\">\n                        <mat-form-field fxFlex=\"50\">\n                            <input matInput placeholder=\"Title\" [(ngModel)]=\"selectedWelcomePage.title\">\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"50\">\n                            <input matInput placeholder=\"Subtitle\" [(ngModel)]=\"selectedWelcomePage.subtitle\">\n                        </mat-form-field>\n                    </div>\n                    <div fxLayoutGap=\"10px\">\n                        <div fxFlex=\"50\">\n                            <mat-form-field fxFlex>\n                                <input matInput placeholder=\"Background URL\" [(ngModel)]=\"selectedWelcomePage.backgroundURL\">\n                            </mat-form-field>\n                            <mat-icon (click)=\"openDialog('.jpeg,.png', 'background')\"\n                                class=\"tcs-icon tcs-icon-active tcs-document-edit-buttons tcs-document-upload-icon\"\n                                matTooltip=\"Upload Document\"\n                                matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\" svgIcon=\"tcs-document-upload\"></mat-icon>\n                        </div>\n                        <mat-form-field fxFlex=\"50\">\n                            <input matInput placeholder=\"Margin above highlight panel (px)\" type=\"number\" min=\"0\" [(ngModel)]=\"selectedWelcomePage.topMargin\">\n                        </mat-form-field>\n                    </div>\n                    <div fxLayoutGap=\"10px\">\n                        <mat-form-field fxFlex=\"50\">\n                            <mat-label>Used in roles</mat-label>\n                            <mat-select [(ngModel)]=\"selectedWelcomePage.roles\" [compareWith]=\"compareObjects\" multiple>\n                                <mat-option *ngFor=\"let role of allRoles\" [value]=\"role.id\">{{role.display}}</mat-option>\n                            </mat-select>\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"50\">\n                            <input matInput placeholder=\"Home route\" [(ngModel)]=\"selectedWelcomePage.homeRoute\">\n                        </mat-form-field>\n                    </div>\n                    <div>Hightlights</div>\n                    <div *ngFor=\"let highlight of selectedWelcomePage.highlights; let i = index\" fxLayoutGap=\"10px\">\n                        <div fxFlex=\"15\">\n                            <mat-form-field fxFlex=\"80\">\n                                <input matInput placeholder=\"Icon URL\" [(ngModel)]=\"highlight.iconURL\">\n                            </mat-form-field>\n                            <mat-icon fxFlex=\"20\" (click)=\"openDialog('.svg', 'hightlight', i)\"\n                                class=\"tcs-icon tcs-icon-active tcs-document-edit-buttons tcs-document-upload-icon\" matTooltip=\"Upload Document\"\n                                matTooltipPosition=\"left\" matTooltipShowDelay=\"1000\" svgIcon=\"tcs-document-upload\"></mat-icon>\n                        </div>\n                        <mat-form-field fxFlex=\"30\">\n                            <input matInput placeholder=\"Title\" [(ngModel)]=\"highlight.title\">\n                        </mat-form-field>\n                        <mat-form-field fxFlex=\"55\">\n                            <textarea matInput placeholder=\"Subtitle\" [(ngModel)]=\"highlight.content\" cdkAutosizeMinRows=\"3\" cdkAutosizeMaxRows=\"3\"></textarea>\n                        </mat-form-field>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div fxFlex class=\"tcs-filler-panel\"></div>\n        <div fxLayout=\"row\" fxLayoutGap=\"10px\" fxLayoutAlign=\"end end\" style=\"min-height: 50px\">\n            <button mat-raised-button color=\"secundary\" (click)=\"runDeleteConfiguration()\">Delete</button>\n            <button mat-raised-button color=\"secundary\" (click)=\"runNewConfiguration()\">New</button>\n            <button mat-raised-button color=\"primary\" (click)=\"runSaveFunction()\">Save</button>\n        </div>\n    </div>\n</div>",
                        styles: [".tcs-document-upload-icon{margin-top:10px}"]
                    }] }
        ];
        /** @nocollapse */
        LiveAppsSettingsLandingComponent.ctorParameters = function () { return [
            { type: router.ActivatedRoute },
            { type: tcCoreLib.TcGeneralLandingPageConfigService },
            { type: material.MatSnackBar },
            { type: material.MatDialog },
            { type: TcDocumentService }
        ]; };
        return LiveAppsSettingsLandingComponent;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var TcLiveappsLibModule = /** @class */ (function () {
        function TcLiveappsLibModule(matIconRegistry, domSanitizer, location) {
            this.matIconRegistry = matIconRegistry;
            this.domSanitizer = domSanitizer;
            this.location = location;
            this.matIconRegistry.addSvgIconLiteral('ic-no-cases-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48">\n' +
                '    <g fill="none" fill-rule="nonzero">\n' +
                '        <circle cx="24" cy="24" r="24" fill="#F4F4F4"/>\n' +
                '        <path fill="#B6B6B6" d="M30.936 13.835h7.553c.835 0 1.511.676 1.511 1.51V36.49A1.51 1.51 0 0 1 38.49 38H17.34a1.51 1.51 0 0 1-1.51-1.51V15.345c0-.834.676-1.51 1.51-1.51h7.553v-.023l-8.397-2.25a1.51 1.51 0 0 0-1.85 1.069L9.563 31.596a1.51 1.51 0 0 0 1.068 1.85l3.717.995a.755.755 0 1 1-.391 1.459l-3.717-.996a3.02 3.02 0 0 1-2.136-3.7l5.083-18.964a3.021 3.021 0 0 1 3.7-2.136l8.395 2.249a3.021 3.021 0 0 1 5.654 1.482zm-.404 1.51a3.02 3.02 0 0 1-5.234 0H18.85a1.51 1.51 0 0 0-1.51 1.51V34.98c0 .834.675 1.51 1.51 1.51h18.128a1.51 1.51 0 0 0 1.51-1.51V16.855a1.51 1.51 0 0 0-1.51-1.51h-6.447zm-2.617 0a1.51 1.51 0 1 0 0-3.02 1.51 1.51 0 0 0 0 3.02zm-7.554 4.531h13.596a.755.755 0 1 1 0 1.51H20.361a.755.755 0 1 1 0-1.51zm0 3.02h13.596a.755.755 0 1 1 0 1.511H20.361a.755.755 0 1 1 0-1.51zm0 2.962h6.043a.755.755 0 1 1 0 1.51h-6.043a.755.755 0 1 1 0-1.51z"/>\n' +
                '    </g>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('ic-no-tasks-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48">\n' +
                '    <g fill="none" fill-rule="nonzero">\n' +
                '        <circle cx="24" cy="24" r="24" fill="#F4F4F4"/>\n' +
                '        <path fill="#B6B6B6" d="M40 16.652v16.023a2.662 2.662 0 0 1-2.667 2.658H10.667A2.667 2.667 0 0 1 8 32.654l.123-16.007c0-.04.004-.078.01-.115V15a3 3 0 0 1 3-3H37a3 3 0 0 1 3 3v1.652zm-1.333 0H9.457v.005l-.124 16.008a1.331 1.331 0 0 0 1.323 1.339h26.677c.737 0 1.334-.595 1.334-1.33V16.653zM36.3 29.81c.226.225.366.537.366.88 0 .689-.56 1.246-1.25 1.246-.345 0-.658-.139-.884-.364L30.87 27.92a4.982 4.982 0 0 1-2.536.694c-2.762 0-5-2.231-5-4.984s2.238-4.985 5-4.985c2.76 0 5 2.232 5 4.985 0 .924-.257 1.786-.696 2.528L36.3 29.81zm-7.967-9.918a3.744 3.744 0 0 0-3.75 3.738 3.744 3.744 0 0 0 3.75 3.738 3.744 3.744 0 0 0 3.75-3.738 3.744 3.744 0 0 0-3.75-3.738zm-16.336 2.076h9.338a.665.665 0 0 1 0 1.33h-9.338a.665.665 0 0 1 0-1.33zm0 2.658h6.671a.665.665 0 0 1 0 1.33H12a.665.665 0 0 1 0-1.33z"/>\n' +
                '    </g>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('ic-no-docs-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48">\n' +
                '    <g fill="none" fill-rule="nonzero">\n' +
                '        <circle cx="24" cy="24" r="24" fill="#F4F4F4"/>\n' +
                '        <path fill="#B6B6B6" d="M36.315 12.568c.737-.01 1.342.555 1.352 1.261v.648c0 .354-.299.64-.667.64a.654.654 0 0 1-.667-.64v-.63l-14.335.185a.678.678 0 0 1-.527-.237l-1.722-2.041a1.356 1.356 0 0 0-1.036-.475H11v3.199c0 .353-.316.64-.685.64a.638.638 0 0 1-.648-.64v-3.199c0-.706.597-1.279 1.333-1.279h7.713c.804 0 1.566.349 2.072.949l1.519 1.8 14.011-.181zM10 15.61h28c1.105 0 2 .86 2 1.92v18.55c0 1.06-.895 1.919-2 1.919H10c-1.105 0-2-.86-2-1.919v-18.55c0-1.06.895-1.92 2-1.92zm0 1.28a.654.654 0 0 0-.667.64v18.55c0 .353.299.64.667.64h28a.654.654 0 0 0 .667-.64v-18.55a.654.654 0 0 0-.667-.64H10zm2.333 3.984a.654.654 0 0 1-.666-.64c0-.353.298-.64.666-.64h12c.369 0 .667.287.667.64 0 .353-.298.64-.667.64h-12zm0 2.718a.654.654 0 0 1-.666-.64c0-.353.298-.64.666-.64h10c.369 0 .667.287.667.64 0 .354-.298.64-.667.64h-10z"/>\n' +
                '    </g>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('ic-no-notes-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48">\n' +
                '    <g fill="none" fill-rule="nonzero">\n' +
                '        <circle cx="24" cy="24" r="24" fill="#F4F4F4"/>\n' +
                '        <path fill="#B6B6B6" d="M10.517 31.347v-3.918H9.079c-.596 0-1.079-.439-1.079-.98 0-.541.483-.98 1.079-.98h1.438v-4.571H9.079c-.596 0-1.079-.439-1.079-.98 0-.54.483-.98 1.079-.98h1.438v-3.983H9.079c-.596 0-1.079-.438-1.079-.98 0-.54.483-.98 1.079-.98h1.438v-2.383C10.517 9.17 11.805 8 13.393 8h21.573c1.589 0 2.877 1.17 2.877 2.612V35.43c0 1.442-1.288 2.612-2.877 2.612H13.393c-1.588 0-2.876-1.17-2.876-2.612v-2.123H9.079c-.596 0-1.079-.438-1.079-.98 0-.54.483-.98 1.079-.98h1.438zm1.438 0h.72c.595 0 1.078.439 1.078.98 0 .54-.483.98-1.079.98h-.719v2.122c0 .72.644 1.306 1.438 1.306h21.573c.795 0 1.438-.585 1.438-1.306V10.612c0-.721-.643-1.306-1.438-1.306H13.393c-.794 0-1.438.585-1.438 1.306v2.384h.72c.595 0 1.078.438 1.078.98 0 .54-.483.98-1.079.98h-.719v3.983h.72c.595 0 1.078.438 1.078.98 0 .54-.483.979-1.079.979h-.719v4.571h.72c.595 0 1.078.439 1.078.98 0 .541-.483.98-1.079.98h-.719v3.918zM16.277 40c-.398 0-.72-.292-.72-.653 0-.36.322-.653.72-.653h19.408c1.589 0 2.877-1.17 2.877-2.612V11.467c0-.36.322-.653.719-.653.397 0 .719.292.719.653v24.615C40 38.246 38.068 40 35.685 40H16.277zm3.871-26.595h6.518c.45 0 .815.331.815.74 0 .408-.365.74-.815.74h-6.518c-.45 0-.815-.332-.815-.74 0-.409.365-.74.815-.74zm.48 3.333h10.355c.715 0 1.294.331 1.294.74 0 .408-.58.74-1.294.74H20.628c-.715 0-1.295-.332-1.295-.74 0-.409.58-.74 1.295-.74zm0 3.334h10.355c.715 0 1.294.33 1.294.74 0 .408-.58.739-1.294.739H20.628c-.715 0-1.295-.331-1.295-.74 0-.408.58-.74 1.295-.74z"/>\n' +
                '    </g>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('ic-active-case-widget-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path  class="svg-content" fill="#727272" d="M11 2v20c-5.07-.5-9-4.79-9-10s3.93-9.5 9-10zm2.03 0v8.99H22c-.47-4.74-4.24-8.52-8.97-8.99zm0 11.01V22c4.74-.47 8.5-4.25 8.97-8.99h-8.97z"/></svg>'));
            this.matIconRegistry.addSvgIconLiteral('tcs-collaboration-reply', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24"><g class="svg-content" fill="none" fill-rule="evenodd"><g mask="url(#b)"><mask id="b" fill="#fff">       <path d="M4 14.027C4 11.298 6.192 9.07 8.876 9.07h7.357l-2.141-2.159a1.15 1.15 0 0 1 0-1.588 1.105 1.105 0 0 1 1.563 0l4.026 4.092a1.15 1.15 0 0 1 0 1.589l-4.026 4.092a1.07 1.07 0 0 1-.782.329 1.07 1.07 0 0 1-.781-.329 1.15 1.15 0 0 1 0-1.588l2.14-2.176H8.877c-1.461 0-2.667 1.209-2.667 2.711 0 1.485 1.189 2.711 2.667 2.711.612 0 1.104.5 1.104 1.123 0 .621-.492 1.122-1.104 1.122C6.192 18.983 4 16.772 4 14.027z"/></mask><path d="M0 0h24v24H0z" fill="black"/></g></g></svg>'));
            this.matIconRegistry.addSvgIconLiteral('tcs-collaboration-delete', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24">\n' +
                '  <path class="svg-content" d="M17.188 19.158c0 .54-.42.978-.938.978s-.938-.438-.938-.978v-8.8c0-.54.42-.977.938-.977.517 0 .938.438.938.978v8.799zm-3.75 0c0 .54-.42.978-.938.978s-.938-.438-.938-.978v-8.8c0-.54.42-.977.938-.977s.938.438.938.978v8.799zm-3.75 0c0 .54-.42.978-.938.978s-.938-.438-.938-.978v-8.8c0-.54.42-.977.938-.977s.938.438.938.978v8.799zM5.938 7.335v12.743c0 1.08.839 1.922 1.875 1.922h9.375c1.035 0 1.875-.842 1.875-1.922V7.335H5.938zm10.312-3.38h-7.5C8.75 2.875 9.59 2 10.625 2h3.75c1.036 0 1.875.875 1.875 1.955zm2.813 1.956H5.938C5.42 5.91 5 5.473 5 4.933s.42-.978.938-.978h13.125c.517 0 .937.438.937.978s-.42.978-.938.978"/>\n' +
                '  <path d="M0 0h24v24H0z" fill="none"/>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('tcs-application-edit', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"/><path d="M3.9 12c0-1.71 1.39-3.1 3.1-3.1h4V7H7c-2.76 0-5 2.24-5 5s2.24 5 5 5h4v-1.9H7c-1.71 0-3.1-1.39-3.1-3.1zM8 13h8v-2H8v2zm9-6h-4v1.9h4c1.71 0 3.1 1.39 3.1 3.1s-1.39 3.1-3.1 3.1h-4V17h4c2.76 0 5-2.24 5-5s-2.24-5-5-5z"/></svg>'));
            this.matIconRegistry.addSvgIconLiteral('tcs-collaboration-edit', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '  <path class="svg-content"\n' +
                '    d="M3 17.25V21h3.75L17.81 9.94l-3.75-3.75L3 17.25zM20.71 7.04c.39-.39.39-1.02 0-1.41l-2.34-2.34c-.39-.39-1.02-.39-1.41 0l-1.83 1.83 3.75 3.75 1.83-1.83z"/>\n' +
                '  <path d="M0 0h24v24H0z" fill="none"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-collaboration-send', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24">\n' +
                '  <path class="svg-content" fill="#727272" d="M1 12C1 5.925 5.924 1 12 1c6.075 0 11 4.924 11 11 0 6.075-4.924 11-11 11-6.075 0-11-4.924-11-11zm17.33.03L7.77 7.98v3.15l7.542.9-7.543.9v3.15l10.56-4.05z"/>\n' +
                '  <path fill="none" d="M0 0h24v24H0z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-collaboration-subscribed', this.domSanitizer.bypassSecurityTrustHtml('<svg width="100%" height="100%" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" preserveAspectRatio="xMidYMid meet" focusable="false">\n' +
                '  <defs>\n' +
                '    <rect id="path-1" x="0" y="0" width="355" height="950"></rect>\n' +
                '    <filter x="-3.7%" y="-1.2%" width="107.3%" height="102.7%" filterUnits="objectBoundingBox" id="filter-2">\n' +
                '      <feOffset dx="0" dy="2" in="SourceAlpha" result="shadowOffsetOuter1"></feOffset>\n' +
                '      <feGaussianBlur stdDeviation="4" in="shadowOffsetOuter1" result="shadowBlurOuter1"></feGaussianBlur>\n' +
                '      <feColorMatrix values="0 0 0 0 0   0 0 0 0 0   0 0 0 0 0  0 0 0 0.5 0" type="matrix" in="shadowBlurOuter1"></feColorMatrix>\n' +
                '    </filter>\n' +
                '    <path d="M7.02092272,9.64382773 L10.429694,12.9694583 C10.2893638,12.9895851 10.1458982,13 10,13 C8.34314575,13 7,11.6568542 7,10 C7,9.87948409 7.0071063,9.76062794 7.02092272,9.64382773 Z M12.9979012,9.88673222 C12.9388301,8.29534999 11.6402099,7.02078376 10.0392586,7.00025162 L12.9979019,9.88673289 Z M5.39239715,8.05502229 C5.13971651,8.65288074 5,9.3101241 5,10 C5,12.7614237 7.23857625,15 10,15 C10.7336604,15 11.4304146,14.8419859 12.0580864,14.5581338 L13.8229037,16.2799067 C12.6354037,16.7451582 11.3468341,17 10,17 C5.45454545,17 1.57272727,14.0973333 -7.10542736e-15,10 C0.642490676,8.32615705 1.67034243,6.85169041 2.97137252,5.69304704 L5.39239715,8.05502229 Z M8.2947756,5.29831698 L6.53943522,3.58578978 C7.62510828,3.20602952 8.78900189,3 10,3 C14.5454545,3 18.4272727,5.90266667 20,10 C19.4004851,11.5618806 18.4654382,12.9501651 17.2860026,14.0702457 L14.742345,11.5886286 C14.9094634,11.089535 15,10.5553405 15,10 C15,7.23857625 12.7614237,5 10,5 C9.40117224,5 8.82693188,5.10527121 8.2947756,5.29831698 Z M0.292893219,1.70710678 C-0.0976310729,1.31658249 -0.0976310729,0.683417511 0.292893219,0.292893219 C0.683417511,-0.0976310729 1.31658249,-0.0976310729 1.70710678,0.292893219 L19.7071068,18.2928932 C20.0976311,18.6834175 20.0976311,19.3165825 19.7071068,19.7071068 C19.3165825,20.0976311 18.6834175,20.0976311 18.2928932,19.7071068 L0.292893219,1.70710678 Z" id="path-3"></path>\n' +
                '  </defs>\n' +
                '  <g id="Pages/Desktop" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' +
                '    <g id="Reporting-Dashboard/Page/Dashboard-comments/1440-01" transform="translate(-1360.000000, -154.000000)">\n' +
                '      <rect fill="#F4F4F4" x="0" y="0" width="1440" height="1072"></rect>\n' +
                '      <g id="Group-5">\n' +
                '        <rect id="Mask" fill="#D8D8D8" opacity="0" x="1" y="0" width="1438" height="1072"></rect>\n' +
                '        <g id="modal/header/tabs">\n' +
                '          <g transform="translate(25.000000, 163.000000)"></g>\n' +
                '        </g>\n' +
                '      </g>\n' +
                '      <rect id="Rectangle-2" stroke="#232323" x="0.5" y="0.5" width="1439" height="1071"></rect>\n' +
                '      <g id="cmpt/comments" transform="translate(1085.000000, 122.000000)">\n' +
                '        <g id="Rectangle">\n' +
                '          <use fill="black" fill-opacity="1" filter="url(#filter-2)" xlink:href="#path-1"></use>\n' +
                '          <use fill="#FFFFFF" fill-rule="evenodd" xlink:href="#path-1"></use>\n' +
                '        </g>\n' +
                '        <g id="cmpt/card/little-card-04" transform="translate(0.000000, 16.000000)">\n' +
                '          <g id="Group">\n' +
                '            <g id="comments-header" transform="translate(16.000000, 0.000000)">\n' +
                '              <g id="toggle/off" transform="translate(259.000000, 16.000000)">\n' +
                '                <g id="icon/eye/off" transform="translate(2.000000, 2.000000)">\n' +
                '                  <mask id="mask-4" fill="white">\n' +
                '                    <use xlink:href="#path-3"></use>\n' +
                '                  </mask>\n' +
                '                  <use id="Mask" fill="#000000" fill-rule="nonzero" xlink:href="#path-3"></use>\n' +
                '                  <g id="color/gray/dark" mask="url(#mask-4)" class="svg-content" fill="#727272">\n' +
                '                    <g transform="translate(-2.000000, -2.000000)" id="blue">\n' +
                '                      <rect x="0" y="0" width="24" height="24"></rect>\n' +
                '                    </g>\n' +
                '                  </g>\n' +
                '                </g>\n' +
                '              </g>\n' +
                '            </g>\n' +
                '          </g>\n' +
                '        </g>\n' +
                '      </g>\n' +
                '    </g>\n' +
                '  </g>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-collaboration-unsubscribed', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '  <path d="M0 0h24v24H0z" fill="none"/>\n' +
                '  <path class="svg-content" fill="#727272"\n' +
                '        d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-collaboration-feed', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="22" height="18" viewBox="0 0 22 18">\n' +
                '    <path class="svg-content" fill="#727272" fill-rule="evenodd" d="M13.377 15c-1.268 2-2.06 3-2.377 3-.316 0-1.109-1-2.377-3H2.5A2.5 2.5 0 0 1 0 12.5v-10A2.5 2.5 0 0 1 2.5 0h17A2.5 2.5 0 0 1 22 2.5v10a2.5 2.5 0 0 1-2.5 2.5h-6.123zM4.5 3a.5.5 0 0 0 0 1h13a.5.5 0 1 0 0-1h-13zm-2 4a.5.5 0 1 0 0 1h17a.5.5 0 1 0 0-1h-17zm2 4a.5.5 0 1 0 0 1h13a.5.5 0 1 0 0-1h-13z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-document-library', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="16" height="16" viewBox="0 0 16 16">\n' +
                '    <path class="svg-content" fill="#727272" d="M7.683 2.481H14a2 2 0 0 1 2 2v7.852a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2V4.481c0-.247.045-.484.127-.703A1.996 1.996 0 0 1 0 3.074V3a2 2 0 0 1 2-2h3.43a2 2 0 0 1 1.44.612c.304.316.575.606.813.87zm-5.98 9.63a.37.37 0 1 0 0 .74h12.593a.37.37 0 1 0 0-.74H1.704z"/>\n' +
                '    <path d="M0 0h16v16H0z" fill="none"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-document-action', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '  <path class="svg-content" fill="#727272" fill-rule="evenodd" d="M10 4.91a2 2 0 1 1 4 0 2 2 0 0 1-4 0zm0 7a2 2 0 1 1 4 0 2 2 0 0 1-4 0zm0 7a2 2 0 1 1 4 0 2 2 0 0 1-4 0z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-document-upload', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '  <path class="svg-content" fill="#727272" d="M17.313 17.6a.932.932 0 0 1-.938-.927c0-.512.42-.927.938-.927 1.553 0 2.813-1.246 2.813-2.783a2.758 2.758 0 0 0-1.15-2.238 2.687 2.687 0 0 0-.453-.27 2.728 2.728 0 0 0-.175-.076l-.079-.029a2.834 2.834 0 0 0-.162-.054l-.11-.028c-.048-.012-.095-.024-.144-.034-.05-.009-.102-.016-.153-.023-.037-.005-.074-.012-.112-.015a2.937 2.937 0 0 0-.275-.014c-.03 0-.058.004-.087.005a5.234 5.234 0 0 0-.107-.468c-.01-.038-.025-.073-.036-.11a5.286 5.286 0 0 0-.113-.344c-.013-.034-.029-.066-.043-.1a4.76 4.76 0 0 0-.148-.337c-.012-.027-.028-.053-.04-.079A5.312 5.312 0 0 0 12 5.854 5.312 5.312 0 0 0 7.26 8.75c-.012.026-.027.052-.04.079-.054.11-.102.222-.148.337-.014.034-.03.066-.043.1a5.282 5.282 0 0 0-.113.344c-.011.037-.025.072-.036.11a5.404 5.404 0 0 0-.107.468c-.029-.001-.057-.005-.086-.005-.094 0-.185.005-.276.014-.038.003-.074.01-.111.015a3.802 3.802 0 0 0-.154.023c-.048.01-.096.022-.143.034-.037.01-.075.018-.11.028a2.947 2.947 0 0 0-.163.054l-.08.03a2.728 2.728 0 0 0-.44.22c-.065.04-.127.08-.188.125-.004.003-.009.006-.012.01a2.757 2.757 0 0 0-1.136 2.229c0 1.536 1.259 2.782 2.813 2.782.518 0 .937.415.937.927s-.42.927-.937.927C4.098 17.6 2 15.525 2 12.963 2 10.876 3.397 9.11 5.316 8.53A7.172 7.172 0 0 1 12 4a7.17 7.17 0 0 1 6.684 4.53c1.92.58 3.316 2.346 3.316 4.433 0 2.562-2.098 4.637-4.687 4.637m-8.822-2.166l2.812-3.09.003.002a.934.934 0 0 1 1.389 0l.002-.003 2.813 3.091-.003.003a.91.91 0 0 1 .243.617.936.936 0 1 1-1.632.618l-.002.003-1.178-1.294v4.692c0 .512-.42.927-.938.927a.933.933 0 0 1-.938-.927V15.38l-1.178 1.294-.002-.002a.937.937 0 0 1-1.632-.619c0-.238.094-.453.243-.617l-.002-.003"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-document-zip', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '    <path class="svg-content" fill="#B6B6B6" fill-rule="evenodd" d="M15 0H3C1.343 0 0 1.264 0 2.824v18.352C0 22.736 1.343 24 3 24h18c1.657 0 3-1.264 3-2.824V8.471L15 0zm0 8.47V1.413l7.62 7.059H15zM9.6 1.2H12v1.2H9.6V1.2zm0 2.4H12v1.2H9.6V3.6zm0 2.4H12v1.2H9.6V6zm0 2.4H12v1.2H9.6V8.4zm0 2.4H12V12H9.6v-1.2zm0 2.4H12V18H9.6v-4.8z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-document-image', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '    <path class="svg-content" fill="#B6B6B6" fill-rule="evenodd" d="M24 20.273V21.5a2.5 2.5 0 0 1-2.5 2.5h-3.046a.751.751 0 0 0-.096-.163l-4.063-5.283 4.651-4.154L24 20.273zm0-2.3l-4.415-5.13a.75.75 0 0 0-1.068-.071l-5.14 4.59-6.642-8.636a.75.75 0 0 0-1.181-.01L0 15.696V2.5A2.5 2.5 0 0 1 2.5 0h19A2.5 2.5 0 0 1 24 2.5v15.473zM16.592 24H2.5A2.5 2.5 0 0 1 0 21.5v-3.394L6.13 10.4 16.593 24zm-2.59-14.25a3 3 0 1 0 0-6 3 3 0 0 0 0 6zm0-1.5a1.5 1.5 0 1 1 0-3 1.5 1.5 0 0 1 0 3z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-document-doc', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '    <path class="svg-content" fill="#B6B6B6" fill-rule="evenodd" d="M15 0H3C1.343 0 0 1.264 0 2.824v18.352C0 22.736 1.343 24 3 24h18c1.657 0 3-1.264 3-2.824V8.471L15 0zM3.6 9.882h6.212c.429 0 .776.316.776.706 0 .39-.347.706-.776.706H3.6c-.429 0-.776-.316-.776-.706 0-.39.347-.706.776-.706zm13.306 9.883H3.565c-.41 0-.741-.316-.741-.706 0-.39.331-.706.74-.706h13.342c.41 0 .741.316.741.706 0 .39-.332.706-.741.706zm0-4.236H3.565c-.41 0-.741-.316-.741-.705 0-.39.331-.706.74-.706h13.342c.41 0 .741.316.741.706 0 .39-.332.705-.741.705zm-2.082-7.058V1.41l7.764 7.06h-7.764z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-summary-details-button', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24">\n' +
                '  <path fill="none" d="M0 0h24v24H0z"/>\n' +
                '  <path class="svg-content" fill="#0081cb" d="M17.24 12.703l-9.449 9.005c-.41.39-1.074.39-1.484 0a.969.969 0 0 1 0-1.415l8.725-8.313-8.683-8.273a.969.969 0 0 1 0-1.414c.41-.39 1.075-.39 1.484 0l9.407 8.963a1 1 0 0 1 0 1.447z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-favorites-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="16" height="16" viewBox="0 0 16 16">\n' +
                '  <path class="svg-content" fill="#727272"\n' +
                '        d="M8 12.708l-4.225 2.221a.5.5 0 0 1-.726-.527l.807-4.705L.438 6.365a.5.5 0 0 1 .277-.853l4.724-.686L7.552.546a.5.5 0 0 1 .896 0l2.113 4.28 4.724.686a.5.5 0 0 1 .277.853l-3.418 3.332.807 4.705a.5.5 0 0 1-.726.527L8 12.708z"/>\n' +
                '  <path d="M0 0h16v16H0z" fill="none"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-config-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24">\n' +
                '  <path class="svg-content" fill="#727272" d="M21.91 13.12a9.346 9.346 0 0 0 0-1.1 9.508 9.508 0 0 0 0-1.12 32.759 32.759 0 0 0-2.213-.307 7.42 7.42 0 0 0-1.306-3.087c.454-.578.998-1.264 1.342-1.805a9.436 9.436 0 0 0-.743-.849 9.453 9.453 0 0 0-.852-.74c-.49.343-1.18.867-1.814 1.336a7.49 7.49 0 0 0-3.028-1.246c0-.74-.181-1.588-.308-2.202h-2.176a32.34 32.34 0 0 0-.309 2.202 7.488 7.488 0 0 0-3.1 1.354c-.58-.45-1.27-.992-1.814-1.336-.298.23-.583.477-.852.74-.254.253-.49.524-.762.85l1.36 1.804a7.4 7.4 0 0 0-1.106 2.961c-.743 0-1.596.18-2.212.307a9.274 9.274 0 0 0 0 1.12 9.094 9.094 0 0 0 0 1.1c.616.109 1.487.235 2.212.307a7.402 7.402 0 0 0 1.251 3.015L4.12 18.23c.272.324.508.595.762.848s.526.487.852.758l1.814-1.354a7.471 7.471 0 0 0 3.028 1.246c0 .74.181 1.589.308 2.202a9.107 9.107 0 0 0 2.249 0c.109-.613.235-1.48.308-2.202a7.47 7.47 0 0 0 3.028-1.3l1.814 1.354c.326-.27.598-.505.852-.758.265-.268.513-.551.743-.849-.344-.487-.87-1.173-1.341-1.805a7.42 7.42 0 0 0 1.25-3.015c.744 0 1.596-.18 2.213-.307m-10.064 3.304a4.35 4.35 0 0 1-1.705-.343 4.451 4.451 0 0 1-2.339-2.31 4.477 4.477 0 0 1 0-3.413 4.451 4.451 0 0 1 2.34-2.31 4.534 4.534 0 0 1 3.427 0 4.451 4.451 0 0 1 2.32 2.31 4.477 4.477 0 0 1 0 3.412 4.451 4.451 0 0 1-2.32 2.311 4.387 4.387 0 0 1-1.723.343"/>\n' +
                '  <path fill="none" d="M0 0h24v24H0z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-case-start-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24">\n' +
                '    <path class="svg-content" fill="#0081CB" id="a" d="M12 4c-4.416 0-8 3.584-8 8s3.584 8 8 8 8-3.584 8-8-3.584-8-8-8m3.2 8.801h-2.4V15.2a.8.8 0 1 1-1.6 0v-2.399H8.8a.8.8 0 0 1 0-1.601h2.4V8.801a.8.8 0 1 1 1.6 0V11.2h2.4a.8.8 0 0 1 0 1.601"/>\n' +
                '    <path d="M0 0h24v24H0z" fill="none"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-refresh-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24">\n' +
                '    <path class="svg-content" fill="#727272" d="M20.157 9.468H16.5a.843.843 0 1 1 0-1.686h1.467A7.295 7.295 0 0 0 12 4.688 7.312 7.312 0 1 0 19.313 12 .843.843 0 1 1 21 12a9 9 0 0 1-9 9 9 9 0 0 1-9-9 9 9 0 0 1 9-9 8.98 8.98 0 0 1 7.313 3.766V5.25a.843.843 0 1 1 1.687 0v3.375a.843.843 0 0 1-.843.843"/>\n' +
                '    <path fill="none" d="M0 0h24v24H0z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-recent-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="16" height="16" viewBox="0 0 16 16">\n' +
                '  <path class="svg-content" fill="#727272" id="a" d="M8.727 8.727H5.818a.727.727 0 1 1 0-1.454H8V5.09a.727.727 0 1 1 1.455 0V8a.727.727 0 0 1-.728.727zm-.242 5.755a6.46 6.46 0 0 0 2.23-.575l.753 1.304c-.912.44-1.92.711-2.983.775v-1.504zm-1.455-.054v1.514A8.001 8.001 0 0 1 8 0a7.982 7.982 0 0 1 6.5 3.347V2A.75.75 0 1 1 16 2v3a.75.75 0 0 1-.75.75H12a.75.75 0 1 1 0-1.5h1.304A6.484 6.484 0 0 0 8 1.5a6.5 6.5 0 0 0-.97 12.928zm4.93-1.273a6.536 6.536 0 0 0 1.513-1.647l1.3.75a8.043 8.043 0 0 1-2.057 2.205l-.756-1.308zm2.158-2.954A6.488 6.488 0 0 0 14.5 8 .75.75 0 1 1 16 8c0 1.046-.2 2.045-.566 2.96l-1.316-.76z"/>\n' +
                '  <path fill="none" d="M0 0h16v16H0z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-clear-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '  <path class="svg-content" fill="#727272"\n' +
                '    d="M19.81 14.99l1.19-.92-1.43-1.43-1.19.92 1.43 1.43zm-.45-4.72L21 9l-9-7-2.91 2.27 7.87 7.88 2.4-1.88zM3.27 1L2 2.27l4.22 4.22L3 9l1.63 1.27L12 16l2.1-1.63 1.43 1.43L12 18.54l-7.37-5.73L3 14.07l9 7 4.95-3.85L20.73 21 22 19.73 3.27 1z"/>\n' +
                '    <path d="M0 0h24v24H0z" fill="none"/>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('tcs-customization-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24">\n' +
                '  <path class="svg-content" fill="#727272" d="M21.91 13.12a9.346 9.346 0 0 0 0-1.1 9.508 9.508 0 0 0 0-1.12 32.759 32.759 0 0 0-2.213-.307 7.42 7.42 0 0 0-1.306-3.087c.454-.578.998-1.264 1.342-1.805a9.436 9.436 0 0 0-.743-.849 9.453 9.453 0 0 0-.852-.74c-.49.343-1.18.867-1.814 1.336a7.49 7.49 0 0 0-3.028-1.246c0-.74-.181-1.588-.308-2.202h-2.176a32.34 32.34 0 0 0-.309 2.202 7.488 7.488 0 0 0-3.1 1.354c-.58-.45-1.27-.992-1.814-1.336-.298.23-.583.477-.852.74-.254.253-.49.524-.762.85l1.36 1.804a7.4 7.4 0 0 0-1.106 2.961c-.743 0-1.596.18-2.212.307a9.274 9.274 0 0 0 0 1.12 9.094 9.094 0 0 0 0 1.1c.616.109 1.487.235 2.212.307a7.402 7.402 0 0 0 1.251 3.015L4.12 18.23c.272.324.508.595.762.848s.526.487.852.758l1.814-1.354a7.471 7.471 0 0 0 3.028 1.246c0 .74.181 1.589.308 2.202a9.107 9.107 0 0 0 2.249 0c.109-.613.235-1.48.308-2.202a7.47 7.47 0 0 0 3.028-1.3l1.814 1.354c.326-.27.598-.505.852-.758.265-.268.513-.551.743-.849-.344-.487-.87-1.173-1.341-1.805a7.42 7.42 0 0 0 1.25-3.015c.744 0 1.596-.18 2.213-.307m-10.064 3.304a4.35 4.35 0 0 1-1.705-.343 4.451 4.451 0 0 1-2.339-2.31 4.477 4.477 0 0 1 0-3.413 4.451 4.451 0 0 1 2.34-2.31 4.534 4.534 0 0 1 3.427 0 4.451 4.451 0 0 1 2.32 2.31 4.477 4.477 0 0 1 0 3.412 4.451 4.451 0 0 1-2.32 2.311 4.387 4.387 0 0 1-1.723.343"/>\n' +
                '  <path fill="none" d="M0 0h24v24H0z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-caselist-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="14" height="14" viewBox="0 0 48 48">\n' +
                '  <path class="svg-content" fill="#727272" fill-rule="evenodd" d="M42 42H6c-1.103 0-2-.898-2-2V26.61c4.43 2.623 10.208 3.96 15.729 4.422v1.504c0 1.326.948 2.4 2.118 2.4h4.764c1.17 0 2.118-1.074 2.118-2.4V31.04c6.16-.503 11.505-2.008 15.271-4.264v13.223c0 1.103-.897 2-2 2zM6 15.995h36c1.103 0 2 .898 2 2v3.583c-2.798 2.727-8.447 4.664-15.271 5.268v-1.511c0-1.326-.948-2.4-2.117-2.4h-4.765c-1.17 0-2.118 1.074-2.118 2.4v1.51c-6.651-.6-12.41-2.518-15.729-5.348v-3.501c0-1.103.897-2 2-2zm10.655-8.89c0-.063.023-.098.016-.106l14.944-.011s.04.033.04.117v4.89h-15v-4.89zM42 11.996h-6.345v-4.89C35.655 4.842 33.861 3 31.657 3H16.653c-2.204 0-3.998 1.842-3.998 4.106v4.89H6c-3.308 0-6 2.692-6 6V40c0 3.31 2.692 6 6 6h36c3.309 0 6-2.69 6-6V17.997c0-3.31-2.691-6.001-6-6.001z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-search-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24">\n' +
                '  <path class="svg-content" fill="#727272" d="M21.451 18.8a1.874 1.874 0 1 1-2.652 2.651l-5.495-5.495A7.455 7.455 0 0 1 9.5 17 7.5 7.5 0 1 1 17 9.5c0 1.39-.385 2.688-1.044 3.804l5.495 5.496zM9.5 3.876a5.625 5.625 0 1 0 0 11.25 5.625 5.625 0 0 0 0-11.25z"/>\n' +
                '  <path fill="none" d="M0 0h24v24H0z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-case-data-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 48 48">\n' +
                '    <path class="svg-content" fill="#727272" fill-rule="evenodd" d="M42 42H6c-1.103 0-2-.898-2-2V26.61c4.43 2.623 10.208 3.96 15.729 4.422v1.504c0 1.326.948 2.4 2.118 2.4h4.764c1.17 0 2.118-1.074 2.118-2.4V31.04c6.16-.503 11.505-2.008 15.271-4.264v13.223c0 1.103-.897 2-2 2zM6 15.995h36c1.103 0 2 .898 2 2v3.583c-2.798 2.727-8.447 4.664-15.271 5.268v-1.511c0-1.326-.948-2.4-2.117-2.4h-4.765c-1.17 0-2.118 1.074-2.118 2.4v1.51c-6.651-.6-12.41-2.518-15.729-5.348v-3.501c0-1.103.897-2 2-2zm10.655-8.89c0-.063.023-.098.016-.106l14.944-.011s.04.033.04.117v4.89h-15v-4.89zM42 11.996h-6.345v-4.89C35.655 4.842 33.861 3 31.657 3H16.653c-2.204 0-3.998 1.842-3.998 4.106v4.89H6c-3.308 0-6 2.692-6 6V40c0 3.31 2.692 6 6 6h36c3.309 0 6-2.69 6-6V17.997c0-3.31-2.691-6.001-6-6.001z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-close-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" width="24" height="24" viewBox="0 0 24 24">\n' +
                '  <path class="svg-content" fill="#727272" d="M21.483 5.012L14.495 12l6.988 6.987a1.766 1.766 0 0 1-2.495 2.495L12 14.495l-6.987 6.987a1.766 1.766 0 0 1-2.495-2.495L9.504 12 2.517 5.012a1.765 1.765 0 0 1 2.495-2.495L12 9.504l6.987-6.987a1.765 1.765 0 0 1 2.495 2.495"/>\n' +
                '  <path fill="none" d="M0 0h24v24H0z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-case-state-audit-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '  <path fill="none" d="M0 0h24v24H0V0zm0 0h24v24H0V0z"/>\n' +
                '  <path class="svg-content" fill="#727272" d="M16.59 7.58L10 14.17l-3.59-3.58L5 12l5 5 8-8zM12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm0 18c-4.42 0-8-3.58-8-8s3.58-8 8-8 8 3.58 8 8-3.58 8-8 8z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-milestone-completed', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 36 36">\n' +
                '    <g fill="none" fill-rule="evenodd">\n' +
                '        <circle cx="18" cy="18" r="18" fill="#062E79"/>\n' +
                '        <path fill="#FFF" d="M22.716 16.63l-5.16 5.09a.97.97 0 0 1-.685.28.972.972 0 0 1-.685-.28l-2.903-2.863a.943.943 0 0 1-.283-.675c0-.527.434-.954.967-.954.268 0 .51.106.685.28l2.22 2.188 4.476-4.416a.973.973 0 0 1 .685-.28c.533 0 .967.428.967.954a.945.945 0 0 1-.284.676z"/>\n' +
                '    </g>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-milestone-completed-terminal', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 36 36">\n' +
                '    <g fill="none" fill-rule="evenodd">\n' +
                '        <circle cx="18" cy="18" r="16" fill="#04BE5B" stroke="#04BE5B" stroke-width="4"/>\n' +
                '        <path fill="#FFF" d="M17.11 24.441c-.35.346-.833.559-1.368.559a1.943 1.943 0 0 1-1.37-.559l-5.805-5.728A1.886 1.886 0 0 1 8 17.363c0-1.054.867-1.908 1.935-1.908.534 0 1.018.214 1.37.56l4.437 4.377 8.954-8.832c.35-.345.835-.56 1.369-.56 1.068 0 1.935.855 1.935 1.909a1.89 1.89 0 0 1-.568 1.35L17.111 24.441z"/>\n' +
                '    </g>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-milestone-inprogress', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 36 36">\n' +
                '    <circle cx="18" cy="18" r="17" fill="none" fill-rule="evenodd" stroke="#0081CB" stroke-width="2"/>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('tcs-milestone-inprogress-terminal', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 36 36">\n' +
                '    <circle cx="18" cy="18" r="17" fill="none" fill-rule="evenodd" stroke="#0081CB" stroke-width="2"/>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('tcs-milestone-pending', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 36 36">\n' +
                '    <circle cx="18" cy="18" r="17" fill="#FFF" fill-rule="evenodd" stroke="#DEDEDE" stroke-width="2"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-milestone-pending-terminal', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="36" height="36" viewBox="0 0 36 36">\n' +
                '    <circle cx="18" cy="18" r="17" fill="#FFF" fill-rule="evenodd" stroke="#DEDEDE" stroke-width="2"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-mini-state-completed', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '    <g fill="none" fill-rule="evenodd">\n' +
                '        <circle cx="12" cy="12" r="12" fill="#062E79"/>\n' +
                '        <path fill="#FFF" d="M15.144 11.086l-3.44 3.394a.648.648 0 0 1-.913 0l-1.935-1.909a.629.629 0 0 1-.19-.45.648.648 0 1 1 1.101-.45l1.48 1.46 2.985-2.944a.649.649 0 0 1 .456-.187c.356 0 .645.285.645.636a.63.63 0 0 1-.189.45z"/>\n' +
                '    </g>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-mini-state-current', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '    <circle cx="12" cy="12" r="11" fill="white" fill-rule="evenodd" stroke="#0081CB" stroke-width="2"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-mini-state-terminal-completed', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '    <g fill="none" fill-rule="evenodd">\n' +
                '        <circle cx="12" cy="12" r="10" fill="#04BE5B" stroke="#04BE5B" stroke-width="4"/>\n' +
                '        <path fill="#FFF" d="M11.407 16.294c-.233.23-.556.373-.912.373-.357 0-.68-.142-.913-.373l-3.87-3.818a1.257 1.257 0 0 1-.379-.9c0-.703.578-1.273 1.29-1.273.357 0 .68.143.913.374l2.959 2.918 5.969-5.888c.233-.23.556-.374.913-.374.712 0 1.29.57 1.29 1.273 0 .352-.145.67-.379.9l-6.881 6.788z"/>\n' +
                '    </g>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-capabilities', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '  <path class="svg-content" fill="#727272" d="M20.063 19.5H19c-.815 0-1.5-.6-1.5-1.375V12.5h-2.566A7.501 7.501 0 0 1 0 11.5a7.5 7.5 0 0 1 15 0h2.5V5.875c0-.775.685-1.375 1.5-1.375h1.063a2 2 0 1 1 0 1H19c-.29 0-.5.184-.5.375V11.5h1.563a2 2 0 1 1 0 1H18.5v5.625c0 .191.21.375.5.375h1.063a2 2 0 1 1 0 1zm-8.67-10.717L9.5 10.685 7.65 10.35 7.319 8.5 9.214 6.6c-.426-.426-1.033-.62-1.483-.597-.452.023-1.418.278-2.166 1.073-.725.765-1.486 2.191-.812 3.775.08.19.171.442-.097.71-.133.132-.256.385-1.993 2.022-1.737 1.638.31 3.417 1.88 1.749 1.569-1.669 1.746-1.845 1.897-1.992.285-.279.54-.185.711-.098 1.194.618 2.894.081 3.776-.801.882-.883 1.043-1.735 1.07-2.17.027-.434-.124-1.007-.604-1.487z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-home', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M10 20v-6h4v6h5v-8h3L12 3 2 12h3v8z" fill="#727272"  class="svg-content"/><path d="M0 0h24v24H0z" fill="none"/></svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-starters-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="45" height="45" viewBox="0 0 45 45">\n' +
                '    <g fill="#0081CB" fill-rule="evenodd">\n' +
                '        <path d="M22.5 0C10.074 0 0 10.074 0 22.5S10.074 45 22.5 45 45 34.926 45 22.5 34.926 0 22.5 0zm0 1.534c11.56 0 20.966 9.405 20.966 20.966 0 11.56-9.405 20.966-20.966 20.966-11.56 0-20.966-9.405-20.966-20.966 0-11.56 9.405-20.966 20.966-20.966z"></path>\n' +
                '        <path fill-rule="nonzero" d="M28.274 23.103l-3.013 5.18h-6.025l-3.013-5.18 3.013-5.179h6.025l3.013 5.18zm-8.265 3.851h4.48l2.239-3.85-2.24-3.85h-4.48l-2.24 3.85 2.24 3.85zm-4.654-2.652l2.998 5.155-.808 1.622h.572v1.328h-1.405v-1.024l-.653-.32.777-1.557-2.254-3.875h-4.48l-1.1 1.891.135.315-1.227.53-.556-1.291.477-.198 1.498-2.576h6.026zm12.295-9.081l-.24-1.306 1.352-.228.225 1.31-1.337.224zm-11.074-2.685l-.795 1.142-1.104-.753.8-1.148 1.099.76zm6.65-3.347l-.184 1.316-1.387-.189.18-1.316 1.39.189zm-7.845 5.37l-.329 1.354-1.301-.311.328-1.353 1.302.31zm5.296-4.195l-1.36.314-.31-1.293 1.373-.317.297 1.296zm-2.252.7l-1.156.787-.758-1.095 1.156-.788.758 1.095zm9.444 1.26l-1.033.845-.895-1.057 1.018-.863.91 1.074zm-2.026-1.995l-.658 1.159-1.218-.674.644-1.164 1.232.68zm-12.13 6.937l-.026-.213.016-.002-.001-.015.216-.01 1.098-.13.08.66-.663.078.664-.07.095.717-.759.052-.67.03-.05-1.097zm18.019-3.383l-.205 1.313-1.382-.204.189-1.315 1.398.206zm5.932 8.467l-.222-1.37 1.32-.218.225 1.385-1.323.203zm-.91-3.067l-.318-.585 1.178-.631.355.655.306.591-1.191.607-.33-.637zm-2.297-4.316l-.6 1.189-1.257-.629.605-1.185 1.252.625zm-21.746 3.657l-1.27.58-.567-1.203 1.283-.587.554 1.21zm24-1.778l-.946.94-.994-.97.93-.956 1.01.986zM30.26 30.953l1.387-.229.22 1.31-1.387.23-.22-1.31zm-8.08 1.455v-1.33h1.406v1.33h-1.406zm2.734 0v-1.33h1.405v1.33h-1.405zm8.443-2.369l.588-.316.637 1.17-.66.352-.596.304-.611-1.182.642-.328zm4.319-6.562l1.325.187-.209 1.388-1.322-.204.206-1.371zm-.758 2.87l.22-.433 1.194.6-.63 1.243-.894-.444-.661.374-1.486-2.588h-4.477l-2.26 3.885.844 1.816-.608.279h.893v1.328h-1.406v-1.094l-.095.044-1.134-2.441 2.993-5.145h6.028l1.48 2.577zm-2.054 2.71l.978-.988.962.925-.994 1.001-.946-.939zM8.339 24.12l.024 1.387-1.338.031L7 24.135l1.339-.015zm.46 5.55l.946-.939.994.978-.939.948-1.002-.986zm1.762-9.838l-.96 1.019-.977-.908.96-1.018.977.907zm8.884 12.576v-1.33h1.406v1.33h-1.406zM9.028 21.764l-.5 1.293-1.254-.467.508-1.311 1.246.485zm2.088 9.772l.522-1.224 1.29.534-.508 1.229-1.304-.54zm2.857.862l.015-1.328 1.405.016-.015 1.329-1.405-.017z"></path>\n' +
                '    </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('tcs-spotfire-icon', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8"?>\n' +
                '<svg width="48px" height="48px" viewBox="0 0 48 48" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 51.1 (57501) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>EBCCA156-217F-4BF2-B9AE-89A324E485CB</title>\n' +
                '    <desc>Created with sketchtool.</desc>\n' +
                '    <defs></defs>\n' +
                '    <g id="Icons" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' +
                '        <g id="UI-Icons" transform="translate(-1159.000000, -384.000000)" fill="#062E79" fill-rule="nonzero">\n' +
                '            <g id="ic-spotfire" transform="translate(1159.000000, 384.000000)">\n' +
                '                <path d="M31.655908,37.8577116 C31.6187835,37.9325874 31.5686986,38.0002953 31.5079727,38.0576995 C30.0186764,39.0509358 28.3403185,39.725664 26.5781297,40.0395797 C25.9600776,40.1670374 25.331823,40.2386547 24.700951,40.2535668 C24.4690525,40.2655661 24.2351548,40.2735656 23.9992581,40.2735656 C23.7633613,40.2735656 23.5294636,40.2735656 23.2975651,40.2535668 C22.6666932,40.2386547 22.0384385,40.1670374 21.4203864,40.0395797 C19.6581976,39.725664 17.9798398,39.0509358 16.4905434,38.0576995 C16.4298491,38.0002673 16.3797686,37.9325654 16.3426081,37.8577116 L16.3426081,37.8757105 C16.3426081,38.0756985 16.3705959,38.5056725 16.4025819,39.1576331 C16.4112843,40.1848682 16.771857,41.1780523 17.4241349,41.971463 C17.7213044,42.3282281 18.0978654,42.6104129 18.5236538,42.7954132 L18.9394719,42.9814019 C19.1273897,43.0493978 19.3159738,43.1160604 19.5052244,43.1813898 C20.7873656,43.5886091 22.1242824,43.797012 23.4694898,43.7993525 L24.5370228,43.7993525 C25.8822302,43.797012 27.2191471,43.5886091 28.5012883,43.1813898 C28.6905388,43.1213935 28.879123,43.0547308 29.0670407,42.9814019 L29.4828588,42.7954132 C29.9086472,42.6104129 30.2852082,42.3282281 30.5823777,41.971463 C31.2346556,41.1780523 31.5952283,40.1848682 31.6039308,39.1576331 C31.6359168,38.5036726 31.6599063,38.0656991 31.6619054,37.8757105 L31.6619054,37.8577116 L31.655908,37.8577116 Z M28.0135017,45.1232725 C26.8981784,45.4558873 25.7408294,45.6262885 24.5770053,45.6292419 L23.4215108,45.6292419 C22.2576867,45.6262885 21.1003377,45.4558873 19.9850144,45.1232725 C19.9196684,45.1020458 19.8582213,45.0702975 19.803094,45.0292781 L19.803094,45.047277 L19.8250844,45.0912744 C20.3479711,46.870118 22.0111732,48.0669219 23.8633175,47.9970987 L24.1851767,47.9970987 C26.0235414,48.0511974 27.6666746,46.857011 28.1834273,45.0912744 L28.2054177,45.047277 L28.2054177,45.0292781 C28.1472452,45.0712842 28.082345,45.1030703 28.0135017,45.1232725 Z M39.440502,11.5493019 C38.2118114,8.22698136 35.6152604,5.59303051 32.3116211,4.31773901 C31.6784657,4.02511059 31.0242466,3.78043801 30.3544774,3.58578325 C28.4207231,3.04109155 26.4238709,2.7526457 24.4150761,2.72783511 L23.5854391,2.72783511 C21.5766444,2.7526457 19.5797922,3.04109155 17.6460378,3.58578325 C16.9762662,3.78043086 16.3220467,4.02510364 15.6888941,4.31773901 C12.3843501,5.59233242 9.78692567,8.22643056 8.55801413,11.5493019 C8.09229392,12.9677014 7.87914956,14.45689 7.92828965,15.9490359 C8.05342939,19.1784343 9.17030681,22.2908091 11.1268902,24.8624971 C11.4287581,25.3064703 11.7706085,25.758443 12.1724327,26.2444136 C12.5322753,26.6783874 12.8881196,27.0803631 13.2659542,27.5043375 L13.4658668,27.7383233 C13.629795,27.9383112 13.9556525,28.3202881 14.2955038,28.7982592 C14.8648102,29.6467696 15.2940987,30.5812968 15.5669475,31.5660919 C15.6332301,31.8081577 15.6852964,32.0538963 15.7228793,32.3020475 L15.7228793,33.4399787 C15.7228793,33.4519779 15.7228793,33.4739766 15.7228793,33.5039748 L15.7228793,33.5979691 C15.8655353,35.4784435 17.2354149,37.0372691 19.0814098,37.4197381 C19.3144881,37.5003865 19.5521331,37.5671659 19.7930984,37.619726 L19.8710643,37.6377249 C20.2309068,37.7437185 20.760675,37.8537119 20.760675,37.8537119 L20.7366855,37.8317132 L20.7166943,37.8137143 L20.7166943,37.801715 L20.6947039,37.801715 C20.5988668,37.6190578 20.526972,37.4248013 20.4807975,37.22375 L20.4807975,37.1977515 C20.456808,37.1097568 20.4368167,37.0277618 20.4208237,36.9617658 C20.3722617,36.7305623 20.3362249,36.4969023 20.312871,36.2618081 C20.2688902,35.8618323 20.2429016,35.40386 20.232906,34.8318945 C20.232906,34.6099079 20.232906,34.3739222 20.232906,34.1179377 L20.232906,32.9060109 C20.2556365,32.6124684 20.2556365,32.3176068 20.232906,32.0240643 C20.1500645,30.2470055 19.5588879,28.5311141 18.5296512,27.0803631 C18.3937107,26.8803752 18.30375,26.7623823 18.2917553,26.7463833 L18.2777614,26.7283844 C17.8119652,26.1124216 17.3181813,25.560455 16.8403903,25.0264872 C16.1838726,24.3220373 15.5760655,23.5736849 15.0211863,22.7866226 C13.4884627,20.8088263 12.6019693,18.4067104 12.4822971,15.9070385 C12.4212405,14.5715773 12.6681723,13.2399693 13.2039814,12.0152737 C14.1476214,10.1238325 15.7673659,8.65623324 17.7419958,7.90352226 L17.8019696,7.87552395 C18.2197025,7.68419657 18.6514373,7.52507644 19.0934045,7.39955272 C22.3062638,6.53033188 25.6922524,6.53033188 28.9051116,7.39955272 C29.3472483,7.5270227 29.7789869,7.68814998 30.1965465,7.88152359 L30.2585194,7.9095219 C32.2313608,8.66119746 33.8501851,10.1264683 34.7945348,12.0152737 C35.3323297,13.2360794 35.5826578,14.5641401 35.5262146,15.8970391 C35.4065424,18.396711 34.520049,20.7988269 32.9873255,22.7766232 C32.4324462,23.5636855 31.8246391,24.3120379 31.1681214,25.0164878 C30.6903305,25.5524554 30.1985457,26.1024222 29.7307503,26.718385 L29.7167565,26.7363839 C29.7047617,26.7523829 29.6148011,26.8683759 29.4788605,27.0703637 C28.4496238,28.5211147 27.8584473,30.2370061 27.7756058,32.0140649 C27.7528753,32.3076074 27.7528753,32.602469 27.7756058,32.8960115 L27.7756058,34.1079383 C27.7756058,34.3639228 27.7756058,34.5999086 27.7756058,34.8218951 C27.7656102,35.3938606 27.7396215,35.8598324 27.6956408,36.2518087 C27.6723023,36.4869049 27.6362653,36.7205657 27.587688,36.9517664 C27.571695,37.0177624 27.5517037,37.0997574 27.5277142,37.1877521 L27.5277142,37.2137506 C27.4815398,37.4148019 27.4096449,37.6090584 27.3138078,37.7917156 L27.2918175,37.7917156 L27.2918175,37.8037149 L27.2718262,37.8217138 L27.2478367,37.8437125 C27.2478367,37.8437125 27.7776049,37.7337191 28.1374475,37.6277255 L28.2154133,37.6097266 C28.4563787,37.5571665 28.6940236,37.4903872 28.927102,37.4097387 C30.7595312,37.0182197 32.1158115,35.4669029 32.2596439,33.5979691 L32.2596439,33.5139742 C32.2596439,33.483976 32.2596439,33.4639772 32.2596439,33.4499781 L32.2596439,32.3120468 C32.2972268,32.0638957 32.349293,31.8181571 32.4155756,31.5760913 C32.6884244,30.5912962 33.1177129,29.6567689 33.6870193,28.8082586 C34.0248715,28.3302875 34.3527281,27.9383112 34.5166563,27.7483227 L34.7165689,27.5143369 C35.0944036,27.0903625 35.4502479,26.6883868 35.8100904,26.254413 C36.2099155,25.7684424 36.553765,25.3164697 36.855633,24.8724965 C38.8122163,22.3008085 39.9290937,19.1884337 40.0542335,15.9590353 C40.1096642,14.4644973 39.901923,12.971852 39.440502,11.5493019 Z M5.01956232,29.4342208 L4.81964979,29.5202156 C2.99649784,30.24534 1.85508545,32.0706689 2.00088309,34.0279431 C1.99079072,34.2320879 2.0220709,34.436166 2.09284286,34.6279069 C2.17769818,34.5000153 2.28465758,34.3882751 2.40870466,34.2979268 C3.71962504,33.6820391 5.08489381,33.1892859 6.4869203,32.8260158 L6.56288706,32.7940177 C8.63845686,31.774723 9.76597305,29.4835152 9.30768612,27.2163549 C8.01974086,28.202048 6.56814236,28.9528311 5.01956232,29.4342208 Z M2.92247986,5.61166079 C4.42182385,6.21162453 6.9687095,6.77759032 7.33255031,7.411552 C7.76708764,5.27599244 6.62333345,3.13284827 4.6077425,2.30586062 L4.40782997,2.21986582 C2.85268539,1.74008838 1.39479082,0.988522387 0.101714043,0 C-0.357566659,2.26781936 0.770104541,4.56016384 2.8465131,5.57966273 L2.92247986,5.61166079 Z M43.1908611,29.5202156 L42.9909486,29.4342208 C41.4397007,28.9543066 39.9853373,28.2041706 38.6948282,27.2183547 C38.2336029,29.4832433 39.3558916,31.7746595 41.4276326,32.7980175 L41.5035993,32.8300155 C42.9056258,33.1932856 44.2708946,33.6860389 45.581815,34.3019266 C45.7121319,34.3925677 45.8246299,34.506464 45.9136698,34.6379063 C45.9844417,34.4461654 46.0157219,34.2420873 46.0056295,34.0379425 C46.1565658,32.078134 45.0161733,30.2477944 43.1908611,29.5202156 Z M47.8968021,0 C46.6035778,0.987814389 45.1456919,1.73869885 43.5906861,2.21786594 L43.3907736,2.30386074 C41.3708198,3.13157773 40.2261321,5.28067168 40.6659658,7.41955151 C41.0298066,6.77559044 43.5766923,6.21962404 45.0760363,5.61966031 L45.152003,5.58766224 C47.2317709,4.56734959 48.3600632,2.27045415 47.8968021,1.97774277e-15 Z"></path>\n' +
                '            </g>\n' +
                '        </g>\n' +
                '    </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('tcs-liveapps-sm-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="44" height="44" viewBox="0 0 44 44">\n' +
                '    <path fill="#0081CB" fill-rule="evenodd" d="M11 25a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm2 3V14h-2.556l-5.657 5.464c-.785.785-.785 1.948 0 2.733l11.314 11.265c.777.778 2.043.761 2.828-.024L22.343 30H15a2 2 0 0 1-2-2zm10-12v-5.5l5.5 5.5H23zm-4 5h9v-2h-9v2zm0 4h6v-2h-6v2zm-2-4a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm0 4a1 1 0 1 1 0-2 1 1 0 0 1 0 2zm13-10l-6-6h-8c-1.11 0-2 .89-2 2v16a2 2 0 0 0 2 2h6.661L30 21.653V15zm4.831 11.494L26.333 35H23v-3.331l8.498-8.507 3.333 3.332zm4.694-.878c-.018.435-.471.889-.925 1.333l-3.671 3.68-1.262-1.262 3.778-3.769-.854-.853-1.262 1.253-3.333-3.334 3.413-3.404c.347-.347.925-.347 1.253 0l2.08 2.08c.347.329.347.907 0 1.253-.302.303-.595.596-.604.889-.027.285.276.578.56.854.427.444.844.844.827 1.28zM22 1.5c11.304 0 20.5 9.196 20.5 20.5S33.304 42.5 22 42.5 1.5 33.304 1.5 22 10.696 1.5 22 1.5zM22 0C9.869 0 0 9.869 0 22s9.869 22 22 22 22-9.869 22-22S34.131 0 22 0z"></path>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('tcs-integration-icon', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8"?>\n' +
                '<svg width="48px" height="48px" viewBox="0 0 48 48" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 51.1 (57501) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>327208F2-CA57-4974-A537-97E9D3200E7B</title>\n' +
                '    <desc>Created with sketchtool.</desc>\n' +
                '    <defs></defs>\n' +
                '    <g id="Symbols" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' +
                '        <g id="ic-integration-md" fill="#062E79">\n' +
                '            <path d="M48.0993789,27.3367089 C48.0993789,24.9822785 47.4355072,22.7979747 46.1253002,20.8450633 C45.0896605,19.3012658 43.7769482,18.0582278 42.2107122,17.1362025 C42.1520911,13.5448101 40.7872712,10.4344304 38.1523271,7.88708861 C35.4833126,5.3078481 32.2240787,4 28.4648116,4 C25.6635238,4 23.0831925,4.76759494 20.7964679,6.28202532 C19.1580828,7.36556962 17.8238261,8.70582278 16.8097308,10.2810127 C15.8687867,9.88810127 14.8451718,9.68962025 13.7484058,9.68962025 C11.6059793,9.68962025 9.74663768,10.436962 8.22248861,11.9098734 C6.67278675,13.4081013 5.88666253,15.2481013 5.88666253,17.3792405 C5.88666253,18.0248101 5.96532505,18.6516456 6.121147,19.2562025 C4.69169358,19.92 3.44411594,20.8870886 2.39595031,22.1473418 C0.806165631,24.0592405 0,26.2835443 0,28.7589873 C0,31.6724051 1.0762236,34.1893671 3.19810766,36.24 C5.04141615,38.0217722 7.2429648,39.0298734 9.75315114,39.2475949 C10.1018716,41.9286076 12.3660497,44 15.1137267,44 L18.5307867,44 L18.5307867,30.5878481 L15.1137267,30.5878481 C12.4071346,30.5878481 10.1710145,32.598481 9.77118841,35.2207595 C8.29814493,35.0273418 7.03052588,34.4146835 5.92574327,33.3468354 C4.59649689,32.0622785 3.95016149,30.561519 3.95016149,28.7589873 C3.95016149,27.2313924 4.43015321,25.9113924 5.41719255,24.7240506 C6.4272795,23.5098734 7.67535818,22.7493671 9.23257557,22.3994937 C9.87189648,22.2551899 10.3994865,21.8 10.6404845,21.1827848 C10.8819834,20.5660759 10.8053251,19.8683544 10.4365631,19.32 C10.0327288,18.7210127 9.83682402,18.0860759 9.83682402,17.3792405 C9.83682402,16.3559494 10.1905549,15.5372152 10.9501242,14.8035443 C11.7362484,14.0435443 12.6250849,13.6896203 13.7484058,13.6896203 C14.7469689,13.6896203 15.5786874,13.9858228 16.2901573,14.5949367 C16.7671429,15.003038 17.4069648,15.1579747 18.0142195,15.0156962 C18.6219752,14.8718987 19.1275197,14.4455696 19.3765342,13.8663291 C20.1305921,12.1108861 21.3020124,10.7255696 22.9574327,9.62987342 C24.6143561,8.53316456 26.4155776,8 28.4648116,8 C31.2124886,8 33.4891925,8.90936709 35.4246915,10.7802532 C37.3341366,12.6263291 38.2625549,14.7848101 38.2625549,17.3792405 C38.2625549,17.4987342 38.2555404,17.7351899 38.221971,18.1848101 C38.1593416,19.0278481 38.6268075,19.8197468 39.3898841,20.163038 C40.8373747,20.8146835 41.9722195,21.7726582 42.8575487,23.0926582 C43.7268447,24.3883544 44.1492174,25.7762025 44.1492174,27.3367089 C44.1492174,29.5275949 43.360087,31.355443 41.7367329,32.924557 C40.7076066,33.9194937 39.5672505,34.5949367 38.2891097,34.9625316 C37.7870725,32.4663291 35.6035611,30.5878481 32.9856522,30.5878481 L29.5685921,30.5878481 L29.5685921,33.2202532 L25.153971,33.2202532 C24.5442112,33.2202532 24.0496894,33.7194937 24.0496894,34.3356962 L24.0496894,34.3397468 C24.0496894,34.955443 24.5442112,35.4551899 25.153971,35.4551899 L29.5685921,35.4551899 L29.5685921,38.8167089 L25.153971,38.8167089 C24.5442112,38.8167089 24.0496894,39.3164557 24.0496894,39.9321519 L24.0496894,39.9362025 C24.0496894,40.5524051 24.5442112,41.0516456 25.153971,41.0516456 L29.5685921,41.0516456 L29.5685921,44 L32.9856522,44 C35.802472,44 38.1147495,41.8248101 38.3722816,39.0460759 C40.6635155,38.5939241 42.706236,37.516962 44.4643685,35.8177215 C46.876352,33.4865823 48.0993789,30.6329114 48.0993789,27.3367089" id="ic-integration-large"></path>\n' +
                '        </g>\n' +
                '    </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('tcs-info-icon', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"/><path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm1 15h-2v-6h2v6zm0-8h-2V7h2v2z" fill="green"/></svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-chevron-right', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path class="svg-content" fill="#727272" d="M10 6L8.59 7.41 13.17 12l-4.58 4.59L10 18l6-6z"/><path d="M0 0h24v24H0z" fill="none"/></svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-chevron-left', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path  class="svg-content" fill="#727272" d="M15.41 7.41L14 6l-6 6 6 6 1.41-1.41L10.83 12z"/><path d="M0 0h24v24H0z" fill="none"/></svg>\n'));
            // *JS*?
            this.matIconRegistry.addSvgIconLiteral('tcs-delete-sweep', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path class="svg-content" fill="#727272" d="M15 16h4v2h-4zm0-8h7v2h-7zm0 4h6v2h-6zM3 18c0 1.1.9 2 2 2h6c1.1 0 2-.9 2-2V8H3v10zM14 5h-3l-1-1H6L5 5H2v2h12z"/><path fill="none" d="M0 0h24v24H0z"/></svg>\n'));
            // *JS*?
            this.matIconRegistry.addSvgIconLiteral('tcs-euro-symbol', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path class="svg-content" fill="#727272"  d="M15 18.5c-2.51 0-4.68-1.42-5.76-3.5H15v-2H8.58c-.05-.33-.08-.66-.08-1s.03-.67.08-1H15V9H9.24C10.32 6.92 12.5 5.5 15 5.5c1.61 0 3.09.59 4.23 1.57L21 5.3C19.41 3.87 17.3 3 15 3c-3.92 0-7.24 2.51-8.48 6H3v2h3.06c-.04.33-.06.66-.06 1 0 .34.02.67.06 1H3v2h3.52c1.24 3.49 4.56 6 8.48 6 2.31 0 4.41-.87 6-2.3l-1.78-1.77c-1.13.98-2.6 1.57-4.22 1.57z"/><path fill="none" d="M0 0h24v24H0z"/></svg>\n'));
            // *JS*?
            this.matIconRegistry.addSvgIconLiteral('tcs-flash-on', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"/><path d="M7 2v11h3v9l7-12h-4l4-8z"/></svg>'));
            // *JS*?
            this.matIconRegistry.addSvgIconLiteral('tcs-incandescent', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"/><path fill="#727272"  class="svg-content" d="M3.55 18.54l1.41 1.41 1.79-1.8-1.41-1.41-1.79 1.8zM11 22.45h2V19.5h-2v2.95zM4 10.5H1v2h3v-2zm11-4.19V1.5H9v4.81C7.21 7.35 6 9.28 6 11.5c0 3.31 2.69 6 6 6s6-2.69 6-6c0-2.22-1.21-4.15-3-5.19zm5 4.19v2h3v-2h-3zm-2.76 7.66l1.79 1.8 1.41-1.41-1.8-1.79-1.4 1.4z"/></svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-cloud-download', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"/><path class="svg-content" fill="#727272" d="M19.35 10.04C18.67 6.59 15.64 4 12 4 9.11 4 6.6 5.64 5.35 8.04 2.34 8.36 0 10.91 0 14c0 3.31 2.69 6 6 6h13c2.76 0 5-2.24 5-5 0-2.64-2.05-4.78-4.65-4.96zM17 13l-5 5-5-5h3V9h4v4h3z"/></svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-visibility', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path d="M0 0h24v24H0z" fill="none"/><path class="svg-content" fill="#727272" d="M12 4.5C7 4.5 2.73 7.61 1 12c1.73 4.39 6 7.5 11 7.5s9.27-3.11 11-7.5c-1.73-4.39-6-7.5-11-7.5zM12 17c-2.76 0-5-2.24-5-5s2.24-5 5-5 5 2.24 5 5-2.24 5-5 5zm0-8c-1.66 0-3 1.34-3 3s1.34 3 3 3 3-1.34 3-3-1.34-3-3-3z"/></svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('tcs-pie-chart', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><path fill="none" d="M0 0h24v24H0V0z"/><path  class="svg-content" fill="#727272" d="M11 2v20c-5.07-.5-9-4.79-9-10s3.93-9.5 9-10zm2.03 0v8.99H22c-.47-4.74-4.24-8.52-8.97-8.99zm0 11.01V22c4.74-.47 8.5-4.25 8.97-8.99h-8.97z"/></svg>\n'));
            /* audit icons */
            this.matIconRegistry.addSvgIconLiteral('BP_AUTO_STARTED_INSTANCE', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="40" height="40" viewBox="0 0 40 40">\n' +
                '  <g fill="none" fill-rule="evenodd" transform="translate(-4 -4)">\n' +
                '    <polygon points="0 0 48 0 48 48 0 48"/>\n' +
                '    <path fill="#0081CB" fill-rule="nonzero" d="M20,33 L32,24 L20,15 L20,33 Z M24,4 C12.96,4 4,12.96 4,24 C4,35.04 12.96,44 24,44 C35.04,44 44,35.04 44,24 C44,12.96 35.04,4 24,4 Z M24,40 C15.18,40 8,32.82 8,24 C8,15.18 15.18,8 24,8 C32.82,8 40,15.18 40,24 C40,32.82 32.82,40 24,40 Z"/>\n' +
                '  </g>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('BP_DELAYED_AUTO_START_TIMER_EXPIRED', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                ' <g>\n' +
                '  <ellipse stroke="null" ry="7.351296" rx="7.524559" id="svg_4" cy="13.658373" cx="12.074255" stroke-opacity="null" stroke-width="null" fill="#0081cb"/>\n' +
                '  <path id="svg_1" fill="none" d="m-12.870959,2.227668l24,0l0,24l-24,0l0,-24z"/>\n' +
                '  <path fill="#0081cb" id="svg_2" d="m15.247519,1.792059l-6,0l0,2l6,0l0,-2zm-4,13l2,0l0,-6l-2,0l0,6zm8.03,-6.61l1.42,-1.42c-0.43,-0.51 -0.9,-0.99 -1.41,-1.41l-1.42,1.42c-1.55,-1.24 -3.5,-1.98 -5.62,-1.98c-4.97,0 -9,4.03 -9,9s4.02,9 9,9s9,-4.03 9,-9c0,-2.12 -0.74,-4.07 -1.97,-5.61zm-7.03,12.61c-3.87,0 -7,-3.13 -7,-7s3.13,-7 7,-7s7,3.13 7,7s-3.13,7 -7,7z"/>\n' +
                '  <rect stroke-dasharray="2,2" stroke="#ffffff" id="svg_3" height="6.088952" width="2.079155" y="6.653602" x="11.18319" stroke-width="0" fill="#ffffff"/>\n' +
                ' </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('BP_DELAYED_AUTO_STARTED_INSTANCE', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '    <path d="M0 0h24v24H0z" fill="none"/>\n' +
                '    <path d="M15 1H9v2h6V1zm-4 13h2V8h-2v6zm8.03-6.61l1.42-1.42c-.43-.51-.9-.99-1.41-1.41l-1.42 1.42C16.07 4.74 14.12 4 12 4c-4.97 0-9 4.03-9 9s4.02 9 9 9 9-4.03 9-9c0-2.12-.74-4.07-1.97-5.61zM12 20c-3.87 0-7-3.13-7-7s3.13-7 7-7 7 3.13 7 7-3.13 7-7 7z" fill="#0081cb" />\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('BP_DELAYED_AUTO_STARTED_INSTANCE_CANCELLED', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '    <path d="M0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0z" fill="none"/>\n' +
                '    <path d="M19.04 4.55l-1.42 1.42C16.07 4.74 14.12 4 12 4c-1.83 0-3.53.55-4.95 1.48l1.46 1.46C9.53 6.35 10.73 6 12 6c3.87 0 7 3.13 7 7 0 1.27-.35 2.47-.94 3.49l1.45 1.45C20.45 16.53 21 14.83 21 13c0-2.12-.74-4.07-1.97-5.61l1.42-1.42-1.41-1.42zM15 1H9v2h6V1zm-4 8.44l2 2V8h-2v1.44zM3.02 4L1.75 5.27 4.5 8.03C3.55 9.45 3 11.16 3 13c0 4.97 4.02 9 9 9 1.84 0 3.55-.55 4.98-1.5l2.5 2.5 1.27-1.27-7.71-7.71L3.02 4zM12 20c-3.87 0-7-3.13-7-7 0-1.28.35-2.48.95-3.52l9.56 9.56c-1.03.61-2.23.96-3.51.96z" fill="#0081cb"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('BP_DELAYED_AUTO_STARTED_INSTANCE_CANCELLED_DUE_TO_STATE_CHANGE', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24">\n' +
                '    <path d="M0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0zm0 0h24v24H0z" fill="none"/>\n' +
                '    <path d="M19.04 4.55l-1.42 1.42C16.07 4.74 14.12 4 12 4c-1.83 0-3.53.55-4.95 1.48l1.46 1.46C9.53 6.35 10.73 6 12 6c3.87 0 7 3.13 7 7 0 1.27-.35 2.47-.94 3.49l1.45 1.45C20.45 16.53 21 14.83 21 13c0-2.12-.74-4.07-1.97-5.61l1.42-1.42-1.41-1.42zM15 1H9v2h6V1zm-4 8.44l2 2V8h-2v1.44zM3.02 4L1.75 5.27 4.5 8.03C3.55 9.45 3 11.16 3 13c0 4.97 4.02 9 9 9 1.84 0 3.55-.55 4.98-1.5l2.5 2.5 1.27-1.27-7.71-7.71L3.02 4zM12 20c-3.87 0-7-3.13-7-7 0-1.28.35-2.48.95-3.52l9.56 9.56c-1.03.61-2.23.96-3.51.96z" fill="#0081cb"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('BP_INSTANCE_COMPLETED', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="12px" height="9px" viewBox="0 0 12 9" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>6FF6D773-32D5-44FF-9BA8-ED1ACBAF56A8</title>\n' +
                '    <desc>Created with sketchtool.</desc>\n' +
                '    <defs></defs>\n' +
                '    <g id="Case-Management-" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' +
                '        <g id="8.-Tibco-Case-Management---Detail-Page--collapsed" transform="translate(-73.000000, -753.000000)" fill="#58A400">\n' +
                '            <g id="check" transform="translate(68.000000, 745.000000)">\n' +
                '                <path d="M16.8612947,9.80440476 L9.9853348,16.6789202 C9.80100552,16.8624718 9.50267875,16.8624718 9.31912723,16.6789202 L5.13766364,12.4706795 C4.95411212,12.2863502 4.95411212,11.9869123 5.13766364,11.8036941 L6.13675278,10.8053827 C6.32097095,10.6214979 6.61940883,10.6214979 6.80296035,10.8053827 L9.65578649,13.6770974 L15.1948869,8.13766364 C15.3784384,7.95411212 15.6767652,7.95411212 15.8617611,8.13766364 L16.8609614,9.13741943 C17.0462906,9.32141538 17.0462906,9.62085324 16.8612947,9.80440476" id="Fill-1"></path>\n' +
                '            </g>\n' +
                '        </g>\n' +
                '    </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('BP_INSTANCE_CREATED', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="12px" height="16px" viewBox="0 0 12 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>DA1993B0-7B6B-42BA-814D-097AD18D0114</title>\n' +
                '    <desc>Created with sketchtool.</desc>\n' +
                '    <defs></defs>\n' +
                '    <g id="Case-Management-" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' +
                '        <g id="8.-Tibco-Case-Management---Detail-Page--collapsed" transform="translate(-75.000000, -366.000000)">\n' +
                '            <g id="location" transform="translate(69.000000, 362.000000)">\n' +
                '                <g id="Group-3" transform="translate(6.000000, 4.000000)">\n' +
                '                    <g id="Page-1">\n' +
                '                        <path d="M5.66894679,7.39006239 C4.65859817,7.39006239 3.83966239,6.57112661 3.83966239,5.56077798 C3.83966239,4.55057615 4.65859817,3.73164037 5.66894679,3.73164037 C6.67929541,3.73164037 7.49823119,4.55057615 7.49823119,5.56077798 C7.49823119,6.57112661 6.67929541,7.39006239 5.66894679,7.39006239 M9.53346055,1.69626422 L9.53346055,1.69626422 C7.36949725,-0.467699083 3.8608,-0.467699083 1.69654312,1.69626422 C-0.253401835,3.64620917 -0.472998165,7.3178422 1.18190092,9.52408073 L5.61492844,15.9264294 L10.0481028,9.52408073 C11.702855,7.3178422 11.4834055,3.64620917 9.53346055,1.69626422" id="Fill-1" fill="#0081CB"></path>\n' +
                '                        <path d="M5.66894679,7.39006239 C4.65859817,7.39006239 3.83966239,6.57112661 3.83966239,5.56077798 C3.83966239,4.55057615 4.65859817,3.73164037 5.66894679,3.73164037 C6.67929541,3.73164037 7.49823119,4.55057615 7.49823119,5.56077798 C7.49823119,6.57112661 6.67929541,7.39006239 5.66894679,7.39006239 L5.66894679,7.39006239 Z M9.53346055,1.69626422 L9.53346055,1.69626422 C7.36949725,-0.467699083 3.8608,-0.467699083 1.69654312,1.69626422 C-0.253401835,3.64620917 -0.472998165,7.3178422 1.18190092,9.52408073 L5.61492844,15.9264294 L10.0481028,9.52408073 C11.702855,7.3178422 11.4834055,3.64620917 9.53346055,1.69626422 L9.53346055,1.69626422 Z" id="Stroke-3"></path>\n' +
                '                    </g>\n' +
                '                </g>\n' +
                '            </g>\n' +
                '        </g>\n' +
                '    </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('BP_TASK_COMPLETED', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="12px" height="9px" viewBox="0 0 12 9" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>6FF6D773-32D5-44FF-9BA8-ED1ACBAF56A8</title>\n' +
                '    <desc>Created with sketchtool.</desc>\n' +
                '    <defs></defs>\n' +
                '    <g id="Case-Management-" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' +
                '        <g id="8.-Tibco-Case-Management---Detail-Page--collapsed" transform="translate(-73.000000, -753.000000)" fill="#58A400">\n' +
                '            <g id="check" transform="translate(68.000000, 745.000000)">\n' +
                '                <path d="M16.8612947,9.80440476 L9.9853348,16.6789202 C9.80100552,16.8624718 9.50267875,16.8624718 9.31912723,16.6789202 L5.13766364,12.4706795 C4.95411212,12.2863502 4.95411212,11.9869123 5.13766364,11.8036941 L6.13675278,10.8053827 C6.32097095,10.6214979 6.61940883,10.6214979 6.80296035,10.8053827 L9.65578649,13.6770974 L15.1948869,8.13766364 C15.3784384,7.95411212 15.6767652,7.95411212 15.8617611,8.13766364 L16.8609614,9.13741943 C17.0462906,9.32141538 17.0462906,9.62085324 16.8612947,9.80440476" id="Fill-1"></path>\n' +
                '            </g>\n' +
                '        </g>\n' +
                '    </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('BP_TASK_CREATED', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="12px" height="16px" viewBox="0 0 12 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>DA1993B0-7B6B-42BA-814D-097AD18D0114</title>\n' +
                '    <desc>Created with sketchtool.</desc>\n' +
                '    <defs></defs>\n' +
                '    <g id="Case-Management-" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' +
                '        <g id="8.-Tibco-Case-Management---Detail-Page--collapsed" transform="translate(-75.000000, -366.000000)">\n' +
                '            <g id="location" transform="translate(69.000000, 362.000000)">\n' +
                '                <g id="Group-3" transform="translate(6.000000, 4.000000)">\n' +
                '                    <g id="Page-1">\n' +
                '                        <path d="M5.66894679,7.39006239 C4.65859817,7.39006239 3.83966239,6.57112661 3.83966239,5.56077798 C3.83966239,4.55057615 4.65859817,3.73164037 5.66894679,3.73164037 C6.67929541,3.73164037 7.49823119,4.55057615 7.49823119,5.56077798 C7.49823119,6.57112661 6.67929541,7.39006239 5.66894679,7.39006239 M9.53346055,1.69626422 L9.53346055,1.69626422 C7.36949725,-0.467699083 3.8608,-0.467699083 1.69654312,1.69626422 C-0.253401835,3.64620917 -0.472998165,7.3178422 1.18190092,9.52408073 L5.61492844,15.9264294 L10.0481028,9.52408073 C11.702855,7.3178422 11.4834055,3.64620917 9.53346055,1.69626422" id="Fill-1" fill="#0081CB"></path>\n' +
                '                        <path d="M5.66894679,7.39006239 C4.65859817,7.39006239 3.83966239,6.57112661 3.83966239,5.56077798 C3.83966239,4.55057615 4.65859817,3.73164037 5.66894679,3.73164037 C6.67929541,3.73164037 7.49823119,4.55057615 7.49823119,5.56077798 C7.49823119,6.57112661 6.67929541,7.39006239 5.66894679,7.39006239 L5.66894679,7.39006239 Z M9.53346055,1.69626422 L9.53346055,1.69626422 C7.36949725,-0.467699083 3.8608,-0.467699083 1.69654312,1.69626422 C-0.253401835,3.64620917 -0.472998165,7.3178422 1.18190092,9.52408073 L5.61492844,15.9264294 L10.0481028,9.52408073 C11.702855,7.3178422 11.4834055,3.64620917 9.53346055,1.69626422 L9.53346055,1.69626422 Z" id="Stroke-3"></path>\n' +
                '                    </g>\n' +
                '                </g>\n' +
                '            </g>\n' +
                '        </g>\n' +
                '    </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('Calculation Task', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="18px" height="18px" viewBox="0 0 16 22" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>icon-ic_calc_task</title>\n' +
                '    <desc>icon-ic_calc_task</desc>\n' +
                '    <defs></defs>\n' +
                '\n' +
                '\t<g id="icon-ic_calc_task" fill="#0081CB">\n' +
                '\t\t<title>icon-ic_calc_task</title>\n' +
                '\t\t<path class="path1" d="M0,1.991155 C0,0.891470458 0.894513756,0 1.99406028,0 L14.0059397,0 C15.1072288,0 16,0.889673948 16,1.991155 L16,20.008845 C16,21.1085295 15.1054862,22 14.0059397,22 L1.99406028,22 C0.892771196,22 0,21.1103261 0,20.008845 L0,1.991155 Z M11.02,7.6 L11.02,10.8933333 L14.3133333,10.8933333 L14.3133333,7.6 L11.02,7.6 Z M6.46,7.6 L6.46,10.8933333 L9.75333333,10.8933333 L9.75333333,7.6 L6.46,7.6 Z M1.9,7.6 L1.9,10.8933333 L5.19333333,10.8933333 L5.19333333,7.6 L1.9,7.6 Z M11.02,12.16 L11.02,15.4533333 L14.3133333,15.4533333 L14.3133333,12.16 L11.02,12.16 Z M6.46,12.16 L6.46,15.4533333 L9.75333333,15.4533333 L9.75333333,12.16 L6.46,12.16 Z M1.9,12.16 L1.9,15.4533333 L5.19333333,15.4533333 L5.19333333,12.16 L1.9,12.16 Z M11.02,16.72 L11.02,20.0133333 L14.3133333,20.0133333 L14.3133333,16.72 L11.02,16.72 Z M6.46,16.72 L6.46,20.0133333 L9.75333333,20.0133333 L9.75333333,16.72 L6.46,16.72 Z M1.9,16.72 L1.9,20.0133333 L5.19333333,20.0133333 L5.19333333,16.72 L1.9,16.72 Z M1.90321615,1.92560547 L1.90321615,6.23227214 L14.4432161,6.23227214 L14.4432161,1.92560547 L1.90321615,1.92560547 Z" id="Combined-Shape"></path>\n' +
                '\t</g>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('CM_CASE_CREATED', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="12px" height="16px" viewBox="0 0 12 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>DA1993B0-7B6B-42BA-814D-097AD18D0114</title>\n' +
                '    <desc>Created with sketchtool.</desc>\n' +
                '    <defs></defs>\n' +
                '    <g id="Case-Management-" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' +
                '        <g id="8.-Tibco-Case-Management---Detail-Page--collapsed" transform="translate(-75.000000, -366.000000)">\n' +
                '            <g id="location" transform="translate(69.000000, 362.000000)">\n' +
                '                <g id="Group-3" transform="translate(6.000000, 4.000000)">\n' +
                '                    <g id="Page-1">\n' +
                '                        <path d="M5.66894679,7.39006239 C4.65859817,7.39006239 3.83966239,6.57112661 3.83966239,5.56077798 C3.83966239,4.55057615 4.65859817,3.73164037 5.66894679,3.73164037 C6.67929541,3.73164037 7.49823119,4.55057615 7.49823119,5.56077798 C7.49823119,6.57112661 6.67929541,7.39006239 5.66894679,7.39006239 M9.53346055,1.69626422 L9.53346055,1.69626422 C7.36949725,-0.467699083 3.8608,-0.467699083 1.69654312,1.69626422 C-0.253401835,3.64620917 -0.472998165,7.3178422 1.18190092,9.52408073 L5.61492844,15.9264294 L10.0481028,9.52408073 C11.702855,7.3178422 11.4834055,3.64620917 9.53346055,1.69626422" id="Fill-1" fill="#0081CB"></path>\n' +
                '                        <path d="M5.66894679,7.39006239 C4.65859817,7.39006239 3.83966239,6.57112661 3.83966239,5.56077798 C3.83966239,4.55057615 4.65859817,3.73164037 5.66894679,3.73164037 C6.67929541,3.73164037 7.49823119,4.55057615 7.49823119,5.56077798 C7.49823119,6.57112661 6.67929541,7.39006239 5.66894679,7.39006239 L5.66894679,7.39006239 Z M9.53346055,1.69626422 L9.53346055,1.69626422 C7.36949725,-0.467699083 3.8608,-0.467699083 1.69654312,1.69626422 C-0.253401835,3.64620917 -0.472998165,7.3178422 1.18190092,9.52408073 L5.61492844,15.9264294 L10.0481028,9.52408073 C11.702855,7.3178422 11.4834055,3.64620917 9.53346055,1.69626422 L9.53346055,1.69626422 Z" id="Stroke-3"></path>\n' +
                '                    </g>\n' +
                '                </g>\n' +
                '            </g>\n' +
                '        </g>\n' +
                '    </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('CM_CASE_UPDATED', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="13px" height="12px" viewBox="0 0 13 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>FBF578C4-F30A-4646-A5DA-0753816A90AE</title>\n' +
                '    <desc>Created with sketchtool.</desc>\n' +
                '    <defs></defs>\n' +
                '    <g id="Case-Management-" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' +
                '        <g id="8.-Tibco-Case-Management---Detail-Page--collapsed" transform="translate(-75.000000, -424.000000)" fill="#0081CB">\n' +
                '            <g id="Edit-icon" transform="translate(69.000000, 418.000000)">\n' +
                '                <path d="M6.00682619,17.6598257 C5.96218426,17.8607372 6.14357915,18.0407641 6.34451344,17.9919042 L9.07799944,17.329138 L6.62636407,14.8761346 L6.00682619,17.6598257 Z M17.8128382,7.41103724 L16.7188829,6.31708196 C16.296107,5.89430601 15.6096062,5.89430601 15.1853939,6.31708196 L14.1374941,7.36498172 L16.5905203,9.81800788 L17.8128382,8.59568996 C18.1407444,8.26776101 18.1407444,7.73894338 17.8128382,7.41103724 L17.8128382,7.41103724 Z M13.4984397,8.0026454 L15.9514658,10.4556488 L9.74217924,16.6649354 L7.29054387,14.211932 L13.4984397,8.0026454 Z" id="Fill-1"></path>\n' +
                '            </g>\n' +
                '        </g>\n' +
                '    </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('CM_CASE_UPDATED_STATE_CHANGED', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="14px" height="12px" viewBox="0 0 14 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>2E4A2B33-18E9-42A0-857D-D8F21B671B64</title>\n' +
                '    <desc>Created with sketchtool.</desc>\n' +
                '    <defs></defs>\n' +
                '    <g id="Case-Management-" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' +
                '        <g id="8.-Tibco-Case-Management---Detail-Page--collapsed" transform="translate(-75.000000, -643.000000)" fill="#0081CB">\n' +
                '            <g id="change" transform="translate(69.000000, 636.000000)">\n' +
                '                <g id="task-complete" transform="translate(6.000000, 7.000000)">\n' +
                '                    <g id="Capa_1">\n' +
                '                        <g id="change-icon">\n' +
                '                            <path d="M6.0006733,6.2048608 C6.22449716,5.67444886 6.41423864,5.25835227 6.56997443,4.95662216 C6.68676989,4.7327983 6.79635511,4.54420739 6.89855114,4.39090057 C7.00064489,4.23759375 7.12482955,4.08794318 7.27077273,3.94197443 C7.41689489,3.79595455 7.58469886,3.68634375 7.77459375,3.6134233 C7.96428409,3.54042614 8.1759375,3.50391477 8.40965625,3.50391477 L10.2782812,3.50391477 L10.2782812,4.90551136 C10.2782812,4.96876705 10.3013693,5.02355966 10.347571,5.0697358 C10.3937727,5.11598864 10.4485398,5.1390767 10.5117187,5.1390767 C10.5799602,5.1390767 10.6359545,5.11724148 10.6795227,5.07341761 L13.0155597,2.73753409 C13.0594858,2.69368466 13.0813466,2.63779261 13.0813466,2.56962784 C13.0813466,2.50146307 13.0594858,2.44554545 13.0155597,2.40154261 L10.6868864,0.07284375 C10.6286165,0.0242130682 10.5699886,0 10.5116932,0 C10.4434517,0 10.3876108,0.0218607955 10.3437102,0.0657102273 C10.300142,0.109508523 10.2782557,0.165426136 10.2782557,0.233565341 L10.2782557,1.63505966 L8.40963068,1.63505966 C8.078625,1.63505966 7.76720455,1.67530398 7.4751392,1.75558807 C7.18307386,1.83587216 6.9238892,1.93801705 6.69763636,2.06217614 C6.47130682,2.18628409 6.25234091,2.3529375 6.0406108,2.56223864 C5.82890625,2.7714375 5.64880398,2.97347727 5.50045739,3.16812784 C5.35205966,3.36272727 5.19627273,3.60603409 5.03327557,3.89807386 C4.87030398,4.1900625 4.73888352,4.44559091 4.63911648,4.66455682 C4.53932386,4.88357386 4.41889773,5.15367614 4.27778693,5.4748892 C4.05388636,6.0053267 3.86409375,6.42147443 3.70838352,6.72317898 C3.59161364,6.94700284 3.48202841,7.13564489 3.37990909,7.28892614 C3.27773864,7.44223295 3.15355398,7.59185795 3.00758523,7.7378267 C2.86156534,7.88394886 2.69365909,7.99348295 2.50386648,8.06648011 C2.314125,8.1394517 2.10236932,8.1760142 1.86880398,8.1760142 L0.233667614,8.1760142 C0.165502841,8.1760142 0.109508523,8.19772159 0.0657613636,8.24162216 C0.0220653409,8.28536932 0.000102272727,8.34121023 0.000102272727,8.40942614 L0.000102272727,9.81115057 C0.000102272727,9.87923864 0.0221420455,9.93523295 0.0659403409,9.97913352 C0.109764205,10.0229063 0.165784091,10.044767 0.233846591,10.044767 L1.86903409,10.044767 C2.20003977,10.044767 2.51143466,10.0045227 2.80347443,9.9241875 C3.09546307,9.84385227 3.3546733,9.74165625 3.58090057,9.61759943 C3.80725568,9.49344034 4.02622159,9.3267358 4.23792614,9.11743466 C4.44957955,8.9083125 4.62973295,8.70619602 4.77813068,8.51162216 C4.92647727,8.31692045 5.08223864,8.07366477 5.24528693,7.7817017 C5.40825852,7.4896108 5.53973011,7.23413352 5.63944602,7.01519318 C5.73913636,6.79617614 5.85953693,6.52615057 6.0006733,6.2048608" id="Fill-1"></path>\n' +
                '                            <path d="M0.233565341,3.50383807 L1.86875284,3.50383807 C2.08288636,3.50383807 2.28116761,3.53914773 2.46369886,3.60976705 C2.64623011,3.68038636 2.79951136,3.76550284 2.92359375,3.86532102 C3.0477017,3.9651392 3.17178409,4.10256818 3.29589205,4.2777358 C3.41997443,4.45300568 3.51853977,4.60756534 3.59153693,4.7413125 C3.66448295,4.8751875 3.75450852,5.05163352 3.86158807,5.27059943 C4.23639205,4.38975 4.5696733,3.72546307 4.8616875,3.27773864 C4.08303409,2.18278125 3.0853892,1.63521307 1.86872727,1.63521307 L0.233565341,1.63521307 C0.165400568,1.63521307 0.10940625,1.65707386 0.0656590909,1.7009233 C0.0219630682,1.74467045 0,1.80058807 0,1.86875284 L0,3.27034943 C0,3.33853977 0.0218607955,3.39438068 0.0656590909,3.43815341 C0.109508523,3.48200284 0.165502841,3.50383807 0.233565341,3.50383807" id="Fill-3"></path>\n' +
                '                            <path d="M10.6870653,6.61382386 C10.6286165,6.56519318 10.5701676,6.54103125 10.5117188,6.54103125 C10.4436563,6.54103125 10.3876364,6.56281534 10.3439148,6.6066392 C10.3001676,6.65038636 10.2783068,6.70638068 10.2783068,6.77444318 L10.2783068,8.17616761 L8.40950284,8.17616761 C8.19529261,8.17616761 7.99703693,8.14080682 7.81450568,8.07013636 C7.63197443,7.99959375 7.47866761,7.91447727 7.3546108,7.81463352 C7.23063068,7.71489205 7.10647159,7.5773608 6.9823892,7.40209091 C6.85823011,7.22689773 6.75961364,7.0723125 6.68664205,6.93841193 C6.61372159,6.80479261 6.52369602,6.62814205 6.41661648,6.40932955 C6.04191477,7.28526989 5.71103693,7.94955682 5.42385511,8.40219034 C5.55519886,8.59195739 5.69147727,8.76109091 5.83261364,8.90941193 C5.97369886,9.05780966 6.10757386,9.18800284 6.23408523,9.29999148 C6.36062216,9.4118267 6.5041875,9.50929261 6.66475568,9.59187784 C6.82540057,9.67464205 6.96646023,9.74395739 7.08824148,9.79997727 C7.21022727,9.85594602 7.36335511,9.90094602 7.54821307,9.93505398 C7.73309659,9.96900852 7.88883239,9.99473011 8.01536932,10.0115284 C8.14188068,10.0285057 8.31469602,10.0407528 8.5336875,10.0481165 C8.75260227,10.0554545 8.93025,10.0577301 9.066375,10.0554545 C9.20278125,10.053 9.39991193,10.050392 9.65786932,10.0481165 C9.9158267,10.0457386 10.1226733,10.0444347 10.2784347,10.0444347 L10.2784347,11.4460568 C10.2784347,11.5093125 10.3015227,11.5640795 10.3477244,11.6102812 C10.3939261,11.6565085 10.4486932,11.6795966 10.5118722,11.6795966 C10.5801136,11.6795966 10.636108,11.6577358 10.6796761,11.6139886 L13.0157131,9.27813068 C13.0594602,9.23420455 13.081321,9.1783892 13.081321,9.11014773 C13.081321,9.04198295 13.0594602,8.98606534 13.0155341,8.94234375 L10.6870653,6.61382386 Z" id="Fill-5"></path>\n' +
                '                        </g>\n' +
                '                    </g>\n' +
                '                </g>\n' +
                '            </g>\n' +
                '        </g>\n' +
                '    </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('Email Task', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="10px" height="12px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>icon-ic_email_task</title>\n' +
                '    <desc>icon-ic_email_task</desc>\n' +
                '    <defs></defs>\n' +
                '\n' +
                '\t<g id="icon-ic_email_task" fill="#0081CB">\n' +
                '\t\t<title>icon-ic_email_task</title>\n' +
                '\t\t<path class="path1" d="M20 4H4c-1.1 0-1.99.9-1.99 2L2 18c0 1.1.9 2 2 2h16c1.1 0 2-.9 2-2V6c0-1.1-.9-2-2-2zm0 4l-8 5-8-5V6l8 5 8-5v2z" ></path>\n' +
                '\t</g>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('ERROR', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="4px" height="13px" viewBox="0 0 4 13" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>D5AA7459-8549-4B01-9408-40A6047FEBD2</title>\n' +
                '    <desc>Created with sketchtool.</desc>\n' +
                '    <defs></defs>\n' +
                '    <g id="Symbols" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" font-size="16" font-family="SourceSansPro-Black, Source Sans Pro" font-weight="700">\n' +
                '        <g id="horizontal-stepper" transform="translate(-1017.000000, -46.000000)">\n' +
                '            <g id="Group-2">\n' +
                '                <g transform="translate(180.000000, 0.000000)">\n' +
                '                    <g id="error" transform="translate(820.000000, 10.000000)">\n' +
                '                        <text id="!">\n' +
                '                            <tspan x="16" y="48" fill="#E60000">!</tspan>\n' +
                '                            <tspan x="21.76" y="48" fill="#FEFCFC"> </tspan>\n' +
                '                        </text>\n' +
                '                    </g>\n' +
                '                </g>\n' +
                '            </g>\n' +
                '        </g>\n' +
                '    </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('TCI Task', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="24px" height="24px" viewBox="0 0 24 24" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>icon-ic_tci_service_task</title>\n' +
                '    <desc>icon-ic_tci_service_task</desc>\n' +
                '    <defs></defs>\n' +
                '\n' +
                '\t<g id="icon-ic_tci_service_task" fill="#0081CB">\n' +
                '\t\t<title>icon-ic_tci_service_task</title>\n' +
                '\t\t<path class="path1"\n' +
                '\t\t\t  d="M19.6,2.4H2.4c-1,0-1.9,0.9-1.9,1.9v13.4c0,1,0.9,1.9,1.9,1.9h17.2c1,0,1.9-0.9,1.9-1.9V4.3C21.5,3.3,20.6,2.4,19.6,2.4z M7.2,15.8v3.8H5.3v-3.8H2.4L6.2,12l3.8,3.8H7.2z M11,10H2.4V8.1H11V10z M11,6.2H2.4V4.3H11V6.2zM15.9,18.6L12,14.8h2.9V11h1.9v3.8h2.9L15.9,18.6z"></path>\n' +
                '\t</g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('User Task', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="32px" height="32px" viewBox="0 0 32 32" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>icon-ic_person</title>\n' +
                '    <desc>icon-ic_person</desc>\n' +
                '    <defs></defs>\n' +
                '\n' +
                '\t<g id="icon-ic_person" fill="#0081CB">\n' +
                '\t\t<title>ic_person</title>\n' +
                '\t\t<path class="path1"\n' +
                '\t\t\t  d="M16 16c2.947 0 5.333-2.387 5.333-5.333s-2.387-5.333-5.333-5.333-5.333 2.387-5.333 5.333 2.387 5.333 5.333 5.333zM16 18.667c-3.56 0-10.667 1.787-10.667 5.333v2.667h21.333v-2.667c0-3.547-7.107-5.333-10.667-5.333z"></path>\n' +
                '\t</g>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('WR_FOLDER_ARTIFACT_CREATED', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="12px" height="16px" viewBox="0 0 12 16" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>DA1993B0-7B6B-42BA-814D-097AD18D0114</title>\n' +
                '    <desc>Created with sketchtool.</desc>\n' +
                '    <defs></defs>\n' +
                '    <g id="Case-Management-" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' +
                '        <g id="8.-Tibco-Case-Management---Detail-Page--collapsed" transform="translate(-75.000000, -366.000000)">\n' +
                '            <g id="location" transform="translate(69.000000, 362.000000)">\n' +
                '                <g id="Group-3" transform="translate(6.000000, 4.000000)">\n' +
                '                    <g id="Page-1">\n' +
                '                        <path d="M5.66894679,7.39006239 C4.65859817,7.39006239 3.83966239,6.57112661 3.83966239,5.56077798 C3.83966239,4.55057615 4.65859817,3.73164037 5.66894679,3.73164037 C6.67929541,3.73164037 7.49823119,4.55057615 7.49823119,5.56077798 C7.49823119,6.57112661 6.67929541,7.39006239 5.66894679,7.39006239 M9.53346055,1.69626422 L9.53346055,1.69626422 C7.36949725,-0.467699083 3.8608,-0.467699083 1.69654312,1.69626422 C-0.253401835,3.64620917 -0.472998165,7.3178422 1.18190092,9.52408073 L5.61492844,15.9264294 L10.0481028,9.52408073 C11.702855,7.3178422 11.4834055,3.64620917 9.53346055,1.69626422" id="Fill-1" fill="#0081CB"></path>\n' +
                '                        <path d="M5.66894679,7.39006239 C4.65859817,7.39006239 3.83966239,6.57112661 3.83966239,5.56077798 C3.83966239,4.55057615 4.65859817,3.73164037 5.66894679,3.73164037 C6.67929541,3.73164037 7.49823119,4.55057615 7.49823119,5.56077798 C7.49823119,6.57112661 6.67929541,7.39006239 5.66894679,7.39006239 L5.66894679,7.39006239 Z M9.53346055,1.69626422 L9.53346055,1.69626422 C7.36949725,-0.467699083 3.8608,-0.467699083 1.69654312,1.69626422 C-0.253401835,3.64620917 -0.472998165,7.3178422 1.18190092,9.52408073 L5.61492844,15.9264294 L10.0481028,9.52408073 C11.702855,7.3178422 11.4834055,3.64620917 9.53346055,1.69626422 L9.53346055,1.69626422 Z" id="Stroke-3"></path>\n' +
                '                    </g>\n' +
                '                </g>\n' +
                '            </g>\n' +
                '        </g>\n' +
                '    </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('WR_FOLDER_ARTIFACT_DELETED', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="4px" height="13px" viewBox="0 0 4 13" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>D5AA7459-8549-4B01-9408-40A6047FEBD2</title>\n' +
                '    <desc>Created with sketchtool.</desc>\n' +
                '    <defs></defs>\n' +
                '    <g id="Symbols" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd" font-size="16" font-family="SourceSansPro-Black, Source Sans Pro" font-weight="700">\n' +
                '        <g id="horizontal-stepper" transform="translate(-1017.000000, -46.000000)">\n' +
                '            <g id="Group-2">\n' +
                '                <g transform="translate(180.000000, 0.000000)">\n' +
                '                    <g id="error" transform="translate(820.000000, 10.000000)">\n' +
                '                        <text id="!">\n' +
                '                            <tspan x="16" y="48" fill="#E60000">!</tspan>\n' +
                '                            <tspan x="21.76" y="48" fill="#FEFCFC"> </tspan>\n' +
                '                        </text>\n' +
                '                    </g>\n' +
                '                </g>\n' +
                '            </g>\n' +
                '        </g>\n' +
                '    </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('WR_FOLDER_ARTIFACT_UPDATED', this.domSanitizer.bypassSecurityTrustHtml('<?xml version="1.0" encoding="UTF-8" standalone="no"?>\n' +
                '<svg width="13px" height="12px" viewBox="0 0 13 12" version="1.1" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">\n' +
                '    <!-- Generator: sketchtool 39 (31667) - http://www.bohemiancoding.com/sketch -->\n' +
                '    <title>FBF578C4-F30A-4646-A5DA-0753816A90AE</title>\n' +
                '    <desc>Created with sketchtool.</desc>\n' +
                '    <defs></defs>\n' +
                '    <g id="Case-Management-" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">\n' +
                '        <g id="8.-Tibco-Case-Management---Detail-Page--collapsed" transform="translate(-75.000000, -424.000000)" fill="#0081CB">\n' +
                '            <g id="Edit-icon" transform="translate(69.000000, 418.000000)">\n' +
                '                <path d="M6.00682619,17.6598257 C5.96218426,17.8607372 6.14357915,18.0407641 6.34451344,17.9919042 L9.07799944,17.329138 L6.62636407,14.8761346 L6.00682619,17.6598257 Z M17.8128382,7.41103724 L16.7188829,6.31708196 C16.296107,5.89430601 15.6096062,5.89430601 15.1853939,6.31708196 L14.1374941,7.36498172 L16.5905203,9.81800788 L17.8128382,8.59568996 C18.1407444,8.26776101 18.1407444,7.73894338 17.8128382,7.41103724 L17.8128382,7.41103724 Z M13.4984397,8.0026454 L15.9514658,10.4556488 L9.74217924,16.6649354 L7.29054387,14.211932 L13.4984397,8.0026454 Z" id="Fill-1"></path>\n' +
                '            </g>\n' +
                '        </g>\n' +
                '    </g>\n' +
                '</svg>'));
            this.matIconRegistry.addSvgIconLiteral('AuditSafe Task', this.domSanitizer.bypassSecurityTrustHtml('<svg xmlns="http://www.w3.org/2000/svg" width="17" height="20" viewBox="0 0 17 20">\n' +
                '  <path fill="#0081CB" d="M8.18181818,20 C3.49090909,18.8545455 0,14.1363636 0,9.09090909 L0,0 C1.85406953,0.606060606 3.38118361,0.909090909 4.58134225,0.909090909 C5.7815009,0.909090909 6.98165954,0.606060606 8.18181818,3.67564428e-16 C9.12173722,0.606060606 10.3441345,0.909090909 11.8490099,0.909090909 C13.3538854,0.909090909 14.8587609,0.606060606 16.3636364,0 L16.3636364,9.09090909 C16.3636364,14.1363636 12.8727273,18.8545455 8.18181818,20 Z M8.18181818,18.1818182 C11.5909091,17.2727273 14.5454545,13.2181818 14.5454545,9.29090909 L14.5454545,2.09090909 L3.48421678,14.5663657 C3.9802662,15.2961162 4.61784565,15.9703577 5.39695512,16.5890903 C6.17606458,17.2078229 7.10435227,17.7387322 8.18181818,18.1818182 Z"/>\n' +
                '</svg>\n'));
            this.matIconRegistry.addSvgIconLiteral('round', this.domSanitizer.bypassSecurityTrustHtml('<svg fill="#000000" height="24" viewBox="0 0 24 24" width="24" xmlns="http://www.w3.org/2000/svg">\n' +
                '    <path d="M0 0h24v24H0z" fill="none"/>\n' +
                '    <path d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm0 18c-4.41 0-8-3.59-8-8s3.59-8 8-8 8 3.59 8 8-3.59 8-8 8z"/>\n' +
                '</svg>'));
            // *JS*?
            this.matIconRegistry.addSvgIconLiteral('tcpd-database-blue', this.domSanitizer.bypassSecurityTrustHtml('<svg id="ic-database" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" viewBox="0 0 24 24">\n' +
                '  <defs>\n' +
                '    <style>\n' +
                '      .cls-1 {\n' +
                '        fill: none;\n' +
                '        clip-rule: evenodd;\n' +
                '      }\n' +
                '\n' +
                '      .cls-2 {\n' +
                '        clip-path: url(#clip-path);\n' +
                '      }\n' +
                '\n' +
                '      .cls-3 {\n' +
                '        clip-path: url(#clip-path-2);\n' +
                '      }\n' +
                '\n' +
                '      .cls-4 {\n' +
                '        fill: #0081cb;\n' +
                '      }\n' +
                '    </style>\n' +
                '    <clipPath id="clip-path">\n' +
                '      <path class="cls-1" d="M-284,390.5h-12a2.49,2.49,0,0,1-1.76-.73,2.49,2.49,0,0,1-.73-1.76V376a2.49,2.49,0,0,1,.73-1.76,2.49,2.49,0,0,1,1.76-.73h12a2.49,2.49,0,0,1,1.76.73,2.49,2.49,0,0,1,.73,1.76v12a2.49,2.49,0,0,1-.73,1.76A2.49,2.49,0,0,1-284,390.5Z"/>\n' +
                '    </clipPath>\n' +
                '    <clipPath id="clip-path-2">\n' +
                '      <path class="cls-1" d="M-298,376a2,2,0,0,1,2-2h12a2,2,0,0,1,2,2v12a2,2,0,0,1-2,2h-12a2,2,0,0,1-2-2Zm-10-12h36v36h-36Z"/>\n' +
                '    </clipPath>\n' +
                '  </defs>\n' +
                '  <title>ic-database-blue</title>\n' +
                '  <g>\n' +
                '    <ellipse class="cls-4" cx="12" cy="5" rx="9" ry="3"/>\n' +
                '    <path class="cls-4" d="M12,10C7,10,3,8.66,3,7v5c0,1.66,4,3,9,3s9-1.34,9-3V7C21,8.66,17,10,12,10Z"/>\n' +
                '    <path class="cls-4" d="M12,17c-5,0-9-1.34-9-3v5c0,1.66,4,3,9,3s9-1.34,9-3V14C21,15.66,17,17,12,17Z"/>\n' +
                '  </g>\n' +
                '</svg>\n'));
        }
        /**
         * @return {?}
         */
        TcLiveappsLibModule.forRoot = /**
         * @return {?}
         */
        function () {
            return {
                ngModule: TcLiveappsLibModule,
                providers: [LiveAppsService, TcCaseDataService, TcCaseProcessesService, TcDocumentService, TcLiveAppsConfigService, TcRolesService, TcLiveAppsReportingService]
            };
        };
        TcLiveappsLibModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            LiveAppsLoginComponent,
                            LiveAppsApplicationsComponent,
                            LiveAppsCaseDataComponent,
                            LiveAppsCaseStatesComponent,
                            LiveAppsCaseActionsComponent,
                            LiveAppsCaseAuditComponent,
                            LiveAppsCaseStateAuditComponent,
                            LiveAppsRecentCasesComponent,
                            LiveAppsFavoriteCasesComponent,
                            LiveAppsDocumentsComponent,
                            LiveAppsNotesComponent,
                            LiveAppsNotesEditorComponent,
                            LiveAppsDocumentUploadDialogComponent,
                            LiveAppsDocumentViewerDialogComponent,
                            LiveAppsCaseSummaryComponent,
                            LiveAppsStateIconComponent,
                            LiveAppsApplicationConfigurationComponent,
                            LiveAppsStateIconUploadDialogComponent,
                            LiveAppsCaseListComponent,
                            LiveAppsCaseSearchComponent,
                            LiveAppsSearchWidgetComponent,
                            LiveAppsComponent,
                            LiveAppsCaseCreatorComponent,
                            LiveAppsCreatorSelectorComponent,
                            LiveAppsCreatorsComponent,
                            LiveAppsCaseActionComponent,
                            LiveAppsActionsComponent,
                            LiveAppsCaseDataDisplayComponent,
                            LiveAppsCaseCockpitComponent,
                            LiveAppsMilestoneComponent,
                            LiveAppsAppConfigurationWidgetComponent,
                            LiveAppsCaseCreatorWidgetComponent,
                            LiveAppsHomeCockpitComponent,
                            LiveAppsApplicationListComponent,
                            LiveAppsApplicationCreateButtonComponent,
                            LiveAppsCreatorDialogComponent,
                            LiveAppsSettingsComponent,
                            LiveAppsSettingsSummaryCardsComponent,
                            LiveAppsSettingsRecentCasesComponent,
                            LiveAppsSettingsRolesComponent,
                            LiveAppsRoleSwitcherComponent,
                            LiveAppsCaseCreatorsComponent,
                            ParseAuditMessagePipe,
                            LiveAppsCaseActionsListComponent,
                            LiveAppsDocumentViewerComponent,
                            LiveAppsLandingPageComponent,
                            LiveAppsActiveCasesWidgetComponent,
                            LiveAppsActiveCasesReportComponent,
                            LiveAppsActiveCasesForTypeReportComponent,
                            LiveAppsSettingsAccessControlComponent,
                            LiveAppsLegacyFormComponent,
                            LiveAppsLegacyProcessComponent,
                            LiveAppsSettingsFormsComponent,
                            LiveAppsWorkitemsComponent,
                            LiveAppsSettingsLandingComponent
                        ],
                        imports: [
                            tcCoreLib.TcCoreLibModule,
                            tcFormsLib.TcFormsLibModule,
                            http.HttpClientModule,
                            platformBrowser.BrowserModule,
                            animations.BrowserAnimationsModule,
                            material.MatButtonModule,
                            material.MatCardModule,
                            material.MatCheckboxModule,
                            material.MatListModule,
                            material.MatFormFieldModule,
                            material.MatInputModule,
                            material.MatIconModule,
                            material.MatSelectModule,
                            material.MatOptionModule,
                            material.MatDialogModule,
                            material.MatMenuModule,
                            material.MatCardModule,
                            material.MatTooltipModule,
                            material.MatTabsModule,
                            material.MatToolbarModule,
                            material.MatExpansionModule,
                            material.MatSnackBarModule,
                            material.MatProgressSpinnerModule,
                            scrolling.ScrollDispatchModule,
                            material.MatSlideToggleModule,
                            material.MatProgressBarModule,
                            material.MatTableModule,
                            material.MatRadioModule,
                            forms.FormsModule,
                            flexLayout.FlexLayoutModule,
                            ngxColorPicker.ColorPickerModule,
                            scrolling.ScrollingModule,
                            forms.ReactiveFormsModule,
                            ng2Charts.ChartsModule
                        ],
                        exports: [
                            LiveAppsLoginComponent,
                            LiveAppsApplicationsComponent,
                            LiveAppsCaseDataComponent,
                            LiveAppsCaseStatesComponent,
                            LiveAppsCaseActionsComponent,
                            LiveAppsCaseAuditComponent,
                            LiveAppsCaseStateAuditComponent,
                            LiveAppsRecentCasesComponent,
                            LiveAppsFavoriteCasesComponent,
                            LiveAppsDocumentsComponent,
                            LiveAppsNotesComponent,
                            LiveAppsNotesEditorComponent,
                            LiveAppsDocumentUploadDialogComponent,
                            LiveAppsDocumentViewerDialogComponent,
                            LiveAppsCaseSummaryComponent,
                            LiveAppsStateIconComponent,
                            LiveAppsApplicationConfigurationComponent,
                            LiveAppsStateIconUploadDialogComponent,
                            LiveAppsCaseListComponent,
                            LiveAppsCaseSearchComponent,
                            LiveAppsSearchWidgetComponent,
                            LiveAppsComponent,
                            LiveAppsCreatorSelectorComponent,
                            LiveAppsCaseCreatorComponent,
                            LiveAppsCreatorsComponent,
                            LiveAppsCaseActionComponent,
                            LiveAppsActionsComponent,
                            LiveAppsCaseDataDisplayComponent,
                            LiveAppsCaseCockpitComponent,
                            LiveAppsAppConfigurationWidgetComponent,
                            LiveAppsCaseCreatorWidgetComponent,
                            LiveAppsHomeCockpitComponent,
                            LiveAppsApplicationListComponent,
                            LiveAppsApplicationCreateButtonComponent,
                            LiveAppsCreatorDialogComponent,
                            LiveAppsSettingsComponent,
                            LiveAppsSettingsSummaryCardsComponent,
                            LiveAppsSettingsRolesComponent,
                            LiveAppsRoleSwitcherComponent,
                            LiveAppsCaseCreatorsComponent,
                            ParseAuditMessagePipe,
                            LiveAppsCaseActionsListComponent,
                            LiveAppsDocumentViewerComponent,
                            LiveAppsLandingPageComponent,
                            LiveAppsActiveCasesWidgetComponent,
                            LiveAppsActiveCasesReportComponent,
                            LiveAppsActiveCasesForTypeReportComponent,
                            LiveAppsLegacyFormComponent,
                            LiveAppsLegacyProcessComponent,
                            LiveAppsSettingsFormsComponent,
                            LiveAppsWorkitemsComponent
                        ],
                        entryComponents: [LiveAppsStateIconUploadDialogComponent, LiveAppsDocumentUploadDialogComponent, LiveAppsDocumentViewerDialogComponent, LiveAppsCreatorDialogComponent],
                        providers: [
                            tcCoreLib.RequestCacheService,
                            CaseGuard,
                            RoleGuard,
                            tcCoreLib.DurationSincePipe,
                            { provide: http.HTTP_INTERCEPTORS, useClass: tcCoreLib.CachingInterceptor, multi: true }
                            // { provide: HTTP_INTERCEPTORS, useClass: MockingInterceptor, multi: true }
                        ]
                    },] }
        ];
        /** @nocollapse */
        TcLiveappsLibModule.ctorParameters = function () { return [
            { type: material.MatIconRegistry },
            { type: platformBrowser.DomSanitizer },
            { type: common.Location }
        ]; };
        return TcLiveappsLibModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LiveAppsConfigResolver = /** @class */ (function () {
        function LiveAppsConfigResolver(tcSharedState, liveAppsConfigService, caseCardConfigService, http, location) {
            var _this = this;
            this.tcSharedState = tcSharedState;
            this.liveAppsConfigService = liveAppsConfigService;
            this.caseCardConfigService = caseCardConfigService;
            this.http = http;
            this.location = location;
            this.DEFAULT_CONFIG_URL = tcCoreLib.TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/liveAppsConfig.json');
            this.APP_ID_URL = tcCoreLib.TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/uiAppId.json');
            // note appConfigResolver will need sandboxId to create app config state record.
            // So we expect this to have been set by caller (done by tc-liveapps-lib/laConfigResolver).
            this.setSandbox = (/**
             * @param {?} sandboxId
             * @return {?}
             */
            function (sandboxId) {
                _this.sandboxId = sandboxId;
            });
            // can be used to load defaultAppConfig from a JSON config
            this.getDefaultAppConfig = (/**
             * @return {?}
             */
            function () {
                return _this.http.get(_this.DEFAULT_CONFIG_URL);
            });
            // loads uiAppId from json file in assets (appId.json)
            this.getAppId = (/**
             * @return {?}
             */
            function () {
                return _this.http.get(_this.APP_ID_URL).pipe(operators.map((/**
                 * @param {?} uiAppId
                 * @return {?}
                 */
                function (uiAppId) {
                    /** @type {?} */
                    var uiAppIdConfig = new tcCoreLib.UiAppIdConfig().deserialize(uiAppId);
                    _this.uiAppId = uiAppIdConfig.uiAppId;
                    return uiAppIdConfig;
                })));
            });
            this.triggerCardConfigFetch = (/**
             * @param {?} liveAppsConfig
             * @return {?}
             */
            function (liveAppsConfig) {
                // optimization: I want to avoid reading the card config when we display a large list of cards in the calling app
                // therefore we can trigger of a read of the card configs for each app in the config to ensure they are cached by
                // http interceptor
                /** @type {?} */
                var laConfig = new LiveAppsConfig().deserialize(liveAppsConfig);
                laConfig.applicationIds.forEach((/**
                 * @param {?} appId
                 * @return {?}
                 */
                function (appId) {
                    _this.caseCardConfigService.getCardConfig(_this.uiAppId, appId, true, false).subscribe();
                }));
            });
        }
        /**
         * @param {?} routeSnapshot
         * @return {?}
         */
        LiveAppsConfigResolver.prototype.resolve = /**
         * @param {?} routeSnapshot
         * @return {?}
         */
        function (routeSnapshot) {
            var _this = this;
            /** @type {?} */
            var appConfig = this.getAppId().pipe(operators.switchMap((/**
             * @param {?} uiAppId
             * @return {?}
             */
            function (uiAppId) { return _this.liveAppsConfigService.getLiveAppsConfig(uiAppId.uiAppId, true, false)
                .pipe(operators.mergeMap((/**
             * @param {?} liveAppsConfig
             * @return {?}
             */
            function (liveAppsConfig) {
                if (liveAppsConfig === undefined) {
                    return _this.getDefaultAppConfig().pipe(operators.flatMap((/**
                     * @param {?} config
                     * @return {?}
                     */
                    function (config) {
                        _this.defaultAppConfig = new LiveAppsConfig().deserialize(config);
                        _this.defaultAppConfig.caseIconsFolderId = _this.uiAppId + '_Icons';
                        return _this.liveAppsConfigService.createLiveAppsConfig(_this.sandboxId, uiAppId.uiAppId, _this.defaultAppConfig)
                            .pipe(operators.map((/**
                         * @param {?} result
                         * @return {?}
                         */
                        function (result) {
                            /** @type {?} */
                            var newAppConfig = _this.defaultAppConfig;
                            newAppConfig.id = result;
                            _this.liveAppsConfigService.updateLiveAppsConfig(_this.sandboxId, uiAppId.uiAppId, newAppConfig, result).subscribe((
                            // trigger a read to flush the cache since we changed it
                            // trigger a read to flush the cache since we changed it
                            /**
                             * @param {?} updatedConf
                             * @return {?}
                             */
                            function (updatedConf) {
                                _this.liveAppsConfigService.getLiveAppsConfig(_this.uiAppId, true, true).subscribe();
                            }));
                            _this.triggerCardConfigFetch(newAppConfig);
                            return newAppConfig;
                        })));
                    })));
                }
                else {
                    _this.triggerCardConfigFetch(liveAppsConfig);
                    return rxjs.of(liveAppsConfig);
                }
            }))); })));
            return appConfig;
        };
        LiveAppsConfigResolver.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        LiveAppsConfigResolver.ctorParameters = function () { return [
            { type: tcCoreLib.TcSharedStateService },
            { type: TcLiveAppsConfigService },
            { type: TcCaseCardConfigService },
            { type: http.HttpClient },
            { type: common.Location }
        ]; };
        return LiveAppsConfigResolver;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LaConfigResolver = /** @class */ (function () {
        function LaConfigResolver(sharedStateService, generalConfigService, liveAppsConfigService, documentService, http, liveAppsService, caseCardConfigService, location, router) {
            this.sharedStateService = sharedStateService;
            this.generalConfigService = generalConfigService;
            this.liveAppsConfigService = liveAppsConfigService;
            this.documentService = documentService;
            this.http = http;
            this.liveAppsService = liveAppsService;
            this.caseCardConfigService = caseCardConfigService;
            this.location = location;
            this.router = router;
        }
        /**
         * @param {?} routeSnapshot
         * @return {?}
         */
        LaConfigResolver.prototype.resolve = /**
         * @param {?} routeSnapshot
         * @return {?}
         */
        function (routeSnapshot) {
            // we will return a holder object that contains both general config and live apps config
            var _this = this;
            // we will return a holder object that contains both general config and live apps config
            /** @type {?} */
            var generalConfigResolver = new tcCoreLib.GeneralConfigResolver(this.sharedStateService, this.generalConfigService, this.http, this.location, this.router);
            /** @type {?} */
            var liveAppsConfigResolver = new LiveAppsConfigResolver(this.sharedStateService, this.liveAppsConfigService, this.caseCardConfigService, this.http, this.location);
            /** @type {?} */
            var claimResolver$ = new ClaimsResolver(this.liveAppsService).resolve().pipe(operators.flatMap((/**
             * @param {?} value
             * @return {?}
             */
            function (value) {
                /** @type {?} */
                var sandboxId = value.primaryProductionSandbox.id;
                generalConfigResolver.setSandbox(Number(sandboxId));
                liveAppsConfigResolver.setSandbox(Number(sandboxId));
                /** @type {?} */
                var generalConfig$ = generalConfigResolver.resolve();
                /** @type {?} */
                var liveAppsConfig$ = liveAppsConfigResolver.resolve(routeSnapshot);
                /** @type {?} */
                var forkJoinArray = [generalConfig$, liveAppsConfig$];
                return rxjs.forkJoin(forkJoinArray).pipe(operators.map((/**
                 * @param {?} resultArr
                 * @return {?}
                 */
                function (resultArr) {
                    return new LiveAppsConfigHolder().deserialize({ generalConfig: resultArr[0], liveAppsConfig: resultArr[1] });
                })));
            })));
            /** @type {?} */
            var resolveResp$ = claimResolver$.pipe(operators.flatMap((/**
             * @param {?} liveAppsConfigHolder
             * @return {?}
             */
            function (liveAppsConfigHolder) {
                /** @type {?} */
                var topOrgFolder$ = _this.documentService.initOrgFolder(liveAppsConfigHolder.generalConfig.uiAppId);
                /** @type {?} */
                var iconsFolder$ = _this.documentService.initOrgFolder(liveAppsConfigHolder.generalConfig.uiAppId + '_Icons');
                /** @type {?} */
                var docsFolder$ = _this.documentService.initOrgFolder(liveAppsConfigHolder.generalConfig.uiAppId + '_Docs');
                /** @type {?} */
                var forkJoinArray = [topOrgFolder$, iconsFolder$, docsFolder$];
                return rxjs.forkJoin(forkJoinArray).pipe(operators.map((/**
                 * @param {?} resultArr
                 * @return {?}
                 */
                function (resultArr) {
                    return liveAppsConfigHolder;
                })));
            })));
            return resolveResp$;
        };
        LaConfigResolver.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        LaConfigResolver.ctorParameters = function () { return [
            { type: tcCoreLib.TcSharedStateService },
            { type: tcCoreLib.TcGeneralConfigService },
            { type: TcLiveAppsConfigService },
            { type: TcDocumentService },
            { type: http.HttpClient },
            { type: LiveAppsService },
            { type: TcCaseCardConfigService },
            { type: common.Location },
            { type: router.Router }
        ]; };
        return LaConfigResolver;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var GroupsResolver = /** @class */ (function () {
        function GroupsResolver(liveapps) {
            this.liveapps = liveapps;
        }
        /**
         * @return {?}
         */
        GroupsResolver.prototype.resolve = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var claims$ = this.liveapps.getClaims()
                .pipe(operators.map((/**
             * @param {?} claim
             * @return {?}
             */
            function (claim) {
                claim.sandboxes.forEach((/**
                 * @param {?} sandbox
                 * @return {?}
                 */
                function (sandbox) {
                    if (sandbox.type === 'Production') {
                        claim.primaryProductionSandbox = sandbox;
                    }
                }));
                return claim;
            })));
            return claims$.pipe(operators.switchMap((/**
             * @param {?} claiminfo
             * @return {?}
             */
            function (claiminfo) {
                return _this.liveapps.getGroupMemberships(+claiminfo.primaryProductionSandbox.id, claiminfo.id, 1000, true).pipe(operators.map((/**
                 * @param {?} groupinfo
                 * @return {?}
                 */
                function (groupinfo) {
                    return new Groups().deserialize(groupinfo);
                })));
            })));
        };
        GroupsResolver.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        GroupsResolver.ctorParameters = function () { return [
            { type: LiveAppsService }
        ]; };
        return GroupsResolver;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AllGroupsResolver = /** @class */ (function () {
        function AllGroupsResolver(liveapps) {
            this.liveapps = liveapps;
        }
        /**
         * @return {?}
         */
        AllGroupsResolver.prototype.resolve = /**
         * @return {?}
         */
        function () {
            var _this = this;
            /** @type {?} */
            var claims$ = this.liveapps.getClaims()
                .pipe(operators.map((/**
             * @param {?} claim
             * @return {?}
             */
            function (claim) {
                claim.sandboxes.forEach((/**
                 * @param {?} sandbox
                 * @return {?}
                 */
                function (sandbox) {
                    if (sandbox.type === 'Production') {
                        claim.primaryProductionSandbox = sandbox;
                    }
                }));
                return claim;
            })));
            return claims$.pipe(operators.switchMap((/**
             * @param {?} claiminfo
             * @return {?}
             */
            function (claiminfo) {
                return _this.liveapps.getGroups(+claiminfo.primaryProductionSandbox.id, 1000, true).pipe(operators.map((/**
                 * @param {?} groupinfo
                 * @return {?}
                 */
                function (groupinfo) {
                    return new Groups().deserialize(groupinfo);
                })));
            })));
        };
        AllGroupsResolver.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AllGroupsResolver.ctorParameters = function () { return [
            { type: LiveAppsService }
        ]; };
        return AllGroupsResolver;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AllRolesResolver = /** @class */ (function () {
        function AllRolesResolver(sharedStateService, generalConfigService, http, liveapps, location, router) {
            this.sharedStateService = sharedStateService;
            this.generalConfigService = generalConfigService;
            this.http = http;
            this.liveapps = liveapps;
            this.location = location;
            this.router = router;
        }
        /**
         * @param {?} routeSnapshot
         * @return {?}
         */
        AllRolesResolver.prototype.resolve = /**
         * @param {?} routeSnapshot
         * @return {?}
         */
        function (routeSnapshot) {
            /** @type {?} */
            var claims$ = this.liveapps.getClaims()
                .pipe(operators.map((/**
             * @param {?} claim
             * @return {?}
             */
            function (claim) {
                claim.sandboxes.forEach((/**
                 * @param {?} sandbox
                 * @return {?}
                 */
                function (sandbox) {
                    if (sandbox.type === 'Production') {
                        claim.primaryProductionSandbox = sandbox;
                    }
                }));
                return claim;
            })));
            /** @type {?} */
            var generalConfigResolver = new tcCoreLib.GeneralConfigResolver(this.sharedStateService, this.generalConfigService, this.http, this.location, this.router);
            return claims$.pipe(operators.switchMap((/**
             * @param {?} claiminfo
             * @return {?}
             */
            function (claiminfo) {
                generalConfigResolver.setSandbox(Number(claiminfo.primaryProductionSandbox.id));
                /** @type {?} */
                var generalConfig$ = generalConfigResolver.resolve().pipe(operators.map((/**
                 * @param {?} generalConfig
                 * @return {?}
                 */
                function (generalConfig) {
                    return new Roles().deserialize({ roles: generalConfig.roles });
                })));
                return generalConfig$;
            })));
        };
        AllRolesResolver.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AllRolesResolver.ctorParameters = function () { return [
            { type: tcCoreLib.TcSharedStateService },
            { type: tcCoreLib.TcGeneralConfigService },
            { type: http.HttpClient },
            { type: LiveAppsService },
            { type: common.Location },
            { type: router.Router }
        ]; };
        return AllRolesResolver;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var CaseDataResolver = /** @class */ (function () {
        function CaseDataResolver(liveapps) {
            this.liveapps = liveapps;
        }
        /**
         * @param {?} routeSnapshot
         * @return {?}
         */
        CaseDataResolver.prototype.resolve = /**
         * @param {?} routeSnapshot
         * @return {?}
         */
        function (routeSnapshot) {
            var _this = this;
            /** @type {?} */
            var claims$ = this.liveapps.getClaims()
                .pipe(operators.map((/**
             * @param {?} claim
             * @return {?}
             */
            function (claim) {
                claim.sandboxes.forEach((/**
                 * @param {?} sandbox
                 * @return {?}
                 */
                function (sandbox) {
                    if (sandbox.type === 'Production') {
                        claim.primaryProductionSandbox = sandbox;
                    }
                }));
                return claim;
            })));
            return claims$.pipe(operators.switchMap((/**
             * @param {?} claiminfo
             * @return {?}
             */
            function (claiminfo) {
                return _this.liveapps.getCase(routeSnapshot.params.caseRef, +claiminfo.primaryProductionSandbox.id, routeSnapshot.params.appId, routeSnapshot.params.typeId)
                    .pipe(operators.map((/**
                 * @param {?} caseInfo
                 * @return {?}
                 */
                function (caseInfo) {
                    return caseInfo;
                })));
            })));
        };
        CaseDataResolver.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        CaseDataResolver.ctorParameters = function () { return [
            { type: LiveAppsService }
        ]; };
        return CaseDataResolver;
    }());

    exports.AccessControlConfigurationResolver = AccessControlConfigurationResolver;
    exports.AccessResolver = AccessResolver;
    exports.ActionButtonConfig = ActionButtonConfig;
    exports.AllGroupsResolver = AllGroupsResolver;
    exports.AllRolesResolver = AllRolesResolver;
    exports.ApiResponseError = ApiResponseError;
    exports.ApiResponseText = ApiResponseText;
    exports.CardConfig = CardConfig;
    exports.CaseAction = CaseAction;
    exports.CaseActionsList = CaseActionsList;
    exports.CaseAttribute = CaseAttribute;
    exports.CaseCreator = CaseCreator;
    exports.CaseCreatorSelectionContext = CaseCreatorSelectionContext;
    exports.CaseCreatorsList = CaseCreatorsList;
    exports.CaseDataResolver = CaseDataResolver;
    exports.CaseGuard = CaseGuard;
    exports.CaseInfo = CaseInfo;
    exports.CaseInfoList = CaseInfoList;
    exports.CaseInfoWithSchema = CaseInfoWithSchema;
    exports.CaseList = CaseList;
    exports.CaseRoute = CaseRoute;
    exports.CaseSearchResults = CaseSearchResults;
    exports.CaseType = CaseType;
    exports.CaseTypeReportRecord = CaseTypeReportRecord;
    exports.CaseTypeReportRecordInfo = CaseTypeReportRecordInfo;
    exports.CaseTypeState = CaseTypeState;
    exports.CaseTypeStateReport = CaseTypeStateReport;
    exports.CaseTypeStateReportRecord = CaseTypeStateReportRecord;
    exports.CaseTypeStateReportStateInfo = CaseTypeStateReportStateInfo;
    exports.CaseTypeStatesList = CaseTypeStatesList;
    exports.CaseTypeStatesListList = CaseTypeStatesListList;
    exports.CaseTypesList = CaseTypesList;
    exports.CaseTypesReport = CaseTypesReport;
    exports.ClaimsResolver = ClaimsResolver;
    exports.DEFAULT_COLORS = DEFAULT_COLORS;
    exports.DEFAULT_STATE_COLOR = DEFAULT_STATE_COLOR;
    exports.DEFAULT_TYPE_COLOR = DEFAULT_TYPE_COLOR;
    exports.DocTags = DocTags;
    exports.Document = Document;
    exports.DocumentAction = DocumentAction;
    exports.DocumentList = DocumentList;
    exports.FormTab = FormTab;
    exports.GENERIC_CASETYPE_ICON_SVG = GENERIC_CASETYPE_ICON_SVG;
    exports.GENERIC_STATE_ICON_SVG = GENERIC_STATE_ICON_SVG;
    exports.GeneralLandingPageConfig = GeneralLandingPageConfig;
    exports.Group = Group;
    exports.Groups = Groups;
    exports.GroupsResolver = GroupsResolver;
    exports.IconMap = IconMap;
    exports.JsonSchema = JsonSchema;
    exports.LaConfigResolver = LaConfigResolver;
    exports.LaProcessSelection = LaProcessSelection;
    exports.LandingPageConfig = LandingPageConfig;
    exports.LandingPageItemConfig = LandingPageItemConfig;
    exports.LiveAppsActionsComponent = LiveAppsActionsComponent;
    exports.LiveAppsActiveCasesForTypeReportComponent = LiveAppsActiveCasesForTypeReportComponent;
    exports.LiveAppsActiveCasesReportComponent = LiveAppsActiveCasesReportComponent;
    exports.LiveAppsActiveCasesWidgetComponent = LiveAppsActiveCasesWidgetComponent;
    exports.LiveAppsAppConfigurationWidgetComponent = LiveAppsAppConfigurationWidgetComponent;
    exports.LiveAppsApplicationConfigurationComponent = LiveAppsApplicationConfigurationComponent;
    exports.LiveAppsApplicationCreateButtonComponent = LiveAppsApplicationCreateButtonComponent;
    exports.LiveAppsApplicationListComponent = LiveAppsApplicationListComponent;
    exports.LiveAppsApplicationsComponent = LiveAppsApplicationsComponent;
    exports.LiveAppsCaseActionComponent = LiveAppsCaseActionComponent;
    exports.LiveAppsCaseActionsComponent = LiveAppsCaseActionsComponent;
    exports.LiveAppsCaseActionsListComponent = LiveAppsCaseActionsListComponent;
    exports.LiveAppsCaseAuditComponent = LiveAppsCaseAuditComponent;
    exports.LiveAppsCaseCockpitComponent = LiveAppsCaseCockpitComponent;
    exports.LiveAppsCaseCreatorComponent = LiveAppsCaseCreatorComponent;
    exports.LiveAppsCaseCreatorWidgetComponent = LiveAppsCaseCreatorWidgetComponent;
    exports.LiveAppsCaseCreatorsComponent = LiveAppsCaseCreatorsComponent;
    exports.LiveAppsCaseDataComponent = LiveAppsCaseDataComponent;
    exports.LiveAppsCaseDataDisplayComponent = LiveAppsCaseDataDisplayComponent;
    exports.LiveAppsCaseListComponent = LiveAppsCaseListComponent;
    exports.LiveAppsCaseStateAuditComponent = LiveAppsCaseStateAuditComponent;
    exports.LiveAppsCaseStatesComponent = LiveAppsCaseStatesComponent;
    exports.LiveAppsCaseSummaryComponent = LiveAppsCaseSummaryComponent;
    exports.LiveAppsComponent = LiveAppsComponent;
    exports.LiveAppsConfig = LiveAppsConfig;
    exports.LiveAppsConfigHolder = LiveAppsConfigHolder;
    exports.LiveAppsConfigResolver = LiveAppsConfigResolver;
    exports.LiveAppsCreatorDialogComponent = LiveAppsCreatorDialogComponent;
    exports.LiveAppsCreatorSelectorComponent = LiveAppsCreatorSelectorComponent;
    exports.LiveAppsCreatorsComponent = LiveAppsCreatorsComponent;
    exports.LiveAppsDocumentUploadDialogComponent = LiveAppsDocumentUploadDialogComponent;
    exports.LiveAppsDocumentViewerComponent = LiveAppsDocumentViewerComponent;
    exports.LiveAppsDocumentViewerDialogComponent = LiveAppsDocumentViewerDialogComponent;
    exports.LiveAppsDocumentsComponent = LiveAppsDocumentsComponent;
    exports.LiveAppsFavoriteCasesComponent = LiveAppsFavoriteCasesComponent;
    exports.LiveAppsHomeCockpitComponent = LiveAppsHomeCockpitComponent;
    exports.LiveAppsLandingPageComponent = LiveAppsLandingPageComponent;
    exports.LiveAppsLegacyFormComponent = LiveAppsLegacyFormComponent;
    exports.LiveAppsLegacyProcessComponent = LiveAppsLegacyProcessComponent;
    exports.LiveAppsLoginComponent = LiveAppsLoginComponent;
    exports.LiveAppsNotesComponent = LiveAppsNotesComponent;
    exports.LiveAppsNotesEditorComponent = LiveAppsNotesEditorComponent;
    exports.LiveAppsRecentCasesComponent = LiveAppsRecentCasesComponent;
    exports.LiveAppsRoleSwitcherComponent = LiveAppsRoleSwitcherComponent;
    exports.LiveAppsSearchWidgetComponent = LiveAppsSearchWidgetComponent;
    exports.LiveAppsService = LiveAppsService;
    exports.LiveAppsSettingsAccessControlComponent = LiveAppsSettingsAccessControlComponent;
    exports.LiveAppsSettingsComponent = LiveAppsSettingsComponent;
    exports.LiveAppsSettingsFormsComponent = LiveAppsSettingsFormsComponent;
    exports.LiveAppsSettingsLandingComponent = LiveAppsSettingsLandingComponent;
    exports.LiveAppsSettingsRecentCasesComponent = LiveAppsSettingsRecentCasesComponent;
    exports.LiveAppsSettingsRolesComponent = LiveAppsSettingsRolesComponent;
    exports.LiveAppsSettingsSummaryCardsComponent = LiveAppsSettingsSummaryCardsComponent;
    exports.LiveAppsStateIconComponent = LiveAppsStateIconComponent;
    exports.LiveAppsStateIconUploadDialogComponent = LiveAppsStateIconUploadDialogComponent;
    exports.LiveAppsWorkitemsComponent = LiveAppsWorkitemsComponent;
    exports.LoginContext = LoginContext;
    exports.Metadata = Metadata;
    exports.Note = Note;
    exports.NoteThread = NoteThread;
    exports.NotesList = NotesList;
    exports.NotesRole = NotesRole;
    exports.Notification = Notification;
    exports.NotificationCollection = NotificationCollection;
    exports.NotificationList = NotificationList;
    exports.OrgFolder = OrgFolder;
    exports.ParseAuditMessagePipe = ParseAuditMessagePipe;
    exports.Process = Process;
    exports.ProcessId = ProcessId;
    exports.PurgeResult = PurgeResult;
    exports.RoleActiveResolver = RoleActiveResolver;
    exports.RoleGuard = RoleGuard;
    exports.Roles = Roles;
    exports.RolesResolver = RolesResolver;
    exports.RouteAccessControlConfig = RouteAccessControlConfig;
    exports.RouteAccessControlConfigurationElement = RouteAccessControlConfigurationElement;
    exports.TcCaseCardConfigService = TcCaseCardConfigService;
    exports.TcCaseDataService = TcCaseDataService;
    exports.TcCaseProcessesService = TcCaseProcessesService;
    exports.TcDocumentService = TcDocumentService;
    exports.TcLiveAppsConfigService = TcLiveAppsConfigService;
    exports.TcLiveAppsReportingService = TcLiveAppsReportingService;
    exports.TcLiveappsLibModule = TcLiveappsLibModule;
    exports.TcRolesService = TcRolesService;
    exports.TcWorkitemsService = TcWorkitemsService;
    exports.Thread = Thread;
    exports.ThreadList = ThreadList;
    exports.UserInfo = UserInfo;
    exports.ɵa = TcCaseStatesService;
    exports.ɵb = TcCaseAuditService;
    exports.ɵc = LiveAppsCaseSearchComponent;
    exports.ɵd = LiveAppsMilestoneComponent;
    exports.ɵe = TcAccessControlService;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=tibco-tcstk-tc-liveapps-lib.umd.js.map
