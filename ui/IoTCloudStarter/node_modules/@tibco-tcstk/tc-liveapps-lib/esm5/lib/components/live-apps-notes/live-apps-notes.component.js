/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { LiveAppsService } from '../../services/live-apps.service';
import { take, takeUntil } from 'rxjs/operators';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { TcButtonsHelperService } from '@tibco-tcstk/tc-core-lib';
/**
 * This Component allows to list, and add Notes to a Case-Instance or other Context e.g. a whole Application.
 * Any Note can have Sub-Notes to allow real collaboration.
 *
 * Note that since this component uses a virtual scroll the parent container must have height set or the notes won't appear
 *
 * ![alt-text](../live-apps-notes.png "Notes Component Image")
 *
 * \@example <tcla-live-apps-notes></tcla-live-apps-notes>
 */
var LiveAppsNotesComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsNotesComponent, _super);
    function LiveAppsNotesComponent(liveapps, buttonsHelper) {
        var _this = _super.call(this) || this;
        _this.liveapps = liveapps;
        _this.buttonsHelper = buttonsHelper;
        /**
         * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
         */
        _this.showHeader = _this.showHeader ? _this.showHeader : true;
        _this.newNote = {};
        _this.skip = 0;
        _this.top = 20;
        _this.end = false;
        _this.toolbarButtons = [];
        _this.refresh = (/**
         * @return {?}
         */
        function () {
            _this.skip = 0;
            _this.top = 20;
            _this.end = false;
            if (_this.threads && _this.threads.threads) {
                _this.threads.threads.length = 0;
            }
            _this.getBatch();
            _this.getNotifications();
        });
        _this.getBatch = (/**
         * @return {?}
         */
        function () {
            if (!_this.end) {
                _this.liveapps.getThreads(_this.relatedItemType, _this.relatedItemId, _this.skip, _this.top)
                    .pipe(take(1), takeUntil(_this._destroyed$)).subscribe((/**
                 * @param {?} threadList
                 * @return {?}
                 */
                function (threadList) {
                    if (!_this.threads) {
                        _this.threads = threadList;
                    }
                    else {
                        // this will strip any duplicates that may have been retrieved due to fast scrolling
                        /** @type {?} */
                        var filteredEvents = threadList.threads.filter((/**
                         * @param {?} x
                         * @return {?}
                         */
                        function (x) { return _this.threads.threads.every((/**
                         * @param {?} y
                         * @return {?}
                         */
                        function (y) { return y.note.id !== x.note.id; })); }));
                        _this.threads.threads = _this.threads.threads.concat(filteredEvents);
                    }
                    if (threadList.threads.length < _this.top) {
                        _this.end = true;
                    }
                    else {
                        _this.skip = _this.skip + threadList.threads.length - 1;
                    }
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    _this.errorMessage = 'Error retrieving notes: ' + error.error.errorMsg;
                }));
            }
        });
        _this.toggleReplies = (/**
         * @param {?} thread
         * @return {?}
         */
        function (thread) {
            thread.showReplies = !thread.showReplies;
        });
        _this.toggleNewReply = (/**
         * @param {?} thread
         * @return {?}
         */
        function (thread) {
            if (!thread.newReply) {
                thread.newReply = {};
            }
            if (thread.showReplies && !thread.showNewReply) {
                thread.newReply = {};
                thread.showNewReply = true;
            }
            else {
                thread.showNewReply = !thread.showNewReply;
                thread.showReplies = !thread.showReplies;
            }
        });
        _this.createReply = (/**
         * @param {?} thread
         * @param {?} replyText
         * @return {?}
         */
        function (thread, replyText) {
            _this.liveapps.createReplyNote(thread.note, replyText, thread.note.id)
                .pipe(take(1), takeUntil(_this._destroyed$))
                .subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                _this.newNoteId = result;
                thread.newReply.text = undefined;
                _this.refresh();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.errorMessage = 'Error creating new note: ' + error.error.errorMessage; }));
        });
        _this.createThread = (/**
         * @param {?} noteText
         * @return {?}
         */
        function (noteText) {
            if (noteText !== undefined) {
                _this.liveapps.createNote(_this.relatedItemType, 'RT_CASE', _this.relatedItemId, 'comments update', '', '', noteText)
                    .pipe(take(1), takeUntil(_this._destroyed$))
                    .subscribe((/**
                 * @param {?} result
                 * @return {?}
                 */
                function (result) {
                    _this.newNoteId = result;
                    _this.newNote.text = undefined;
                    _this.refresh();
                }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) { return _this.errorMessage = 'Error creating new note: ' + error.error.errorMessage; }));
            }
        });
        _this.createToolbarButtons = (/**
         * @param {?} subscribed
         * @return {?}
         */
        function (subscribed) {
            /** @type {?} */
            var subscribeButton = _this.buttonsHelper.createButton('subscribe', 'tcs-collaboration-unsubscribed', true, 'Enable Notifications', !subscribed, !subscribed);
            /** @type {?} */
            var unSubscribeButton = _this.buttonsHelper.createButton('unsubscribe', 'tcs-collaboration-subscribed', true, 'Disable Notifications', subscribed, subscribed);
            /** @type {?} */
            var buttons = [subscribeButton, unSubscribeButton];
            return buttons;
        });
        _this.setupNotificationButtons = (/**
         * @param {?} subscribed
         * @return {?}
         */
        function (subscribed) {
            /** @type {?} */
            var buttons = _this.createToolbarButtons(subscribed);
            _this.buttonsHelper.updateButtons(buttons, _this.toolbarButtons);
        });
        _this.updateButtonDef = (/**
         * @param {?} updatedToolbarButtons
         * @return {?}
         */
        function (updatedToolbarButtons) {
            updatedToolbarButtons.forEach((/**
             * @param {?} updatedButton
             * @return {?}
             */
            function (updatedButton) {
                /** @type {?} */
                var idx = _this.toolbarButtons.findIndex((/**
                 * @param {?} item
                 * @return {?}
                 */
                function (item) { return item.id === updatedButton.id; }));
                _this.toolbarButtons[idx] = updatedButton;
            }));
        });
        _this.handleToolbarButtonEvent = (/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            if (id === 'subscribe') {
                _this.subscribe();
            }
            else if (id === 'unsubscribe') {
                _this.unsubscribe();
            }
        });
        _this.recreateButtonsForNotifications = (/**
         * @param {?} subscribed
         * @return {?}
         */
        function (subscribed) {
            /** @type {?} */
            var buttons = _this.createToolbarButtons(subscribed);
            _this.buttonsHelper.updateButtons(buttons, _this.toolbarButtons);
        });
        _this.getNotifications = (/**
         * @return {?}
         */
        function () {
            _this.liveapps.getNotifications(_this.relatedItemType, _this.relatedItemId, _this.userId)
                .pipe(take(1), takeUntil(_this._destroyed$))
                .subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                /** @type {?} */
                var notificationList = result;
                if (notificationList.notifications.length > 0) {
                    _this.subscribed = true;
                    _this.setupNotificationButtons(true);
                }
                else {
                    _this.subscribed = false;
                    _this.setupNotificationButtons(false);
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.errorMessage = 'Error creating new note: ' + error.error.errorMessage; }));
        });
        _this.subscribe = (/**
         * @return {?}
         */
        function () {
            _this.liveapps.subscribeToNotes(_this.relatedItemType, _this.relatedItemId)
                .pipe(take(1), takeUntil(_this._destroyed$))
                .subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                if (result) {
                    _this.subscribed = true;
                    _this.recreateButtonsForNotifications(true);
                }
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.errorMessage = 'Error creating new note: ' + error.error.errorMessage; }));
        });
        _this.unsubscribe = (/**
         * @return {?}
         */
        function () {
            _this.liveapps.unsubscribeToNotes(_this.relatedItemType, _this.relatedItemId, _this.userId)
                .pipe(take(1), takeUntil(_this._destroyed$))
                .subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                _this.subscribed = false;
                _this.recreateButtonsForNotifications(false);
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.errorMessage = 'Error creating new note: ' + error.error.errorMessage; }));
        });
        _this.editNote = (/**
         * @param {?} thread
         * @return {?}
         */
        function (thread) {
            thread.editMode = !thread.editMode;
        });
        _this.updateNote = (/**
         * @param {?} note
         * @param {?} updatedText
         * @return {?}
         */
        function (note, updatedText) {
            console.log('Updating note');
            note.text = updatedText;
            _this.liveapps.updateNote(note, note.id)
                .pipe(take(1), takeUntil(_this._destroyed$))
                .subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                console.log('Note updated');
                _this.refresh();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.errorMessage = 'Error updating note: ' + error.error.errorMessage; }));
        });
        _this.deleteNote = (/**
         * @param {?} id
         * @return {?}
         */
        function (id) {
            console.log('Deleting note');
            _this.liveapps.deleteNote(id)
                .pipe(take(1), takeUntil(_this._destroyed$))
                .subscribe((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                console.log('Note deleted: ' + result);
                _this.refresh();
            }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { return _this.errorMessage = 'Error creating new note: ' + error.error.errorMessage; }));
        });
        return _this;
    }
    /**
     * @return {?}
     */
    LiveAppsNotesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // this.refresh();
        this.newNote.text = '';
    };
    LiveAppsNotesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-notes',
                    template: "<div class=\"tcs-notes-pane\" fxLayout=\"column\" fxFill style=\"overflow: hidden;\">\n  <tc-tibco-cloud-widget-header fxFlex=\"nogrow\" [headerText]=\"'Notes'\" [icon]=\"'tcs-collaboration-feed'\"\n                                [toolbarButtons]=\"toolbarButtons\" [showHeader]=\"showHeader\"\n                                (toolbarButtonEvent)=\"handleToolbarButtonEvent($event)\"></tc-tibco-cloud-widget-header>\n  <div class=\"tcs-collaboration-pane\" fxLayout=\"column\" fxFlex=\"grow\" style=\"\">\n    <div class=\"tcs-collaboration-existing-threads\" fxLayout=\"column\" fxFlex>\n      <!--div *ngIf=\"threads && threads.threads.length > 0\"-->\n      <div style=\"height: 100%;\">\n        <cdk-virtual-scroll-viewport style=\"height: 100%\" itemSize=\"50\" (scrolledIndexChange)=\"getBatch()\">\n\n          <!--div class=\"tcs-collaboration-detail-box tcs-collaboration-thread\" [ngClass]=\"{ editing: thread.editMode }\" *ngFor=\"let thread of threads.threads | reverse\" fxLayout=\"column\"-->\n          <div *ngIf=\"threads && threads.threads\">\n            <div class=\"tcs-collaboration-detail-box tcs-collaboration-thread\" [ngClass]=\"{ editing: thread.editMode }\"\n                 *cdkVirtualFor=\"let thread of threads.threads\" fxLayout=\"column\">\n              <div class=\"tcs-thread-box\">\n                <!-- collaboration threads -->\n                <div class=\"tcs-collaboration-entry\">\n                  <div *ngIf=\"!thread.editMode\">\n                    <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\n                      <span class=\"tcs-collaboration-thread-author\">{{thread.note.createdByName}}</span>\n                      <div fxLayoutAlign=\"row\">\n                      <span *ngIf=\"thread.note.modifiedDate > thread.note.createdDate\" class=\"tcs-collaboration-edited\">Edited\n                      </span>\n                        <span class=\"tcs-collaboration-thread-date\">{{thread.note.modifiedDate | durationSince}}</span>\n                      </div>\n                    </div>\n                    <span class=\"tcs-collaboration-thread-text\" matTooltip=\"{{thread.note.text}}\"\n                          matTooltipShowDelay=\"1000\"\n                          matTooltipPosition=\"below\">{{thread.note.text | ellipsis: 70}}</span>\n                  </div>\n                  <tcla-live-apps-notes-editor *ngIf=\"thread.editMode\" [noteText]=\"thread.note.text\"\n                                               (noteSubmitted)=\"updateNote(thread.note, $event)\"></tcla-live-apps-notes-editor>\n                </div>\n                <div class=\"tcs-icon-row\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                  <div class=\"tcs-collaboration-thread-icon-left\">\n                    <mat-icon (click)=\"deleteNote(thread.note.id)\"\n                              class=\"tcs-icon tcs-icon-active tcs-collaboration-edit-buttons tcs-collaboration-delete-icon\"\n                              svgIcon=\"tcs-collaboration-delete\"></mat-icon>\n                    <mat-icon (click)=\"editNote(thread)\"\n                              class=\"tcs-icon tcs-icon-active tcs-collaboration-edit-buttons tcs-collaboration-edit-icon\"\n                              svgIcon=\"tcs-collaboration-edit\"></mat-icon>\n                  </div>\n                  <div class=\"tcs-collaboration-thread-icon-right\" fxLayoutAlign=\"end center\" fxLayoutGap=\"8px\">\n                    <span *ngIf=\"thread.note.thread.totalCount > 1\" class=\"tcs-collaboration-thread-replies\"\n                          (click)=\"toggleReplies(thread)\">{{thread.note.thread.totalCount - 1}} replies</span>\n                    <mat-icon (click)=\"toggleNewReply(thread)\" class=\"tcs-icon tcs-collaboration-reply-icon\"\n                              svgIcon=\"tcs-collaboration-reply\"></mat-icon>\n                  </div>\n                </div>\n              </div>\n              <div class=\"tcs-collaboration-line\"></div>\n              <!-- replies -->\n              <div class=\"tcs-collaboration-reply-box\" *ngIf=\"thread.showReplies\">\n                <div fxLayout=\"column\">\n                  <tcla-live-apps-notes-editor class=\"tcs-collaboration-new-reply-component\" *ngIf=\"thread.showNewReply\"\n                                               [isReply]=\"true\" [noteText]=\"thread.newReply.text\"\n                                               (noteSubmitted)=\"createReply(thread, $event)\"></tcla-live-apps-notes-editor>\n                  <div class=\"tcs-collaboration-line\"></div>\n                </div>\n                <div class=\"tcs-collaboration-detail-box tcs-collaboration-reply\"\n                     [ngClass]=\"{ editing: reply.editMode }\" *ngFor=\"let reply of thread.thread | reverse\"\n                     fxLayout=\"column\">\n                  <div class=\"tcs-thread-box\" fxLayout=\"row\">\n                    <mat-icon class=\"tcs-icon tcs-collaboration-reply-item-icon\"\n                              svgIcon=\"tcs-collaboration-reply\"></mat-icon>\n                    <div fxLayout=\"column\" class=\"tcs-collaboration-reply-details\">\n                      <div class=\"tcs-collaboration-entry\">\n                        <div *ngIf=\"!reply.editMode\">\n                          <div fxLayout=\"row\" fxLayoutAlign=\"space-between start\">\n                            <span class=\"tcs-collaboration-thread-author\">{{reply.createdByName}}</span>\n                            <span class=\"tcs-collaboration-thread-date\">{{reply.modifiedDate | durationSince}}</span>\n                          </div>\n                          <span class=\"tcs-collaboration-thread-text\" matTooltip=\"{{reply.text}}\"\n                                matTooltipShowDelay=\"1000\"\n                                matTooltipPosition=\"below\">{{reply.text | ellipsis: 60}}</span>\n                        </div>\n                        <tcla-live-apps-notes-editor *ngIf=\"reply.editMode\" [noteText]=\"reply.text\"\n                                                     (noteSubmitted)=\"updateNote(reply, $event)\"></tcla-live-apps-notes-editor>\n                      </div>\n                      <div class=\"tcs-icon-row\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\">\n                        <div class=\"tcs-collaboration-thread-icon-left\">\n                          <mat-icon (click)=\"deleteNote(reply.id)\"\n                                    class=\"tcs-icon tcs-icon-active tcs-collaboration-edit-buttons tcs-collaboration-delete-icon\"\n                                    svgIcon=\"tcs-collaboration-delete\"></mat-icon>\n                          <mat-icon (click)=\"editNote(reply)\"\n                                    class=\"tcs-icon tcs-icon-active tcs-collaboration-edit-buttons tcs-collaboration-edit-icon\"\n                                    svgIcon=\"tcs-collaboration-edit\"></mat-icon>\n                        </div>\n                      </div>\n                    </div>\n                  </div>\n                  <div class=\"tcs-collaboration-reply-line\"></div>\n                </div>\n              </div>\n            </div>\n          </div>\n          <div *ngIf=\"!(threads?.threads?.length > 0)\" fxLayout=\"row\" fxLayoutAlign=\"center start\" fxLayoutGap=\"10px\"\n               style=\"margin-top: 20px;\">\n            <mat-icon [svgIcon]=\"'ic-no-notes-icon'\" style=\"height: 48px; width: 48px;\"></mat-icon>\n            <div style=\"height: 100%\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n              <span class=\"tcs-no-item-text\">No notes found</span>\n            </div>\n          </div>\n        </cdk-virtual-scroll-viewport>\n      </div>\n    </div>\n    <tcla-live-apps-notes-editor class=\"tcs-collaboration-new-note-component\" [noteText]=\"newNote.text\"\n                                 (noteSubmitted)=\"createThread($event)\"></tcla-live-apps-notes-editor>\n  </div>\n</div>\n",
                    styles: [".tcs-notes-pane{border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff}.tcs-collaboration-pane{padding-top:10px}.tcs-collaboration-header{min-height:40px;height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-collaboration-header-text{margin-left:10px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px}.tcs-collaboration-thread-icon-left{height:24px;width:50px}.tcs-collaboration-existing-threads{overflow-y:auto}.tcs-collaboration-detail-box{min-height:85px;flex-shrink:0}.tcs-collaboration-detail-box.editing{min-height:109px}.tcs-collaboration-detail-box.editing>.tcs-thread-box{height:110px;background-color:#eef0f7}.tcs-collaboration-new-reply-box{-webkit-transition:background-color .5s;transition:background-color .5s;background-color:#eef0f7;margin-left:20px;padding-right:20px}.tcs-collaboration-detail-box.tcs-collaboration-reply.editing{min-height:100px}.tcs-collaboration-reply{padding-left:20px}.tcs-thread-box{height:86px}.tcs-thread-box:hover{background-color:#eef0f7;-webkit-transition:background-color .5s;transition:background-color .5s}.tcs-thread-box:hover .tcs-icon.tcs-icon-active{display:inline-block}.tcs-thread-box .tcs-icon.tcs-icon-active{display:none}.tcs-collaboration-entry{padding:10px 20px}.tcs-icon-row{padding-left:20px;padding-right:20px;padding-bottom:5px}.tcs-collaboration-thread-author{font-size:14px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px}.tcs-collaboration-thread-text{font-size:11px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px}.tcs-collaboration-thread-date{font-size:10px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#b6b6b6}.tcs-collaboration-edited{font-size:10px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#ef5350;padding-right:4px}.tcs-collaboration-reply-icon{-webkit-transform:scale(-1,1);transform:scale(-1,1)}.tcs-collaboration-reply-item-icon{-webkit-transform:scale(1,-1);transform:scale(1,-1);margin-top:10px}.tcs-collaboration-reply-details{width:100%}.tcs-collaboration-thread-replies{font-size:12px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#0081cb}.tcs-icon{height:20px;width:20px}:host ::ng-deep .tcs-icon.tcs-collaboration-edit-buttons:hover path.svg-content{fill:#0081cb;cursor:pointer}:host ::ng-deep .tcs-icon.tcs-collaboration-edit-buttons:hover g.svg-content{fill:#0081cb;cursor:pointer}.tcs-icon.tcs-collaboration-edit-icon{margin-left:5px}.tcs-icon.tcs-collaboration-send-icon{height:24px;width:24px;margin-left:12px}:host ::ng-deep .tcs-icon.tcs-collaboration-send-icon:hover path.svg-content{fill:#0081cb}.tcs-collaboration-line{padding:0;margin:0 20px;border-bottom:1.1px solid #f4f4f4}.tcs-collaboration-reply-line{padding:0;margin-top:0;margin-right:20px;margin-bottom:0;border-bottom:1.1px solid #f4f4f4}.tcs-collaboration-new-thread{margin-left:20px;margin-right:20px;max-height:85px;height:85px;min-height:85px}.tcs-collaboration-edit-thread{margin-top:10px}.tcs-collaboration-new-reply{margin:10px 20px}.tcs-collaboration-input{height:55px;max-width:100%;border-color:#d5e6ff;font-size:11px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#b6b6b6;resize:none;border-radius:3px}.tcs-collaboration-reply-textbox{height:55px;max-width:100%;border-color:#d5e6ff;font-size:11px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#b6b6b6;resize:none;border-radius:3px;margin-top:20px;margin-bottom:20px}.tcs-collaboration-edit{height:55px;max-width:100%;border-color:#d5e6ff;font-size:11px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#b6b6b6;resize:none;border-radius:3px}.tcs-collaboration-new-thread-form{max-width:90%;max-height:100%}.tcs-collaboration-new-note-component,.tcs-collaboration-new-reply-component{height:85px;min-height:85px;max-height:85px;margin-left:20px;margin-right:20px}.tcs-no-item-text{font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#b6b6b6}"]
                }] }
    ];
    /** @nocollapse */
    LiveAppsNotesComponent.ctorParameters = function () { return [
        { type: LiveAppsService },
        { type: TcButtonsHelperService }
    ]; };
    LiveAppsNotesComponent.propDecorators = {
        relatedItemType: [{ type: Input }],
        relatedItemId: [{ type: Input }],
        userId: [{ type: Input }],
        showHeader: [{ type: Input }]
    };
    return LiveAppsNotesComponent;
}(LiveAppsComponent));
export { LiveAppsNotesComponent };
if (false) {
    /**
     * itemType for notes collection
     * @type {?}
     */
    LiveAppsNotesComponent.prototype.relatedItemType;
    /**
     * itemId for notes collection
     * @type {?}
     */
    LiveAppsNotesComponent.prototype.relatedItemId;
    /**
     * The ID of the logged user
     * @type {?}
     */
    LiveAppsNotesComponent.prototype.userId;
    /**
     * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
     * @type {?}
     */
    LiveAppsNotesComponent.prototype.showHeader;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.notes;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.errorMessage;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.newNote;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.newNoteId;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.delNoteId;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.threads;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.subscribed;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.skip;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.top;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.end;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.toolbarButtons;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.refresh;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.getBatch;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.toggleReplies;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.toggleNewReply;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.createReply;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.createThread;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsNotesComponent.prototype.createToolbarButtons;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.setupNotificationButtons;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.updateButtonDef;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.handleToolbarButtonEvent;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.recreateButtonsForNotifications;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.getNotifications;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.subscribe;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.unsubscribe;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.editNote;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.updateNote;
    /** @type {?} */
    LiveAppsNotesComponent.prototype.deleteNote;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsNotesComponent.prototype.liveapps;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsNotesComponent.prototype.buttonsHelper;
}
//# sourceMappingURL=data:application/json;base64,