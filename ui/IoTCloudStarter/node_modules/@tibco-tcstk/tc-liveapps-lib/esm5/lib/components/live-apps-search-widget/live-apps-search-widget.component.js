/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { CaseType } from '../../models/liveappsdata';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { LiveAppsCaseSearchComponent } from '../live-apps-case-search/live-apps-case-search.component';
import { LiveAppsService } from '../../services/live-apps.service';
/**
 * High Level search widget component (wraps others)
 * This Component allows to search for existing Cases and list Case Cards.
 *
 * ![alt-text](../live-apps-search-widget.png "")
 *
 * \@example <tcla-live-apps-search-widget></tcla-live-apps-search-widget>
 */
var LiveAppsSearchWidgetComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsSearchWidgetComponent, _super);
    function LiveAppsSearchWidgetComponent(liveapps) {
        var _this = _super.call(this) || this;
        _this.liveapps = liveapps;
        /**
         * ~event caseSelected : Case Clicked
         * ~payload string : emits case reference when a case is clicked (so parent can navigate to case)
         */
        _this.caseSelected = new EventEmitter();
        // case search
        _this.matchedRefs = [];
        // handle case search results
        _this.handleSearchResults = (/**
         * @param {?} data
         * @return {?}
         */
        function (data) {
            _this.message = undefined;
            _this.matchedRefs = data.caserefs;
            _this.searchString = data.searchString;
        });
        _this.handleClearMatches = (/**
         * @return {?}
         */
        function () {
            _this.caseSearchComponent.clearResults();
            _this.matchedRefs = [];
            _this.message = undefined;
        });
        // case clicked
        _this.clickCaseAction = (/**
         * @param {?} caseReference
         * @return {?}
         */
        function (caseReference) {
            _this.caseSelected.emit(caseReference);
        });
        _this.refresh = (/**
         * @return {?}
         */
        function () {
            if (_this.caseSearchComponent) {
                _this.caseSearchComponent.refresh();
            }
        });
        _this.searchCasesByState = (/**
         * @param {?} stateId
         * @param {?} stateLabel
         * @param {?} appId
         * @param {?} typeId
         * @param {?} message
         * @return {?}
         */
        function (stateId, stateLabel, appId, typeId, message) {
            _this.caseSearchComponent.setCaseType(new CaseType().deserialize({ applicationId: appId, id: typeId }));
            _this.caseSearchComponent.setSelectedStateId(stateId, stateLabel);
            _this.message = message;
            _this.liveapps.caseSearchEntries('', _this.sandboxId, appId, typeId, true, 0, 1000, stateId).subscribe((/**
             * @param {?} results
             * @return {?}
             */
            function (results) {
                _this.matchedRefs = results.caserefs;
            }));
        });
        return _this;
    }
    LiveAppsSearchWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-search-widget',
                    template: "<div>\n  <div fxLayout=\"row\" style=\"margin-left: 50px; margin-right: 50px; margin-top: 10px; margin-bottom: 10px;\">\n    <tcla-live-apps-case-search fxFlex fxLayoutAlign=\"center center\" [sandboxId]=\"sandboxId\" [appIds]=\"appIds\" (foundRefs)=\"handleSearchResults($event)\"></tcla-live-apps-case-search>\n  </div>\n  <div *ngIf=\"matchedRefs.length>0\" fxLayout=\"row\" fxLayoutAlign=\"space-around start\" style=\"margin-left: 50px; margin-right: 50px; margin-top: 20px; margin-bottom: 20px\">\n      <tcla-live-apps-case-list fxFlex [sandboxId]=\"sandboxId\" [uiAppId]=\"uiAppId\" [caseRefs]=\"matchedRefs\" [displayType]=\"'list'\" [headerText]=\"'Matching Cases'\" [headerMessage]=\"message\" [highlight]=\"searchString\" (clickCase)=\"clickCaseAction($event)\" (clearMatches)=\"handleClearMatches()\"></tcla-live-apps-case-list>\n  </div>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    LiveAppsSearchWidgetComponent.ctorParameters = function () { return [
        { type: LiveAppsService }
    ]; };
    LiveAppsSearchWidgetComponent.propDecorators = {
        sandboxId: [{ type: Input }],
        uiAppId: [{ type: Input }],
        appIds: [{ type: Input }],
        caseSelected: [{ type: Output }],
        caseSearchComponent: [{ type: ViewChild, args: [LiveAppsCaseSearchComponent, { static: false },] }]
    };
    return LiveAppsSearchWidgetComponent;
}(LiveAppsComponent));
export { LiveAppsSearchWidgetComponent };
if (false) {
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsSearchWidgetComponent.prototype.sandboxId;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     * @type {?}
     */
    LiveAppsSearchWidgetComponent.prototype.uiAppId;
    /**
     * The list of LA Application IDs you want to handle
     * @type {?}
     */
    LiveAppsSearchWidgetComponent.prototype.appIds;
    /**
     * ~event caseSelected : Case Clicked
     * ~payload string : emits case reference when a case is clicked (so parent can navigate to case)
     * @type {?}
     */
    LiveAppsSearchWidgetComponent.prototype.caseSelected;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.caseSearchComponent;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.matchedRefs;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.searchString;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.message;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.handleSearchResults;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.handleClearMatches;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.clickCaseAction;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.refresh;
    /** @type {?} */
    LiveAppsSearchWidgetComponent.prototype.searchCasesByState;
    /**
     * @type {?}
     * @private
     */
    LiveAppsSearchWidgetComponent.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLXNlYXJjaC13aWRnZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2xpdmUtYXBwcy1zZWFyY2gtd2lkZ2V0L2xpdmUtYXBwcy1zZWFyY2gtd2lkZ2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUUsU0FBUyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQ3hGLE9BQU8sRUFBb0IsUUFBUSxFQUFDLE1BQU0sMkJBQTJCLENBQUM7QUFDdEUsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sc0RBQXNELENBQUM7QUFDdkYsT0FBTyxFQUFDLDJCQUEyQixFQUFDLE1BQU0sMERBQTBELENBQUM7QUFDckcsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGtDQUFrQyxDQUFDOzs7Ozs7Ozs7QUFZakU7SUFLbUQseURBQWlCO0lBNkJsRSx1Q0FBb0IsUUFBeUI7UUFBN0MsWUFDRSxpQkFBTyxTQUNSO1FBRm1CLGNBQVEsR0FBUixRQUFRLENBQWlCOzs7OztRQVRuQyxrQkFBWSxHQUF5QixJQUFJLFlBQVksRUFBVSxDQUFDOztRQUsxRSxpQkFBVyxHQUFhLEVBQUUsQ0FBQzs7UUFTcEIseUJBQW1COzs7O1FBQUcsVUFBQyxJQUF1QjtZQUNuRCxLQUFJLENBQUMsT0FBTyxHQUFHLFNBQVMsQ0FBQztZQUN6QixLQUFJLENBQUMsV0FBVyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUM7WUFDakMsS0FBSSxDQUFDLFlBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDO1FBQ3hDLENBQUMsRUFBQTtRQUVNLHdCQUFrQjs7O1FBQUc7WUFDMUIsS0FBSSxDQUFDLG1CQUFtQixDQUFDLFlBQVksRUFBRSxDQUFDO1lBQ3hDLEtBQUksQ0FBQyxXQUFXLEdBQUcsRUFBRSxDQUFDO1lBQ3RCLEtBQUksQ0FBQyxPQUFPLEdBQUcsU0FBUyxDQUFDO1FBQzNCLENBQUMsRUFBQTs7UUFHTSxxQkFBZTs7OztRQUFHLFVBQUMsYUFBYTtZQUNyQyxLQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUN4QyxDQUFDLEVBQUE7UUFFTSxhQUFPOzs7UUFBRztZQUNmLElBQUksS0FBSSxDQUFDLG1CQUFtQixFQUFFO2dCQUM1QixLQUFJLENBQUMsbUJBQW1CLENBQUMsT0FBTyxFQUFFLENBQUM7YUFDcEM7UUFDSCxDQUFDLEVBQUE7UUFFTSx3QkFBa0I7Ozs7Ozs7O1FBQUcsVUFBQyxPQUFlLEVBQUUsVUFBa0IsRUFBRSxLQUFhLEVBQUUsTUFBYyxFQUFFLE9BQWU7WUFDOUcsS0FBSSxDQUFDLG1CQUFtQixDQUFDLFdBQVcsQ0FBQyxJQUFJLFFBQVEsRUFBRSxDQUFDLFdBQVcsQ0FBRSxFQUFFLGFBQWEsRUFBRyxLQUFLLEVBQUUsRUFBRSxFQUFFLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztZQUN6RyxLQUFJLENBQUMsbUJBQW1CLENBQUMsa0JBQWtCLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO1lBQ2pFLEtBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO1lBQ3ZCLEtBQUksQ0FBQyxRQUFRLENBQUMsaUJBQWlCLENBQUMsRUFBRSxFQUFFLEtBQUksQ0FBQyxTQUFTLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLENBQUMsQ0FBQyxTQUFTOzs7O1lBQ2xHLFVBQUEsT0FBTztnQkFDTCxLQUFJLENBQUMsV0FBVyxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUM7WUFDdEMsQ0FBQyxFQUNGLENBQUM7UUFDSixDQUFDLEVBQUE7O0lBbkNELENBQUM7O2dCQXBDRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDhCQUE4QjtvQkFDeEMseTJCQUF1RDs7aUJBRXhEOzs7O2dCQWhCTyxlQUFlOzs7NEJBcUJwQixLQUFLOzBCQUtMLEtBQUs7eUJBS0wsS0FBSzsrQkFNTCxNQUFNO3NDQUdOLFNBQVMsU0FBQywyQkFBMkIsRUFBRSxFQUFDLE1BQU0sRUFBRSxLQUFLLEVBQUM7O0lBNkN6RCxvQ0FBQztDQUFBLEFBekVELENBS21ELGlCQUFpQixHQW9FbkU7U0FwRVksNkJBQTZCOzs7Ozs7SUFJeEMsa0RBQTJCOzs7OztJQUszQixnREFBeUI7Ozs7O0lBS3pCLCtDQUEwQjs7Ozs7O0lBTTFCLHFEQUEwRTs7SUFHMUUsNERBQTBHOztJQUUxRyxvREFBMkI7O0lBQzNCLHFEQUFxQjs7SUFDckIsZ0RBQWdCOztJQU9oQiw0REFJQzs7SUFFRCwyREFJQzs7SUFHRCx3REFFQzs7SUFFRCxnREFJQzs7SUFFRCwyREFTQzs7Ozs7SUFyQ1csaURBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0LCBWaWV3Q2hpbGR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDYXNlU2VhcmNoUmVzdWx0cywgQ2FzZVR5cGV9IGZyb20gJy4uLy4uL21vZGVscy9saXZlYXBwc2RhdGEnO1xuaW1wb3J0IHtMaXZlQXBwc0NvbXBvbmVudH0gZnJvbSAnLi4vbGl2ZS1hcHBzLWNvbXBvbmVudC9saXZlLWFwcHMtY29tcG9uZW50LmNvbXBvbmVudCc7XG5pbXBvcnQge0xpdmVBcHBzQ2FzZVNlYXJjaENvbXBvbmVudH0gZnJvbSAnLi4vbGl2ZS1hcHBzLWNhc2Utc2VhcmNoL2xpdmUtYXBwcy1jYXNlLXNlYXJjaC5jb21wb25lbnQnO1xuaW1wb3J0IHtMaXZlQXBwc1NlcnZpY2V9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2xpdmUtYXBwcy5zZXJ2aWNlJztcbmltcG9ydCB7U3ViamVjdH0gZnJvbSAncnhqcyc7XG5cbi8qKlxuICogSGlnaCBMZXZlbCBzZWFyY2ggd2lkZ2V0IGNvbXBvbmVudCAod3JhcHMgb3RoZXJzKVxuICogVGhpcyBDb21wb25lbnQgYWxsb3dzIHRvIHNlYXJjaCBmb3IgZXhpc3RpbmcgQ2FzZXMgYW5kIGxpc3QgQ2FzZSBDYXJkcy5cbiAqXG4gKiAhW2FsdC10ZXh0XSguLi9saXZlLWFwcHMtc2VhcmNoLXdpZGdldC5wbmcgXCJcIilcbiAqXG4gKkBleGFtcGxlIDx0Y2xhLWxpdmUtYXBwcy1zZWFyY2gtd2lkZ2V0PjwvdGNsYS1saXZlLWFwcHMtc2VhcmNoLXdpZGdldD5cbiAqL1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0Y2xhLWxpdmUtYXBwcy1zZWFyY2gtd2lkZ2V0JyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpdmUtYXBwcy1zZWFyY2gtd2lkZ2V0LmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbGl2ZS1hcHBzLXNlYXJjaC13aWRnZXQuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIExpdmVBcHBzU2VhcmNoV2lkZ2V0Q29tcG9uZW50IGV4dGVuZHMgTGl2ZUFwcHNDb21wb25lbnQge1xuICAvKipcbiAgICogc2FuZGJveElkIC0gdGhpcyBjb21lcyBmcm9tIGNsYWltcyByZXNvbHZlclxuICAgKi9cbiAgQElucHV0KCkgc2FuZGJveElkOiBudW1iZXI7XG5cbiAgLyoqXG4gICAqIFRoZSBBcHBsaWNhdGlvbiBJRCBvZiB0aGUgVUkgKHNob3VsZCBpZGVhbGx5IGJlIHVuaXF1ZSBhcyBpdCBpcyBzaGFyZWQgc3RhdGUga2V5KVxuICAgKi9cbiAgQElucHV0KCkgdWlBcHBJZDogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgbGlzdCBvZiBMQSBBcHBsaWNhdGlvbiBJRHMgeW91IHdhbnQgdG8gaGFuZGxlXG4gICAqL1xuICBASW5wdXQoKSBhcHBJZHM6IHN0cmluZ1tdO1xuXG4gIC8qKlxuICAgKiB+ZXZlbnQgY2FzZVNlbGVjdGVkIDogQ2FzZSBDbGlja2VkXG4gICAqIH5wYXlsb2FkIHN0cmluZyA6IGVtaXRzIGNhc2UgcmVmZXJlbmNlIHdoZW4gYSBjYXNlIGlzIGNsaWNrZWQgKHNvIHBhcmVudCBjYW4gbmF2aWdhdGUgdG8gY2FzZSlcbiAgICovXG4gIEBPdXRwdXQoKSBjYXNlU2VsZWN0ZWQ6IEV2ZW50RW1pdHRlcjxzdHJpbmc+ID0gbmV3IEV2ZW50RW1pdHRlcjxzdHJpbmc+KCk7XG5cblxuICBAVmlld0NoaWxkKExpdmVBcHBzQ2FzZVNlYXJjaENvbXBvbmVudCwge3N0YXRpYzogZmFsc2V9KSBjYXNlU2VhcmNoQ29tcG9uZW50OiBMaXZlQXBwc0Nhc2VTZWFyY2hDb21wb25lbnQ7XG4gIC8vIGNhc2Ugc2VhcmNoXG4gIG1hdGNoZWRSZWZzOiBzdHJpbmdbXSA9IFtdO1xuICBzZWFyY2hTdHJpbmc6IHN0cmluZztcbiAgbWVzc2FnZTogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgbGl2ZWFwcHM6IExpdmVBcHBzU2VydmljZSkge1xuICAgIHN1cGVyKCk7XG4gIH1cblxuICAvLyBoYW5kbGUgY2FzZSBzZWFyY2ggcmVzdWx0c1xuICBwdWJsaWMgaGFuZGxlU2VhcmNoUmVzdWx0cyA9IChkYXRhOiBDYXNlU2VhcmNoUmVzdWx0cykgPT4ge1xuICAgIHRoaXMubWVzc2FnZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLm1hdGNoZWRSZWZzID0gZGF0YS5jYXNlcmVmcztcbiAgICB0aGlzLnNlYXJjaFN0cmluZyA9IGRhdGEuc2VhcmNoU3RyaW5nO1xuICB9XG5cbiAgcHVibGljIGhhbmRsZUNsZWFyTWF0Y2hlcyA9ICgpID0+IHtcbiAgICB0aGlzLmNhc2VTZWFyY2hDb21wb25lbnQuY2xlYXJSZXN1bHRzKCk7XG4gICAgdGhpcy5tYXRjaGVkUmVmcyA9IFtdO1xuICAgIHRoaXMubWVzc2FnZSA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIC8vIGNhc2UgY2xpY2tlZFxuICBwdWJsaWMgY2xpY2tDYXNlQWN0aW9uID0gKGNhc2VSZWZlcmVuY2UpID0+IHtcbiAgICB0aGlzLmNhc2VTZWxlY3RlZC5lbWl0KGNhc2VSZWZlcmVuY2UpO1xuICB9XG5cbiAgcHVibGljIHJlZnJlc2ggPSAoKSA9PiB7XG4gICAgaWYgKHRoaXMuY2FzZVNlYXJjaENvbXBvbmVudCkge1xuICAgICAgdGhpcy5jYXNlU2VhcmNoQ29tcG9uZW50LnJlZnJlc2goKTtcbiAgICB9XG4gIH1cblxuICBwdWJsaWMgc2VhcmNoQ2FzZXNCeVN0YXRlID0gKHN0YXRlSWQ6IG51bWJlciwgc3RhdGVMYWJlbDogc3RyaW5nLCBhcHBJZDogc3RyaW5nLCB0eXBlSWQ6IHN0cmluZywgbWVzc2FnZTogc3RyaW5nKSA9PiB7XG4gICAgdGhpcy5jYXNlU2VhcmNoQ29tcG9uZW50LnNldENhc2VUeXBlKG5ldyBDYXNlVHlwZSgpLmRlc2VyaWFsaXplKCB7IGFwcGxpY2F0aW9uSWQgOiBhcHBJZCwgaWQ6IHR5cGVJZCB9KSk7XG4gICAgdGhpcy5jYXNlU2VhcmNoQ29tcG9uZW50LnNldFNlbGVjdGVkU3RhdGVJZChzdGF0ZUlkLCBzdGF0ZUxhYmVsKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xuICAgIHRoaXMubGl2ZWFwcHMuY2FzZVNlYXJjaEVudHJpZXMoJycsIHRoaXMuc2FuZGJveElkLCBhcHBJZCwgdHlwZUlkLCB0cnVlLCAwLCAxMDAwLCBzdGF0ZUlkKS5zdWJzY3JpYmUoXG4gICAgICByZXN1bHRzID0+IHtcbiAgICAgICAgdGhpcy5tYXRjaGVkUmVmcyA9IHJlc3VsdHMuY2FzZXJlZnM7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG59XG4iXX0=