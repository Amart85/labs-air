/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { LiveAppsApplicationsComponent } from '../live-apps-applications/live-apps-applications.component';
import { map, take, takeUntil } from 'rxjs/operators';
import { MatSelectionList } from '@angular/material';
/**
 * Special rendering of LiveAppsApplicationsComponent
 *
 * \@example <tcla-live-apps-application-list></tcla-live-apps-application-list>
 */
var LiveAppsApplicationListComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsApplicationListComponent, _super);
    function LiveAppsApplicationListComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * The app Ids selected (output)
         */
        _this.selectedAppIds = [];
        /**
         * ~event appsSelected : Applications selected in component (CaseType objects)
         * ~payload CaseType[] : Array of CaseType objects of what was selected
         */
        _this.appsSelected = new EventEmitter();
        /**
         * ~event appIdsSelected : Applications selected in component (appIds)
         * ~payload string[] : selected App Ids from the application list (used on config)
         */
        _this.appIdsSelected = new EventEmitter();
        _this.handleAppSelection = (/**
         * @param {?} selectionEvent
         * @return {?}
         */
        function (selectionEvent) {
            _this.appsSelected.emit(selectionEvent);
            /** @type {?} */
            var selIds = [];
            selectionEvent.forEach((/**
             * @param {?} selected
             * @return {?}
             */
            function (selected) {
                selIds.push(selected.applicationId);
            }));
            _this.appIdsSelected.emit(selIds);
        });
        _this.handleSelectAll = (/**
         * @return {?}
         */
        function () {
            _this.mySelectedOptions = _this.applications.casetypes;
            _this.appIdsSelected.emit(_this.getAppIds(_this.mySelectedOptions));
            _this.appsSelected.emit(_this.applications.casetypes);
        });
        _this.handleDeselectAll = (/**
         * @return {?}
         */
        function () {
            _this.mySelectedOptions = [];
            _this.appIdsSelected.emit([]);
            _this.appsSelected.emit([]);
        });
        _this.getAppIds = (/**
         * @param {?} casetypes
         * @return {?}
         */
        function (casetypes) {
            /** @type {?} */
            var selIds = [];
            casetypes.forEach((/**
             * @param {?} selected
             * @return {?}
             */
            function (selected) {
                selIds.push(selected.applicationId);
            }));
            return selIds;
        });
        _this.refresh = (/**
         * @param {?} bypassCache
         * @return {?}
         */
        function (bypassCache) {
            _this.liveapps.getApplications(_this.sandboxId, _this.appIds, 100, bypassCache)
                .pipe(take(1), takeUntil(_this._destroyed$), map((/**
             * @param {?} applicationList
             * @return {?}
             */
            function (applicationList) {
                _this.applications = applicationList;
                // handle single app selection input
                if (_this.selectedApp && _this.selectedApp.applicationId) {
                    _this.selectedApp = applicationList.casetypes.find((/**
                     * @param {?} casetype
                     * @return {?}
                     */
                    function (casetype) {
                        return casetype.applicationId === _this.selectedApp.applicationId;
                    }));
                    // this.selection.emit(this.selectedApp);
                }
                else if (_this.selectedAppIds && _this.selectedAppIds.length > 0) {
                    // pre select any casetypes that were passed in the selectedAppIds input attribute
                    _this.mySelectedOptions = _this.applications.casetypes.filter((/**
                     * @param {?} casetype
                     * @return {?}
                     */
                    function (casetype) {
                        return (_this.selectedAppIds.findIndex((/**
                         * @param {?} ct
                         * @return {?}
                         */
                        function (ct) {
                            return ct === casetype.applicationId;
                        })) !== -1);
                    }));
                }
            })))
                .subscribe(null, (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { _this.errorMessage = 'Error retrieving applications: ' + error.error.errorMsg; }));
        });
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    LiveAppsApplicationListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // only interested in initial selection - catching every change would create an infinite loop!
        if (changes.selectedAppIds && (changes.selectedAppIds.firstChange)) {
            this.refresh(false);
        }
    };
    /**
     * @return {?}
     */
    LiveAppsApplicationListComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // leave this blank so superclass ngOnInit not called
    };
    LiveAppsApplicationListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-application-list',
                    template: "<div fxFlex style=\"padding: 10px;\" fxLayout=\"column\">\n  <div fxLayout=\"row\" class=\"tcs-application-list-buttons\">\n    <button mat-button (click)=\"handleSelectAll()\">\n      <span>Select All</span>\n    </button>\n    <button mat-button (click)=\"handleDeselectAll()\">\n      <span>Deselect All</span>\n    </button>\n  </div>\n  <mat-selection-list class=\"tcs-application-list\" #selectedApps [(ngModel)]=\"mySelectedOptions\" (ngModelChange)=\"handleAppSelection($event)\"\n                      fxLayout=\"column\" fxLayout=\"row wrap\">\n    <mat-list-option class=\"tcs-application-option\" checkboxPosition=\"before\"\n                     *ngFor=\"let casetype of applications.casetypes\"\n                     [value]=\"casetype\">\n      <span>{{casetype.label}}</span>\n    </mat-list-option>\n  </mat-selection-list>\n</div>\n",
                    styles: [".tcs-application-option{max-width:320px}.tcs-application-list{overflow:auto}.tcs-application-list-buttons{min-height:40px}"]
                }] }
    ];
    LiveAppsApplicationListComponent.propDecorators = {
        appSelectionList: [{ type: ViewChild, args: [MatSelectionList, { static: false },] }],
        selectedAppIds: [{ type: Input }],
        appsSelected: [{ type: Output }],
        appIdsSelected: [{ type: Output }]
    };
    return LiveAppsApplicationListComponent;
}(LiveAppsApplicationsComponent));
export { LiveAppsApplicationListComponent };
if (false) {
    /** @type {?} */
    LiveAppsApplicationListComponent.prototype.appSelectionList;
    /**
     * The app Ids selected (output)
     * @type {?}
     */
    LiveAppsApplicationListComponent.prototype.selectedAppIds;
    /**
     * ~event appsSelected : Applications selected in component (CaseType objects)
     * ~payload CaseType[] : Array of CaseType objects of what was selected
     * @type {?}
     */
    LiveAppsApplicationListComponent.prototype.appsSelected;
    /**
     * ~event appIdsSelected : Applications selected in component (appIds)
     * ~payload string[] : selected App Ids from the application list (used on config)
     * @type {?}
     */
    LiveAppsApplicationListComponent.prototype.appIdsSelected;
    /** @type {?} */
    LiveAppsApplicationListComponent.prototype.mySelectedOptions;
    /** @type {?} */
    LiveAppsApplicationListComponent.prototype.handleAppSelection;
    /** @type {?} */
    LiveAppsApplicationListComponent.prototype.handleSelectAll;
    /** @type {?} */
    LiveAppsApplicationListComponent.prototype.handleDeselectAll;
    /**
     * @type {?}
     * @private
     */
    LiveAppsApplicationListComponent.prototype.getAppIds;
    /** @type {?} */
    LiveAppsApplicationListComponent.prototype.refresh;
}
//# sourceMappingURL=data:application/json;base64,