/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
/**
 * Editor component to edit a note
 *
 * ![alt-text](../live-apps-notes-editor.png "")
 *
 * \@example <tcla-live-apps-notes-editor></tcla-live-apps-notes-editor>
 */
var LiveAppsNotesEditorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsNotesEditorComponent, _super);
    function LiveAppsNotesEditorComponent() {
        var _this = _super.call(this) || this;
        // use 'CASE_APP' to share notes with case manager
        _this.isReply = false;
        /**
         * ~event noteSubmitted : Internal
         */
        _this.noteSubmitted = new EventEmitter(); // notify text submitted
        _this.submitNote = (/**
         * @param {?} noteText
         * @return {?}
         */
        function (noteText) {
            _this.noteSubmitted.emit(noteText);
            _this.noteText = undefined;
        });
        return _this;
    }
    LiveAppsNotesEditorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-notes-editor',
                    template: "<div class=\"tcs-collaboration-new-thread\" fxLayout=\"row\" fxLayoutAlign=\"space-between center\" fxFlex>\n  <mat-icon *ngIf=\"isReply\" class=\"tcs-icon tcs-collaboration-reply-item-icon\" svgIcon=\"tcs-collaboration-reply\"></mat-icon>\n  <form class=\"tcs-collaboration-new-thread-form\" #newThreadForm=\"ngForm\" fxFlex>\n    <textarea fxFlex class=\"tcs-collaboration-input\" [(ngModel)]=\"noteText\" name=\"noteText\" md-maxlength=\"10000\" placeholder=\"New Note... \" rows=\"2\"></textarea>\n  </form>\n  <mat-icon class=\"tcs-icon tcs-collaboration-send-icon\" svgIcon=\"tcs-collaboration-send\" (click)=\"submitNote(noteText)\"></mat-icon>\n</div>\n",
                    styles: [".tcs-collaboration-new-thread-form{max-width:90%;max-height:100%}.tcs-collaboration-input{height:55px;max-width:100%;border-color:#d5e6ff;font-size:11px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:-.1px;color:#b6b6b6;resize:none;border-radius:3px}.tcs-icon.tcs-collaboration-send-icon{height:24px;width:24px;margin-left:12px}.tcs-icon{height:20px;width:20px}.tcs-collaboration-reply-item-icon{-webkit-transform:scale(1,-1);transform:scale(1,-1);margin-top:10px}"]
                }] }
    ];
    /** @nocollapse */
    LiveAppsNotesEditorComponent.ctorParameters = function () { return []; };
    LiveAppsNotesEditorComponent.propDecorators = {
        noteText: [{ type: Input }],
        isReply: [{ type: Input }],
        noteSubmitted: [{ type: Output }]
    };
    return LiveAppsNotesEditorComponent;
}(LiveAppsComponent));
export { LiveAppsNotesEditorComponent };
if (false) {
    /** @type {?} */
    LiveAppsNotesEditorComponent.prototype.noteText;
    /** @type {?} */
    LiveAppsNotesEditorComponent.prototype.isReply;
    /**
     * ~event noteSubmitted : Internal
     * @type {?}
     */
    LiveAppsNotesEditorComponent.prototype.noteSubmitted;
    /** @type {?} */
    LiveAppsNotesEditorComponent.prototype.submitNote;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLW5vdGVzLWVkaXRvci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbGl2ZS1hcHBzLW5vdGVzLWVkaXRvci9saXZlLWFwcHMtbm90ZXMtZWRpdG9yLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBVSxNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDN0UsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sc0RBQXNELENBQUM7Ozs7Ozs7O0FBVXZGO0lBS2tELHdEQUFpQjtJQVVqRTtRQUFBLFlBQ0UsaUJBQU8sU0FDUjs7UUFWUSxhQUFPLEdBQUcsS0FBSyxDQUFDOzs7O1FBTWYsbUJBQWEsR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDLENBQUMsd0JBQXdCO1FBTS9ELGdCQUFVOzs7O1FBQUcsVUFBQyxRQUFRO1lBQzNCLEtBQUksQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBQ2xDLEtBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxDQUFDO1FBQzVCLENBQUMsRUFBQTs7SUFMRCxDQUFDOztnQkFqQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSw2QkFBNkI7b0JBQ3ZDLGlxQkFBc0Q7O2lCQUV2RDs7Ozs7MkJBRUUsS0FBSzswQkFDTCxLQUFLO2dDQU1MLE1BQU07O0lBV1QsbUNBQUM7Q0FBQSxBQXhCRCxDQUtrRCxpQkFBaUIsR0FtQmxFO1NBbkJZLDRCQUE0Qjs7O0lBQ3ZDLGdEQUEwQjs7SUFDMUIsK0NBQXlCOzs7OztJQU16QixxREFBNkM7O0lBTTdDLGtEQUdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uSW5pdCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7TGl2ZUFwcHNDb21wb25lbnR9IGZyb20gJy4uL2xpdmUtYXBwcy1jb21wb25lbnQvbGl2ZS1hcHBzLWNvbXBvbmVudC5jb21wb25lbnQnO1xuXG5cbi8qKlxuICogRWRpdG9yIGNvbXBvbmVudCB0byBlZGl0IGEgbm90ZVxuICpcbiAqICFbYWx0LXRleHRdKC4uL2xpdmUtYXBwcy1ub3Rlcy1lZGl0b3IucG5nIFwiXCIpXG4gKlxuICpAZXhhbXBsZSA8dGNsYS1saXZlLWFwcHMtbm90ZXMtZWRpdG9yPjwvdGNsYS1saXZlLWFwcHMtbm90ZXMtZWRpdG9yPlxuICovXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0Y2xhLWxpdmUtYXBwcy1ub3Rlcy1lZGl0b3InLFxuICB0ZW1wbGF0ZVVybDogJy4vbGl2ZS1hcHBzLW5vdGVzLWVkaXRvci5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2xpdmUtYXBwcy1ub3Rlcy1lZGl0b3IuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIExpdmVBcHBzTm90ZXNFZGl0b3JDb21wb25lbnQgZXh0ZW5kcyBMaXZlQXBwc0NvbXBvbmVudCB7XG4gIEBJbnB1dCgpIG5vdGVUZXh0OiBzdHJpbmc7IC8vIHVzZSAnQ0FTRV9BUFAnIHRvIHNoYXJlIG5vdGVzIHdpdGggY2FzZSBtYW5hZ2VyXG4gIEBJbnB1dCgpIGlzUmVwbHkgPSBmYWxzZTtcblxuICAvKipcbiAgICogfmV2ZW50IG5vdGVTdWJtaXR0ZWQgOiBJbnRlcm5hbFxuICAgKi9cblxuICBAT3V0cHV0KCkgbm90ZVN1Ym1pdHRlZCA9IG5ldyBFdmVudEVtaXR0ZXIoKTsgLy8gbm90aWZ5IHRleHQgc3VibWl0dGVkXG5cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgfVxuXG4gIHB1YmxpYyBzdWJtaXROb3RlID0gKG5vdGVUZXh0KSA9PiB7XG4gICAgdGhpcy5ub3RlU3VibWl0dGVkLmVtaXQobm90ZVRleHQpO1xuICAgIHRoaXMubm90ZVRleHQgPSB1bmRlZmluZWQ7XG4gIH1cblxufVxuIl19