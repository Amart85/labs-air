/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { TcLiveAppsReportingService } from '../../services/tc-live-apps-reporting.service';
import { map, take, takeUntil } from 'rxjs/operators';
import 'chartjs-plugin-datalabels';
import { DEFAULT_COLORS, DEFAULT_TYPE_COLOR } from '../../services/tc-case-card-config.service';
/**
 * Home page active cases widget sub component
 *
 * \@example <tcla-live-apps-active-cases-for-type-report></tcla-live-apps-active-cases-for-type-report>
 */
var LiveAppsActiveCasesForTypeReportComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsActiveCasesForTypeReportComponent, _super);
    function LiveAppsActiveCasesForTypeReportComponent(reportingService) {
        var _this = _super.call(this) || this;
        _this.reportingService = reportingService;
        /**
         * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
         */
        _this.maxLegendItems = _this.maxLegendItems ? _this.maxLegendItems : 8;
        /**
         * Whether to show percentages or raw case numbers on the doughnut chart
         */
        _this.showPercentages = _this.showPercentages ? _this.showPercentages : false;
        /**
         * ~event selectedCaseTypeState : Case Type state selected in vizualization
         * ~payload CaseTypeStateReportStateInfo : CaseTypeStateReportStateInfo object selected from component (to drive caller to display something different (drill down))
         */
        _this.selectedCaseTypeState = new EventEmitter();
        _this.renderChart = false;
        _this.doughnutChartData = [];
        _this.doughnutChartType = 'doughnut';
        _this.chartColors = [];
        _this.defaultColors = DEFAULT_COLORS.slice().reverse();
        _this.getCaseCount = (/**
         * @return {?}
         */
        function () {
            return _this.totalActiveCaseCount;
        });
        _this.doughnutChartOptions = {
            responsive: true,
            maintainAspectRatio: false,
            legend: {
                position: 'left'
            },
            layout: {
                padding: {
                    left: 0,
                    right: 0,
                    top: 10,
                    bottom: 10
                }
            },
            plugins: {
                doughnutlabel: {
                    labels: [
                        {
                            text: _this.getCaseCount,
                            font: {
                                size: '20',
                                family: 'Source Sans Pro',
                                weight: 'bold'
                            },
                            color: '#FF7800'
                        },
                        {
                            text: 'cases',
                            font: {
                                size: '16',
                                family: 'Source Sans Pro',
                            },
                            color: '#FF7800'
                        }
                    ]
                },
                datalabels: {
                    anchor: 'end',
                    backgroundColor: (/**
                     * @param {?} context
                     * @return {?}
                     */
                    function (context) {
                        return context.dataset.backgroundColor;
                    }),
                    borderColor: 'white',
                    borderRadius: 25,
                    borderWidth: 2,
                    color: 'white',
                    display: (/**
                     * @param {?} context
                     * @return {?}
                     */
                    function (context) {
                        /** @type {?} */
                        var dataset = context.dataset;
                        /** @type {?} */
                        var value = dataset.data[context.dataIndex];
                        return value > 0;
                    }),
                    font: {
                        weight: 'bold'
                    },
                    formatter: (/**
                     * @param {?} value
                     * @param {?} ctx
                     * @return {?}
                     */
                    function (value, ctx) {
                        /** @type {?} */
                        var datasets = ctx.chart.data.datasets;
                        if (datasets.indexOf(ctx.dataset) === datasets.length - 1) {
                            if (_this.showPercentages) {
                                /** @type {?} */
                                var sum = datasets[0].data.reduce((/**
                                 * @param {?} a
                                 * @param {?} b
                                 * @return {?}
                                 */
                                function (a, b) { return a + b; }), 0);
                                /** @type {?} */
                                var percentage = Math.round((value / sum) * 100) + '%';
                                return percentage;
                            }
                            else {
                                return value;
                            }
                        }
                        else {
                            return 0;
                        }
                    })
                }
            }
        };
        _this.initReportDataToChart = (/**
         * @param {?} reportData
         * @param {?} status
         * @return {?}
         */
        function (reportData, status) {
            _this.doughnutChartData = [];
            _this.totalActiveCaseCount = 0;
            /** @type {?} */
            var casesByStateArray = [];
            /** @type {?} */
            var labels = [];
            /** @type {?} */
            var colorArray = [];
            // remove any taken colors from the defaultColors
            // we have to do this before parsing the record to avoid getting same colors
            reportData.caseStates.forEach((/**
             * @param {?} cs
             * @return {?}
             */
            function (cs) {
                // remove color from defaults
                if (cs.stateInfo.color) {
                    _this.defaultColors = _this.defaultColors.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return item !== cs.stateInfo.color; }));
                }
            }));
            // parse record
            reportData.caseStates.forEach((/**
             * @param {?} caseState
             * @return {?}
             */
            function (caseState) {
                _this.totalActiveCaseCount = _this.totalActiveCaseCount + caseState.caseCount;
                casesByStateArray.push(caseState.caseCount);
                labels.push(caseState.stateInfo.label);
                // we will re-color anything that has the default color
                /** @type {?} */
                var col;
                if (caseState.stateInfo.color && caseState.stateInfo.color !== DEFAULT_TYPE_COLOR) {
                    // use the set color
                    col = caseState.stateInfo.color;
                }
                else {
                    // try and get a color from the palette
                    /** @type {?} */
                    var palCol = _this.defaultColors.pop();
                    if (palCol) {
                        col = palCol;
                    }
                    else {
                        // if no more in palette use a random color!
                        /** @type {?} */
                        var i = Math.random() * 0xffffff;
                        /** @type {?} */
                        var p = parseInt(i.toString(), 0);
                        col = '#' + p.toString(16);
                    }
                }
                colorArray.push(col);
            }));
            _this.doughnutChartData.push(casesByStateArray);
            _this.doughnutChartLabels = labels;
            _this.chartColors.push({ backgroundColor: colorArray });
            // showing more than 8 in the legend will take up too much space
            _this.doughnutChartOptions.legend.display = labels.length <= 8;
            _this.renderChart = true;
        });
        _this.refresh = (/**
         * @return {?}
         */
        function () {
            _this.reportingService.getCaseTypeStateReport(_this.sandboxId, _this.appId, _this.typeId, false, _this.uiAppId).pipe(take(1), takeUntil(_this._destroyed$), map((/**
             * @param {?} report
             * @return {?}
             */
            function (report) {
                _this.caseTypeStateReport = report;
                _this.initReportDataToChart(report, status);
                return report;
            })))
                .subscribe(null, (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { _this.errorMessage = 'Error retrieving case types report: ' + error.error.errorMsg; }));
        });
        return _this;
    }
    // events
    // events
    /**
     * @param {?} __0
     * @return {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.chartClicked = 
    // events
    /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var event = _a.event, active = _a.active;
        if (active.length > 0) {
            /** @type {?} */
            var chart = active[0]._chart;
            /** @type {?} */
            var activePoints = chart.getElementAtEvent(event);
            if (activePoints.length > 0) {
                // get the internal index of slice in pie chart
                /** @type {?} */
                var clickedElementIndex = activePoints[0]._index;
                /** @type {?} */
                var label = chart.data.labels[clickedElementIndex];
                // get value by index
                /** @type {?} */
                var value = chart.data.datasets[0].data[clickedElementIndex];
                console.log(clickedElementIndex, label, value);
                this.selectedCaseTypeState.emit(this.caseTypeStateReport.caseStates[clickedElementIndex].stateInfo);
            }
        }
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.chartHovered = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var event = _a.event, active = _a.active;
        // console.log(event, active);
    };
    /**
     * @return {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.appId && (changes.firstChange || (changes.appId.currentValue !== changes.appId.previousValue))) {
            this.refresh();
        }
    };
    LiveAppsActiveCasesForTypeReportComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-active-cases-for-type-report',
                    template: "<div fxLayout=\"column\" fxFlex style=\"overflow: auto\">\n  <div *ngIf=\"renderChart\" style=\"height:100%; width:100%; padding: 20px\" class=\"relative\">\n    <canvas #caseReportChart baseChart\n            [data]=\"doughnutChartData\"\n            [labels]=\"doughnutChartLabels\"\n            [chartType]=\"doughnutChartType\"\n            [options]=\"doughnutChartOptions\"\n            [colors]=\"chartColors\"\n            (chartHover)=\"chartHovered($event)\"\n            (chartClick)=\"chartClicked($event)\"\n    >\n    </canvas>\n  </div>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    LiveAppsActiveCasesForTypeReportComponent.ctorParameters = function () { return [
        { type: TcLiveAppsReportingService }
    ]; };
    LiveAppsActiveCasesForTypeReportComponent.propDecorators = {
        sandboxId: [{ type: Input }],
        appId: [{ type: Input }],
        typeId: [{ type: Input }],
        uiAppId: [{ type: Input }],
        maxLegendItems: [{ type: Input }],
        showPercentages: [{ type: Input }],
        selectedCaseTypeState: [{ type: Output }]
    };
    return LiveAppsActiveCasesForTypeReportComponent;
}(LiveAppsComponent));
export { LiveAppsActiveCasesForTypeReportComponent };
if (false) {
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.sandboxId;
    /**
     * The LA Application Id
     * @type {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.appId;
    /**
     * The LA Application Type Id (generally 1)
     * @type {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.typeId;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     * @type {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.uiAppId;
    /**
     * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
     * @type {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.maxLegendItems;
    /**
     * Whether to show percentages or raw case numbers on the doughnut chart
     * @type {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.showPercentages;
    /**
     * ~event selectedCaseTypeState : Case Type state selected in vizualization
     * ~payload CaseTypeStateReportStateInfo : CaseTypeStateReportStateInfo object selected from component (to drive caller to display something different (drill down))
     * @type {?}
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.selectedCaseTypeState;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.errorMessage;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.caseTypeStateReport;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.renderChart;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.doughnutChartLabels;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.doughnutChartData;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.doughnutChartType;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.chartColors;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.defaultColors;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.legendData;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.totalActiveCaseCount;
    /**
     * @type {?}
     * @private
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.getCaseCount;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.doughnutChartOptions;
    /**
     * @type {?}
     * @private
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.initReportDataToChart;
    /** @type {?} */
    LiveAppsActiveCasesForTypeReportComponent.prototype.refresh;
    /**
     * @type {?}
     * @private
     */
    LiveAppsActiveCasesForTypeReportComponent.prototype.reportingService;
}
//# sourceMappingURL=data:application/json;base64,