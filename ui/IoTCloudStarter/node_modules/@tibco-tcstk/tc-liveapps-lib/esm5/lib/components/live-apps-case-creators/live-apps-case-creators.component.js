/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { LiveAppsService } from '../../services/live-apps.service';
import { map, take, takeUntil, tap } from 'rxjs/operators';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { TcCaseProcessesService } from '../../services/tc-case-processes.service';
/**
 * Wraps case creator and case creator list
 *
 * \@example <tcla-live-apps-case-creators></tcla-live-apps-case-creators>
 */
var LiveAppsCaseCreatorsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsCaseCreatorsComponent, _super);
    function LiveAppsCaseCreatorsComponent(liveapps, caseProcessesService) {
        var _this = _super.call(this) || this;
        _this.liveapps = liveapps;
        _this.caseProcessesService = caseProcessesService;
        /**
         * ~event creatorClicked : Case Creator selected
         * ~payload LaProcessSelection : LaProcessSelection object output when an action is clicked (ie. message to parent to run creator component)
         */
        _this.creatorClicked = new EventEmitter();
        _this.refresh = (/**
         * @return {?}
         */
        function () {
            _this.caseProcessesService.getCaseCreators(_this.sandboxId, _this.appId, _this.typeId)
                .pipe(take(1), takeUntil(_this._destroyed$), map((/**
             * @param {?} casecreators
             * @return {?}
             */
            function (casecreators) {
                _this.casecreators = casecreators.creators;
                if (_this.casecreators.length === 1) {
                    _this.selectCreator(_this.casecreators[0]);
                }
            }))).subscribe(null, (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { _this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; }));
        });
        return _this;
    }
    /**
     * @param {?} creator
     * @return {?}
     */
    LiveAppsCaseCreatorsComponent.prototype.selectCreator = /**
     * @param {?} creator
     * @return {?}
     */
    function (creator) {
        var _this = this;
        this.caseProcessesService.getProcessDetails(null, this.appId, this.typeId, this.sandboxId, null, creator, 100).pipe(take(1), takeUntil(this._destroyed$), tap((/**
         * @param {?} processDetails
         * @return {?}
         */
        function (processDetails) {
            if (!processDetails || !processDetails.process || (processDetails.process.jsonSchema.$schema === 'NOSCHEMA')) {
                // This will be triggered when no form schema is available
                // Typically happens when:
                // 1) The form has elements that are not supported by the Live Apps API for form schemas such as participant selectors
                // 2) The Live Apps application is legacy and has no form schema at all, redeploying the live apps application would fix this.
                console.error('No schema available for this case type: The form may not be supported or you may need to update/re-deploy the live apps application. Alternatively use a custom form.');
            }
        })), map((/**
         * @param {?} processSchema
         * @return {?}
         */
        function (processSchema) {
            _this.creatorClicked.emit(processSchema);
            return processSchema;
        })))
            .subscribe(null, (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { _this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; }));
    };
    /**
     * @return {?}
     */
    LiveAppsCaseCreatorsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.refresh();
    };
    LiveAppsCaseCreatorsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-case-creators',
                    template: "<div *ngIf=\"casecreators && casecreators.length > 1\" fxFlex style=\"margin-left: 10px;\">\n  <span class=\"tcs-case-creation-dialog-instruction\">Select a case creator</span>\n  <mat-select #creatorSelector class=\"tcs-creator-selector-option\" [disableOptionCentering]=\"true\"\n              placeholder=\"Case Creators\" (selectionChange)=\"selectCreator($event.value)\">\n    <mat-option *ngFor=\"let creator of casecreators\" [value]=\"creator\">\n      <span>{{creator.label}}</span>\n    </mat-option>\n  </mat-select>\n</div>\n",
                    styles: [":host ::ng-deep .tcs-creator-selector-option .mat-select-value span{font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;color:#0081cb}:host ::ng-deep .tcs-creator-selector-option .mat-select-arrow-wrapper div{color:#0081cb}:host ::ng-deep .mat-select-value{min-width:100px;max-width:100%;width:auto}.tcs-creators-box{width:200px;height:44px;box-shadow:inset 0 1px 3px 0 rgba(0,0,0,.5);background-color:#fff}tcs-creator-selector-option{width:170px;margin-left:5px;margin-right:5px;background-color:#eee;padding-left:20px;padding-right:20px;height:35px}.tcs-case-creation-dialog-instruction{font-family:Source Sans Pro;font-size:16px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#727272}"]
                }] }
    ];
    /** @nocollapse */
    LiveAppsCaseCreatorsComponent.ctorParameters = function () { return [
        { type: LiveAppsService },
        { type: TcCaseProcessesService }
    ]; };
    LiveAppsCaseCreatorsComponent.propDecorators = {
        appId: [{ type: Input }],
        typeId: [{ type: Input }],
        sandboxId: [{ type: Input }],
        creatorClicked: [{ type: Output }]
    };
    return LiveAppsCaseCreatorsComponent;
}(LiveAppsComponent));
export { LiveAppsCaseCreatorsComponent };
if (false) {
    /**
     * The LA Application Id
     * @type {?}
     */
    LiveAppsCaseCreatorsComponent.prototype.appId;
    /**
     * The LA Application Type Id (generally 1)
     * @type {?}
     */
    LiveAppsCaseCreatorsComponent.prototype.typeId;
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsCaseCreatorsComponent.prototype.sandboxId;
    /**
     * ~event creatorClicked : Case Creator selected
     * ~payload LaProcessSelection : LaProcessSelection object output when an action is clicked (ie. message to parent to run creator component)
     * @type {?}
     */
    LiveAppsCaseCreatorsComponent.prototype.creatorClicked;
    /** @type {?} */
    LiveAppsCaseCreatorsComponent.prototype.casecreators;
    /** @type {?} */
    LiveAppsCaseCreatorsComponent.prototype.errorMessage;
    /** @type {?} */
    LiveAppsCaseCreatorsComponent.prototype.appSchema;
    /** @type {?} */
    LiveAppsCaseCreatorsComponent.prototype.caseType;
    /** @type {?} */
    LiveAppsCaseCreatorsComponent.prototype.caseActionList;
    /** @type {?} */
    LiveAppsCaseCreatorsComponent.prototype.refresh;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsCaseCreatorsComponent.prototype.liveapps;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsCaseCreatorsComponent.prototype.caseProcessesService;
}
//# sourceMappingURL=data:application/json;base64,