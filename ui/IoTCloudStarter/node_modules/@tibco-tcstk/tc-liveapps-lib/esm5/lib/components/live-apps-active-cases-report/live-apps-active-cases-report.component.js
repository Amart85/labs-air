/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { BaseChartDirective } from 'ng2-charts';
import { TcLiveAppsReportingService } from '../../services/tc-live-apps-reporting.service';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { map, take, takeUntil } from 'rxjs/operators';
import { DEFAULT_COLORS, DEFAULT_TYPE_COLOR } from '../../services/tc-case-card-config.service';
/**
 * Home page active cases widget sub component
 *
 * \@example <tcla-live-apps-active-cases-report></tcla-live-apps-active-cases-report>
 */
var LiveAppsActiveCasesReportComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsActiveCasesReportComponent, _super);
    function LiveAppsActiveCasesReportComponent(reportingService) {
        var _this = _super.call(this) || this;
        _this.reportingService = reportingService;
        /**
         * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
         */
        _this.maxLegendItems = _this.maxLegendItems ? _this.maxLegendItems : 8;
        /**
         * Whether to show percentages or raw case numbers on the doughnut chart
         */
        _this.showPercentages = _this.showPercentages ? _this.showPercentages : false;
        /**
         * ~event selectedCaseType : Case Type selected in vizualization
         * ~payload CaseTypeReportRecord : CaseTypeReportRecord object selected from component
         */
        _this.selectedCaseType = new EventEmitter();
        _this.renderChart = false;
        _this.doughnutChartData = [];
        _this.doughnutChartType = 'doughnut';
        _this.chartColors = [];
        _this.defaultColors = DEFAULT_COLORS.slice().reverse();
        _this.getCaseCount = (/**
         * @return {?}
         */
        function () {
            return _this.totalActiveCaseCount;
        });
        _this.doughnutChartOptions = {
            responsive: true,
            maintainAspectRatio: false,
            legend: {
                display: false,
                position: 'left'
            },
            layout: {
                padding: {
                    left: 0,
                    right: 0,
                    top: 10,
                    bottom: 10
                }
            },
            plugins: {
                doughnutlabel: {
                    labels: [
                        {
                            text: _this.getCaseCount,
                            font: {
                                size: '20',
                                family: 'Source Sans Pro',
                                weight: 'bold'
                            },
                            color: '#b6b6b6'
                        },
                        {
                            text: 'cases',
                            font: {
                                size: '16',
                                family: 'Source Sans Pro',
                            },
                            color: '#b6b6b6'
                        }
                    ]
                },
                datalabels: {
                    anchor: 'end',
                    backgroundColor: (/**
                     * @param {?} context
                     * @return {?}
                     */
                    function (context) {
                        return context.dataset.backgroundColor;
                    }),
                    borderColor: 'white',
                    borderRadius: 25,
                    borderWidth: 2,
                    color: 'white',
                    display: (/**
                     * @param {?} context
                     * @return {?}
                     */
                    function (context) {
                        /** @type {?} */
                        var dataset = context.dataset;
                        /** @type {?} */
                        var value = dataset.data[context.dataIndex];
                        return value > 0;
                    }),
                    font: {
                        weight: 'bold'
                    },
                    formatter: (/**
                     * @param {?} value
                     * @param {?} ctx
                     * @return {?}
                     */
                    function (value, ctx) {
                        /** @type {?} */
                        var datasets = ctx.chart.data.datasets;
                        if (datasets.indexOf(ctx.dataset) === datasets.length - 1) {
                            if (_this.showPercentages) {
                                /** @type {?} */
                                var sum = datasets[0].data.reduce((/**
                                 * @param {?} a
                                 * @param {?} b
                                 * @return {?}
                                 */
                                function (a, b) { return a + b; }), 0);
                                /** @type {?} */
                                var percentage = Math.round((value / sum) * 100) + '%';
                                return percentage;
                            }
                            else {
                                return value;
                            }
                        }
                        else {
                            return 0;
                        }
                    })
                }
            }
        };
        _this.initReportDataToChart = (/**
         * @param {?} reportData
         * @return {?}
         */
        function (reportData) {
            _this.doughnutChartData = [];
            _this.totalActiveCaseCount = 0;
            /** @type {?} */
            var activeCasesArray = [];
            /** @type {?} */
            var labels = [];
            /** @type {?} */
            var colorArray = [];
            // remove any taken colors from the defaultColors
            // we have to do this before parsing the record to avoid getting same colors
            reportData.caseTypes.forEach((/**
             * @param {?} ct
             * @return {?}
             */
            function (ct) {
                // remove color from defaults
                if (ct.caseTypeInfo.color) {
                    _this.defaultColors = _this.defaultColors.filter((/**
                     * @param {?} item
                     * @return {?}
                     */
                    function (item) { return item !== ct.caseTypeInfo.color; }));
                }
            }));
            // parse record
            reportData.caseTypes.forEach((/**
             * @param {?} caseType
             * @return {?}
             */
            function (caseType) {
                activeCasesArray.push(caseType.activeStateCaseCount);
                _this.totalActiveCaseCount = _this.totalActiveCaseCount + caseType.activeStateCaseCount;
                _this.totalTerminatedCaseCount = _this.totalTerminatedCaseCount + caseType.terminalStateCaseCount;
                labels.push(caseType.caseTypeInfo.label);
                // we will re-color anything that has the default color
                /** @type {?} */
                var col;
                if (caseType.caseTypeInfo.color && caseType.caseTypeInfo.color !== DEFAULT_TYPE_COLOR) {
                    // use the set color
                    col = caseType.caseTypeInfo.color;
                }
                else {
                    // try and get a color from the palette
                    /** @type {?} */
                    var palCol = _this.defaultColors.pop();
                    if (palCol) {
                        col = palCol;
                    }
                    else {
                        // if no more in palette use a random color!
                        /** @type {?} */
                        var i = Math.random() * 0xffffff;
                        /** @type {?} */
                        var p = parseInt(i.toString(), 0);
                        col = '#' + p.toString(16);
                    }
                }
                colorArray.push(col);
            }));
            // showing more than 8 in the legend will take up too much space
            _this.doughnutChartOptions.legend.display = labels.length <= 8;
            _this.doughnutChartData = activeCasesArray;
            _this.doughnutChartLabels = labels;
            _this.chartColors.push({ backgroundColor: colorArray });
            _this.renderChart = true;
        });
        _this.refresh = (/**
         * @return {?}
         */
        function () {
            _this.reportingService.getCaseTypesReport(_this.sandboxId, _this.appIds, _this.uiAppId).pipe(take(1), takeUntil(_this._destroyed$), map((/**
             * @param {?} report
             * @return {?}
             */
            function (report) {
                _this.caseTypesReport = report;
                _this.initReportDataToChart(report);
                return report;
            })))
                .subscribe(null, (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { _this.errorMessage = 'Error retrieving case types report: ' + error.error.errorMsg; }));
        });
        return _this;
    }
    // events
    // events
    /**
     * @param {?} __0
     * @return {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.chartClicked = 
    // events
    /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var event = _a.event, active = _a.active;
        if (active.length > 0) {
            /** @type {?} */
            var chart = active[0]._chart;
            /** @type {?} */
            var activePoints = chart.getElementAtEvent(event);
            if (activePoints.length > 0) {
                // get the internal index of slice in pie chart
                /** @type {?} */
                var clickedElementIndex = activePoints[0]._index;
                /** @type {?} */
                var label = chart.data.labels[clickedElementIndex];
                // get value by index
                /** @type {?} */
                var value = chart.data.datasets[0].data[clickedElementIndex];
                this.caseTypesReport.caseTypes[clickedElementIndex].incTerminal = false;
                this.selectedCaseType.emit(this.caseTypesReport.caseTypes[clickedElementIndex]);
            }
        }
    };
    /**
     * @param {?} __0
     * @return {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.chartHovered = /**
     * @param {?} __0
     * @return {?}
     */
    function (_a) {
        var event = _a.event, active = _a.active;
        // console.log(event, active);
    };
    /**
     * @return {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.refresh();
    };
    LiveAppsActiveCasesReportComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-active-cases-report',
                    template: "  <div fxLayout=\"column\" fxFlex style=\"overflow: auto\">\n    <div *ngIf=\"renderChart\" style=\"height:100%; width:100%; padding: 20px\" class=\"relative\">\n      <canvas #caseReportChart baseChart\n              [data]=\"doughnutChartData\"\n              [labels]=\"doughnutChartLabels\"\n              [chartType]=\"doughnutChartType\"\n              [options]=\"doughnutChartOptions\"\n              [colors]=\"chartColors\"\n              (chartHover)=\"chartHovered($event)\"\n              (chartClick)=\"chartClicked($event)\"\n      >\n      </canvas>\n    </div>\n  </div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    LiveAppsActiveCasesReportComponent.ctorParameters = function () { return [
        { type: TcLiveAppsReportingService }
    ]; };
    LiveAppsActiveCasesReportComponent.propDecorators = {
        sandboxId: [{ type: Input }],
        appIds: [{ type: Input }],
        showHeader: [{ type: Input }],
        uiAppId: [{ type: Input }],
        maxLegendItems: [{ type: Input }],
        showPercentages: [{ type: Input }],
        selectedCaseType: [{ type: Output }],
        caseReportChart: [{ type: ViewChild, args: [BaseChartDirective, { static: false },] }]
    };
    return LiveAppsActiveCasesReportComponent;
}(LiveAppsComponent));
export { LiveAppsActiveCasesReportComponent };
if (false) {
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.sandboxId;
    /**
     * The list of LA Application IDs you want to handle
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.appIds;
    /**
     * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.showHeader;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.uiAppId;
    /**
     * Maximum rows to show in legend before it is hidden (otherwise would take whole widget)
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.maxLegendItems;
    /**
     * Whether to show percentages or raw case numbers on the doughnut chart
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.showPercentages;
    /**
     * ~event selectedCaseType : Case Type selected in vizualization
     * ~payload CaseTypeReportRecord : CaseTypeReportRecord object selected from component
     * @type {?}
     */
    LiveAppsActiveCasesReportComponent.prototype.selectedCaseType;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.caseReportChart;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.errorMessage;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.caseTypesReport;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.totalActiveCaseCount;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.totalTerminatedCaseCount;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.renderChart;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.doughnutChartLabels;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.doughnutChartData;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.doughnutChartType;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.chartColors;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.defaultColors;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.legendData;
    /**
     * @type {?}
     * @private
     */
    LiveAppsActiveCasesReportComponent.prototype.getCaseCount;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.doughnutChartOptions;
    /**
     * @type {?}
     * @private
     */
    LiveAppsActiveCasesReportComponent.prototype.initReportDataToChart;
    /** @type {?} */
    LiveAppsActiveCasesReportComponent.prototype.refresh;
    /**
     * @type {?}
     * @private
     */
    LiveAppsActiveCasesReportComponent.prototype.reportingService;
}
//# sourceMappingURL=data:application/json;base64,