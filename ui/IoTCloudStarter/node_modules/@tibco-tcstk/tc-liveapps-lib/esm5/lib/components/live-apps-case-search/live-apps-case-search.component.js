/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, ElementRef, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { Subject } from 'rxjs';
import { LiveAppsService } from '../../services/live-apps.service';
import { CaseSearchResults, CaseType } from '../../models/liveappsdata';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { LiveAppsApplicationsComponent } from '../live-apps-applications/live-apps-applications.component';
/**
 * Selection of app + searching for cases
 *
 *  ![alt-text](../live-apps-case-search.png "Image")
 *
 * \@example <tcla-live-apps-case-search></tcla-live-apps-case-search>
 */
var LiveAppsCaseSearchComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsCaseSearchComponent, _super);
    function LiveAppsCaseSearchComponent(liveapps) {
        var _this = _super.call(this) || this;
        _this.liveapps = liveapps;
        /**
         * ~event foundRefs : Search completed (caseRefs returned)
         * ~payload CaseSearchResults : caseRefs matching the search (so parent can display them in case list component)
         */
        _this.foundRefs = new EventEmitter();
        _this.forcedSearch = false;
        // case type selector
        _this.selectedApp = new CaseType();
        _this.refresh = (/**
         * @return {?}
         */
        function () {
            if (_this.applicationsComponent) {
                _this.applicationsComponent.refresh(true);
            }
        });
        _this.setCaseType = (/**
         * @param {?} caseType
         * @return {?}
         */
        function (caseType) {
            _this.selectedApp = caseType;
            _this.doSearch();
            _this.applicationsComponent.changeAppSelection(caseType);
        });
        _this.setSelectedStateId = (/**
         * @param {?} stateId
         * @param {?} stateLabel
         * @return {?}
         */
        function (stateId, stateLabel) {
            _this.selectedStateId = stateId;
            _this.selectedStateLabel = stateLabel;
            // not currently supported to limit search by stateId
            // this.doSearch(stateId);
        });
        // handle search app selection
        _this.handleSearchAppSelection = (/**
         * @param {?} application
         * @return {?}
         */
        function (application) {
            _this.selectedApp = application;
            _this.doSearch();
        });
        // clear search results
        _this.clearResults = (/**
         * @return {?}
         */
        function () {
            _this.searchString = '';
            _this.selectedStateId = undefined;
            _this.selectedStateLabel = undefined;
            _this.doSearch();
        });
        _this.forceSearch = (/**
         * @return {?}
         */
        function () {
            _this.forcedSearch = true;
            _this.liveapps.caseSearchEntries(_this.searchBox.nativeElement.value, _this.sandboxId, _this.selectedApp.applicationId, _this.selectedApp.id, true, 0, 1000, null).subscribe((/**
             * @param {?} results
             * @return {?}
             */
            function (results) {
                _this.foundRefs.emit(results);
            }));
        });
        _this.doSearch = (/**
         * @param {?=} stateId
         * @return {?}
         */
        function (stateId) {
            _this.forcedSearch = false;
            _this.searchBox.nativeElement.value = '';
            /** @type {?} */
            var result = new CaseSearchResults().deserialize({ caserefs: [], searchString: '' });
            _this.foundRefs.emit(result);
            _this.searchTerm$ = new Subject();
            _this.searchTerm$.subscribe((/**
             * @param {?} next
             * @return {?}
             */
            function (next) {
                _this.searchString = next;
                return next;
            }));
            _this.searchValue = _this.searchTerm$.asObservable();
            if (_this.selectedApp.applicationId && _this.selectedApp.id && _this.sandboxId) {
                /** @type {?} */
                var skip = 0;
                /** @type {?} */
                var top_1 = 1000;
                // Note: The API limits searches to 1000 items
                // The service is configured to optimize performance by only returning case references at this stage
                // The case details will only be loaded when the item is rendered (for example in the case-list component)
                // Any case list component should use cdk virtual scroll to ensure 1000 case details are not loaded in one go
                // (from the API or to the DOM)
                _this.liveapps.caseSearch(_this.searchTerm$, _this.sandboxId, _this.selectedApp.applicationId, _this.selectedApp.id, skip, top_1, stateId ? stateId : null)
                    .subscribe((/**
                 * @param {?} results
                 * @return {?}
                 */
                function (results) {
                    _this.foundRefs.emit(results);
                }));
            }
        });
        return _this;
    }
    LiveAppsCaseSearchComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-case-search',
                    template: "<div fxLayout=\"row\" fxFlex=\"75\" fxLayout=\"center center\">\n  <div class=\"tcs-search-box\" fxlayout=\"row\" fxLayoutAlign=\"space-around center\" fxFlex>\n    <tcla-live-apps-applications fxLayout=\"row\" fxLayoutAlign=\"start center\" class=\"tcs-search-application-selector\" [appIds]=\"appIds\" [sandboxId]=\"sandboxId\" [selectFirstApp]=\"true\" (selection)=\"handleSearchAppSelection($event)\"></tcla-live-apps-applications>\n    <div class=\"tcs-search-input-container\" fxFlex>\n      <!-- free search by state with state filter currently not supported -->\n      <!--div class=\"tcs-state-filter-marker\" *ngIf=\"selectedStateLabel\" fxLayout=\"row\">[<div class=\"tcs-type-filter-text-highlight\">{{selectedStateLabel}}</div>]&nbsp;</div-->\n      <input #searchBox class=\"tcs-search-input\" placeholder=\"{{ selectedApp.applicationName ? 'Search within ' + selectedApp.applicationName + ' cases' : 'Select a case type to search cases' }}\" (keyup)=\"searchTerm$.next($event.target.value)\" [disabled]=\"!selectedApp.applicationId\" fxFlex>\n      <div fxLayoutAlign=\"center end\">\n        <mat-icon *ngIf=\"forcedSearch || searchString\" class=\"tcs-icon tcs-close-icon\" svgIcon=\"tcs-close-icon\" (click)=\"clearResults()\"></mat-icon>\n        <mat-icon *ngIf=\"!forcedSearch && !searchString\" class=\"tcs-icon tcs-search-icon\" svgIcon=\"tcs-search-icon\" (click)=\"forceSearch()\"></mat-icon>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    styles: [".tcs-search-box{width:650px;height:44px;box-shadow:inset 0 1px 3px 0 rgba(0,0,0,.5);background-color:#fff}.tcs-search-input{height:24px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;border:none}.tcs-search-input:focus{outline:0}.tcs-search-input::-webkit-input-placeholder{opacity:.38}.tcs-search-input::-moz-placeholder{opacity:.38}.tcs-search-input:-ms-input-placeholder{opacity:.38}.tcs-search-input::-ms-input-placeholder{opacity:.38}.tcs-search-input::placeholder{opacity:.38}.tcs-search-input-container{margin-left:20px;margin-right:20px}.tcs-search-application-selector{width:200px;margin-left:5px;margin-right:5px;background-color:#eee;padding-left:5px;padding-right:5px;padding-top:4px;height:35px}:host ::ng-deep .tcs-search-icon:hover .svg-content{fill:#0081cb}:host ::ng-deep .tcs-close-icon:hover .svg-content{fill:#0081cb}.tcs-close-icon:hover,.tcs-search-icon:hover{cursor:pointer}.tcs-type-filter-text{font-family:Source Sans Pro;font-size:12px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;text-align:left;color:#000;margin-left:10px}.tcs-type-filter-text-highlight{color:#ff7800}.tcs-state-filter-marker{margin-top:2px}"]
                }] }
    ];
    /** @nocollapse */
    LiveAppsCaseSearchComponent.ctorParameters = function () { return [
        { type: LiveAppsService }
    ]; };
    LiveAppsCaseSearchComponent.propDecorators = {
        searchBox: [{ type: ViewChild, args: ['searchBox', { static: false },] }],
        sandboxId: [{ type: Input }],
        appIds: [{ type: Input }],
        foundRefs: [{ type: Output }],
        applicationsComponent: [{ type: ViewChild, args: [LiveAppsApplicationsComponent, { static: false },] }]
    };
    return LiveAppsCaseSearchComponent;
}(LiveAppsComponent));
export { LiveAppsCaseSearchComponent };
if (false) {
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.searchBox;
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsCaseSearchComponent.prototype.sandboxId;
    /**
     * The list of LA Application IDs you want to handle
     * @type {?}
     */
    LiveAppsCaseSearchComponent.prototype.appIds;
    /**
     * ~event foundRefs : Search completed (caseRefs returned)
     * ~payload CaseSearchResults : caseRefs matching the search (so parent can display them in case list component)
     * @type {?}
     */
    LiveAppsCaseSearchComponent.prototype.foundRefs;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.applicationsComponent;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.searchTerm$;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.searchValue;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.searchString;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.forcedSearch;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.selectedStateId;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.selectedStateLabel;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.selectedApp;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.refresh;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.setCaseType;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.setSelectedStateId;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.handleSearchAppSelection;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.clearResults;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.forceSearch;
    /** @type {?} */
    LiveAppsCaseSearchComponent.prototype.doSearch;
    /**
     * @type {?}
     * @private
     */
    LiveAppsCaseSearchComponent.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,