/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { CaseType } from '../../models/liveappsdata';
import { CustomFormDefs } from '@tibco-tcstk/tc-forms-lib';
/**
 * Wraps case creators component (high level component)
 *
 * \@example <tcla-live-apps-case-creator-widget></tcla-live-apps-case-creator-widget>
 */
var LiveAppsCaseCreatorWidgetComponent = /** @class */ (function () {
    function LiveAppsCaseCreatorWidgetComponent() {
        var _this = this;
        /**
         * ~event caseCreated : Case Creator started (process started)
         * ~payload ProcessId : ProcessId object output on case creation (details of process started)
         */
        this.caseCreated = new EventEmitter();
        // handle case created
        this.handleCaseCreation = (/**
         * @param {?} processId
         * @return {?}
         */
        function (processId) {
            _this.caseCreated.emit(processId);
        });
    }
    /**
     * @return {?}
     */
    LiveAppsCaseCreatorWidgetComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    LiveAppsCaseCreatorWidgetComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-case-creator-widget',
                    template: "<div>\n  <div fxLayout=\"row\" fxLayout=\"start stretch\">\n    <span style=\"width: 185px\">Select Case Creator: </span>\n    <tcla-live-apps-creators fxFlex [sandboxId]=\"sandboxId\" [applicationId]=\"application.id\" [typeId]=\"application.id\" (caseCreated)=\"handleCaseCreation($event)\"></tcla-live-apps-creators>\n  </div>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    LiveAppsCaseCreatorWidgetComponent.ctorParameters = function () { return []; };
    LiveAppsCaseCreatorWidgetComponent.propDecorators = {
        application: [{ type: Input }],
        sandboxId: [{ type: Input }],
        uiAppId: [{ type: Input }],
        initialData: [{ type: Input }],
        customFormDefs: [{ type: Input }],
        caseCreated: [{ type: Output }]
    };
    return LiveAppsCaseCreatorWidgetComponent;
}());
export { LiveAppsCaseCreatorWidgetComponent };
if (false) {
    /**
     * CaseType model for the case type you want to run a case creator for (normally comes from an application selector component)
     * @type {?}
     */
    LiveAppsCaseCreatorWidgetComponent.prototype.application;
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsCaseCreatorWidgetComponent.prototype.sandboxId;
    /**
     * The Application ID of the UI (should ideally be unique as it is shared state key)
     * @type {?}
     */
    LiveAppsCaseCreatorWidgetComponent.prototype.uiAppId;
    /**
     * override the initial data for a case creator
     * @type {?}
     */
    LiveAppsCaseCreatorWidgetComponent.prototype.initialData;
    /**
     * Custom Form configuration file
     * @type {?}
     */
    LiveAppsCaseCreatorWidgetComponent.prototype.customFormDefs;
    /**
     * ~event caseCreated : Case Creator started (process started)
     * ~payload ProcessId : ProcessId object output on case creation (details of process started)
     * @type {?}
     */
    LiveAppsCaseCreatorWidgetComponent.prototype.caseCreated;
    /** @type {?} */
    LiveAppsCaseCreatorWidgetComponent.prototype.handleCaseCreation;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWNhc2UtY3JlYXRvci13aWRnZXQuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2xpdmUtYXBwcy1jYXNlLWNyZWF0b3Itd2lkZ2V0L2xpdmUtYXBwcy1jYXNlLWNyZWF0b3Itd2lkZ2V0LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFxQixNQUFNLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDeEYsT0FBTyxFQUFDLFFBQVEsRUFBWSxNQUFNLDJCQUEyQixDQUFDO0FBRTlELE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQzs7Ozs7O0FBT3pEO0lBcUNFO1FBQUEsaUJBQWlCOzs7OztRQURQLGdCQUFXLEdBQTRCLElBQUksWUFBWSxFQUFhLENBQUM7O1FBSXhFLHVCQUFrQjs7OztRQUFHLFVBQUMsU0FBb0I7WUFDL0MsS0FBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbkMsQ0FBQyxFQUFBO0lBTGUsQ0FBQzs7OztJQU9qQixxREFBUTs7O0lBQVI7SUFDQSxDQUFDOztnQkE3Q0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxvQ0FBb0M7b0JBQzlDLCtWQUE2RDs7aUJBRTlEOzs7Ozs4QkFLRSxLQUFLOzRCQUtMLEtBQUs7MEJBS0wsS0FBSzs4QkFLTCxLQUFLO2lDQUtMLEtBQUs7OEJBT0wsTUFBTTs7SUFXVCx5Q0FBQztDQUFBLEFBL0NELElBK0NDO1NBMUNZLGtDQUFrQzs7Ozs7O0lBSTdDLHlEQUErQjs7Ozs7SUFLL0IsdURBQTJCOzs7OztJQUszQixxREFBeUI7Ozs7O0lBS3pCLHlEQUEwQjs7Ozs7SUFLMUIsNERBQXdDOzs7Ozs7SUFPeEMseURBQStFOztJQUkvRSxnRUFFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBFdmVudEVtaXR0ZXIsIElucHV0LCBPbkNoYW5nZXMsIE9uSW5pdCwgT3V0cHV0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7Q2FzZVR5cGUsIFByb2Nlc3NJZH0gZnJvbSAnLi4vLi4vbW9kZWxzL2xpdmVhcHBzZGF0YSc7XG5pbXBvcnQge0xhUHJvY2Vzc1NlbGVjdGlvbn0gZnJvbSAnLi4vLi4vbW9kZWxzL3RjLWNhc2UtcHJvY2Vzc2VzJztcbmltcG9ydCB7Q3VzdG9tRm9ybURlZnN9IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1mb3Jtcy1saWInO1xuXG4vKipcbiAqIFdyYXBzIGNhc2UgY3JlYXRvcnMgY29tcG9uZW50IChoaWdoIGxldmVsIGNvbXBvbmVudClcbiAqXG4gKkBleGFtcGxlIDx0Y2xhLWxpdmUtYXBwcy1jYXNlLWNyZWF0b3Itd2lkZ2V0PjwvdGNsYS1saXZlLWFwcHMtY2FzZS1jcmVhdG9yLXdpZGdldD5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGNsYS1saXZlLWFwcHMtY2FzZS1jcmVhdG9yLXdpZGdldCcsXG4gIHRlbXBsYXRlVXJsOiAnLi9saXZlLWFwcHMtY2FzZS1jcmVhdG9yLXdpZGdldC5jb21wb25lbnQuaHRtbCcsXG4gIHN0eWxlVXJsczogWycuL2xpdmUtYXBwcy1jYXNlLWNyZWF0b3Itd2lkZ2V0LmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBMaXZlQXBwc0Nhc2VDcmVhdG9yV2lkZ2V0Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIENhc2VUeXBlIG1vZGVsIGZvciB0aGUgY2FzZSB0eXBlIHlvdSB3YW50IHRvIHJ1biBhIGNhc2UgY3JlYXRvciBmb3IgKG5vcm1hbGx5IGNvbWVzIGZyb20gYW4gYXBwbGljYXRpb24gc2VsZWN0b3IgY29tcG9uZW50KVxuICAgKi9cbiAgQElucHV0KCkgYXBwbGljYXRpb246IENhc2VUeXBlO1xuXG4gIC8qKlxuICAgKiBzYW5kYm94SWQgLSB0aGlzIGNvbWVzIGZyb20gY2xhaW1zIHJlc29sdmVyXG4gICAqL1xuICBASW5wdXQoKSBzYW5kYm94SWQ6IG51bWJlcjtcblxuICAvKipcbiAgICogVGhlIEFwcGxpY2F0aW9uIElEIG9mIHRoZSBVSSAoc2hvdWxkIGlkZWFsbHkgYmUgdW5pcXVlIGFzIGl0IGlzIHNoYXJlZCBzdGF0ZSBrZXkpXG4gICAqL1xuICBASW5wdXQoKSB1aUFwcElkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIG92ZXJyaWRlIHRoZSBpbml0aWFsIGRhdGEgZm9yIGEgY2FzZSBjcmVhdG9yXG4gICAqL1xuICBASW5wdXQoKSBpbml0aWFsRGF0YTogYW55O1xuXG4gIC8qKlxuICAgKiBDdXN0b20gRm9ybSBjb25maWd1cmF0aW9uIGZpbGVcbiAgICovXG4gIEBJbnB1dCgpIGN1c3RvbUZvcm1EZWZzOiBDdXN0b21Gb3JtRGVmcztcblxuXG4gIC8qKlxuICAgKiB+ZXZlbnQgY2FzZUNyZWF0ZWQgOiBDYXNlIENyZWF0b3Igc3RhcnRlZCAocHJvY2VzcyBzdGFydGVkKVxuICAgKiB+cGF5bG9hZCBQcm9jZXNzSWQgOiBQcm9jZXNzSWQgb2JqZWN0IG91dHB1dCBvbiBjYXNlIGNyZWF0aW9uIChkZXRhaWxzIG9mIHByb2Nlc3Mgc3RhcnRlZClcbiAgICovXG4gIEBPdXRwdXQoKSBjYXNlQ3JlYXRlZDogRXZlbnRFbWl0dGVyPFByb2Nlc3NJZD4gPSBuZXcgRXZlbnRFbWl0dGVyPFByb2Nlc3NJZD4oKTtcbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICAvLyBoYW5kbGUgY2FzZSBjcmVhdGVkXG4gIHB1YmxpYyBoYW5kbGVDYXNlQ3JlYXRpb24gPSAocHJvY2Vzc0lkOiBQcm9jZXNzSWQpID0+IHtcbiAgICB0aGlzLmNhc2VDcmVhdGVkLmVtaXQocHJvY2Vzc0lkKTtcbiAgfVxuXG4gIG5nT25Jbml0KCk6IHZvaWQge1xuICB9XG5cbn1cbiJdfQ==