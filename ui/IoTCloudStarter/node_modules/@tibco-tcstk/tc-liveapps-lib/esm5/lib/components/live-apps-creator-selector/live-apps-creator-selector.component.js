/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// todo: JS deprecate this since now using private API to allow only listing of enabled creators
import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';
import { LaProcessSelection } from '../../models/tc-case-processes';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { LiveAppsService } from '../../services/live-apps.service';
import { map } from 'rxjs/operators';
import { MatSelect } from '@angular/material';
var LiveAppsCreatorSelectorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsCreatorSelectorComponent, _super);
    function LiveAppsCreatorSelectorComponent(liveapps) {
        var _this = _super.call(this) || this;
        _this.liveapps = liveapps;
        /**
         * ~event creatorSelection : Case Creator selected
         * ~payload LaProcessSelection : LaProcessSelection object output when a creator is selected from a drop down
         */
        _this.creatorSelection = new EventEmitter();
        // run when the user clicks on a case creator
        _this.selectProcess = (/**
         * @param {?} process
         * @return {?}
         */
        function (process) {
            _this.creatorSelection.emit(new LaProcessSelection('creator', _this.appSchema, _this.getCaseIDAttributeName(), process, 
            // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
            (_this.caseType.applicationName + '.' + _this.caseType.applicationInternalName + '.' + 'creator' + '.' + process.name), undefined));
        });
        _this.reset = (/**
         * @return {?}
         */
        function () {
            _this.creatorSelector.value = undefined;
        });
        _this.getCaseIDAttributeName = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var caseIdAttrib;
            _this.caseType.attributes.forEach((/**
             * @param {?} attribute
             * @return {?}
             */
            function (attribute) {
                if (attribute.isIdentifier) {
                    caseIdAttrib = attribute;
                }
            }));
            return caseIdAttrib;
        });
        _this.refresh = (/**
         * @return {?}
         */
        function () {
            // retrieve the schema for this case type so we can display case creators and case actions for this case type
            _this.liveapps.getCaseTypeSchema(_this.sandboxId, _this.appId, 100).pipe(map((/**
             * @param {?} schema
             * @return {?}
             */
            function (schema) {
                _this.appSchema = schema;
                schema.casetypes.forEach((/**
                 * @param {?} casetype
                 * @return {?}
                 */
                function (casetype) {
                    // the schema will contain definitions for both the 'case' and any defined types in that case.
                    // We want the schema for this 'case'.
                    if (casetype.applicationId === _this.appId && casetype.id === _this.typeId) {
                        if (casetype.jsonSchema !== undefined) {
                            _this.caseType = casetype;
                            _this.caseCreatorList = casetype.creators ? casetype.creators : [];
                            if (_this.caseCreatorList.length === 1) {
                                _this.selectProcess(_this.caseCreatorList[0]);
                            }
                        }
                        else {
                            console.error('No schema returned for this case type: You may need to update/re-deploy the live apps application');
                        }
                    }
                }));
            }))).subscribe();
        });
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    LiveAppsCreatorSelectorComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.appId && (changes.appId.currentValue !== changes.appId.previousValue)) {
            this.caseCreatorList = [];
            this.refresh();
        }
    };
    LiveAppsCreatorSelectorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-creator-selector',
                    template: "<div *ngIf=\"caseCreatorList && caseCreatorList.length > 1\" fxFlex style=\"margin-left: 10px;\">\n    <span class=\"tcs-case-creation-dialog-instruction\">Select a case creator</span>\n    <mat-select #creatorSelector class=\"tcs-creator-selector-option\" [disableOptionCentering]=\"true\"\n                placeholder=\"Case Creators\" (selectionChange)=\"selectProcess($event.value)\">\n      <mat-option *ngFor=\"let creator of caseCreatorList\" [value]=\"creator\">\n        <span>{{creator.name}}</span>\n      </mat-option>\n    </mat-select>\n</div>\n",
                    styles: [":host ::ng-deep .tcs-creator-selector-option .mat-select-value span{font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;color:#0081cb}:host ::ng-deep .tcs-creator-selector-option .mat-select-arrow-wrapper div{color:#0081cb}:host ::ng-deep .mat-select-value{min-width:100px;max-width:100%;width:auto}.tcs-creators-box{width:200px;height:44px;box-shadow:inset 0 1px 3px 0 rgba(0,0,0,.5);background-color:#fff}tcs-creator-selector-option{width:170px;margin-left:5px;margin-right:5px;background-color:#eee;padding-left:20px;padding-right:20px;height:35px}.tcs-case-creation-dialog-instruction{font-family:Source Sans Pro;font-size:16px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#727272}"]
                }] }
    ];
    /** @nocollapse */
    LiveAppsCreatorSelectorComponent.ctorParameters = function () { return [
        { type: LiveAppsService }
    ]; };
    LiveAppsCreatorSelectorComponent.propDecorators = {
        creatorSelector: [{ type: ViewChild, args: ['creatorSelector', { static: false },] }],
        sandboxId: [{ type: Input }],
        appId: [{ type: Input }],
        typeId: [{ type: Input }],
        creatorSelection: [{ type: Output }]
    };
    return LiveAppsCreatorSelectorComponent;
}(LiveAppsComponent));
export { LiveAppsCreatorSelectorComponent };
if (false) {
    /** @type {?} */
    LiveAppsCreatorSelectorComponent.prototype.creatorSelector;
    /** @type {?} */
    LiveAppsCreatorSelectorComponent.prototype.sandboxId;
    /** @type {?} */
    LiveAppsCreatorSelectorComponent.prototype.appId;
    /** @type {?} */
    LiveAppsCreatorSelectorComponent.prototype.typeId;
    /**
     * ~event creatorSelection : Case Creator selected
     * ~payload LaProcessSelection : LaProcessSelection object output when a creator is selected from a drop down
     * @type {?}
     */
    LiveAppsCreatorSelectorComponent.prototype.creatorSelection;
    /** @type {?} */
    LiveAppsCreatorSelectorComponent.prototype.appSchema;
    /** @type {?} */
    LiveAppsCreatorSelectorComponent.prototype.caseType;
    /** @type {?} */
    LiveAppsCreatorSelectorComponent.prototype.caseCreatorList;
    /** @type {?} */
    LiveAppsCreatorSelectorComponent.prototype.selectProcess;
    /** @type {?} */
    LiveAppsCreatorSelectorComponent.prototype.reset;
    /**
     * @type {?}
     * @private
     */
    LiveAppsCreatorSelectorComponent.prototype.getCaseIDAttributeName;
    /** @type {?} */
    LiveAppsCreatorSelectorComponent.prototype.refresh;
    /**
     * @type {?}
     * @private
     */
    LiveAppsCreatorSelectorComponent.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,