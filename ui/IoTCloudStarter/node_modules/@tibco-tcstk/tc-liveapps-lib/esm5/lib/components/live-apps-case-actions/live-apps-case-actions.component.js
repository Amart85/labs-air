/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { LiveAppsService } from '../../services/live-apps.service';
import { map, take, takeUntil, tap } from 'rxjs/operators';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { TcCaseProcessesService } from '../../services/tc-case-processes.service';
/**
 * Renders case action buttons
 *
 * ![alt-text](../live-apps-case-actions.png "Image")
 *
 * \@example <tcla-live-apps-case-actions></tcla-live-apps-case-actions>
 */
var LiveAppsCaseActionsComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsCaseActionsComponent, _super);
    function LiveAppsCaseActionsComponent(liveapps, caseProcessesService) {
        var _this = _super.call(this) || this;
        _this.liveapps = liveapps;
        _this.caseProcessesService = caseProcessesService;
        /**
         * Max Actions that can be run simultaneously
         */
        _this.maxActions = 1;
        /**
         * ~event actionClicked : Case Action selected
         * ~payload LaProcessSelection : LaProcessSelection object output when an action is clicked (ie. message to parent to run action component)
         */
        _this.actionClicked = new EventEmitter();
        _this.disabled = false;
        _this.refresh = (/**
         * @return {?}
         */
        function () {
            _this.caseProcessesService.getCaseActionsForCaseRef(_this.caseRef, _this.sandboxId, _this.appId, _this.typeId)
                .pipe(take(1), takeUntil(_this._destroyed$), map((/**
             * @param {?} caseactions
             * @return {?}
             */
            function (caseactions) {
                _this.caseactions = caseactions.actions;
            }))).subscribe(null, (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { _this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; }));
        });
        _this.toggleEnable = (/**
         * @return {?}
         */
        function () {
            _this.disabled = !_this.disabled;
        });
        return _this;
    }
    /**
     * @param {?} action
     * @return {?}
     */
    LiveAppsCaseActionsComponent.prototype.selectAction = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        var _this = this;
        this.caseProcessesService.getProcessDetails(this.caseRef, this.appId, this.typeId, this.sandboxId, action, null, 100).pipe(take(1), takeUntil(this._destroyed$), tap((/**
         * @param {?} processDetails
         * @return {?}
         */
        function (processDetails) {
            if (!processDetails || !processDetails.process || (processDetails.process.jsonSchema.$schema === 'NOSCHEMA')) {
                // This will be triggered when no form schema is available
                // Typically happens when:
                // 1) The form has elements that are not supported by the Live Apps API for form schemas such as participant selectors
                // 2) The Live Apps application is legacy and has no form schema at all, redeploying the live apps application would fix this.
                console.error('No schema available for this case type: The form may not be supported or you may need to update/re-deploy the live apps application');
            }
        })), map((/**
         * @param {?} processSchema
         * @return {?}
         */
        function (processSchema) {
            _this.actionClicked.emit(processSchema);
            return processSchema;
        })))
            .subscribe(null, (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { _this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; }));
    };
    /**
     * @return {?}
     */
    LiveAppsCaseActionsComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.refresh();
    };
    LiveAppsCaseActionsComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-case-actions',
                    template: "<div fxLayout=\"row\">\n  <button [disabled]=\"disabled\" [ngClass]=\"disabled ? 'disabled' : ''\" mat-button class=\"tcs-case-action-button\" *ngFor=\"let action of caseactions| slice:0:maxActions\"\n          matTooltip=\"{{action.label}}\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"above\"\n          (click)=\"selectAction(action)\">\n    {{action.label | ellipsis: 30 }}\n  </button>\n  <div fxLayout=\"row\" fxLayoutAlign=\"center center\" style=\"width: 75px\" *ngIf=\"caseactions && caseactions.length > maxActions\">\n    <mat-select class=\"tcs-case-action-option\" [disableOptionCentering]=\"true\" placeholder=\"More\" matTooltip=\"\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\">\n      <mat-option *ngFor=\"let action of caseactions | slice:maxActions:caseactions.length\" [value]=\"\" (click)=\"selectAction(action)\">\n        <span>{{action.label}}</span>\n      </mat-option>\n    </mat-select>\n  </div>\n</div>\n",
                    styles: [".tcs-case-action-button{height:40px;border-radius:3px;background-color:#fff;color:#0081cb;font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:.2px;margin:5px;border:1px solid #0081cb}.tcs-case-action-button.disabled{border:none}.tcs-case-action-option{padding-top:9px;padding-left:10px;padding-right:10px;height:40px;border-radius:3px;background-color:#fff;color:#0081cb;border:1px solid #0081cb}"]
                }] }
    ];
    /** @nocollapse */
    LiveAppsCaseActionsComponent.ctorParameters = function () { return [
        { type: LiveAppsService },
        { type: TcCaseProcessesService }
    ]; };
    LiveAppsCaseActionsComponent.propDecorators = {
        caseRef: [{ type: Input }],
        appId: [{ type: Input }],
        typeId: [{ type: Input }],
        sandboxId: [{ type: Input }],
        caseState: [{ type: Input }],
        maxActions: [{ type: Input }],
        actionClicked: [{ type: Output }]
    };
    return LiveAppsCaseActionsComponent;
}(LiveAppsComponent));
export { LiveAppsCaseActionsComponent };
if (false) {
    /**
     * The case reference
     * @type {?}
     */
    LiveAppsCaseActionsComponent.prototype.caseRef;
    /**
     * The LA Application Id
     * @type {?}
     */
    LiveAppsCaseActionsComponent.prototype.appId;
    /**
     * The LA Application Type Id (generally 1)
     * @type {?}
     */
    LiveAppsCaseActionsComponent.prototype.typeId;
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsCaseActionsComponent.prototype.sandboxId;
    /**
     * The state of the case
     * @type {?}
     */
    LiveAppsCaseActionsComponent.prototype.caseState;
    /**
     * Max Actions that can be run simultaneously
     * @type {?}
     */
    LiveAppsCaseActionsComponent.prototype.maxActions;
    /**
     * ~event actionClicked : Case Action selected
     * ~payload LaProcessSelection : LaProcessSelection object output when an action is clicked (ie. message to parent to run action component)
     * @type {?}
     */
    LiveAppsCaseActionsComponent.prototype.actionClicked;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.caseactions;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.errorMessage;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.disabled;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.appSchema;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.caseType;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.caseActionList;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.refresh;
    /** @type {?} */
    LiveAppsCaseActionsComponent.prototype.toggleEnable;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsCaseActionsComponent.prototype.liveapps;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsCaseActionsComponent.prototype.caseProcessesService;
}
//# sourceMappingURL=data:application/json;base64,