/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { RouteAccessControlConfigurationElement } from '../../models/tc-groups-data';
import { TcAccessControlService } from '../../services/tc-access-control.service';
import { MatSnackBar } from '@angular/material';
var LiveAppsSettingsAccessControlComponent = /** @class */ (function () {
    function LiveAppsSettingsAccessControlComponent(route, accessControlService, snackBar) {
        var _this = this;
        this.route = route;
        this.accessControlService = accessControlService;
        this.snackBar = snackBar;
        this.displayedColumns = [];
        this.dataSource = [];
        this.generateTables = (/**
         * @return {?}
         */
        function () {
            _this.displayedColumns = ['name'];
            _this.allRoles.roles.forEach((/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                _this.displayedColumns.push(role.id);
            }));
            // Create in dataSource all rows with the appropriate order
            _this.dataSource.push({ initial: 'Routes', isGroupBy: true });
            _this.accessControlConfiguration.allowedRoutes.forEach((/**
             * @param {?} route
             * @return {?}
             */
            function (route) { return _this.dataSource.push({ name: route, type: 'route' }); }));
            _this.dataSource.push({ initial: 'Buttons', isGroupBy: true });
            _this.accessControlConfiguration.allowedButtonIds.forEach((/**
             * @param {?} buttonId
             * @return {?}
             */
            function (buttonId) { return _this.dataSource.push({ name: buttonId, type: 'button' }); }));
            // Update the dataSource with the previous configuration
            _this.accessControlConfiguration.configuration.forEach((/**
             * @param {?} configElement
             * @return {?}
             */
            function (configElement) {
                // Routes
                configElement.routes.forEach((/**
                 * @param {?} configRoute
                 * @return {?}
                 */
                function (configRoute) {
                    /** @type {?} */
                    var row = _this.dataSource.filter((/**
                     * @param {?} entry
                     * @return {?}
                     */
                    function (entry) { return entry.name === configRoute; }))[0];
                    row[configElement.roleId] = true;
                }));
                // ButtonsIds
                configElement.buttonIds.forEach((/**
                 * @param {?} configRoute
                 * @return {?}
                 */
                function (configRoute) {
                    /** @type {?} */
                    var row = _this.dataSource.filter((/**
                     * @param {?} entry
                     * @return {?}
                     */
                    function (entry) { return entry.name === configRoute; }))[0];
                    row[configElement.roleId] = true;
                }));
            }));
        });
        this.isSelected = (/**
         * @param {?} row
         * @param {?} role
         * @return {?}
         */
        function (row, role) {
            return row[role];
        });
        this.toggle = (/**
         * @param {?} row
         * @param {?} role
         * @return {?}
         */
        function (row, role) {
            /** @type {?} */
            var dsRow = _this.dataSource.filter((/**
             * @param {?} entry
             * @return {?}
             */
            function (entry) { return entry.name === row.name; }))[0];
            if (dsRow[role]) {
                delete dsRow[role];
            }
            else {
                dsRow[role] = true;
            }
        });
    }
    /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    LiveAppsSettingsAccessControlComponent.prototype.isGroup = /**
     * @param {?} index
     * @param {?} item
     * @return {?}
     */
    function (index, item) {
        return item.isGroupBy;
    };
    /**
     * @return {?}
     */
    LiveAppsSettingsAccessControlComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.accessControlConfiguration = this.route.snapshot.data.accessControlConfigHolder;
        this.allRoles = this.route.snapshot.data.allRoles;
        this.generateTables();
    };
    /**
     * @return {?}
     */
    LiveAppsSettingsAccessControlComponent.prototype.runSaveFunction = /**
     * @return {?}
     */
    function () {
        var _this = this;
        var e_1, _a;
        this.accessControlConfiguration.configuration = [];
        var _loop_1 = function (role) {
            /** @type {?} */
            var userConfiguration = this_1.dataSource.filter((/**
             * @param {?} entry
             * @return {?}
             */
            function (entry) { return entry[role.id]; }));
            /** @type {?} */
            var routes = userConfiguration.filter((/**
             * @param {?} row
             * @return {?}
             */
            function (row) { return row.type === 'route'; })).map((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return element.name; }));
            /** @type {?} */
            var buttonIds = userConfiguration.filter((/**
             * @param {?} row
             * @return {?}
             */
            function (row) { return row.type === 'button'; })).map((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return element.name; }));
            this_1.accessControlConfiguration.configuration.push(new RouteAccessControlConfigurationElement().deserialize({ 'roleId': role.id, routes: routes, buttonIds: buttonIds }));
        };
        var this_1 = this;
        try {
            for (var _b = tslib_1.__values(this.allRoles.roles), _c = _b.next(); !_c.done; _c = _b.next()) {
                var role = _c.value;
                _loop_1(role);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        this.accessControlService.updateAccessControlConfig(Number(this.route.snapshot.data.claims.primaryProductionSandbox.id).valueOf(), this.accessControlConfiguration.uiAppId, this.accessControlConfiguration, this.accessControlConfiguration.id).subscribe((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            _this.snackBar.open('Access Control configuration saved', 'OK', {
                duration: 3000
            });
        }), (/**
         * @param {?} error
         * @return {?}
         */
        function (error) {
            _this.snackBar.open('Error saving Access Control configuration saved', 'OK', {
                duration: 3000
            });
        }));
    };
    LiveAppsSettingsAccessControlComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-settings-access-control',
                    template: "<div fxLayout=\"column\" fxFill>\n  <tc-tibco-cloud-widget-header style=\"height: 40px;\" [icon]=\"'tcs-capabilities'\"\n                                [headerText]=\"'Access Control Configuration'\">\n  </tc-tibco-cloud-widget-header>\n  <div fxFlex style=\"padding: 20px; overflow: hidden\" fxLayout=\"column\">\n    <div style=\"overflow: auto;\" fxFlex fxLayout=\"column\">\n      <div fxLayout=\"column\">\n        <p>You can configure roles by here:</p>\n        <br>\n        <table fxFlex mat-table [dataSource]=\"dataSource\" class=\"mat-elevation-z8\">\n\n          <!-- Name Column -->\n          <ng-container matColumnDef=\"name\">\n            <th mat-header-cell *matHeaderCellDef></th>\n            <td mat-cell *matCellDef=\"let element\"> {{element.name}} </td>\n          </ng-container>\n\n          <ng-container *ngFor=\"let role of allRoles.roles\" matColumnDef=\"{{role.id}}\">\n            <th mat-header-cell *matHeaderCellDef [ngClass]=\"'centered-cell'\">{{role.id}}</th>\n            <td mat-cell [ngClass]=\"'centered-cell'\" *matCellDef=\"let row\">\n              <!-- (click)=\"$event.stopPropagation()\" (change)=\"$event ? selection.toggle(row) : null\" [checked]=\"selection.isSelected(row)\" -->\n              <mat-checkbox [disabled]=\"(row.type === 'button' && row.name === 'configure') || (row.type === 'route' && row.name === '/starterApp/configuration') \"\n                            (click)=\"$event.stopPropagation()\" [checked]=\"isSelected(row, role.id)\"\n                            (change)=\"$event ? toggle(row, role.id) : null\"\n              ></mat-checkbox>\n            </td>\n          </ng-container>\n\n          <tr mat-header-row *matHeaderRowDef=\"displayedColumns\"></tr>\n          <tr mat-row *matRowDef=\"let row; columns: displayedColumns;\"></tr>\n\n          <!-- Group header -->\n          <ng-container matColumnDef=\"groupHeader\">\n            <td colspan=\"999\" mat-cell *matCellDef=\"let groupBy\"><strong>{{groupBy.initial}}</strong></td>\n          </ng-container>\n\n          <tr mat-row *matRowDef=\"let row; columns: ['groupHeader']; when: isGroup\"></tr>\n\n        </table>\n      </div>\n      <div fxFlex class=\"tcs-filler-panel\"></div>\n      <div fxLayout=\"row\" fxLayoutAlign=\"end end\" fxLayoutGap=\"10px\" style=\"min-height: 50px\">\n        <button mat-raised-button color=\"primary\" (click)=\"runSaveFunction()\">Save</button>\n      </div>\n    </div>\n  </div>\n</div>\n",
                    styles: [".centered-cell{text-align:center}"]
                }] }
    ];
    /** @nocollapse */
    LiveAppsSettingsAccessControlComponent.ctorParameters = function () { return [
        { type: ActivatedRoute },
        { type: TcAccessControlService },
        { type: MatSnackBar }
    ]; };
    return LiveAppsSettingsAccessControlComponent;
}());
export { LiveAppsSettingsAccessControlComponent };
if (false) {
    /** @type {?} */
    LiveAppsSettingsAccessControlComponent.prototype.displayedColumns;
    /** @type {?} */
    LiveAppsSettingsAccessControlComponent.prototype.dataSource;
    /**
     * @type {?}
     * @private
     */
    LiveAppsSettingsAccessControlComponent.prototype.accessControlConfiguration;
    /** @type {?} */
    LiveAppsSettingsAccessControlComponent.prototype.allRoles;
    /**
     * @type {?}
     * @private
     */
    LiveAppsSettingsAccessControlComponent.prototype.generateTables;
    /** @type {?} */
    LiveAppsSettingsAccessControlComponent.prototype.isSelected;
    /** @type {?} */
    LiveAppsSettingsAccessControlComponent.prototype.toggle;
    /**
     * @type {?}
     * @private
     */
    LiveAppsSettingsAccessControlComponent.prototype.route;
    /**
     * @type {?}
     * @private
     */
    LiveAppsSettingsAccessControlComponent.prototype.accessControlService;
    /**
     * @type {?}
     * @private
     */
    LiveAppsSettingsAccessControlComponent.prototype.snackBar;
}
//# sourceMappingURL=data:application/json;base64,