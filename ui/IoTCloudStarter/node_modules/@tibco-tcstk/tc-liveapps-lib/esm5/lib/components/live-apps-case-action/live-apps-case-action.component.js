/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { LiveAppsCaseCreatorComponent } from '../live-apps-case-creator/live-apps-case-creator.component';
import { LiveAppsService } from '../../services/live-apps.service';
import { map, take, takeUntil } from 'rxjs/operators';
/**
 * Wraps rendering an execution of an action
 *
 * \@example <tcla-live-apps-case-action></tcla-live-apps-case-action>
 */
var LiveAppsCaseActionComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsCaseActionComponent, _super);
    function LiveAppsCaseActionComponent(lasvc) {
        var _this = _super.call(this, lasvc) || this;
        _this.lasvc = lasvc;
        _this.getCaseData = (/**
         * @param {?} caseRef
         * @return {?}
         */
        function (caseRef) {
            // retrieve the case data for this case reference
            _this.liveapps.getCase(_this.caseRef, _this.sandboxId, _this.applicationId, _this.typeId)
                .pipe(take(1), takeUntil(_this._destroyed$), map((/**
             * @param {?} result
             * @return {?}
             */
            function (result) {
                var _a, _b;
                if (result.metadata.applicationId === _this.applicationId.toString()) {
                    /** @type {?} */
                    var casedata = result.untaggedCasedataObj;
                    _this.originalData = (_a = {},
                        _a[_this.process.process.name] = casedata,
                        _a);
                    // JS: use name rather than internalObjectName to handle appliction name change
                    /** @type {?} */
                    var caseTypeName = _this.getMainCaseTypeFromSchema(_this.typeId, _this.process).name;
                    _this.data = (_b = {},
                        _b[caseTypeName] = casedata,
                        _b);
                }
                else {
                    console.error('The selected case is not the right case type for this action');
                }
            })))
                .subscribe((/**
             * @param {?} success
             * @return {?}
             */
            function (success) { return success; }), (/**
             * @param {?} error
             * @return {?}
             */
            function (error) {
                // Emit any error retrieving case data to the parent
                console.error('Unable to retrieve case data');
                console.error(error);
            }));
        });
        return _this;
    }
    /**
     * @private
     * @param {?} typeId
     * @param {?} process
     * @return {?}
     */
    LiveAppsCaseActionComponent.prototype.getMainCaseTypeFromSchema = /**
     * @private
     * @param {?} typeId
     * @param {?} process
     * @return {?}
     */
    function (typeId, process) {
        /** @type {?} */
        var requestedType;
        process.appSchema.casetypes.forEach((/**
         * @param {?} cType
         * @return {?}
         */
        function (cType) {
            if (cType.id === typeId) {
                requestedType = cType;
            }
        }));
        return requestedType;
    };
    /**
     * @return {?}
     */
    LiveAppsCaseActionComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // set default layout
        // this.layout = [];
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LiveAppsCaseActionComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // the extended class will detect change in the process and layout passed
        _super.prototype.ngOnChanges.call(this, changes);
        // handle input param changes
        if ((changes.caseRef && changes.caseRef.currentValue && (changes.caseRef.currentValue !== changes.caseRef.previousValue))
            || (changes.process && changes.process.currentValue && (changes.process.currentValue !== changes.process.previousValue))) {
            // get case data if anything changes
            if (changes.process.currentValue) {
                this.getCaseData(this.caseRef);
            }
        }
    };
    LiveAppsCaseActionComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-case-action',
                    template: "<div class=\"tcs-case-action-pane\" fxLayout=\"column\" fxFill>\n  <tc-tibco-cloud-widget-header *ngIf=\"showHeader\" fxFlex=\"nogrow\" [headerText]=\"'Action'\" [icon]=\"'tcs-case-action-item'\"></tc-tibco-cloud-widget-header>\n  <tcfrm-rendered-form *ngIf=\"data && process\" [schema]=\"schema\" [layout]=\"layout\" [data]=\"data\" [caseRef]=\"caseRef\" [appId]=\"applicationId\" [customFormDefs]=\"customFormDefs\" [formRef]=\"process.ref\" (formSubmit)=\"handleSubmit($event, caseRef)\"></tcfrm-rendered-form>\n</div>\n",
                    styles: [".tcs-case-action-pane{border-radius:3px;box-shadow:0 2px 4px 0 rgba(0,0,0,.33);background-color:#fff}.tcs-case-action-header{height:40px;border-radius:3px 3px 0 0;box-shadow:0 1px 2px 0 #dedede;padding-left:20px;padding-right:20px}.tcs-case-action-header-text{margin-left:10px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px}"]
                }] }
    ];
    /** @nocollapse */
    LiveAppsCaseActionComponent.ctorParameters = function () { return [
        { type: LiveAppsService }
    ]; };
    LiveAppsCaseActionComponent.propDecorators = {
        caseRef: [{ type: Input }],
        showHeader: [{ type: Input }]
    };
    return LiveAppsCaseActionComponent;
}(LiveAppsCaseCreatorComponent));
export { LiveAppsCaseActionComponent };
if (false) {
    /**
     * The case reference
     * @type {?}
     */
    LiveAppsCaseActionComponent.prototype.caseRef;
    /**
     * Whether to show the header bar in the widget - eg. favorites on home page (contains icon etc) - if off icons still appear without bar
     * @type {?}
     */
    LiveAppsCaseActionComponent.prototype.showHeader;
    /** @type {?} */
    LiveAppsCaseActionComponent.prototype.originalData;
    /**
     * @type {?}
     * @private
     */
    LiveAppsCaseActionComponent.prototype.getCaseData;
    /**
     * @type {?}
     * @private
     */
    LiveAppsCaseActionComponent.prototype.lasvc;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWNhc2UtYWN0aW9uLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1saXZlYXBwcy1saWIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9saXZlLWFwcHMtY2FzZS1hY3Rpb24vbGl2ZS1hcHBzLWNhc2UtYWN0aW9uLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQWdCLEtBQUssRUFBc0QsTUFBTSxlQUFlLENBQUM7QUFDbEgsT0FBTyxFQUFDLDRCQUE0QixFQUFDLE1BQU0sNERBQTRELENBQUM7QUFDeEcsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLGtDQUFrQyxDQUFDO0FBQ2pFLE9BQU8sRUFBQyxHQUFHLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7Ozs7QUFXcEQ7SUFLaUQsdURBQTRCO0lBb0QzRSxxQ0FBb0IsS0FBc0I7UUFBMUMsWUFDRSxrQkFBTSxLQUFLLENBQUMsU0FDYjtRQUZtQixXQUFLLEdBQUwsS0FBSyxDQUFpQjtRQTdCbEMsaUJBQVc7Ozs7UUFBRyxVQUFDLE9BQU87WUFDNUIsaURBQWlEO1lBQ2pELEtBQUksQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLEtBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSSxDQUFDLFNBQVMsRUFBRSxLQUFJLENBQUMsYUFBYSxFQUFFLEtBQUksQ0FBQyxNQUFNLENBQUU7aUJBQ2xGLElBQUksQ0FDSCxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsU0FBUyxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsRUFDM0IsR0FBRzs7OztZQUFDLFVBQUEsTUFBTTs7Z0JBQ1IsSUFBSSxNQUFNLENBQUMsUUFBUSxDQUFDLGFBQWEsS0FBSyxLQUFJLENBQUMsYUFBYSxDQUFDLFFBQVEsRUFBRSxFQUFFOzt3QkFDN0QsUUFBUSxHQUFHLE1BQU0sQ0FBQyxtQkFBbUI7b0JBQzNDLEtBQUksQ0FBQyxZQUFZO3dCQUNmLEdBQUMsS0FBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsSUFBSSxJQUFHLFFBQVE7MkJBQ3RDLENBQUM7Ozt3QkFFSSxZQUFZLEdBQUcsS0FBSSxDQUFDLHlCQUF5QixDQUFDLEtBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLElBQUk7b0JBQ25GLEtBQUksQ0FBQyxJQUFJO3dCQUNQLEdBQUMsWUFBWSxJQUFHLFFBQVE7MkJBQ3pCLENBQUM7aUJBQ0g7cUJBQU07b0JBQ0wsT0FBTyxDQUFDLEtBQUssQ0FBQyw4REFBOEQsQ0FBQyxDQUFDO2lCQUMvRTtZQUNILENBQUMsRUFBQyxDQUNMO2lCQUNFLFNBQVM7Ozs7WUFBQyxVQUFBLE9BQU8sSUFBSSxPQUFBLE9BQU8sRUFBUCxDQUFPOzs7O1lBQUUsVUFBQSxLQUFLO2dCQUNsQyxvREFBb0Q7Z0JBQ3BELE9BQU8sQ0FBQyxLQUFLLENBQUMsOEJBQThCLENBQUMsQ0FBQztnQkFDOUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUN2QixDQUFDLEVBQUMsQ0FBQztRQUNQLENBQUMsRUFBQTs7SUFJRCxDQUFDOzs7Ozs7O0lBekNPLCtEQUF5Qjs7Ozs7O0lBQWpDLFVBQWtDLE1BQWMsRUFBRSxPQUEyQjs7WUFDdkUsYUFBdUI7UUFDM0IsT0FBTyxDQUFDLFNBQVMsQ0FBQyxTQUFTLENBQUMsT0FBTzs7OztRQUFDLFVBQUMsS0FBSztZQUN4QyxJQUFJLEtBQUssQ0FBQyxFQUFFLEtBQUssTUFBTSxFQUFFO2dCQUN2QixhQUFhLEdBQUcsS0FBSyxDQUFDO2FBQ3ZCO1FBQ0gsQ0FBQyxFQUFDLENBQUM7UUFDSCxPQUFPLGFBQWEsQ0FBQztJQUN2QixDQUFDOzs7O0lBbUNELDhDQUFROzs7SUFBUjtRQUNFLHFCQUFxQjtRQUNyQixvQkFBb0I7SUFDdEIsQ0FBQzs7Ozs7SUFFRCxpREFBVzs7OztJQUFYLFVBQVksT0FBc0I7UUFDaEMseUVBQXlFO1FBQ3pFLGlCQUFNLFdBQVcsWUFBQyxPQUFPLENBQUMsQ0FBQztRQUMzQiw2QkFBNkI7UUFDN0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLElBQUksT0FBTyxDQUFDLE9BQU8sQ0FBQyxZQUFZLElBQUksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksS0FBSyxPQUFPLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2VBQ3BILENBQUMsT0FBTyxDQUFDLE9BQU8sSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsWUFBWSxLQUFLLE9BQU8sQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRTtZQUMxSCxvQ0FBb0M7WUFDcEMsSUFBSSxPQUFPLENBQUMsT0FBTyxDQUFDLFlBQVksRUFBRTtnQkFDaEMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDaEM7U0FDRjtJQUNILENBQUM7O2dCQTdFRixTQUFTLFNBQUM7b0JBQ1QsUUFBUSxFQUFFLDRCQUE0QjtvQkFDdEMsdWhCQUFxRDs7aUJBRXREOzs7O2dCQWhCTyxlQUFlOzs7MEJBcUJwQixLQUFLOzZCQUtMLEtBQUs7O0lBaUVSLGtDQUFDO0NBQUEsQUEvRUQsQ0FLaUQsNEJBQTRCLEdBMEU1RTtTQTFFWSwyQkFBMkI7Ozs7OztJQUl0Qyw4Q0FBeUI7Ozs7O0lBS3pCLGlEQUE2Qjs7SUFFN0IsbURBQWtCOzs7OztJQVlsQixrREEyQkM7Ozs7O0lBRVcsNENBQThCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIEV2ZW50RW1pdHRlciwgSW5wdXQsIE9uQ2hhbmdlcywgT25Jbml0LCBPdXRwdXQsIFNpbXBsZUNoYW5nZXMsIFZpZXdDaGlsZH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0xpdmVBcHBzQ2FzZUNyZWF0b3JDb21wb25lbnR9IGZyb20gJy4uL2xpdmUtYXBwcy1jYXNlLWNyZWF0b3IvbGl2ZS1hcHBzLWNhc2UtY3JlYXRvci5jb21wb25lbnQnO1xuaW1wb3J0IHtMaXZlQXBwc1NlcnZpY2V9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2xpdmUtYXBwcy5zZXJ2aWNlJztcbmltcG9ydCB7bWFwLCB0YWtlLCB0YWtlVW50aWx9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7Q2FzZVR5cGUsIFByb2Nlc3NJZH0gZnJvbSAnLi4vLi4vbW9kZWxzL2xpdmVhcHBzZGF0YSc7XG5pbXBvcnQge0xhUHJvY2Vzc1NlbGVjdGlvbn0gZnJvbSAnLi4vLi4vbW9kZWxzL3RjLWNhc2UtcHJvY2Vzc2VzJztcblxuXG4vKipcbiAqIFdyYXBzIHJlbmRlcmluZyBhbiBleGVjdXRpb24gb2YgYW4gYWN0aW9uXG4gKlxuICpAZXhhbXBsZSA8dGNsYS1saXZlLWFwcHMtY2FzZS1hY3Rpb24+PC90Y2xhLWxpdmUtYXBwcy1jYXNlLWFjdGlvbj5cbiAqL1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0Y2xhLWxpdmUtYXBwcy1jYXNlLWFjdGlvbicsXG4gIHRlbXBsYXRlVXJsOiAnLi9saXZlLWFwcHMtY2FzZS1hY3Rpb24uY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9saXZlLWFwcHMtY2FzZS1hY3Rpb24uY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIExpdmVBcHBzQ2FzZUFjdGlvbkNvbXBvbmVudCBleHRlbmRzIExpdmVBcHBzQ2FzZUNyZWF0b3JDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQsIE9uQ2hhbmdlcyB7XG4gIC8qKlxuICAgKiBUaGUgY2FzZSByZWZlcmVuY2VcbiAgICovXG4gIEBJbnB1dCgpIGNhc2VSZWY6IHN0cmluZztcblxuICAvKipcbiAgICogV2hldGhlciB0byBzaG93IHRoZSBoZWFkZXIgYmFyIGluIHRoZSB3aWRnZXQgLSBlZy4gZmF2b3JpdGVzIG9uIGhvbWUgcGFnZSAoY29udGFpbnMgaWNvbiBldGMpIC0gaWYgb2ZmIGljb25zIHN0aWxsIGFwcGVhciB3aXRob3V0IGJhclxuICAgKi9cbiAgQElucHV0KCkgc2hvd0hlYWRlcjogYm9vbGVhbjtcblxuICBvcmlnaW5hbERhdGE6IGFueTtcblxuICBwcml2YXRlIGdldE1haW5DYXNlVHlwZUZyb21TY2hlbWEodHlwZUlkOiBzdHJpbmcsIHByb2Nlc3M6IExhUHJvY2Vzc1NlbGVjdGlvbik6IENhc2VUeXBlIHtcbiAgICBsZXQgcmVxdWVzdGVkVHlwZTogQ2FzZVR5cGU7XG4gICAgcHJvY2Vzcy5hcHBTY2hlbWEuY2FzZXR5cGVzLmZvckVhY2goKGNUeXBlKSA9PiB7XG4gICAgICBpZiAoY1R5cGUuaWQgPT09IHR5cGVJZCkge1xuICAgICAgICByZXF1ZXN0ZWRUeXBlID0gY1R5cGU7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlcXVlc3RlZFR5cGU7XG4gIH1cblxuICBwcml2YXRlIGdldENhc2VEYXRhID0gKGNhc2VSZWYpID0+IHtcbiAgICAvLyByZXRyaWV2ZSB0aGUgY2FzZSBkYXRhIGZvciB0aGlzIGNhc2UgcmVmZXJlbmNlXG4gICAgdGhpcy5saXZlYXBwcy5nZXRDYXNlKHRoaXMuY2FzZVJlZiwgdGhpcy5zYW5kYm94SWQsIHRoaXMuYXBwbGljYXRpb25JZCwgdGhpcy50eXBlSWQgKVxuICAgICAgLnBpcGUoXG4gICAgICAgIHRha2UoMSksXG4gICAgICAgIHRha2VVbnRpbCh0aGlzLl9kZXN0cm95ZWQkKSxcbiAgICAgICAgbWFwKHJlc3VsdCA9PiB7XG4gICAgICAgICAgaWYgKHJlc3VsdC5tZXRhZGF0YS5hcHBsaWNhdGlvbklkID09PSB0aGlzLmFwcGxpY2F0aW9uSWQudG9TdHJpbmcoKSkge1xuICAgICAgICAgICAgY29uc3QgY2FzZWRhdGEgPSByZXN1bHQudW50YWdnZWRDYXNlZGF0YU9iajtcbiAgICAgICAgICAgIHRoaXMub3JpZ2luYWxEYXRhID0ge1xuICAgICAgICAgICAgICBbdGhpcy5wcm9jZXNzLnByb2Nlc3MubmFtZV06IGNhc2VkYXRhXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gSlM6IHVzZSBuYW1lIHJhdGhlciB0aGFuIGludGVybmFsT2JqZWN0TmFtZSB0byBoYW5kbGUgYXBwbGljdGlvbiBuYW1lIGNoYW5nZVxuICAgICAgICAgICAgY29uc3QgY2FzZVR5cGVOYW1lID0gdGhpcy5nZXRNYWluQ2FzZVR5cGVGcm9tU2NoZW1hKHRoaXMudHlwZUlkLCB0aGlzLnByb2Nlc3MpLm5hbWU7XG4gICAgICAgICAgICB0aGlzLmRhdGEgPSB7XG4gICAgICAgICAgICAgIFtjYXNlVHlwZU5hbWVdOiBjYXNlZGF0YVxuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5lcnJvcignVGhlIHNlbGVjdGVkIGNhc2UgaXMgbm90IHRoZSByaWdodCBjYXNlIHR5cGUgZm9yIHRoaXMgYWN0aW9uJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgIClcbiAgICAgIC5zdWJzY3JpYmUoc3VjY2VzcyA9PiBzdWNjZXNzLCBlcnJvciA9PiB7XG4gICAgICAgIC8vIEVtaXQgYW55IGVycm9yIHJldHJpZXZpbmcgY2FzZSBkYXRhIHRvIHRoZSBwYXJlbnRcbiAgICAgICAgY29uc29sZS5lcnJvcignVW5hYmxlIHRvIHJldHJpZXZlIGNhc2UgZGF0YScpO1xuICAgICAgICBjb25zb2xlLmVycm9yKGVycm9yKTtcbiAgICAgIH0pO1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsYXN2YzogTGl2ZUFwcHNTZXJ2aWNlKSB7XG4gICAgc3VwZXIobGFzdmMpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgLy8gc2V0IGRlZmF1bHQgbGF5b3V0XG4gICAgLy8gdGhpcy5sYXlvdXQgPSBbXTtcbiAgfVxuXG4gIG5nT25DaGFuZ2VzKGNoYW5nZXM6IFNpbXBsZUNoYW5nZXMpIHtcbiAgICAvLyB0aGUgZXh0ZW5kZWQgY2xhc3Mgd2lsbCBkZXRlY3QgY2hhbmdlIGluIHRoZSBwcm9jZXNzIGFuZCBsYXlvdXQgcGFzc2VkXG4gICAgc3VwZXIubmdPbkNoYW5nZXMoY2hhbmdlcyk7XG4gICAgLy8gaGFuZGxlIGlucHV0IHBhcmFtIGNoYW5nZXNcbiAgICBpZiAoKGNoYW5nZXMuY2FzZVJlZiAmJiBjaGFuZ2VzLmNhc2VSZWYuY3VycmVudFZhbHVlICYmIChjaGFuZ2VzLmNhc2VSZWYuY3VycmVudFZhbHVlICE9PSBjaGFuZ2VzLmNhc2VSZWYucHJldmlvdXNWYWx1ZSkpXG4gICAgICB8fCAoY2hhbmdlcy5wcm9jZXNzICYmIGNoYW5nZXMucHJvY2Vzcy5jdXJyZW50VmFsdWUgJiYgKGNoYW5nZXMucHJvY2Vzcy5jdXJyZW50VmFsdWUgIT09IGNoYW5nZXMucHJvY2Vzcy5wcmV2aW91c1ZhbHVlKSkpIHtcbiAgICAgIC8vIGdldCBjYXNlIGRhdGEgaWYgYW55dGhpbmcgY2hhbmdlc1xuICAgICAgaWYgKGNoYW5nZXMucHJvY2Vzcy5jdXJyZW50VmFsdWUpIHtcbiAgICAgICAgdGhpcy5nZXRDYXNlRGF0YSh0aGlzLmNhc2VSZWYpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG59XG4iXX0=