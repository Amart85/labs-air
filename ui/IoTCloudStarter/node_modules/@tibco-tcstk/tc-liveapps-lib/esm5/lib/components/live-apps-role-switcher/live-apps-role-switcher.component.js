/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter } from '@angular/core';
import { RoleAttribute } from '@tibco-tcstk/tc-core-lib';
/**
 * Switch roles
 *
 * \@example <tcla-live-apps-role-switcher></tcla-live-apps-role-switcher>
 */
var LiveAppsRoleSwitcherComponent = /** @class */ (function () {
    function LiveAppsRoleSwitcherComponent() {
        var _this = this;
        /**
         * ~event changeRoleEvent : Role selected
         * ~payload RoleAttribute : RoleAttribute object emitted when role is c hanged by switcher
         */
        this.changeRoleEvent = new EventEmitter();
        this.selectRole = (/**
         * @param {?} role
         * @return {?}
         */
        function (role) {
            _this.changeRoleEvent.emit(role);
        });
        this.compareObjects = (/**
         * @param {?} o1
         * @param {?} o2
         * @return {?}
         */
        function (o1, o2) {
            return o1.id === o2.id;
        });
    }
    /**
     * @return {?}
     */
    LiveAppsRoleSwitcherComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
    };
    LiveAppsRoleSwitcherComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-role-switcher',
                    template: "<div>\n    <mat-form-field>\n        <mat-label>Viewing as</mat-label>\n        <mat-select [(ngModel)]=\"selectedRole\" (selectionChange)=\"selectRole(selectedRole)\" [compareWith]=\"compareObjects\"> \n            <mat-option *ngFor=\"let role of roles\" [value]=\"role\">{{role.display}}</mat-option>\n        </mat-select>\n    </mat-form-field>\n</div>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    LiveAppsRoleSwitcherComponent.ctorParameters = function () { return []; };
    LiveAppsRoleSwitcherComponent.propDecorators = {
        roles: [{ type: Input }],
        selectedRole: [{ type: Input }],
        changeRoleEvent: [{ type: Output }]
    };
    return LiveAppsRoleSwitcherComponent;
}());
export { LiveAppsRoleSwitcherComponent };
if (false) {
    /**
     * Roles - The users current roles
     * @type {?}
     */
    LiveAppsRoleSwitcherComponent.prototype.roles;
    /**
     * RoleAttribute - selected Role - check with MC
     * @type {?}
     */
    LiveAppsRoleSwitcherComponent.prototype.selectedRole;
    /**
     * ~event changeRoleEvent : Role selected
     * ~payload RoleAttribute : RoleAttribute object emitted when role is c hanged by switcher
     * @type {?}
     */
    LiveAppsRoleSwitcherComponent.prototype.changeRoleEvent;
    /** @type {?} */
    LiveAppsRoleSwitcherComponent.prototype.selectRole;
    /** @type {?} */
    LiveAppsRoleSwitcherComponent.prototype.compareObjects;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLXJvbGUtc3dpdGNoZXIuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9jb21wb25lbnRzL2xpdmUtYXBwcy1yb2xlLXN3aXRjaGVyL2xpdmUtYXBwcy1yb2xlLXN3aXRjaGVyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFNBQVMsRUFBVSxLQUFLLEVBQUUsTUFBTSxFQUFFLFlBQVksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMvRSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7Ozs7OztBQVF6RDtJQXdCRTtRQUFBLGlCQUFpQjs7Ozs7UUFIUCxvQkFBZSxHQUFnQyxJQUFJLFlBQVksRUFBaUIsQ0FBQztRQVFsRixlQUFVOzs7O1FBQUcsVUFBQyxJQUFtQjtZQUNwQyxLQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUNwQyxDQUFDLEVBQUE7UUFFRCxtQkFBYzs7Ozs7UUFBRyxVQUFDLEVBQWlCLEVBQUUsRUFBaUI7WUFDbEQsT0FBTyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLENBQUM7UUFDM0IsQ0FBQyxFQUFBO0lBWGEsQ0FBQzs7OztJQUVmLGdEQUFROzs7SUFBUjtJQUNBLENBQUM7O2dCQTNCSixTQUFTLFNBQUM7b0JBQ1AsUUFBUSxFQUFFLDhCQUE4QjtvQkFDeEMsaVhBQXVEOztpQkFFMUQ7Ozs7O3dCQU1FLEtBQUs7K0JBS0wsS0FBSztrQ0FNTCxNQUFNOztJQWVULG9DQUFDO0NBQUEsQUFwQ0QsSUFvQ0M7U0EvQlksNkJBQTZCOzs7Ozs7SUFLeEMsOENBQWdDOzs7OztJQUtoQyxxREFBcUM7Ozs7OztJQU1yQyx3REFBMkY7O0lBUXpGLG1EQUVDOztJQUVELHVEQUVDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBPbkluaXQsIElucHV0LCBPdXRwdXQsIEV2ZW50RW1pdHRlciB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm9sZUF0dHJpYnV0ZSB9IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5cbi8qKlxuICogU3dpdGNoIHJvbGVzXG4gKlxuICpAZXhhbXBsZSA8dGNsYS1saXZlLWFwcHMtcm9sZS1zd2l0Y2hlcj48L3RjbGEtbGl2ZS1hcHBzLXJvbGUtc3dpdGNoZXI+XG4gKi9cblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICd0Y2xhLWxpdmUtYXBwcy1yb2xlLXN3aXRjaGVyJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbGl2ZS1hcHBzLXJvbGUtc3dpdGNoZXIuY29tcG9uZW50Lmh0bWwnLFxuICAgIHN0eWxlVXJsczogWycuL2xpdmUtYXBwcy1yb2xlLXN3aXRjaGVyLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBMaXZlQXBwc1JvbGVTd2l0Y2hlckNvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG5cbiAgLyoqXG4gICAqIFJvbGVzIC0gVGhlIHVzZXJzIGN1cnJlbnQgcm9sZXNcbiAgICovXG4gIEBJbnB1dCgpIHJvbGVzOiBSb2xlQXR0cmlidXRlW107XG5cbiAgLyoqXG4gICAqIFJvbGVBdHRyaWJ1dGUgLSBzZWxlY3RlZCBSb2xlIC0gY2hlY2sgd2l0aCBNQ1xuICAgKi9cbiAgQElucHV0KCkgc2VsZWN0ZWRSb2xlOiBSb2xlQXR0cmlidXRlO1xuXG4gIC8qKlxuICAgKiB+ZXZlbnQgY2hhbmdlUm9sZUV2ZW50IDogUm9sZSBzZWxlY3RlZFxuICAgKiB+cGF5bG9hZCBSb2xlQXR0cmlidXRlIDogUm9sZUF0dHJpYnV0ZSBvYmplY3QgZW1pdHRlZCB3aGVuIHJvbGUgaXMgYyBoYW5nZWQgYnkgc3dpdGNoZXJcbiAgICovXG4gIEBPdXRwdXQoKSBjaGFuZ2VSb2xlRXZlbnQ6IEV2ZW50RW1pdHRlcjxSb2xlQXR0cmlidXRlPiA9IG5ldyBFdmVudEVtaXR0ZXI8Um9sZUF0dHJpYnV0ZT4oKTtcblxuXG4gIGNvbnN0cnVjdG9yKCkgeyB9XG5cbiAgICBuZ09uSW5pdCgpIHtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2VsZWN0Um9sZSA9IChyb2xlOiBSb2xlQXR0cmlidXRlKSA9PiB7XG4gICAgICAgIHRoaXMuY2hhbmdlUm9sZUV2ZW50LmVtaXQocm9sZSk7XG4gICAgfVxuXG4gICAgY29tcGFyZU9iamVjdHMgPSAobzE6IFJvbGVBdHRyaWJ1dGUsIG8yOiBSb2xlQXR0cmlidXRlKTogYm9vbGVhbiA9PiB7XG4gICAgICAgIHJldHVybiBvMS5pZCA9PT0gbzIuaWQ7XG4gICAgfVxufVxuIl19