/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { map, takeUntil, take, tap } from 'rxjs/operators';
import { LiveAppsCaseActionsComponent } from '../live-apps-case-actions/live-apps-case-actions.component';
/**
 * Special (option list) rendering of LiveAppsCaseActionsComponent
 *
 * \@example <tcla-live-apps-case-actions-list></tcla-live-apps-case-actions-list>
 */
var LiveAppsCaseActionsListComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsCaseActionsListComponent, _super);
    function LiveAppsCaseActionsListComponent() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.refresh = (/**
         * @return {?}
         */
        function () {
            // retrieve the schema for this case type so we can display case creators and case actions for this case type
            _this.liveapps.getCaseTypeSchema(_this.sandboxId, _this.appId, 100).pipe(map((/**
             * @param {?} schema
             * @return {?}
             */
            function (schema) {
                // this.appSchema = schema;
                schema.casetypes.forEach((/**
                 * @param {?} casetype
                 * @return {?}
                 */
                function (casetype) {
                    // the schema will contain definitions for both the 'case' and any defined types in that case.
                    // We want the schema for this 'case'.
                    if (casetype.applicationId === _this.appId && casetype.id === _this.typeId) {
                        if (casetype.jsonSchema !== undefined) {
                            // this.caseType = casetype;
                            _this.caseActionList = casetype.actions ? casetype.actions : [];
                            // if (this.caseActionList.length == 1) {
                            //     this.selectProcess(this.caseActionList[0]);
                            // }
                        }
                        else {
                            console.error('No schema returned for this case type: You may need to update/re-deploy the live apps application');
                        }
                    }
                }));
            }))).subscribe();
        });
        _this.compareObjects = (/**
         * @param {?} o1
         * @param {?} o2
         * @return {?}
         */
        function (o1, o2) {
            return o1.id === _this.seletedActionId;
        });
        return _this;
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    LiveAppsCaseActionsListComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.appId && (changes.appId.currentValue !== changes.appId.previousValue)) {
            this.caseActionList = [];
            this.refresh();
        }
    };
    /**
     * @param {?} action
     * @return {?}
     */
    LiveAppsCaseActionsListComponent.prototype.selectAction = /**
     * @param {?} action
     * @return {?}
     */
    function (action) {
        var _this = this;
        this.caseProcessesService.getProcessDetails(this.caseRef, this.appId, this.typeId, this.sandboxId, action, null, 100).pipe(take(1), takeUntil(this._destroyed$), tap((/**
         * @param {?} processDetails
         * @return {?}
         */
        function (processDetails) {
            if (!processDetails || !processDetails.process) {
                // This will be triggered when no form schema is available
                // Typically happens when:
                // 1) The form has elements that are not supported by the Live Apps API for form schemas such as participant selectors
                // 2) The Live Apps application is legacy and has no form schema at all, redeploying the live apps application would fix this.
                console.error('No schema available for this case type: The form may not be supported or you may need to update/re-deploy the live apps application');
            }
        })), map((/**
         * @param {?} processSchema
         * @return {?}
         */
        function (processSchema) {
            _this.actionClicked.emit(processSchema);
            return processSchema;
        })))
            .subscribe(null, (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { _this.errorMessage = 'Error retrieving case actions: ' + error.error.errorMsg; }));
    };
    LiveAppsCaseActionsListComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-case-actions-list',
                    template: "<div fxFlex style=\"margin-left: 10px;\">\n    <mat-select class=\"tcs-action-selector-option\" [disableOptionCentering]=\"true\" [(ngModel)]=\"selectedAction\" [compareWith]=\"compareObjects\"\n        placeholder=\"Case Actions\" >\n        <mat-option *ngFor=\"let action of caseActionList\" [value]=\"action\" (click)=\"selectAction(action)\">\n            <span>{{action.name}}</span>\n        </mat-option>\n    </mat-select>\n</div>",
                    styles: [":host ::ng-deep .tcs-action-selector-option .mat-select-value span{font-family:Source Sans Pro;font-size:16px;font-weight:400;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;color:#0081cb}:host ::ng-deep .tcs-action-selector-option .mat-select-arrow-wrapper div{color:#0081cb}:host ::ng-deep .mat-select-value{min-width:100px;max-width:100%;width:auto}.tcs-actions-box{width:200px;height:44px;box-shadow:inset 0 1px 3px 0 rgba(0,0,0,.5);background-color:#fff}tcs-action-selector-option{width:170px;margin-left:5px;margin-right:5px;background-color:#eee;padding-left:20px;padding-right:20px;height:35px}.tcs-case-creation-dialog-instruction{font-family:Source Sans Pro;font-size:16px;font-weight:600;font-style:normal;font-stretch:normal;line-height:normal;letter-spacing:normal;color:#727272}"]
                }] }
    ];
    LiveAppsCaseActionsListComponent.propDecorators = {
        seletedActionId: [{ type: Input }]
    };
    return LiveAppsCaseActionsListComponent;
}(LiveAppsCaseActionsComponent));
export { LiveAppsCaseActionsListComponent };
if (false) {
    /**
     * The actionId selected (output)
     * @type {?}
     */
    LiveAppsCaseActionsListComponent.prototype.seletedActionId;
    /** @type {?} */
    LiveAppsCaseActionsListComponent.prototype.caseActionList;
    /** @type {?} */
    LiveAppsCaseActionsListComponent.prototype.selectedAction;
    /** @type {?} */
    LiveAppsCaseActionsListComponent.prototype.refresh;
    /** @type {?} */
    LiveAppsCaseActionsListComponent.prototype.compareObjects;
}
//# sourceMappingURL=data:application/json;base64,