/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input } from '@angular/core';
import { DomSanitizer } from '@angular/platform-browser';
import { Document } from '../../models/tc-document';
import { TcDocumentService } from '../../services/tc-document.service';
import { TcCoreCommonFunctions } from '@tibco-tcstk/tc-core-lib';
import { Location } from '@angular/common';
/**
 * Display document
 *
 * \@example <tcla-live-apps-document-viewer></tcla-live-apps-document-viewer>
 */
var LiveAppsDocumentViewerComponent = /** @class */ (function () {
    function LiveAppsDocumentViewerComponent(sanitizer, documentsService, location) {
        this.sanitizer = sanitizer;
        this.documentsService = documentsService;
        this.location = location;
    }
    /**
     * @return {?}
     */
    LiveAppsDocumentViewerComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var preparedUrl = TcCoreCommonFunctions.prepareUrlForNonStaticResource(this.location, this.documentsService.getUrlForDocument(this.folderType, this.folderId, this.document.name, this.document.artifactVersion, this.sandboxId));
        this.sanitizedResourceUrl = this.sanitizer.bypassSecurityTrustResourceUrl(preparedUrl);
    };
    LiveAppsDocumentViewerComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-document-viewer',
                    template: "<div fxFill>\n  <iframe name=\"DocViewerFrame\" class=\"md-dialog-content\" fxFill [src]=\"sanitizedResourceUrl\">\n  </iframe>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    LiveAppsDocumentViewerComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: TcDocumentService },
        { type: Location }
    ]; };
    LiveAppsDocumentViewerComponent.propDecorators = {
        document: [{ type: Input }],
        folderType: [{ type: Input }],
        folderId: [{ type: Input }],
        sandboxId: [{ type: Input }]
    };
    return LiveAppsDocumentViewerComponent;
}());
export { LiveAppsDocumentViewerComponent };
if (false) {
    /**
     * Document metadata object from API - describes the document to display
     * @type {?}
     */
    LiveAppsDocumentViewerComponent.prototype.document;
    /**
     * orgFolders' or 'caseFolders' - different API calls made according to which one this is
     * @type {?}
     */
    LiveAppsDocumentViewerComponent.prototype.folderType;
    /**
     * The organisation folder to store/retrieve documents
     * @type {?}
     */
    LiveAppsDocumentViewerComponent.prototype.folderId;
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsDocumentViewerComponent.prototype.sandboxId;
    /** @type {?} */
    LiveAppsDocumentViewerComponent.prototype.sanitizedResourceUrl;
    /**
     * @type {?}
     * @private
     */
    LiveAppsDocumentViewerComponent.prototype.sanitizer;
    /**
     * @type {?}
     * @private
     */
    LiveAppsDocumentViewerComponent.prototype.documentsService;
    /**
     * @type {?}
     * @private
     */
    LiveAppsDocumentViewerComponent.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWRvY3VtZW50LXZpZXdlci5jb21wb25lbnQuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL2NvbXBvbmVudHMvbGl2ZS1hcHBzLWRvY3VtZW50LXZpZXdlci9saXZlLWFwcHMtZG9jdW1lbnQtdmlld2VyLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxLQUFLLEVBQVMsTUFBTSxlQUFlLENBQUM7QUFDdkQsT0FBTyxFQUFDLFlBQVksRUFBa0IsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RSxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDbEQsT0FBTyxFQUFDLGlCQUFpQixFQUFDLE1BQU0sb0NBQW9DLENBQUM7QUFDckUsT0FBTyxFQUFDLHFCQUFxQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDL0QsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDOzs7Ozs7QUFRekM7SUE0QkUseUNBQW9CLFNBQXVCLEVBQVUsZ0JBQW1DLEVBQVUsUUFBa0I7UUFBaEcsY0FBUyxHQUFULFNBQVMsQ0FBYztRQUFVLHFCQUFnQixHQUFoQixnQkFBZ0IsQ0FBbUI7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQUksQ0FBQzs7OztJQUV6SCxrREFBUTs7O0lBQVI7O1lBQ1EsV0FBVyxHQUFHLHFCQUFxQixDQUFDLDhCQUE4QixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGdCQUFnQixDQUFDLGlCQUFpQixDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDbk8sSUFBSSxDQUFDLG9CQUFvQixHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsOEJBQThCLENBQUMsV0FBVyxDQUFDLENBQUM7SUFDekYsQ0FBQzs7Z0JBakNGLFNBQVMsU0FBQztvQkFDVCxRQUFRLEVBQUUsZ0NBQWdDO29CQUMxQyxxSkFBeUQ7O2lCQUUxRDs7OztnQkFoQk8sWUFBWTtnQkFFWixpQkFBaUI7Z0JBRWpCLFFBQVE7OzsyQkFpQmIsS0FBSzs2QkFLTCxLQUFLOzJCQUtMLEtBQUs7NEJBS0wsS0FBSzs7SUFXUixzQ0FBQztDQUFBLEFBbkNELElBbUNDO1NBOUJZLCtCQUErQjs7Ozs7O0lBSTFDLG1EQUE0Qjs7Ozs7SUFLNUIscURBQTRCOzs7OztJQUs1QixtREFBMEI7Ozs7O0lBSzFCLG9EQUEyQjs7SUFFM0IsK0RBQTZDOzs7OztJQUVqQyxvREFBK0I7Ozs7O0lBQUUsMkRBQTJDOzs7OztJQUFFLG1EQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50LCBJbnB1dCwgT25Jbml0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7RG9tU2FuaXRpemVyLCBTYWZlUmVzb3VyY2VVcmx9IGZyb20gJ0Bhbmd1bGFyL3BsYXRmb3JtLWJyb3dzZXInO1xuaW1wb3J0IHtEb2N1bWVudH0gZnJvbSAnLi4vLi4vbW9kZWxzL3RjLWRvY3VtZW50JztcbmltcG9ydCB7VGNEb2N1bWVudFNlcnZpY2V9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RjLWRvY3VtZW50LnNlcnZpY2UnO1xuaW1wb3J0IHtUY0NvcmVDb21tb25GdW5jdGlvbnN9IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5pbXBvcnQge0xvY2F0aW9ufSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG4vKipcbiAqIERpc3BsYXkgZG9jdW1lbnRcbiAqXG4gKkBleGFtcGxlIDx0Y2xhLWxpdmUtYXBwcy1kb2N1bWVudC12aWV3ZXI+PC90Y2xhLWxpdmUtYXBwcy1kb2N1bWVudC12aWV3ZXI+XG4gKi9cblxuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGNsYS1saXZlLWFwcHMtZG9jdW1lbnQtdmlld2VyJyxcbiAgdGVtcGxhdGVVcmw6ICcuL2xpdmUtYXBwcy1kb2N1bWVudC12aWV3ZXIuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9saXZlLWFwcHMtZG9jdW1lbnQtdmlld2VyLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBMaXZlQXBwc0RvY3VtZW50Vmlld2VyQ29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcbiAgLyoqXG4gICAqIERvY3VtZW50IG1ldGFkYXRhIG9iamVjdCBmcm9tIEFQSSAtIGRlc2NyaWJlcyB0aGUgZG9jdW1lbnQgdG8gZGlzcGxheVxuICAgKi9cbiAgQElucHV0KCkgZG9jdW1lbnQ6IERvY3VtZW50O1xuXG4gIC8qKlxuICAgKiBvcmdGb2xkZXJzJyBvciAnY2FzZUZvbGRlcnMnIC0gZGlmZmVyZW50IEFQSSBjYWxscyBtYWRlIGFjY29yZGluZyB0byB3aGljaCBvbmUgdGhpcyBpc1xuICAgKi9cbiAgQElucHV0KCkgZm9sZGVyVHlwZTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgb3JnYW5pc2F0aW9uIGZvbGRlciB0byBzdG9yZS9yZXRyaWV2ZSBkb2N1bWVudHNcbiAgICovXG4gIEBJbnB1dCgpIGZvbGRlcklkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIHNhbmRib3hJZCAtIHRoaXMgY29tZXMgZnJvbSBjbGFpbXMgcmVzb2x2ZXJcbiAgICovXG4gIEBJbnB1dCgpIHNhbmRib3hJZDogbnVtYmVyO1xuXG4gIHB1YmxpYyBzYW5pdGl6ZWRSZXNvdXJjZVVybDogU2FmZVJlc291cmNlVXJsO1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2FuaXRpemVyOiBEb21TYW5pdGl6ZXIsIHByaXZhdGUgZG9jdW1lbnRzU2VydmljZTogVGNEb2N1bWVudFNlcnZpY2UsIHByaXZhdGUgbG9jYXRpb246IExvY2F0aW9uKSB7IH1cblxuICBuZ09uSW5pdCgpIHtcbiAgICBjb25zdCBwcmVwYXJlZFVybCA9IFRjQ29yZUNvbW1vbkZ1bmN0aW9ucy5wcmVwYXJlVXJsRm9yTm9uU3RhdGljUmVzb3VyY2UodGhpcy5sb2NhdGlvbiwgdGhpcy5kb2N1bWVudHNTZXJ2aWNlLmdldFVybEZvckRvY3VtZW50KHRoaXMuZm9sZGVyVHlwZSwgdGhpcy5mb2xkZXJJZCwgdGhpcy5kb2N1bWVudC5uYW1lLCB0aGlzLmRvY3VtZW50LmFydGlmYWN0VmVyc2lvbiwgdGhpcy5zYW5kYm94SWQpKTtcbiAgICB0aGlzLnNhbml0aXplZFJlc291cmNlVXJsID0gdGhpcy5zYW5pdGl6ZXIuYnlwYXNzU2VjdXJpdHlUcnVzdFJlc291cmNlVXJsKHByZXBhcmVkVXJsKTtcbiAgfVxuXG59XG4iXX0=