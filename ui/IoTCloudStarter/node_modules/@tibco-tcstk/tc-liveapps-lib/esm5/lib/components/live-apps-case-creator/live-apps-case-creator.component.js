/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { ProcessId } from '../../models/liveappsdata';
import { LaProcessSelection } from '../../models/tc-case-processes';
import { LiveAppsService } from '../../services/live-apps.service';
import { map, take, takeUntil } from 'rxjs/operators';
import { CustomFormDefs } from '@tibco-tcstk/tc-forms-lib';
/**
 * Handles rendering of case creator form.
 *
 * \@example <tcla-live-apps-case-creator></tcla-live-apps-case-creator>
 */
var LiveAppsCaseCreatorComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsCaseCreatorComponent, _super);
    function LiveAppsCaseCreatorComponent(liveapps) {
        var _this = _super.call(this) || this;
        _this.liveapps = liveapps;
        /**
         * ~event caseChanged : Case action started (process started)
         * ~payload ProcessId : ProcessId object passed when a case has been updated or created by a process (action/creator)
         */
        _this.caseChanged = new EventEmitter();
        _this.handleSubmit = (/**
         * @param {?} data
         * @param {?} caseRef
         * @return {?}
         */
        function (data, caseRef) {
            // if no_process_submit then no need to run process as this was done inside a custom form app
            if (data !== 'NO_PROCESS_SUBMIT') {
                // run the process
                _this.liveapps.runProcess(_this.sandboxId, _this.applicationId, _this.process.process.id, caseRef, data)
                    .pipe(take(1), takeUntil(_this._destroyed$), map((/**
                 * @param {?} response
                 * @return {?}
                 */
                function (response) {
                    if (response) {
                        if (!response.data.errorMsg) {
                            // parse data to object
                            response.data = JSON.parse(response.data);
                            // case created send back response including caseIdentifier if one is present
                            /** @type {?} */
                            var caseIdentifier = void 0;
                            /** @type {?} */
                            var caseReference = void 0;
                            if (response.caseIdentifier) {
                                caseIdentifier = response.caseIdentifier;
                            }
                            if (response.caseReference) {
                                caseReference = response.caseReference;
                            }
                            /** @type {?} */
                            var processResponse = new ProcessId().deserialize({ 'caseIdentifier': caseIdentifier, 'caseReference': caseReference });
                            _this.caseChanged.emit(processResponse);
                            _this.schema = undefined;
                            _this.data = undefined;
                            _this.layout = undefined;
                        }
                        else {
                            console.error('Unable to run case creator');
                            console.error(response.data.errorMsg);
                        }
                    }
                })))
                    .subscribe((/**
                 * @param {?} success
                 * @return {?}
                 */
                function (success) { return success; }), (/**
                 * @param {?} error
                 * @return {?}
                 */
                function (error) {
                    console.error('Unable to run case creator');
                    console.error(error);
                }));
            }
            else {
                /** @type {?} */
                var processResponse = new ProcessId().deserialize({ 'caseIdentifier': undefined, 'caseReference': undefined });
                _this.caseChanged.emit(processResponse);
                _this.schema = undefined;
                _this.data = undefined;
                _this.layout = undefined;
            }
        });
        return _this;
    }
    /**
     * @return {?}
     */
    LiveAppsCaseCreatorComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.options = {
            defaultOptions: {
                'appearance': 'legacy'
            }
        };
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    LiveAppsCaseCreatorComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        // handle input param changes
        if (changes.process && changes.process.currentValue && (changes.process.currentValue !== changes.process.previousValue)) {
            if (changes.process.currentValue.process.jsonSchema.$schema === 'NOSCHEMA') {
                this.schema = undefined;
            }
            else {
                this.schema = changes.process.currentValue.process.jsonSchema;
            }
        }
        else if (changes.applicationId && (changes.applicationId.currentValue !== changes.applicationId.previousValue)) {
            // appId has changed: make sure no process selected/form displayed
            this.process = undefined;
        }
        if (changes.layout && (changes.layout.currentValue !== changes.layout.previousValue)) {
            this.layout = changes.layout.currentValue;
        }
        if (changes.dataOverride && (changes.dataOverride.currentValue !== changes.dataOverride.previousValue)) {
            this.data = this.dataOverride;
        }
    };
    LiveAppsCaseCreatorComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-case-creator',
                    template: "<div fxFill>\n<tcfrm-rendered-form *ngIf=\"process\" style=\"min-height:500px; overflow: auto;\" [customFormDefs]=customFormDefs [formRef]=\"process.ref\" [appId]=\"applicationId\" [customFormDefs]=\"customFormDefs\" [schema]=\"schema\" [layout]=\"layout\" [data]=\"data\" [options]=\"options\" (formSubmit)=\"handleSubmit($event, undefined)\"></tcfrm-rendered-form>\n</div>\n",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    LiveAppsCaseCreatorComponent.ctorParameters = function () { return [
        { type: LiveAppsService }
    ]; };
    LiveAppsCaseCreatorComponent.propDecorators = {
        sandboxId: [{ type: Input }],
        applicationId: [{ type: Input }],
        typeId: [{ type: Input }],
        process: [{ type: Input }],
        dataOverride: [{ type: Input }],
        customFormDefs: [{ type: Input }],
        caseChanged: [{ type: Output }]
    };
    return LiveAppsCaseCreatorComponent;
}(LiveAppsComponent));
export { LiveAppsCaseCreatorComponent };
if (false) {
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.sandboxId;
    /**
     * LA application ID
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.applicationId;
    /**
     * The LA Application Type Id (generally 1)
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.typeId;
    /**
     * The process definition of the action or creator to execute
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.process;
    /**
     * Data object that will be displayed on the form. Allows overriding over form data (eg. when selecting data in spotfire)
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.dataOverride;
    /**
     * Custom Form configuration file
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.customFormDefs;
    /**
     * ~event caseChanged : Case action started (process started)
     * ~payload ProcessId : ProcessId object passed when a case has been updated or created by a process (action/creator)
     * @type {?}
     */
    LiveAppsCaseCreatorComponent.prototype.caseChanged;
    /** @type {?} */
    LiveAppsCaseCreatorComponent.prototype.data;
    /** @type {?} */
    LiveAppsCaseCreatorComponent.prototype.schema;
    /** @type {?} */
    LiveAppsCaseCreatorComponent.prototype.layout;
    /** @type {?} */
    LiveAppsCaseCreatorComponent.prototype.options;
    /** @type {?} */
    LiveAppsCaseCreatorComponent.prototype.handleSubmit;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsCaseCreatorComponent.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,