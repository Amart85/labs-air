/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component } from '@angular/core';
import { Location } from '@angular/common';
import { TcCoreCommonFunctions, LandingPageItemConfig, TcGeneralLandingPageService } from '@tibco-tcstk/tc-core-lib';
import { Router, ActivatedRoute } from '@angular/router';
import { map } from 'rxjs/operators';
import { TcRolesService } from '../../services/tc-roles-service.ts.service';
/**
 * Landing page
 *
 * This component allows a configurable landing page on a per role basis
 *
 * \@example <tcla-live-apps-landing-page></tcla-live-apps-landing-page>
 */
var LiveAppsLandingPageComponent = /** @class */ (function () {
    function LiveAppsLandingPageComponent(location, route, router, landingPageService, rolesService) {
        var _this = this;
        this.location = location;
        this.route = route;
        this.router = router;
        this.landingPageService = landingPageService;
        this.rolesService = rolesService;
        this.moveHome = (/**
         * @return {?}
         */
        function () {
            _this.router.navigate([_this.navigateURL]);
        });
    }
    /**
     * @return {?}
     */
    LiveAppsLandingPageComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var uiAppId = this.route.snapshot.data.generalConfigHolder.uiAppId;
        /** @type {?} */
        var roleId = this.route.snapshot.data.activeRoleHolder.id;
        this.landingPageService.getLandingPageForRole(roleId, uiAppId).pipe(map((/**
         * @param {?} landingPage
         * @return {?}
         */
        function (landingPage) {
            if (landingPage != undefined) {
                _this.title = landingPage.title;
                _this.subtitle = landingPage.subtitle;
                _this.backgroundImage = (landingPage.backgroundURL != '' ? TcCoreCommonFunctions.prepareUrlForStaticResource(_this.location, landingPage.backgroundURL) : '');
                _this.highlights = new Array();
                _this.highlights.push(new LandingPageItemConfig().deserialize({
                    title: landingPage.highlights[0].title,
                    content: landingPage.highlights[0].content,
                    iconURL: landingPage.highlights[0].iconURL
                }));
                _this.highlights.push(new LandingPageItemConfig().deserialize({
                    title: landingPage.highlights[1].title,
                    content: landingPage.highlights[1].content,
                    iconURL: landingPage.highlights[1].iconURL
                }));
                _this.highlights.push(new LandingPageItemConfig().deserialize({
                    title: landingPage.highlights[2].title,
                    content: landingPage.highlights[2].content,
                    iconURL: landingPage.highlights[2].iconURL
                }));
                _this.navigateURL = landingPage.homeRoute;
            }
            else {
                _this.router.navigate(['errorHandler/NO_ROLE/NO_ROLE']);
            }
        }))).subscribe();
    };
    LiveAppsLandingPageComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-landing-page',
                    template: "<tc-tibco-cloud-splash-screen fxFill\n    [title]=\"title\" \n    [subTitle]=\"subtitle\" \n    [backGroundImage]=\"backgroundImage\"\n    [highlights]=\"highlights\"\n    (getStartedEvent)=\"moveHome()\">\n</tc-tibco-cloud-splash-screen>",
                    styles: [""]
                }] }
    ];
    /** @nocollapse */
    LiveAppsLandingPageComponent.ctorParameters = function () { return [
        { type: Location },
        { type: ActivatedRoute },
        { type: Router },
        { type: TcGeneralLandingPageService },
        { type: TcRolesService }
    ]; };
    return LiveAppsLandingPageComponent;
}());
export { LiveAppsLandingPageComponent };
if (false) {
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.title;
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.subtitle;
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.backgroundImage;
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.highlights;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLandingPageComponent.prototype.navigateURL;
    /** @type {?} */
    LiveAppsLandingPageComponent.prototype.moveHome;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLandingPageComponent.prototype.location;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLandingPageComponent.prototype.route;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLandingPageComponent.prototype.router;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLandingPageComponent.prototype.landingPageService;
    /**
     * @type {?}
     * @private
     */
    LiveAppsLandingPageComponent.prototype.rolesService;
}
//# sourceMappingURL=data:application/json;base64,