/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input } from '@angular/core';
import { map, take, takeUntil } from 'rxjs/operators';
import { LiveAppsComponent } from '../live-apps-component/live-apps-component.component';
import { TcCaseStatesService } from '../../services/tc-case-states.service';
import { DurationSincePipe } from '@tibco-tcstk/tc-core-lib';
/**
 * Case States/Milestone view
 *
 * ![alt-text](../live-apps-case-states.png "Image")
 *
 * \@example <tcla-live-apps-case-states></tcla-live-apps-case-states>
 */
var LiveAppsCaseStatesComponent = /** @class */ (function (_super) {
    tslib_1.__extends(LiveAppsCaseStatesComponent, _super);
    function LiveAppsCaseStatesComponent(caseStatesService, durationSince) {
        var _this = _super.call(this) || this;
        _this.caseStatesService = caseStatesService;
        _this.durationSince = durationSince;
        _this.getToolTipText = (/**
         * @param {?} trackerState
         * @return {?}
         */
        function (trackerState) {
            /** @type {?} */
            var toolTipText = '';
            if (trackerState.status != 'pending') {
                toolTipText = toolTipText + trackerState.user + ' ' + _this.durationSince.transform(trackerState.changed);
            }
            return toolTipText;
        });
        _this.refresh = (/**
         * @return {?}
         */
        function () {
            _this.caseStatesService.getTracker(_this.caseRef, _this.sandboxId, _this.appId).pipe(take(1), takeUntil(_this._destroyed$), map((/**
             * @param {?} tracker
             * @return {?}
             */
            function (tracker) {
                _this.tracker = tracker;
                if (!tracker.valid) {
                    console.error('Unable to create milestone trailer. Case Audit likely removed due to subscription retention period.');
                }
                return tracker;
            }))).subscribe(null, (/**
             * @param {?} error
             * @return {?}
             */
            function (error) { _this.errorMessage = 'Error constructing state tracker: ' + error.error.errorMsg; }));
        });
        return _this;
    }
    /**
     * @return {?}
     */
    LiveAppsCaseStatesComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        this.refresh();
    };
    LiveAppsCaseStatesComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-case-states',
                    template: "<div fxFlex class=\"starters-case-states-container\" fxLayout=\"row\" fxLayoutAlign=\"start center\">\n  <div *ngIf=\"tracker && tracker.valid\">\n    <span class=\"tc-milestone-title\" fxLayoutAlign=\"start center\">Milestones</span>\n    <div fxFlex class=\"starters-milestone-trailer\" fxLayout=\"row wrap\">\n      <div class=\"starters-ms-wrapper\" *ngFor=\"let trackerState of tracker.states; first as isFirst; last as isLast\" ngclass=\"{'starters-milestone-first-section': isFirst, 'starters-milestone-mid-section': (!isFirst && !isLast), 'starters-milestone-end-section': isLast}\">\n        <tcla-live-apps-milestone [isFirst]=\"isFirst\" [isLast]=\"isLast\" [isTerminal]=\"trackerState.isTerminal\" [label]=\"trackerState.label\" [phase]=\"trackerState.phase\" [previousPhase]=\"trackerState.previousPhase\" [status]=\"trackerState.status\" [matTooltip]=\"getToolTipText(trackerState)\" matTooltipShowDelay=\"1000\" matTooltipPosition=\"below\"></tcla-live-apps-milestone>\n      </div>\n    </div>\n  </div>\n  <div *ngIf=\"tracker && !tracker.valid\">\n    <span class=\"tc-milestone-title\">Milestone data not available</span>\n  </div>\n</div>\n\n\n",
                    styles: [".tc-milestone-title{min-width:150px;font-family:Source Sans Pro;font-size:18px;font-weight:600;font-style:normal;font-stretch:normal;line-height:1.5;letter-spacing:.3px;color:#000}:host ::ng-deep tcla-live-apps-milestone .tc-ms-pending-bg{fill:#dedede}:host ::ng-deep tcla-live-apps-milestone .tc-ms-inprogress-bg{fill:#0081cb}:host ::ng-deep tcla-live-apps-milestone .tc-ms-completed-bg{fill:#062e79}:host ::ng-deep tcla-live-apps-milestone .tc-ms-completed-terminal-bg{fill:#04be5b}:host ::ng-deep tcla-live-apps-milestone .tc-ms-label{color:#000}"]
                }] }
    ];
    /** @nocollapse */
    LiveAppsCaseStatesComponent.ctorParameters = function () { return [
        { type: TcCaseStatesService },
        { type: DurationSincePipe }
    ]; };
    LiveAppsCaseStatesComponent.propDecorators = {
        appId: [{ type: Input }],
        sandboxId: [{ type: Input }],
        caseRef: [{ type: Input }]
    };
    return LiveAppsCaseStatesComponent;
}(LiveAppsComponent));
export { LiveAppsCaseStatesComponent };
if (false) {
    /**
     * The LA Application Id
     * @type {?}
     */
    LiveAppsCaseStatesComponent.prototype.appId;
    /**
     * sandboxId - this comes from claims resolver
     * @type {?}
     */
    LiveAppsCaseStatesComponent.prototype.sandboxId;
    /**
     * The case reference
     * @type {?}
     */
    LiveAppsCaseStatesComponent.prototype.caseRef;
    /** @type {?} */
    LiveAppsCaseStatesComponent.prototype.states;
    /** @type {?} */
    LiveAppsCaseStatesComponent.prototype.tracker;
    /** @type {?} */
    LiveAppsCaseStatesComponent.prototype.errorMessage;
    /** @type {?} */
    LiveAppsCaseStatesComponent.prototype.getToolTipText;
    /** @type {?} */
    LiveAppsCaseStatesComponent.prototype.refresh;
    /**
     * @type {?}
     * @private
     */
    LiveAppsCaseStatesComponent.prototype.caseStatesService;
    /**
     * @type {?}
     * @private
     */
    LiveAppsCaseStatesComponent.prototype.durationSince;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWNhc2Utc3RhdGVzLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1saXZlYXBwcy1saWIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9saXZlLWFwcHMtY2FzZS1zdGF0ZXMvbGl2ZS1hcHBzLWNhc2Utc3RhdGVzLmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBQyxTQUFTLEVBQUUsS0FBSyxFQUFvQixNQUFNLGVBQWUsQ0FBQztBQUlsRSxPQUFPLEVBQUMsR0FBRyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNwRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxzREFBc0QsQ0FBQztBQUV2RixPQUFPLEVBQUMsbUJBQW1CLEVBQUMsTUFBTSx1Q0FBdUMsQ0FBQztBQUMxRSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQzs7Ozs7Ozs7QUFVM0Q7SUFLaUQsdURBQWlCO0lBNkNoRSxxQ0FBb0IsaUJBQXNDLEVBQVUsYUFBZ0M7UUFBcEcsWUFDRSxpQkFBTyxTQUNSO1FBRm1CLHVCQUFpQixHQUFqQixpQkFBaUIsQ0FBcUI7UUFBVSxtQkFBYSxHQUFiLGFBQWEsQ0FBbUI7UUF4QjdGLG9CQUFjOzs7O1FBQUcsVUFBQyxZQUEwQjs7Z0JBQzdDLFdBQVcsR0FBRyxFQUFFO1lBQ3BCLElBQUksWUFBWSxDQUFDLE1BQU0sSUFBSSxTQUFTLEVBQUU7Z0JBQ3BDLFdBQVcsR0FBRyxXQUFXLEdBQUcsWUFBWSxDQUFDLElBQUksR0FBRyxHQUFHLEdBQUcsS0FBSSxDQUFDLGFBQWEsQ0FBQyxTQUFTLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2FBQzFHO1lBQ0QsT0FBTyxXQUFXLENBQUM7UUFDckIsQ0FBQyxFQUFBO1FBRU0sYUFBTzs7O1FBQUc7WUFDZixLQUFJLENBQUMsaUJBQWlCLENBQUMsVUFBVSxDQUFDLEtBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSSxDQUFDLFNBQVMsRUFBRSxLQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxDQUM5RSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ1AsU0FBUyxDQUFDLEtBQUksQ0FBQyxXQUFXLENBQUMsRUFDM0IsR0FBRzs7OztZQUFDLFVBQUEsT0FBTztnQkFDVCxLQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztnQkFDdkIsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUU7b0JBQ2xCLE9BQU8sQ0FBQyxLQUFLLENBQUMscUdBQXFHLENBQUMsQ0FBQztpQkFDdEg7Z0JBQ0QsT0FBTyxPQUFPLENBQUM7WUFDakIsQ0FBQyxFQUNFLENBQ0osQ0FBQyxTQUFTLENBQ1QsSUFBSTs7OztZQUFFLFVBQUEsS0FBSyxJQUFNLEtBQUksQ0FBQyxZQUFZLEdBQUcsb0NBQW9DLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQUMsQ0FBQztRQUN6RyxDQUFDLEVBQUE7O0lBSUQsQ0FBQzs7OztJQUVELDhDQUFROzs7SUFBUjtRQUNFLElBQUksQ0FBQyxPQUFPLEVBQUUsQ0FBQztJQUNqQixDQUFDOztnQkF4REYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSw0QkFBNEI7b0JBQ3RDLHdwQ0FBcUQ7O2lCQUV0RDs7OztnQkFmTyxtQkFBbUI7Z0JBQ25CLGlCQUFpQjs7O3dCQW1CdEIsS0FBSzs0QkFLTCxLQUFLOzBCQUtMLEtBQUs7O0lBdUNSLGtDQUFDO0NBQUEsQUExREQsQ0FLaUQsaUJBQWlCLEdBcURqRTtTQXJEWSwyQkFBMkI7Ozs7OztJQUl0Qyw0Q0FBdUI7Ozs7O0lBS3ZCLGdEQUEyQjs7Ozs7SUFLM0IsOENBQXlCOztJQUd6Qiw2Q0FBK0I7O0lBQy9CLDhDQUE2Qjs7SUFDN0IsbURBQTRCOztJQUU1QixxREFNQzs7SUFFRCw4Q0FjQzs7Ozs7SUFFVyx3REFBOEM7Ozs7O0lBQUUsb0RBQXdDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtDb21wb25lbnQsIElucHV0LCBPbkRlc3Ryb3ksIE9uSW5pdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0Nhc2VUeXBlU3RhdGUsIENhc2VUeXBlU3RhdGVzTGlzdCwgTWV0YWRhdGF9IGZyb20gJy4uLy4uL21vZGVscy9saXZlYXBwc2RhdGEnO1xuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcbmltcG9ydCB7TGl2ZUFwcHNTZXJ2aWNlfSBmcm9tICcuLi8uLi9zZXJ2aWNlcy9saXZlLWFwcHMuc2VydmljZSc7XG5pbXBvcnQge21hcCwgdGFrZSwgdGFrZVVudGlsfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0xpdmVBcHBzQ29tcG9uZW50fSBmcm9tICcuLi9saXZlLWFwcHMtY29tcG9uZW50L2xpdmUtYXBwcy1jb21wb25lbnQuY29tcG9uZW50JztcbmltcG9ydCB7U3RhdGVUcmFja2VyLCBUcmFja2VyU3RhdGV9IGZyb20gJy4uLy4uL21vZGVscy90Yy1jYXNlLXN0YXRlcyc7XG5pbXBvcnQge1RjQ2FzZVN0YXRlc1NlcnZpY2V9IGZyb20gJy4uLy4uL3NlcnZpY2VzL3RjLWNhc2Utc3RhdGVzLnNlcnZpY2UnO1xuaW1wb3J0IHtEdXJhdGlvblNpbmNlUGlwZX0gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliJztcblxuXG4vKipcbiAqIENhc2UgU3RhdGVzL01pbGVzdG9uZSB2aWV3XG4gKlxuICogIVthbHQtdGV4dF0oLi4vbGl2ZS1hcHBzLWNhc2Utc3RhdGVzLnBuZyBcIkltYWdlXCIpXG4gKlxuICpAZXhhbXBsZSA8dGNsYS1saXZlLWFwcHMtY2FzZS1zdGF0ZXM+PC90Y2xhLWxpdmUtYXBwcy1jYXNlLXN0YXRlcz5cbiAqL1xuQENvbXBvbmVudCh7XG4gIHNlbGVjdG9yOiAndGNsYS1saXZlLWFwcHMtY2FzZS1zdGF0ZXMnLFxuICB0ZW1wbGF0ZVVybDogJy4vbGl2ZS1hcHBzLWNhc2Utc3RhdGVzLmNvbXBvbmVudC5odG1sJyxcbiAgc3R5bGVVcmxzOiBbJy4vbGl2ZS1hcHBzLWNhc2Utc3RhdGVzLmNvbXBvbmVudC5jc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBMaXZlQXBwc0Nhc2VTdGF0ZXNDb21wb25lbnQgZXh0ZW5kcyBMaXZlQXBwc0NvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gIC8qKlxuICAgKiBUaGUgTEEgQXBwbGljYXRpb24gSWRcbiAgICovXG4gIEBJbnB1dCgpIGFwcElkOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIHNhbmRib3hJZCAtIHRoaXMgY29tZXMgZnJvbSBjbGFpbXMgcmVzb2x2ZXJcbiAgICovXG4gIEBJbnB1dCgpIHNhbmRib3hJZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgY2FzZSByZWZlcmVuY2VcbiAgICovXG4gIEBJbnB1dCgpIGNhc2VSZWY6IHN0cmluZztcblxuXG4gIHB1YmxpYyBzdGF0ZXM6IENhc2VUeXBlU3RhdGVbXTtcbiAgcHVibGljIHRyYWNrZXI6IFN0YXRlVHJhY2tlcjtcbiAgcHVibGljIGVycm9yTWVzc2FnZTogc3RyaW5nO1xuXG4gIHB1YmxpYyBnZXRUb29sVGlwVGV4dCA9ICh0cmFja2VyU3RhdGU6IFRyYWNrZXJTdGF0ZSk6IHN0cmluZyA9PiB7XG4gICAgbGV0IHRvb2xUaXBUZXh0ID0gJyc7XG4gICAgaWYgKHRyYWNrZXJTdGF0ZS5zdGF0dXMgIT0gJ3BlbmRpbmcnKSB7XG4gICAgICB0b29sVGlwVGV4dCA9IHRvb2xUaXBUZXh0ICsgdHJhY2tlclN0YXRlLnVzZXIgKyAnICcgKyB0aGlzLmR1cmF0aW9uU2luY2UudHJhbnNmb3JtKHRyYWNrZXJTdGF0ZS5jaGFuZ2VkKTtcbiAgICB9XG4gICAgcmV0dXJuIHRvb2xUaXBUZXh0O1xuICB9XG5cbiAgcHVibGljIHJlZnJlc2ggPSAoKSA9PiB7XG4gICAgdGhpcy5jYXNlU3RhdGVzU2VydmljZS5nZXRUcmFja2VyKHRoaXMuY2FzZVJlZiwgdGhpcy5zYW5kYm94SWQsIHRoaXMuYXBwSWQpLnBpcGUoXG4gICAgICB0YWtlKDEpLFxuICAgICAgdGFrZVVudGlsKHRoaXMuX2Rlc3Ryb3llZCQpLFxuICAgICAgbWFwKHRyYWNrZXIgPT4ge1xuICAgICAgICB0aGlzLnRyYWNrZXIgPSB0cmFja2VyO1xuICAgICAgICBpZiAoIXRyYWNrZXIudmFsaWQpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gY3JlYXRlIG1pbGVzdG9uZSB0cmFpbGVyLiBDYXNlIEF1ZGl0IGxpa2VseSByZW1vdmVkIGR1ZSB0byBzdWJzY3JpcHRpb24gcmV0ZW50aW9uIHBlcmlvZC4nKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJhY2tlcjtcbiAgICAgIH1cbiAgICAgICAgKVxuICAgICkuc3Vic2NyaWJlKFxuICAgICAgbnVsbCwgZXJyb3IgPT4geyB0aGlzLmVycm9yTWVzc2FnZSA9ICdFcnJvciBjb25zdHJ1Y3Rpbmcgc3RhdGUgdHJhY2tlcjogJyArIGVycm9yLmVycm9yLmVycm9yTXNnOyB9KTtcbiAgfVxuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgY2FzZVN0YXRlc1NlcnZpY2U6IFRjQ2FzZVN0YXRlc1NlcnZpY2UsIHByaXZhdGUgZHVyYXRpb25TaW5jZTogRHVyYXRpb25TaW5jZVBpcGUpIHtcbiAgICBzdXBlcigpO1xuICB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5yZWZyZXNoKCk7XG4gIH1cblxufVxuIl19