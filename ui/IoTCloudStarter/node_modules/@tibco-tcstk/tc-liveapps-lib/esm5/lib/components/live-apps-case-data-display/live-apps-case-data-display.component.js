/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, EventEmitter, Input, Output } from '@angular/core';
import { JsonSchema } from '../../models/liveappsdata';
import { CustomFormDefs } from '@tibco-tcstk/tc-forms-lib';
import { TcCaseProcessesService } from '../../services/tc-case-processes.service';
/**
 * Renders case data in a form
 *
 * ![alt-text](../live-apps-case-data-display.png "Image")
 *
 * \@example <tcla-live-apps-case-data-display></tcla-live-apps-case-data-display>
 */
var LiveAppsCaseDataDisplayComponent = /** @class */ (function () {
    function LiveAppsCaseDataDisplayComponent(caseProcessService) {
        this.caseProcessService = caseProcessService;
        this.DEFAULT_CASE_DATA_LAYOUT = [
            '*',
            { type: 'submit', title: 'Save', condition: '1===2' },
            { type: 'actions', title: 'hello', condition: '1===2' }
        ];
        /**
         * Allow override of forms framework
         * Options: bootstrap-4 or material-design
         */
        this.formsFramework = this.formsFramework ? this.formsFramework : 'material-design';
        /**
         * Layout object that can be passed to override default layout of the form renderer
         */
        this.layout = this.layout ? this.layout : this.DEFAULT_CASE_DATA_LAYOUT;
        /**
         * Emit event to cause refresh of page
         * *
         */
        this.refreshEvent = new EventEmitter();
    }
    /**
     * @param {?} data
     * @return {?}
     */
    LiveAppsCaseDataDisplayComponent.prototype.updateDataAction = /**
     * @param {?} data
     * @return {?}
     */
    function (data) {
        var _this = this;
        var _a;
        data = (_a = {},
            _a[this.name] = data,
            _a);
        this.caseProcessService.caseDataFormUpdate(this.caseRef, this.appId, this.typeId, this.sandboxId, '$Update', data).subscribe((/**
         * @param {?} next
         * @return {?}
         */
        function (next) {
            _this.refreshEvent.emit();
        }), (/**
         * @param {?} error1
         * @return {?}
         */
        function (error1) {
            console.error('Unable to trigger update of case data');
        }));
    };
    /**
     * @return {?}
     */
    LiveAppsCaseDataDisplayComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        // since this is the 'display' of case data we set to readonly and no validation
        // legacy makes the labels appear above the data
        this.options = {
            defaultOptions: {
                'readonly': true,
                'appearance': 'legacy'
            },
            'validateOnRender': false
        };
        console.log(this.schema);
    };
    LiveAppsCaseDataDisplayComponent.decorators = [
        { type: Component, args: [{
                    selector: 'tcla-live-apps-case-data-display',
                    template: "<tcfrm-rendered-form *ngIf=\"schema && caseData && options\" [schema]=\"schema\" [layout]=\"layout\" [data]=\"caseData\" [caseRef]=\"caseRef\" [appId]=\"appId\" [options]=\"options\" [customFormDefs]=\"customFormDefs\" [formsFramework]=\"formsFramework\" [formRef]=\"formRef\" (formSubmit)=\"updateDataAction($event)\"></tcfrm-rendered-form>\n",
                    styles: [":host ::ng-deep button{visibility:hidden}"]
                }] }
    ];
    /** @nocollapse */
    LiveAppsCaseDataDisplayComponent.ctorParameters = function () { return [
        { type: TcCaseProcessesService }
    ]; };
    LiveAppsCaseDataDisplayComponent.propDecorators = {
        sandboxId: [{ type: Input }],
        caseData: [{ type: Input }],
        appId: [{ type: Input }],
        typeId: [{ type: Input }],
        caseRef: [{ type: Input }],
        name: [{ type: Input }],
        schema: [{ type: Input }],
        formsFramework: [{ type: Input }],
        layout: [{ type: Input }],
        customFormDefs: [{ type: Input }],
        formRef: [{ type: Input }],
        refreshEvent: [{ type: Output }]
    };
    return LiveAppsCaseDataDisplayComponent;
}());
export { LiveAppsCaseDataDisplayComponent };
if (false) {
    /** @type {?} */
    LiveAppsCaseDataDisplayComponent.prototype.DEFAULT_CASE_DATA_LAYOUT;
    /**
     * SandboxId
     * @type {?}
     */
    LiveAppsCaseDataDisplayComponent.prototype.sandboxId;
    /**
     * The case data
     * @type {?}
     */
    LiveAppsCaseDataDisplayComponent.prototype.caseData;
    /**
     * The case reference
     * @type {?}
     */
    LiveAppsCaseDataDisplayComponent.prototype.appId;
    /**
     * The applicationId
     * @type {?}
     */
    LiveAppsCaseDataDisplayComponent.prototype.typeId;
    /**
     * The typeId
     * @type {?}
     */
    LiveAppsCaseDataDisplayComponent.prototype.caseRef;
    /**
     * The 'name' of the main case type
     * @type {?}
     */
    LiveAppsCaseDataDisplayComponent.prototype.name;
    /**
     * The schema of the case type
     * @type {?}
     */
    LiveAppsCaseDataDisplayComponent.prototype.schema;
    /**
     * Allow override of forms framework
     * Options: bootstrap-4 or material-design
     * @type {?}
     */
    LiveAppsCaseDataDisplayComponent.prototype.formsFramework;
    /**
     * Layout object that can be passed to override default layout of the form renderer
     * @type {?}
     */
    LiveAppsCaseDataDisplayComponent.prototype.layout;
    /**
     * Custom Form configuration file
     * @type {?}
     */
    LiveAppsCaseDataDisplayComponent.prototype.customFormDefs;
    /**
     * Custom Form Reference
     * @type {?}
     */
    LiveAppsCaseDataDisplayComponent.prototype.formRef;
    /**
     * Emit event to cause refresh of page
     * *
     * @type {?}
     */
    LiveAppsCaseDataDisplayComponent.prototype.refreshEvent;
    /** @type {?} */
    LiveAppsCaseDataDisplayComponent.prototype.options;
    /**
     * @type {?}
     * @protected
     */
    LiveAppsCaseDataDisplayComponent.prototype.caseProcessService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGl2ZS1hcHBzLWNhc2UtZGF0YS1kaXNwbGF5LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1saXZlYXBwcy1saWIvIiwic291cmNlcyI6WyJsaWIvY29tcG9uZW50cy9saXZlLWFwcHMtY2FzZS1kYXRhLWRpc3BsYXkvbGl2ZS1hcHBzLWNhc2UtZGF0YS1kaXNwbGF5LmNvbXBvbmVudC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUM3RSxPQUFPLEVBQTBCLFVBQVUsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBQzlFLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSwyQkFBMkIsQ0FBQztBQUN6RCxPQUFPLEVBQUMsc0JBQXNCLEVBQUMsTUFBTSwwQ0FBMEMsQ0FBQzs7Ozs7Ozs7QUFVaEY7SUErRUUsMENBQXNCLGtCQUEwQztRQUExQyx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXdCO1FBeEVoRSw2QkFBd0IsR0FBRztZQUN6QixHQUFHO1lBQ0gsRUFBRSxJQUFJLEVBQUUsUUFBUSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRTtZQUNyRCxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFO1NBRXhELENBQUM7Ozs7O1FBMkNPLG1CQUFjLEdBQVcsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUM7Ozs7UUFLdkYsV0FBTSxHQUFVLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyx3QkFBd0IsQ0FBQzs7Ozs7UUFlekUsaUJBQVksR0FBRyxJQUFJLFlBQVksRUFBRSxDQUFDO0lBSXdCLENBQUM7Ozs7O0lBRTlELDJEQUFnQjs7OztJQUF2QixVQUF3QixJQUFTO1FBQWpDLGlCQWFDOztRQVpDLElBQUk7WUFDRixHQUFDLElBQUksQ0FBQyxJQUFJLElBQUcsSUFBSTtlQUNsQixDQUFBO1FBRUQsSUFBSSxDQUFDLGtCQUFrQixDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxTQUFTLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDLFNBQVM7Ozs7UUFDMUgsVUFBQSxJQUFJO1lBQ0YsS0FBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUMzQixDQUFDOzs7O1FBQ0QsVUFBQSxNQUFNO1lBQ0osT0FBTyxDQUFDLEtBQUssQ0FBQyx1Q0FBdUMsQ0FBQyxDQUFDO1FBQ3pELENBQUMsRUFDRixDQUFDO0lBQ0osQ0FBQzs7OztJQUVELG1EQUFROzs7SUFBUjtRQUNFLGdGQUFnRjtRQUNoRixnREFBZ0Q7UUFDaEQsSUFBSSxDQUFDLE9BQU8sR0FBRztZQUNiLGNBQWMsRUFBRTtnQkFDZCxVQUFVLEVBQUUsSUFBSTtnQkFDaEIsWUFBWSxFQUFFLFFBQVE7YUFDdkI7WUFDRCxrQkFBa0IsRUFBRSxLQUFLO1NBQzFCLENBQUM7UUFDRixPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUMzQixDQUFDOztnQkEzR0YsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxrQ0FBa0M7b0JBQzVDLG1XQUEyRDs7aUJBRTVEOzs7O2dCQWRPLHNCQUFzQjs7OzRCQTJCM0IsS0FBSzsyQkFLTCxLQUFLO3dCQU1MLEtBQUs7eUJBS0wsS0FBSzswQkFLTCxLQUFLO3VCQU1MLEtBQUs7eUJBS0wsS0FBSztpQ0FNTCxLQUFLO3lCQUtMLEtBQUs7aUNBS0wsS0FBSzswQkFLTCxLQUFLOytCQUtMLE1BQU07O0lBa0NULHVDQUFDO0NBQUEsQUE3R0QsSUE2R0M7U0F4R1ksZ0NBQWdDOzs7SUFFM0Msb0VBS0U7Ozs7O0lBS0YscURBQTJCOzs7OztJQUszQixvREFBMEI7Ozs7O0lBTTFCLGlEQUFzQjs7Ozs7SUFLdEIsa0RBQXVCOzs7OztJQUt2QixtREFBeUI7Ozs7O0lBTXpCLGdEQUFzQjs7Ozs7SUFLdEIsa0RBQTRCOzs7Ozs7SUFNNUIsMERBQWdHOzs7OztJQUtoRyxrREFBbUY7Ozs7O0lBS25GLDBEQUF3Qzs7Ozs7SUFLeEMsbURBQXlCOzs7Ozs7SUFLekIsd0RBQTRDOztJQUU1QyxtREFBUTs7Ozs7SUFFSSw4REFBb0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge0NvbXBvbmVudCwgRXZlbnRFbWl0dGVyLCBJbnB1dCwgT25Jbml0LCBPdXRwdXR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDYXNlVHlwZSwgQ2FzZVR5cGVzTGlzdCwgSnNvblNjaGVtYX0gZnJvbSAnLi4vLi4vbW9kZWxzL2xpdmVhcHBzZGF0YSc7XG5pbXBvcnQge0N1c3RvbUZvcm1EZWZzfSBmcm9tICdAdGliY28tdGNzdGsvdGMtZm9ybXMtbGliJztcbmltcG9ydCB7VGNDYXNlUHJvY2Vzc2VzU2VydmljZX0gZnJvbSAnLi4vLi4vc2VydmljZXMvdGMtY2FzZS1wcm9jZXNzZXMuc2VydmljZSc7XG5cbi8qKlxuICogUmVuZGVycyBjYXNlIGRhdGEgaW4gYSBmb3JtXG4gKlxuICogIVthbHQtdGV4dF0oLi4vbGl2ZS1hcHBzLWNhc2UtZGF0YS1kaXNwbGF5LnBuZyBcIkltYWdlXCIpXG4gKlxuICpAZXhhbXBsZSA8dGNsYS1saXZlLWFwcHMtY2FzZS1kYXRhLWRpc3BsYXk+PC90Y2xhLWxpdmUtYXBwcy1jYXNlLWRhdGEtZGlzcGxheT5cbiAqL1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICd0Y2xhLWxpdmUtYXBwcy1jYXNlLWRhdGEtZGlzcGxheScsXG4gIHRlbXBsYXRlVXJsOiAnLi9saXZlLWFwcHMtY2FzZS1kYXRhLWRpc3BsYXkuY29tcG9uZW50Lmh0bWwnLFxuICBzdHlsZVVybHM6IFsnLi9saXZlLWFwcHMtY2FzZS1kYXRhLWRpc3BsYXkuY29tcG9uZW50LmNzcyddXG59KVxuZXhwb3J0IGNsYXNzIExpdmVBcHBzQ2FzZURhdGFEaXNwbGF5Q29tcG9uZW50IGltcGxlbWVudHMgT25Jbml0IHtcblxuICBERUZBVUxUX0NBU0VfREFUQV9MQVlPVVQgPSBbXG4gICAgJyonLFxuICAgIHsgdHlwZTogJ3N1Ym1pdCcsIHRpdGxlOiAnU2F2ZScsIGNvbmRpdGlvbjogJzE9PT0yJyB9LFxuICAgIHsgdHlwZTogJ2FjdGlvbnMnLCB0aXRsZTogJ2hlbGxvJywgY29uZGl0aW9uOiAnMT09PTInIH1cblxuICBdO1xuXG4gIC8qKlxuICAgKiBTYW5kYm94SWRcbiAgICovXG4gIEBJbnB1dCgpIHNhbmRib3hJZDogbnVtYmVyO1xuXG4gIC8qKlxuICAgKiBUaGUgY2FzZSBkYXRhXG4gICAqL1xuICBASW5wdXQoKSBjYXNlRGF0YTogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgY2FzZSByZWZlcmVuY2VcbiAgICovXG5cbiAgQElucHV0KCkgYXBwSWQ6IHN0cmluZ1xuICAvKipcbiAgICogVGhlIGFwcGxpY2F0aW9uSWRcbiAgICovXG5cbiAgQElucHV0KCkgdHlwZUlkOiBzdHJpbmdcbiAgLyoqXG4gICAqIFRoZSB0eXBlSWRcbiAgICovXG5cbiAgQElucHV0KCkgY2FzZVJlZjogc3RyaW5nO1xuXG4gIC8qKlxuICAgKiBUaGUgJ25hbWUnIG9mIHRoZSBtYWluIGNhc2UgdHlwZVxuICAgKi9cblxuICBASW5wdXQoKSBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIFRoZSBzY2hlbWEgb2YgdGhlIGNhc2UgdHlwZVxuICAgKi9cbiAgQElucHV0KCkgc2NoZW1hOiBKc29uU2NoZW1hO1xuXG4gIC8qKlxuICAgKiBBbGxvdyBvdmVycmlkZSBvZiBmb3JtcyBmcmFtZXdvcmtcbiAgICogT3B0aW9uczogYm9vdHN0cmFwLTQgb3IgbWF0ZXJpYWwtZGVzaWduXG4gICAqL1xuICBASW5wdXQoKSBmb3Jtc0ZyYW1ld29yazogc3RyaW5nID0gdGhpcy5mb3Jtc0ZyYW1ld29yayA/IHRoaXMuZm9ybXNGcmFtZXdvcmsgOiAnbWF0ZXJpYWwtZGVzaWduJztcblxuICAvKipcbiAgICogTGF5b3V0IG9iamVjdCB0aGF0IGNhbiBiZSBwYXNzZWQgdG8gb3ZlcnJpZGUgZGVmYXVsdCBsYXlvdXQgb2YgdGhlIGZvcm0gcmVuZGVyZXJcbiAgICovXG4gIEBJbnB1dCgpIGxheW91dDogYW55W10gPSB0aGlzLmxheW91dCA/IHRoaXMubGF5b3V0IDogdGhpcy5ERUZBVUxUX0NBU0VfREFUQV9MQVlPVVQ7XG5cbiAgLyoqXG4gICAqIEN1c3RvbSBGb3JtIGNvbmZpZ3VyYXRpb24gZmlsZVxuICAgKi9cbiAgQElucHV0KCkgY3VzdG9tRm9ybURlZnM6IEN1c3RvbUZvcm1EZWZzO1xuXG4gIC8qKlxuICAgKiBDdXN0b20gRm9ybSBSZWZlcmVuY2VcbiAgICovXG4gIEBJbnB1dCgpIGZvcm1SZWY6IHN0cmluZztcblxuICAvKipcbiAgICogRW1pdCBldmVudCB0byBjYXVzZSByZWZyZXNoIG9mIHBhZ2VcbiAgICogKiovXG4gIEBPdXRwdXQoKSByZWZyZXNoRXZlbnQgPSBuZXcgRXZlbnRFbWl0dGVyKCk7XG5cbiAgb3B0aW9ucztcblxuICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgY2FzZVByb2Nlc3NTZXJ2aWNlOiBUY0Nhc2VQcm9jZXNzZXNTZXJ2aWNlKSB7IH1cblxuICBwdWJsaWMgdXBkYXRlRGF0YUFjdGlvbihkYXRhOiBhbnkpIHtcbiAgICBkYXRhID0ge1xuICAgICAgW3RoaXMubmFtZV06IGRhdGFcbiAgICB9XG5cbiAgICB0aGlzLmNhc2VQcm9jZXNzU2VydmljZS5jYXNlRGF0YUZvcm1VcGRhdGUodGhpcy5jYXNlUmVmLCB0aGlzLmFwcElkLCB0aGlzLnR5cGVJZCwgdGhpcy5zYW5kYm94SWQsICckVXBkYXRlJywgZGF0YSkuc3Vic2NyaWJlKFxuICAgICAgbmV4dCA9PiB7XG4gICAgICAgIHRoaXMucmVmcmVzaEV2ZW50LmVtaXQoKTtcbiAgICAgIH0sXG4gICAgICBlcnJvcjEgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKCdVbmFibGUgdG8gdHJpZ2dlciB1cGRhdGUgb2YgY2FzZSBkYXRhJyk7XG4gICAgICB9XG4gICAgKTtcbiAgfVxuXG4gIG5nT25Jbml0KCkge1xuICAgIC8vIHNpbmNlIHRoaXMgaXMgdGhlICdkaXNwbGF5JyBvZiBjYXNlIGRhdGEgd2Ugc2V0IHRvIHJlYWRvbmx5IGFuZCBubyB2YWxpZGF0aW9uXG4gICAgLy8gbGVnYWN5IG1ha2VzIHRoZSBsYWJlbHMgYXBwZWFyIGFib3ZlIHRoZSBkYXRhXG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgZGVmYXVsdE9wdGlvbnM6IHtcbiAgICAgICAgJ3JlYWRvbmx5JzogdHJ1ZSxcbiAgICAgICAgJ2FwcGVhcmFuY2UnOiAnbGVnYWN5J1xuICAgICAgfSxcbiAgICAgICd2YWxpZGF0ZU9uUmVuZGVyJzogZmFsc2VcbiAgICB9O1xuICAgIGNvbnNvbGUubG9nKHRoaXMuc2NoZW1hKTtcbiAgfVxuXG59XG4iXX0=