/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// This guard is to check whether the user has appropriate role to access a route based on config settings
import { Injectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { LiveAppsService } from '../services/live-apps.service';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { forkJoin } from 'rxjs';
import { TcCoreCommonFunctions, TcGeneralConfigService, TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { Location } from '@angular/common';
import { TcRolesService } from '../services/tc-roles-service.ts.service';
import { TcAccessControlService } from '../services/tc-access-control.service';
import { AccessControlConfigurationResolver } from '../resolvers/accessControlConfiguration.resolver';
import { AccessResolver } from '../resolvers/access.resolver';
var RoleGuard = /** @class */ (function () {
    function RoleGuard(liveapps, rolesService, http, location, route, sharedStateService, generalConfigService, accessControlService, router) {
        this.liveapps = liveapps;
        this.rolesService = rolesService;
        this.http = http;
        this.location = location;
        this.route = route;
        this.sharedStateService = sharedStateService;
        this.generalConfigService = generalConfigService;
        this.accessControlService = accessControlService;
        this.router = router;
        this.DEFAULT_CONFIG_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/routeAccessControl.json');
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    RoleGuard.prototype.canActivate = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        /** @type {?} */
        var guardRoute = '';
        route.pathFromRoot.map((/**
         * @param {?} element
         * @return {?}
         */
        function (element) {
            if (element.url.length === 1) {
                guardRoute += '/' + element.url[0];
            }
        }));
        // we will need the active user role
        /** @type {?} */
        var activeResolver$ = new AccessResolver(this.location, this.http, this.accessControlService, this.rolesService, this.liveapps, this.route, this.sharedStateService, this.generalConfigService, this.router).resolve();
        // access control configuration to check current URL is on allowedRoutes
        /** @type {?} */
        var accessControlConfig$ = new AccessControlConfigurationResolver(this.location, this.http, this.accessControlService).resolve();
        // run both in parallel then check access
        return forkJoin(activeResolver$, accessControlConfig$).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), activeResolver = _b[0], accessControlConfig = _b[1];
            // if guardRoute is not in allowedRoutes then OK
            if (accessControlConfig.allowedRoutes.indexOf(guardRoute) === -1) {
                return true;
            }
            // Check guardRoute in active user role routes
            if (activeResolver.routes.indexOf(guardRoute) > -1) {
                return true;
            }
            else {
                return false;
            }
        })));
    };
    RoleGuard.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RoleGuard.ctorParameters = function () { return [
        { type: LiveAppsService },
        { type: TcRolesService },
        { type: HttpClient },
        { type: Location },
        { type: ActivatedRoute },
        { type: TcSharedStateService },
        { type: TcGeneralConfigService },
        { type: TcAccessControlService },
        { type: Router }
    ]; };
    return RoleGuard;
}());
export { RoleGuard };
if (false) {
    /** @type {?} */
    RoleGuard.prototype.DEFAULT_CONFIG_URL;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.liveapps;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.rolesService;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.http;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.location;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.route;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.sharedStateService;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.accessControlService;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZS5ndWFyZC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1saXZlYXBwcy1saWIvIiwic291cmNlcyI6WyJsaWIvZ3VhcmRzL3JvbGUuZ3VhcmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBRUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQTJELGNBQWMsRUFBRSxNQUFNLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUNqSCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyQyxPQUFPLEVBQUUsUUFBUSxFQUFjLE1BQU0sTUFBTSxDQUFDO0FBQzVDLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxzQkFBc0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQy9HLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0seUNBQXlDLENBQUM7QUFDekUsT0FBTyxFQUFFLHNCQUFzQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGtDQUFrQyxFQUFFLE1BQU0sa0RBQWtELENBQUM7QUFDdEcsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLDhCQUE4QixDQUFDO0FBRTlEO0lBS0ksbUJBQ1ksUUFBeUIsRUFDekIsWUFBNEIsRUFDNUIsSUFBZ0IsRUFDaEIsUUFBa0IsRUFDbEIsS0FBcUIsRUFDckIsa0JBQXdDLEVBQ3hDLG9CQUE0QyxFQUM1QyxvQkFBNEMsRUFDNUMsTUFBYztRQVJkLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQ3pCLGlCQUFZLEdBQVosWUFBWSxDQUFnQjtRQUM1QixTQUFJLEdBQUosSUFBSSxDQUFZO1FBQ2hCLGFBQVEsR0FBUixRQUFRLENBQVU7UUFDbEIsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDckIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFzQjtRQUN4Qyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXdCO1FBQzVDLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBd0I7UUFDNUMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQVgxQix1QkFBa0IsR0FBRyxxQkFBcUIsQ0FBQywyQkFBMkIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLHVDQUF1QyxDQUFDLENBQUM7SUFZNUgsQ0FBQzs7Ozs7O0lBRUosK0JBQVc7Ozs7O0lBQVgsVUFBWSxLQUE2QixFQUFFLEtBQTBCOztZQUU3RCxVQUFVLEdBQUcsRUFBRTtRQUNuQixLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUc7Ozs7UUFBQyxVQUFBLE9BQU87WUFDMUIsSUFBSSxPQUFPLENBQUMsR0FBRyxDQUFDLE1BQU0sS0FBSyxDQUFDLEVBQUU7Z0JBQzFCLFVBQVUsSUFBSSxHQUFHLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQzthQUN0QztRQUNMLENBQUMsRUFBQyxDQUFBOzs7WUFHSSxlQUFlLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxPQUFPLEVBQUU7OztZQUdsTixvQkFBb0IsR0FBRyxJQUFJLGtDQUFrQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLEVBQUU7UUFFbEkseUNBQXlDO1FBQ3pDLE9BQU8sUUFBUSxDQUFDLGVBQWUsRUFBRSxvQkFBb0IsQ0FBQyxDQUFDLElBQUksQ0FDdkQsR0FBRzs7OztRQUFDLFVBQUMsRUFBcUM7Z0JBQXJDLDBCQUFxQyxFQUFwQyxzQkFBYyxFQUFFLDJCQUFtQjtZQUVyQyxnREFBZ0Q7WUFDaEQsSUFBSSxtQkFBbUIsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFO2dCQUM5RCxPQUFPLElBQUksQ0FBQzthQUNmO1lBRUQsOENBQThDO1lBQzlDLElBQUksY0FBYyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUM7Z0JBQy9DLE9BQU8sSUFBSSxDQUFDO2FBQ2Y7aUJBQU07Z0JBQ0gsT0FBTyxLQUFLLENBQUM7YUFDaEI7UUFDTCxDQUFDLEVBQUMsQ0FDTCxDQUFDO0lBQ04sQ0FBQzs7Z0JBakRKLFVBQVU7Ozs7Z0JBWEYsZUFBZTtnQkFNZixjQUFjO2dCQUxkLFVBQVU7Z0JBSVYsUUFBUTtnQkFOaUQsY0FBYztnQkFLeEIsb0JBQW9CO2dCQUE1QyxzQkFBc0I7Z0JBRzdDLHNCQUFzQjtnQkFSbUQsTUFBTTs7SUErRHhGLGdCQUFDO0NBQUEsQUFuREQsSUFtREM7U0FsRFksU0FBUzs7O0lBRWxCLHVDQUErSDs7Ozs7SUFHM0gsNkJBQWlDOzs7OztJQUNqQyxpQ0FBb0M7Ozs7O0lBQ3BDLHlCQUF3Qjs7Ozs7SUFDeEIsNkJBQTBCOzs7OztJQUMxQiwwQkFBNkI7Ozs7O0lBQzdCLHVDQUFnRDs7Ozs7SUFDaEQseUNBQW9EOzs7OztJQUNwRCx5Q0FBb0Q7Ozs7O0lBQ3BELDJCQUFzQiIsInNvdXJjZXNDb250ZW50IjpbIi8vIFRoaXMgZ3VhcmQgaXMgdG8gY2hlY2sgd2hldGhlciB0aGUgdXNlciBoYXMgYXBwcm9wcmlhdGUgcm9sZSB0byBhY2Nlc3MgYSByb3V0ZSBiYXNlZCBvbiBjb25maWcgc2V0dGluZ3NcblxuaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtDYW5BY3RpdmF0ZSwgQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgUm91dGVyU3RhdGVTbmFwc2hvdCwgQWN0aXZhdGVkUm91dGUsIFJvdXRlcn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IExpdmVBcHBzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL2xpdmUtYXBwcy5zZXJ2aWNlJztcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQgeyBtYXAgfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBmb3JrSm9pbiwgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgVGNDb3JlQ29tbW9uRnVuY3Rpb25zLCBUY0dlbmVyYWxDb25maWdTZXJ2aWNlLCBUY1NoYXJlZFN0YXRlU2VydmljZSB9IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5pbXBvcnQgeyBMb2NhdGlvbiB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQgeyBUY1JvbGVzU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3RjLXJvbGVzLXNlcnZpY2UudHMuc2VydmljZSc7XG5pbXBvcnQgeyBUY0FjY2Vzc0NvbnRyb2xTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvdGMtYWNjZXNzLWNvbnRyb2wuc2VydmljZSc7XG5pbXBvcnQgeyBBY2Nlc3NDb250cm9sQ29uZmlndXJhdGlvblJlc29sdmVyIH0gZnJvbSAnLi4vcmVzb2x2ZXJzL2FjY2Vzc0NvbnRyb2xDb25maWd1cmF0aW9uLnJlc29sdmVyJztcbmltcG9ydCB7IEFjY2Vzc1Jlc29sdmVyIH0gZnJvbSAnLi4vcmVzb2x2ZXJzL2FjY2Vzcy5yZXNvbHZlcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSb2xlR3VhcmQgaW1wbGVtZW50cyBDYW5BY3RpdmF0ZSB7XG5cbiAgICBERUZBVUxUX0NPTkZJR19VUkwgPSBUY0NvcmVDb21tb25GdW5jdGlvbnMucHJlcGFyZVVybEZvclN0YXRpY1Jlc291cmNlKHRoaXMubG9jYXRpb24sICdhc3NldHMvY29uZmlnL3JvdXRlQWNjZXNzQ29udHJvbC5qc29uJyk7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBsaXZlYXBwczogTGl2ZUFwcHNTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHJvbGVzU2VydmljZTogVGNSb2xlc1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgaHR0cDogSHR0cENsaWVudCxcbiAgICAgICAgcHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb24sXG4gICAgICAgIHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgICBwcml2YXRlIHNoYXJlZFN0YXRlU2VydmljZTogVGNTaGFyZWRTdGF0ZVNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgZ2VuZXJhbENvbmZpZ1NlcnZpY2U6IFRjR2VuZXJhbENvbmZpZ1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgYWNjZXNzQ29udHJvbFNlcnZpY2U6IFRjQWNjZXNzQ29udHJvbFNlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgcm91dGVyOiBSb3V0ZXJcbiAgICApIHt9XG5cbiAgICBjYW5BY3RpdmF0ZShyb3V0ZTogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCwgc3RhdGU6IFJvdXRlclN0YXRlU25hcHNob3QpOiBPYnNlcnZhYmxlPGJvb2xlYW4+IHtcblxuICAgICAgICBsZXQgZ3VhcmRSb3V0ZSA9ICcnO1xuICAgICAgICByb3V0ZS5wYXRoRnJvbVJvb3QubWFwKGVsZW1lbnQgPT4ge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnQudXJsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgICAgICAgIGd1YXJkUm91dGUgKz0gJy8nICsgZWxlbWVudC51cmxbMF07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gd2Ugd2lsbCBuZWVkIHRoZSBhY3RpdmUgdXNlciByb2xlXG4gICAgICAgIGNvbnN0IGFjdGl2ZVJlc29sdmVyJCA9IG5ldyBBY2Nlc3NSZXNvbHZlcih0aGlzLmxvY2F0aW9uLCB0aGlzLmh0dHAsIHRoaXMuYWNjZXNzQ29udHJvbFNlcnZpY2UsIHRoaXMucm9sZXNTZXJ2aWNlLCB0aGlzLmxpdmVhcHBzLCB0aGlzLnJvdXRlLCB0aGlzLnNoYXJlZFN0YXRlU2VydmljZSwgdGhpcy5nZW5lcmFsQ29uZmlnU2VydmljZSwgdGhpcy5yb3V0ZXIpLnJlc29sdmUoKTtcblxuICAgICAgICAvLyBhY2Nlc3MgY29udHJvbCBjb25maWd1cmF0aW9uIHRvIGNoZWNrIGN1cnJlbnQgVVJMIGlzIG9uIGFsbG93ZWRSb3V0ZXNcbiAgICAgICAgY29uc3QgYWNjZXNzQ29udHJvbENvbmZpZyQgPSBuZXcgQWNjZXNzQ29udHJvbENvbmZpZ3VyYXRpb25SZXNvbHZlcih0aGlzLmxvY2F0aW9uLCB0aGlzLmh0dHAsIHRoaXMuYWNjZXNzQ29udHJvbFNlcnZpY2UpLnJlc29sdmUoKTtcblxuICAgICAgICAvLyBydW4gYm90aCBpbiBwYXJhbGxlbCB0aGVuIGNoZWNrIGFjY2Vzc1xuICAgICAgICByZXR1cm4gZm9ya0pvaW4oYWN0aXZlUmVzb2x2ZXIkLCBhY2Nlc3NDb250cm9sQ29uZmlnJCkucGlwZShcbiAgICAgICAgICAgIG1hcCgoW2FjdGl2ZVJlc29sdmVyLCBhY2Nlc3NDb250cm9sQ29uZmlnXSkgPT4ge1xuXG4gICAgICAgICAgICAgICAgLy8gaWYgZ3VhcmRSb3V0ZSBpcyBub3QgaW4gYWxsb3dlZFJvdXRlcyB0aGVuIE9LXG4gICAgICAgICAgICAgICAgaWYgKGFjY2Vzc0NvbnRyb2xDb25maWcuYWxsb3dlZFJvdXRlcy5pbmRleE9mKGd1YXJkUm91dGUpID09PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAvLyBDaGVjayBndWFyZFJvdXRlIGluIGFjdGl2ZSB1c2VyIHJvbGUgcm91dGVzXG4gICAgICAgICAgICAgICAgaWYgKGFjdGl2ZVJlc29sdmVyLnJvdXRlcy5pbmRleE9mKGd1YXJkUm91dGUpID4gLTEpe1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbn1cbiJdfQ==