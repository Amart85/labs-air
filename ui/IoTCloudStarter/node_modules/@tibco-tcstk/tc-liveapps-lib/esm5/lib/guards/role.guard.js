/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
// This guard is to check whether the user has appropriate role to access a route based on config settings
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { LiveAppsService } from '../services/live-apps.service';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { forkJoin } from 'rxjs';
import { TcCoreCommonFunctions, TcGeneralConfigService, TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { Location } from '@angular/common';
import { RouteAccessControlConfig } from '../models/tc-groups-data';
import { RolesResolver } from '../resolvers/roles.resolver';
var RoleGuard = /** @class */ (function () {
    function RoleGuard(liveapps, router, http, location, sharedStateService, generalConfigService) {
        var _this = this;
        this.liveapps = liveapps;
        this.router = router;
        this.http = http;
        this.location = location;
        this.sharedStateService = sharedStateService;
        this.generalConfigService = generalConfigService;
        this.DEFAULT_CONFIG_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/routeAccessControl.json');
        // can be used to load defaultAppConfig from a JSON config
        this.getRouteAccessControlConfig = (/**
         * @return {?}
         */
        function () {
            /** @type {?} */
            var headers = new HttpHeaders().set('cacheResponse', 'true');
            return _this.http.get(_this.DEFAULT_CONFIG_URL, { headers: headers }).pipe(map((/**
             * @param {?} configContents
             * @return {?}
             */
            function (configContents) { return new RouteAccessControlConfig().deserialize(configContents); })));
        });
        this.getRouteDef = (/**
         * @param {?} routeAccessConfig
         * @param {?} route
         * @return {?}
         */
        function (routeAccessConfig, route) {
            return routeAccessConfig.routes.find((/**
             * @param {?} routeRec
             * @return {?}
             */
            function (routeRec) {
                return (routeRec.routeUrl === route.routeConfig.path);
            }));
        });
        this.hasAccess = (/**
         * @param {?} config
         * @param {?} roles
         * @return {?}
         */
        function (config, roles) {
            /** @type {?} */
            var reqRole = roles.roles.find((/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                return (role.id === config.requiredRoleId);
            }));
            return reqRole ? true : false;
        });
    }
    /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    RoleGuard.prototype.canActivate = /**
     * @param {?} route
     * @param {?} state
     * @return {?}
     */
    function (route, state) {
        var _this = this;
        // get route config
        /** @type {?} */
        var routeConfig$ = this.getRouteAccessControlConfig();
        // we will need the roles we currently have
        /** @type {?} */
        var currentRolesRes = new RolesResolver(this.sharedStateService, this.generalConfigService, this.http, this.liveapps, this.location);
        /** @type {?} */
        var currentRoles$ = currentRolesRes.resolve();
        // run both in parallel then check access
        /** @type {?} */
        var decision$ = forkJoin(routeConfig$, currentRoles$).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), routeConfig = _b[0], currentRoles = _b[1];
            /** @type {?} */
            var routeConfigRec = _this.getRouteDef(routeConfig, route);
            if (_this.hasAccess(routeConfigRec, currentRoles)) {
                return true;
            }
            else {
                console.error('You do not have access to this page: ', route);
                _this.router.navigate(['/errorHandler/' + 'NO_ROUTE_ACCESS/' + 'Route <' + route.url + '> requires role <' + routeConfigRec.requiredRoleId + '>']);
                return false;
            }
        })));
        return decision$;
    };
    RoleGuard.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RoleGuard.ctorParameters = function () { return [
        { type: LiveAppsService },
        { type: Router },
        { type: HttpClient },
        { type: Location },
        { type: TcSharedStateService },
        { type: TcGeneralConfigService }
    ]; };
    return RoleGuard;
}());
export { RoleGuard };
if (false) {
    /** @type {?} */
    RoleGuard.prototype.DEFAULT_CONFIG_URL;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.getRouteAccessControlConfig;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.getRouteDef;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.hasAccess;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.liveapps;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.router;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.http;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.location;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.sharedStateService;
    /**
     * @type {?}
     * @private
     */
    RoleGuard.prototype.generalConfigService;
}
//# sourceMappingURL=data:application/json;base64,