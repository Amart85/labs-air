/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { LiveAppsService } from '../services/live-apps.service';
import { map, switchMap } from 'rxjs/operators';
import { Groups } from '../models/tc-groups-data';
var GroupsResolver = /** @class */ (function () {
    function GroupsResolver(liveapps) {
        this.liveapps = liveapps;
    }
    /**
     * @return {?}
     */
    GroupsResolver.prototype.resolve = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var claims$ = this.liveapps.getClaims()
            .pipe(map((/**
         * @param {?} claim
         * @return {?}
         */
        function (claim) {
            claim.sandboxes.forEach((/**
             * @param {?} sandbox
             * @return {?}
             */
            function (sandbox) {
                if (sandbox.type === 'Production') {
                    claim.primaryProductionSandbox = sandbox;
                }
            }));
            return claim;
        })));
        return claims$.pipe(switchMap((/**
         * @param {?} claiminfo
         * @return {?}
         */
        function (claiminfo) {
            return _this.liveapps.getGroupMemberships(+claiminfo.primaryProductionSandbox.id, claiminfo.id, 1000, true).pipe(map((/**
             * @param {?} groupinfo
             * @return {?}
             */
            function (groupinfo) {
                return new Groups().deserialize(groupinfo);
            })));
        })));
    };
    GroupsResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    GroupsResolver.ctorParameters = function () { return [
        { type: LiveAppsService }
    ]; };
    return GroupsResolver;
}());
export { GroupsResolver };
if (false) {
    /** @type {?} */
    GroupsResolver.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JvdXBzLnJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9yZXNvbHZlcnMvZ3JvdXBzLnJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUU5RCxPQUFPLEVBQVUsR0FBRyxFQUFZLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ2pFLE9BQU8sRUFBQyxNQUFNLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUVoRDtJQUdFLHdCQUFtQixRQUF5QjtRQUF6QixhQUFRLEdBQVIsUUFBUSxDQUFpQjtJQUM1QyxDQUFDOzs7O0lBRUQsZ0NBQU87OztJQUFQO1FBQUEsaUJBd0JDOztZQXRCTyxPQUFPLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLEVBQUU7YUFDdEMsSUFBSSxDQUNILEdBQUc7Ozs7UUFBQyxVQUFBLEtBQUs7WUFDUCxLQUFLLENBQUMsU0FBUyxDQUFDLE9BQU87Ozs7WUFBQyxVQUFBLE9BQU87Z0JBQzdCLElBQUksT0FBTyxDQUFDLElBQUksS0FBSyxZQUFZLEVBQUU7b0JBQ2pDLEtBQUssQ0FBQyx3QkFBd0IsR0FBRyxPQUFPLENBQUM7aUJBQzFDO1lBQ0gsQ0FBQyxFQUFDLENBQUM7WUFDSCxPQUFPLEtBQUssQ0FBQztRQUNmLENBQUMsRUFBQyxDQUNIO1FBRUgsT0FBTyxPQUFPLENBQUMsSUFBSSxDQUNqQixTQUFTOzs7O1FBQUMsVUFBQSxTQUFTO1lBQ2YsT0FBTyxLQUFJLENBQUMsUUFBUSxDQUFDLG1CQUFtQixDQUFDLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsRUFBRSxTQUFTLENBQUMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQzdHLEdBQUc7Ozs7WUFBQyxVQUFBLFNBQVM7Z0JBQ1gsT0FBTyxJQUFJLE1BQU0sRUFBRSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM3QyxDQUFDLEVBQUMsQ0FDSCxDQUFDO1FBQ0osQ0FBQyxFQUNGLENBQ0YsQ0FBQztJQUNKLENBQUM7O2dCQTlCRixVQUFVOzs7O2dCQUxILGVBQWU7O0lBb0N2QixxQkFBQztDQUFBLEFBL0JELElBK0JDO1NBOUJZLGNBQWM7OztJQUViLGtDQUFnQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlc29sdmUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSwgb2YgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7TGl2ZUFwcHNTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9saXZlLWFwcHMuc2VydmljZSc7XG5pbXBvcnQge0NsYWltfSBmcm9tICdAdGliY28tdGNzdGsvdGMtY29yZS1saWInO1xuaW1wb3J0IHtmbGF0TWFwLCBtYXAsIG1lcmdlTWFwLCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7R3JvdXBzfSBmcm9tICcuLi9tb2RlbHMvdGMtZ3JvdXBzLWRhdGEnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgR3JvdXBzUmVzb2x2ZXIgaW1wbGVtZW50cyBSZXNvbHZlPE9ic2VydmFibGU8R3JvdXBzPj4ge1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBsaXZlYXBwczogTGl2ZUFwcHNTZXJ2aWNlKSB7XG4gIH1cblxuICByZXNvbHZlKCk6IE9ic2VydmFibGU8R3JvdXBzPiB7XG5cbiAgICBjb25zdCBjbGFpbXMkID0gdGhpcy5saXZlYXBwcy5nZXRDbGFpbXMoKVxuICAgICAgLnBpcGUoXG4gICAgICAgIG1hcChjbGFpbSA9PiB7XG4gICAgICAgICAgY2xhaW0uc2FuZGJveGVzLmZvckVhY2goc2FuZGJveCA9PiB7XG4gICAgICAgICAgICBpZiAoc2FuZGJveC50eXBlID09PSAnUHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgY2xhaW0ucHJpbWFyeVByb2R1Y3Rpb25TYW5kYm94ID0gc2FuZGJveDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXR1cm4gY2xhaW07XG4gICAgICAgIH0pXG4gICAgICApO1xuXG4gICAgcmV0dXJuIGNsYWltcyQucGlwZShcbiAgICAgIHN3aXRjaE1hcChjbGFpbWluZm8gPT4ge1xuICAgICAgICAgIHJldHVybiB0aGlzLmxpdmVhcHBzLmdldEdyb3VwTWVtYmVyc2hpcHMoK2NsYWltaW5mby5wcmltYXJ5UHJvZHVjdGlvblNhbmRib3guaWQsIGNsYWltaW5mby5pZCwgMTAwMCwgdHJ1ZSkucGlwZShcbiAgICAgICAgICAgIG1hcChncm91cGluZm8gPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gbmV3IEdyb3VwcygpLmRlc2VyaWFsaXplKGdyb3VwaW5mbyk7XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuICB9XG59XG4iXX0=