/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { ActivatedRoute } from '@angular/router';
import { of } from 'rxjs';
import { LiveAppsService } from '../services/live-apps.service';
import { GeneralConfigResolver, TcGeneralConfigService, TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { flatMap, map } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { ClaimsResolver } from './claims.resolver';
import { TcRolesService } from '../services/tc-roles-service.ts.service';
var RoleActiveResolver = /** @class */ (function () {
    function RoleActiveResolver(rolesService, liveAppsService, route, tcSharedStateService, generalConfigService, httpClient, location) {
        this.rolesService = rolesService;
        this.liveAppsService = liveAppsService;
        this.route = route;
        this.tcSharedStateService = tcSharedStateService;
        this.generalConfigService = generalConfigService;
        this.httpClient = httpClient;
        this.location = location;
    }
    /**
     * @return {?}
     */
    RoleActiveResolver.prototype.resolve = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var currentRole = this.rolesService.getCurrentRole();
        if (currentRole == undefined) {
            /** @type {?} */
            var generalConfigResolver_1 = new GeneralConfigResolver(this.tcSharedStateService, this.generalConfigService, this.httpClient, this.location);
            /** @type {?} */
            var claimResolver$ = new ClaimsResolver(this.liveAppsService);
            return claimResolver$.resolve().pipe(flatMap((/**
             * @param {?} claim
             * @return {?}
             */
            function (claim) {
                /** @type {?} */
                var sandboxId = claim.primaryProductionSandbox.id;
                generalConfigResolver_1.setSandbox(Number(sandboxId));
                return generalConfigResolver_1.resolve().pipe(map((/**
                 * @param {?} generalConfig
                 * @return {?}
                 */
                function (generalConfig) {
                    /** @type {?} */
                    var highestRole = generalConfig.roles.reduce((/**
                     * @param {?} prev
                     * @param {?} current
                     * @return {?}
                     */
                    function (prev, current) {
                        return (prev.priority > current.priority) ? prev : current;
                    }));
                    _this.rolesService.setCurrentRole(highestRole);
                    return highestRole;
                })));
            })));
        }
        else {
            return of(currentRole);
        }
    };
    RoleActiveResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RoleActiveResolver.ctorParameters = function () { return [
        { type: TcRolesService },
        { type: LiveAppsService },
        { type: ActivatedRoute },
        { type: TcSharedStateService },
        { type: TcGeneralConfigService },
        { type: HttpClient },
        { type: Location }
    ]; };
    return RoleActiveResolver;
}());
export { RoleActiveResolver };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.rolesService;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.liveAppsService;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.route;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.tcSharedStateService;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.httpClient;
    /**
     * @type {?}
     * @private
     */
    RoleActiveResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZS1hY3RpdmUucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL3Jlc29sdmVycy9yb2xlLWFjdGl2ZS5yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQVcsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDMUQsT0FBTyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUN0QyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sK0JBQStCLENBQUM7QUFDaEUsT0FBTyxFQUFFLHFCQUFxQixFQUFpQixzQkFBc0IsRUFBRSxvQkFBb0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQzlILE9BQU8sRUFBRSxPQUFPLEVBQUUsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDbkQsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBRXpFO0lBR0ksNEJBQ1ksWUFBNEIsRUFDNUIsZUFBZ0MsRUFDaEMsS0FBcUIsRUFDckIsb0JBQTBDLEVBQzFDLG9CQUE0QyxFQUM1QyxVQUFzQixFQUN0QixRQUFrQjtRQU5sQixpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFDNUIsb0JBQWUsR0FBZixlQUFlLENBQWlCO1FBQ2hDLFVBQUssR0FBTCxLQUFLLENBQWdCO1FBQ3JCLHlCQUFvQixHQUFwQixvQkFBb0IsQ0FBc0I7UUFDMUMseUJBQW9CLEdBQXBCLG9CQUFvQixDQUF3QjtRQUM1QyxlQUFVLEdBQVYsVUFBVSxDQUFZO1FBQ3RCLGFBQVEsR0FBUixRQUFRLENBQVU7SUFDOUIsQ0FBQzs7OztJQUVELG9DQUFPOzs7SUFBUDtRQUFBLGlCQTBCQzs7WUF4QlMsV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsY0FBYyxFQUFFO1FBRXRELElBQUksV0FBVyxJQUFJLFNBQVMsRUFBQzs7Z0JBQ3JCLHVCQUFxQixHQUFHLElBQUkscUJBQXFCLENBQUMsSUFBSSxDQUFDLG9CQUFvQixFQUFFLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUM7O2dCQUNySSxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQztZQUMvRCxPQUFPLGNBQWMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQ2hDLE9BQU87Ozs7WUFBQyxVQUFBLEtBQUs7O29CQUNILFNBQVMsR0FBRyxLQUFLLENBQUMsd0JBQXdCLENBQUMsRUFBRTtnQkFDbkQsdUJBQXFCLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDO2dCQUVwRCxPQUFPLHVCQUFxQixDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FDdkMsR0FBRzs7OztnQkFBQyxVQUFBLGFBQWE7O3dCQUNQLFdBQVcsR0FBRyxhQUFhLENBQUMsS0FBSyxDQUFDLE1BQU07Ozs7O29CQUFDLFVBQVUsSUFBSSxFQUFFLE9BQU87d0JBQ2xFLE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUE7b0JBQzlELENBQUMsRUFBQztvQkFDRixLQUFJLENBQUMsWUFBWSxDQUFDLGNBQWMsQ0FBQyxXQUFXLENBQUMsQ0FBQztvQkFDOUMsT0FBTyxXQUFXLENBQUM7Z0JBQ3ZCLENBQUMsRUFBQyxDQUNMLENBQUM7WUFDTixDQUFDLEVBQUMsQ0FDTCxDQUFDO1NBQ0o7YUFBSztZQUNILE9BQU8sRUFBRSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1NBQzFCO0lBQ0wsQ0FBQzs7Z0JBdkNKLFVBQVU7Ozs7Z0JBRkYsY0FBYztnQkFOZCxlQUFlO2dCQUZOLGNBQWM7Z0JBR3VDLG9CQUFvQjtnQkFBNUMsc0JBQXNCO2dCQUU1RCxVQUFVO2dCQUNWLFFBQVE7O0lBNENqQix5QkFBQztDQUFBLEFBeENELElBd0NDO1NBdkNZLGtCQUFrQjs7Ozs7O0lBR3ZCLDBDQUFvQzs7Ozs7SUFDcEMsNkNBQXdDOzs7OztJQUN4QyxtQ0FBNkI7Ozs7O0lBQzdCLGtEQUFrRDs7Ozs7SUFDbEQsa0RBQW9EOzs7OztJQUNwRCx3Q0FBOEI7Ozs7O0lBQzlCLHNDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJlc29sdmUsIEFjdGl2YXRlZFJvdXRlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBMaXZlQXBwc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy9saXZlLWFwcHMuc2VydmljZSc7XG5pbXBvcnQgeyBHZW5lcmFsQ29uZmlnUmVzb2x2ZXIsIFJvbGVBdHRyaWJ1dGUsIFRjR2VuZXJhbENvbmZpZ1NlcnZpY2UsIFRjU2hhcmVkU3RhdGVTZXJ2aWNlIH0gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliJztcbmltcG9ydCB7IGZsYXRNYXAsIG1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENsYWltc1Jlc29sdmVyIH0gZnJvbSAnLi9jbGFpbXMucmVzb2x2ZXInO1xuaW1wb3J0IHsgVGNSb2xlc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy90Yy1yb2xlcy1zZXJ2aWNlLnRzLnNlcnZpY2UnO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgUm9sZUFjdGl2ZVJlc29sdmVyIGltcGxlbWVudHMgUmVzb2x2ZTxPYnNlcnZhYmxlPFJvbGVBdHRyaWJ1dGU+PiB7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSByb2xlc1NlcnZpY2U6IFRjUm9sZXNTZXJ2aWNlLCBcbiAgICAgICAgcHJpdmF0ZSBsaXZlQXBwc1NlcnZpY2U6IExpdmVBcHBzU2VydmljZSwgXG4gICAgICAgIHByaXZhdGUgcm91dGU6IEFjdGl2YXRlZFJvdXRlLFxuICAgICAgICBwcml2YXRlIHRjU2hhcmVkU3RhdGVTZXJ2aWNlOiBUY1NoYXJlZFN0YXRlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBnZW5lcmFsQ29uZmlnU2VydmljZTogVGNHZW5lcmFsQ29uZmlnU2VydmljZSwgXG4gICAgICAgIHByaXZhdGUgaHR0cENsaWVudDogSHR0cENsaWVudCxcbiAgICAgICAgcHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb24pIHtcbiAgICB9XG5cbiAgICByZXNvbHZlKCk6IE9ic2VydmFibGU8Um9sZUF0dHJpYnV0ZT4ge1xuXG4gICAgICAgIGNvbnN0IGN1cnJlbnRSb2xlID0gdGhpcy5yb2xlc1NlcnZpY2UuZ2V0Q3VycmVudFJvbGUoKTtcblxuICAgICAgICBpZiAoY3VycmVudFJvbGUgPT0gdW5kZWZpbmVkKXtcbiAgICAgICAgICAgIGxldCBnZW5lcmFsQ29uZmlnUmVzb2x2ZXIgPSBuZXcgR2VuZXJhbENvbmZpZ1Jlc29sdmVyKHRoaXMudGNTaGFyZWRTdGF0ZVNlcnZpY2UsIHRoaXMuZ2VuZXJhbENvbmZpZ1NlcnZpY2UsIHRoaXMuaHR0cENsaWVudCwgdGhpcy5sb2NhdGlvbik7XG4gICAgICAgICAgICBjb25zdCBjbGFpbVJlc29sdmVyJCA9IG5ldyBDbGFpbXNSZXNvbHZlcih0aGlzLmxpdmVBcHBzU2VydmljZSk7XG4gICAgICAgICAgICByZXR1cm4gY2xhaW1SZXNvbHZlciQucmVzb2x2ZSgpLnBpcGUoXG4gICAgICAgICAgICAgICAgZmxhdE1hcChjbGFpbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHNhbmRib3hJZCA9IGNsYWltLnByaW1hcnlQcm9kdWN0aW9uU2FuZGJveC5pZDtcbiAgICAgICAgICAgICAgICAgICAgZ2VuZXJhbENvbmZpZ1Jlc29sdmVyLnNldFNhbmRib3goTnVtYmVyKHNhbmRib3hJZCkpO1xuXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBnZW5lcmFsQ29uZmlnUmVzb2x2ZXIucmVzb2x2ZSgpLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAoZ2VuZXJhbENvbmZpZyA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgaGlnaGVzdFJvbGUgPSBnZW5lcmFsQ29uZmlnLnJvbGVzLnJlZHVjZShmdW5jdGlvbiAocHJldiwgY3VycmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHByZXYucHJpb3JpdHkgPiBjdXJyZW50LnByaW9yaXR5KSA/IHByZXYgOiBjdXJyZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5yb2xlc1NlcnZpY2Uuc2V0Q3VycmVudFJvbGUoaGlnaGVzdFJvbGUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoaWdoZXN0Um9sZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICApO1xuICAgICAgICAgfWVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG9mKGN1cnJlbnRSb2xlKTsgICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==