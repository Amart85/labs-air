/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
// this resolver wraps claims and appConfig resolvers because we need claims to get and set AppConfig to default values.
// we actually cache the claims call using a HTTP interceptor to avoid making multiple REST calls
// note: claims only changes on logout/login so no point making lots of calls to claims
import { Injectable } from '@angular/core';
import { forkJoin } from 'rxjs';
import { GeneralConfigResolver, TcGeneralConfigService } from '@tibco-tcstk/tc-core-lib';
import { flatMap, map } from 'rxjs/operators';
import { TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { ClaimsResolver } from './claims.resolver';
import { LiveAppsService } from '../services/live-apps.service';
import { HttpClient } from '@angular/common/http';
import { TcDocumentService } from '../services/tc-document.service';
import { LiveAppsConfigHolder } from '../models/tc-liveapps-config';
import { LiveAppsConfigResolver } from './liveapps-config.resolver';
import { TcLiveAppsConfigService } from '../services/tc-live-apps-config.service';
import { TcCaseCardConfigService } from '../services/tc-case-card-config.service';
import { Location } from '@angular/common';
var LaConfigResolver = /** @class */ (function () {
    function LaConfigResolver(sharedStateService, generalConfigService, liveAppsConfigService, documentService, http, liveAppsService, caseCardConfigService, location) {
        this.sharedStateService = sharedStateService;
        this.generalConfigService = generalConfigService;
        this.liveAppsConfigService = liveAppsConfigService;
        this.documentService = documentService;
        this.http = http;
        this.liveAppsService = liveAppsService;
        this.caseCardConfigService = caseCardConfigService;
        this.location = location;
    }
    /**
     * @param {?} routeSnapshot
     * @return {?}
     */
    LaConfigResolver.prototype.resolve = /**
     * @param {?} routeSnapshot
     * @return {?}
     */
    function (routeSnapshot) {
        // we will return a holder object that contains both general config and live apps config
        var _this = this;
        // we will return a holder object that contains both general config and live apps config
        /** @type {?} */
        var generalConfigResolver = new GeneralConfigResolver(this.sharedStateService, this.generalConfigService, this.http, this.location);
        /** @type {?} */
        var liveAppsConfigResolver = new LiveAppsConfigResolver(this.sharedStateService, this.liveAppsConfigService, this.caseCardConfigService, this.http, this.location);
        /** @type {?} */
        var claimResolver$ = new ClaimsResolver(this.liveAppsService).resolve().pipe(flatMap((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            /** @type {?} */
            var sandboxId = value.primaryProductionSandbox.id;
            generalConfigResolver.setSandbox(Number(sandboxId));
            liveAppsConfigResolver.setSandbox(Number(sandboxId));
            /** @type {?} */
            var generalConfig$ = generalConfigResolver.resolve();
            /** @type {?} */
            var liveAppsConfig$ = liveAppsConfigResolver.resolve(routeSnapshot);
            /** @type {?} */
            var forkJoinArray = [generalConfig$, liveAppsConfig$];
            return forkJoin(forkJoinArray).pipe(map((/**
             * @param {?} resultArr
             * @return {?}
             */
            function (resultArr) {
                return new LiveAppsConfigHolder().deserialize({ generalConfig: resultArr[0], liveAppsConfig: resultArr[1] });
            })));
        })));
        /** @type {?} */
        var resolveResp$ = claimResolver$.pipe(flatMap((/**
         * @param {?} liveAppsConfigHolder
         * @return {?}
         */
        function (liveAppsConfigHolder) {
            /** @type {?} */
            var iconsFolder$ = _this.documentService.initOrgFolder(liveAppsConfigHolder.generalConfig.uiAppId + '_Icons');
            /** @type {?} */
            var docsFolder$ = _this.documentService.initOrgFolder(liveAppsConfigHolder.generalConfig.uiAppId + '_Docs');
            /** @type {?} */
            var forkJoinArray = [iconsFolder$, docsFolder$];
            return forkJoin(forkJoinArray).pipe(map((/**
             * @param {?} resultArr
             * @return {?}
             */
            function (resultArr) {
                return liveAppsConfigHolder;
            })));
        })));
        return resolveResp$;
    };
    LaConfigResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LaConfigResolver.ctorParameters = function () { return [
        { type: TcSharedStateService },
        { type: TcGeneralConfigService },
        { type: TcLiveAppsConfigService },
        { type: TcDocumentService },
        { type: HttpClient },
        { type: LiveAppsService },
        { type: TcCaseCardConfigService },
        { type: Location }
    ]; };
    return LaConfigResolver;
}());
export { LaConfigResolver };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LaConfigResolver.prototype.sharedStateService;
    /**
     * @type {?}
     * @private
     */
    LaConfigResolver.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    LaConfigResolver.prototype.liveAppsConfigService;
    /**
     * @type {?}
     * @private
     */
    LaConfigResolver.prototype.documentService;
    /**
     * @type {?}
     * @private
     */
    LaConfigResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LaConfigResolver.prototype.liveAppsService;
    /**
     * @type {?}
     * @private
     */
    LaConfigResolver.prototype.caseCardConfigService;
    /**
     * @type {?}
     * @private
     */
    LaConfigResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,