/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { LiveAppsService } from '../services/live-apps.service';
import { GeneralConfigResolver, TcGeneralConfigService, TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { map, switchMap } from 'rxjs/operators';
import { Roles } from '../models/tc-groups-data';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
var AllRolesResolver = /** @class */ (function () {
    function AllRolesResolver(sharedStateService, generalConfigService, http, liveapps, location) {
        this.sharedStateService = sharedStateService;
        this.generalConfigService = generalConfigService;
        this.http = http;
        this.liveapps = liveapps;
        this.location = location;
    }
    /**
     * @param {?} routeSnapshot
     * @return {?}
     */
    AllRolesResolver.prototype.resolve = /**
     * @param {?} routeSnapshot
     * @return {?}
     */
    function (routeSnapshot) {
        /** @type {?} */
        var claims$ = this.liveapps.getClaims()
            .pipe(map((/**
         * @param {?} claim
         * @return {?}
         */
        function (claim) {
            claim.sandboxes.forEach((/**
             * @param {?} sandbox
             * @return {?}
             */
            function (sandbox) {
                if (sandbox.type === 'Production') {
                    claim.primaryProductionSandbox = sandbox;
                }
            }));
            return claim;
        })));
        /** @type {?} */
        var generalConfigResolver = new GeneralConfigResolver(this.sharedStateService, this.generalConfigService, this.http, this.location);
        return claims$.pipe(switchMap((/**
         * @param {?} claiminfo
         * @return {?}
         */
        function (claiminfo) {
            generalConfigResolver.setSandbox(Number(claiminfo.primaryProductionSandbox.id));
            /** @type {?} */
            var generalConfig$ = generalConfigResolver.resolve().pipe(map((/**
             * @param {?} generalConfig
             * @return {?}
             */
            function (generalConfig) {
                return new Roles().deserialize({ roles: generalConfig.roles });
            })));
            return generalConfig$;
        })));
    };
    AllRolesResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AllRolesResolver.ctorParameters = function () { return [
        { type: TcSharedStateService },
        { type: TcGeneralConfigService },
        { type: HttpClient },
        { type: LiveAppsService },
        { type: Location }
    ]; };
    return AllRolesResolver;
}());
export { AllRolesResolver };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.sharedStateService;
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.liveapps;
    /**
     * @type {?}
     * @private
     */
    AllRolesResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsLXJvbGVzLnJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9yZXNvbHZlcnMvYWxsLXJvbGVzLnJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUM5RCxPQUFPLEVBQVEscUJBQXFCLEVBQWlCLHNCQUFzQixFQUFFLG9CQUFvQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDbkksT0FBTyxFQUFVLEdBQUcsRUFBWSxTQUFTLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRSxPQUFPLEVBQWdCLEtBQUssRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzlELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFJekM7SUFHRSwwQkFBb0Isa0JBQXdDLEVBQVUsb0JBQTRDLEVBQVUsSUFBZ0IsRUFBVSxRQUF5QixFQUFVLFFBQWtCO1FBQXZMLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBc0I7UUFBVSx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXdCO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtJQUMzTSxDQUFDOzs7OztJQUVELGtDQUFPOzs7O0lBQVAsVUFBUSxhQUFxQzs7WUFFckMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFO2FBQ3RDLElBQUksQ0FDSCxHQUFHOzs7O1FBQUMsVUFBQSxLQUFLO1lBQ1AsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxPQUFPO2dCQUM3QixJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssWUFBWSxFQUFFO29CQUNqQyxLQUFLLENBQUMsd0JBQXdCLEdBQUcsT0FBTyxDQUFDO2lCQUMxQztZQUNILENBQUMsRUFBQyxDQUFDO1lBQ0gsT0FBTyxLQUFLLENBQUM7UUFDZixDQUFDLEVBQUMsQ0FDSDs7WUFFRyxxQkFBcUIsR0FBRyxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDO1FBRXJJLE9BQU8sT0FBTyxDQUFDLElBQUksQ0FDakIsU0FBUzs7OztRQUFDLFVBQUEsU0FBUztZQUNmLHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7O2dCQUMxRSxjQUFjLEdBQUcscUJBQXFCLENBQUMsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUN6RCxHQUFHOzs7O1lBQUMsVUFBQSxhQUFhO2dCQUNmLE9BQU8sSUFBSSxLQUFLLEVBQUUsQ0FBQyxXQUFXLENBQUMsRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDakUsQ0FBQyxFQUFDLENBQ0g7WUFDRCxPQUFPLGNBQWMsQ0FBQztRQUN4QixDQUFDLEVBQ0YsQ0FDRixDQUFDO0lBRUosQ0FBQzs7Z0JBbkNGLFVBQVU7Ozs7Z0JBVGtFLG9CQUFvQjtnQkFBNUMsc0JBQXNCO2dCQUduRSxVQUFVO2dCQUpWLGVBQWU7Z0JBTWYsUUFBUTs7SUF5Q2hCLHVCQUFDO0NBQUEsQUFyQ0QsSUFxQ0M7U0FwQ1ksZ0JBQWdCOzs7Ozs7SUFFZiw4Q0FBZ0Q7Ozs7O0lBQUUsZ0RBQW9EOzs7OztJQUFFLGdDQUF3Qjs7Ozs7SUFBRSxvQ0FBaUM7Ozs7O0lBQUUsb0NBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90LCBSZXNvbHZlfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtmb3JrSm9pbiwgT2JzZXJ2YWJsZSwgb2Z9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtMaXZlQXBwc1NlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL2xpdmUtYXBwcy5zZXJ2aWNlJztcbmltcG9ydCB7Q2xhaW0sIEdlbmVyYWxDb25maWdSZXNvbHZlciwgUm9sZUF0dHJpYnV0ZSwgVGNHZW5lcmFsQ29uZmlnU2VydmljZSwgVGNTaGFyZWRTdGF0ZVNlcnZpY2V9IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5pbXBvcnQge2ZsYXRNYXAsIG1hcCwgbWVyZ2VNYXAsIHN3aXRjaE1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtHcm91cCwgR3JvdXBzLCBSb2xlc30gZnJvbSAnLi4vbW9kZWxzL3RjLWdyb3Vwcy1kYXRhJztcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtUY0Nhc2VDYXJkQ29uZmlnU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvdGMtY2FzZS1jYXJkLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7TG9jYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0NsYWltc1Jlc29sdmVyfSBmcm9tICcuL2NsYWltcy5yZXNvbHZlcic7XG5pbXBvcnQge2dyb3VwfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFsbFJvbGVzUmVzb2x2ZXIgaW1wbGVtZW50cyBSZXNvbHZlPE9ic2VydmFibGU8Um9sZXM+PiB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzaGFyZWRTdGF0ZVNlcnZpY2U6IFRjU2hhcmVkU3RhdGVTZXJ2aWNlLCBwcml2YXRlIGdlbmVyYWxDb25maWdTZXJ2aWNlOiBUY0dlbmVyYWxDb25maWdTZXJ2aWNlLCBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgbGl2ZWFwcHM6IExpdmVBcHBzU2VydmljZSwgcHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb24pIHtcbiAgfVxuXG4gIHJlc29sdmUocm91dGVTbmFwc2hvdDogQWN0aXZhdGVkUm91dGVTbmFwc2hvdCk6IE9ic2VydmFibGU8Um9sZXM+IHtcblxuICAgIGNvbnN0IGNsYWltcyQgPSB0aGlzLmxpdmVhcHBzLmdldENsYWltcygpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKGNsYWltID0+IHtcbiAgICAgICAgICBjbGFpbS5zYW5kYm94ZXMuZm9yRWFjaChzYW5kYm94ID0+IHtcbiAgICAgICAgICAgIGlmIChzYW5kYm94LnR5cGUgPT09ICdQcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICBjbGFpbS5wcmltYXJ5UHJvZHVjdGlvblNhbmRib3ggPSBzYW5kYm94O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBjbGFpbTtcbiAgICAgICAgfSlcbiAgICAgICk7XG5cbiAgICBjb25zdCBnZW5lcmFsQ29uZmlnUmVzb2x2ZXIgPSBuZXcgR2VuZXJhbENvbmZpZ1Jlc29sdmVyKHRoaXMuc2hhcmVkU3RhdGVTZXJ2aWNlLCB0aGlzLmdlbmVyYWxDb25maWdTZXJ2aWNlLCB0aGlzLmh0dHAsIHRoaXMubG9jYXRpb24pO1xuXG4gICAgcmV0dXJuIGNsYWltcyQucGlwZShcbiAgICAgIHN3aXRjaE1hcChjbGFpbWluZm8gPT4ge1xuICAgICAgICAgIGdlbmVyYWxDb25maWdSZXNvbHZlci5zZXRTYW5kYm94KE51bWJlcihjbGFpbWluZm8ucHJpbWFyeVByb2R1Y3Rpb25TYW5kYm94LmlkKSk7XG4gICAgICAgICAgY29uc3QgZ2VuZXJhbENvbmZpZyQgPSBnZW5lcmFsQ29uZmlnUmVzb2x2ZXIucmVzb2x2ZSgpLnBpcGUoXG4gICAgICAgICAgICBtYXAoZ2VuZXJhbENvbmZpZyA9PiB7XG4gICAgICAgICAgICAgIHJldHVybiBuZXcgUm9sZXMoKS5kZXNlcmlhbGl6ZSh7IHJvbGVzOiBnZW5lcmFsQ29uZmlnLnJvbGVzIH0pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICAgIHJldHVybiBnZW5lcmFsQ29uZmlnJDtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG5cbiAgfVxuXG59XG4iXX0=