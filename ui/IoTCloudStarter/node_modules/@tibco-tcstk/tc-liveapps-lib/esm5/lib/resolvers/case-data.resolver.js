/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { LiveAppsService } from '../services/live-apps.service';
import { map, switchMap } from 'rxjs/operators';
var CaseDataResolver = /** @class */ (function () {
    function CaseDataResolver(liveapps) {
        this.liveapps = liveapps;
    }
    /**
     * @param {?} routeSnapshot
     * @return {?}
     */
    CaseDataResolver.prototype.resolve = /**
     * @param {?} routeSnapshot
     * @return {?}
     */
    function (routeSnapshot) {
        var _this = this;
        /** @type {?} */
        var claims$ = this.liveapps.getClaims()
            .pipe(map((/**
         * @param {?} claim
         * @return {?}
         */
        function (claim) {
            claim.sandboxes.forEach((/**
             * @param {?} sandbox
             * @return {?}
             */
            function (sandbox) {
                if (sandbox.type === 'Production') {
                    claim.primaryProductionSandbox = sandbox;
                }
            }));
            return claim;
        })));
        return claims$.pipe(switchMap((/**
         * @param {?} claiminfo
         * @return {?}
         */
        function (claiminfo) {
            return _this.liveapps.getCase(routeSnapshot.params.caseRef, +claiminfo.primaryProductionSandbox.id, routeSnapshot.params.appId, routeSnapshot.params.typeId)
                .pipe(map((/**
             * @param {?} caseInfo
             * @return {?}
             */
            function (caseInfo) {
                return caseInfo;
            })));
        })));
    };
    CaseDataResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    CaseDataResolver.ctorParameters = function () { return [
        { type: LiveAppsService }
    ]; };
    return CaseDataResolver;
}());
export { CaseDataResolver };
if (false) {
    /**
     * @type {?}
     * @private
     */
    CaseDataResolver.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FzZS1kYXRhLnJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9yZXNvbHZlcnMvY2FzZS1kYXRhLnJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUVoRSxPQUFPLEVBQVcsR0FBRyxFQUFZLFNBQVMsRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBTW5FO0lBR0ksMEJBQW9CLFFBQXlCO1FBQXpCLGFBQVEsR0FBUixRQUFRLENBQWlCO0lBQzdDLENBQUM7Ozs7O0lBRUQsa0NBQU87Ozs7SUFBUCxVQUFRLGFBQXFDO1FBQTdDLGlCQXdCQzs7WUF0QlMsT0FBTyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxFQUFFO2FBQ3BDLElBQUksQ0FDRCxHQUFHOzs7O1FBQUMsVUFBQSxLQUFLO1lBQ0wsS0FBSyxDQUFDLFNBQVMsQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxPQUFPO2dCQUMzQixJQUFJLE9BQU8sQ0FBQyxJQUFJLEtBQUssWUFBWSxFQUFFO29CQUMvQixLQUFLLENBQUMsd0JBQXdCLEdBQUcsT0FBTyxDQUFDO2lCQUM1QztZQUNMLENBQUMsRUFBQyxDQUFDO1lBQ0gsT0FBTyxLQUFLLENBQUM7UUFDakIsQ0FBQyxFQUFDLENBQ0w7UUFFTCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQ2YsU0FBUzs7OztRQUFDLFVBQUEsU0FBUztZQUNmLE9BQU8sS0FBSSxDQUFDLFFBQVEsQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsRUFBRSxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLGFBQWEsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO2lCQUN0SixJQUFJLENBQ0QsR0FBRzs7OztZQUFDLFVBQUEsUUFBUTtnQkFDUixPQUFPLFFBQVEsQ0FBQztZQUNwQixDQUFDLEVBQUMsQ0FDTCxDQUFDO1FBQ1YsQ0FBQyxFQUFDLENBQ0wsQ0FBQztJQUNOLENBQUM7O2dCQTlCSixVQUFVOzs7O2dCQVJGLGVBQWU7O0lBd0N4Qix1QkFBQztDQUFBLEFBaENELElBZ0NDO1NBL0JZLGdCQUFnQjs7Ozs7O0lBRWIsb0NBQWlDIiwic291cmNlc0NvbnRlbnQiOlsiXG5pbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXNvbHZlLCBBY3RpdmF0ZWRSb3V0ZVNuYXBzaG90IH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IGZvcmtKb2luLCBPYnNlcnZhYmxlLCBvZiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTGl2ZUFwcHNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbGl2ZS1hcHBzLnNlcnZpY2UnO1xuaW1wb3J0IHsgQ2xhaW0sIEdlbmVyYWxDb25maWdSZXNvbHZlciwgUm9sZUF0dHJpYnV0ZSwgVGNHZW5lcmFsQ29uZmlnU2VydmljZSwgVGNTaGFyZWRTdGF0ZVNlcnZpY2UgfSBmcm9tICdAdGliY28tdGNzdGsvdGMtY29yZS1saWInO1xuaW1wb3J0IHsgZmxhdE1hcCwgbWFwLCBtZXJnZU1hcCwgc3dpdGNoTWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgSHR0cENsaWVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcbmltcG9ydCB7IENsYWltc1Jlc29sdmVyIH0gZnJvbSAnLi9jbGFpbXMucmVzb2x2ZXInO1xuaW1wb3J0IHsgQ2FzZUluZm8gfSBmcm9tICcuLi9tb2RlbHMvbGl2ZWFwcHNkYXRhJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENhc2VEYXRhUmVzb2x2ZXIgaW1wbGVtZW50cyBSZXNvbHZlPE9ic2VydmFibGU8Q2FzZUluZm8+PiB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGxpdmVhcHBzOiBMaXZlQXBwc1NlcnZpY2UpIHtcbiAgICB9XG5cbiAgICByZXNvbHZlKHJvdXRlU25hcHNob3Q6IEFjdGl2YXRlZFJvdXRlU25hcHNob3QpOiBPYnNlcnZhYmxlPENhc2VJbmZvPiB7XG5cbiAgICAgICAgY29uc3QgY2xhaW1zJCA9IHRoaXMubGl2ZWFwcHMuZ2V0Q2xhaW1zKClcbiAgICAgICAgICAgIC5waXBlKFxuICAgICAgICAgICAgICAgIG1hcChjbGFpbSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIGNsYWltLnNhbmRib3hlcy5mb3JFYWNoKHNhbmRib3ggPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNhbmRib3gudHlwZSA9PT0gJ1Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhaW0ucHJpbWFyeVByb2R1Y3Rpb25TYW5kYm94ID0gc2FuZGJveDtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBjbGFpbTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gY2xhaW1zJC5waXBlKFxuICAgICAgICAgICAgc3dpdGNoTWFwKGNsYWltaW5mbyA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubGl2ZWFwcHMuZ2V0Q2FzZShyb3V0ZVNuYXBzaG90LnBhcmFtcy5jYXNlUmVmLCArY2xhaW1pbmZvLnByaW1hcnlQcm9kdWN0aW9uU2FuZGJveC5pZCwgcm91dGVTbmFwc2hvdC5wYXJhbXMuYXBwSWQsIHJvdXRlU25hcHNob3QucGFyYW1zLnR5cGVJZClcbiAgICAgICAgICAgICAgICAgICAgLnBpcGUoXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXAoY2FzZUluZm8gPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjYXNlSW5mbztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxufVxuIl19