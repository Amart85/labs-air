/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { ActivatedRoute, Router } from '@angular/router';
import { forkJoin } from 'rxjs';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { TcAccessControlService } from '../services/tc-access-control.service';
import { AccessControlConfigurationResolver } from './accessControlConfiguration.resolver';
import { map } from 'rxjs/operators';
import { TcRolesService } from '../services/tc-roles-service.ts.service';
import { TcSharedStateService, TcGeneralConfigService } from '@tibco-tcstk/tc-core-lib';
import { LiveAppsService } from '../services/live-apps.service';
import { RoleActiveResolver } from './role-active.resolver';
var AccessResolver = /** @class */ (function () {
    function AccessResolver(location, http, accessControlService, rolesService, liveapps, route, sharedStateService, generalConfigService, router) {
        this.location = location;
        this.http = http;
        this.accessControlService = accessControlService;
        this.rolesService = rolesService;
        this.liveapps = liveapps;
        this.route = route;
        this.sharedStateService = sharedStateService;
        this.generalConfigService = generalConfigService;
        this.router = router;
    }
    /**
     * @return {?}
     */
    AccessResolver.prototype.resolve = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var accessControlConfiguration$ = new AccessControlConfigurationResolver(this.location, this.http, this.accessControlService).resolve();
        // we will need the active user role
        /** @type {?} */
        var activeRoleRes = new RoleActiveResolver(this.rolesService, this.liveapps, this.sharedStateService, this.generalConfigService, this.http, this.location, this.router);
        /** @type {?} */
        var activeRole$ = activeRoleRes.resolve();
        // run both in parallel then check access
        /** @type {?} */
        var accessControl$ = forkJoin(accessControlConfiguration$, activeRole$).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), accessConfig = _b[0], activeRole = _b[1];
            return accessConfig.configuration.find((/**
             * @param {?} element
             * @return {?}
             */
            function (element) { return element.roleId === activeRole.id; }));
        })));
        return accessControl$;
    };
    AccessResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AccessResolver.ctorParameters = function () { return [
        { type: Location },
        { type: HttpClient },
        { type: TcAccessControlService },
        { type: TcRolesService },
        { type: LiveAppsService },
        { type: ActivatedRoute },
        { type: TcSharedStateService },
        { type: TcGeneralConfigService },
        { type: Router }
    ]; };
    return AccessResolver;
}());
export { AccessResolver };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AccessResolver.prototype.location;
    /**
     * @type {?}
     * @private
     */
    AccessResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AccessResolver.prototype.accessControlService;
    /**
     * @type {?}
     * @private
     */
    AccessResolver.prototype.rolesService;
    /**
     * @type {?}
     * @private
     */
    AccessResolver.prototype.liveapps;
    /**
     * @type {?}
     * @private
     */
    AccessResolver.prototype.route;
    /**
     * @type {?}
     * @private
     */
    AccessResolver.prototype.sharedStateService;
    /**
     * @type {?}
     * @private
     */
    AccessResolver.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    AccessResolver.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzLnJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9yZXNvbHZlcnMvYWNjZXNzLnJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQVUsY0FBYyxFQUFFLE1BQU0sRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2hFLE9BQU8sRUFBYyxRQUFRLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFNUMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLHNCQUFzQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUMzQyxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUMvRSxPQUFPLEVBQUUsa0NBQWtDLEVBQUUsTUFBTSx1Q0FBdUMsQ0FBQztBQUMzRixPQUFPLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDckMsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLHlDQUF5QyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxzQkFBc0IsRUFBRSxNQUFNLDBCQUEwQixDQUFDO0FBQ3hGLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUNoRSxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUU1RDtJQUdJLHdCQUNZLFFBQWtCLEVBQ2xCLElBQWdCLEVBQ2hCLG9CQUE0QyxFQUM1QyxZQUE0QixFQUM1QixRQUF5QixFQUN6QixLQUFxQixFQUNyQixrQkFBd0MsRUFDeEMsb0JBQTRDLEVBQzVDLE1BQWM7UUFSZCxhQUFRLEdBQVIsUUFBUSxDQUFVO1FBQ2xCLFNBQUksR0FBSixJQUFJLENBQVk7UUFDaEIseUJBQW9CLEdBQXBCLG9CQUFvQixDQUF3QjtRQUM1QyxpQkFBWSxHQUFaLFlBQVksQ0FBZ0I7UUFDNUIsYUFBUSxHQUFSLFFBQVEsQ0FBaUI7UUFDekIsVUFBSyxHQUFMLEtBQUssQ0FBZ0I7UUFDckIsdUJBQWtCLEdBQWxCLGtCQUFrQixDQUFzQjtRQUN4Qyx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXdCO1FBQzVDLFdBQU0sR0FBTixNQUFNLENBQVE7SUFDdEIsQ0FBQzs7OztJQUVMLGdDQUFPOzs7SUFBUDs7WUFFVSwyQkFBMkIsR0FBRyxJQUFJLGtDQUFrQyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxPQUFPLEVBQUU7OztZQUduSSxhQUFhLEdBQUcsSUFBSSxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsWUFBWSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLGtCQUFrQixFQUFFLElBQUksQ0FBQyxvQkFBb0IsRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQzs7WUFDbkssV0FBVyxHQUFHLGFBQWEsQ0FBQyxPQUFPLEVBQUU7OztZQUdyQyxjQUFjLEdBQUcsUUFBUSxDQUFDLDJCQUEyQixFQUFFLFdBQVcsQ0FBQyxDQUFDLElBQUksQ0FDMUUsR0FBRzs7OztRQUFDLFVBQUMsRUFBMEI7Z0JBQTFCLDBCQUEwQixFQUF6QixvQkFBWSxFQUFFLGtCQUFVO1lBQzFCLE9BQU8sWUFBWSxDQUFDLGFBQWEsQ0FBQyxJQUFJOzs7O1lBQUMsVUFBQSxPQUFPLElBQUksT0FBQSxPQUFPLENBQUMsTUFBTSxLQUFLLFVBQVUsQ0FBQyxFQUFFLEVBQWhDLENBQWdDLEVBQUMsQ0FBQztRQUN4RixDQUFDLEVBQUMsQ0FDTDtRQUVELE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7O2dCQS9CSixVQUFVOzs7O2dCQVRGLFFBQVE7Z0JBRFIsVUFBVTtnQkFFVixzQkFBc0I7Z0JBR3RCLGNBQWM7Z0JBRWQsZUFBZTtnQkFWUCxjQUFjO2dCQVN0QixvQkFBb0I7Z0JBQUUsc0JBQXNCO2dCQVRwQixNQUFNOztJQThDdkMscUJBQUM7Q0FBQSxBQWpDRCxJQWlDQztTQWhDWSxjQUFjOzs7Ozs7SUFHbkIsa0NBQTBCOzs7OztJQUMxQiw4QkFBd0I7Ozs7O0lBQ3hCLDhDQUFvRDs7Ozs7SUFDcEQsc0NBQW9DOzs7OztJQUNwQyxrQ0FBaUM7Ozs7O0lBQ2pDLCtCQUE2Qjs7Ozs7SUFDN0IsNENBQWdEOzs7OztJQUNoRCw4Q0FBb0Q7Ozs7O0lBQ3BELGdDQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UmVzb2x2ZSwgQWN0aXZhdGVkUm91dGUsIFJvdXRlcn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUsIGZvcmtKb2luIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBSb3V0ZUFjY2Vzc0NvbnRyb2xDb25maWd1cmF0aW9uRWxlbWVudCB9IGZyb20gJy4uL21vZGVscy90Yy1ncm91cHMtZGF0YSc7XG5pbXBvcnQgeyBIdHRwQ2xpZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHsgVGNBY2Nlc3NDb250cm9sU2VydmljZSB9IGZyb20gJy4uL3NlcnZpY2VzL3RjLWFjY2Vzcy1jb250cm9sLnNlcnZpY2UnO1xuaW1wb3J0IHsgQWNjZXNzQ29udHJvbENvbmZpZ3VyYXRpb25SZXNvbHZlciB9IGZyb20gJy4vYWNjZXNzQ29udHJvbENvbmZpZ3VyYXRpb24ucmVzb2x2ZXInO1xuaW1wb3J0IHsgbWFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHsgVGNSb2xlc1NlcnZpY2UgfSBmcm9tICcuLi9zZXJ2aWNlcy90Yy1yb2xlcy1zZXJ2aWNlLnRzLnNlcnZpY2UnO1xuaW1wb3J0IHsgVGNTaGFyZWRTdGF0ZVNlcnZpY2UsIFRjR2VuZXJhbENvbmZpZ1NlcnZpY2UgfSBmcm9tICdAdGliY28tdGNzdGsvdGMtY29yZS1saWInO1xuaW1wb3J0IHsgTGl2ZUFwcHNTZXJ2aWNlIH0gZnJvbSAnLi4vc2VydmljZXMvbGl2ZS1hcHBzLnNlcnZpY2UnO1xuaW1wb3J0IHsgUm9sZUFjdGl2ZVJlc29sdmVyIH0gZnJvbSAnLi9yb2xlLWFjdGl2ZS5yZXNvbHZlcic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBBY2Nlc3NSZXNvbHZlciBpbXBsZW1lbnRzIFJlc29sdmU8T2JzZXJ2YWJsZTxSb3V0ZUFjY2Vzc0NvbnRyb2xDb25maWd1cmF0aW9uRWxlbWVudD4+IHtcblxuICAgIGNvbnN0cnVjdG9yKFxuICAgICAgICBwcml2YXRlIGxvY2F0aW9uOiBMb2NhdGlvbixcbiAgICAgICAgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LFxuICAgICAgICBwcml2YXRlIGFjY2Vzc0NvbnRyb2xTZXJ2aWNlOiBUY0FjY2Vzc0NvbnRyb2xTZXJ2aWNlLFxuICAgICAgICBwcml2YXRlIHJvbGVzU2VydmljZTogVGNSb2xlc1NlcnZpY2UsXG4gICAgICAgIHByaXZhdGUgbGl2ZWFwcHM6IExpdmVBcHBzU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByb3V0ZTogQWN0aXZhdGVkUm91dGUsXG4gICAgICAgIHByaXZhdGUgc2hhcmVkU3RhdGVTZXJ2aWNlOiBUY1NoYXJlZFN0YXRlU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSBnZW5lcmFsQ29uZmlnU2VydmljZTogVGNHZW5lcmFsQ29uZmlnU2VydmljZSxcbiAgICAgICAgcHJpdmF0ZSByb3V0ZXI6IFJvdXRlclxuICAgICkgeyB9XG5cbiAgICByZXNvbHZlKCk6IE9ic2VydmFibGU8Um91dGVBY2Nlc3NDb250cm9sQ29uZmlndXJhdGlvbkVsZW1lbnQ+IHtcbiBcbiAgICAgICAgY29uc3QgYWNjZXNzQ29udHJvbENvbmZpZ3VyYXRpb24kID0gbmV3IEFjY2Vzc0NvbnRyb2xDb25maWd1cmF0aW9uUmVzb2x2ZXIodGhpcy5sb2NhdGlvbiwgdGhpcy5odHRwLCB0aGlzLmFjY2Vzc0NvbnRyb2xTZXJ2aWNlKS5yZXNvbHZlKCk7XG4gICAgICAgIFxuICAgICAgICAvLyB3ZSB3aWxsIG5lZWQgdGhlIGFjdGl2ZSB1c2VyIHJvbGVcbiAgICAgICAgY29uc3QgYWN0aXZlUm9sZVJlcyA9IG5ldyBSb2xlQWN0aXZlUmVzb2x2ZXIodGhpcy5yb2xlc1NlcnZpY2UsIHRoaXMubGl2ZWFwcHMsIHRoaXMuc2hhcmVkU3RhdGVTZXJ2aWNlLCB0aGlzLmdlbmVyYWxDb25maWdTZXJ2aWNlLCB0aGlzLmh0dHAsIHRoaXMubG9jYXRpb24sIHRoaXMucm91dGVyKTtcbiAgICAgICAgY29uc3QgYWN0aXZlUm9sZSQgPSBhY3RpdmVSb2xlUmVzLnJlc29sdmUoKTtcblxuICAgICAgICAvLyBydW4gYm90aCBpbiBwYXJhbGxlbCB0aGVuIGNoZWNrIGFjY2Vzc1xuICAgICAgICBjb25zdCBhY2Nlc3NDb250cm9sJCA9IGZvcmtKb2luKGFjY2Vzc0NvbnRyb2xDb25maWd1cmF0aW9uJCwgYWN0aXZlUm9sZSQpLnBpcGUoXG4gICAgICAgICAgICBtYXAoKFthY2Nlc3NDb25maWcsIGFjdGl2ZVJvbGVdKSA9PiB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjY2Vzc0NvbmZpZy5jb25maWd1cmF0aW9uLmZpbmQoZWxlbWVudCA9PiBlbGVtZW50LnJvbGVJZCA9PT0gYWN0aXZlUm9sZS5pZCk7XG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuXG4gICAgICAgIHJldHVybiBhY2Nlc3NDb250cm9sJDtcbiAgICB9XG5cbn1cbiJdfQ==