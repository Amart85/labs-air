/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { TcCoreCommonFunctions, } from '@tibco-tcstk/tc-core-lib';
import { map } from 'rxjs/operators';
import { RouteAccessControlConfig } from '../models/tc-groups-data';
import { HttpClient, HttpHeaders } from '@angular/common/http';
import { Location } from '@angular/common';
var AccessResolver = /** @class */ (function () {
    function AccessResolver(http, location) {
        this.http = http;
        this.location = location;
        this.ACCESS_CONTROL_CONFIG_URL = 'assets/config/routeAccessControl.json';
    }
    /**
     * @return {?}
     */
    AccessResolver.prototype.resolve = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, this.ACCESS_CONTROL_CONFIG_URL), { headers: headers }).pipe(map((/**
         * @param {?} accessControl
         * @return {?}
         */
        function (accessControl) {
            /** @type {?} */
            var routeAccessControlConfig = new RouteAccessControlConfig().deserialize(accessControl);
            return routeAccessControlConfig;
        })));
    };
    AccessResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AccessResolver.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Location }
    ]; };
    return AccessResolver;
}());
export { AccessResolver };
if (false) {
    /** @type {?} */
    AccessResolver.prototype.ACCESS_CONTROL_CONFIG_URL;
    /**
     * @type {?}
     * @private
     */
    AccessResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    AccessResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWNjZXNzLnJlc29sdmVyLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9yZXNvbHZlcnMvYWNjZXNzLnJlc29sdmVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRzNDLE9BQU8sRUFDTCxxQkFBcUIsR0FDdEIsTUFBTSwwQkFBMEIsQ0FBQztBQUNsQyxPQUFPLEVBQUMsR0FBRyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkMsT0FBTyxFQUFDLHdCQUF3QixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDbEUsT0FBTyxFQUFDLFVBQVUsRUFBRSxXQUFXLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUM3RCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFFekM7SUFLRSx3QkFBb0IsSUFBZ0IsRUFBVSxRQUFrQjtRQUE1QyxTQUFJLEdBQUosSUFBSSxDQUFZO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUZoRSw4QkFBeUIsR0FBRyx1Q0FBdUMsQ0FBQztJQUdwRSxDQUFDOzs7O0lBRUQsZ0NBQU87OztJQUFQOztZQUNRLE9BQU8sR0FBRyxJQUFJLFdBQVcsRUFBRSxDQUFDLEdBQUcsQ0FBQyxlQUFlLEVBQUUsTUFBTSxDQUFDO1FBQzlELE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMscUJBQXFCLENBQUMsMkJBQTJCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMseUJBQXlCLENBQUMsRUFBRSxFQUFFLE9BQU8sU0FBQSxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQ3RJLEdBQUc7Ozs7UUFBQyxVQUFBLGFBQWE7O2dCQUNULHdCQUF3QixHQUFHLElBQUksd0JBQXdCLEVBQUUsQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDO1lBQzFGLE9BQU8sd0JBQXdCLENBQUM7UUFDbEMsQ0FBQyxFQUFDLENBQ0gsQ0FBQztJQUNKLENBQUM7O2dCQWhCRixVQUFVOzs7O2dCQUhILFVBQVU7Z0JBQ1YsUUFBUTs7SUFvQmhCLHFCQUFDO0NBQUEsQUFsQkQsSUFrQkM7U0FqQlksY0FBYzs7O0lBRXpCLG1EQUFvRTs7Ozs7SUFFeEQsOEJBQXdCOzs7OztJQUFFLGtDQUEwQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7UmVzb2x2ZX0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge1xuICBUY0NvcmVDb21tb25GdW5jdGlvbnMsXG59IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5pbXBvcnQge21hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtSb3V0ZUFjY2Vzc0NvbnRyb2xDb25maWd9IGZyb20gJy4uL21vZGVscy90Yy1ncm91cHMtZGF0YSc7XG5pbXBvcnQge0h0dHBDbGllbnQsIEh0dHBIZWFkZXJzfSBmcm9tICdAYW5ndWxhci9jb21tb24vaHR0cCc7XG5pbXBvcnQge0xvY2F0aW9ufSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQWNjZXNzUmVzb2x2ZXIgaW1wbGVtZW50cyBSZXNvbHZlPE9ic2VydmFibGU8Um91dGVBY2Nlc3NDb250cm9sQ29uZmlnPj4ge1xuXG4gIEFDQ0VTU19DT05UUk9MX0NPTkZJR19VUkwgPSAnYXNzZXRzL2NvbmZpZy9yb3V0ZUFjY2Vzc0NvbnRyb2wuanNvbic7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LCBwcml2YXRlIGxvY2F0aW9uOiBMb2NhdGlvbikge1xuICB9XG5cbiAgcmVzb2x2ZSgpOiBPYnNlcnZhYmxlPFJvdXRlQWNjZXNzQ29udHJvbENvbmZpZz4ge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSHR0cEhlYWRlcnMoKS5zZXQoJ2NhY2hlUmVzcG9uc2UnLCAndHJ1ZScpO1xuICAgIHJldHVybiB0aGlzLmh0dHAuZ2V0KFRjQ29yZUNvbW1vbkZ1bmN0aW9ucy5wcmVwYXJlVXJsRm9yU3RhdGljUmVzb3VyY2UodGhpcy5sb2NhdGlvbiwgdGhpcy5BQ0NFU1NfQ09OVFJPTF9DT05GSUdfVVJMKSwgeyBoZWFkZXJzIH0pLnBpcGUoXG4gICAgICBtYXAoYWNjZXNzQ29udHJvbCA9PiB7XG4gICAgICAgIGNvbnN0IHJvdXRlQWNjZXNzQ29udHJvbENvbmZpZyA9IG5ldyBSb3V0ZUFjY2Vzc0NvbnRyb2xDb25maWcoKS5kZXNlcmlhbGl6ZShhY2Nlc3NDb250cm9sKTtcbiAgICAgICAgcmV0dXJuIHJvdXRlQWNjZXNzQ29udHJvbENvbmZpZztcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG59XG4iXX0=