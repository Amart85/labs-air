/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { of } from 'rxjs';
import { TcCoreCommonFunctions, UiAppIdConfig } from '@tibco-tcstk/tc-core-lib';
import { flatMap, map, mergeMap, switchMap } from 'rxjs/operators';
import { TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { HttpClient } from '@angular/common/http';
import { TcLiveAppsConfigService } from '../services/tc-live-apps-config.service';
import { LiveAppsConfig } from '../models/tc-liveapps-config';
import { TcCaseCardConfigService } from '../services/tc-case-card-config.service';
import { Location } from '@angular/common';
var LiveAppsConfigResolver = /** @class */ (function () {
    function LiveAppsConfigResolver(tcSharedState, liveAppsConfigService, caseCardConfigService, http, location) {
        var _this = this;
        this.tcSharedState = tcSharedState;
        this.liveAppsConfigService = liveAppsConfigService;
        this.caseCardConfigService = caseCardConfigService;
        this.http = http;
        this.location = location;
        this.DEFAULT_CONFIG_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/liveAppsConfig.json');
        this.APP_ID_URL = TcCoreCommonFunctions.prepareUrlForStaticResource(this.location, 'assets/config/uiAppId.json');
        // note appConfigResolver will need sandboxId to create app config state record.
        // So we expect this to have been set by caller (done by tc-liveapps-lib/laConfigResolver).
        this.setSandbox = (/**
         * @param {?} sandboxId
         * @return {?}
         */
        function (sandboxId) {
            _this.sandboxId = sandboxId;
        });
        // can be used to load defaultAppConfig from a JSON config
        this.getDefaultAppConfig = (/**
         * @return {?}
         */
        function () {
            return _this.http.get(_this.DEFAULT_CONFIG_URL);
        });
        // loads uiAppId from json file in assets (appId.json)
        this.getAppId = (/**
         * @return {?}
         */
        function () {
            return _this.http.get(_this.APP_ID_URL).pipe(map((/**
             * @param {?} uiAppId
             * @return {?}
             */
            function (uiAppId) {
                /** @type {?} */
                var uiAppIdConfig = new UiAppIdConfig().deserialize(uiAppId);
                _this.uiAppId = uiAppIdConfig.uiAppId;
                return uiAppIdConfig;
            })));
        });
        this.triggerCardConfigFetch = (/**
         * @param {?} liveAppsConfig
         * @return {?}
         */
        function (liveAppsConfig) {
            // optimization: I want to avoid reading the card config when we display a large list of cards in the calling app
            // therefore we can trigger of a read of the card configs for each app in the config to ensure they are cached by
            // http interceptor
            /** @type {?} */
            var laConfig = new LiveAppsConfig().deserialize(liveAppsConfig);
            laConfig.applicationIds.forEach((/**
             * @param {?} appId
             * @return {?}
             */
            function (appId) {
                _this.caseCardConfigService.getCardConfig(_this.uiAppId, appId, true, false).subscribe();
            }));
        });
    }
    /**
     * @param {?} routeSnapshot
     * @return {?}
     */
    LiveAppsConfigResolver.prototype.resolve = /**
     * @param {?} routeSnapshot
     * @return {?}
     */
    function (routeSnapshot) {
        var _this = this;
        /** @type {?} */
        var appConfig = this.getAppId().pipe(switchMap((/**
         * @param {?} uiAppId
         * @return {?}
         */
        function (uiAppId) { return _this.liveAppsConfigService.getLiveAppsConfig(uiAppId.uiAppId, true, false)
            .pipe(mergeMap((/**
         * @param {?} liveAppsConfig
         * @return {?}
         */
        function (liveAppsConfig) {
            if (liveAppsConfig === undefined) {
                return _this.getDefaultAppConfig().pipe(flatMap((/**
                 * @param {?} config
                 * @return {?}
                 */
                function (config) {
                    _this.defaultAppConfig = new LiveAppsConfig().deserialize(config);
                    _this.defaultAppConfig.caseIconsFolderId = _this.uiAppId + '_Icons';
                    return _this.liveAppsConfigService.createLiveAppsConfig(_this.sandboxId, uiAppId.uiAppId, _this.defaultAppConfig)
                        .pipe(map((/**
                     * @param {?} result
                     * @return {?}
                     */
                    function (result) {
                        /** @type {?} */
                        var newAppConfig = _this.defaultAppConfig;
                        newAppConfig.id = result;
                        _this.liveAppsConfigService.updateLiveAppsConfig(_this.sandboxId, uiAppId.uiAppId, newAppConfig, result).subscribe((
                        // trigger a read to flush the cache since we changed it
                        // trigger a read to flush the cache since we changed it
                        /**
                         * @param {?} updatedConf
                         * @return {?}
                         */
                        function (updatedConf) {
                            _this.liveAppsConfigService.getLiveAppsConfig(_this.uiAppId, true, true).subscribe();
                        }));
                        _this.triggerCardConfigFetch(newAppConfig);
                        return newAppConfig;
                    })));
                })));
            }
            else {
                _this.triggerCardConfigFetch(liveAppsConfig);
                return of(liveAppsConfig);
            }
        }))); })));
        return appConfig;
    };
    LiveAppsConfigResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LiveAppsConfigResolver.ctorParameters = function () { return [
        { type: TcSharedStateService },
        { type: TcLiveAppsConfigService },
        { type: TcCaseCardConfigService },
        { type: HttpClient },
        { type: Location }
    ]; };
    return LiveAppsConfigResolver;
}());
export { LiveAppsConfigResolver };
if (false) {
    /** @type {?} */
    LiveAppsConfigResolver.prototype.DEFAULT_CONFIG_URL;
    /** @type {?} */
    LiveAppsConfigResolver.prototype.APP_ID_URL;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.sandboxId;
    /** @type {?} */
    LiveAppsConfigResolver.prototype.defaultAppConfig;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.uiAppId;
    /** @type {?} */
    LiveAppsConfigResolver.prototype.setSandbox;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.getDefaultAppConfig;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.getAppId;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.triggerCardConfigFetch;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.tcSharedState;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.liveAppsConfigService;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.caseCardConfigService;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LiveAppsConfigResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,