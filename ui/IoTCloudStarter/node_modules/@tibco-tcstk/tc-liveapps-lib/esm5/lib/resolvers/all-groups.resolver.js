/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { LiveAppsService } from '../services/live-apps.service';
import { map, switchMap } from 'rxjs/operators';
import { Groups } from '../models/tc-groups-data';
var AllGroupsResolver = /** @class */ (function () {
    function AllGroupsResolver(liveapps) {
        this.liveapps = liveapps;
    }
    /**
     * @return {?}
     */
    AllGroupsResolver.prototype.resolve = /**
     * @return {?}
     */
    function () {
        var _this = this;
        /** @type {?} */
        var claims$ = this.liveapps.getClaims()
            .pipe(map((/**
         * @param {?} claim
         * @return {?}
         */
        function (claim) {
            claim.sandboxes.forEach((/**
             * @param {?} sandbox
             * @return {?}
             */
            function (sandbox) {
                if (sandbox.type === 'Production') {
                    claim.primaryProductionSandbox = sandbox;
                }
            }));
            return claim;
        })));
        return claims$.pipe(switchMap((/**
         * @param {?} claiminfo
         * @return {?}
         */
        function (claiminfo) {
            return _this.liveapps.getGroups(+claiminfo.primaryProductionSandbox.id, 1000, true).pipe(map((/**
             * @param {?} groupinfo
             * @return {?}
             */
            function (groupinfo) {
                return new Groups().deserialize(groupinfo);
            })));
        })));
    };
    AllGroupsResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AllGroupsResolver.ctorParameters = function () { return [
        { type: LiveAppsService }
    ]; };
    return AllGroupsResolver;
}());
export { AllGroupsResolver };
if (false) {
    /** @type {?} */
    AllGroupsResolver.prototype.liveapps;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWxsLWdyb3Vwcy5yZXNvbHZlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0B0aWJjby10Y3N0ay90Yy1saXZlYXBwcy1saWIvIiwic291cmNlcyI6WyJsaWIvcmVzb2x2ZXJzL2FsbC1ncm91cHMucmVzb2x2ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFHM0MsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBRTlELE9BQU8sRUFBVSxHQUFHLEVBQVksU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFDakUsT0FBTyxFQUFDLE1BQU0sRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBRWhEO0lBR0UsMkJBQW1CLFFBQXlCO1FBQXpCLGFBQVEsR0FBUixRQUFRLENBQWlCO0lBQzVDLENBQUM7Ozs7SUFFRCxtQ0FBTzs7O0lBQVA7UUFBQSxpQkF3QkM7O1lBdEJPLE9BQU8sR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsRUFBRTthQUN0QyxJQUFJLENBQ0gsR0FBRzs7OztRQUFDLFVBQUEsS0FBSztZQUNQLEtBQUssQ0FBQyxTQUFTLENBQUMsT0FBTzs7OztZQUFDLFVBQUEsT0FBTztnQkFDN0IsSUFBSSxPQUFPLENBQUMsSUFBSSxLQUFLLFlBQVksRUFBRTtvQkFDakMsS0FBSyxDQUFDLHdCQUF3QixHQUFHLE9BQU8sQ0FBQztpQkFDMUM7WUFDSCxDQUFDLEVBQUMsQ0FBQztZQUNILE9BQU8sS0FBSyxDQUFDO1FBQ2YsQ0FBQyxFQUFDLENBQ0g7UUFFSCxPQUFPLE9BQU8sQ0FBQyxJQUFJLENBQ2pCLFNBQVM7Ozs7UUFBQyxVQUFBLFNBQVM7WUFDZixPQUFPLEtBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsU0FBUyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUNyRixHQUFHOzs7O1lBQUMsVUFBQSxTQUFTO2dCQUNYLE9BQU8sSUFBSSxNQUFNLEVBQUUsQ0FBQyxXQUFXLENBQUMsU0FBUyxDQUFDLENBQUM7WUFDN0MsQ0FBQyxFQUFDLENBQ0gsQ0FBQztRQUNKLENBQUMsRUFDRixDQUNGLENBQUM7SUFDSixDQUFDOztnQkE5QkYsVUFBVTs7OztnQkFMSCxlQUFlOztJQW9DdkIsd0JBQUM7Q0FBQSxBQS9CRCxJQStCQztTQTlCWSxpQkFBaUI7OztJQUVoQixxQ0FBZ0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXNvbHZlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7IE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQge0xpdmVBcHBzU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvbGl2ZS1hcHBzLnNlcnZpY2UnO1xuaW1wb3J0IHtDbGFpbX0gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliJztcbmltcG9ydCB7ZmxhdE1hcCwgbWFwLCBtZXJnZU1hcCwgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0dyb3Vwc30gZnJvbSAnLi4vbW9kZWxzL3RjLWdyb3Vwcy1kYXRhJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFsbEdyb3Vwc1Jlc29sdmVyIGltcGxlbWVudHMgUmVzb2x2ZTxPYnNlcnZhYmxlPEdyb3Vwcz4+IHtcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgbGl2ZWFwcHM6IExpdmVBcHBzU2VydmljZSkge1xuICB9XG5cbiAgcmVzb2x2ZSgpOiBPYnNlcnZhYmxlPEdyb3Vwcz4ge1xuXG4gICAgY29uc3QgY2xhaW1zJCA9IHRoaXMubGl2ZWFwcHMuZ2V0Q2xhaW1zKClcbiAgICAgIC5waXBlKFxuICAgICAgICBtYXAoY2xhaW0gPT4ge1xuICAgICAgICAgIGNsYWltLnNhbmRib3hlcy5mb3JFYWNoKHNhbmRib3ggPT4ge1xuICAgICAgICAgICAgaWYgKHNhbmRib3gudHlwZSA9PT0gJ1Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgIGNsYWltLnByaW1hcnlQcm9kdWN0aW9uU2FuZGJveCA9IHNhbmRib3g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIGNsYWltO1xuICAgICAgICB9KVxuICAgICAgKTtcblxuICAgIHJldHVybiBjbGFpbXMkLnBpcGUoXG4gICAgICBzd2l0Y2hNYXAoY2xhaW1pbmZvID0+IHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5saXZlYXBwcy5nZXRHcm91cHMoK2NsYWltaW5mby5wcmltYXJ5UHJvZHVjdGlvblNhbmRib3guaWQsIDEwMDAsIHRydWUpLnBpcGUoXG4gICAgICAgICAgICBtYXAoZ3JvdXBpbmZvID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBHcm91cHMoKS5kZXNlcmlhbGl6ZShncm91cGluZm8pO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICApXG4gICAgKTtcbiAgfVxufVxuIl19