/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { forkJoin } from 'rxjs';
import { LiveAppsService } from '../services/live-apps.service';
import { GeneralConfigResolver, TcGeneralConfigService, TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { flatMap, map } from 'rxjs/operators';
import { Roles } from '../models/tc-groups-data';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { ClaimsResolver } from './claims.resolver';
var RolesResolver = /** @class */ (function () {
    function RolesResolver(sharedStateService, generalConfigService, http, liveapps, location) {
        this.sharedStateService = sharedStateService;
        this.generalConfigService = generalConfigService;
        this.http = http;
        this.liveapps = liveapps;
        this.location = location;
        this.createRoles = (/**
         * @param {?} groups
         * @param {?} roles
         * @return {?}
         */
        function (groups, roles) {
            /** @type {?} */
            var calcRoles = [];
            roles.forEach((/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                /** @type {?} */
                var targetGroup = groups.find((/**
                 * @param {?} grp
                 * @return {?}
                 */
                function (grp) {
                    return (grp.name === role.group);
                }));
                if (targetGroup) {
                    calcRoles.push(role);
                }
            }));
            return new Roles().deserialize(new Roles().deserialize({ roles: calcRoles }));
        });
    }
    /**
     * @return {?}
     */
    RolesResolver.prototype.resolve = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // we will need the general config to understand the roles definition
        /** @type {?} */
        var generalConfigResolver = new GeneralConfigResolver(this.sharedStateService, this.generalConfigService, this.http, this.location);
        // aim is to return an object that only contains roles where the user is a member of the matching group
        /** @type {?} */
        var claimResolver$ = new ClaimsResolver(this.liveapps).resolve().pipe(flatMap((/**
         * @param {?} claiminfo
         * @return {?}
         */
        function (claiminfo) {
            /** @type {?} */
            var sandboxId = claiminfo.primaryProductionSandbox.id;
            generalConfigResolver.setSandbox(Number(sandboxId));
            /** @type {?} */
            var generalConfig$ = generalConfigResolver.resolve();
            /** @type {?} */
            var groups$ = _this.liveapps.getGroupMemberships(+claiminfo.primaryProductionSandbox.id, claiminfo.id, 1000, true);
            return forkJoin(generalConfig$, groups$).pipe(map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), configData = _b[0], groupData = _b[1];
                return _this.createRoles(groupData.groups, configData.roles);
            })));
        })));
        return claimResolver$;
    };
    RolesResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RolesResolver.ctorParameters = function () { return [
        { type: TcSharedStateService },
        { type: TcGeneralConfigService },
        { type: HttpClient },
        { type: LiveAppsService },
        { type: Location }
    ]; };
    return RolesResolver;
}());
export { RolesResolver };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.createRoles;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.sharedStateService;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.liveapps;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.location;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZXMucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL3Jlc29sdmVycy9yb2xlcy5yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFDLFFBQVEsRUFBaUIsTUFBTSxNQUFNLENBQUM7QUFDOUMsT0FBTyxFQUFDLGVBQWUsRUFBQyxNQUFNLCtCQUErQixDQUFDO0FBQzlELE9BQU8sRUFBUSxxQkFBcUIsRUFBaUIsc0JBQXNCLEVBQUUsb0JBQW9CLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUNuSSxPQUFPLEVBQUMsT0FBTyxFQUFFLEdBQUcsRUFBc0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUNqRSxPQUFPLEVBQWdCLEtBQUssRUFBQyxNQUFNLDBCQUEwQixDQUFDO0FBQzlELE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRCxPQUFPLEVBQUMsUUFBUSxFQUFDLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLG1CQUFtQixDQUFDO0FBR2pEO0lBR0UsdUJBQW9CLGtCQUF3QyxFQUFVLG9CQUE0QyxFQUFVLElBQWdCLEVBQVUsUUFBeUIsRUFBVSxRQUFrQjtRQUF2TCx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXNCO1FBQVUseUJBQW9CLEdBQXBCLG9CQUFvQixDQUF3QjtRQUFVLFNBQUksR0FBSixJQUFJLENBQVk7UUFBVSxhQUFRLEdBQVIsUUFBUSxDQUFpQjtRQUFVLGFBQVEsR0FBUixRQUFRLENBQVU7UUEyQm5NLGdCQUFXOzs7OztRQUFHLFVBQUMsTUFBZSxFQUFFLEtBQXNCOztnQkFDdEQsU0FBUyxHQUFvQixFQUFFO1lBQ3JDLEtBQUssQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxJQUFJOztvQkFDVixXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUk7Ozs7Z0JBQUMsVUFBQSxHQUFHO29CQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ25DLENBQUMsRUFDQTtnQkFDRCxJQUFJLFdBQVcsRUFBRTtvQkFDZixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUN0QjtZQUNILENBQUMsRUFBQyxDQUFBO1lBQ0YsT0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBRSxDQUFDLENBQUM7UUFDbEYsQ0FBQyxFQUFBO0lBdENELENBQUM7Ozs7SUFFRCwrQkFBTzs7O0lBQVA7UUFBQSxpQkFzQkM7OztZQW5CTyxxQkFBcUIsR0FBRyxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDOzs7WUFJL0gsY0FBYyxHQUFHLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQ3JFLE9BQU87Ozs7UUFBQyxVQUFBLFNBQVM7O2dCQUNQLFNBQVMsR0FBRyxTQUFTLENBQUMsd0JBQXdCLENBQUMsRUFBRTtZQUN2RCxxQkFBcUIsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7O2dCQUM5QyxjQUFjLEdBQUcscUJBQXFCLENBQUMsT0FBTyxFQUFFOztnQkFDaEQsT0FBTyxHQUFHLEtBQUksQ0FBQyxRQUFRLENBQUMsbUJBQW1CLENBQUMsQ0FBQyxTQUFTLENBQUMsd0JBQXdCLENBQUMsRUFBRSxFQUFFLFNBQVMsQ0FBQyxFQUFFLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQztZQUNuSCxPQUFPLFFBQVEsQ0FBQyxjQUFjLEVBQUUsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUMzQyxHQUFHOzs7O1lBQUMsVUFBQyxFQUF1QjtvQkFBdkIsMEJBQXVCLEVBQXRCLGtCQUFVLEVBQUUsaUJBQVM7Z0JBQ3pCLE9BQU8sS0FBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsTUFBTSxFQUFFLFVBQVUsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM5RCxDQUFDLEVBQUMsQ0FBQyxDQUFDO1FBQ1IsQ0FBQyxFQUNGLENBQ0Y7UUFFRCxPQUFPLGNBQWMsQ0FBQztJQUN4QixDQUFDOztnQkE1QkYsVUFBVTs7OztnQkFUa0Usb0JBQW9CO2dCQUE1QyxzQkFBc0I7Z0JBR25FLFVBQVU7Z0JBSlYsZUFBZTtnQkFNZixRQUFROztJQStDaEIsb0JBQUM7Q0FBQSxBQTNDRCxJQTJDQztTQTFDWSxhQUFhOzs7Ozs7SUE2QnhCLG9DQVlDOzs7OztJQXZDVywyQ0FBZ0Q7Ozs7O0lBQUUsNkNBQW9EOzs7OztJQUFFLDZCQUF3Qjs7Ozs7SUFBRSxpQ0FBaUM7Ozs7O0lBQUUsaUNBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtSZXNvbHZlfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuaW1wb3J0IHtmb3JrSm9pbiwgT2JzZXJ2YWJsZSwgb2Z9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHtMaXZlQXBwc1NlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL2xpdmUtYXBwcy5zZXJ2aWNlJztcbmltcG9ydCB7Q2xhaW0sIEdlbmVyYWxDb25maWdSZXNvbHZlciwgUm9sZUF0dHJpYnV0ZSwgVGNHZW5lcmFsQ29uZmlnU2VydmljZSwgVGNTaGFyZWRTdGF0ZVNlcnZpY2V9IGZyb20gJ0B0aWJjby10Y3N0ay90Yy1jb3JlLWxpYic7XG5pbXBvcnQge2ZsYXRNYXAsIG1hcCwgbWVyZ2VNYXAsIHN3aXRjaE1hcH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xuaW1wb3J0IHtHcm91cCwgR3JvdXBzLCBSb2xlc30gZnJvbSAnLi4vbW9kZWxzL3RjLWdyb3Vwcy1kYXRhJztcbmltcG9ydCB7SHR0cENsaWVudH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uL2h0dHAnO1xuaW1wb3J0IHtUY0Nhc2VDYXJkQ29uZmlnU2VydmljZX0gZnJvbSAnLi4vc2VydmljZXMvdGMtY2FzZS1jYXJkLWNvbmZpZy5zZXJ2aWNlJztcbmltcG9ydCB7TG9jYXRpb259IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge0NsYWltc1Jlc29sdmVyfSBmcm9tICcuL2NsYWltcy5yZXNvbHZlcic7XG5pbXBvcnQge2dyb3VwfSBmcm9tICdAYW5ndWxhci9hbmltYXRpb25zJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFJvbGVzUmVzb2x2ZXIgaW1wbGVtZW50cyBSZXNvbHZlPE9ic2VydmFibGU8Um9sZXM+PiB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBzaGFyZWRTdGF0ZVNlcnZpY2U6IFRjU2hhcmVkU3RhdGVTZXJ2aWNlLCBwcml2YXRlIGdlbmVyYWxDb25maWdTZXJ2aWNlOiBUY0dlbmVyYWxDb25maWdTZXJ2aWNlLCBwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQsIHByaXZhdGUgbGl2ZWFwcHM6IExpdmVBcHBzU2VydmljZSwgcHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb24pIHtcbiAgfVxuXG4gIHJlc29sdmUoKTogT2JzZXJ2YWJsZTxSb2xlcz4ge1xuXG4gICAgLy8gd2Ugd2lsbCBuZWVkIHRoZSBnZW5lcmFsIGNvbmZpZyB0byB1bmRlcnN0YW5kIHRoZSByb2xlcyBkZWZpbml0aW9uXG4gICAgY29uc3QgZ2VuZXJhbENvbmZpZ1Jlc29sdmVyID0gbmV3IEdlbmVyYWxDb25maWdSZXNvbHZlcih0aGlzLnNoYXJlZFN0YXRlU2VydmljZSwgdGhpcy5nZW5lcmFsQ29uZmlnU2VydmljZSwgdGhpcy5odHRwLCB0aGlzLmxvY2F0aW9uKTtcblxuICAgIC8vIGFpbSBpcyB0byByZXR1cm4gYW4gb2JqZWN0IHRoYXQgb25seSBjb250YWlucyByb2xlcyB3aGVyZSB0aGUgdXNlciBpcyBhIG1lbWJlciBvZiB0aGUgbWF0Y2hpbmcgZ3JvdXBcblxuICAgIGNvbnN0IGNsYWltUmVzb2x2ZXIkID0gbmV3IENsYWltc1Jlc29sdmVyKHRoaXMubGl2ZWFwcHMpLnJlc29sdmUoKS5waXBlKFxuICAgICAgZmxhdE1hcChjbGFpbWluZm8gPT4ge1xuICAgICAgICAgIGNvbnN0IHNhbmRib3hJZCA9IGNsYWltaW5mby5wcmltYXJ5UHJvZHVjdGlvblNhbmRib3guaWQ7XG4gICAgICAgICAgZ2VuZXJhbENvbmZpZ1Jlc29sdmVyLnNldFNhbmRib3goTnVtYmVyKHNhbmRib3hJZCkpO1xuICAgICAgICAgIGNvbnN0IGdlbmVyYWxDb25maWckID0gZ2VuZXJhbENvbmZpZ1Jlc29sdmVyLnJlc29sdmUoKTtcbiAgICAgICAgICBjb25zdCBncm91cHMkID0gdGhpcy5saXZlYXBwcy5nZXRHcm91cE1lbWJlcnNoaXBzKCtjbGFpbWluZm8ucHJpbWFyeVByb2R1Y3Rpb25TYW5kYm94LmlkLCBjbGFpbWluZm8uaWQsIDEwMDAsIHRydWUpO1xuICAgICAgICAgIHJldHVybiBmb3JrSm9pbihnZW5lcmFsQ29uZmlnJCwgZ3JvdXBzJCkucGlwZShcbiAgICAgICAgICAgIG1hcCgoW2NvbmZpZ0RhdGEsIGdyb3VwRGF0YV0pID0+IHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3JlYXRlUm9sZXMoZ3JvdXBEYXRhLmdyb3VwcywgY29uZmlnRGF0YS5yb2xlcyk7XG4gICAgICAgICAgICB9KSk7XG4gICAgICAgIH1cbiAgICAgIClcbiAgICApO1xuXG4gICAgcmV0dXJuIGNsYWltUmVzb2x2ZXIkO1xuICB9XG5cbiAgcHJpdmF0ZSBjcmVhdGVSb2xlcyA9IChncm91cHM6IEdyb3VwW10sIHJvbGVzOiBSb2xlQXR0cmlidXRlW10pOiBSb2xlcyA9PiB7XG4gICAgY29uc3QgY2FsY1JvbGVzOiBSb2xlQXR0cmlidXRlW10gPSBbXTtcbiAgICByb2xlcy5mb3JFYWNoKHJvbGUgPT4ge1xuICAgICAgY29uc3QgdGFyZ2V0R3JvdXAgPSBncm91cHMuZmluZChncnAgPT4ge1xuICAgICAgICByZXR1cm4gKGdycC5uYW1lID09PSByb2xlLmdyb3VwKTtcbiAgICAgIH1cbiAgICAgIClcbiAgICAgIGlmICh0YXJnZXRHcm91cCkge1xuICAgICAgICBjYWxjUm9sZXMucHVzaChyb2xlKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIHJldHVybiBuZXcgUm9sZXMoKS5kZXNlcmlhbGl6ZShuZXcgUm9sZXMoKS5kZXNlcmlhbGl6ZSggeyByb2xlczogY2FsY1JvbGVzIH0gKSk7XG4gIH1cbn1cbiJdfQ==