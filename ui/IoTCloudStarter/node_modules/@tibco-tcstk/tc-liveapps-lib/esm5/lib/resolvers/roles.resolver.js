/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
import { Router } from '@angular/router';
import { forkJoin } from 'rxjs';
import { LiveAppsService } from '../services/live-apps.service';
import { GeneralConfigResolver, TcGeneralConfigService, TcSharedStateService } from '@tibco-tcstk/tc-core-lib';
import { flatMap, map } from 'rxjs/operators';
import { Roles } from '../models/tc-groups-data';
import { HttpClient } from '@angular/common/http';
import { Location } from '@angular/common';
import { ClaimsResolver } from './claims.resolver';
var RolesResolver = /** @class */ (function () {
    function RolesResolver(sharedStateService, generalConfigService, http, liveapps, location, router) {
        this.sharedStateService = sharedStateService;
        this.generalConfigService = generalConfigService;
        this.http = http;
        this.liveapps = liveapps;
        this.location = location;
        this.router = router;
        this.createRoles = (/**
         * @param {?} groups
         * @param {?} roles
         * @return {?}
         */
        function (groups, roles) {
            /** @type {?} */
            var calcRoles = [];
            roles.forEach((/**
             * @param {?} role
             * @return {?}
             */
            function (role) {
                /** @type {?} */
                var targetGroup = groups.find((/**
                 * @param {?} grp
                 * @return {?}
                 */
                function (grp) {
                    return (grp.name === role.group);
                }));
                if (targetGroup) {
                    calcRoles.push(role);
                }
            }));
            return new Roles().deserialize(new Roles().deserialize({ roles: calcRoles }));
        });
    }
    /**
     * @return {?}
     */
    RolesResolver.prototype.resolve = /**
     * @return {?}
     */
    function () {
        var _this = this;
        // we will need the general config to understand the roles definition
        /** @type {?} */
        var generalConfigResolver = new GeneralConfigResolver(this.sharedStateService, this.generalConfigService, this.http, this.location, this.router);
        // aim is to return an object that only contains roles where the user is a member of the matching group
        /** @type {?} */
        var claimResolver$ = new ClaimsResolver(this.liveapps).resolve().pipe(flatMap((/**
         * @param {?} claiminfo
         * @return {?}
         */
        function (claiminfo) {
            /** @type {?} */
            var sandboxId = claiminfo.primaryProductionSandbox.id;
            generalConfigResolver.setSandbox(Number(sandboxId));
            /** @type {?} */
            var generalConfig$ = generalConfigResolver.resolve();
            /** @type {?} */
            var groups$ = _this.liveapps.getGroupMemberships(+claiminfo.primaryProductionSandbox.id, claiminfo.id, 1000, true);
            return forkJoin(generalConfig$, groups$).pipe(map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), configData = _b[0], groupData = _b[1];
                return _this.createRoles(groupData.groups, configData.roles);
            })));
        })));
        return claimResolver$;
    };
    RolesResolver.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    RolesResolver.ctorParameters = function () { return [
        { type: TcSharedStateService },
        { type: TcGeneralConfigService },
        { type: HttpClient },
        { type: LiveAppsService },
        { type: Location },
        { type: Router }
    ]; };
    return RolesResolver;
}());
export { RolesResolver };
if (false) {
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.createRoles;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.sharedStateService;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.generalConfigService;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.http;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.liveapps;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.location;
    /**
     * @type {?}
     * @private
     */
    RolesResolver.prototype.router;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm9sZXMucmVzb2x2ZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL3Jlc29sdmVycy9yb2xlcy5yZXNvbHZlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFVLE1BQU0sRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ2hELE9BQU8sRUFBQyxRQUFRLEVBQWlCLE1BQU0sTUFBTSxDQUFDO0FBQzlDLE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSwrQkFBK0IsQ0FBQztBQUM5RCxPQUFPLEVBQVEscUJBQXFCLEVBQWlCLHNCQUFzQixFQUFFLG9CQUFvQixFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDbkksT0FBTyxFQUFDLE9BQU8sRUFBRSxHQUFHLEVBQXNCLE1BQU0sZ0JBQWdCLENBQUM7QUFDakUsT0FBTyxFQUFnQixLQUFLLEVBQUMsTUFBTSwwQkFBMEIsQ0FBQztBQUM5RCxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFFaEQsT0FBTyxFQUFDLFFBQVEsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBQ3pDLE9BQU8sRUFBQyxjQUFjLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUdqRDtJQUdFLHVCQUFvQixrQkFBd0MsRUFBVSxvQkFBNEMsRUFBVSxJQUFnQixFQUFVLFFBQXlCLEVBQVUsUUFBa0IsRUFBVSxNQUFjO1FBQS9NLHVCQUFrQixHQUFsQixrQkFBa0IsQ0FBc0I7UUFBVSx5QkFBb0IsR0FBcEIsb0JBQW9CLENBQXdCO1FBQVUsU0FBSSxHQUFKLElBQUksQ0FBWTtRQUFVLGFBQVEsR0FBUixRQUFRLENBQWlCO1FBQVUsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQUFVLFdBQU0sR0FBTixNQUFNLENBQVE7UUEyQjNOLGdCQUFXOzs7OztRQUFHLFVBQUMsTUFBZSxFQUFFLEtBQXNCOztnQkFDdEQsU0FBUyxHQUFvQixFQUFFO1lBQ3JDLEtBQUssQ0FBQyxPQUFPOzs7O1lBQUMsVUFBQSxJQUFJOztvQkFDVixXQUFXLEdBQUcsTUFBTSxDQUFDLElBQUk7Ozs7Z0JBQUMsVUFBQSxHQUFHO29CQUNqQyxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksS0FBSyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7Z0JBQ25DLENBQUMsRUFDQTtnQkFDRCxJQUFJLFdBQVcsRUFBRTtvQkFDZixTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUN0QjtZQUNILENBQUMsRUFBQyxDQUFBO1lBQ0YsT0FBTyxJQUFJLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEtBQUssRUFBRSxDQUFDLFdBQVcsQ0FBRSxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsQ0FBRSxDQUFDLENBQUM7UUFDbEYsQ0FBQyxFQUFBO0lBdENELENBQUM7Ozs7SUFFRCwrQkFBTzs7O0lBQVA7UUFBQSxpQkFzQkM7OztZQW5CTyxxQkFBcUIsR0FBRyxJQUFJLHFCQUFxQixDQUFDLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxJQUFJLENBQUMsb0JBQW9CLEVBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUM7OztZQUk1SSxjQUFjLEdBQUcsSUFBSSxjQUFjLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FDckUsT0FBTzs7OztRQUFDLFVBQUEsU0FBUzs7Z0JBQ1AsU0FBUyxHQUFHLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFO1lBQ3ZELHFCQUFxQixDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQzs7Z0JBQzlDLGNBQWMsR0FBRyxxQkFBcUIsQ0FBQyxPQUFPLEVBQUU7O2dCQUNoRCxPQUFPLEdBQUcsS0FBSSxDQUFDLFFBQVEsQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLEVBQUUsU0FBUyxDQUFDLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDO1lBQ25ILE9BQU8sUUFBUSxDQUFDLGNBQWMsRUFBRSxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQzNDLEdBQUc7Ozs7WUFBQyxVQUFDLEVBQXVCO29CQUF2QiwwQkFBdUIsRUFBdEIsa0JBQVUsRUFBRSxpQkFBUztnQkFDekIsT0FBTyxLQUFJLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxNQUFNLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzlELENBQUMsRUFBQyxDQUFDLENBQUM7UUFDUixDQUFDLEVBQ0YsQ0FDRjtRQUVELE9BQU8sY0FBYyxDQUFDO0lBQ3hCLENBQUM7O2dCQTVCRixVQUFVOzs7O2dCQVRrRSxvQkFBb0I7Z0JBQTVDLHNCQUFzQjtnQkFHbkUsVUFBVTtnQkFKVixlQUFlO2dCQU1mLFFBQVE7Z0JBUkMsTUFBTTs7SUF1RHZCLG9CQUFDO0NBQUEsQUEzQ0QsSUEyQ0M7U0ExQ1ksYUFBYTs7Ozs7O0lBNkJ4QixvQ0FZQzs7Ozs7SUF2Q1csMkNBQWdEOzs7OztJQUFFLDZDQUFvRDs7Ozs7SUFBRSw2QkFBd0I7Ozs7O0lBQUUsaUNBQWlDOzs7OztJQUFFLGlDQUEwQjs7Ozs7SUFBRSwrQkFBc0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge1Jlc29sdmUsIFJvdXRlcn0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcbmltcG9ydCB7Zm9ya0pvaW4sIE9ic2VydmFibGUsIG9mfSBmcm9tICdyeGpzJztcbmltcG9ydCB7TGl2ZUFwcHNTZXJ2aWNlfSBmcm9tICcuLi9zZXJ2aWNlcy9saXZlLWFwcHMuc2VydmljZSc7XG5pbXBvcnQge0NsYWltLCBHZW5lcmFsQ29uZmlnUmVzb2x2ZXIsIFJvbGVBdHRyaWJ1dGUsIFRjR2VuZXJhbENvbmZpZ1NlcnZpY2UsIFRjU2hhcmVkU3RhdGVTZXJ2aWNlfSBmcm9tICdAdGliY28tdGNzdGsvdGMtY29yZS1saWInO1xuaW1wb3J0IHtmbGF0TWFwLCBtYXAsIG1lcmdlTWFwLCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcbmltcG9ydCB7R3JvdXAsIEdyb3VwcywgUm9sZXN9IGZyb20gJy4uL21vZGVscy90Yy1ncm91cHMtZGF0YSc7XG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7VGNDYXNlQ2FyZENvbmZpZ1NlcnZpY2V9IGZyb20gJy4uL3NlcnZpY2VzL3RjLWNhc2UtY2FyZC1jb25maWcuc2VydmljZSc7XG5pbXBvcnQge0xvY2F0aW9ufSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtDbGFpbXNSZXNvbHZlcn0gZnJvbSAnLi9jbGFpbXMucmVzb2x2ZXInO1xuaW1wb3J0IHtncm91cH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBSb2xlc1Jlc29sdmVyIGltcGxlbWVudHMgUmVzb2x2ZTxPYnNlcnZhYmxlPFJvbGVzPj4ge1xuXG4gIGNvbnN0cnVjdG9yKHByaXZhdGUgc2hhcmVkU3RhdGVTZXJ2aWNlOiBUY1NoYXJlZFN0YXRlU2VydmljZSwgcHJpdmF0ZSBnZW5lcmFsQ29uZmlnU2VydmljZTogVGNHZW5lcmFsQ29uZmlnU2VydmljZSwgcHJpdmF0ZSBodHRwOiBIdHRwQ2xpZW50LCBwcml2YXRlIGxpdmVhcHBzOiBMaXZlQXBwc1NlcnZpY2UsIHByaXZhdGUgbG9jYXRpb246IExvY2F0aW9uLCBwcml2YXRlIHJvdXRlcjogUm91dGVyKSB7XG4gIH1cblxuICByZXNvbHZlKCk6IE9ic2VydmFibGU8Um9sZXM+IHtcblxuICAgIC8vIHdlIHdpbGwgbmVlZCB0aGUgZ2VuZXJhbCBjb25maWcgdG8gdW5kZXJzdGFuZCB0aGUgcm9sZXMgZGVmaW5pdGlvblxuICAgIGNvbnN0IGdlbmVyYWxDb25maWdSZXNvbHZlciA9IG5ldyBHZW5lcmFsQ29uZmlnUmVzb2x2ZXIodGhpcy5zaGFyZWRTdGF0ZVNlcnZpY2UsIHRoaXMuZ2VuZXJhbENvbmZpZ1NlcnZpY2UsIHRoaXMuaHR0cCwgdGhpcy5sb2NhdGlvbiwgdGhpcy5yb3V0ZXIpO1xuXG4gICAgLy8gYWltIGlzIHRvIHJldHVybiBhbiBvYmplY3QgdGhhdCBvbmx5IGNvbnRhaW5zIHJvbGVzIHdoZXJlIHRoZSB1c2VyIGlzIGEgbWVtYmVyIG9mIHRoZSBtYXRjaGluZyBncm91cFxuXG4gICAgY29uc3QgY2xhaW1SZXNvbHZlciQgPSBuZXcgQ2xhaW1zUmVzb2x2ZXIodGhpcy5saXZlYXBwcykucmVzb2x2ZSgpLnBpcGUoXG4gICAgICBmbGF0TWFwKGNsYWltaW5mbyA9PiB7XG4gICAgICAgICAgY29uc3Qgc2FuZGJveElkID0gY2xhaW1pbmZvLnByaW1hcnlQcm9kdWN0aW9uU2FuZGJveC5pZDtcbiAgICAgICAgICBnZW5lcmFsQ29uZmlnUmVzb2x2ZXIuc2V0U2FuZGJveChOdW1iZXIoc2FuZGJveElkKSk7XG4gICAgICAgICAgY29uc3QgZ2VuZXJhbENvbmZpZyQgPSBnZW5lcmFsQ29uZmlnUmVzb2x2ZXIucmVzb2x2ZSgpO1xuICAgICAgICAgIGNvbnN0IGdyb3VwcyQgPSB0aGlzLmxpdmVhcHBzLmdldEdyb3VwTWVtYmVyc2hpcHMoK2NsYWltaW5mby5wcmltYXJ5UHJvZHVjdGlvblNhbmRib3guaWQsIGNsYWltaW5mby5pZCwgMTAwMCwgdHJ1ZSk7XG4gICAgICAgICAgcmV0dXJuIGZvcmtKb2luKGdlbmVyYWxDb25maWckLCBncm91cHMkKS5waXBlKFxuICAgICAgICAgICAgbWFwKChbY29uZmlnRGF0YSwgZ3JvdXBEYXRhXSkgPT4ge1xuICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jcmVhdGVSb2xlcyhncm91cERhdGEuZ3JvdXBzLCBjb25maWdEYXRhLnJvbGVzKTtcbiAgICAgICAgICAgIH0pKTtcbiAgICAgICAgfVxuICAgICAgKVxuICAgICk7XG5cbiAgICByZXR1cm4gY2xhaW1SZXNvbHZlciQ7XG4gIH1cblxuICBwcml2YXRlIGNyZWF0ZVJvbGVzID0gKGdyb3VwczogR3JvdXBbXSwgcm9sZXM6IFJvbGVBdHRyaWJ1dGVbXSk6IFJvbGVzID0+IHtcbiAgICBjb25zdCBjYWxjUm9sZXM6IFJvbGVBdHRyaWJ1dGVbXSA9IFtdO1xuICAgIHJvbGVzLmZvckVhY2gocm9sZSA9PiB7XG4gICAgICBjb25zdCB0YXJnZXRHcm91cCA9IGdyb3Vwcy5maW5kKGdycCA9PiB7XG4gICAgICAgIHJldHVybiAoZ3JwLm5hbWUgPT09IHJvbGUuZ3JvdXApO1xuICAgICAgfVxuICAgICAgKVxuICAgICAgaWYgKHRhcmdldEdyb3VwKSB7XG4gICAgICAgIGNhbGNSb2xlcy5wdXNoKHJvbGUpO1xuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIG5ldyBSb2xlcygpLmRlc2VyaWFsaXplKG5ldyBSb2xlcygpLmRlc2VyaWFsaXplKCB7IHJvbGVzOiBjYWxjUm9sZXMgfSApKTtcbiAgfVxufVxuIl19