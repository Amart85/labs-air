/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { map, tap } from 'rxjs/operators';
import { HttpClient } from '@angular/common/http';
import { AuditEventList } from '../models/tc-case-audit';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var TcCaseAuditService = /** @class */ (function () {
    function TcCaseAuditService(http) {
        this.http = http;
    }
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} startAt
     * @param {?} top
     * @return {?}
     */
    TcCaseAuditService.prototype.getCaseAudit = /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} startAt
     * @param {?} top
     * @return {?}
     */
    function (caseRef, sandboxId, startAt, top) {
        /** @type {?} */
        var select = 's';
        /** @type {?} */
        var url = '/event/v1/auditEvents?$sandbox=' + sandboxId
            + '&$filter=type eq \'case\''
            + ' and id eq \'' + caseRef + '\'';
        url = (startAt !== undefined) ? (url + '&$startat=' + startAt) : url;
        url = top ? (url + '&$top=' + top) : url;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} caseaudit
         * @return {?}
         */
        function (caseaudit) { return new AuditEventList().deserialize(caseaudit); })));
    };
    TcCaseAuditService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TcCaseAuditService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ TcCaseAuditService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcCaseAuditService_Factory() { return new TcCaseAuditService(i0.ɵɵinject(i1.HttpClient)); }, token: TcCaseAuditService, providedIn: "root" });
    return TcCaseAuditService;
}());
export { TcCaseAuditService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcCaseAuditService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtY2FzZS1hdWRpdC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90Yy1jYXNlLWF1ZGl0LnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUMsTUFBTSxnQkFBZ0IsQ0FBQztBQUN4QyxPQUFPLEVBQUMsVUFBVSxFQUFDLE1BQU0sc0JBQXNCLENBQUM7QUFDaEQsT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLHlCQUF5QixDQUFDOzs7QUFFdkQ7SUFLRSw0QkFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFJLENBQUM7Ozs7Ozs7O0lBRWxDLHlDQUFZOzs7Ozs7O0lBQW5CLFVBQW9CLE9BQWUsRUFBRSxTQUFpQixFQUFFLE9BQWUsRUFBRSxHQUFXOztZQUM1RSxNQUFNLEdBQUcsR0FBRzs7WUFDZCxHQUFHLEdBQUcsaUNBQWlDLEdBQUcsU0FBUztjQUNuRCwyQkFBMkI7Y0FDM0IsZUFBZSxHQUFHLE9BQU8sR0FBRyxJQUFJO1FBQ3BDLEdBQUcsR0FBRyxDQUFDLE9BQU8sS0FBSyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsWUFBWSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFDckUsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEdBQUcsUUFBUSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUM7UUFFekMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7YUFDdEIsSUFBSSxDQUNILEdBQUc7Ozs7UUFBRSxVQUFBLEdBQUcsSUFBSSxPQUFBLGNBQWMsQ0FBQyxPQUFPLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxFQUE3RCxDQUE2RCxFQUFDLEVBQzFFLEdBQUc7Ozs7UUFBQyxVQUFBLFNBQVMsSUFBSSxPQUFBLElBQUksY0FBYyxFQUFFLENBQUMsV0FBVyxDQUFDLFNBQVMsQ0FBQyxFQUEzQyxDQUEyQyxFQUFDLENBQUMsQ0FBQztJQUNyRSxDQUFDOztnQkFuQkYsVUFBVSxTQUFDO29CQUNWLFVBQVUsRUFBRSxNQUFNO2lCQUNuQjs7OztnQkFMTyxVQUFVOzs7NkJBSGxCO0NBMEJDLEFBcEJELElBb0JDO1NBakJZLGtCQUFrQjs7Ozs7O0lBRWpCLGtDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge21hcCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7QXVkaXRFdmVudExpc3R9IGZyb20gJy4uL21vZGVscy90Yy1jYXNlLWF1ZGl0JztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVGNDYXNlQXVkaXRTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxuXG4gIHB1YmxpYyBnZXRDYXNlQXVkaXQoY2FzZVJlZjogc3RyaW5nLCBzYW5kYm94SWQ6IG51bWJlciwgc3RhcnRBdDogc3RyaW5nLCB0b3A6IG51bWJlcik6IE9ic2VydmFibGU8QXVkaXRFdmVudExpc3Q+IHtcbiAgICBjb25zdCBzZWxlY3QgPSAncyc7XG4gICAgbGV0IHVybCA9ICcvZXZlbnQvdjEvYXVkaXRFdmVudHM/JHNhbmRib3g9JyArIHNhbmRib3hJZFxuICAgICAgKyAnJiRmaWx0ZXI9dHlwZSBlcSBcXCdjYXNlXFwnJ1xuICAgICAgKyAnIGFuZCBpZCBlcSBcXCcnICsgY2FzZVJlZiArICdcXCcnO1xuICAgIHVybCA9IChzdGFydEF0ICE9PSB1bmRlZmluZWQpID8gKHVybCArICcmJHN0YXJ0YXQ9JyArIHN0YXJ0QXQpIDogdXJsO1xuICAgIHVybCA9IHRvcCA/ICh1cmwgKyAnJiR0b3A9JyArIHRvcCkgOiB1cmw7XG5cbiAgICByZXR1cm4gdGhpcy5odHRwLmdldCh1cmwpXG4gICAgICAucGlwZShcbiAgICAgICAgdGFwKCB2YWwgPT4gc2Vzc2lvblN0b3JhZ2Uuc2V0SXRlbSgndGNzVGltZXN0YW1wJywgRGF0ZS5ub3coKS50b1N0cmluZygpKSksXG4gICAgICAgIG1hcChjYXNlYXVkaXQgPT4gbmV3IEF1ZGl0RXZlbnRMaXN0KCkuZGVzZXJpYWxpemUoY2FzZWF1ZGl0KSkpO1xuICB9XG59XG4iXX0=