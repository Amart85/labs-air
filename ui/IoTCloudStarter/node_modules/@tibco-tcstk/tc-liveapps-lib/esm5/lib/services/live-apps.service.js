/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpHeaders } from '@angular/common/http';
import { HttpClient } from '@angular/common/http';
import { CaseInfo, CaseInfoList, CaseTypesList, CaseTypeStatesList, CaseList, UserInfo, NotesList, Note, ThreadList, NoteThread, NotificationList, CaseSearchResults, CaseTypeStatesListList } from '../models/liveappsdata';
import { SharedStateContent, TcSharedStateService, TcCoreCommonFunctions, Claim, SandboxList } from '@tibco-tcstk/tc-core-lib';
import { Groups } from '../models/tc-groups-data';
import { debounceTime, distinctUntilChanged, map, shareReplay, switchMap, tap } from 'rxjs/operators';
import { Location } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/common";
import * as i3 from "@tibco-tcstk/tc-core-lib";
var LiveAppsService = /** @class */ (function () {
    function LiveAppsService(http, location, sharedStateService) {
        this.http = http;
        this.location = location;
        this.sharedStateService = sharedStateService;
        // these are 'per session' caches. They won't time out unless explicitly cleared or browser is refreshed
        this.claimsCacheMap = new Map();
        this.userInfoCacheMap = new Map();
        this.caseTypesCacheMap = new Map();
        this.iconSVGTextCacheMap = new Map();
    }
    /**
     * @return {?}
     */
    LiveAppsService.prototype.getSandboxes = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = '/organisation/v1/sandboxes';
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} sandboxList
         * @return {?}
         */
        function (sandboxList) { return new SandboxList().deserialize(sandboxList); })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} appIds
     * @param {?} top
     * @param {?} useCache
     * @return {?}
     */
    LiveAppsService.prototype.getApplications = /**
     * @param {?} sandboxId
     * @param {?} appIds
     * @param {?} top
     * @param {?} useCache
     * @return {?}
     */
    function (sandboxId, appIds, top, useCache) {
        /** @type {?} */
        var select = 'b';
        /** @type {?} */
        var url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
        if (appIds && appIds.length > 0) {
            url = url + '&$filter=applicationId in(' + appIds.toString() + ') and isCase eq TRUE';
        }
        // note: since this is cached it will require a reload to see new apps
        /** @type {?} */
        var headers;
        if (useCache) {
            headers = new HttpHeaders().set('cacheResponse', 'true');
        }
        else {
            headers = new HttpHeaders();
        }
        return this.http.get(url, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} casetypes
         * @return {?}
         */
        function (casetypes) {
            if (appIds && appIds.length > 0) {
                // This is to workaround a bug where non case type types are returned when > 1 appId
                /** @type {?} */
                var tmpCaseTypes = new CaseTypesList().deserialize(casetypes);
                /** @type {?} */
                var filteredCaseTypes_1 = new CaseTypesList().deserialize({ casetypes: [] });
                tmpCaseTypes.casetypes.forEach((/**
                 * @param {?} ctype
                 * @return {?}
                 */
                function (ctype) {
                    if (ctype.id === '1') {
                        filteredCaseTypes_1.casetypes.push(ctype);
                    }
                }));
                return filteredCaseTypes_1;
            }
            else {
                return new CaseTypesList().deserialize(casetypes);
            }
        })));
    };
    /**
     * @return {?}
     */
    LiveAppsService.prototype.getClaims = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var url = '/organisation/v1/claims';
        /** @type {?} */
        var headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(url, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} claim
         * @return {?}
         */
        function (claim) { return new Claim().deserialize(claim); })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} skip
     * @param {?} top
     * @return {?}
     */
    LiveAppsService.prototype.getCases = /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} skip
     * @param {?} top
     * @return {?}
     */
    function (sandboxId, appId, typeId, skip, top) {
        /** @type {?} */
        var url = '/case/v1/cases' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '
            + appId + ' and typeId eq ' + typeId + '&$skip=' + skip + '&$top=' + top;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} caseinfos
         * @return {?}
         */
        function (caseinfos) { return new CaseInfoList().deserialize(caseinfos); })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @return {?}
     */
    LiveAppsService.prototype.getCasesCount = /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @return {?}
     */
    function (sandboxId, appId, typeId) {
        /** @type {?} */
        var url = '/case/v1/cases' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '
            + appId + ' and typeId eq ' + typeId + '&$count=true';
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} casecount
         * @return {?}
         */
        function (casecount) { return casecount.toString(); })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} caseRef
     * @return {?}
     */
    LiveAppsService.prototype.getCaseByRef = /**
     * @param {?} sandboxId
     * @param {?} caseRef
     * @return {?}
     */
    function (sandboxId, caseRef) {
        /** @type {?} */
        var url = '/case/v1/cases/' + caseRef
            + '?$sandbox=' + sandboxId;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} caseinfo
         * @return {?}
         */
        function (caseinfo) { return new CaseInfo().deserialize(caseinfo); })));
    };
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @return {?}
     */
    LiveAppsService.prototype.getCase = /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @return {?}
     */
    function (caseRef, sandboxId, appId, typeId) {
        /** @type {?} */
        var url = '/case/v1/cases/' + caseRef + '/' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '
            + appId + ' and typeId eq ' + typeId + '&$select=uc, m';
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} caseinfo
         * @return {?}
         */
        function (caseinfo) { return new CaseInfo().deserialize(caseinfo); })));
    };
    /**
     * @param {?} terms
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} skip
     * @param {?} top
     * @param {?} stateId
     * @return {?}
     */
    LiveAppsService.prototype.caseSearch = /**
     * @param {?} terms
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} skip
     * @param {?} top
     * @param {?} stateId
     * @return {?}
     */
    function (terms, sandboxId, appId, typeId, skip, top, stateId) {
        var _this = this;
        return terms
            .pipe(debounceTime(500), distinctUntilChanged(), switchMap((/**
         * @param {?} term
         * @return {?}
         */
        function (term) { return _this.caseSearchEntries(term, sandboxId, appId, typeId, false, skip, top, stateId); })));
    };
    /**
     * @param {?} term
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} force
     * @param {?} skip
     * @param {?} top
     * @param {?} stateId
     * @return {?}
     */
    LiveAppsService.prototype.caseSearchEntries = /**
     * @param {?} term
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} force
     * @param {?} skip
     * @param {?} top
     * @param {?} stateId
     * @return {?}
     */
    function (term, sandboxId, appId, typeId, force, skip, top, stateId) {
        /** @type {?} */
        var url = '/case/v1/cases' + '?$sandbox=' + sandboxId + '&$filter=applicationId eq '
            + appId + ' and typeId eq ' + typeId;
        if (stateId) {
            url = url + ' and stateId eq ' + stateId;
        }
        url = url + '&$skip=' + skip + '&$top=' + top
            + '&$select=cr';
        if (term || (!term && !force)) {
            url = url + '&$search=' + term;
        }
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} caseinfos
         * @return {?}
         */
        function (caseinfos) {
            /** @type {?} */
            var caserefs = [];
            /** @type {?} */
            var caseinfolist = new CaseInfoList().deserialize(caseinfos);
            caseinfolist.caseinfos.forEach((/**
             * @param {?} caseinfo
             * @return {?}
             */
            function (caseinfo) {
                caserefs.push(caseinfo.caseReference);
            }));
            return new CaseSearchResults().deserialize({ caserefs: caserefs, searchString: term });
        })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} top
     * @return {?}
     */
    LiveAppsService.prototype.getCaseTypes = /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} top
     * @return {?}
     */
    function (sandboxId, appId, top) {
        /** @type {?} */
        var select = 'b,s,sa,a';
        /** @type {?} */
        var url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
        if (appId != null) {
            url = url + '&$filter=applicationId eq ' + appId;
        }
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} casetypes
         * @return {?}
         */
        function (casetypes) { return new CaseTypesList().deserialize(casetypes); })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} top
     * @return {?}
     */
    LiveAppsService.prototype.getCaseTypeSchema = /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} top
     * @return {?}
     */
    function (sandboxId, appId, top) {
        // https://eu.liveapps.cloud.tibco.com/case/v1/types?$sandbox=25&&$filter=applicationName eq 'Customer Complaint'&$select=b,js,c,ac
        /** @type {?} */
        var select = 'b,js,c,ac,a';
        /** @type {?} */
        var url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
        if (appId != null) {
            url = url + '&$filter=applicationId eq ' + appId;
        }
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} casetypes
         * @return {?}
         */
        function (casetypes) { return new CaseTypesList().deserialize(casetypes); })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} top
     * @return {?}
     */
    LiveAppsService.prototype.getCaseTypeStates = /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} top
     * @return {?}
     */
    function (sandboxId, appId, top) {
        /** @type {?} */
        var select = 's';
        /** @type {?} */
        var url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
        if (appId != null) {
            url = url + '&$filter=applicationId eq ' + appId;
        }
        /** @type {?} */
        var headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(url, { headers: headers })
            // return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} casetypestates
         * @return {?}
         */
        function (casetypestates) {
            // const x = new CaseTypeStatesList().deserialize(casetypestates[0].states);
            // return x;
            // const x = new CaseTypeStatesList().deserialize(casetypestates[0].states);
            // return x;
            /** @type {?} */
            var casetypelist = new CaseTypeStatesListList().deserialize(casetypestates);
            /** @type {?} */
            var states;
            casetypelist.casetypes.forEach((/**
             * @param {?} casetype
             * @return {?}
             */
            function (casetype) {
                if (casetype.states !== undefined) {
                    states = new CaseTypeStatesList().deserialize(casetype.states);
                }
            }));
            return states;
        })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} top
     * @return {?}
     */
    LiveAppsService.prototype.getCaseTypeBasicInfo = /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} top
     * @return {?}
     */
    function (sandboxId, appId, typeId, top) {
        /** @type {?} */
        var select = 'b';
        /** @type {?} */
        var url = '/case/v1/types?$sandbox=' + sandboxId + '&$select=' + select + '&$top=' + top;
        if (appId != null) {
            url = url + '&$filter=applicationId eq ' + appId;
        }
        if (!this.caseTypesCacheMap.get(url)) {
            /** @type {?} */
            var cacheEntry$ = this.getCaseTypeBasicInfoCached(url, typeId)
                .pipe(shareReplay(1));
            this.caseTypesCacheMap.set(url, cacheEntry$);
        }
        return this.caseTypesCacheMap.get(url);
    };
    /**
     * @private
     * @param {?} url
     * @param {?} typeId
     * @return {?}
     */
    LiveAppsService.prototype.getCaseTypeBasicInfoCached = /**
     * @private
     * @param {?} url
     * @param {?} typeId
     * @return {?}
     */
    function (url, typeId) {
        /** @type {?} */
        var headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(url, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} casetypes
         * @return {?}
         */
        function (casetypes) {
            /** @type {?} */
            var caseTypesList = new CaseTypesList().deserialize(casetypes);
            /** @type {?} */
            var requestedType;
            caseTypesList.casetypes.forEach((/**
             * @param {?} casetype
             * @return {?}
             */
            function (casetype) {
                if (casetype.id === typeId) {
                    requestedType = casetype;
                }
            }));
            return requestedType;
        })));
    };
    /**
     * @param {?} url
     * @return {?}
     */
    LiveAppsService.prototype.clearFromIconSVGTextCache = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        if (this.iconSVGTextCacheMap.get(url)) {
            this.iconSVGTextCacheMap.delete(url);
        }
    };
    /**
     * @param {?} url
     * @return {?}
     */
    LiveAppsService.prototype.getIconSVGText = /**
     * @param {?} url
     * @return {?}
     */
    function (url) {
        // todo: revisit the base href issue
        if (url.substr(0, 2) === '//') {
            url = url.substr(1, url.length - 1);
        }
        if (!this.iconSVGTextCacheMap.get(url)) {
            // const fixedUrl = window.location.protocol + '//' + window.location.host  + url;
            /** @type {?} */
            var cacheEntry$ = this.getIconSVGTextCache(url)
                .pipe(shareReplay(1));
            this.iconSVGTextCacheMap.set(url, cacheEntry$);
        }
        return this.iconSVGTextCacheMap.get(url);
    };
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    LiveAppsService.prototype.getIconSVGTextCache = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(url, { responseType: 'text', headers: headers })
            .pipe(map((/**
         * @param {?} val
         * @return {?}
         */
        function (val) {
            /** @type {?} */
            var svgContents = val.toString();
            return svgContents;
        })));
    };
    /**
     * @private
     * @param {?} casesContent
     * @param {?} caseRef
     * @param {?} toggle
     * @return {?}
     */
    LiveAppsService.prototype.updateCasesRecord = /**
     * @private
     * @param {?} casesContent
     * @param {?} caseRef
     * @param {?} toggle
     * @return {?}
     */
    function (casesContent, caseRef, toggle) {
        /** @type {?} */
        var sharedStateContent = new SharedStateContent().deserialize(casesContent);
        /** @type {?} */
        var casesRec = JSON.parse(sharedStateContent.json);
        /** @type {?} */
        var existing = false;
        // check if already exists
        if (caseRef === '-1') {
            // clear list
            casesRec.caseRefs.length = 0;
        }
        else {
            if (casesRec.caseRefs.indexOf(caseRef) !== -1) {
                // remove it if it is already in the array
                casesRec.caseRefs.splice(casesRec.caseRefs.indexOf(caseRef), 1);
                existing = true;
            }
            if (!toggle || existing === false) {
                // only add it if we are not in toggle mode (favorites) or if the caseRef didnt already exist in the list
                // now add case to front of array
                casesRec.caseRefs.unshift(caseRef);
                // check if we are > max size
                if (casesRec.maxSize !== -1 && casesRec.caseRefs.length > casesRec.maxSize) {
                    // remove oldest entry
                    casesRec.caseRefs.pop();
                }
            }
        }
        sharedStateContent.json = TcCoreCommonFunctions.escapeString(JSON.stringify(casesRec));
        return sharedStateContent;
    };
    /**
     * @private
     * @param {?} caseRef
     * @param {?} maxSize
     * @return {?}
     */
    LiveAppsService.prototype.newCasesRecord = /**
     * @private
     * @param {?} caseRef
     * @param {?} maxSize
     * @return {?}
     */
    function (caseRef, maxSize) {
        /** @type {?} */
        var casesRec = new CaseList();
        casesRec.maxSize = maxSize;
        if (caseRef === '-1') {
            casesRec.caseRefs = [];
        }
        else {
            casesRec.caseRefs = [caseRef];
        }
        casesRec.uniqueKey = 'caseReference';
        /** @type {?} */
        var sharedStateContent = new SharedStateContent();
        sharedStateContent.json = TcCoreCommonFunctions.escapeString(JSON.stringify(casesRec));
        return sharedStateContent;
    };
    /**
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    LiveAppsService.prototype.getRecentCases = /**
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    function (uiAppId, sandboxId) {
        /** @type {?} */
        var ssName = uiAppId + '.recentcases.tibcolabs.client.context.PRIVATE';
        return this.getSSCasesList(ssName, sandboxId);
    };
    /**
     * @private
     * @param {?} ssName
     * @param {?} sandboxId
     * @return {?}
     */
    LiveAppsService.prototype.getSSCasesList = /**
     * @private
     * @param {?} ssName
     * @param {?} sandboxId
     * @return {?}
     */
    function (ssName, sandboxId) {
        return this.sharedStateService.getSharedState(ssName, 'PRIVATE', false, false)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} sharedStateList
         * @return {?}
         */
        function (sharedStateList) {
            if (sharedStateList.sharedStateEntries.length > 0) {
                return new CaseList().deserialize(JSON.parse(sharedStateList.sharedStateEntries[0].content.json));
            }
            else {
                return new CaseList();
            }
        })));
    };
    /**
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    LiveAppsService.prototype.unsetRecentCase = /**
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    function (caseRef, uiAppId, sandboxId) {
        // NOTE: Use '-1' as caseRef to clear recent cases list
        /** @type {?} */
        var ssName = uiAppId + '.recentcases.tibcolabs.client.context.PRIVATE';
        this.setCasesRecord(ssName, caseRef, uiAppId, sandboxId, 10, true);
    };
    /**
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    LiveAppsService.prototype.setRecentCase = /**
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    function (caseRef, uiAppId, sandboxId) {
        // NOTE: Use '-1' as caseRef to clear recent cases list
        /** @type {?} */
        var ssName = uiAppId + '.recentcases.tibcolabs.client.context.PRIVATE';
        this.setCasesRecord(ssName, caseRef, uiAppId, sandboxId, 10, false);
    };
    /**
     * @private
     * @param {?} ssName
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @param {?} maxSize
     * @param {?} toggle
     * @return {?}
     */
    LiveAppsService.prototype.setCasesRecord = /**
     * @private
     * @param {?} ssName
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @param {?} maxSize
     * @param {?} toggle
     * @return {?}
     */
    function (ssName, caseRef, uiAppId, sandboxId, maxSize, toggle) {
        var _this = this;
        // get cases list from shared state if any
        // update cases data removing oldest if > maxsize
        // set shared state
        /** @type {?} */
        var casesEntry;
        this.sharedStateService.getSharedState(ssName, 'PRIVATE', false, false)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} sharedStateList
         * @return {?}
         */
        function (sharedStateList) {
            casesEntry = sharedStateList.sharedStateEntries[0] || undefined;
            /** @type {?} */
            var content;
            if (casesEntry) {
                content = _this.updateCasesRecord(casesEntry.content, caseRef, toggle);
                casesEntry.content = content;
                sharedStateList.sharedStateEntries[0] = casesEntry;
                _this.sharedStateService.updateSharedState(sharedStateList.sharedStateEntries).subscribe();
            }
            else {
                content = _this.newCasesRecord(caseRef, maxSize);
                _this.sharedStateService.createSharedState(ssName, 'PRIVATE', '', sandboxId, undefined, undefined, undefined, content).subscribe();
            }
            return casesEntry;
        }))).subscribe(null, (/**
         * @param {?} error
         * @return {?}
         */
        function (error) { return console.log('Unable to set recent cases: ' + error); }));
    };
    /**
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    LiveAppsService.prototype.getFavoriteCases = /**
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    function (uiAppId, sandboxId) {
        /** @type {?} */
        var ssName = uiAppId + '.favoritecases.tibcolabs.client.context.PRIVATE';
        return this.sharedStateService.getSharedState(ssName, 'PRIVATE', false, false)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} sharedStateList
         * @return {?}
         */
        function (sharedStateList) {
            if (sharedStateList.sharedStateEntries.length > 0) {
                return new CaseList().deserialize(JSON.parse(sharedStateList.sharedStateEntries[0].content.json));
            }
            else {
                return new CaseList();
            }
        })));
    };
    /**
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    LiveAppsService.prototype.setFavoriteCase = /**
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    function (caseRef, uiAppId, sandboxId) {
        // NOTE: Use '-1' as caseRef to clear recent cases list
        /** @type {?} */
        var ssName = uiAppId + '.favoritecases.tibcolabs.client.context.PRIVATE';
        this.setCasesRecord(ssName, caseRef, uiAppId, sandboxId, -1, true);
    };
    /**
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    LiveAppsService.prototype.isFavoriteCase = /**
     * @param {?} caseRef
     * @param {?} uiAppId
     * @param {?} sandboxId
     * @return {?}
     */
    function (caseRef, uiAppId, sandboxId) {
        /** @type {?} */
        var ssName = uiAppId + '.favoritecases.tibcolabs.client.context.PRIVATE';
        return this.getSSCasesList(ssName, sandboxId)
            .pipe(map((/**
         * @param {?} caselist
         * @return {?}
         */
        function (caselist) {
            return caselist.caseRefs ? (caselist.caseRefs.indexOf(caseRef) !== -1) : false;
        })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} processId
     * @param {?} caseReference
     * @param {?} data
     * @return {?}
     */
    LiveAppsService.prototype.runProcess = /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} processId
     * @param {?} caseReference
     * @param {?} data
     * @return {?}
     */
    function (sandboxId, appId, processId, caseReference, data) {
        /** @type {?} */
        var url = '/process/v1/processes';
        // convert data to an escaped JSON string
        /** @type {?} */
        var dataJson;
        if (data) {
            dataJson = TcCoreCommonFunctions.escapeString(JSON.stringify(data));
        }
        else {
            dataJson = TcCoreCommonFunctions.escapeString(JSON.stringify({}));
        }
        /** @type {?} */
        var body = {
            'id': processId,
            'sandboxId': sandboxId,
            'applicationId': appId,
            'data': dataJson
        };
        if (caseReference) {
            body['caseReference'] = caseReference;
        }
        /** @type {?} */
        var bodyStr = JSON.stringify(body);
        /** @type {?} */
        var headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.post(url, bodyStr, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} response
         * @return {?}
         */
        function (response) { return response; })));
    };
    // Since we call get userinfo a lot - and the data doesn't tend to change - I will cache it for the session
    // Since we call get userinfo a lot - and the data doesn't tend to change - I will cache it for the session
    /**
     * @param {?} userId
     * @return {?}
     */
    LiveAppsService.prototype.getUserInfo = 
    // Since we call get userinfo a lot - and the data doesn't tend to change - I will cache it for the session
    /**
     * @param {?} userId
     * @return {?}
     */
    function (userId) {
        /** @type {?} */
        var url = '/organisation/v1/users/' + userId;
        if (!this.userInfoCacheMap.get(userId)) {
            /** @type {?} */
            var cacheEntry$ = this.getUserCached(url)
                .pipe(shareReplay(1));
            this.userInfoCacheMap.set(userId, cacheEntry$);
        }
        return this.userInfoCacheMap.get(userId);
    };
    /**
     * @private
     * @param {?} url
     * @return {?}
     */
    LiveAppsService.prototype.getUserCached = /**
     * @private
     * @param {?} url
     * @return {?}
     */
    function (url) {
        /** @type {?} */
        var headers = new HttpHeaders().set('cacheResponse', 'true');
        return this.http.get(url, { headers: headers })
            .pipe(map((/**
         * @param {?} userinfo
         * @return {?}
         */
        function (userinfo) { return new UserInfo().deserialize(userinfo); })));
    };
    /* notes service */
    /* notes service */
    /**
     * @param {?} relatedItemType
     * @param {?} itemTypeId
     * @param {?} skip
     * @param {?} top
     * @return {?}
     */
    LiveAppsService.prototype.getThreads = /* notes service */
    /**
     * @param {?} relatedItemType
     * @param {?} itemTypeId
     * @param {?} skip
     * @param {?} top
     * @return {?}
     */
    function (relatedItemType, itemTypeId, skip, top) {
        // https://liveapps.tenant-integration.tcie.pro/collaboration/notes?$relatedItemCollection=CASE_APP_15441&$orderby=createdDate%20ASC
        /** @type {?} */
        var url = '/collaboration/v1/notes?$relatedItemCollection=' + relatedItemType + '_' + itemTypeId
            + '&$orderby=createdDate desc'
            + '&$top=' + top + '&$skip=' + skip;
        return this.http.get(url)
            .pipe(map((/**
         * @param {?} notes
         * @return {?}
         */
        function (notes) {
            /** @type {?} */
            var returnedNotes = new NotesList().deserialize(notes);
            /** @type {?} */
            var threadList = new ThreadList();
            threadList.threads = [];
            // create threads
            returnedNotes.notes.forEach((/**
             * @param {?} note
             * @return {?}
             */
            function (note) {
                if (note.level === 1) {
                    /** @type {?} */
                    var noteThread_1 = new NoteThread(note.thread.id, false, false, false, undefined, [], note);
                    // get other threads for this id
                    returnedNotes.notes.forEach((/**
                     * @param {?} threadNote
                     * @return {?}
                     */
                    function (threadNote) {
                        if (threadNote.level > 1 && threadNote.threadId === note.thread.id) {
                            // add to the thread
                            noteThread_1.thread.push(threadNote);
                        }
                    }));
                    threadList.threads.push(noteThread_1);
                }
            }));
            return threadList;
        })));
    };
    /**
     * @param {?} collectionIds
     * @return {?}
     */
    LiveAppsService.prototype.getNotesForCollections = /**
     * @param {?} collectionIds
     * @return {?}
     */
    function (collectionIds) {
        if (collectionIds) {
            /** @type {?} */
            var url = '/collaboration/v1/notes?$relatedItemCollection=' + collectionIds +
                '&$orderby=createdDate ASC';
            return this.http.get(url)
                .pipe(map((/**
             * @param {?} notes
             * @return {?}
             */
            function (notes) { return new NotesList().deserialize(notes); })));
        }
    };
    /**
     * @return {?}
     */
    LiveAppsService.prototype.deleteAllNotes = /**
     * @return {?}
     */
    function () {
    };
    /**
     * @param {?} note
     * @param {?} noteId
     * @return {?}
     */
    LiveAppsService.prototype.updateNote = /**
     * @param {?} note
     * @param {?} noteId
     * @return {?}
     */
    function (note, noteId) {
        /** @type {?} */
        var url = '/collaboration/v1/notes/' + noteId;
        /** @type {?} */
        var body = note;
        /** @type {?} */
        var bodyStr = JSON.stringify(body);
        /** @type {?} */
        var headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.put(url, bodyStr, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return new Note().deserialize(result); })));
    };
    /**
     * @param {?} relatedItemType
     * @param {?} uiAppSource
     * @param {?} relatedItemId
     * @param {?} notificationLabel
     * @param {?} notificationUrl
     * @param {?} title
     * @param {?} noteText
     * @return {?}
     */
    LiveAppsService.prototype.createNote = /**
     * @param {?} relatedItemType
     * @param {?} uiAppSource
     * @param {?} relatedItemId
     * @param {?} notificationLabel
     * @param {?} notificationUrl
     * @param {?} title
     * @param {?} noteText
     * @return {?}
     */
    function (relatedItemType, uiAppSource, relatedItemId, notificationLabel, notificationUrl, title, noteText) {
        /** @type {?} */
        var url = '/collaboration/v1/notes';
        /** @type {?} */
        var note = new Note().deserialize({
            attributes: [],
            notificationLabel: notificationLabel,
            notificationUrl: notificationUrl,
            text: noteText,
            title: title
        });
        /** @type {?} */
        var body = {
            note: note,
            relatedItemCollection: [
                (relatedItemType + '_' + relatedItemId)
            ],
            relatedItemId: relatedItemId,
            relatedItemType: uiAppSource,
            roles: undefined
        };
        /** @type {?} */
        var bodyStr = JSON.stringify(body);
        /** @type {?} */
        var headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.post(url, bodyStr, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) { return Number(result); })));
    };
    /**
     * @param {?} noteId
     * @return {?}
     */
    LiveAppsService.prototype.getNote = /**
     * @param {?} noteId
     * @return {?}
     */
    function (noteId) {
        /** @type {?} */
        var url = '/collaboration/v1/notes/' + noteId;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} note
         * @return {?}
         */
        function (note) { return new Note().deserialize(note); })));
    };
    /**
     * @param {?} relatedItemType
     * @param {?} relatedItemId
     * @param {?} threadId
     * @return {?}
     */
    LiveAppsService.prototype.getThread = /**
     * @param {?} relatedItemType
     * @param {?} relatedItemId
     * @param {?} threadId
     * @return {?}
     */
    function (relatedItemType, relatedItemId, threadId) {
        /** @type {?} */
        var url = '/collaboration/v1/notes/?$relatedItemType=' + relatedItemType
            + '&relatedItemId=' + relatedItemId
            + '&filter=threadId=' + threadId
            + '&orderby=createdDate ASC';
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} notes
         * @return {?}
         */
        function (notes) { return new NotesList().deserialize(notes); })));
    };
    /**
     * @param {?} originalNote
     * @param {?} reply
     * @param {?} noteId
     * @return {?}
     */
    LiveAppsService.prototype.createReplyNote = /**
     * @param {?} originalNote
     * @param {?} reply
     * @param {?} noteId
     * @return {?}
     */
    function (originalNote, reply, noteId) {
        /** @type {?} */
        var url = '/collaboration/v1/notes/' + noteId;
        /** @type {?} */
        var body = {
            notificationLabel: originalNote.notificationLabel,
            notificationUrl: originalNote.notificationUrl,
            text: reply
        };
        /** @type {?} */
        var bodyStr = JSON.stringify(body);
        /** @type {?} */
        var headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.post(url, bodyStr, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return Number(value); })));
    };
    /**
     * @param {?} relatedItemType
     * @param {?} relatedTypeId
     * @return {?}
     */
    LiveAppsService.prototype.subscribeToNotes = /**
     * @param {?} relatedItemType
     * @param {?} relatedTypeId
     * @return {?}
     */
    function (relatedItemType, relatedTypeId) {
        /** @type {?} */
        var url = '/collaboration/v1/notifications';
        /** @type {?} */
        var body = {
            topicId: undefined,
            threadId: undefined,
            notifyCollection: {
                collectionName: relatedItemType + '_' + relatedTypeId,
                lifecycledWithType: 'RT_CASE',
                lifecycledWithId: true
            }
        };
        /** @type {?} */
        var bodyStr = JSON.stringify(body);
        /** @type {?} */
        var headers = new HttpHeaders()
            .set('Content-Type', 'application/json');
        return this.http.post(url, bodyStr, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })));
    };
    /**
     * @param {?} relatedItemType
     * @param {?} relatedTypeId
     * @param {?} userId
     * @return {?}
     */
    LiveAppsService.prototype.unsubscribeToNotes = /**
     * @param {?} relatedItemType
     * @param {?} relatedTypeId
     * @param {?} userId
     * @return {?}
     */
    function (relatedItemType, relatedTypeId, userId) {
        /** @type {?} */
        var url = '/collaboration/v1/notifications?$filter=collectionName=';
        url = url + '\'' + relatedItemType + '_' + relatedTypeId + '\' and entityId=' + userId;
        return this.http.delete(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })));
    };
    /**
     * @param {?} relatedItemType
     * @param {?} relatedTypeId
     * @param {?} userId
     * @return {?}
     */
    LiveAppsService.prototype.getNotifications = /**
     * @param {?} relatedItemType
     * @param {?} relatedTypeId
     * @param {?} userId
     * @return {?}
     */
    function (relatedItemType, relatedTypeId, userId) {
        /** @type {?} */
        var url = '/collaboration/v1/notifications?$filter=collectionName=\'' + relatedItemType + '_' + relatedTypeId
            + '\' and entityId=' + userId;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return new NotificationList().deserialize(value); })));
    };
    /**
     * @param {?} noteId
     * @return {?}
     */
    LiveAppsService.prototype.deleteNote = /**
     * @param {?} noteId
     * @return {?}
     */
    function (noteId) {
        /** @type {?} */
        var url = '/collaboration/v1/notes/' + noteId;
        return this.http.delete(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })));
    };
    /* end notes service */
    /* end notes service */
    /**
     * @param {?} sandboxId
     * @param {?} top
     * @param {?} useCache
     * @return {?}
     */
    LiveAppsService.prototype.getGroups = /* end notes service */
    /**
     * @param {?} sandboxId
     * @param {?} top
     * @param {?} useCache
     * @return {?}
     */
    function (sandboxId, top, useCache) {
        /** @type {?} */
        var url = '/organisation/v1/groups?$sandbox=' + sandboxId + '&$top=' + top;
        /** @type {?} */
        var headers;
        if (useCache) {
            headers = new HttpHeaders().set('cacheResponse', 'true');
        }
        else {
            headers = new HttpHeaders();
        }
        return this.http.get(url, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} groups
         * @return {?}
         */
        function (groups) { return new Groups().deserialize({ groups: groups }); })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} userId
     * @param {?} top
     * @param {?} useCache
     * @return {?}
     */
    LiveAppsService.prototype.getGroupMemberships = /**
     * @param {?} sandboxId
     * @param {?} userId
     * @param {?} top
     * @param {?} useCache
     * @return {?}
     */
    function (sandboxId, userId, top, useCache) {
        /** @type {?} */
        var url = '/organisation/v1/users/' + userId + '/groups' + '?$sandbox=' + sandboxId + '&$top=' + top;
        /** @type {?} */
        var headers;
        if (useCache) {
            headers = new HttpHeaders().set('cacheResponse', 'true');
        }
        else {
            headers = new HttpHeaders();
        }
        return this.http.get(url, { headers: headers })
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} groups
         * @return {?}
         */
        function (groups) { return new Groups().deserialize({ groups: groups }); })));
    };
    LiveAppsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    LiveAppsService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Location },
        { type: TcSharedStateService }
    ]; };
    /** @nocollapse */ LiveAppsService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function LiveAppsService_Factory() { return new LiveAppsService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Location), i0.ɵɵinject(i3.TcSharedStateService)); }, token: LiveAppsService, providedIn: "root" });
    return LiveAppsService;
}());
export { LiveAppsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    LiveAppsService.prototype.claimsCacheMap;
    /**
     * @type {?}
     * @private
     */
    LiveAppsService.prototype.userInfoCacheMap;
    /**
     * @type {?}
     * @private
     */
    LiveAppsService.prototype.caseTypesCacheMap;
    /**
     * @type {?}
     * @private
     */
    LiveAppsService.prototype.iconSVGTextCacheMap;
    /**
     * @type {?}
     * @private
     */
    LiveAppsService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    LiveAppsService.prototype.location;
    /**
     * @type {?}
     * @private
     */
    LiveAppsService.prototype.sharedStateService;
}
//# sourceMappingURL=data:application/json;base64,