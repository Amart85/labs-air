/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { map, tap } from 'rxjs/operators';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
var TcWorkitemsService = /** @class */ (function () {
    function TcWorkitemsService(http) {
        this.http = http;
    }
    // todo: Note this is not a public API - update when Public API available
    // todo: Note this is not a public API - update when Public API available
    /**
     * @param {?} sandboxId
     * @param {?} appIds
     * @param {?} caseRef
     * @param {?} skip
     * @param {?} top
     * @return {?}
     */
    TcWorkitemsService.prototype.getWorkitems = 
    // todo: Note this is not a public API - update when Public API available
    /**
     * @param {?} sandboxId
     * @param {?} appIds
     * @param {?} caseRef
     * @param {?} skip
     * @param {?} top
     * @return {?}
     */
    function (sandboxId, appIds, caseRef, skip, top) {
        // https://eu.liveapps.cloud.tibco.com/work/workListItems?$sandbox=31&$skip=0&$top=100
        // https://eu.liveapps.cloud.tibco.com/work/workListItems?$sandbox=31&$skip=0&$top=100&$filter=caseref%20eq%20275481
        /** @type {?} */
        var url = '/work/workListItems?$sandbox=' + sandboxId
            + '&$skip=' + skip
            + '&$top=' + top;
        /** @type {?} */
        var filter;
        if (!caseRef) {
            // filter using appIds
            /** @type {?} */
            var filterStr_1 = 'applicationId eq \'<appId>\'';
            if (appIds && appIds.length > 0) {
                appIds.forEach((/**
                 * @param {?} appId
                 * @return {?}
                 */
                function (appId) {
                    if (!filter) {
                        filter = filterStr_1.replace('<appId>', appId);
                    }
                    else {
                        filter = filter + ' or ' + filterStr_1.replace('<appId>', appId);
                    }
                }));
            }
        }
        else {
            // filter using caseRef
            filter = 'caseref eq ' + caseRef;
        }
        url = url + '&$filter=' + filter;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} workitems
         * @return {?}
         */
        function (workitems) {
            return workitems;
        })));
    };
    TcWorkitemsService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TcWorkitemsService.ctorParameters = function () { return [
        { type: HttpClient }
    ]; };
    /** @nocollapse */ TcWorkitemsService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcWorkitemsService_Factory() { return new TcWorkitemsService(i0.ɵɵinject(i1.HttpClient)); }, token: TcWorkitemsService, providedIn: "root" });
    return TcWorkitemsService;
}());
export { TcWorkitemsService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcWorkitemsService.prototype.http;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtd29ya2l0ZW1zLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AdGliY28tdGNzdGsvdGMtbGl2ZWFwcHMtbGliLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3RjLXdvcmtpdGVtcy5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQzNDLE9BQU8sRUFBQyxVQUFVLEVBQUMsTUFBTSxzQkFBc0IsQ0FBQztBQUVoRCxPQUFPLEVBQVUsR0FBRyxFQUFFLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDOzs7QUFHakQ7SUFLRSw0QkFBb0IsSUFBZ0I7UUFBaEIsU0FBSSxHQUFKLElBQUksQ0FBWTtJQUFJLENBQUM7SUFFM0MseUVBQXlFOzs7Ozs7Ozs7O0lBQ2hFLHlDQUFZOzs7Ozs7Ozs7O0lBQW5CLFVBQW9CLFNBQWlCLEVBQUUsTUFBZ0IsRUFBRSxPQUFlLEVBQUUsSUFBWSxFQUFFLEdBQVc7Ozs7WUFHN0YsR0FBRyxHQUFHLCtCQUErQixHQUFHLFNBQVM7Y0FDakQsU0FBUyxHQUFHLElBQUk7Y0FDaEIsUUFBUSxHQUFHLEdBQUc7O1lBRWQsTUFBYztRQUNsQixJQUFJLENBQUMsT0FBTyxFQUFFOzs7Z0JBRU4sV0FBUyxHQUFHLDhCQUE4QjtZQUVoRCxJQUFJLE1BQU0sSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDL0IsTUFBTSxDQUFDLE9BQU87Ozs7Z0JBQUMsVUFBQSxLQUFLO29CQUNsQixJQUFJLENBQUMsTUFBTSxFQUFFO3dCQUNYLE1BQU0sR0FBRyxXQUFTLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxLQUFLLENBQUMsQ0FBQztxQkFDOUM7eUJBQU07d0JBQ0wsTUFBTSxHQUFHLE1BQU0sR0FBRyxNQUFNLEdBQUcsV0FBUyxDQUFDLE9BQU8sQ0FBQyxTQUFTLEVBQUUsS0FBSyxDQUFDLENBQUM7cUJBQ2hFO2dCQUNILENBQUMsRUFBQyxDQUFDO2FBQ0o7U0FDRjthQUFNO1lBQ0wsdUJBQXVCO1lBQ3ZCLE1BQU0sR0FBRyxhQUFhLEdBQUcsT0FBTyxDQUFDO1NBQ2xDO1FBQ0QsR0FBRyxHQUFHLEdBQUcsR0FBRyxXQUFXLEdBQUcsTUFBTSxDQUFDO1FBRWpDLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDO2FBQ3RCLElBQUksQ0FDSCxHQUFHOzs7O1FBQUUsVUFBQSxHQUFHLElBQUksT0FBQSxjQUFjLENBQUMsT0FBTyxDQUFDLGNBQWMsRUFBRSxJQUFJLENBQUMsR0FBRyxFQUFFLENBQUMsUUFBUSxFQUFFLENBQUMsRUFBN0QsQ0FBNkQsRUFBQyxFQUMxRSxHQUFHOzs7O1FBQUMsVUFBQyxTQUFxQjtZQUN4QixPQUFPLFNBQVMsQ0FBQztRQUNuQixDQUFDLEVBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7Z0JBMUNKLFVBQVUsU0FBQztvQkFDVixVQUFVLEVBQUUsTUFBTTtpQkFDbkI7Ozs7Z0JBUE8sVUFBVTs7OzZCQURsQjtDQWtEQyxBQTVDRCxJQTRDQztTQXpDWSxrQkFBa0I7Ozs7OztJQUVqQixrQ0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQge0h0dHBDbGllbnR9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbi9odHRwJztcbmltcG9ydCB7T2JzZXJ2YWJsZX0gZnJvbSAncnhqcyc7XG5pbXBvcnQge2ZsYXRNYXAsIG1hcCwgdGFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge1dvcmtpdGVtfSBmcm9tICcuLi9tb2RlbHMvdGMtd29ya2l0ZW1zJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgVGNXb3JraXRlbXNTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3Rvcihwcml2YXRlIGh0dHA6IEh0dHBDbGllbnQpIHsgfVxuXG4vLyB0b2RvOiBOb3RlIHRoaXMgaXMgbm90IGEgcHVibGljIEFQSSAtIHVwZGF0ZSB3aGVuIFB1YmxpYyBBUEkgYXZhaWxhYmxlXG4gIHB1YmxpYyBnZXRXb3JraXRlbXMoc2FuZGJveElkOiBudW1iZXIsIGFwcElkczogc3RyaW5nW10sIGNhc2VSZWY6IHN0cmluZywgc2tpcDogbnVtYmVyLCB0b3A6IG51bWJlcik6IE9ic2VydmFibGU8V29ya2l0ZW1bXT4ge1xuICAgIC8vIGh0dHBzOi8vZXUubGl2ZWFwcHMuY2xvdWQudGliY28uY29tL3dvcmsvd29ya0xpc3RJdGVtcz8kc2FuZGJveD0zMSYkc2tpcD0wJiR0b3A9MTAwXG4gICAgLy8gaHR0cHM6Ly9ldS5saXZlYXBwcy5jbG91ZC50aWJjby5jb20vd29yay93b3JrTGlzdEl0ZW1zPyRzYW5kYm94PTMxJiRza2lwPTAmJHRvcD0xMDAmJGZpbHRlcj1jYXNlcmVmJTIwZXElMjAyNzU0ODFcbiAgICBsZXQgdXJsID0gJy93b3JrL3dvcmtMaXN0SXRlbXM/JHNhbmRib3g9JyArIHNhbmRib3hJZFxuICAgICAgKyAnJiRza2lwPScgKyBza2lwXG4gICAgICArICcmJHRvcD0nICsgdG9wXG5cbiAgICBsZXQgZmlsdGVyOiBzdHJpbmc7XG4gICAgaWYgKCFjYXNlUmVmKSB7XG4gICAgICAvLyBmaWx0ZXIgdXNpbmcgYXBwSWRzXG4gICAgICBjb25zdCBmaWx0ZXJTdHIgPSAnYXBwbGljYXRpb25JZCBlcSBcXCc8YXBwSWQ+XFwnJztcblxuICAgICAgaWYgKGFwcElkcyAmJiBhcHBJZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBhcHBJZHMuZm9yRWFjaChhcHBJZCA9PiB7XG4gICAgICAgICAgaWYgKCFmaWx0ZXIpIHtcbiAgICAgICAgICAgIGZpbHRlciA9IGZpbHRlclN0ci5yZXBsYWNlKCc8YXBwSWQ+JywgYXBwSWQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaWx0ZXIgPSBmaWx0ZXIgKyAnIG9yICcgKyBmaWx0ZXJTdHIucmVwbGFjZSgnPGFwcElkPicsIGFwcElkKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBmaWx0ZXIgdXNpbmcgY2FzZVJlZlxuICAgICAgZmlsdGVyID0gJ2Nhc2VyZWYgZXEgJyArIGNhc2VSZWY7XG4gICAgfVxuICAgIHVybCA9IHVybCArICcmJGZpbHRlcj0nICsgZmlsdGVyO1xuXG4gICAgcmV0dXJuIHRoaXMuaHR0cC5nZXQodXJsKVxuICAgICAgLnBpcGUoXG4gICAgICAgIHRhcCggdmFsID0+IHNlc3Npb25TdG9yYWdlLnNldEl0ZW0oJ3Rjc1RpbWVzdGFtcCcsIERhdGUubm93KCkudG9TdHJpbmcoKSkpLFxuICAgICAgICBtYXAoKHdvcmtpdGVtczogV29ya2l0ZW1bXSkgPT4ge1xuICAgICAgICAgIHJldHVybiB3b3JraXRlbXM7XG4gICAgICAgIH0pXG4gICAgICApO1xuICAgIH1cblxufVxuIl19