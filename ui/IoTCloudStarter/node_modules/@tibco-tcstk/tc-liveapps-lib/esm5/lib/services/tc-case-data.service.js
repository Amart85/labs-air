/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { zip } from 'rxjs';
import { CaseInfo } from '../models/liveappsdata';
import { LiveAppsService } from './live-apps.service';
import { HttpClient } from '@angular/common/http';
import { CaseInfoWithSchema, PurgeResult } from '../models/tc-case-data';
import { map, tap } from 'rxjs/operators';
import { TcCaseCardConfigService } from './tc-case-card-config.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./live-apps.service";
import * as i3 from "./tc-case-card-config.service";
var TcCaseDataService = /** @class */ (function () {
    function TcCaseDataService(http, liveAppsService, caseCardConfigService) {
        this.http = http;
        this.liveAppsService = liveAppsService;
        this.caseCardConfigService = caseCardConfigService;
    }
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @return {?}
     */
    TcCaseDataService.prototype.getCaseState = /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @return {?}
     */
    function (caseRef, sandboxId) {
        /** @type {?} */
        var url = '/case/v1/cases/' + caseRef + '/' + '?$sandbox=' + sandboxId + '&$select=s';
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} caseinfo
         * @return {?}
         */
        function (caseinfo) {
            /** @type {?} */
            var caseinf = new CaseInfo().deserialize(caseinfo);
            /** @type {?} */
            var state = caseinf.summaryObj.state;
            return state;
        })));
    };
    /**
     * @param {?} applicationId
     * @param {?} typeId
     * @param {?} sandboxId
     * @return {?}
     */
    TcCaseDataService.prototype.purgeAllCases = /**
     * @param {?} applicationId
     * @param {?} typeId
     * @param {?} sandboxId
     * @return {?}
     */
    function (applicationId, typeId, sandboxId) {
        /** @type {?} */
        var url = '/case/v1/cases/?$sandbox=1930&$filter=applicationId eq 2550 and typeId eq 1 and purgeable eq TRUE';
        return this.http.delete(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} result
         * @return {?}
         */
        function (result) {
            return new PurgeResult().deserialize(result);
        })));
    };
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} uiAppId
     * @return {?}
     */
    TcCaseDataService.prototype.getCaseWithSchema = /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} uiAppId
     * @return {?}
     */
    function (caseRef, sandboxId, appId, typeId, uiAppId) {
        var _this = this;
        /** @type {?} */
        var url = '/case/v1/cases/' + caseRef + '/' + '?$sandbox=' + sandboxId + '&$select=uc, m, s';
        // Make the two required API calls
        /** @type {?} */
        var caseSchema = this.liveAppsService.getCaseTypeSchema(sandboxId, appId, 100).pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} typesList
         * @return {?}
         */
        function (typesList) {
            // get schema for case type
            /** @type {?} */
            var requestedType;
            typesList.casetypes.forEach((/**
             * @param {?} cType
             * @return {?}
             */
            function (cType) {
                if (cType.id === typeId) {
                    requestedType = cType;
                }
            }));
            return requestedType;
        })));
        /** @type {?} */
        var caseData = this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} caseinfo
         * @return {?}
         */
        function (caseinfo) {
            /** @type {?} */
            var caseinf = new CaseInfo().deserialize(caseinfo);
            _this.caseCardConfigService.parseCaseInfo(caseinf, sandboxId, caseinf.metadata.applicationId, caseinf.metadata.typeId, uiAppId);
            return caseinf;
        })));
        // Combine the results of both calls into a single response
        /** @type {?} */
        var test1 = zip(caseSchema, caseData).pipe(map((/**
         * @param {?} caseInfoArray
         * @return {?}
         */
        function (caseInfoArray) {
            return new CaseInfoWithSchema().deserialize({ caseInfo: caseInfoArray[1], caseSchema: caseInfoArray[0].jsonSchema, applicationName: caseInfoArray[0].applicationName, applicationInternalName: caseInfoArray[0].applicationInternalName });
        })));
        return test1;
    };
    TcCaseDataService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TcCaseDataService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: LiveAppsService },
        { type: TcCaseCardConfigService }
    ]; };
    /** @nocollapse */ TcCaseDataService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcCaseDataService_Factory() { return new TcCaseDataService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LiveAppsService), i0.ɵɵinject(i3.TcCaseCardConfigService)); }, token: TcCaseDataService, providedIn: "root" });
    return TcCaseDataService;
}());
export { TcCaseDataService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcCaseDataService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TcCaseDataService.prototype.liveAppsService;
    /**
     * @type {?}
     * @private
     */
    TcCaseDataService.prototype.caseCardConfigService;
}
//# sourceMappingURL=data:application/json;base64,