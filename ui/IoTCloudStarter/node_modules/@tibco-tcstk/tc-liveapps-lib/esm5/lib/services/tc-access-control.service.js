/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { RouteAccessControlConfig } from '../models/tc-groups-data';
import { TcCoreCommonFunctions, TcSharedStateService, SharedStateContent, SharedStateEntry, SharedStateList } from '@tibco-tcstk/tc-core-lib';
import { HttpClient } from '@angular/common/http';
import { map } from 'rxjs/operators';
import { Location } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "@angular/common";
import * as i3 from "@tibco-tcstk/tc-core-lib";
var TcAccessControlService = /** @class */ (function () {
    function TcAccessControlService(http, location, sharedStateService) {
        this.http = http;
        this.location = location;
        this.sharedStateService = sharedStateService;
    }
    /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} accessControlConfig
     * @return {?}
     */
    TcAccessControlService.prototype.createLAccessControlConfig = /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} accessControlConfig
     * @return {?}
     */
    function (sandboxId, uiAppId, accessControlConfig) {
        /** @type {?} */
        var ssName = uiAppId + '.accesscontrol.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        var content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(accessControlConfig));
        return this.sharedStateService.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value; })));
    };
    /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    TcAccessControlService.prototype.getAccessControlConfig = /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    function (uiAppId, useCache, flushCache) {
        // if useCache is false this will trigger the service to update the cached version with latest
        /** @type {?} */
        var ssName = uiAppId + '.accesscontrol.config.tibcolabs.client.context.PUBLIC';
        return this.sharedStateService.getSharedState(ssName, 'PUBLIC', useCache, flushCache)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value.sharedStateEntries.length > 0) {
                /** @type {?} */
                var ssresult = new RouteAccessControlConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));
                ssresult.id = value.sharedStateEntries[0].id;
                return ssresult;
            }
            else {
                return undefined;
            }
        })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} accessControlConfig
     * @param {?} id
     * @return {?}
     */
    TcAccessControlService.prototype.updateAccessControlConfig = /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} accessControlConfig
     * @param {?} id
     * @return {?}
     */
    function (sandboxId, uiAppId, accessControlConfig, id) {
        var _this = this;
        /** @type {?} */
        var ssName = uiAppId + '.accesscontrol.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        var content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(accessControlConfig));
        /** @type {?} */
        var entry = new SharedStateEntry();
        entry.content = content;
        entry.sandboxId = sandboxId;
        entry.name = ssName;
        entry.type = 'PUBLIC';
        entry.id = id;
        /** @type {?} */
        var ssList = new SharedStateList();
        ssList.sharedStateEntries = [];
        ssList.sharedStateEntries.push(entry);
        return this.sharedStateService.updateSharedState(ssList.sharedStateEntries)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // flush the cache
            _this.getAccessControlConfig(uiAppId, true, true).subscribe();
            return new RouteAccessControlConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));
        })));
    };
    TcAccessControlService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TcAccessControlService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: Location },
        { type: TcSharedStateService }
    ]; };
    /** @nocollapse */ TcAccessControlService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcAccessControlService_Factory() { return new TcAccessControlService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Location), i0.ɵɵinject(i3.TcSharedStateService)); }, token: TcAccessControlService, providedIn: "root" });
    return TcAccessControlService;
}());
export { TcAccessControlService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcAccessControlService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TcAccessControlService.prototype.location;
    /**
     * @type {?}
     * @private
     */
    TcAccessControlService.prototype.sharedStateService;
}
//# sourceMappingURL=data:application/json;base64,