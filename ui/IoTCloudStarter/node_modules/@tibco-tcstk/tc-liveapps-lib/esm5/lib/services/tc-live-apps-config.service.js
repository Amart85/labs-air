/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { map } from 'rxjs/operators';
import { Location } from '@angular/common';
import { TcSharedStateService, TcCoreCommonFunctions, SharedStateContent, SharedStateEntry, SharedStateList } from '@tibco-tcstk/tc-core-lib';
import { LiveAppsConfig } from '../models/tc-liveapps-config';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@tibco-tcstk/tc-core-lib";
var TcLiveAppsConfigService = /** @class */ (function () {
    function TcLiveAppsConfigService(location, sharedStateService) {
        this.location = location;
        this.sharedStateService = sharedStateService;
    }
    /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} liveappsConfig
     * @return {?}
     */
    TcLiveAppsConfigService.prototype.createLiveAppsConfig = /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} liveappsConfig
     * @return {?}
     */
    function (sandboxId, uiAppId, liveappsConfig) {
        /** @type {?} */
        var ssName = uiAppId + '.liveapps.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        var content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(liveappsConfig));
        return this.sharedStateService.createSharedState(ssName, 'PUBLIC', '', sandboxId, undefined, undefined, undefined, content)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) { return value; })));
    };
    /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    TcLiveAppsConfigService.prototype.getLiveAppsConfig = /**
     * @param {?} uiAppId
     * @param {?} useCache
     * @param {?} flushCache
     * @return {?}
     */
    function (uiAppId, useCache, flushCache) {
        // if useCache is false this will trigger the service to update the cached version with latest
        /** @type {?} */
        var ssName = uiAppId + '.liveapps.config.tibcolabs.client.context.PUBLIC';
        return this.sharedStateService.getSharedState(ssName, 'PUBLIC', useCache, flushCache)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (value.sharedStateEntries.length > 0) {
                /** @type {?} */
                var ssresult = new LiveAppsConfig().deserialize(JSON.parse(value.sharedStateEntries[0].content.json));
                ssresult.id = value.sharedStateEntries[0].id;
                return ssresult;
            }
            else {
                return undefined;
            }
        })));
    };
    /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} liveappsConfig
     * @param {?} id
     * @return {?}
     */
    TcLiveAppsConfigService.prototype.updateLiveAppsConfig = /**
     * @param {?} sandboxId
     * @param {?} uiAppId
     * @param {?} liveappsConfig
     * @param {?} id
     * @return {?}
     */
    function (sandboxId, uiAppId, liveappsConfig, id) {
        var _this = this;
        /** @type {?} */
        var ssName = uiAppId + '.liveapps.config.tibcolabs.client.context.PUBLIC';
        /** @type {?} */
        var content = new SharedStateContent();
        content.json = TcCoreCommonFunctions.escapeString(JSON.stringify(liveappsConfig));
        /** @type {?} */
        var entry = new SharedStateEntry();
        entry.content = content;
        entry.sandboxId = sandboxId;
        entry.name = ssName;
        entry.type = 'PUBLIC';
        entry.id = id;
        /** @type {?} */
        var ssList = new SharedStateList();
        ssList.sharedStateEntries = [];
        ssList.sharedStateEntries.push(entry);
        return this.sharedStateService.updateSharedState(ssList.sharedStateEntries)
            .pipe(map((/**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            // flush the cache
            _this.getLiveAppsConfig(uiAppId, true, true).subscribe();
            return new LiveAppsConfig().deserialize((JSON.parse(value.sharedStateEntries[0].content.json)));
        })));
    };
    TcLiveAppsConfigService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TcLiveAppsConfigService.ctorParameters = function () { return [
        { type: Location },
        { type: TcSharedStateService }
    ]; };
    /** @nocollapse */ TcLiveAppsConfigService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcLiveAppsConfigService_Factory() { return new TcLiveAppsConfigService(i0.ɵɵinject(i1.Location), i0.ɵɵinject(i2.TcSharedStateService)); }, token: TcLiveAppsConfigService, providedIn: "root" });
    return TcLiveAppsConfigService;
}());
export { TcLiveAppsConfigService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcLiveAppsConfigService.prototype.location;
    /**
     * @type {?}
     * @private
     */
    TcLiveAppsConfigService.prototype.sharedStateService;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGMtbGl2ZS1hcHBzLWNvbmZpZy5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vQHRpYmNvLXRjc3RrL3RjLWxpdmVhcHBzLWxpYi8iLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy90Yy1saXZlLWFwcHMtY29uZmlnLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFM0MsT0FBTyxFQUFDLEdBQUcsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBQ25DLE9BQU8sRUFBQyxRQUFRLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUUscUJBQXFCLEVBQUUsa0JBQWtCLEVBQUUsZ0JBQWdCLEVBQUUsZUFBZSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDNUksT0FBTyxFQUFDLGNBQWMsRUFBQyxNQUFNLDhCQUE4QixDQUFDOzs7O0FBRTVEO0lBS0UsaUNBQW9CLFFBQWtCLEVBQVUsa0JBQXdDO1FBQXBFLGFBQVEsR0FBUixRQUFRLENBQVU7UUFBVSx1QkFBa0IsR0FBbEIsa0JBQWtCLENBQXNCO0lBQ3hGLENBQUM7Ozs7Ozs7SUFFTSxzREFBb0I7Ozs7OztJQUEzQixVQUE0QixTQUFpQixFQUFFLE9BQWUsRUFBRSxjQUE4Qjs7WUFDdEYsTUFBTSxHQUFHLE9BQU8sR0FBRyxrREFBa0Q7O1lBQ3JFLE9BQU8sR0FBdUIsSUFBSSxrQkFBa0IsRUFBRTtRQUM1RCxPQUFPLENBQUMsSUFBSSxHQUFHLHFCQUFxQixDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7UUFFbEYsT0FBTyxJQUFJLENBQUMsa0JBQWtCLENBQUMsaUJBQWlCLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxFQUFFLEVBQUUsU0FBUyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQzth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IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tICdyeGpzJztcbmltcG9ydCB7bWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQge0xvY2F0aW9ufSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xuaW1wb3J0IHtUY1NoYXJlZFN0YXRlU2VydmljZSwgVGNDb3JlQ29tbW9uRnVuY3Rpb25zLCBTaGFyZWRTdGF0ZUNvbnRlbnQsIFNoYXJlZFN0YXRlRW50cnksIFNoYXJlZFN0YXRlTGlzdH0gZnJvbSAnQHRpYmNvLXRjc3RrL3RjLWNvcmUtbGliJztcbmltcG9ydCB7TGl2ZUFwcHNDb25maWd9IGZyb20gJy4uL21vZGVscy90Yy1saXZlYXBwcy1jb25maWcnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290J1xufSlcbmV4cG9ydCBjbGFzcyBUY0xpdmVBcHBzQ29uZmlnU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IocHJpdmF0ZSBsb2NhdGlvbjogTG9jYXRpb24sIHByaXZhdGUgc2hhcmVkU3RhdGVTZXJ2aWNlOiBUY1NoYXJlZFN0YXRlU2VydmljZSkge1xuICB9XG5cbiAgcHVibGljIGNyZWF0ZUxpdmVBcHBzQ29uZmlnKHNhbmRib3hJZDogbnVtYmVyLCB1aUFwcElkOiBzdHJpbmcsIGxpdmVhcHBzQ29uZmlnOiBMaXZlQXBwc0NvbmZpZykge1xuICAgIGNvbnN0IHNzTmFtZSA9IHVpQXBwSWQgKyAnLmxpdmVhcHBzLmNvbmZpZy50aWJjb2xhYnMuY2xpZW50LmNvbnRleHQuUFVCTElDJztcbiAgICBjb25zdCBjb250ZW50OiBTaGFyZWRTdGF0ZUNvbnRlbnQgPSBuZXcgU2hhcmVkU3RhdGVDb250ZW50KCk7XG4gICAgY29udGVudC5qc29uID0gVGNDb3JlQ29tbW9uRnVuY3Rpb25zLmVzY2FwZVN0cmluZyhKU09OLnN0cmluZ2lmeShsaXZlYXBwc0NvbmZpZykpO1xuXG4gICAgcmV0dXJuIHRoaXMuc2hhcmVkU3RhdGVTZXJ2aWNlLmNyZWF0ZVNoYXJlZFN0YXRlKHNzTmFtZSwgJ1BVQkxJQycsICcnLCBzYW5kYm94SWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRlbnQpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKHZhbHVlID0+IHZhbHVlKVxuICAgICAgKTtcbiAgfVxuXG4gIHB1YmxpYyBnZXRMaXZlQXBwc0NvbmZpZyh1aUFwcElkOiBzdHJpbmcsIHVzZUNhY2hlOiBib29sZWFuLCBmbHVzaENhY2hlOiBib29sZWFuKTogT2JzZXJ2YWJsZTxMaXZlQXBwc0NvbmZpZz4ge1xuICAgIC8vIGlmIHVzZUNhY2hlIGlzIGZhbHNlIHRoaXMgd2lsbCB0cmlnZ2VyIHRoZSBzZXJ2aWNlIHRvIHVwZGF0ZSB0aGUgY2FjaGVkIHZlcnNpb24gd2l0aCBsYXRlc3RcbiAgICBjb25zdCBzc05hbWUgPSB1aUFwcElkICsgJy5saXZlYXBwcy5jb25maWcudGliY29sYWJzLmNsaWVudC5jb250ZXh0LlBVQkxJQyc7XG5cbiAgICByZXR1cm4gdGhpcy5zaGFyZWRTdGF0ZVNlcnZpY2UuZ2V0U2hhcmVkU3RhdGUoc3NOYW1lLCAnUFVCTElDJywgdXNlQ2FjaGUsIGZsdXNoQ2FjaGUpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKHZhbHVlID0+IHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5zaGFyZWRTdGF0ZUVudHJpZXMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICBjb25zdCBzc3Jlc3VsdCA9IG5ldyBMaXZlQXBwc0NvbmZpZygpLmRlc2VyaWFsaXplKEpTT04ucGFyc2UodmFsdWUuc2hhcmVkU3RhdGVFbnRyaWVzWzBdLmNvbnRlbnQuanNvbikpO1xuICAgICAgICAgICAgICBzc3Jlc3VsdC5pZCA9IHZhbHVlLnNoYXJlZFN0YXRlRW50cmllc1swXS5pZDtcbiAgICAgICAgICAgICAgcmV0dXJuIHNzcmVzdWx0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIClcbiAgICAgICk7XG4gIH1cblxuICBwdWJsaWMgdXBkYXRlTGl2ZUFwcHNDb25maWcoc2FuZGJveElkOiBudW1iZXIsIHVpQXBwSWQ6IHN0cmluZywgbGl2ZWFwcHNDb25maWc6IExpdmVBcHBzQ29uZmlnLCBpZDogc3RyaW5nKSB7XG4gICAgY29uc3Qgc3NOYW1lID0gdWlBcHBJZCArICcubGl2ZWFwcHMuY29uZmlnLnRpYmNvbGFicy5jbGllbnQuY29udGV4dC5QVUJMSUMnO1xuICAgIGNvbnN0IGNvbnRlbnQ6IFNoYXJlZFN0YXRlQ29udGVudCA9IG5ldyBTaGFyZWRTdGF0ZUNvbnRlbnQoKTtcbiAgICBjb250ZW50Lmpzb24gPSBUY0NvcmVDb21tb25GdW5jdGlvbnMuZXNjYXBlU3RyaW5nKEpTT04uc3RyaW5naWZ5KGxpdmVhcHBzQ29uZmlnKSk7XG4gICAgY29uc3QgZW50cnk6IFNoYXJlZFN0YXRlRW50cnkgPSBuZXcgU2hhcmVkU3RhdGVFbnRyeSgpO1xuICAgIGVudHJ5LmNvbnRlbnQgPSBjb250ZW50O1xuICAgIGVudHJ5LnNhbmRib3hJZCA9IHNhbmRib3hJZDtcbiAgICBlbnRyeS5uYW1lID0gc3NOYW1lO1xuICAgIGVudHJ5LnR5cGUgPSAnUFVCTElDJztcbiAgICBlbnRyeS5pZCA9IGlkO1xuICAgIGNvbnN0IHNzTGlzdDogU2hhcmVkU3RhdGVMaXN0ID0gbmV3IFNoYXJlZFN0YXRlTGlzdCgpO1xuICAgIHNzTGlzdC5zaGFyZWRTdGF0ZUVudHJpZXMgPSBbXTtcbiAgICBzc0xpc3Quc2hhcmVkU3RhdGVFbnRyaWVzLnB1c2goZW50cnkpO1xuXG4gICAgcmV0dXJuIHRoaXMuc2hhcmVkU3RhdGVTZXJ2aWNlLnVwZGF0ZVNoYXJlZFN0YXRlKHNzTGlzdC5zaGFyZWRTdGF0ZUVudHJpZXMpXG4gICAgICAucGlwZShcbiAgICAgICAgbWFwKHZhbHVlID0+IHtcbiAgICAgICAgICAvLyBmbHVzaCB0aGUgY2FjaGVcbiAgICAgICAgICB0aGlzLmdldExpdmVBcHBzQ29uZmlnKHVpQXBwSWQsIHRydWUsIHRydWUpLnN1YnNjcmliZSgpO1xuICAgICAgICAgIHJldHVybiBuZXcgTGl2ZUFwcHNDb25maWcoKS5kZXNlcmlhbGl6ZSgoSlNPTi5wYXJzZSh2YWx1ZS5zaGFyZWRTdGF0ZUVudHJpZXNbMF0uY29udGVudC5qc29uKSkpO1xuICAgICAgICB9KVxuICAgICAgKTtcbiAgfVxufVxuXG4iXX0=