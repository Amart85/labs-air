/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { HttpClient } from '@angular/common/http';
import { CaseActionsList, CaseCreatorsList, JsonSchema, Process } from '../models/liveappsdata';
import { LaProcessSelection } from '../models/tc-case-processes';
import { LiveAppsService } from './live-apps.service';
import { flatMap, map, tap } from 'rxjs/operators';
import { TcCaseDataService } from './tc-case-data.service';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common/http";
import * as i2 from "./live-apps.service";
import * as i3 from "./tc-case-data.service";
var TcCaseProcessesService = /** @class */ (function () {
    function TcCaseProcessesService(http, liveAppsService, caseDataService) {
        var _this = this;
        this.http = http;
        this.liveAppsService = liveAppsService;
        this.caseDataService = caseDataService;
        this.getCaseIDAttributeName = (/**
         * @param {?} caseType
         * @return {?}
         */
        function (caseType) {
            /** @type {?} */
            var caseIdAttrib;
            caseType.attributes.forEach((/**
             * @param {?} attribute
             * @return {?}
             */
            function (attribute) {
                if (attribute.isIdentifier) {
                    caseIdAttrib = attribute;
                }
            }));
            return caseIdAttrib;
        });
        // this is a helper function that given a case type 'schema' for the whole application will create an LaProcessSelection object
        // containing both the appSchema and particular details for this action
        // this object is required to submit the process later.
        this.createLaProcessSelection = (/**
         * @param {?} schema
         * @param {?} appId
         * @param {?} typeId
         * @param {?} action
         * @param {?} creator
         * @param {?} caseRef
         * @return {?}
         */
        function (schema, appId, typeId, action, creator, caseRef) {
            /** @type {?} */
            var processSelection;
            schema.casetypes.forEach((/**
             * @param {?} casetype
             * @return {?}
             */
            function (casetype) {
                // the schema will contain definitions for both the 'case' and any defined types in that case.
                // We want the schema for this 'case'.
                if (casetype.applicationId === appId && casetype.id === typeId) {
                    // if ( casetype.jsonSchema !== undefined) {
                    if (action) {
                        /** @type {?} */
                        var caseActionList = casetype.actions ? casetype.actions : [];
                        // now find the selected action
                        caseActionList.forEach((/**
                         * @param {?} actionDef
                         * @return {?}
                         */
                        function (actionDef) {
                            if (action.id === actionDef.id) {
                                if (!actionDef.jsonSchema) {
                                    // create blank form schema
                                    actionDef.jsonSchema = new JsonSchema();
                                    actionDef.jsonSchema.type = 'object';
                                    actionDef.jsonSchema.properties = [];
                                }
                                processSelection = new LaProcessSelection('action', schema, _this.getCaseIDAttributeName(casetype), actionDef, 
                                // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
                                (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'action' + '.' + actionDef.name), caseRef);
                            }
                        }));
                        if (!processSelection) {
                            // no schema for this process
                            /** @type {?} */
                            var process = new Process().deserialize({ jsonSchema: { $schema: 'NOSCHEMA' }, name: action.name, id: action.id });
                            processSelection = new LaProcessSelection('action', schema, _this.getCaseIDAttributeName(casetype), process, 
                            // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
                            (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'action' + '.' + action.name), caseRef);
                        }
                    }
                    else if (creator) {
                        /** @type {?} */
                        var caseCreatorList = casetype.creators ? casetype.creators : [];
                        // now find the selected action
                        caseCreatorList.forEach((/**
                         * @param {?} creatorDef
                         * @return {?}
                         */
                        function (creatorDef) {
                            if (creator.id === creatorDef.id) {
                                if (!creatorDef.jsonSchema) {
                                    // create blank form schema
                                    creatorDef.jsonSchema = new JsonSchema();
                                    creatorDef.jsonSchema.type = 'object';
                                    creatorDef.jsonSchema.properties = [];
                                }
                                processSelection = new LaProcessSelection('creator', schema, _this.getCaseIDAttributeName(casetype), creatorDef, 
                                // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
                                (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'creator' + '.' + creatorDef.name), null);
                            }
                        }));
                        if (!processSelection) {
                            // no schema for this process
                            /** @type {?} */
                            var process = new Process().deserialize({ jsonSchema: { $schema: 'NOSCHEMA' }, name: creator.name, id: creator.id });
                            processSelection = new LaProcessSelection('creator', schema, _this.getCaseIDAttributeName(casetype), process, 
                            // Format of ref is <applicationName>.<applicationInternalName>.<processType>.<processName>
                            (casetype.applicationName + '.' + casetype.applicationInternalName + '.' + 'creator' + '.' + creator.name), null);
                        }
                    }
                }
                // }
            }));
            return processSelection;
        });
    }
    //  This service gets the case state then uses that and the caseRef to get the available actions.
    //  This service gets the case state then uses that and the caseRef to get the available actions.
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @return {?}
     */
    TcCaseProcessesService.prototype.getCaseActionsForCaseRef = 
    //  This service gets the case state then uses that and the caseRef to get the available actions.
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @return {?}
     */
    function (caseRef, sandboxId, appId, typeId) {
        var _this = this;
        /** @type {?} */
        var caseState$ = this.caseDataService.getCaseState(caseRef, sandboxId);
        /** @type {?} */
        var caseActions$ = caseState$.pipe(flatMap((/**
         * @param {?} caseState
         * @return {?}
         */
        function (caseState) {
            return _this.getCaseActions(caseRef, sandboxId, appId, typeId, caseState);
        })));
        return caseActions$;
    };
    // todo: Note this is not a public API - update when Public API available
    // todo: Note this is not a public API - update when Public API available
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} caseState
     * @return {?}
     */
    TcCaseProcessesService.prototype.getCaseActions = 
    // todo: Note this is not a public API - update when Public API available
    /**
     * @param {?} caseRef
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @param {?} caseState
     * @return {?}
     */
    function (caseRef, sandboxId, appId, typeId, caseState) {
        // https://eu.liveapps.cloud.tibco.com/pageflow/caseActions?$sandbox=31&
        // $filter=applicationId%20eq%201742%20and%20caseType%20eq%201%20and%20caseState%20eq%20Responded%20and%20caseRef%20eq%20150491
        /** @type {?} */
        var url = '/pageflow/v1/caseActions?$sandbox=' + sandboxId
            + '&$filter=applicationId eq ' + appId
            + ' and caseType eq ' + typeId
            + ' and caseState eq ' + caseState
            + ' and caseRef eq ' + caseRef;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} caseactions
         * @return {?}
         */
        function (caseactions) {
            /** @type {?} */
            var caList = new CaseActionsList().deserialize(caseactions);
            // non public API returns action Id as number, switch to string to match other APIs
            caList.actions.forEach((/**
             * @param {?} action
             * @return {?}
             */
            function (action) {
                if (typeof action.id === 'number') {
                    action.id = String(action.id);
                }
            }));
            return caList;
        })));
    };
    // todo: Note this is not a public API - update when Public API available
    // todo: Note this is not a public API - update when Public API available
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @return {?}
     */
    TcCaseProcessesService.prototype.getCaseCreators = 
    // todo: Note this is not a public API - update when Public API available
    /**
     * @param {?} sandboxId
     * @param {?} appId
     * @param {?} typeId
     * @return {?}
     */
    function (sandboxId, appId, typeId) {
        /** @type {?} */
        var url = '/pageflow/v1/caseCreators?$sandbox=' + sandboxId
            + '&$filter=applicationId eq ' + appId
            + ' and caseType eq ' + typeId;
        return this.http.get(url)
            .pipe(tap((/**
         * @param {?} val
         * @return {?}
         */
        function (val) { return sessionStorage.setItem('tcsTimestamp', Date.now().toString()); })), map((/**
         * @param {?} casecreators
         * @return {?}
         */
        function (casecreators) {
            /** @type {?} */
            var ccList = new CaseCreatorsList().deserialize(casecreators);
            // non public API returns creator Id as number, switch to string to match other APIs
            ccList.creators.forEach((/**
             * @param {?} creator
             * @return {?}
             */
            function (creator) {
                if (typeof creator.id === 'number') {
                    creator.id = String(creator.id);
                }
            }));
            return ccList;
        })));
    };
    /**
     * @param {?} caseRef
     * @param {?} appId
     * @param {?} typeId
     * @param {?} sandboxId
     * @param {?} action
     * @param {?} creator
     * @param {?} top
     * @return {?}
     */
    TcCaseProcessesService.prototype.getProcessDetails = /**
     * @param {?} caseRef
     * @param {?} appId
     * @param {?} typeId
     * @param {?} sandboxId
     * @param {?} action
     * @param {?} creator
     * @param {?} top
     * @return {?}
     */
    function (caseRef, appId, typeId, sandboxId, action, creator, top) {
        var _this = this;
        return this.liveAppsService.getCaseTypeSchema(sandboxId, appId, top).pipe(map((/**
         * @param {?} schema
         * @return {?}
         */
        function (schema) {
            return _this.createLaProcessSelection(schema, appId, typeId, action ? action : null, creator ? creator : null, caseRef);
        })));
    };
    TcCaseProcessesService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    TcCaseProcessesService.ctorParameters = function () { return [
        { type: HttpClient },
        { type: LiveAppsService },
        { type: TcCaseDataService }
    ]; };
    /** @nocollapse */ TcCaseProcessesService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function TcCaseProcessesService_Factory() { return new TcCaseProcessesService(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.LiveAppsService), i0.ɵɵinject(i3.TcCaseDataService)); }, token: TcCaseProcessesService, providedIn: "root" });
    return TcCaseProcessesService;
}());
export { TcCaseProcessesService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    TcCaseProcessesService.prototype.getCaseIDAttributeName;
    /**
     * @type {?}
     * @private
     */
    TcCaseProcessesService.prototype.createLaProcessSelection;
    /**
     * @type {?}
     * @private
     */
    TcCaseProcessesService.prototype.http;
    /**
     * @type {?}
     * @private
     */
    TcCaseProcessesService.prototype.liveAppsService;
    /**
     * @type {?}
     * @private
     */
    TcCaseProcessesService.prototype.caseDataService;
}
//# sourceMappingURL=data:application/json;base64,